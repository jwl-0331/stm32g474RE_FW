
stm32g474_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011238  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08011418  08011418  00021418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011bcc  08011bcc  00030364  2**0
                  CONTENTS
  4 .ARM          00000008  08011bcc  08011bcc  00021bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011bd4  08011bd4  00030364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011bd4  08011bd4  00021bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011bd8  08011bd8  00021bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  08011bdc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00030364  2**0
                  CONTENTS
 10 .bss          0000334c  20000364  20000364  00030364  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200036b0  200036b0  00030364  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e59f  00000000  00000000  000303d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005874  00000000  00000000  0004e976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018d8  00000000  00000000  000541f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012a6  00000000  00000000  00055ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d241  00000000  00000000  00056d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000278e8  00000000  00000000  00083faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8605  00000000  00000000  000ab897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000762c  00000000  00000000  001a3e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001ab4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000364 	.word	0x20000364
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011400 	.word	0x08011400

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000368 	.word	0x20000368
 800021c:	08011400 	.word	0x08011400

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff33 	bl	8000b3c <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fca9 	bl	8000658 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc2a 	bl	8000564 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fca0 	bl	8000658 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff fae2 	bl	80002e8 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <apInit>:
static uint32_t g_LEDOffTime = 200;
static uint32_t nextmill = 0;
*/

void apInit(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  //uartOpen(_DEF_UART1, 115200);
  cliOpen(_DEF_UART1, 115200);
 8001004:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001008:	2000      	movs	r0, #0
 800100a:	f000 ffc1 	bl	8001f90 <cliOpen>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}

08001012 <apMain>:

void apMain(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
  uint32_t pre_time1 = millis();
 8001018:	f000 f87b 	bl	8001112 <millis>
 800101c:	6078      	str	r0, [r7, #4]
  uint32_t pre_time2 = millis();
 800101e:	f000 f878 	bl	8001112 <millis>
 8001022:	6038      	str	r0, [r7, #0]
  swtimerISR();
 8001024:	f002 f996 	bl	8003354 <swtimerISR>
          uartPrintf(_DEF_UART1,"Write Fail\n");
        }
      }
    }
    */
    cliMain();
 8001028:	f001 f86a 	bl	8002100 <cliMain>
 800102c:	e7fc      	b.n	8001028 <apMain+0x16>
	...

08001030 <bspInit>:
#include "usb_device.h"

void SystemClock_Config(void);

bool bspInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <bspInit+0xc8>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103a:	4a2f      	ldr	r2, [pc, #188]	; (80010f8 <bspInit+0xc8>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6613      	str	r3, [r2, #96]	; 0x60
 8001042:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <bspInit+0xc8>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]


  HAL_Init();
 800104e:	f002 fe81 	bl	8003d54 <HAL_Init>
  SystemClock_Config();
 8001052:	f000 f865 	bl	8001120 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <bspInit+0xc8>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a27      	ldr	r2, [pc, #156]	; (80010f8 <bspInit+0xc8>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <bspInit+0xc8>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0320 	and.w	r3, r3, #32
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <bspInit+0xc8>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <bspInit+0xc8>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <bspInit+0xc8>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]

  /* USB - RESET 시 장치관리자 해제 연결 안될 시 */

  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]
  // PA12(USB_DP) 출력 설정
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 8001096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800109c:	2311      	movs	r3, #17
 800109e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b2:	f003 f8b1 	bl	8004218 <HAL_GPIO_Init>

  //회로에 PULL UP 이 걸려있다면 - 내리고
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	f003 fa44 	bl	800454c <HAL_GPIO_WritePin>
  delay(100);
 80010c4:	2064      	movs	r0, #100	; 0x64
 80010c6:	f000 f819 	bl	80010fc <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f003 fa3a 	bl	800454c <HAL_GPIO_WritePin>

  // INPUT 으로 다시 변경
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f003 f897 	bl	8004218 <HAL_GPIO_Init>

  MX_USB_Device_Init();
 80010ea:	f00c fa45 	bl	800d578 <MX_USB_Device_Init>

  return true;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000

080010fc <delay>:

void delay(uint32_t time_ms)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_Delay(time_ms);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f002 fe95 	bl	8003e34 <HAL_Delay>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <millis>:

uint32_t millis(void)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001116:	f002 fe81 	bl	8003e1c <HAL_GetTick>
 800111a:	4603      	mov	r3, r0
}
 800111c:	4618      	mov	r0, r3
 800111e:	bd80      	pop	{r7, pc}

08001120 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b094      	sub	sp, #80	; 0x50
 8001124:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <SystemClock_Config+0xb0>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a29      	ldr	r2, [pc, #164]	; (80011d0 <SystemClock_Config+0xb0>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <SystemClock_Config+0xb0>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0318 	add.w	r3, r7, #24
 8001142:	2238      	movs	r2, #56	; 0x38
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f00e f872 	bl	800f230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800115a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800115e:	f004 ff5b 	bl	8006018 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001162:	2309      	movs	r3, #9
 8001164:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001166:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800116a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800116c:	2301      	movs	r3, #1
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001170:	2302      	movs	r3, #2
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001174:	2303      	movs	r3, #3
 8001176:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001178:	2302      	movs	r3, #2
 800117a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800117c:	2308      	movs	r3, #8
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001180:	2302      	movs	r3, #2
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001184:	2302      	movs	r3, #2
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001188:	2302      	movs	r3, #2
 800118a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	f107 0318 	add.w	r3, r7, #24
 8001190:	4618      	mov	r0, r3
 8001192:	f005 f877 	bl	8006284 <HAL_RCC_OscConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800119c:	f000 f81a 	bl	80011d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a0:	230f      	movs	r3, #15
 80011a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a4:	2303      	movs	r3, #3
 80011a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2101      	movs	r1, #1
 80011b8:	4618      	mov	r0, r3
 80011ba:	f005 fb75 	bl	80068a8 <HAL_RCC_ClockConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80011c4:	f000 f806 	bl	80011d4 <Error_Handler>
  }
}
 80011c8:	bf00      	nop
 80011ca:	3750      	adds	r7, #80	; 0x50
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40021000 	.word	0x40021000

080011d4 <Error_Handler>:


void Error_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_MspInit+0x44>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <HAL_MspInit+0x44>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6613      	str	r3, [r2, #96]	; 0x60
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <HAL_MspInit+0x44>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_MspInit+0x44>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <HAL_MspInit+0x44>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	6593      	str	r3, [r2, #88]	; 0x58
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_MspInit+0x44>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800121a:	f004 ffa1 	bl	8006160 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	e7fe      	b.n	8001230 <NMI_Handler+0x4>

08001232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <MemManage_Handler+0x4>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <UsageFault_Handler+0x4>

0800124a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001278:	f002 fdbe 	bl	8003df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <USB_LP_IRQHandler+0x10>)
 8001286:	f003 fa83 	bl	8004790 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20003068 	.word	0x20003068

08001294 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <USART1_IRQHandler+0x10>)
 800129a:	f006 f9e5 	bl	8007668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000ac4 	.word	0x20000ac4

080012a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return 1;
 80012ac:	2301      	movs	r3, #1
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <_kill>:

int _kill(int pid, int sig)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012c2:	f00e f841 	bl	800f348 <__errno>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2216      	movs	r2, #22
 80012ca:	601a      	str	r2, [r3, #0]
  return -1;
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_exit>:

void _exit (int status)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ffe7 	bl	80012b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012ea:	e7fe      	b.n	80012ea <_exit+0x12>

080012ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	e00a      	b.n	8001314 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012fe:	f3af 8000 	nop.w
 8001302:	4601      	mov	r1, r0
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	60ba      	str	r2, [r7, #8]
 800130a:	b2ca      	uxtb	r2, r1
 800130c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3301      	adds	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	429a      	cmp	r2, r3
 800131a:	dbf0      	blt.n	80012fe <_read+0x12>
  }

  return len;
 800131c:	687b      	ldr	r3, [r7, #4]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	e009      	b.n	800134c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	60ba      	str	r2, [r7, #8]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	dbf1      	blt.n	8001338 <_write+0x12>
  }
  return len;
 8001354:	687b      	ldr	r3, [r7, #4]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_close>:

int _close(int file)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001386:	605a      	str	r2, [r3, #4]
  return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <_isatty>:

int _isatty(int file)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d0:	4a14      	ldr	r2, [pc, #80]	; (8001424 <_sbrk+0x5c>)
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <_sbrk+0x60>)
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <_sbrk+0x64>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <_sbrk+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d207      	bcs.n	8001408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f8:	f00d ffa6 	bl	800f348 <__errno>
 80013fc:	4603      	mov	r3, r0
 80013fe:	220c      	movs	r2, #12
 8001400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e009      	b.n	800141c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <_sbrk+0x64>)
 8001418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20020000 	.word	0x20020000
 8001428:	00000400 	.word	0x00000400
 800142c:	20000380 	.word	0x20000380
 8001430:	200036b0 	.word	0x200036b0

08001434 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <SystemInit+0x20>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <SystemInit+0x20>)
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800145a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800145c:	f7ff ffea 	bl	8001434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001460:	480c      	ldr	r0, [pc, #48]	; (8001494 <LoopForever+0x6>)
  ldr r1, =_edata
 8001462:	490d      	ldr	r1, [pc, #52]	; (8001498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <LoopForever+0xe>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001468:	e002      	b.n	8001470 <LoopCopyDataInit>

0800146a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146e:	3304      	adds	r3, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001474:	d3f9      	bcc.n	800146a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001478:	4c0a      	ldr	r4, [pc, #40]	; (80014a4 <LoopForever+0x16>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800147c:	e001      	b.n	8001482 <LoopFillZerobss>

0800147e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001480:	3204      	adds	r2, #4

08001482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001484:	d3fb      	bcc.n	800147e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001486:	f00d ff65 	bl	800f354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800148a:	f00c fe99 	bl	800e1c0 <main>

0800148e <LoopForever>:

LoopForever:
  b LoopForever
 800148e:	e7fe      	b.n	800148e <LoopForever>
  ldr   r0, =_estack
 8001490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 800149c:	08011bdc 	.word	0x08011bdc
  ldr r2, =_sbss
 80014a0:	20000364 	.word	0x20000364
  ldr r4, =_ebss
 80014a4:	200036b0 	.word	0x200036b0

080014a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC1_2_IRQHandler>

080014aa <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b087      	sub	sp, #28
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80014b6:	2301      	movs	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2201      	movs	r2, #1
 80014d0:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	611a      	str	r2, [r3, #16]

  return ret;
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <qbufferWrite>:

  return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b08b      	sub	sp, #44	; 0x2c
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80014f2:	2301      	movs	r3, #1
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t next_in;


  for (int i=0; i<length; i++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
 80014fc:	e043      	b.n	8001586 <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	6892      	ldr	r2, [r2, #8]
 8001508:	fbb3 f1f2 	udiv	r1, r3, r2
 800150c:	fb01 f202 	mul.w	r2, r1, r2
 8001510:	1a9b      	subs	r3, r3, r2
 8001512:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	429a      	cmp	r2, r3
 800151c:	d02c      	beq.n	8001578 <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d024      	beq.n	8001570 <qbufferWrite+0x8a>
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d021      	beq.n	8001570 <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68f9      	ldr	r1, [r7, #12]
 8001536:	68c9      	ldr	r1, [r1, #12]
 8001538:	fb01 f303 	mul.w	r3, r1, r3
 800153c:	4413      	add	r3, r2
 800153e:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
 8001544:	e00a      	b.n	800155c <qbufferWrite+0x76>
        {
          p_buf[i] = p_data[i];
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	441a      	add	r2, r3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	6979      	ldr	r1, [r7, #20]
 8001550:	440b      	add	r3, r1
 8001552:	7812      	ldrb	r2, [r2, #0]
 8001554:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	429a      	cmp	r2, r3
 8001564:	d8ef      	bhi.n	8001546 <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	4413      	add	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e003      	b.n	8001580 <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 8001578:	2300      	movs	r3, #0
 800157a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800157e:	e006      	b.n	800158e <qbufferWrite+0xa8>
  for (int i=0; i<length; i++)
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	3301      	adds	r3, #1
 8001584:	623b      	str	r3, [r7, #32]
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	d8b7      	bhi.n	80014fe <qbufferWrite+0x18>
    }
  }

  return ret;
 800158e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001592:	4618      	mov	r0, r3
 8001594:	372c      	adds	r7, #44	; 0x2c
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800159e:	b480      	push	{r7}
 80015a0:	b089      	sub	sp, #36	; 0x24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80015aa:	2301      	movs	r3, #1
 80015ac:	77fb      	strb	r3, [r7, #31]


  for (int i=0; i<length; i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	e041      	b.n	8001638 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d024      	beq.n	8001606 <qbufferRead+0x68>
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d021      	beq.n	8001606 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	691a      	ldr	r2, [r3, #16]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	68f9      	ldr	r1, [r7, #12]
 80015cc:	68c9      	ldr	r1, [r1, #12]
 80015ce:	fb01 f303 	mul.w	r3, r1, r3
 80015d2:	4413      	add	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e00a      	b.n	80015f2 <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	441a      	add	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	440b      	add	r3, r1
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3301      	adds	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8ef      	bhi.n	80015dc <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	4413      	add	r3, r2
 8001604:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d00c      	beq.n	800162c <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	3301      	adds	r3, #1
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	6892      	ldr	r2, [r2, #8]
 800161c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001620:	fb01 f202 	mul.w	r2, r1, r2
 8001624:	1a9a      	subs	r2, r3, r2
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	e002      	b.n	8001632 <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 800162c:	2300      	movs	r3, #0
 800162e:	77fb      	strb	r3, [r7, #31]
      break;
 8001630:	e006      	b.n	8001640 <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	3301      	adds	r3, #1
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	d8b9      	bhi.n	80015b4 <qbufferRead+0x16>
    }
  }

  return ret;
 8001640:	7ffb      	ldrb	r3, [r7, #31]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800164e:	b480      	push	{r7}
 8001650:	b085      	sub	sp, #20
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6892      	ldr	r2, [r2, #8]
 8001664:	fbb3 f1f2 	udiv	r1, r3, r2
 8001668:	fb01 f202 	mul.w	r2, r1, r2
 800166c:	1a9b      	subs	r3, r3, r2
 800166e:	60fb      	str	r3, [r7, #12]

  return ret;
 8001670:	68fb      	ldr	r3, [r7, #12]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <buttonInit>:
extern void buttonISR(void *arg);
extern bool buttonGetPin(uint8_t ch);


bool buttonInit(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08c      	sub	sp, #48	; 0x30
 8001684:	af02      	add	r7, sp, #8
  bool ret = true;
 8001686:	2301      	movs	r3, #1
 8001688:	76fb      	strb	r3, [r7, #27]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <buttonInit+0x15c>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169c:	4a4f      	ldr	r2, [pc, #316]	; (80017dc <buttonInit+0x15c>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a4:	4b4d      	ldr	r3, [pc, #308]	; (80017dc <buttonInit+0x15c>)
 80016a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	603b      	str	r3, [r7, #0]
 80016ae:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]

  for(int i=0; i < BTN_MAX_CH; i++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
 80016bc:	e011      	b.n	80016e2 <buttonInit+0x62>
  {
    GPIO_InitStruct.Pin = button_pin[i].pin;
 80016be:	4948      	ldr	r1, [pc, #288]	; (80017e0 <buttonInit+0x160>)
 80016c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c2:	4613      	mov	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	3304      	adds	r3, #4
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(PC13_BLU_SW_GPIO_Port, &GPIO_InitStruct);
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	4843      	ldr	r0, [pc, #268]	; (80017e4 <buttonInit+0x164>)
 80016d8:	f002 fd9e 	bl	8004218 <HAL_GPIO_Init>
  for(int i=0; i < BTN_MAX_CH; i++)
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	3301      	adds	r3, #1
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	ddea      	ble.n	80016be <buttonInit+0x3e>
  }

  for(int i=0; i < BTN_MAX_CH; i++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
 80016ec:	e040      	b.n	8001770 <buttonInit+0xf0>
  {
    button_tbl[i].pressed = 0;
 80016ee:	4a3e      	ldr	r2, [pc, #248]	; (80017e8 <buttonInit+0x168>)
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
    button_tbl[i].pressed_cnt = 0;
 80016fe:	4a3a      	ldr	r2, [pc, #232]	; (80017e8 <buttonInit+0x168>)
 8001700:	6a3b      	ldr	r3, [r7, #32]
 8001702:	212c      	movs	r1, #44	; 0x2c
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	4413      	add	r3, r2
 800170a:	3302      	adds	r3, #2
 800170c:	2200      	movs	r2, #0
 800170e:	801a      	strh	r2, [r3, #0]
    button_tbl[i].pressed_event = 0;
 8001710:	4a35      	ldr	r2, [pc, #212]	; (80017e8 <buttonInit+0x168>)
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	212c      	movs	r1, #44	; 0x2c
 8001716:	fb01 f303 	mul.w	r3, r1, r3
 800171a:	4413      	add	r3, r2
 800171c:	3301      	adds	r3, #1
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]

    button_tbl[i].released = 0;
 8001722:	4a31      	ldr	r2, [pc, #196]	; (80017e8 <buttonInit+0x168>)
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	212c      	movs	r1, #44	; 0x2c
 8001728:	fb01 f303 	mul.w	r3, r1, r3
 800172c:	4413      	add	r3, r2
 800172e:	330c      	adds	r3, #12
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released_event = 0;
 8001734:	4a2c      	ldr	r2, [pc, #176]	; (80017e8 <buttonInit+0x168>)
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	212c      	movs	r1, #44	; 0x2c
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	330d      	adds	r3, #13
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]

    button_tbl[i].repeat_cnt = 0;
 8001746:	4a28      	ldr	r2, [pc, #160]	; (80017e8 <buttonInit+0x168>)
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	212c      	movs	r1, #44	; 0x2c
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	4413      	add	r3, r2
 8001752:	331c      	adds	r3, #28
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
    button_tbl[i].repeat_update = 0;
 8001758:	4a23      	ldr	r2, [pc, #140]	; (80017e8 <buttonInit+0x168>)
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	212c      	movs	r1, #44	; 0x2c
 800175e:	fb01 f303 	mul.w	r3, r1, r3
 8001762:	4413      	add	r3, r2
 8001764:	3318      	adds	r3, #24
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
  for(int i=0; i < BTN_MAX_CH; i++)
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	3301      	adds	r3, #1
 800176e:	623b      	str	r3, [r7, #32]
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	2b00      	cmp	r3, #0
 8001774:	ddbb      	ble.n	80016ee <buttonInit+0x6e>
  }

  for (int i=0; i<BTN_EVENT_MAX; i++)
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e007      	b.n	800178c <buttonInit+0x10c>
  {
   event_tbl[i] = NULL;
 800177c:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <buttonInit+0x16c>)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	2100      	movs	r1, #0
 8001782:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i=0; i<BTN_EVENT_MAX; i++)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3301      	adds	r3, #1
 800178a:	61fb      	str	r3, [r7, #28]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b07      	cmp	r3, #7
 8001790:	ddf4      	ble.n	800177c <buttonInit+0xfc>
  }

  swtimer_handle_t timer_ch;
  timer_ch = swtimerGetHandle();
 8001792:	f001 fee1 	bl	8003558 <swtimerGetHandle>
 8001796:	4603      	mov	r3, r0
 8001798:	833b      	strh	r3, [r7, #24]
  if (timer_ch >= 0)
 800179a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db0e      	blt.n	80017c0 <buttonInit+0x140>
  {
    swtimerSet(timer_ch, 10, LOOP_TIME, buttonISR, NULL);
 80017a2:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80017a6:	2300      	movs	r3, #0
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <buttonInit+0x170>)
 80017ac:	2202      	movs	r2, #2
 80017ae:	210a      	movs	r1, #10
 80017b0:	f001 fe54 	bl	800345c <swtimerSet>
    swtimerStart(timer_ch);
 80017b4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f001 fe9d 	bl	80034f8 <swtimerStart>
 80017be:	e003      	b.n	80017c8 <buttonInit+0x148>
  }
  else
  {
    uartPrintf(_DEF_UART1,"[NG] buttonInit()\n     swtimerGetHandle()\n");
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <buttonInit+0x174>)
 80017c2:	2000      	movs	r0, #0
 80017c4:	f001 fff6 	bl	80037b4 <uartPrintf>
  }
#ifdef _USE_HW_CLI
  cliAdd("BUTTON", cliButton);
 80017c8:	490b      	ldr	r1, [pc, #44]	; (80017f8 <buttonInit+0x178>)
 80017ca:	480c      	ldr	r0, [pc, #48]	; (80017fc <buttonInit+0x17c>)
 80017cc:	f001 f9b8 	bl	8002b40 <cliAdd>
#endif
  return ret;
 80017d0:	7efb      	ldrb	r3, [r7, #27]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	080117d4 	.word	0x080117d4
 80017e4:	48000800 	.word	0x48000800
 80017e8:	20000384 	.word	0x20000384
 80017ec:	200003b4 	.word	0x200003b4
 80017f0:	08001869 	.word	0x08001869
 80017f4:	0801142c 	.word	0x0801142c
 80017f8:	08001cf9 	.word	0x08001cf9
 80017fc:	08011458 	.word	0x08011458

08001800 <buttonEventInit>:

bool  buttonEventInit(button_event_t *p_event, uint8_t level)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]

  if(event_cnt < BTN_EVENT_MAX)
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <buttonEventInit+0x60>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	2b07      	cmp	r3, #7
 8001816:	d81e      	bhi.n	8001856 <buttonEventInit+0x56>
  {
    memset(p_event, 0, sizeof(button_event_t));
 8001818:	2206      	movs	r2, #6
 800181a:	2100      	movs	r1, #0
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f00d fd07 	bl	800f230 <memset>

    event_tbl[event_cnt] = p_event;
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <buttonEventInit+0x60>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	4619      	mov	r1, r3
 8001828:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <buttonEventInit+0x64>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    p_event->level = level;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	705a      	strb	r2, [r3, #1]
    p_event->index = event_cnt;
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <buttonEventInit+0x60>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	709a      	strb	r2, [r3, #2]
    event_cnt++;
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <buttonEventInit+0x60>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	b29a      	uxth	r2, r3
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <buttonEventInit+0x60>)
 800184a:	801a      	strh	r2, [r3, #0]

    p_event->is_init = true;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
    ret = true;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200003b0 	.word	0x200003b0
 8001864:	200003b4 	.word	0x200003b4

08001868 <buttonISR>:

void buttonISR(void* args)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t repeat_time;

  for (int i=0; i<BTN_MAX_CH; i++)
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	e187      	b.n	8001b86 <buttonISR+0x31e>
  {
    // btn pushed
    if (buttonGetPin(i) == true)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f99e 	bl	8001bbc <buttonGetPin>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8100 	beq.w	8001a88 <buttonISR+0x220>
    {
      //pre btn state - false
      if (button_tbl[i].pressed == false)
 8001888:	4a99      	ldr	r2, [pc, #612]	; (8001af0 <buttonISR+0x288>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	f083 0301 	eor.w	r3, r3, #1
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d03b      	beq.n	8001918 <buttonISR+0xb0>
      {
        button_tbl[i].pressed_event = true;
 80018a0:	4a93      	ldr	r2, [pc, #588]	; (8001af0 <buttonISR+0x288>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	212c      	movs	r1, #44	; 0x2c
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	3301      	adds	r3, #1
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
        button_tbl[i].pressed_start_time = HAL_GetTick();
 80018b2:	f002 fab3 	bl	8003e1c <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	498d      	ldr	r1, [pc, #564]	; (8001af0 <buttonISR+0x288>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	202c      	movs	r0, #44	; 0x2c
 80018be:	fb00 f303 	mul.w	r3, r0, r3
 80018c2:	440b      	add	r3, r1
 80018c4:	3304      	adds	r3, #4
 80018c6:	601a      	str	r2, [r3, #0]

        for (int e_i=0; e_i<event_cnt; e_i++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e01e      	b.n	800190c <buttonISR+0xa4>
        {
          if (event_tbl[e_i]->level <= event_level)
 80018ce:	4a89      	ldr	r2, [pc, #548]	; (8001af4 <buttonISR+0x28c>)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	785a      	ldrb	r2, [r3, #1]
 80018d8:	4b87      	ldr	r3, [pc, #540]	; (8001af8 <buttonISR+0x290>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d809      	bhi.n	80018f4 <buttonISR+0x8c>
            event_tbl[e_i]->pressed_event[i] = true;
 80018e0:	4a84      	ldr	r2, [pc, #528]	; (8001af4 <buttonISR+0x28c>)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	4413      	add	r3, r2
 80018ec:	3303      	adds	r3, #3
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e008      	b.n	8001906 <buttonISR+0x9e>
          else
            event_tbl[e_i]->pressed_event[i] = false;
 80018f4:	4a7f      	ldr	r2, [pc, #508]	; (8001af4 <buttonISR+0x28c>)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	4413      	add	r3, r2
 8001900:	3303      	adds	r3, #3
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
        for (int e_i=0; e_i<event_cnt; e_i++)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	4b7b      	ldr	r3, [pc, #492]	; (8001afc <buttonISR+0x294>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	4293      	cmp	r3, r2
 8001916:	dbda      	blt.n	80018ce <buttonISR+0x66>
        }
      }

      button_tbl[i].pressed = true;
 8001918:	4a75      	ldr	r2, [pc, #468]	; (8001af0 <buttonISR+0x288>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	212c      	movs	r1, #44	; 0x2c
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
      button_tbl[i].pressed_cnt++;
 8001928:	4a71      	ldr	r2, [pc, #452]	; (8001af0 <buttonISR+0x288>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	212c      	movs	r1, #44	; 0x2c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	3302      	adds	r3, #2
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	b298      	uxth	r0, r3
 800193c:	4a6c      	ldr	r2, [pc, #432]	; (8001af0 <buttonISR+0x288>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3302      	adds	r3, #2
 800194a:	4602      	mov	r2, r0
 800194c:	801a      	strh	r2, [r3, #0]

      if (button_tbl[i].repeat_cnt == 0)
 800194e:	4a68      	ldr	r2, [pc, #416]	; (8001af0 <buttonISR+0x288>)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	212c      	movs	r1, #44	; 0x2c
 8001954:	fb01 f303 	mul.w	r3, r1, r3
 8001958:	4413      	add	r3, r2
 800195a:	331c      	adds	r3, #28
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <buttonISR+0x10e>
      {
        repeat_time = button_tbl[i].repeat_time_detect;
 8001962:	4a63      	ldr	r2, [pc, #396]	; (8001af0 <buttonISR+0x288>)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	212c      	movs	r1, #44	; 0x2c
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	4413      	add	r3, r2
 800196e:	3320      	adds	r3, #32
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	e01c      	b.n	80019b0 <buttonISR+0x148>
      }
      else if (button_tbl[i].repeat_cnt == 1)
 8001976:	4a5e      	ldr	r2, [pc, #376]	; (8001af0 <buttonISR+0x288>)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	212c      	movs	r1, #44	; 0x2c
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	331c      	adds	r3, #28
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d109      	bne.n	800199e <buttonISR+0x136>
      {
        repeat_time = button_tbl[i].repeat_time_delay;
 800198a:	4a59      	ldr	r2, [pc, #356]	; (8001af0 <buttonISR+0x288>)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	212c      	movs	r1, #44	; 0x2c
 8001990:	fb01 f303 	mul.w	r3, r1, r3
 8001994:	4413      	add	r3, r2
 8001996:	3324      	adds	r3, #36	; 0x24
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	e008      	b.n	80019b0 <buttonISR+0x148>
      }
      else
      {
        repeat_time = button_tbl[i].repeat_time;
 800199e:	4a54      	ldr	r2, [pc, #336]	; (8001af0 <buttonISR+0x288>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	3328      	adds	r3, #40	; 0x28
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	61fb      	str	r3, [r7, #28]
      }
      if (button_tbl[i].pressed_cnt >= repeat_time)
 80019b0:	4a4f      	ldr	r2, [pc, #316]	; (8001af0 <buttonISR+0x288>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	212c      	movs	r1, #44	; 0x2c
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	3302      	adds	r3, #2
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d84a      	bhi.n	8001a5e <buttonISR+0x1f6>
      {
        button_tbl[i].pressed_cnt = 0;
 80019c8:	4a49      	ldr	r2, [pc, #292]	; (8001af0 <buttonISR+0x288>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	212c      	movs	r1, #44	; 0x2c
 80019ce:	fb01 f303 	mul.w	r3, r1, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	3302      	adds	r3, #2
 80019d6:	2200      	movs	r2, #0
 80019d8:	801a      	strh	r2, [r3, #0]
        button_tbl[i].repeat_cnt++;
 80019da:	4a45      	ldr	r2, [pc, #276]	; (8001af0 <buttonISR+0x288>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	212c      	movs	r1, #44	; 0x2c
 80019e0:	fb01 f303 	mul.w	r3, r1, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	331c      	adds	r3, #28
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	4940      	ldr	r1, [pc, #256]	; (8001af0 <buttonISR+0x288>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	202c      	movs	r0, #44	; 0x2c
 80019f2:	fb00 f303 	mul.w	r3, r0, r3
 80019f6:	440b      	add	r3, r1
 80019f8:	331c      	adds	r3, #28
 80019fa:	601a      	str	r2, [r3, #0]
        button_tbl[i].repeat_update = true;
 80019fc:	4a3c      	ldr	r2, [pc, #240]	; (8001af0 <buttonISR+0x288>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	212c      	movs	r1, #44	; 0x2c
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	3318      	adds	r3, #24
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]

        for (int e_i=0; e_i<event_cnt; e_i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	e01e      	b.n	8001a52 <buttonISR+0x1ea>
        {
          if (event_tbl[e_i]->level <= event_level)
 8001a14:	4a37      	ldr	r2, [pc, #220]	; (8001af4 <buttonISR+0x28c>)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1c:	785a      	ldrb	r2, [r3, #1]
 8001a1e:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <buttonISR+0x290>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d809      	bhi.n	8001a3a <buttonISR+0x1d2>
            event_tbl[e_i]->repeat_event[i] = true;
 8001a26:	4a33      	ldr	r2, [pc, #204]	; (8001af4 <buttonISR+0x28c>)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4413      	add	r3, r2
 8001a32:	3305      	adds	r3, #5
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e008      	b.n	8001a4c <buttonISR+0x1e4>
          else
            event_tbl[e_i]->repeat_event[i] = false;
 8001a3a:	4a2e      	ldr	r2, [pc, #184]	; (8001af4 <buttonISR+0x28c>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4413      	add	r3, r2
 8001a46:	3305      	adds	r3, #5
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
        for (int e_i=0; e_i<event_cnt; e_i++)
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <buttonISR+0x294>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	dbda      	blt.n	8001a14 <buttonISR+0x1ac>
        }
      }

      button_tbl[i].pressed_end_time = HAL_GetTick();
 8001a5e:	f002 f9dd 	bl	8003e1c <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	4922      	ldr	r1, [pc, #136]	; (8001af0 <buttonISR+0x288>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	202c      	movs	r0, #44	; 0x2c
 8001a6a:	fb00 f303 	mul.w	r3, r0, r3
 8001a6e:	440b      	add	r3, r1
 8001a70:	3308      	adds	r3, #8
 8001a72:	601a      	str	r2, [r3, #0]

      button_tbl[i].released = false;
 8001a74:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <buttonISR+0x288>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	212c      	movs	r1, #44	; 0x2c
 8001a7a:	fb01 f303 	mul.w	r3, r1, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	330c      	adds	r3, #12
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e07b      	b.n	8001b80 <buttonISR+0x318>
    }
    else  //btn - release
    {
      // pre btn state - pressed
      if (button_tbl[i].pressed == true)
 8001a88:	4a19      	ldr	r2, [pc, #100]	; (8001af0 <buttonISR+0x288>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	212c      	movs	r1, #44	; 0x2c
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d044      	beq.n	8001b24 <buttonISR+0x2bc>
      {
        button_tbl[i].released_event = true;
 8001a9a:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <buttonISR+0x288>)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	212c      	movs	r1, #44	; 0x2c
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	330d      	adds	r3, #13
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
        button_tbl[i].released_start_time = HAL_GetTick();
 8001aac:	f002 f9b6 	bl	8003e1c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	490f      	ldr	r1, [pc, #60]	; (8001af0 <buttonISR+0x288>)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	202c      	movs	r0, #44	; 0x2c
 8001ab8:	fb00 f303 	mul.w	r3, r0, r3
 8001abc:	440b      	add	r3, r1
 8001abe:	3310      	adds	r3, #16
 8001ac0:	601a      	str	r2, [r3, #0]

        for (int e_i=0; e_i<event_cnt; e_i++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	e027      	b.n	8001b18 <buttonISR+0x2b0>
        {
          if (event_tbl[e_i]->level <= event_level)
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <buttonISR+0x28c>)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad0:	785a      	ldrb	r2, [r3, #1]
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <buttonISR+0x290>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d812      	bhi.n	8001b00 <buttonISR+0x298>
            event_tbl[e_i]->released_event[i] = true;
 8001ada:	4a06      	ldr	r2, [pc, #24]	; (8001af4 <buttonISR+0x28c>)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	e011      	b.n	8001b12 <buttonISR+0x2aa>
 8001aee:	bf00      	nop
 8001af0:	20000384 	.word	0x20000384
 8001af4:	200003b4 	.word	0x200003b4
 8001af8:	2000000d 	.word	0x2000000d
 8001afc:	200003b0 	.word	0x200003b0
          else
            event_tbl[e_i]->released_event[i] = false;
 8001b00:	4a2a      	ldr	r2, [pc, #168]	; (8001bac <buttonISR+0x344>)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
        for (int e_i=0; e_i<event_cnt; e_i++)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3301      	adds	r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <buttonISR+0x348>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4293      	cmp	r3, r2
 8001b22:	dbd1      	blt.n	8001ac8 <buttonISR+0x260>
        }
      }

      button_tbl[i].pressed  = false;
 8001b24:	4a23      	ldr	r2, [pc, #140]	; (8001bb4 <buttonISR+0x34c>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	212c      	movs	r1, #44	; 0x2c
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
      button_tbl[i].released = true;
 8001b34:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <buttonISR+0x34c>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	212c      	movs	r1, #44	; 0x2c
 8001b3a:	fb01 f303 	mul.w	r3, r1, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	330c      	adds	r3, #12
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
      button_tbl[i].repeat_cnt = 0;
 8001b46:	4a1b      	ldr	r2, [pc, #108]	; (8001bb4 <buttonISR+0x34c>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	212c      	movs	r1, #44	; 0x2c
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	331c      	adds	r3, #28
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
      button_tbl[i].repeat_update = false;
 8001b58:	4a16      	ldr	r2, [pc, #88]	; (8001bb4 <buttonISR+0x34c>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	212c      	movs	r1, #44	; 0x2c
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	3318      	adds	r3, #24
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]

      button_tbl[i].released_end_time = HAL_GetTick();
 8001b6a:	f002 f957 	bl	8003e1c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	4910      	ldr	r1, [pc, #64]	; (8001bb4 <buttonISR+0x34c>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	202c      	movs	r0, #44	; 0x2c
 8001b76:	fb00 f303 	mul.w	r3, r0, r3
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3314      	adds	r3, #20
 8001b7e:	601a      	str	r2, [r3, #0]
  for (int i=0; i<BTN_MAX_CH; i++)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	3301      	adds	r3, #1
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f77f ae74 	ble.w	8001876 <buttonISR+0xe>
    }
  }

  uartPrintf("pressed_cnt : %d\nrepeat_cnt : %d\nrepeat_time : %d\n", button_tbl[0].pressed_cnt, button_tbl[0].repeat_cnt, button_tbl[0].repeat_time);
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <buttonISR+0x350>)
 8001b90:	b2d8      	uxtb	r0, r3
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <buttonISR+0x34c>)
 8001b94:	885b      	ldrh	r3, [r3, #2]
 8001b96:	4619      	mov	r1, r3
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <buttonISR+0x34c>)
 8001b9a:	69da      	ldr	r2, [r3, #28]
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <buttonISR+0x34c>)
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	f001 fe08 	bl	80037b4 <uartPrintf>
}
 8001ba4:	bf00      	nop
 8001ba6:	3720      	adds	r7, #32
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200003b4 	.word	0x200003b4
 8001bb0:	200003b0 	.word	0x200003b0
 8001bb4:	20000384 	.word	0x20000384
 8001bb8:	08011460 	.word	0x08011460

08001bbc <buttonGetPin>:

// btn - click : TRUE
bool buttonGetPin(uint8_t ch)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	73fb      	strb	r3, [r7, #15]

  if(ch >= BTN_MAX_CH)
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <buttonGetPin+0x18>
  {
    return false;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e024      	b.n	8001c1e <buttonGetPin+0x62>
  }

  // btn - pushed ret true
  if (HAL_GPIO_ReadPin(button_pin[ch].port, button_pin[ch].pin) == button_pin[ch].on_state)
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	4914      	ldr	r1, [pc, #80]	; (8001c28 <buttonGetPin+0x6c>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	79fa      	ldrb	r2, [r7, #7]
 8001be6:	4910      	ldr	r1, [pc, #64]	; (8001c28 <buttonGetPin+0x6c>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f002 fc8f 	bl	800451c <HAL_GPIO_ReadPin>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4618      	mov	r0, r3
 8001c02:	79fa      	ldrb	r2, [r7, #7]
 8001c04:	4908      	ldr	r1, [pc, #32]	; (8001c28 <buttonGetPin+0x6c>)
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	3308      	adds	r3, #8
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4298      	cmp	r0, r3
 8001c16:	d101      	bne.n	8001c1c <buttonGetPin+0x60>
  {
    ret = true;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	080117d4 	.word	0x080117d4

08001c2c <buttonGetPressed>:
  is_enable = enable;
}

// ret btn state
bool buttonGetPressed(uint8_t ch)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if (ch >= BTN_MAX_CH || is_enable == false)
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d106      	bne.n	8001c4a <buttonGetPressed+0x1e>
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <buttonGetPressed+0x3c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	f083 0301 	eor.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <buttonGetPressed+0x22>
  {
    return false;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e006      	b.n	8001c5c <buttonGetPressed+0x30>
  }

  return button_tbl[ch].pressed;
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <buttonGetPressed+0x40>)
 8001c52:	212c      	movs	r1, #44	; 0x2c
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	781b      	ldrb	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	2000000c 	.word	0x2000000c
 8001c6c:	20000384 	.word	0x20000384

08001c70 <buttonGetName>:

  return ret;
}

const char *buttonGetName(uint8_t ch)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  ch = constrain(ch, 0, BTN_MAX_CH);
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	bf28      	it	cs
 8001c80:	2301      	movcs	r3, #1
 8001c82:	71fb      	strb	r3, [r7, #7]

  return button_name[ch];
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <buttonGetName+0x28>)
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	20000004 	.word	0x20000004

08001c9c <buttonGetPressedTime>:

  return ret;
}

uint32_t buttonGetPressedTime(uint8_t ch)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
  volatile uint32_t ret;


  if (ch >= BTN_MAX_CH || is_enable == false) return 0;
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d106      	bne.n	8001cba <buttonGetPressedTime+0x1e>
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <buttonGetPressedTime+0x54>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	f083 0301 	eor.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <buttonGetPressedTime+0x22>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e012      	b.n	8001ce4 <buttonGetPressedTime+0x48>


  ret = button_tbl[ch].pressed_end_time - button_tbl[ch].pressed_start_time;
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	4a0c      	ldr	r2, [pc, #48]	; (8001cf4 <buttonGetPressedTime+0x58>)
 8001cc2:	212c      	movs	r1, #44	; 0x2c
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	3308      	adds	r3, #8
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	4908      	ldr	r1, [pc, #32]	; (8001cf4 <buttonGetPressedTime+0x58>)
 8001cd2:	202c      	movs	r0, #44	; 0x2c
 8001cd4:	fb00 f303 	mul.w	r3, r0, r3
 8001cd8:	440b      	add	r3, r1
 8001cda:	3304      	adds	r3, #4
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	60fb      	str	r3, [r7, #12]

  return ret;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	2000000c 	.word	0x2000000c
 8001cf4:	20000384 	.word	0x20000384

08001cf8 <cliButton>:
  return ret;
}

#ifdef _USE_HW_CLI
void cliButton(cli_args_t *args)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001d00:	2300      	movs	r3, #0
 8001d02:	77fb      	strb	r3, [r7, #31]


  if (args->argc == 1 && args->isStr(0, "info"))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d125      	bne.n	8001d58 <cliButton+0x60>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	4952      	ldr	r1, [pc, #328]	; (8001e5c <cliButton+0x164>)
 8001d12:	2000      	movs	r0, #0
 8001d14:	4798      	blx	r3
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01d      	beq.n	8001d58 <cliButton+0x60>
  {
    for (int i=0; i<BTN_MAX_CH; i++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	e015      	b.n	8001d4e <cliButton+0x56>
    {
      cliPrintf("%-12s pin %d\n", buttonGetName(i), button_pin[i].pin);
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ffa2 	bl	8001c70 <buttonGetName>
 8001d2c:	4601      	mov	r1, r0
 8001d2e:	484c      	ldr	r0, [pc, #304]	; (8001e60 <cliButton+0x168>)
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4403      	add	r3, r0
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4848      	ldr	r0, [pc, #288]	; (8001e64 <cliButton+0x16c>)
 8001d44:	f000 fdec 	bl	8002920 <cliPrintf>
    for (int i=0; i<BTN_MAX_CH; i++)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	dde6      	ble.n	8001d22 <cliButton+0x2a>
    }
    ret = true;
 8001d54:	2301      	movs	r3, #1
 8001d56:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "show"))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d128      	bne.n	8001db2 <cliButton+0xba>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	4940      	ldr	r1, [pc, #256]	; (8001e68 <cliButton+0x170>)
 8001d66:	2000      	movs	r0, #0
 8001d68:	4798      	blx	r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <cliButton+0xba>
  {
    while(cliKeepLoop())
 8001d70:	e018      	b.n	8001da4 <cliButton+0xac>
    {
      for (int i=0; i<BTN_MAX_CH; i++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	e00c      	b.n	8001d92 <cliButton+0x9a>
      {
        cliPrintf("%d", buttonGetPressed(i));
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff55 	bl	8001c2c <buttonGetPressed>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4619      	mov	r1, r3
 8001d86:	4839      	ldr	r0, [pc, #228]	; (8001e6c <cliButton+0x174>)
 8001d88:	f000 fdca 	bl	8002920 <cliPrintf>
      for (int i=0; i<BTN_MAX_CH; i++)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	ddef      	ble.n	8001d78 <cliButton+0x80>
      }
      delay(50);
 8001d98:	2032      	movs	r0, #50	; 0x32
 8001d9a:	f7ff f9af 	bl	80010fc <delay>
      cliPrintf("\r");
 8001d9e:	4834      	ldr	r0, [pc, #208]	; (8001e70 <cliButton+0x178>)
 8001da0:	f000 fdbe 	bl	8002920 <cliPrintf>
    while(cliKeepLoop())
 8001da4:	f000 feb6 	bl	8002b14 <cliKeepLoop>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1e1      	bne.n	8001d72 <cliButton+0x7a>
    }
    ret = true;
 8001dae:	2301      	movs	r3, #1
 8001db0:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "time"))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d13c      	bne.n	8001e34 <cliButton+0x13c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	492d      	ldr	r1, [pc, #180]	; (8001e74 <cliButton+0x17c>)
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	4798      	blx	r3
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d034      	beq.n	8001e34 <cliButton+0x13c>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2001      	movs	r0, #1
 8001dd0:	4798      	blx	r3
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	73fb      	strb	r3, [r7, #15]
    ch = constrain(ch, 0, BTN_MAX_CH-1);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 8001dda:	e024      	b.n	8001e26 <cliButton+0x12e>
    {
      for (int i=0; i<BTN_MAX_CH; i++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	e01b      	b.n	8001e1a <cliButton+0x122>
      {
        if(buttonGetPressed(i))
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff20 	bl	8001c2c <buttonGetPressed>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d010      	beq.n	8001e14 <cliButton+0x11c>
        {
          cliPrintf("%-12s, Time :  %d ms\n", buttonGetName(i), buttonGetPressedTime(i));
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff3a 	bl	8001c70 <buttonGetName>
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff4a 	bl	8001c9c <buttonGetPressedTime>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	481a      	ldr	r0, [pc, #104]	; (8001e78 <cliButton+0x180>)
 8001e10:	f000 fd86 	bl	8002920 <cliPrintf>
      for (int i=0; i<BTN_MAX_CH; i++)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	3301      	adds	r3, #1
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	dde0      	ble.n	8001de2 <cliButton+0xea>
        }
      }
      delay(10);
 8001e20:	200a      	movs	r0, #10
 8001e22:	f7ff f96b 	bl	80010fc <delay>
    while(cliKeepLoop())
 8001e26:	f000 fe75 	bl	8002b14 <cliKeepLoop>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1d5      	bne.n	8001ddc <cliButton+0xe4>
    }
    ret = true;
 8001e30:	2301      	movs	r3, #1
 8001e32:	77fb      	strb	r3, [r7, #31]
  }

  if (ret == false)
 8001e34:	7ffb      	ldrb	r3, [r7, #31]
 8001e36:	f083 0301 	eor.w	r3, r3, #1
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <cliButton+0x15c>
  {
    cliPrintf("button info\n");
 8001e40:	480e      	ldr	r0, [pc, #56]	; (8001e7c <cliButton+0x184>)
 8001e42:	f000 fd6d 	bl	8002920 <cliPrintf>
    cliPrintf("button show\n");
 8001e46:	480e      	ldr	r0, [pc, #56]	; (8001e80 <cliButton+0x188>)
 8001e48:	f000 fd6a 	bl	8002920 <cliPrintf>
    cliPrintf("button time\n", BTN_MAX_CH);
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	480d      	ldr	r0, [pc, #52]	; (8001e84 <cliButton+0x18c>)
 8001e50:	f000 fd66 	bl	8002920 <cliPrintf>
  }
}
 8001e54:	bf00      	nop
 8001e56:	3724      	adds	r7, #36	; 0x24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd90      	pop	{r4, r7, pc}
 8001e5c:	08011494 	.word	0x08011494
 8001e60:	080117d4 	.word	0x080117d4
 8001e64:	0801149c 	.word	0x0801149c
 8001e68:	080114ac 	.word	0x080114ac
 8001e6c:	080114b4 	.word	0x080114b4
 8001e70:	080114b8 	.word	0x080114b8
 8001e74:	080114bc 	.word	0x080114bc
 8001e78:	080114c4 	.word	0x080114c4
 8001e7c:	080114dc 	.word	0x080114dc
 8001e80:	080114ec 	.word	0x080114ec
 8001e84:	080114fc 	.word	0x080114fc

08001e88 <cdcInit>:


static bool is_init = false;

bool cdcInit(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
  bool ret = true;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	71fb      	strb	r3, [r7, #7]


  ret = cdcIfInit();
 8001e92:	f00b fcc7 	bl	800d824 <cdcIfInit>
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]

  is_init = ret;
 8001e9a:	4a04      	ldr	r2, [pc, #16]	; (8001eac <cdcInit+0x24>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	7013      	strb	r3, [r2, #0]

  return ret;
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200003d4 	.word	0x200003d4

08001eb0 <cdcIsConnect>:
{
  return is_init;
}

bool cdcIsConnect(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  return cdcIfIsConnected();
 8001eb4:	f00b fd46 	bl	800d944 <cdcIfIsConnected>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <cdcAvailable>:

uint32_t cdcAvailable(void)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	af00      	add	r7, sp, #0
  return cdcIfAvailable();
 8001ec2:	f00b fccd 	bl	800d860 <cdcIfAvailable>
 8001ec6:	4603      	mov	r3, r0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <cdcRead>:

uint8_t cdcRead(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  return cdcIfRead();
 8001ed0:	f00b fcd0 	bl	800d874 <cdcIfRead>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  return cdcIfWrite(p_data, length);
 8001ee4:	6839      	ldr	r1, [r7, #0]
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f00b fcd6 	bl	800d898 <cdcIfWrite>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <cliInit+0x74>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <cliInit+0x74>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <cliInit+0x74>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <cliInit+0x74>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <cliInit+0x74>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <cliInit+0x74>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <cliInit+0x74>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <cliInit+0x74>)
 8001f30:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <cliInit+0x78>)
 8001f32:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <cliInit+0x74>)
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <cliInit+0x7c>)
 8001f3a:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <cliInit+0x74>)
 8001f40:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <cliInit+0x80>)
 8001f42:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <cliInit+0x74>)
 8001f48:	4a0c      	ldr	r2, [pc, #48]	; (8001f7c <cliInit+0x84>)
 8001f4a:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 8001f4e:	4807      	ldr	r0, [pc, #28]	; (8001f6c <cliInit+0x74>)
 8001f50:	f000 fb5c 	bl	800260c <cliLineClean>


  cliAdd("help", cliShowList);
 8001f54:	490a      	ldr	r1, [pc, #40]	; (8001f80 <cliInit+0x88>)
 8001f56:	480b      	ldr	r0, [pc, #44]	; (8001f84 <cliInit+0x8c>)
 8001f58:	f000 fdf2 	bl	8002b40 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001f5c:	490a      	ldr	r1, [pc, #40]	; (8001f88 <cliInit+0x90>)
 8001f5e:	480b      	ldr	r0, [pc, #44]	; (8001f8c <cliInit+0x94>)
 8001f60:	f000 fdee 	bl	8002b40 <cliAdd>

  return true;
 8001f64:	2301      	movs	r3, #1
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200003d8 	.word	0x200003d8
 8001f70:	080029d1 	.word	0x080029d1
 8001f74:	08002a21 	.word	0x08002a21
 8001f78:	08002a79 	.word	0x08002a79
 8001f7c:	08002ac1 	.word	0x08002ac1
 8001f80:	08002bd5 	.word	0x08002bd5
 8001f84:	0801150c 	.word	0x0801150c
 8001f88:	08002c45 	.word	0x08002c45
 8001f8c:	08011514 	.word	0x08011514

08001f90 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001f9c:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <cliOpen+0x38>)
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001fa2:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <cliOpen+0x38>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	6839      	ldr	r1, [r7, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f001 fb0d 	bl	80035cc <uartOpen>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <cliOpen+0x38>)
 8001fb8:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8001fba:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <cliOpen+0x38>)
 8001fbc:	7a1b      	ldrb	r3, [r3, #8]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200003d8 	.word	0x200003d8

08001fcc <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001fd4:	4b34      	ldr	r3, [pc, #208]	; (80020a8 <cliShowLog+0xdc>)
 8001fd6:	7a5b      	ldrb	r3, [r3, #9]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d061      	beq.n	80020a0 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7a98      	ldrb	r0, [r3, #10]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4930      	ldr	r1, [pc, #192]	; (80020ac <cliShowLog+0xe0>)
 8001fea:	f001 fbe3 	bl	80037b4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	7a98      	ldrb	r0, [r3, #10]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	492d      	ldr	r1, [pc, #180]	; (80020b0 <cliShowLog+0xe4>)
 8001ffc:	f001 fbda 	bl	80037b4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7a98      	ldrb	r0, [r3, #10]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800200a:	461a      	mov	r2, r3
 800200c:	4929      	ldr	r1, [pc, #164]	; (80020b4 <cliShowLog+0xe8>)
 800200e:	f001 fbd1 	bl	80037b4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7a98      	ldrb	r0, [r3, #10]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800201c:	461a      	mov	r2, r3
 800201e:	4926      	ldr	r1, [pc, #152]	; (80020b8 <cliShowLog+0xec>)
 8002020:	f001 fbc8 	bl	80037b4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	7a98      	ldrb	r0, [r3, #10]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800202e:	461a      	mov	r2, r3
 8002030:	4922      	ldr	r1, [pc, #136]	; (80020bc <cliShowLog+0xf0>)
 8002032:	f001 fbbf 	bl	80037b4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7a98      	ldrb	r0, [r3, #10]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002040:	461a      	mov	r2, r3
 8002042:	491f      	ldr	r1, [pc, #124]	; (80020c0 <cliShowLog+0xf4>)
 8002044:	f001 fbb6 	bl	80037b4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7a98      	ldrb	r0, [r3, #10]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002052:	461a      	mov	r2, r3
 8002054:	491b      	ldr	r1, [pc, #108]	; (80020c4 <cliShowLog+0xf8>)
 8002056:	f001 fbad 	bl	80037b4 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	e012      	b.n	8002086 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7a98      	ldrb	r0, [r3, #10]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4613      	mov	r3, r2
 8002068:	015b      	lsls	r3, r3, #5
 800206a:	4413      	add	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4913      	ldr	r1, [pc, #76]	; (80020c8 <cliShowLog+0xfc>)
 800207c:	f001 fb9a 	bl	80037b4 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3301      	adds	r3, #1
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800208c:	461a      	mov	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4293      	cmp	r3, r2
 8002092:	dbe5      	blt.n	8002060 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7a9b      	ldrb	r3, [r3, #10]
 8002098:	490c      	ldr	r1, [pc, #48]	; (80020cc <cliShowLog+0x100>)
 800209a:	4618      	mov	r0, r3
 800209c:	f001 fb8a 	bl	80037b4 <uartPrintf>
  }
}
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	200003d8 	.word	0x200003d8
 80020ac:	08011518 	.word	0x08011518
 80020b0:	08011528 	.word	0x08011528
 80020b4:	08011538 	.word	0x08011538
 80020b8:	08011548 	.word	0x08011548
 80020bc:	08011558 	.word	0x08011558
 80020c0:	08011568 	.word	0x08011568
 80020c4:	08011578 	.word	0x08011578
 80020c8:	08011588 	.word	0x08011588
 80020cc:	08011598 	.word	0x08011598

080020d0 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4906      	ldr	r1, [pc, #24]	; (80020f8 <cliShowPrompt+0x28>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f001 fb68 	bl	80037b4 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4904      	ldr	r1, [pc, #16]	; (80020fc <cliShowPrompt+0x2c>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f001 fb62 	bl	80037b4 <uartPrintf>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	0801159c 	.word	0x0801159c
 80020fc:	080115a0 	.word	0x080115a0

08002100 <cliMain>:

bool cliMain(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <cliMain+0x40>)
 8002106:	7a1b      	ldrb	r3, [r3, #8]
 8002108:	f083 0301 	eor.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <cliMain+0x16>
  {
    return false;
 8002112:	2300      	movs	r3, #0
 8002114:	e012      	b.n	800213c <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <cliMain+0x40>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f001 faea 	bl	80036f4 <uartAvailable>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <cliMain+0x40>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f001 fb00 	bl	8003730 <uartRead>
 8002130:	4603      	mov	r3, r0
 8002132:	4619      	mov	r1, r3
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <cliMain+0x40>)
 8002136:	f000 f805 	bl	8002144 <cliUpdate>
  }

  return true;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	200003d8 	.word	0x200003d8

08002144 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08c      	sub	sp, #48	; 0x30
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8002150:	2300      	movs	r3, #0
 8002152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800215c:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7c1b      	ldrb	r3, [r3, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	f040 816d 	bne.w	8002442 <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	2b7f      	cmp	r3, #127	; 0x7f
 800216c:	d02a      	beq.n	80021c4 <cliUpdate+0x80>
 800216e:	2b7f      	cmp	r3, #127	; 0x7f
 8002170:	f300 80da 	bgt.w	8002328 <cliUpdate+0x1e4>
 8002174:	2b1b      	cmp	r3, #27
 8002176:	d021      	beq.n	80021bc <cliUpdate+0x78>
 8002178:	2b1b      	cmp	r3, #27
 800217a:	f300 80d5 	bgt.w	8002328 <cliUpdate+0x1e4>
 800217e:	2b08      	cmp	r3, #8
 8002180:	d062      	beq.n	8002248 <cliUpdate+0x104>
 8002182:	2b0d      	cmp	r3, #13
 8002184:	f040 80d0 	bne.w	8002328 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fa54 	bl	8002640 <cliLineAdd>
          cliRunCmd(p_cli);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fb1f 	bl	80027dc <cliRunCmd>
        }

        line->count = 0;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff8b 	bl	80020d0 <cliShowPrompt>
        break;
 80021ba:	e142      	b.n	8002442 <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	741a      	strb	r2, [r3, #16]
        break;
 80021c2:	e13e      	b.n	8002442 <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f080 8131 	bcs.w	8002438 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 80021e6:	2301      	movs	r3, #1
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ea:	e013      	b.n	8002214 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f2:	461a      	mov	r2, r3
 80021f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f6:	441a      	add	r2, r3
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021fe:	4619      	mov	r1, r3
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002202:	440b      	add	r3, r1
 8002204:	3b01      	subs	r3, #1
 8002206:	69f9      	ldr	r1, [r7, #28]
 8002208:	5c89      	ldrb	r1, [r1, r2]
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	3301      	adds	r3, #1
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002214:	7efb      	ldrb	r3, [r7, #27]
 8002216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002218:	429a      	cmp	r2, r3
 800221a:	dbe7      	blt.n	80021ec <cliUpdate+0xa8>
          }

          line->count--;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002222:	3b01      	subs	r3, #1
 8002224:	b2da      	uxtb	r2, r3
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002232:	461a      	mov	r2, r3
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	2100      	movs	r1, #0
 8002238:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	498d      	ldr	r1, [pc, #564]	; (8002474 <cliUpdate+0x330>)
 8002240:	4618      	mov	r0, r3
 8002242:	f001 fab7 	bl	80037b4 <uartPrintf>
        }
        break;
 8002246:	e0f7      	b.n	8002438 <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800224e:	2b00      	cmp	r3, #0
 8002250:	d055      	beq.n	80022fe <cliUpdate+0x1ba>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002258:	2b00      	cmp	r3, #0
 800225a:	d050      	beq.n	80022fe <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002268:	429a      	cmp	r2, r3
 800226a:	d10e      	bne.n	800228a <cliUpdate+0x146>
          {
            line->count--;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002272:	3b01      	subs	r3, #1
 8002274:	b2da      	uxtb	r2, r3
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002282:	461a      	mov	r2, r3
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2100      	movs	r1, #0
 8002288:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002296:	429a      	cmp	r2, r3
 8002298:	d231      	bcs.n	80022fe <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ae:	e013      	b.n	80022d8 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b6:	461a      	mov	r2, r3
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	441a      	add	r2, r3
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c2:	4619      	mov	r1, r3
 80022c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c6:	440b      	add	r3, r1
 80022c8:	3b01      	subs	r3, #1
 80022ca:	69f9      	ldr	r1, [r7, #28]
 80022cc:	5c89      	ldrb	r1, [r1, r2]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	3301      	adds	r3, #1
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d8:	7ebb      	ldrb	r3, [r7, #26]
 80022da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022dc:	429a      	cmp	r2, r3
 80022de:	dbe7      	blt.n	80022b0 <cliUpdate+0x16c>
            }

            line->count--;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022f6:	461a      	mov	r2, r3
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	2100      	movs	r1, #0
 80022fc:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 8099 	beq.w	800243c <cliUpdate+0x2f8>
        {
          line->cursor--;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002310:	3b01      	subs	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	4956      	ldr	r1, [pc, #344]	; (8002478 <cliUpdate+0x334>)
 8002320:	4618      	mov	r0, r3
 8002322:	f001 fa47 	bl	80037b4 <uartPrintf>
        }
        break;
 8002326:	e089      	b.n	800243c <cliUpdate+0x2f8>
      default:
        if ((line->count + 1) < line->buf_len)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800232e:	3301      	adds	r3, #1
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8002336:	4293      	cmp	r3, r2
 8002338:	f280 8082 	bge.w	8002440 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002348:	429a      	cmp	r2, r3
 800234a:	d124      	bne.n	8002396 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	1cf9      	adds	r1, r7, #3
 8002352:	2201      	movs	r2, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f001 fa0b 	bl	8003770 <uartWrite>

            line->buf[line->cursor] = rx_data;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002360:	461a      	mov	r2, r3
 8002362:	78f9      	ldrb	r1, [r7, #3]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	5499      	strb	r1, [r3, r2]
            line->count++;
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800236e:	3301      	adds	r3, #1
 8002370:	b2da      	uxtb	r2, r3
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237e:	3301      	adds	r3, #1
 8002380:	b2da      	uxtb	r2, r3
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800238e:	461a      	mov	r2, r3
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2100      	movs	r1, #0
 8002394:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d24c      	bcs.n	8002440 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ba:	e013      	b.n	80023e4 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023c2:	461a      	mov	r2, r3
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	1e5a      	subs	r2, r3, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023d0:	4619      	mov	r1, r3
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	1acb      	subs	r3, r1, r3
 80023d6:	69f9      	ldr	r1, [r7, #28]
 80023d8:	5c89      	ldrb	r1, [r1, r2]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	3301      	adds	r3, #1
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
 80023e4:	7e7b      	ldrb	r3, [r7, #25]
 80023e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e8:	429a      	cmp	r2, r3
 80023ea:	dbe7      	blt.n	80023bc <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f2:	461a      	mov	r2, r3
 80023f4:	78f9      	ldrb	r1, [r7, #3]
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	5499      	strb	r1, [r3, r2]
            line->count++;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002400:	3301      	adds	r3, #1
 8002402:	b2da      	uxtb	r2, r3
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002410:	3301      	adds	r3, #1
 8002412:	b2da      	uxtb	r2, r3
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002420:	461a      	mov	r2, r3
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	2100      	movs	r1, #0
 8002426:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	4913      	ldr	r1, [pc, #76]	; (800247c <cliUpdate+0x338>)
 8002430:	4618      	mov	r0, r3
 8002432:	f001 f9bf 	bl	80037b4 <uartPrintf>
          }
        }
        break;
 8002436:	e003      	b.n	8002440 <cliUpdate+0x2fc>
        break;
 8002438:	bf00      	nop
 800243a:	e002      	b.n	8002442 <cliUpdate+0x2fe>
        break;
 800243c:	bf00      	nop
 800243e:	e000      	b.n	8002442 <cliUpdate+0x2fe>
        break;
 8002440:	bf00      	nop
    }
  }

  switch(p_cli->state)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7c1b      	ldrb	r3, [r3, #16]
 8002446:	3b01      	subs	r3, #1
 8002448:	2b03      	cmp	r3, #3
 800244a:	f200 80d2 	bhi.w	80025f2 <cliUpdate+0x4ae>
 800244e:	a201      	add	r2, pc, #4	; (adr r2, 8002454 <cliUpdate+0x310>)
 8002450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002454:	08002465 	.word	0x08002465
 8002458:	0800246d 	.word	0x0800246d
 800245c:	08002481 	.word	0x08002481
 8002460:	080025e9 	.word	0x080025e9
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	741a      	strb	r2, [r3, #16]
      break;
 800246a:	e0c2      	b.n	80025f2 <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2203      	movs	r2, #3
 8002470:	741a      	strb	r2, [r3, #16]
      break;
 8002472:	e0be      	b.n	80025f2 <cliUpdate+0x4ae>
 8002474:	080115a8 	.word	0x080115a8
 8002478:	080115b0 	.word	0x080115b0
 800247c:	080115b8 	.word	0x080115b8

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	2b44      	cmp	r3, #68	; 0x44
 800248a:	d11a      	bne.n	80024c2 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002492:	2b00      	cmp	r3, #0
 8002494:	d015      	beq.n	80024c2 <cliUpdate+0x37e>
        {
          line->cursor--;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249c:	3b01      	subs	r3, #1
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 80024a6:	231b      	movs	r3, #27
 80024a8:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80024aa:	235b      	movs	r3, #91	; 0x5b
 80024ac:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	f107 010c 	add.w	r1, r7, #12
 80024ba:	2203      	movs	r2, #3
 80024bc:	4618      	mov	r0, r3
 80024be:	f001 f957 	bl	8003770 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	2b43      	cmp	r3, #67	; 0x43
 80024c6:	d11d      	bne.n	8002504 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d215      	bcs.n	8002504 <cliUpdate+0x3c0>
        {
          line->cursor++;
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024de:	3301      	adds	r3, #1
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 80024e8:	231b      	movs	r3, #27
 80024ea:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80024ec:	235b      	movs	r3, #91	; 0x5b
 80024ee:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	f107 010c 	add.w	r1, r7, #12
 80024fc:	2203      	movs	r2, #3
 80024fe:	4618      	mov	r0, r3
 8002500:	f001 f936 	bl	8003770 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	2b41      	cmp	r3, #65	; 0x41
 8002508:	d10c      	bne.n	8002524 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 800250a:	2101      	movs	r1, #1
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f8db 	bl	80026c8 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800251c:	4619      	mov	r1, r3
 800251e:	4610      	mov	r0, r2
 8002520:	f001 f948 	bl	80037b4 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	2b42      	cmp	r3, #66	; 0x42
 8002528:	d10c      	bne.n	8002544 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 800252a:	2100      	movs	r1, #0
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f8cb 	bl	80026c8 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	781a      	ldrb	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f001 f938 	bl	80037b4 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	2b31      	cmp	r3, #49	; 0x31
 8002548:	d10f      	bne.n	800256a <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7818      	ldrb	r0, [r3, #0]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002554:	461a      	mov	r2, r3
 8002556:	492b      	ldr	r1, [pc, #172]	; (8002604 <cliUpdate+0x4c0>)
 8002558:	f001 f92c 	bl	80037b4 <uartPrintf>
        line->cursor = 0;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2204      	movs	r2, #4
 8002568:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	2b34      	cmp	r3, #52	; 0x34
 800256e:	d13f      	bne.n	80025f0 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800257c:	429a      	cmp	r2, r3
 800257e:	d210      	bcs.n	80025a2 <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002586:	b29a      	uxth	r2, r3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800258e:	b29b      	uxth	r3, r3
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	8afa      	ldrh	r2, [r7, #22]
 800259a:	491b      	ldr	r1, [pc, #108]	; (8002608 <cliUpdate+0x4c4>)
 800259c:	4618      	mov	r0, r3
 800259e:	f001 f909 	bl	80037b4 <uartPrintf>
        }
        if (line->cursor > line->count)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d910      	bls.n	80025d4 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	8afa      	ldrh	r2, [r7, #22]
 80025cc:	490d      	ldr	r1, [pc, #52]	; (8002604 <cliUpdate+0x4c0>)
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 f8f0 	bl	80037b4 <uartPrintf>
        }
        line->cursor = line->count;
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2204      	movs	r2, #4
 80025e4:	741a      	strb	r2, [r3, #16]
      }
      break;
 80025e6:	e003      	b.n	80025f0 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	741a      	strb	r2, [r3, #16]
      break;
 80025ee:	e000      	b.n	80025f2 <cliUpdate+0x4ae>
      break;
 80025f0:	bf00      	nop
  }



  cliShowLog(p_cli);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff fcea 	bl	8001fcc <cliShowLog>

  return ret;
 80025f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3730      	adds	r7, #48	; 0x30
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	080115c4 	.word	0x080115c4
 8002608:	080115cc 	.word	0x080115cc

0800260c <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	223f      	movs	r2, #63	; 0x3f
 8002628:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800264e:	461a      	mov	r2, r3
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	015b      	lsls	r3, r3, #5
 8002656:	4413      	add	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	440b      	add	r3, r1
 800265e:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4610      	mov	r0, r2
 8002666:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800266a:	2243      	movs	r2, #67	; 0x43
 800266c:	4619      	mov	r1, r3
 800266e:	f00c fea0 	bl	800f3b2 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002678:	2b03      	cmp	r3, #3
 800267a:	d807      	bhi.n	800268c <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002682:	3301      	adds	r3, #1
 8002684:	b2da      	uxtb	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002692:	b25a      	sxtb	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80026a0:	3301      	adds	r3, #1
 80026a2:	425a      	negs	r2, r3
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	f002 0203 	and.w	r2, r2, #3
 80026ac:	bf58      	it	pl
 80026ae:	4253      	negpl	r3, r2
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d076      	beq.n	80027cc <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7818      	ldrb	r0, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80026f2:	461a      	mov	r2, r3
 80026f4:	4937      	ldr	r1, [pc, #220]	; (80027d4 <cliLineChange+0x10c>)
 80026f6:	f001 f85d 	bl	80037b4 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7818      	ldrb	r0, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800270e:	461a      	mov	r2, r3
 8002710:	4931      	ldr	r1, [pc, #196]	; (80027d8 <cliLineChange+0x110>)
 8002712:	f001 f84f 	bl	80037b4 <uartPrintf>
  }


  if (key_up == true)
 8002716:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d125      	bne.n	800276a <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002724:	2b00      	cmp	r3, #0
 8002726:	d006      	beq.n	8002736 <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800272e:	b25a      	sxtb	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800273c:	461a      	mov	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002744:	4413      	add	r3, r2
 8002746:	3b01      	subs	r3, #1
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800274e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002752:	fb01 f202 	mul.w	r2, r1, r2
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	b25a      	sxtb	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	e013      	b.n	8002792 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002770:	3301      	adds	r3, #1
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8002778:	fb93 f1f2 	sdiv	r1, r3, r2
 800277c:	fb01 f202 	mul.w	r2, r1, r2
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	b25a      	sxtb	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002790:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	015b      	lsls	r3, r3, #5
 800279c:	4413      	add	r3, r2
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4413      	add	r3, r2
 80027a2:	4403      	add	r3, r0
 80027a4:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 80027a8:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 80027ac:	4611      	mov	r1, r2
 80027ae:	2243      	movs	r2, #67	; 0x43
 80027b0:	4618      	mov	r0, r3
 80027b2:	f00c fdfe 	bl	800f3b2 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

  p_cli->hist_line_new = false;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 80027ca:	e000      	b.n	80027ce <cliLineChange+0x106>
    return;
 80027cc:	bf00      	nop
}
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	080115c4 	.word	0x080115c4
 80027d8:	080115d4 	.word	0x080115d4

080027dc <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80027e4:	2300      	movs	r3, #0
 80027e6:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f851 	bl	8002890 <cliParseArgs>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d046      	beq.n	8002882 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 80027f4:	4825      	ldr	r0, [pc, #148]	; (800288c <cliRunCmd+0xb0>)
 80027f6:	f000 f893 	bl	8002920 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002800:	4618      	mov	r0, r3
 8002802:	f000 f8b1 	bl	8002968 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	e033      	b.n	8002874 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	3304      	adds	r3, #4
 8002826:	4619      	mov	r1, r3
 8002828:	f7fd fcfa 	bl	8000220 <strcmp>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d11d      	bne.n	800286e <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 8002868:	4610      	mov	r0, r2
 800286a:	4798      	blx	r3
        break;
 800286c:	e009      	b.n	8002882 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3301      	adds	r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4293      	cmp	r3, r2
 8002880:	dbc4      	blt.n	800280c <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8002882:	7afb      	ldrb	r3, [r7, #11]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	080115dc 	.word	0x080115dc

08002890 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002898:	2300      	movs	r3, #0
 800289a:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80028ae:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80028b6:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 80028b8:	8afb      	ldrh	r3, [r7, #22]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80028c4:	4b15      	ldr	r3, [pc, #84]	; (800291c <cliParseArgs+0x8c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f107 0208 	add.w	r2, r7, #8
 80028cc:	4619      	mov	r1, r3
 80028ce:	6938      	ldr	r0, [r7, #16]
 80028d0:	f00c fcf0 	bl	800f2b4 <strtok_r>
 80028d4:	61b8      	str	r0, [r7, #24]
 80028d6:	e010      	b.n	80028fa <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 80028d8:	8afb      	ldrh	r3, [r7, #22]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	82fa      	strh	r2, [r7, #22]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <cliParseArgs+0x8c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f107 0208 	add.w	r2, r7, #8
 80028f0:	4619      	mov	r1, r3
 80028f2:	2000      	movs	r0, #0
 80028f4:	f00c fcde 	bl	800f2b4 <strtok_r>
 80028f8:	61b8      	str	r0, [r7, #24]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1eb      	bne.n	80028d8 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	8afa      	ldrh	r2, [r7, #22]
 8002904:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 8002908:	8afb      	ldrh	r3, [r7, #22]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <cliParseArgs+0x82>
  {
    ret = true;
 800290e:	2301      	movs	r3, #1
 8002910:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8002912:	7ffb      	ldrb	r3, [r7, #31]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000010 	.word	0x20000010

08002920 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8002920:	b40f      	push	{r0, r1, r2, r3}
 8002922:	b580      	push	{r7, lr}
 8002924:	b084      	sub	sp, #16
 8002926:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <cliPrintf+0x44>)
 8002930:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f103 0011 	add.w	r0, r3, #17
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002940:	f00c fc68 	bl	800f214 <vsniprintf>
 8002944:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	7818      	ldrb	r0, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	3311      	adds	r3, #17
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	4619      	mov	r1, r3
 8002952:	f000 ff0d 	bl	8003770 <uartWrite>
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002960:	b004      	add	sp, #16
 8002962:	4770      	bx	lr
 8002964:	200003d8 	.word	0x200003d8

08002968 <cliToUpper>:

void cliToUpper(char *str)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002970:	2300      	movs	r3, #0
 8002972:	81fb      	strh	r3, [r7, #14]
 8002974:	e018      	b.n	80029a8 <cliToUpper+0x40>
  {
    str_ch = str[i];
 8002976:	89fb      	ldrh	r3, [r7, #14]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8002980:	7b7b      	ldrb	r3, [r7, #13]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d014      	beq.n	80029b0 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8002986:	7b7b      	ldrb	r3, [r7, #13]
 8002988:	2b60      	cmp	r3, #96	; 0x60
 800298a:	d905      	bls.n	8002998 <cliToUpper+0x30>
 800298c:	7b7b      	ldrb	r3, [r7, #13]
 800298e:	2b7a      	cmp	r3, #122	; 0x7a
 8002990:	d802      	bhi.n	8002998 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8002992:	7b7b      	ldrb	r3, [r7, #13]
 8002994:	3b20      	subs	r3, #32
 8002996:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8002998:	89fb      	ldrh	r3, [r7, #14]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	7b7a      	ldrb	r2, [r7, #13]
 80029a0:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80029a2:	89fb      	ldrh	r3, [r7, #14]
 80029a4:	3301      	adds	r3, #1
 80029a6:	81fb      	strh	r3, [r7, #14]
 80029a8:	89fb      	ldrh	r3, [r7, #14]
 80029aa:	2b0f      	cmp	r3, #15
 80029ac:	d9e3      	bls.n	8002976 <cliToUpper+0xe>
 80029ae:	e000      	b.n	80029b2 <cliToUpper+0x4a>
      break;
 80029b0:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 80029b2:	89fb      	ldrh	r3, [r7, #14]
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d105      	bne.n	80029c4 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 80029b8:	89fb      	ldrh	r3, [r7, #14]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	4413      	add	r3, r2
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
  }
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <cliArgsGetData+0x4c>)
 80029e0:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d301      	bcc.n	80029f4 <cliArgsGetData+0x24>
  {
    return 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e00e      	b.n	8002a12 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f00c faca 	bl	800efa0 <strtoul>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	60fb      	str	r3, [r7, #12]

  return ret;
 8002a10:	68fb      	ldr	r3, [r7, #12]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200003d8 	.word	0x200003d8

08002a20 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002a30:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <cliArgsGetFloat+0x54>)
 8002a32:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d302      	bcc.n	8002a48 <cliArgsGetFloat+0x28>
  {
    return 0;
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	e00d      	b.n	8002a64 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f00c f9c9 	bl	800edf0 <strtof>
 8002a5e:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8002a62:	68fb      	ldr	r3, [r7, #12]
}
 8002a64:	ee07 3a90 	vmov	s15, r3
 8002a68:	eeb0 0a67 	vmov.f32	s0, s15
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200003d8 	.word	0x200003d8

08002a78 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002a86:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <cliArgsGetStr+0x44>)
 8002a88:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d301      	bcc.n	8002a9c <cliArgsGetStr+0x24>
  {
    return 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e008      	b.n	8002aae <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]

  return ret;
 8002aac:	68fb      	ldr	r3, [r7, #12]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	200003d8 	.word	0x200003d8

08002ac0 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	6039      	str	r1, [r7, #0]
 8002aca:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <cliArgsIsStr+0x50>)
 8002ad2:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d301      	bcc.n	8002ae6 <cliArgsIsStr+0x26>
  {
    return 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e010      	b.n	8002b08 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4619      	mov	r1, r3
 8002af6:	6838      	ldr	r0, [r7, #0]
 8002af8:	f7fd fb92 	bl	8000220 <strcmp>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <cliArgsIsStr+0x46>
  {
    ret = true;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200003d8 	.word	0x200003d8

08002b14 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <cliKeepLoop+0x28>)
 8002b1c:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fde6 	bl	80036f4 <uartAvailable>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <cliKeepLoop+0x1e>
  {
    return true;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8002b32:	2300      	movs	r3, #0
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	200003d8 	.word	0x200003d8

08002b40 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <cliAdd+0x90>)
 8002b50:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002b58:	2b0f      	cmp	r3, #15
 8002b5a:	d901      	bls.n	8002b60 <cliAdd+0x20>
  {
    return false;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e032      	b.n	8002bc6 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002b66:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8002b68:	89fa      	ldrh	r2, [r7, #14]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4413      	add	r3, r2
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f00c fc0f 	bl	800f3a2 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8002b84:	89fa      	ldrh	r2, [r7, #14]
 8002b86:	6939      	ldr	r1, [r7, #16]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8002b9a:	89fa      	ldrh	r2, [r7, #14]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	3304      	adds	r3, #4
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff feda 	bl	8002968 <cliToUpper>

  p_cli->cmd_count++;
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002bba:	3301      	adds	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	200003d8 	.word	0x200003d8

08002bd4 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002bdc:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <cliShowList+0x60>)
 8002bde:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002be0:	4815      	ldr	r0, [pc, #84]	; (8002c38 <cliShowList+0x64>)
 8002be2:	f7ff fe9d 	bl	8002920 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8002be6:	4815      	ldr	r0, [pc, #84]	; (8002c3c <cliShowList+0x68>)
 8002be8:	f7ff fe9a 	bl	8002920 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	e012      	b.n	8002c18 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	4413      	add	r3, r2
 8002c04:	3304      	adds	r3, #4
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fe8a 	bl	8002920 <cliPrintf>
    cliPrintf("\r\n");
 8002c0c:	480a      	ldr	r0, [pc, #40]	; (8002c38 <cliShowList+0x64>)
 8002c0e:	f7ff fe87 	bl	8002920 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3301      	adds	r3, #1
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4293      	cmp	r3, r2
 8002c24:	dbe5      	blt.n	8002bf2 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8002c26:	4806      	ldr	r0, [pc, #24]	; (8002c40 <cliShowList+0x6c>)
 8002c28:	f7ff fe7a 	bl	8002920 <cliPrintf>
}
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	200003d8 	.word	0x200003d8
 8002c38:	080115dc 	.word	0x080115dc
 8002c3c:	080115e0 	.word	0x080115e0
 8002c40:	08011600 	.word	0x08011600

08002c44 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08c      	sub	sp, #48	; 0x30
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d103      	bne.n	8002c6c <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8002c64:	4840      	ldr	r0, [pc, #256]	; (8002d68 <cliMemoryDump+0x124>)
 8002c66:	f7ff fe5b 	bl	8002920 <cliPrintf>
 8002c6a:	e07a      	b.n	8002d62 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	dd09      	ble.n	8002c86 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	3304      	adds	r3, #4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f00c f98f 	bl	800efa0 <strtoul>
 8002c82:	4603      	mov	r3, r0
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f00c f986 	bl	800efa0 <strtoul>
 8002c94:	4603      	mov	r3, r0
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002c9c:	4833      	ldr	r0, [pc, #204]	; (8002d6c <cliMemoryDump+0x128>)
 8002c9e:	f7ff fe3f 	bl	8002920 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca6:	e058      	b.n	8002d5a <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d104      	bne.n	8002cbc <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	482e      	ldr	r0, [pc, #184]	; (8002d70 <cliMemoryDump+0x12c>)
 8002cb8:	f7ff fe32 	bl	8002920 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	482c      	ldr	r0, [pc, #176]	; (8002d74 <cliMemoryDump+0x130>)
 8002cc4:	f7ff fe2c 	bl	8002920 <cliPrintf>

    if ((idx%4) == 3)
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	425a      	negs	r2, r3
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	f002 0203 	and.w	r2, r2, #3
 8002cd4:	bf58      	it	pl
 8002cd6:	4253      	negpl	r3, r2
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d138      	bne.n	8002d4e <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8002cdc:	4826      	ldr	r0, [pc, #152]	; (8002d78 <cliMemoryDump+0x134>)
 8002cde:	f7ff fe1f 	bl	8002920 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	623b      	str	r3, [r7, #32]
 8002ce6:	e02c      	b.n	8002d42 <cliMemoryDump+0xfe>
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002cec:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	e01d      	b.n	8002d30 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8002cf4:	f107 020c 	add.w	r2, r7, #12
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b1f      	cmp	r3, #31
 8002d00:	d910      	bls.n	8002d24 <cliMemoryDump+0xe0>
 8002d02:	f107 020c 	add.w	r2, r7, #12
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	4413      	add	r3, r2
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b7e      	cmp	r3, #126	; 0x7e
 8002d0e:	d809      	bhi.n	8002d24 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8002d10:	f107 020c 	add.w	r2, r7, #12
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	4413      	add	r3, r2
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4817      	ldr	r0, [pc, #92]	; (8002d7c <cliMemoryDump+0x138>)
 8002d1e:	f7ff fdff 	bl	8002920 <cliPrintf>
 8002d22:	e002      	b.n	8002d2a <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8002d24:	4816      	ldr	r0, [pc, #88]	; (8002d80 <cliMemoryDump+0x13c>)
 8002d26:	f7ff fdfb 	bl	8002920 <cliPrintf>
        for (i=0;i<4;i++)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	ddde      	ble.n	8002cf4 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	623b      	str	r3, [r7, #32]
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	ddcf      	ble.n	8002ce8 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8002d48:	480e      	ldr	r0, [pc, #56]	; (8002d84 <cliMemoryDump+0x140>)
 8002d4a:	f7ff fde9 	bl	8002920 <cliPrintf>
    }
    addr++;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	3304      	adds	r3, #4
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	3301      	adds	r3, #1
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	dba2      	blt.n	8002ca8 <cliMemoryDump+0x64>
  }
}
 8002d62:	3730      	adds	r7, #48	; 0x30
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	08011620 	.word	0x08011620
 8002d6c:	08011634 	.word	0x08011634
 8002d70:	0801163c 	.word	0x0801163c
 8002d74:	08011648 	.word	0x08011648
 8002d78:	08011650 	.word	0x08011650
 8002d7c:	08011654 	.word	0x08011654
 8002d80:	08011658 	.word	0x08011658
 8002d84:	0801165c 	.word	0x0801165c

08002d88 <flashInit>:


static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
  bool ret = true;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	71fb      	strb	r3, [r7, #7]

  return true;
 8002d92:	2301      	movs	r3, #1
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <ledInit>:
#ifdef _USE_HW_CLI
static void cliLed(cli_args_t *args);
#endif

bool ledInit(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8002da6:	f107 0308 	add.w	r3, r7, #8
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	609a      	str	r2, [r3, #8]
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db6:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <ledInit+0x88>)
 8002db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dba:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <ledInit+0x88>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dc2:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <ledInit+0x88>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	607b      	str	r3, [r7, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	e017      	b.n	8002e10 <ledInit+0x70>
  {
    GPIO_InitStructure.Pin = led_tbl[i].pin;
 8002de0:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <ledInit+0x8c>)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4413      	add	r3, r2
 8002de8:	889b      	ldrh	r3, [r3, #4]
 8002dea:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 8002dec:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <ledInit+0x8c>)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002df4:	f107 0208 	add.w	r2, r7, #8
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f001 fa0c 	bl	8004218 <HAL_GPIO_Init>

    ledOff(i);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f837 	bl	8002e78 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	dde4      	ble.n	8002de0 <ledInit+0x40>
  }
#ifdef _USE_HW_CLI
  cliAdd("LED", cliLed);
 8002e16:	4906      	ldr	r1, [pc, #24]	; (8002e30 <ledInit+0x90>)
 8002e18:	4806      	ldr	r0, [pc, #24]	; (8002e34 <ledInit+0x94>)
 8002e1a:	f7ff fe91 	bl	8002b40 <cliAdd>
#endif
  return true;
 8002e1e:	2301      	movs	r3, #1
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3720      	adds	r7, #32
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	080117e0 	.word	0x080117e0
 8002e30:	08002ee9 	.word	0x08002ee9
 8002e34:	0801166c 	.word	0x0801166c

08002e38 <ledOn>:


void ledOn(uint8_t ch)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d111      	bne.n	8002e6c <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <ledOn+0x3c>)
 8002e4c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	4a08      	ldr	r2, [pc, #32]	; (8002e74 <ledOn+0x3c>)
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	8899      	ldrh	r1, [r3, #4]
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	4a05      	ldr	r2, [pc, #20]	; (8002e74 <ledOn+0x3c>)
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	799b      	ldrb	r3, [r3, #6]
 8002e64:	461a      	mov	r2, r3
 8002e66:	f001 fb71 	bl	800454c <HAL_GPIO_WritePin>
 8002e6a:	e000      	b.n	8002e6e <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 8002e6c:	bf00      	nop
}
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	080117e0 	.word	0x080117e0

08002e78 <ledOff>:

void ledOff(uint8_t ch)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10d      	bne.n	8002ea4 <ledOff+0x2c>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	4a08      	ldr	r2, [pc, #32]	; (8002eac <ledOff+0x34>)
 8002e8c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	4a06      	ldr	r2, [pc, #24]	; (8002eac <ledOff+0x34>)
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	889b      	ldrh	r3, [r3, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f001 fb55 	bl	800454c <HAL_GPIO_WritePin>
 8002ea2:	e000      	b.n	8002ea6 <ledOff+0x2e>
  if (ch >= LED_MAX_CH) return;
 8002ea4:	bf00      	nop
}
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	080117e0 	.word	0x080117e0

08002eb0 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10d      	bne.n	8002edc <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	4a08      	ldr	r2, [pc, #32]	; (8002ee4 <ledToggle+0x34>)
 8002ec4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	4906      	ldr	r1, [pc, #24]	; (8002ee4 <ledToggle+0x34>)
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	440b      	add	r3, r1
 8002ed0:	889b      	ldrh	r3, [r3, #4]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	f001 fb51 	bl	800457c <HAL_GPIO_TogglePin>
 8002eda:	e000      	b.n	8002ede <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8002edc:	bf00      	nop
}
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	080117e0 	.word	0x080117e0

08002ee8 <cliLed>:
  gpio->ODR ^= GPIO_Pin;
}

#ifdef _USE_HW_CLI
void cliLed(cli_args_t *args)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	75fb      	strb	r3, [r7, #23]

  if (args-> argc == 2 && args->isStr(0, "on") == true)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d11e      	bne.n	8002f3a <cliLed+0x52>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	4944      	ldr	r1, [pc, #272]	; (8003014 <cliLed+0x12c>)
 8002f02:	2000      	movs	r0, #0
 8002f04:	4798      	blx	r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d016      	beq.n	8002f3a <cliLed+0x52>
  {
    uint8_t led_ch;

    led_ch = args->getData(1);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2001      	movs	r0, #1
 8002f12:	4798      	blx	r3
 8002f14:	4603      	mov	r3, r0
 8002f16:	75bb      	strb	r3, [r7, #22]

    if(led_ch > 0)
 8002f18:	7dbb      	ldrb	r3, [r7, #22]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <cliLed+0x46>
    {
      led_ch--;
 8002f1e:	7dbb      	ldrb	r3, [r7, #22]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	75bb      	strb	r3, [r7, #22]
    }
    while(cliKeepLoop())
 8002f24:	e003      	b.n	8002f2e <cliLed+0x46>
    {
      ledOn(led_ch);
 8002f26:	7dbb      	ldrb	r3, [r7, #22]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff85 	bl	8002e38 <ledOn>
    while(cliKeepLoop())
 8002f2e:	f7ff fdf1 	bl	8002b14 <cliKeepLoop>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f6      	bne.n	8002f26 <cliLed+0x3e>
  {
 8002f38:	e05a      	b.n	8002ff0 <cliLed+0x108>
    }
  }
  else if (args-> argc == 2 && args->isStr(0, "off") == true)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d11e      	bne.n	8002f80 <cliLed+0x98>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	4934      	ldr	r1, [pc, #208]	; (8003018 <cliLed+0x130>)
 8002f48:	2000      	movs	r0, #0
 8002f4a:	4798      	blx	r3
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d016      	beq.n	8002f80 <cliLed+0x98>
    {
      uint8_t led_ch;

      led_ch = args->getData(1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2001      	movs	r0, #1
 8002f58:	4798      	blx	r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	757b      	strb	r3, [r7, #21]

      if(led_ch > 0)
 8002f5e:	7d7b      	ldrb	r3, [r7, #21]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <cliLed+0x8c>
      {
        led_ch--;
 8002f64:	7d7b      	ldrb	r3, [r7, #21]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	757b      	strb	r3, [r7, #21]
      }
      while(cliKeepLoop())
 8002f6a:	e003      	b.n	8002f74 <cliLed+0x8c>
      {
        ledOff(led_ch);
 8002f6c:	7d7b      	ldrb	r3, [r7, #21]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff ff82 	bl	8002e78 <ledOff>
      while(cliKeepLoop())
 8002f74:	f7ff fdce 	bl	8002b14 <cliKeepLoop>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f6      	bne.n	8002f6c <cliLed+0x84>
    {
 8002f7e:	e037      	b.n	8002ff0 <cliLed+0x108>
      }
    }
  else if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d133      	bne.n	8002ff0 <cliLed+0x108>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	4923      	ldr	r1, [pc, #140]	; (800301c <cliLed+0x134>)
 8002f8e:	2000      	movs	r0, #0
 8002f90:	4798      	blx	r3
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d02b      	beq.n	8002ff0 <cliLed+0x108>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = args->getData(1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	4798      	blx	r3
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	753b      	strb	r3, [r7, #20]
    toggle_time = args->getData(2);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2002      	movs	r0, #2
 8002faa:	4798      	blx	r3
 8002fac:	4603      	mov	r3, r0
 8002fae:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8002fb0:	7d3b      	ldrb	r3, [r7, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <cliLed+0xd4>
    {
      led_ch--;
 8002fb6:	7d3b      	ldrb	r3, [r7, #20]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	753b      	strb	r3, [r7, #20]
    }

    pre_time = millis();
 8002fbc:	f7fe f8a9 	bl	8001112 <millis>
 8002fc0:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 8002fc2:	e00e      	b.n	8002fe2 <cliLed+0xfa>
    {
      if (millis()-pre_time >= toggle_time)
 8002fc4:	f7fe f8a5 	bl	8001112 <millis>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d806      	bhi.n	8002fe2 <cliLed+0xfa>
      {
        pre_time = millis();
 8002fd4:	f7fe f89d 	bl	8001112 <millis>
 8002fd8:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8002fda:	7d3b      	ldrb	r3, [r7, #20]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff67 	bl	8002eb0 <ledToggle>
    while(cliKeepLoop())
 8002fe2:	f7ff fd97 	bl	8002b14 <cliKeepLoop>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1eb      	bne.n	8002fc4 <cliLed+0xdc>
      }
    }
    ret = true;
 8002fec:	2301      	movs	r3, #1
 8002fee:	75fb      	strb	r3, [r7, #23]
  }
  if (ret != true)
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	f083 0301 	eor.w	r3, r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <cliLed+0x124>
  {
    cliPrintf("led On/Off ch[1~%d]\n", LED_MAX_CH);
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	4808      	ldr	r0, [pc, #32]	; (8003020 <cliLed+0x138>)
 8003000:	f7ff fc8e 	bl	8002920 <cliPrintf>
    cliPrintf("led toggle ch[1~%d] time(ms)\n", LED_MAX_CH);
 8003004:	2101      	movs	r1, #1
 8003006:	4807      	ldr	r0, [pc, #28]	; (8003024 <cliLed+0x13c>)
 8003008:	f7ff fc8a 	bl	8002920 <cliPrintf>
  }
}
 800300c:	bf00      	nop
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	08011670 	.word	0x08011670
 8003018:	08011674 	.word	0x08011674
 800301c:	08011678 	.word	0x08011678
 8003020:	08011680 	.word	0x08011680
 8003024:	08011698 	.word	0x08011698

08003028 <logInit>:
static osMutexId mutex_lock;
#endif


bool logInit(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
#ifdef _USE_HW_ROTS
  osMutexDef(mutex_lock);
  mutex_lock = osMutexCreate (osMutex(mutex_lock));
#endif

  return true;
 800302c:	2301      	movs	r3, #1
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <logPrintf>:

void logPrintf(const char *fmt, ...)
{
 8003038:	b40f      	push	{r0, r1, r2, r3}
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
#endif

  va_list args;
  int len;

  va_start(args, fmt);
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	603b      	str	r3, [r7, #0]
  len = vsnprintf(print_buf, 256, fmt, args);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800304e:	4809      	ldr	r0, [pc, #36]	; (8003074 <logPrintf+0x3c>)
 8003050:	f00c f8e0 	bl	800f214 <vsniprintf>
 8003054:	6078      	str	r0, [r7, #4]

  uartWrite(log_ch, (uint8_t *)print_buf, len);
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <logPrintf+0x40>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	4905      	ldr	r1, [pc, #20]	; (8003074 <logPrintf+0x3c>)
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fb86 	bl	8003770 <uartWrite>
  va_end(args);

#ifdef _USE_HW_ROTS
  osMutexRelease(mutex_lock);
#endif
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800306e:	b004      	add	sp, #16
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000820 	.word	0x20000820
 8003078:	2000081c 	.word	0x2000081c

0800307c <resetInit>:
  }
}


bool resetInit(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
  bool ret = true;
 8003082:	2301      	movs	r3, #1
 8003084:	71bb      	strb	r3, [r7, #6]
  bool is_debug = false;
 8003086:	2300      	movs	r3, #0
 8003088:	71fb      	strb	r3, [r7, #7]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 800308a:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <resetInit+0x80>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <resetInit+0x1e>
  {
    is_debug = true;
 8003096:	2301      	movs	r3, #1
 8003098:	71fb      	strb	r3, [r7, #7]
  }

  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if (RCC->CSR & (1<<26) && is_debug != true)
 800309a:	4b19      	ldr	r3, [pc, #100]	; (8003100 <resetInit+0x84>)
 800309c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01f      	beq.n	80030e8 <resetInit+0x6c>
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	f083 0301 	eor.w	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d019      	beq.n	80030e8 <resetInit+0x6c>
  if(RCC->CSR & (1<<26))
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <resetInit+0x84>)
 80030b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d012      	beq.n	80030e8 <resetInit+0x6c>
  {
    rtcBackupRegWrite(RESET_REG_COUNT, rtcBackupRegRead(RESET_REG_COUNT) + 1);
 80030c2:	2001      	movs	r0, #1
 80030c4:	f000 f8a2 	bl	800320c <rtcBackupRegRead>
 80030c8:	4603      	mov	r3, r0
 80030ca:	3301      	adds	r3, #1
 80030cc:	4619      	mov	r1, r3
 80030ce:	2001      	movs	r0, #1
 80030d0:	f000 f8ac 	bl	800322c <rtcBackupRegWrite>
    delay(500);
 80030d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030d8:	f7fe f810 	bl	80010fc <delay>
    reset_count = rtcBackupRegRead(RESET_REG_COUNT);
 80030dc:	2001      	movs	r0, #1
 80030de:	f000 f895 	bl	800320c <rtcBackupRegRead>
 80030e2:	4603      	mov	r3, r0
 80030e4:	4a07      	ldr	r2, [pc, #28]	; (8003104 <resetInit+0x88>)
 80030e6:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  rtcBackupRegWrite(RESET_REG_COUNT, 0);
 80030e8:	2100      	movs	r1, #0
 80030ea:	2001      	movs	r0, #1
 80030ec:	f000 f89e 	bl	800322c <rtcBackupRegWrite>

  return ret;
 80030f0:	79bb      	ldrb	r3, [r7, #6]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	e000edf0 	.word	0xe000edf0
 8003100:	40021000 	.word	0x40021000
 8003104:	20000920 	.word	0x20000920

08003108 <resetGetCount>:

uint32_t resetGetCount(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return reset_count;
 800310c:	4b03      	ldr	r3, [pc, #12]	; (800311c <resetGetCount+0x14>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000920 	.word	0x20000920

08003120 <resetToSystemBoot>:
    run_timeout_count = timeout;
  }
}

void resetToSystemBoot(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
  void (*SysMemBootJump)(void);
  volatile uint32_t addr = 0x1FFF0000; // System Boot Loader 주소
 8003126:	4b1d      	ldr	r3, [pc, #116]	; (800319c <resetToSystemBoot+0x7c>)
 8003128:	603b      	str	r3, [r7, #0]


  HAL_RCC_DeInit();
 800312a:	f003 f829 	bl	8006180 <HAL_RCC_DeInit>

  SysTick->CTRL = 0;
 800312e:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <resetToSystemBoot+0x80>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8003134:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <resetToSystemBoot+0x80>)
 8003136:	2200      	movs	r2, #0
 8003138:	605a      	str	r2, [r3, #4]
  SysTick->VAL  = 0;
 800313a:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <resetToSystemBoot+0x80>)
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]

  // 인터럽트
  for (int i=0;i<8;i++)
 8003140:	2300      	movs	r3, #0
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	e016      	b.n	8003174 <resetToSystemBoot+0x54>
  {
    NVIC->ICER[i]=0xFFFFFFFF;
 8003146:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <resetToSystemBoot+0x84>)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3320      	adds	r3, #32
 800314c:	f04f 31ff 	mov.w	r1, #4294967295
 8003150:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NVIC->ICPR[i]=0xFFFFFFFF;
 8003154:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <resetToSystemBoot+0x84>)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3360      	adds	r3, #96	; 0x60
 800315a:	f04f 31ff 	mov.w	r1, #4294967295
 800315e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003162:	f3bf 8f4f 	dsb	sy
}
 8003166:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003168:	f3bf 8f6f 	isb	sy
}
 800316c:	bf00      	nop
  for (int i=0;i<8;i++)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3301      	adds	r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b07      	cmp	r3, #7
 8003178:	dde5      	ble.n	8003146 <resetToSystemBoot+0x26>
    __DSB();
    __ISB();
  }

  SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	3304      	adds	r3, #4
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60bb      	str	r3, [r7, #8]

  // Main Stack 주소 셋팅
  __set_MSP(*(uint32_t *)addr);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f383 8808 	msr	MSP, r3
}
 800318e:	bf00      	nop
  // Jump
  SysMemBootJump();
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4798      	blx	r3
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	1fff0000 	.word	0x1fff0000
 80031a0:	e000e010 	.word	0xe000e010
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
  bool ret = true;
 80031ae:	2301      	movs	r3, #1
 80031b0:	71fb      	strb	r3, [r7, #7]


  hrtc.Instance = RTC;
 80031b2:	4b14      	ldr	r3, [pc, #80]	; (8003204 <rtcInit+0x5c>)
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <rtcInit+0x60>)
 80031b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <rtcInit+0x5c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <rtcInit+0x5c>)
 80031c0:	227f      	movs	r2, #127	; 0x7f
 80031c2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <rtcInit+0x5c>)
 80031c6:	22ff      	movs	r2, #255	; 0xff
 80031c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80031ca:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <rtcInit+0x5c>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <rtcInit+0x5c>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80031d6:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <rtcInit+0x5c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <rtcInit+0x5c>)
 80031de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031e2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80031e4:	4b07      	ldr	r3, [pc, #28]	; (8003204 <rtcInit+0x5c>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80031ea:	4806      	ldr	r0, [pc, #24]	; (8003204 <rtcInit+0x5c>)
 80031ec:	f003 ffc6 	bl	800717c <HAL_RTC_Init>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <rtcInit+0x52>
  {
    return false;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <rtcInit+0x54>
  }

  return ret;
 80031fa:	79fb      	ldrb	r3, [r7, #7]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20000924 	.word	0x20000924
 8003208:	40002800 	.word	0x40002800

0800320c <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4804      	ldr	r0, [pc, #16]	; (8003228 <rtcBackupRegRead+0x1c>)
 8003218:	f004 f8e6 	bl	80073e8 <HAL_RTCEx_BKUPRead>
 800321c:	4603      	mov	r3, r0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000924 	.word	0x20000924

0800322c <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4803      	ldr	r0, [pc, #12]	; (8003248 <rtcBackupRegWrite+0x1c>)
 800323c:	f004 f8bc 	bl	80073b8 <HAL_RTCEx_BKUPWrite>
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000924 	.word	0x20000924

0800324c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b098      	sub	sp, #96	; 0x60
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003254:	f107 030c 	add.w	r3, r7, #12
 8003258:	2254      	movs	r2, #84	; 0x54
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f00b ffe7 	bl	800f230 <memset>
  if(rtcHandle->Instance==RTC)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <HAL_RTC_MspInit+0x70>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d123      	bne.n	80032b4 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800326c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003270:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003272:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003276:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003278:	f107 030c 	add.w	r3, r7, #12
 800327c:	4618      	mov	r0, r3
 800327e:	f003 fd2f 	bl	8006ce0 <HAL_RCCEx_PeriphCLKConfig>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003288:	f7fd ffa4 	bl	80011d4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800328c:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <HAL_RTC_MspInit+0x74>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <HAL_RTC_MspInit+0x74>)
 8003294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800329c:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <HAL_RTC_MspInit+0x74>)
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <HAL_RTC_MspInit+0x74>)
 80032a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032a6:	6593      	str	r3, [r2, #88]	; 0x58
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RTC_MspInit+0x74>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80032b4:	bf00      	nop
 80032b6:	3760      	adds	r7, #96	; 0x60
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40002800 	.word	0x40002800
 80032c0:	40021000 	.word	0x40021000

080032c4 <swtimerInit>:
//-- External Functions
//


bool swtimerInit(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t excute = 0;


  if (excute == 1)
 80032ca:	4b20      	ldr	r3, [pc, #128]	; (800334c <swtimerInit+0x88>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <swtimerInit+0x12>
  {
    return false;  // 이미 한번 실행했다면 정지.
 80032d2:	2300      	movs	r3, #0
 80032d4:	e033      	b.n	800333e <swtimerInit+0x7a>
  }


  // 구조체 초기화
  for(i=0; i<_DEF_SW_TIMER_MAX; i++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	71fb      	strb	r3, [r7, #7]
 80032da:	e029      	b.n	8003330 <swtimerInit+0x6c>
  {
    swtimer_tbl[i].Timer_En   = OFF;
 80032dc:	79fa      	ldrb	r2, [r7, #7]
 80032de:	491c      	ldr	r1, [pc, #112]	; (8003350 <swtimerInit+0x8c>)
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Ctn  = 0;
 80032ee:	79fa      	ldrb	r2, [r7, #7]
 80032f0:	4917      	ldr	r1, [pc, #92]	; (8003350 <swtimerInit+0x8c>)
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	3304      	adds	r3, #4
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init = 0;
 8003302:	79fa      	ldrb	r2, [r7, #7]
 8003304:	4912      	ldr	r1, [pc, #72]	; (8003350 <swtimerInit+0x8c>)
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	3308      	adds	r3, #8
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFnct    = NULL;
 8003316:	79fa      	ldrb	r2, [r7, #7]
 8003318:	490d      	ldr	r1, [pc, #52]	; (8003350 <swtimerInit+0x8c>)
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	330c      	adds	r3, #12
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
  for(i=0; i<_DEF_SW_TIMER_MAX; i++)
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	3301      	adds	r3, #1
 800332e:	71fb      	strb	r3, [r7, #7]
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	2b03      	cmp	r3, #3
 8003334:	d9d2      	bls.n	80032dc <swtimerInit+0x18>
  }

  excute = 1;
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <swtimerInit+0x88>)
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]

  return true;
 800333c:	2301      	movs	r3, #1
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	200009a4 	.word	0x200009a4
 8003350:	20000954 	.word	0x20000954

08003354 <swtimerISR>:

void swtimerISR(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
  uint8_t i;


  sw_timer_counter++;
 800335a:	4b3d      	ldr	r3, [pc, #244]	; (8003450 <swtimerISR+0xfc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3301      	adds	r3, #1
 8003360:	4a3b      	ldr	r2, [pc, #236]	; (8003450 <swtimerISR+0xfc>)
 8003362:	6013      	str	r3, [r2, #0]


  for (i=0; i<_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++)     // 타이머 갯수만큼
 8003364:	2300      	movs	r3, #0
 8003366:	71fb      	strb	r3, [r7, #7]
 8003368:	e063      	b.n	8003432 <swtimerISR+0xde>
  {
    if ( swtimer_tbl[i].Timer_En == ON)                         // 타이머가 활성화 됬니?
 800336a:	79fa      	ldrb	r2, [r7, #7]
 800336c:	4939      	ldr	r1, [pc, #228]	; (8003454 <swtimerISR+0x100>)
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d156      	bne.n	800342c <swtimerISR+0xd8>
    {
      swtimer_tbl[i].Timer_Ctn--;                               // 타이머값 감소
 800337e:	79fa      	ldrb	r2, [r7, #7]
 8003380:	4934      	ldr	r1, [pc, #208]	; (8003454 <swtimerISR+0x100>)
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	3304      	adds	r3, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	1e59      	subs	r1, r3, #1
 8003392:	4830      	ldr	r0, [pc, #192]	; (8003454 <swtimerISR+0x100>)
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4403      	add	r3, r0
 800339e:	3304      	adds	r3, #4
 80033a0:	6019      	str	r1, [r3, #0]

      if (swtimer_tbl[i].Timer_Ctn == 0)                        // 타이머 오버플로어
 80033a2:	79fa      	ldrb	r2, [r7, #7]
 80033a4:	492b      	ldr	r1, [pc, #172]	; (8003454 <swtimerISR+0x100>)
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	3304      	adds	r3, #4
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d139      	bne.n	800342c <swtimerISR+0xd8>
      {
        if(swtimer_tbl[i].Timer_Mode == ONE_TIME)               // 한번만 실행하는거면
 80033b8:	79fa      	ldrb	r2, [r7, #7]
 80033ba:	4926      	ldr	r1, [pc, #152]	; (8003454 <swtimerISR+0x100>)
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	3301      	adds	r3, #1
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d108      	bne.n	80033e0 <swtimerISR+0x8c>
        {
          swtimer_tbl[i].Timer_En = OFF;                        // 타이머 OFF 한다.
 80033ce:	79fa      	ldrb	r2, [r7, #7]
 80033d0:	4920      	ldr	r1, [pc, #128]	; (8003454 <swtimerISR+0x100>)
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	2200      	movs	r2, #0
 80033de:	701a      	strb	r2, [r3, #0]
        }

        swtimer_tbl[i].Timer_Ctn = swtimer_tbl[i].Timer_Init;   // 타이머 초기화
 80033e0:	79f9      	ldrb	r1, [r7, #7]
 80033e2:	79fa      	ldrb	r2, [r7, #7]
 80033e4:	481b      	ldr	r0, [pc, #108]	; (8003454 <swtimerISR+0x100>)
 80033e6:	460b      	mov	r3, r1
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4403      	add	r3, r0
 80033f0:	3308      	adds	r3, #8
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	4817      	ldr	r0, [pc, #92]	; (8003454 <swtimerISR+0x100>)
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4403      	add	r3, r0
 8003400:	3304      	adds	r3, #4
 8003402:	6019      	str	r1, [r3, #0]

        (*swtimer_tbl[i].TmrFnct)(swtimer_tbl[i].TmrFnctArg);   // 함수 실행
 8003404:	79fa      	ldrb	r2, [r7, #7]
 8003406:	4913      	ldr	r1, [pc, #76]	; (8003454 <swtimerISR+0x100>)
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	330c      	adds	r3, #12
 8003414:	6819      	ldr	r1, [r3, #0]
 8003416:	79fa      	ldrb	r2, [r7, #7]
 8003418:	480e      	ldr	r0, [pc, #56]	; (8003454 <swtimerISR+0x100>)
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4403      	add	r3, r0
 8003424:	3310      	adds	r3, #16
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	4788      	blx	r1
  for (i=0; i<_DEF_SW_TIMER_MAX && i<sw_timer_handle_index; i++)     // 타이머 갯수만큼
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	3301      	adds	r3, #1
 8003430:	71fb      	strb	r3, [r7, #7]
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d806      	bhi.n	8003446 <swtimerISR+0xf2>
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	b29a      	uxth	r2, r3
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <swtimerISR+0x104>)
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	429a      	cmp	r2, r3
 8003444:	d391      	bcc.n	800336a <swtimerISR+0x16>
      }
    }
  }

}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	2000094c 	.word	0x2000094c
 8003454:	20000954 	.word	0x20000954
 8003458:	20000950 	.word	0x20000950

0800345c <swtimerSet>:

void swtimerSet(swtimer_handle_t TmrNum, uint32_t TmrData, uint8_t TmrMode, void (*Fnct)(void *),void *arg)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607b      	str	r3, [r7, #4]
 8003466:	4603      	mov	r3, r0
 8003468:	81fb      	strh	r3, [r7, #14]
 800346a:	4613      	mov	r3, r2
 800346c:	737b      	strb	r3, [r7, #13]
  if(TmrNum < 0) return;
 800346e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003472:	2b00      	cmp	r3, #0
 8003474:	db37      	blt.n	80034e6 <swtimerSet+0x8a>

  swtimer_tbl[TmrNum].Timer_Mode = TmrMode;    // 모드설정
 8003476:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800347a:	491e      	ldr	r1, [pc, #120]	; (80034f4 <swtimerSet+0x98>)
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	3301      	adds	r3, #1
 8003488:	7b7a      	ldrb	r2, [r7, #13]
 800348a:	701a      	strb	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 800348c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003490:	4918      	ldr	r1, [pc, #96]	; (80034f4 <swtimerSet+0x98>)
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	330c      	adds	r3, #12
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 80034a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80034a6:	4913      	ldr	r1, [pc, #76]	; (80034f4 <swtimerSet+0x98>)
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	3310      	adds	r3, #16
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Ctn  = TmrData;
 80034b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80034bc:	490d      	ldr	r1, [pc, #52]	; (80034f4 <swtimerSet+0x98>)
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3304      	adds	r3, #4
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Init = TmrData;
 80034ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80034d2:	4908      	ldr	r1, [pc, #32]	; (80034f4 <swtimerSet+0x98>)
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3308      	adds	r3, #8
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e000      	b.n	80034e8 <swtimerSet+0x8c>
  if(TmrNum < 0) return;
 80034e6:	bf00      	nop
}
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000954 	.word	0x20000954

080034f8 <swtimerStart>:

void swtimerStart(swtimer_handle_t TmrNum)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	80fb      	strh	r3, [r7, #6]
  if(TmrNum < 0) return;
 8003502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003506:	2b00      	cmp	r3, #0
 8003508:	db1e      	blt.n	8003548 <swtimerStart+0x50>

  swtimer_tbl[TmrNum].Timer_Ctn = swtimer_tbl[TmrNum].Timer_Init;
 800350a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800350e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003512:	4810      	ldr	r0, [pc, #64]	; (8003554 <swtimerStart+0x5c>)
 8003514:	460b      	mov	r3, r1
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4403      	add	r3, r0
 800351e:	3308      	adds	r3, #8
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	480c      	ldr	r0, [pc, #48]	; (8003554 <swtimerStart+0x5c>)
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4403      	add	r3, r0
 800352e:	3304      	adds	r3, #4
 8003530:	6019      	str	r1, [r3, #0]
  swtimer_tbl[TmrNum].Timer_En  = ON;
 8003532:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003536:	4907      	ldr	r1, [pc, #28]	; (8003554 <swtimerStart+0x5c>)
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	e000      	b.n	800354a <swtimerStart+0x52>
  if(TmrNum < 0) return;
 8003548:	bf00      	nop
}
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	20000954 	.word	0x20000954

08003558 <swtimerGetHandle>:
  swtimer_tbl[TmrNum].Timer_En   = OFF;
  swtimer_tbl[TmrNum].Timer_Ctn  = swtimer_tbl[TmrNum].Timer_Init;
}

swtimer_handle_t swtimerGetHandle(void)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
  swtimer_handle_t TmrIndex = sw_timer_handle_index;
 800355e:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <swtimerGetHandle+0x3c>)
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	80fb      	strh	r3, [r7, #6]

  if (TmrIndex < _DEF_SW_TIMER_MAX)
 8003566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800356a:	2b03      	cmp	r3, #3
 800356c:	dc07      	bgt.n	800357e <swtimerGetHandle+0x26>
    sw_timer_handle_index++;
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <swtimerGetHandle+0x3c>)
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	3301      	adds	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <swtimerGetHandle+0x3c>)
 800357a:	801a      	strh	r2, [r3, #0]
 800357c:	e002      	b.n	8003584 <swtimerGetHandle+0x2c>
  else
    TmrIndex = -1;
 800357e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003582:	80fb      	strh	r3, [r7, #6]

  return TmrIndex;
 8003584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	20000950 	.word	0x20000950

08003598 <uartInit>:
UART_HandleTypeDef huart1;



bool uartInit(void)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
  for(int i = 0; i <UART_MAX_CH; i++)
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	e007      	b.n	80035b4 <uartInit+0x1c>
  {
    is_open[i] = false;
 80035a4:	4a08      	ldr	r2, [pc, #32]	; (80035c8 <uartInit+0x30>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i <UART_MAX_CH; i++)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3301      	adds	r3, #1
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	ddf4      	ble.n	80035a4 <uartInit+0xc>
  }

  return true;
 80035ba:	2301      	movs	r3, #1
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	200009a8 	.word	0x200009a8

080035cc <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	6039      	str	r1, [r7, #0]
 80035d6:	71fb      	strb	r3, [r7, #7]
  bool ret =false;
 80035d8:	2300      	movs	r3, #0
 80035da:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d176      	bne.n	80036d0 <uartOpen+0x104>
  {
    case _DEF_UART1:
      huart1.Instance = USART1;
 80035e2:	4b3e      	ldr	r3, [pc, #248]	; (80036dc <uartOpen+0x110>)
 80035e4:	4a3e      	ldr	r2, [pc, #248]	; (80036e0 <uartOpen+0x114>)
 80035e6:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 80035e8:	4a3c      	ldr	r2, [pc, #240]	; (80036dc <uartOpen+0x110>)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6053      	str	r3, [r2, #4]
      huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80035ee:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <uartOpen+0x110>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	625a      	str	r2, [r3, #36]	; 0x24
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035f4:	4b39      	ldr	r3, [pc, #228]	; (80036dc <uartOpen+0x110>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	619a      	str	r2, [r3, #24]
      huart1.Init.Mode = UART_MODE_TX_RX;
 80035fa:	4b38      	ldr	r3, [pc, #224]	; (80036dc <uartOpen+0x110>)
 80035fc:	220c      	movs	r2, #12
 80035fe:	615a      	str	r2, [r3, #20]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003600:	4b36      	ldr	r3, [pc, #216]	; (80036dc <uartOpen+0x110>)
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
      huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003606:	4b35      	ldr	r3, [pc, #212]	; (80036dc <uartOpen+0x110>)
 8003608:	2200      	movs	r2, #0
 800360a:	621a      	str	r2, [r3, #32]
      huart1.Init.Parity = UART_PARITY_NONE;
 800360c:	4b33      	ldr	r3, [pc, #204]	; (80036dc <uartOpen+0x110>)
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8003612:	4b32      	ldr	r3, [pc, #200]	; (80036dc <uartOpen+0x110>)
 8003614:	2200      	movs	r2, #0
 8003616:	60da      	str	r2, [r3, #12]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003618:	4b30      	ldr	r3, [pc, #192]	; (80036dc <uartOpen+0x110>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800361e:	4b2f      	ldr	r3, [pc, #188]	; (80036dc <uartOpen+0x110>)
 8003620:	2200      	movs	r2, #0
 8003622:	629a      	str	r2, [r3, #40]	; 0x28
      qbufferCreate(&qbuffer[ch],&rx_buf[ch], 256); // 수신 버퍼 생성
 8003624:	79fa      	ldrb	r2, [r7, #7]
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4a2d      	ldr	r2, [pc, #180]	; (80036e4 <uartOpen+0x118>)
 8003630:	1898      	adds	r0, r3, r2
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	4a2c      	ldr	r2, [pc, #176]	; (80036e8 <uartOpen+0x11c>)
 8003636:	4413      	add	r3, r2
 8003638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800363c:	4619      	mov	r1, r3
 800363e:	f7fd ff34 	bl	80014aa <qbufferCreate>
      if (HAL_UART_Init(&huart1) != HAL_OK)
 8003642:	4826      	ldr	r0, [pc, #152]	; (80036dc <uartOpen+0x110>)
 8003644:	f003 fee6 	bl	8007414 <HAL_UART_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <uartOpen+0x88>
      {
        ret = false;
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]
 8003652:	e016      	b.n	8003682 <uartOpen+0xb6>
      }
      else
      {
        ret = true;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	4a24      	ldr	r2, [pc, #144]	; (80036ec <uartOpen+0x120>)
 800365c:	2101      	movs	r1, #1
 800365e:	54d1      	strb	r1, [r2, r3]
        // 수신용 데이터 버퍼 (rx_data)에 size 만큼 받아서 HAL_UART_RxCpltCallback 함수 호출
        if(HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[ch], 1) != HAL_OK)
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <uartOpen+0x124>)
 8003664:	4413      	add	r3, r2
 8003666:	2201      	movs	r2, #1
 8003668:	4619      	mov	r1, r3
 800366a:	481c      	ldr	r0, [pc, #112]	; (80036dc <uartOpen+0x110>)
 800366c:	f003 ffb0 	bl	80075d0 <HAL_UART_Receive_IT>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <uartOpen+0xb6>
        {
         ret = false;
 8003676:	2300      	movs	r3, #0
 8003678:	73fb      	strb	r3, [r7, #15]
         is_open[ch] = false;
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	4a1b      	ldr	r2, [pc, #108]	; (80036ec <uartOpen+0x120>)
 800367e:	2100      	movs	r1, #0
 8003680:	54d1      	strb	r1, [r2, r3]
        }
      }
      if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003682:	2100      	movs	r1, #0
 8003684:	4815      	ldr	r0, [pc, #84]	; (80036dc <uartOpen+0x110>)
 8003686:	f005 ff1c 	bl	80094c2 <HAL_UARTEx_SetTxFifoThreshold>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <uartOpen+0xd0>
      {
        ret = false;
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	4a15      	ldr	r2, [pc, #84]	; (80036ec <uartOpen+0x120>)
 8003698:	2100      	movs	r1, #0
 800369a:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800369c:	2100      	movs	r1, #0
 800369e:	480f      	ldr	r0, [pc, #60]	; (80036dc <uartOpen+0x110>)
 80036a0:	f005 ff4d 	bl	800953e <HAL_UARTEx_SetRxFifoThreshold>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d005      	beq.n	80036b6 <uartOpen+0xea>
      {
        ret = false;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	4a0e      	ldr	r2, [pc, #56]	; (80036ec <uartOpen+0x120>)
 80036b2:	2100      	movs	r1, #0
 80036b4:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80036b6:	4809      	ldr	r0, [pc, #36]	; (80036dc <uartOpen+0x110>)
 80036b8:	f005 feca 	bl	8009450 <HAL_UARTEx_DisableFifoMode>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <uartOpen+0x102>
      {
        ret = false;
 80036c2:	2300      	movs	r3, #0
 80036c4:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	4a08      	ldr	r2, [pc, #32]	; (80036ec <uartOpen+0x120>)
 80036ca:	2100      	movs	r1, #0
 80036cc:	54d1      	strb	r1, [r2, r3]
      }
      break;
 80036ce:	bf00      	nop
  }


  return ret;
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000ac4 	.word	0x20000ac4
 80036e0:	40013800 	.word	0x40013800
 80036e4:	200009ac 	.word	0x200009ac
 80036e8:	200009c0 	.word	0x200009c0
 80036ec:	200009a8 	.word	0x200009a8
 80036f0:	20000ac0 	.word	0x20000ac0

080036f4 <uartAvailable>:
{
  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10b      	bne.n	8003720 <uartAvailable+0x2c>
  {
    case _DEF_UART1:
      ret = qbufferAvailable(&qbuffer[ch]);
 8003708:	79fa      	ldrb	r2, [r7, #7]
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4a06      	ldr	r2, [pc, #24]	; (800372c <uartAvailable+0x38>)
 8003714:	4413      	add	r3, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f7fd ff99 	bl	800164e <qbufferAvailable>
 800371c:	60f8      	str	r0, [r7, #12]
      break;
 800371e:	bf00      	nop
  }

  return ret;
 8003720:	68fb      	ldr	r3, [r7, #12]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	200009ac 	.word	0x200009ac

08003730 <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
  switch(ch)
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10d      	bne.n	8003760 <uartRead+0x30>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[ch],&ret,1);
 8003744:	79fa      	ldrb	r2, [r7, #7]
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4a07      	ldr	r2, [pc, #28]	; (800376c <uartRead+0x3c>)
 8003750:	4413      	add	r3, r2
 8003752:	f107 010f 	add.w	r1, r7, #15
 8003756:	2201      	movs	r2, #1
 8003758:	4618      	mov	r0, r3
 800375a:	f7fd ff20 	bl	800159e <qbufferRead>
      break;
 800375e:	bf00      	nop
  }

  return ret;
 8003760:	7bfb      	ldrb	r3, [r7, #15]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	200009ac 	.word	0x200009ac

08003770 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;
  switch(ch)
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10e      	bne.n	80037a6 <uartWrite+0x36>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	b29a      	uxth	r2, r3
 800378c:	2364      	movs	r3, #100	; 0x64
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	4807      	ldr	r0, [pc, #28]	; (80037b0 <uartWrite+0x40>)
 8003792:	f003 fe8f 	bl	80074b4 <HAL_UART_Transmit>
 8003796:	4603      	mov	r3, r0
 8003798:	74fb      	strb	r3, [r7, #19]
      if(status == HAL_OK)
 800379a:	7cfb      	ldrb	r3, [r7, #19]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <uartWrite+0x34>
      {
        ret = length;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	617b      	str	r3, [r7, #20]
      }
      break;
 80037a4:	bf00      	nop
  }

  return ret;
 80037a6:	697b      	ldr	r3, [r7, #20]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000ac4 	.word	0x20000ac4

080037b4 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 80037b4:	b40e      	push	{r1, r2, r3}
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b0c7      	sub	sp, #284	; 0x11c
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	4602      	mov	r2, r0
 80037be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80037c2:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80037c6:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 80037c8:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80037cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80037d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037d4:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 80037d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80037da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037de:	f107 0010 	add.w	r0, r7, #16
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80037e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037ec:	f00b fd12 	bl	800f214 <vsniprintf>
 80037f0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 80037f4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80037f8:	f107 0110 	add.w	r1, r7, #16
 80037fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003800:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff ffb2 	bl	8003770 <uartWrite>
 800380c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8003810:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8003814:	4618      	mov	r0, r3
 8003816:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800381a:	46bd      	mov	sp, r7
 800381c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003820:	b003      	add	sp, #12
 8003822:	4770      	bx	lr

08003824 <HAL_UART_ErrorCallback>:

  return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
  {

  }
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a08      	ldr	r2, [pc, #32]	; (8003868 <HAL_UART_RxCpltCallback+0x30>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d109      	bne.n	800385e <HAL_UART_RxCpltCallback+0x26>
  {
    // 빠르게 송신시 1 바이트 사용시 인터럽트가 많이 걸려서 처리가 늦어져 overrun (덮어쓰기 에러) , 데이터 손실 에러 발생 가능
    // 고속의 송수신 - DMA 방식을 사용
    qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
 800384a:	2201      	movs	r2, #1
 800384c:	4907      	ldr	r1, [pc, #28]	; (800386c <HAL_UART_RxCpltCallback+0x34>)
 800384e:	4808      	ldr	r0, [pc, #32]	; (8003870 <HAL_UART_RxCpltCallback+0x38>)
 8003850:	f7fd fe49 	bl	80014e6 <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[_DEF_UART1], 1);
 8003854:	2201      	movs	r2, #1
 8003856:	4905      	ldr	r1, [pc, #20]	; (800386c <HAL_UART_RxCpltCallback+0x34>)
 8003858:	4806      	ldr	r0, [pc, #24]	; (8003874 <HAL_UART_RxCpltCallback+0x3c>)
 800385a:	f003 feb9 	bl	80075d0 <HAL_UART_Receive_IT>
  }
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40013800 	.word	0x40013800
 800386c:	20000ac0 	.word	0x20000ac0
 8003870:	200009ac 	.word	0x200009ac
 8003874:	20000ac4 	.word	0x20000ac4

08003878 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b09e      	sub	sp, #120	; 0x78
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003880:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003890:	f107 0310 	add.w	r3, r7, #16
 8003894:	2254      	movs	r2, #84	; 0x54
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f00b fcc9 	bl	800f230 <memset>
  if(uartHandle->Instance==USART1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a22      	ldr	r2, [pc, #136]	; (800392c <HAL_UART_MspInit+0xb4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d13d      	bne.n	8003924 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80038a8:	2301      	movs	r3, #1
 80038aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038b0:	f107 0310 	add.w	r3, r7, #16
 80038b4:	4618      	mov	r0, r3
 80038b6:	f003 fa13 	bl	8006ce0 <HAL_RCCEx_PeriphCLKConfig>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80038c0:	f7fd fc88 	bl	80011d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038c4:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <HAL_UART_MspInit+0xb8>)
 80038c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c8:	4a19      	ldr	r2, [pc, #100]	; (8003930 <HAL_UART_MspInit+0xb8>)
 80038ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ce:	6613      	str	r3, [r2, #96]	; 0x60
 80038d0:	4b17      	ldr	r3, [pc, #92]	; (8003930 <HAL_UART_MspInit+0xb8>)
 80038d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038dc:	4b14      	ldr	r3, [pc, #80]	; (8003930 <HAL_UART_MspInit+0xb8>)
 80038de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e0:	4a13      	ldr	r2, [pc, #76]	; (8003930 <HAL_UART_MspInit+0xb8>)
 80038e2:	f043 0304 	orr.w	r3, r3, #4
 80038e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <HAL_UART_MspInit+0xb8>)
 80038ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC4_USART1_TX_Pin|PC5_USART1_RX_Pin;
 80038f4:	2330      	movs	r3, #48	; 0x30
 80038f6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f8:	2302      	movs	r3, #2
 80038fa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003900:	2300      	movs	r3, #0
 8003902:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003904:	2307      	movs	r3, #7
 8003906:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003908:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800390c:	4619      	mov	r1, r3
 800390e:	4809      	ldr	r0, [pc, #36]	; (8003934 <HAL_UART_MspInit+0xbc>)
 8003910:	f000 fc82 	bl	8004218 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003914:	2200      	movs	r2, #0
 8003916:	2100      	movs	r1, #0
 8003918:	2025      	movs	r0, #37	; 0x25
 800391a:	f000 fb88 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800391e:	2025      	movs	r0, #37	; 0x25
 8003920:	f000 fb9f 	bl	8004062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003924:	bf00      	nop
 8003926:	3778      	adds	r7, #120	; 0x78
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40013800 	.word	0x40013800
 8003930:	40021000 	.word	0x40021000
 8003934:	48000800 	.word	0x48000800

08003938 <usbInit>:
#endif



bool usbInit(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
  bool ret = true;
 800393e:	2301      	movs	r3, #1
 8003940:	71fb      	strb	r3, [r7, #7]


#ifdef _USE_HW_CLI
  cliAdd("usb", cliCmd);
 8003942:	4904      	ldr	r1, [pc, #16]	; (8003954 <usbInit+0x1c>)
 8003944:	4804      	ldr	r0, [pc, #16]	; (8003958 <usbInit+0x20>)
 8003946:	f7ff f8fb 	bl	8002b40 <cliAdd>
#endif
  return ret;
 800394a:	79fb      	ldrb	r3, [r7, #7]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	08003a41 	.word	0x08003a41
 8003958:	080116b8 	.word	0x080116b8

0800395c <usbIsOpen>:
    USBD_DeInit(&hUsbDeviceFS);
  }
}

bool usbIsOpen(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  return cdcIsConnect();
 8003960:	f7fe faa6 	bl	8001eb0 <cdcIsConnect>
 8003964:	4603      	mov	r3, r0
}
 8003966:	4618      	mov	r0, r3
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <usbIsConnect>:

bool usbIsConnect(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.pClassData == NULL)
 8003970:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <usbIsConnect+0x3c>)
 8003972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <usbIsConnect+0x12>
  {
    return false;
 800397a:	2300      	movs	r3, #0
 800397c:	e00e      	b.n	800399c <usbIsConnect+0x30>
  }
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 800397e:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <usbIsConnect+0x3c>)
 8003980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b03      	cmp	r3, #3
 8003988:	d001      	beq.n	800398e <usbIsConnect+0x22>
  {
    return false;
 800398a:	2300      	movs	r3, #0
 800398c:	e006      	b.n	800399c <usbIsConnect+0x30>
  }
  if (hUsbDeviceFS.dev_config == 0)
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <usbIsConnect+0x3c>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <usbIsConnect+0x2e>
  {
    return false;
 8003996:	2300      	movs	r3, #0
 8003998:	e000      	b.n	800399c <usbIsConnect+0x30>
  }

  return true;
 800399a:	2301      	movs	r3, #1
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000b6c 	.word	0x20000b6c

080039ac <usbBegin>:
{
  return is_usb_mode;
}

bool usbBegin(UsbMode usb_mode)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]


#if HW_USE_CDC == 1

  if (usb_mode == USB_CDC_MODE)
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d12a      	bne.n	8003a16 <usbBegin+0x6a>
  {
    if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 80039c0:	2200      	movs	r2, #0
 80039c2:	4919      	ldr	r1, [pc, #100]	; (8003a28 <usbBegin+0x7c>)
 80039c4:	4819      	ldr	r0, [pc, #100]	; (8003a2c <usbBegin+0x80>)
 80039c6:	f008 fcb7 	bl	800c338 <USBD_Init>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <usbBegin+0x28>
    {
      return false;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e024      	b.n	8003a1e <usbBegin+0x72>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80039d4:	4916      	ldr	r1, [pc, #88]	; (8003a30 <usbBegin+0x84>)
 80039d6:	4815      	ldr	r0, [pc, #84]	; (8003a2c <usbBegin+0x80>)
 80039d8:	f008 fcde 	bl	800c398 <USBD_RegisterClass>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <usbBegin+0x3a>
    {
      return false;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e01b      	b.n	8003a1e <usbBegin+0x72>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80039e6:	4913      	ldr	r1, [pc, #76]	; (8003a34 <usbBegin+0x88>)
 80039e8:	4810      	ldr	r0, [pc, #64]	; (8003a2c <usbBegin+0x80>)
 80039ea:	f008 fc2f 	bl	800c24c <USBD_CDC_RegisterInterface>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <usbBegin+0x4c>
    {
      return false;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e012      	b.n	8003a1e <usbBegin+0x72>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80039f8:	480c      	ldr	r0, [pc, #48]	; (8003a2c <usbBegin+0x80>)
 80039fa:	f008 fcf4 	bl	800c3e6 <USBD_Start>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <usbBegin+0x5c>
    {
      return false;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e00a      	b.n	8003a1e <usbBegin+0x72>
    }


    cdcInit();
 8003a08:	f7fe fa3e 	bl	8001e88 <cdcInit>

    is_usb_mode = USB_CDC_MODE;
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <usbBegin+0x8c>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
    ret = true;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
    ret = true;
  }
#endif


  is_init = ret;
 8003a16:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <usbBegin+0x90>)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	7013      	strb	r3, [r2, #0]

  return ret;
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000148 	.word	0x20000148
 8003a2c:	20000b6c 	.word	0x20000b6c
 8003a30:	20000028 	.word	0x20000028
 8003a34:	20000134 	.word	0x20000134
 8003a38:	20000b59 	.word	0x20000b59
 8003a3c:	20000b58 	.word	0x20000b58

08003a40 <cliCmd>:


#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	; 0x28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (args->argc == 1 && args->isStr(0, "info") == true)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d129      	bne.n	8003aaa <cliCmd+0x6a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	4959      	ldr	r1, [pc, #356]	; (8003bc0 <cliCmd+0x180>)
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	4798      	blx	r3
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d021      	beq.n	8003aaa <cliCmd+0x6a>
  {
    while(cliKeepLoop())
 8003a66:	e014      	b.n	8003a92 <cliCmd+0x52>
    {
      cliPrintf("USB Connect : %d\n", usbIsConnect());
 8003a68:	f7ff ff80 	bl	800396c <usbIsConnect>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4854      	ldr	r0, [pc, #336]	; (8003bc4 <cliCmd+0x184>)
 8003a72:	f7fe ff55 	bl	8002920 <cliPrintf>
      cliPrintf("USB Open    : %d\n", usbIsOpen());
 8003a76:	f7ff ff71 	bl	800395c <usbIsOpen>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4852      	ldr	r0, [pc, #328]	; (8003bc8 <cliCmd+0x188>)
 8003a80:	f7fe ff4e 	bl	8002920 <cliPrintf>
      cliPrintf("\x1B[%dA", 2);
 8003a84:	2102      	movs	r1, #2
 8003a86:	4851      	ldr	r0, [pc, #324]	; (8003bcc <cliCmd+0x18c>)
 8003a88:	f7fe ff4a 	bl	8002920 <cliPrintf>
      delay(100);
 8003a8c:	2064      	movs	r0, #100	; 0x64
 8003a8e:	f7fd fb35 	bl	80010fc <delay>
    while(cliKeepLoop())
 8003a92:	f7ff f83f 	bl	8002b14 <cliKeepLoop>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e5      	bne.n	8003a68 <cliCmd+0x28>
    }
    cliPrintf("\x1B[%dB", 2);
 8003a9c:	2102      	movs	r1, #2
 8003a9e:	484c      	ldr	r0, [pc, #304]	; (8003bd0 <cliCmd+0x190>)
 8003aa0:	f7fe ff3e 	bl	8002920 <cliPrintf>

    ret = true;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (args->argc == 1 && args->isStr(0, "tx") == true)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d130      	bne.n	8003b14 <cliCmd+0xd4>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	4947      	ldr	r1, [pc, #284]	; (8003bd4 <cliCmd+0x194>)
 8003ab8:	2000      	movs	r0, #0
 8003aba:	4798      	blx	r3
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d028      	beq.n	8003b14 <cliCmd+0xd4>
  {
    uint32_t pre_time;
    uint32_t tx_cnt = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]

    while(cliKeepLoop())
 8003ac6:	e019      	b.n	8003afc <cliCmd+0xbc>
    {
      if (millis()-pre_time >= 1000)
 8003ac8:	f7fd fb23 	bl	8001112 <millis>
 8003acc:	4602      	mov	r2, r0
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ad6:	d30a      	bcc.n	8003aee <cliCmd+0xae>
      {
        pre_time = millis();
 8003ad8:	f7fd fb1b 	bl	8001112 <millis>
 8003adc:	6238      	str	r0, [r7, #32]
        logPrintf("tx : %d KB/s\n", tx_cnt/1024);
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	0a9b      	lsrs	r3, r3, #10
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	483c      	ldr	r0, [pc, #240]	; (8003bd8 <cliCmd+0x198>)
 8003ae6:	f7ff faa7 	bl	8003038 <logPrintf>
        tx_cnt = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
      }
      cdcWrite((uint8_t *)"123456789012345678901234567890\n", 31);
 8003aee:	211f      	movs	r1, #31
 8003af0:	483a      	ldr	r0, [pc, #232]	; (8003bdc <cliCmd+0x19c>)
 8003af2:	f7fe f9f2 	bl	8001eda <cdcWrite>
      tx_cnt += 31;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	331f      	adds	r3, #31
 8003afa:	61fb      	str	r3, [r7, #28]
    while(cliKeepLoop())
 8003afc:	f7ff f80a 	bl	8002b14 <cliKeepLoop>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e0      	bne.n	8003ac8 <cliCmd+0x88>
    }
    cliPrintf("\x1B[%dB", 2);
 8003b06:	2102      	movs	r1, #2
 8003b08:	4831      	ldr	r0, [pc, #196]	; (8003bd0 <cliCmd+0x190>)
 8003b0a:	f7fe ff09 	bl	8002920 <cliPrintf>

    ret = true;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (args->argc == 1 && args->isStr(0, "rx") == true)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d13c      	bne.n	8003b96 <cliCmd+0x156>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	492f      	ldr	r1, [pc, #188]	; (8003be0 <cliCmd+0x1a0>)
 8003b22:	2000      	movs	r0, #0
 8003b24:	4798      	blx	r3
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d034      	beq.n	8003b96 <cliCmd+0x156>
  {
    uint32_t pre_time;
    uint32_t rx_cnt = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
    uint32_t rx_len;

    while(cliKeepLoop())
 8003b30:	e025      	b.n	8003b7e <cliCmd+0x13e>
    {
      if (millis()-pre_time >= 1000)
 8003b32:	f7fd faee 	bl	8001112 <millis>
 8003b36:	4602      	mov	r2, r0
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b40:	d30a      	bcc.n	8003b58 <cliCmd+0x118>
      {
        pre_time = millis();
 8003b42:	f7fd fae6 	bl	8001112 <millis>
 8003b46:	61b8      	str	r0, [r7, #24]
        logPrintf("rx : %d KB/s\n", rx_cnt/1024);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	0a9b      	lsrs	r3, r3, #10
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4825      	ldr	r0, [pc, #148]	; (8003be4 <cliCmd+0x1a4>)
 8003b50:	f7ff fa72 	bl	8003038 <logPrintf>
        rx_cnt = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
      }

      rx_len = cdcAvailable();
 8003b58:	f7fe f9b1 	bl	8001ebe <cdcAvailable>
 8003b5c:	60f8      	str	r0, [r7, #12]

      for (int i=0; i<rx_len; i++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e004      	b.n	8003b6e <cliCmd+0x12e>
      {
        cdcRead();
 8003b64:	f7fe f9b2 	bl	8001ecc <cdcRead>
      for (int i=0; i<rx_len; i++)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d8f6      	bhi.n	8003b64 <cliCmd+0x124>
      }

      rx_cnt += rx_len;
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]
    while(cliKeepLoop())
 8003b7e:	f7fe ffc9 	bl	8002b14 <cliKeepLoop>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1d4      	bne.n	8003b32 <cliCmd+0xf2>
    }
    cliPrintf("\x1B[%dB", 2);
 8003b88:	2102      	movs	r1, #2
 8003b8a:	4811      	ldr	r0, [pc, #68]	; (8003bd0 <cliCmd+0x190>)
 8003b8c:	f7fe fec8 	bl	8002920 <cliPrintf>

    ret = true;
 8003b90:	2301      	movs	r3, #1
 8003b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (ret == false)
 8003b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b9a:	f083 0301 	eor.w	r3, r3, #1
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <cliCmd+0x176>
  {
    cliPrintf("usb info\n");
 8003ba4:	4810      	ldr	r0, [pc, #64]	; (8003be8 <cliCmd+0x1a8>)
 8003ba6:	f7fe febb 	bl	8002920 <cliPrintf>
    cliPrintf("usb tx\n");
 8003baa:	4810      	ldr	r0, [pc, #64]	; (8003bec <cliCmd+0x1ac>)
 8003bac:	f7fe feb8 	bl	8002920 <cliPrintf>
    cliPrintf("usb rx\n");
 8003bb0:	480f      	ldr	r0, [pc, #60]	; (8003bf0 <cliCmd+0x1b0>)
 8003bb2:	f7fe feb5 	bl	8002920 <cliPrintf>
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	3728      	adds	r7, #40	; 0x28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	080116bc 	.word	0x080116bc
 8003bc4:	080116c4 	.word	0x080116c4
 8003bc8:	080116d8 	.word	0x080116d8
 8003bcc:	080116ec 	.word	0x080116ec
 8003bd0:	080116f4 	.word	0x080116f4
 8003bd4:	080116fc 	.word	0x080116fc
 8003bd8:	08011700 	.word	0x08011700
 8003bdc:	08011710 	.word	0x08011710
 8003be0:	08011730 	.word	0x08011730
 8003be4:	08011734 	.word	0x08011734
 8003be8:	08011744 	.word	0x08011744
 8003bec:	08011750 	.word	0x08011750
 8003bf0:	08011758 	.word	0x08011758

08003bf4 <hwInit>:
 */
#include "hw.h"
button_event_t btn_evt;

bool hwInit(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
  bool ret = true;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	71fb      	strb	r3, [r7, #7]

  ret &= bspInit();
 8003bfe:	f7fd fa17 	bl	8001030 <bspInit>
 8003c02:	4603      	mov	r3, r0
 8003c04:	461a      	mov	r2, r3
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bf14      	ite	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	2300      	moveq	r3, #0
 8003c12:	71fb      	strb	r3, [r7, #7]
  ret &= rtcInit();
 8003c14:	f7ff fac8 	bl	80031a8 <rtcInit>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf14      	ite	ne
 8003c24:	2301      	movne	r3, #1
 8003c26:	2300      	moveq	r3, #0
 8003c28:	71fb      	strb	r3, [r7, #7]
  ret &= swtimerInit();
 8003c2a:	f7ff fb4b 	bl	80032c4 <swtimerInit>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	461a      	mov	r2, r3
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bf14      	ite	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	2300      	moveq	r3, #0
 8003c3e:	71fb      	strb	r3, [r7, #7]
#ifdef _USE_HW_RESET
  ret &= resetInit();
 8003c40:	f7ff fa1c 	bl	800307c <resetInit>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf14      	ite	ne
 8003c50:	2301      	movne	r3, #1
 8003c52:	2300      	moveq	r3, #0
 8003c54:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef _USE_HW_RESET
  if (resetGetCount() == 2)
 8003c56:	f7ff fa57 	bl	8003108 <resetGetCount>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d101      	bne.n	8003c64 <hwInit+0x70>
  {
    // Jump To SystemBootloader
    resetToSystemBoot();
 8003c60:	f7ff fa5e 	bl	8003120 <resetToSystemBoot>
  }
#endif
  ret &= flashInit();
 8003c64:	f7ff f890 	bl	8002d88 <flashInit>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf14      	ite	ne
 8003c74:	2301      	movne	r3, #1
 8003c76:	2300      	moveq	r3, #0
 8003c78:	71fb      	strb	r3, [r7, #7]
  ret &= buttonInit();
 8003c7a:	f7fd fd01 	bl	8001680 <buttonInit>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	461a      	mov	r2, r3
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bf14      	ite	ne
 8003c8a:	2301      	movne	r3, #1
 8003c8c:	2300      	moveq	r3, #0
 8003c8e:	71fb      	strb	r3, [r7, #7]
  ret &= buttonEventInit(&btn_evt, 5);
 8003c90:	2105      	movs	r1, #5
 8003c92:	482e      	ldr	r0, [pc, #184]	; (8003d4c <hwInit+0x158>)
 8003c94:	f7fd fdb4 	bl	8001800 <buttonEventInit>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	71fb      	strb	r3, [r7, #7]
  ret &= ledInit();
 8003caa:	f7ff f879 	bl	8002da0 <ledInit>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	bf14      	ite	ne
 8003cba:	2301      	movne	r3, #1
 8003cbc:	2300      	moveq	r3, #0
 8003cbe:	71fb      	strb	r3, [r7, #7]
  ret &= usbInit();
 8003cc0:	f7ff fe3a 	bl	8003938 <usbInit>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bf14      	ite	ne
 8003cd0:	2301      	movne	r3, #1
 8003cd2:	2300      	moveq	r3, #0
 8003cd4:	71fb      	strb	r3, [r7, #7]
  ret &= usbBegin(USB_CDC_MODE);
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f7ff fe68 	bl	80039ac <usbBegin>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	461a      	mov	r2, r3
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf14      	ite	ne
 8003ce8:	2301      	movne	r3, #1
 8003cea:	2300      	moveq	r3, #0
 8003cec:	71fb      	strb	r3, [r7, #7]
  ret &= uartInit();
 8003cee:	f7ff fc53 	bl	8003598 <uartInit>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	bf14      	ite	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	2300      	moveq	r3, #0
 8003d02:	71fb      	strb	r3, [r7, #7]
  ret &= logInit();
 8003d04:	f7ff f990 	bl	8003028 <logInit>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	71fb      	strb	r3, [r7, #7]
  ret &= cliInit();
 8003d1a:	f7fe f8ed 	bl	8001ef8 <cliInit>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	461a      	mov	r2, r3
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	bf14      	ite	ne
 8003d2a:	2301      	movne	r3, #1
 8003d2c:	2300      	moveq	r3, #0
 8003d2e:	71fb      	strb	r3, [r7, #7]
  /* Reset Test */
  uartPrintf(_DEF_UART1, "Reset Count : %d\n", resetGetCount());
 8003d30:	f7ff f9ea 	bl	8003108 <resetGetCount>
 8003d34:	4603      	mov	r3, r0
 8003d36:	461a      	mov	r2, r3
 8003d38:	4905      	ldr	r1, [pc, #20]	; (8003d50 <hwInit+0x15c>)
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	f7ff fd3a 	bl	80037b4 <uartPrintf>
  return ret;
 8003d40:	79fb      	ldrb	r3, [r7, #7]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000b5c 	.word	0x20000b5c
 8003d50:	08011760 	.word	0x08011760

08003d54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d5e:	2003      	movs	r0, #3
 8003d60:	f000 f95a 	bl	8004018 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d64:	200f      	movs	r0, #15
 8003d66:	f000 f80d 	bl	8003d84 <HAL_InitTick>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	71fb      	strb	r3, [r7, #7]
 8003d74:	e001      	b.n	8003d7a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d76:	f7fd fa35 	bl	80011e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d7a:	79fb      	ldrb	r3, [r7, #7]

}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003d90:	4b16      	ldr	r3, [pc, #88]	; (8003dec <HAL_InitTick+0x68>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d022      	beq.n	8003dde <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003d98:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <HAL_InitTick+0x6c>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b13      	ldr	r3, [pc, #76]	; (8003dec <HAL_InitTick+0x68>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 f966 	bl	800407e <HAL_SYSTICK_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10f      	bne.n	8003dd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b0f      	cmp	r3, #15
 8003dbc:	d809      	bhi.n	8003dd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc6:	f000 f932 	bl	800402e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dca:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <HAL_InitTick+0x70>)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	e007      	b.n	8003de2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
 8003dd6:	e004      	b.n	8003de2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
 8003ddc:	e001      	b.n	8003de2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000018 	.word	0x20000018
 8003df0:	20000000 	.word	0x20000000
 8003df4:	20000014 	.word	0x20000014

08003df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dfc:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <HAL_IncTick+0x1c>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_IncTick+0x20>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4413      	add	r3, r2
 8003e06:	4a03      	ldr	r2, [pc, #12]	; (8003e14 <HAL_IncTick+0x1c>)
 8003e08:	6013      	str	r3, [r2, #0]
}
 8003e0a:	bf00      	nop
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	20000b64 	.word	0x20000b64
 8003e18:	20000018 	.word	0x20000018

08003e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <HAL_GetTick+0x14>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000b64 	.word	0x20000b64

08003e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e3c:	f7ff ffee 	bl	8003e1c <HAL_GetTick>
 8003e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d004      	beq.n	8003e58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_Delay+0x40>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4413      	add	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e58:	bf00      	nop
 8003e5a:	f7ff ffdf 	bl	8003e1c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d8f7      	bhi.n	8003e5a <HAL_Delay+0x26>
  {
  }
}
 8003e6a:	bf00      	nop
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000018 	.word	0x20000018

08003e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <__NVIC_SetPriorityGrouping+0x44>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e94:	4013      	ands	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eaa:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <__NVIC_SetPriorityGrouping+0x44>)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	60d3      	str	r3, [r2, #12]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec4:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	f003 0307 	and.w	r3, r3, #7
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	db0b      	blt.n	8003f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	f003 021f 	and.w	r2, r3, #31
 8003ef4:	4907      	ldr	r1, [pc, #28]	; (8003f14 <__NVIC_EnableIRQ+0x38>)
 8003ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2001      	movs	r0, #1
 8003efe:	fa00 f202 	lsl.w	r2, r0, r2
 8003f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	e000e100 	.word	0xe000e100

08003f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	6039      	str	r1, [r7, #0]
 8003f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	db0a      	blt.n	8003f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	490c      	ldr	r1, [pc, #48]	; (8003f64 <__NVIC_SetPriority+0x4c>)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	0112      	lsls	r2, r2, #4
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f40:	e00a      	b.n	8003f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	4908      	ldr	r1, [pc, #32]	; (8003f68 <__NVIC_SetPriority+0x50>)
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	3b04      	subs	r3, #4
 8003f50:	0112      	lsls	r2, r2, #4
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	440b      	add	r3, r1
 8003f56:	761a      	strb	r2, [r3, #24]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000e100 	.word	0xe000e100
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b089      	sub	sp, #36	; 0x24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f1c3 0307 	rsb	r3, r3, #7
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	bf28      	it	cs
 8003f8a:	2304      	movcs	r3, #4
 8003f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	3304      	adds	r3, #4
 8003f92:	2b06      	cmp	r3, #6
 8003f94:	d902      	bls.n	8003f9c <NVIC_EncodePriority+0x30>
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3b03      	subs	r3, #3
 8003f9a:	e000      	b.n	8003f9e <NVIC_EncodePriority+0x32>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43da      	mvns	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	401a      	ands	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbe:	43d9      	mvns	r1, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc4:	4313      	orrs	r3, r2
         );
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3724      	adds	r7, #36	; 0x24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe4:	d301      	bcc.n	8003fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e00f      	b.n	800400a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fea:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <SysTick_Config+0x40>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ff2:	210f      	movs	r1, #15
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	f7ff ff8e 	bl	8003f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <SysTick_Config+0x40>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004002:	4b04      	ldr	r3, [pc, #16]	; (8004014 <SysTick_Config+0x40>)
 8004004:	2207      	movs	r2, #7
 8004006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	e000e010 	.word	0xe000e010

08004018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff29 	bl	8003e78 <__NVIC_SetPriorityGrouping>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800403c:	f7ff ff40 	bl	8003ec0 <__NVIC_GetPriorityGrouping>
 8004040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	6978      	ldr	r0, [r7, #20]
 8004048:	f7ff ff90 	bl	8003f6c <NVIC_EncodePriority>
 800404c:	4602      	mov	r2, r0
 800404e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff5f 	bl	8003f18 <__NVIC_SetPriority>
}
 800405a:	bf00      	nop
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	4603      	mov	r3, r0
 800406a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800406c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff ff33 	bl	8003edc <__NVIC_EnableIRQ>
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff ffa4 	bl	8003fd4 <SysTick_Config>
 800408c:	4603      	mov	r3, r0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d005      	beq.n	80040ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2204      	movs	r2, #4
 80040b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
 80040b8:	e037      	b.n	800412a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 020e 	bic.w	r2, r2, #14
 80040c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	f003 021f 	and.w	r2, r3, #31
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	2101      	movs	r1, #1
 80040f8:	fa01 f202 	lsl.w	r2, r1, r2
 80040fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004106:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00c      	beq.n	800412a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800411e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004128:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800413a:	7bfb      	ldrb	r3, [r7, #15]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d00d      	beq.n	800417c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2204      	movs	r2, #4
 8004164:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	e047      	b.n	800420c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 020e 	bic.w	r2, r2, #14
 800418a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0201 	bic.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	f003 021f 	and.w	r2, r3, #31
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	2101      	movs	r1, #1
 80041ba:	fa01 f202 	lsl.w	r2, r1, r2
 80041be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00c      	beq.n	80041ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	4798      	blx	r3
    }
  }
  return status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004226:	e15a      	b.n	80044de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	2101      	movs	r1, #1
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	fa01 f303 	lsl.w	r3, r1, r3
 8004234:	4013      	ands	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 814c 	beq.w	80044d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d005      	beq.n	8004258 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004254:	2b02      	cmp	r3, #2
 8004256:	d130      	bne.n	80042ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	2203      	movs	r2, #3
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4013      	ands	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800428e:	2201      	movs	r2, #1
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4013      	ands	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	091b      	lsrs	r3, r3, #4
 80042a4:	f003 0201 	and.w	r2, r3, #1
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d017      	beq.n	80042f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4013      	ands	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d123      	bne.n	800434a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	08da      	lsrs	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3208      	adds	r2, #8
 800430a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800430e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	220f      	movs	r2, #15
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4013      	ands	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	08da      	lsrs	r2, r3, #3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3208      	adds	r2, #8
 8004344:	6939      	ldr	r1, [r7, #16]
 8004346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	2203      	movs	r2, #3
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4013      	ands	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 0203 	and.w	r2, r3, #3
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 80a6 	beq.w	80044d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800438c:	4b5b      	ldr	r3, [pc, #364]	; (80044fc <HAL_GPIO_Init+0x2e4>)
 800438e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004390:	4a5a      	ldr	r2, [pc, #360]	; (80044fc <HAL_GPIO_Init+0x2e4>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	6613      	str	r3, [r2, #96]	; 0x60
 8004398:	4b58      	ldr	r3, [pc, #352]	; (80044fc <HAL_GPIO_Init+0x2e4>)
 800439a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043a4:	4a56      	ldr	r2, [pc, #344]	; (8004500 <HAL_GPIO_Init+0x2e8>)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	089b      	lsrs	r3, r3, #2
 80043aa:	3302      	adds	r3, #2
 80043ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	220f      	movs	r2, #15
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	43db      	mvns	r3, r3
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4013      	ands	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043ce:	d01f      	beq.n	8004410 <HAL_GPIO_Init+0x1f8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a4c      	ldr	r2, [pc, #304]	; (8004504 <HAL_GPIO_Init+0x2ec>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d019      	beq.n	800440c <HAL_GPIO_Init+0x1f4>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a4b      	ldr	r2, [pc, #300]	; (8004508 <HAL_GPIO_Init+0x2f0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d013      	beq.n	8004408 <HAL_GPIO_Init+0x1f0>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a4a      	ldr	r2, [pc, #296]	; (800450c <HAL_GPIO_Init+0x2f4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00d      	beq.n	8004404 <HAL_GPIO_Init+0x1ec>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a49      	ldr	r2, [pc, #292]	; (8004510 <HAL_GPIO_Init+0x2f8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d007      	beq.n	8004400 <HAL_GPIO_Init+0x1e8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a48      	ldr	r2, [pc, #288]	; (8004514 <HAL_GPIO_Init+0x2fc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d101      	bne.n	80043fc <HAL_GPIO_Init+0x1e4>
 80043f8:	2305      	movs	r3, #5
 80043fa:	e00a      	b.n	8004412 <HAL_GPIO_Init+0x1fa>
 80043fc:	2306      	movs	r3, #6
 80043fe:	e008      	b.n	8004412 <HAL_GPIO_Init+0x1fa>
 8004400:	2304      	movs	r3, #4
 8004402:	e006      	b.n	8004412 <HAL_GPIO_Init+0x1fa>
 8004404:	2303      	movs	r3, #3
 8004406:	e004      	b.n	8004412 <HAL_GPIO_Init+0x1fa>
 8004408:	2302      	movs	r3, #2
 800440a:	e002      	b.n	8004412 <HAL_GPIO_Init+0x1fa>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_GPIO_Init+0x1fa>
 8004410:	2300      	movs	r3, #0
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	f002 0203 	and.w	r2, r2, #3
 8004418:	0092      	lsls	r2, r2, #2
 800441a:	4093      	lsls	r3, r2
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004422:	4937      	ldr	r1, [pc, #220]	; (8004500 <HAL_GPIO_Init+0x2e8>)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	089b      	lsrs	r3, r3, #2
 8004428:	3302      	adds	r3, #2
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004430:	4b39      	ldr	r3, [pc, #228]	; (8004518 <HAL_GPIO_Init+0x300>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	43db      	mvns	r3, r3
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4013      	ands	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004454:	4a30      	ldr	r2, [pc, #192]	; (8004518 <HAL_GPIO_Init+0x300>)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800445a:	4b2f      	ldr	r3, [pc, #188]	; (8004518 <HAL_GPIO_Init+0x300>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	43db      	mvns	r3, r3
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4013      	ands	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800447e:	4a26      	ldr	r2, [pc, #152]	; (8004518 <HAL_GPIO_Init+0x300>)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004484:	4b24      	ldr	r3, [pc, #144]	; (8004518 <HAL_GPIO_Init+0x300>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	43db      	mvns	r3, r3
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4013      	ands	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044a8:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <HAL_GPIO_Init+0x300>)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044ae:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <HAL_GPIO_Init+0x300>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	43db      	mvns	r3, r3
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4013      	ands	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044d2:	4a11      	ldr	r2, [pc, #68]	; (8004518 <HAL_GPIO_Init+0x300>)
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	3301      	adds	r3, #1
 80044dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f47f ae9d 	bne.w	8004228 <HAL_GPIO_Init+0x10>
  }
}
 80044ee:	bf00      	nop
 80044f0:	bf00      	nop
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40021000 	.word	0x40021000
 8004500:	40010000 	.word	0x40010000
 8004504:	48000400 	.word	0x48000400
 8004508:	48000800 	.word	0x48000800
 800450c:	48000c00 	.word	0x48000c00
 8004510:	48001000 	.word	0x48001000
 8004514:	48001400 	.word	0x48001400
 8004518:	40010400 	.word	0x40010400

0800451c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	887b      	ldrh	r3, [r7, #2]
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004534:	2301      	movs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
 8004538:	e001      	b.n	800453e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800453a:	2300      	movs	r3, #0
 800453c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800453e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	807b      	strh	r3, [r7, #2]
 8004558:	4613      	mov	r3, r2
 800455a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800455c:	787b      	ldrb	r3, [r7, #1]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004562:	887a      	ldrh	r2, [r7, #2]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004568:	e002      	b.n	8004570 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800456a:	887a      	ldrh	r2, [r7, #2]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800458e:	887a      	ldrh	r2, [r7, #2]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4013      	ands	r3, r2
 8004594:	041a      	lsls	r2, r3, #16
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	43d9      	mvns	r1, r3
 800459a:	887b      	ldrh	r3, [r7, #2]
 800459c:	400b      	ands	r3, r1
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	619a      	str	r2, [r3, #24]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e0c0      	b.n	8004744 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f009 faee 	bl	800dbb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2203      	movs	r2, #3
 80045e0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f005 f84c 	bl	8009686 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ee:	2300      	movs	r3, #0
 80045f0:	73fb      	strb	r3, [r7, #15]
 80045f2:	e03e      	b.n	8004672 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045f4:	7bfa      	ldrb	r2, [r7, #15]
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	440b      	add	r3, r1
 8004602:	3311      	adds	r3, #17
 8004604:	2201      	movs	r2, #1
 8004606:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004608:	7bfa      	ldrb	r2, [r7, #15]
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	440b      	add	r3, r1
 8004616:	3310      	adds	r3, #16
 8004618:	7bfa      	ldrb	r2, [r7, #15]
 800461a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800461c:	7bfa      	ldrb	r2, [r7, #15]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	440b      	add	r3, r1
 800462a:	3313      	adds	r3, #19
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	440b      	add	r3, r1
 800463e:	3320      	adds	r3, #32
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	440b      	add	r3, r1
 8004652:	3324      	adds	r3, #36	; 0x24
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	440b      	add	r3, r1
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	3301      	adds	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	791b      	ldrb	r3, [r3, #4]
 8004676:	7bfa      	ldrb	r2, [r7, #15]
 8004678:	429a      	cmp	r2, r3
 800467a:	d3bb      	bcc.n	80045f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800467c:	2300      	movs	r3, #0
 800467e:	73fb      	strb	r3, [r7, #15]
 8004680:	e044      	b.n	800470c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004682:	7bfa      	ldrb	r2, [r7, #15]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	440b      	add	r3, r1
 8004690:	f203 1351 	addw	r3, r3, #337	; 0x151
 8004694:	2200      	movs	r2, #0
 8004696:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004698:	7bfa      	ldrb	r2, [r7, #15]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	440b      	add	r3, r1
 80046a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80046aa:	7bfa      	ldrb	r2, [r7, #15]
 80046ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046ae:	7bfa      	ldrb	r2, [r7, #15]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	440b      	add	r3, r1
 80046bc:	f203 1353 	addw	r3, r3, #339	; 0x153
 80046c0:	2200      	movs	r2, #0
 80046c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046c4:	7bfa      	ldrb	r2, [r7, #15]
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	440b      	add	r3, r1
 80046d2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046da:	7bfa      	ldrb	r2, [r7, #15]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	440b      	add	r3, r1
 80046e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046f0:	7bfa      	ldrb	r2, [r7, #15]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	440b      	add	r3, r1
 80046fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	3301      	adds	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	791b      	ldrb	r3, [r3, #4]
 8004710:	7bfa      	ldrb	r2, [r7, #15]
 8004712:	429a      	cmp	r2, r3
 8004714:	d3b5      	bcc.n	8004682 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3304      	adds	r3, #4
 800471e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004722:	f004 ffcb 	bl	80096bc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	7a9b      	ldrb	r3, [r3, #10]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d102      	bne.n	8004742 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f001 fc41 	bl	8005fc4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_PCD_Start+0x16>
 800475e:	2302      	movs	r3, #2
 8004760:	e012      	b.n	8004788 <HAL_PCD_Start+0x3c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f004 ff72 	bl	8009658 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f007 fa32 	bl	800bbe2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f007 fa37 	bl	800bc10 <USB_ReadInterrupts>
 80047a2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fb04 	bl	8004dbc <PCD_EP_ISR_Handler>

    return;
 80047b4:	e110      	b.n	80049d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d013      	beq.n	80047e8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d2:	b292      	uxth	r2, r2
 80047d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f009 fa7e 	bl	800dcda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80047de:	2100      	movs	r1, #0
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f8fc 	bl	80049de <HAL_PCD_SetAddress>

    return;
 80047e6:	e0f7      	b.n	80049d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00c      	beq.n	800480c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004804:	b292      	uxth	r2, r2
 8004806:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800480a:	e0e5      	b.n	80049d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00c      	beq.n	8004830 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800481e:	b29a      	uxth	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004828:	b292      	uxth	r2, r2
 800482a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800482e:	e0d3      	b.n	80049d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d034      	beq.n	80048a4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0204 	bic.w	r2, r2, #4
 800484c:	b292      	uxth	r2, r2
 800484e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0208 	bic.w	r2, r2, #8
 8004864:	b292      	uxth	r2, r2
 8004866:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004870:	2b01      	cmp	r3, #1
 8004872:	d107      	bne.n	8004884 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800487c:	2100      	movs	r1, #0
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f009 fc1e 	bl	800e0c0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f009 fa61 	bl	800dd4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004892:	b29a      	uxth	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800489c:	b292      	uxth	r2, r2
 800489e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80048a2:	e099      	b.n	80049d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d027      	beq.n	80048fe <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 0208 	orr.w	r2, r2, #8
 80048c0:	b292      	uxth	r2, r2
 80048c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048d8:	b292      	uxth	r2, r2
 80048da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0204 	orr.w	r2, r2, #4
 80048f0:	b292      	uxth	r2, r2
 80048f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f009 fa0e 	bl	800dd18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80048fc:	e06c      	b.n	80049d8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b00      	cmp	r3, #0
 8004906:	d040      	beq.n	800498a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004910:	b29a      	uxth	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800491a:	b292      	uxth	r2, r2
 800491c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d12b      	bne.n	8004982 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004932:	b29a      	uxth	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0204 	orr.w	r2, r2, #4
 800493c:	b292      	uxth	r2, r2
 800493e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800494a:	b29a      	uxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0208 	orr.w	r2, r2, #8
 8004954:	b292      	uxth	r2, r2
 8004956:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800496a:	b29b      	uxth	r3, r3
 800496c:	089b      	lsrs	r3, r3, #2
 800496e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004978:	2101      	movs	r1, #1
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f009 fba0 	bl	800e0c0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004980:	e02a      	b.n	80049d8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f009 f9c8 	bl	800dd18 <HAL_PCD_SuspendCallback>
    return;
 8004988:	e026      	b.n	80049d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00f      	beq.n	80049b4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800499c:	b29a      	uxth	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049a6:	b292      	uxth	r2, r2
 80049a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f009 f986 	bl	800dcbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80049b2:	e011      	b.n	80049d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00c      	beq.n	80049d8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049d0:	b292      	uxth	r2, r2
 80049d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80049d6:	bf00      	nop
  }
}
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	460b      	mov	r3, r1
 80049e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_PCD_SetAddress+0x1a>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e012      	b.n	8004a1e <HAL_PCD_SetAddress+0x40>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f007 f8d3 	bl	800bbba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	4608      	mov	r0, r1
 8004a30:	4611      	mov	r1, r2
 8004a32:	461a      	mov	r2, r3
 8004a34:	4603      	mov	r3, r0
 8004a36:	70fb      	strb	r3, [r7, #3]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	803b      	strh	r3, [r7, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	da0e      	bge.n	8004a6a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	f003 0207 	and.w	r2, r3, #7
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	3310      	adds	r3, #16
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	4413      	add	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	705a      	strb	r2, [r3, #1]
 8004a68:	e00e      	b.n	8004a88 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	f003 0207 	and.w	r2, r3, #7
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	4413      	add	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a94:	883a      	ldrh	r2, [r7, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	78ba      	ldrb	r2, [r7, #2]
 8004a9e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004aa0:	78bb      	ldrb	r3, [r7, #2]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d102      	bne.n	8004aac <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_PCD_EP_Open+0x94>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e00e      	b.n	8004ad8 <HAL_PCD_EP_Open+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68f9      	ldr	r1, [r7, #12]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f004 fe15 	bl	80096f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8004ad6:	7afb      	ldrb	r3, [r7, #11]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004aec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	da0e      	bge.n	8004b12 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	f003 0207 	and.w	r2, r3, #7
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	3310      	adds	r3, #16
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	4413      	add	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	705a      	strb	r2, [r3, #1]
 8004b10:	e00e      	b.n	8004b30 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	f003 0207 	and.w	r2, r3, #7
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	4413      	add	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_PCD_EP_Close+0x6a>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e00e      	b.n	8004b68 <HAL_PCD_EP_Close+0x88>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68f9      	ldr	r1, [r7, #12]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f005 f991 	bl	8009e80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b80:	7afb      	ldrb	r3, [r7, #11]
 8004b82:	f003 0207 	and.w	r2, r3, #7
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4413      	add	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2200      	movs	r2, #0
 8004bae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bb0:	7afb      	ldrb	r3, [r7, #11]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6979      	ldr	r1, [r7, #20]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f005 fb49 	bl	800a25a <USB_EPStartXfer>

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	f003 0207 	and.w	r2, r3, #7
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	440b      	add	r3, r1
 8004bf0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004bf4:	681b      	ldr	r3, [r3, #0]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b086      	sub	sp, #24
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c12:	7afb      	ldrb	r3, [r7, #11]
 8004c14:	f003 0207 	and.w	r2, r3, #7
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	3310      	adds	r3, #16
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2200      	movs	r2, #0
 8004c46:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c4e:	7afb      	ldrb	r3, [r7, #11]
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6979      	ldr	r1, [r7, #20]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f005 fafa 	bl	800a25a <USB_EPStartXfer>

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	7912      	ldrb	r2, [r2, #4]
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e03e      	b.n	8004d0c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	da0e      	bge.n	8004cb4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	f003 0207 	and.w	r2, r3, #7
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	3310      	adds	r3, #16
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	4413      	add	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	705a      	strb	r2, [r3, #1]
 8004cb2:	e00c      	b.n	8004cce <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_PCD_EP_SetStall+0x7e>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e00e      	b.n	8004d0c <HAL_PCD_EP_SetStall+0x9c>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68f9      	ldr	r1, [r7, #12]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f006 fe5d 	bl	800b9bc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	7912      	ldrb	r2, [r2, #4]
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e040      	b.n	8004db4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	da0e      	bge.n	8004d58 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	f003 0207 	and.w	r2, r3, #7
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	3310      	adds	r3, #16
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	705a      	strb	r2, [r3, #1]
 8004d56:	e00e      	b.n	8004d76 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	f003 0207 	and.w	r2, r3, #7
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_PCD_EP_ClrStall+0x82>
 8004d92:	2302      	movs	r3, #2
 8004d94:	e00e      	b.n	8004db4 <HAL_PCD_EP_ClrStall+0xa0>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68f9      	ldr	r1, [r7, #12]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f006 fe5a 	bl	800ba5e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b096      	sub	sp, #88	; 0x58
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004dc4:	e3ae      	b.n	8005524 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004dce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004dd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8004de0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f040 8170 	bne.w	80050ca <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004dea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d14d      	bne.n	8004e92 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	81fb      	strh	r3, [r7, #14]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	89fb      	ldrh	r3, [r7, #14]
 8004e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3310      	adds	r3, #16
 8004e1e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4413      	add	r3, r2
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	441a      	add	r2, r3
 8004e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e54:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004e56:	2100      	movs	r1, #0
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f008 ff16 	bl	800dc8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	7b1b      	ldrb	r3, [r3, #12]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 835d 	beq.w	8005524 <PCD_EP_ISR_Handler+0x768>
 8004e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f040 8358 	bne.w	8005524 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	7b1b      	ldrb	r3, [r3, #12]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	b292      	uxth	r2, r2
 8004e86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	731a      	strb	r2, [r3, #12]
 8004e90:	e348      	b.n	8005524 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e98:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004ea4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d032      	beq.n	8004f16 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ed6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6818      	ldr	r0, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8004ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f006 fee2 	bl	800bcb4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004efc:	4013      	ands	r3, r2
 8004efe:	823b      	strh	r3, [r7, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	8a3a      	ldrh	r2, [r7, #16]
 8004f06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f0a:	b292      	uxth	r2, r2
 8004f0c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f008 fe8e 	bl	800dc30 <HAL_PCD_SetupStageCallback>
 8004f14:	e306      	b.n	8005524 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004f16:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f280 8302 	bge.w	8005524 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	83fb      	strh	r3, [r7, #30]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	8bfa      	ldrh	r2, [r7, #30]
 8004f36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f3a:	b292      	uxth	r2, r2
 8004f3c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4413      	add	r3, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	4413      	add	r3, r2
 8004f58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f64:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d019      	beq.n	8004fa2 <PCD_EP_ISR_Handler+0x1e6>
 8004f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d015      	beq.n	8004fa2 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f7c:	6959      	ldr	r1, [r3, #20]
 8004f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f80:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f84:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f006 fe94 	bl	800bcb4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f8e:	695a      	ldr	r2, [r3, #20]
 8004f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	441a      	add	r2, r3
 8004f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f98:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f008 fe59 	bl	800dc54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004fac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f040 82b5 	bne.w	8005524 <PCD_EP_ISR_Handler+0x768>
 8004fba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004fbe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004fc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fc6:	f000 82ad 	beq.w	8005524 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	61bb      	str	r3, [r7, #24]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	4413      	add	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	801a      	strh	r2, [r3, #0]
 8004ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b3e      	cmp	r3, #62	; 0x3e
 8005000:	d91d      	bls.n	800503e <PCD_EP_ISR_Handler+0x282>
 8005002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	647b      	str	r3, [r7, #68]	; 0x44
 800500a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	2b00      	cmp	r3, #0
 8005014:	d102      	bne.n	800501c <PCD_EP_ISR_Handler+0x260>
 8005016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005018:	3b01      	subs	r3, #1
 800501a:	647b      	str	r3, [r7, #68]	; 0x44
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29a      	uxth	r2, r3
 8005022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005024:	b29b      	uxth	r3, r3
 8005026:	029b      	lsls	r3, r3, #10
 8005028:	b29b      	uxth	r3, r3
 800502a:	4313      	orrs	r3, r2
 800502c:	b29b      	uxth	r3, r3
 800502e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005036:	b29a      	uxth	r2, r3
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	801a      	strh	r2, [r3, #0]
 800503c:	e026      	b.n	800508c <PCD_EP_ISR_Handler+0x2d0>
 800503e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <PCD_EP_ISR_Handler+0x2a0>
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005054:	b29a      	uxth	r2, r3
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	801a      	strh	r2, [r3, #0]
 800505a:	e017      	b.n	800508c <PCD_EP_ISR_Handler+0x2d0>
 800505c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	647b      	str	r3, [r7, #68]	; 0x44
 8005064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <PCD_EP_ISR_Handler+0x2ba>
 8005070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005072:	3301      	adds	r3, #1
 8005074:	647b      	str	r3, [r7, #68]	; 0x44
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	b29a      	uxth	r2, r3
 800507c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800507e:	b29b      	uxth	r3, r3
 8005080:	029b      	lsls	r3, r3, #10
 8005082:	b29b      	uxth	r3, r3
 8005084:	4313      	orrs	r3, r2
 8005086:	b29a      	uxth	r2, r3
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	b29b      	uxth	r3, r3
 8005094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509c:	827b      	strh	r3, [r7, #18]
 800509e:	8a7b      	ldrh	r3, [r7, #18]
 80050a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050a4:	827b      	strh	r3, [r7, #18]
 80050a6:	8a7b      	ldrh	r3, [r7, #18]
 80050a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050ac:	827b      	strh	r3, [r7, #18]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	8a7b      	ldrh	r3, [r7, #18]
 80050b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	8013      	strh	r3, [r2, #0]
 80050c8:	e22c      	b.n	8005524 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80050de:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f280 80f6 	bge.w	80052d4 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80050fe:	4013      	ands	r3, r2
 8005100:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005116:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800511a:	b292      	uxth	r2, r2
 800511c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800511e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	4413      	add	r3, r2
 8005132:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005136:	7b1b      	ldrb	r3, [r3, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d123      	bne.n	8005184 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005144:	b29b      	uxth	r3, r3
 8005146:	461a      	mov	r2, r3
 8005148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	4413      	add	r3, r2
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6812      	ldr	r2, [r2, #0]
 8005154:	4413      	add	r3, r2
 8005156:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005160:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005164:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 808e 	beq.w	800528a <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005174:	6959      	ldr	r1, [r3, #20]
 8005176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005178:	88da      	ldrh	r2, [r3, #6]
 800517a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800517e:	f006 fd99 	bl	800bcb4 <USB_ReadPMA>
 8005182:	e082      	b.n	800528a <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005186:	78db      	ldrb	r3, [r3, #3]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d10a      	bne.n	80051a2 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800518c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005190:	461a      	mov	r2, r3
 8005192:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f9d3 	bl	8005540 <HAL_PCD_EP_DB_Receive>
 800519a:	4603      	mov	r3, r0
 800519c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80051a0:	e073      	b.n	800528a <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051bc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	441a      	add	r2, r3
 80051ce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80051d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d022      	beq.n	8005246 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005208:	b29b      	uxth	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4413      	add	r3, r2
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	4413      	add	r3, r2
 800521a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005224:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005228:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800522c:	2b00      	cmp	r3, #0
 800522e:	d02c      	beq.n	800528a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005236:	6959      	ldr	r1, [r3, #20]
 8005238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800523a:	891a      	ldrh	r2, [r3, #8]
 800523c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005240:	f006 fd38 	bl	800bcb4 <USB_ReadPMA>
 8005244:	e021      	b.n	800528a <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800524e:	b29b      	uxth	r3, r3
 8005250:	461a      	mov	r2, r3
 8005252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4413      	add	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6812      	ldr	r2, [r2, #0]
 800525e:	4413      	add	r3, r2
 8005260:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800526a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800526e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800527c:	6959      	ldr	r1, [r3, #20]
 800527e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005280:	895a      	ldrh	r2, [r3, #10]
 8005282:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005286:	f006 fd15 	bl	800bcb4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800528a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800528c:	69da      	ldr	r2, [r3, #28]
 800528e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005292:	441a      	add	r2, r3
 8005294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005296:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800529a:	695a      	ldr	r2, [r3, #20]
 800529c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80052a0:	441a      	add	r2, r3
 80052a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80052a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <PCD_EP_ISR_Handler+0x4fe>
 80052ae:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80052b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d206      	bcs.n	80052c8 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80052ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	4619      	mov	r1, r3
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f008 fcc7 	bl	800dc54 <HAL_PCD_DataOutStageCallback>
 80052c6:	e005      	b.n	80052d4 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052ce:	4618      	mov	r0, r3
 80052d0:	f004 ffc3 	bl	800a25a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80052d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80052d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 8121 	beq.w	8005524 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80052e2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	3310      	adds	r3, #16
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	4413      	add	r3, r2
 80052f4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800530c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005310:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	441a      	add	r2, r3
 8005322:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532e:	b29b      	uxth	r3, r3
 8005330:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005334:	78db      	ldrb	r3, [r3, #3]
 8005336:	2b01      	cmp	r3, #1
 8005338:	f040 80a2 	bne.w	8005480 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800533c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800533e:	2200      	movs	r2, #0
 8005340:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005344:	7b1b      	ldrb	r3, [r3, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 8093 	beq.w	8005472 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800534c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	d046      	beq.n	80053e6 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d126      	bne.n	80053ae <PCD_EP_ISR_Handler+0x5f2>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536e:	b29b      	uxth	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	4413      	add	r3, r2
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
 8005378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	00da      	lsls	r2, r3, #3
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	4413      	add	r3, r2
 8005382:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005386:	623b      	str	r3, [r7, #32]
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005392:	b29a      	uxth	r2, r3
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	801a      	strh	r2, [r3, #0]
 80053ac:	e061      	b.n	8005472 <PCD_EP_ISR_Handler+0x6b6>
 80053ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d15d      	bne.n	8005472 <PCD_EP_ISR_Handler+0x6b6>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	461a      	mov	r2, r3
 80053c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ca:	4413      	add	r3, r2
 80053cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	00da      	lsls	r2, r3, #3
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	4413      	add	r3, r2
 80053d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e0:	2200      	movs	r2, #0
 80053e2:	801a      	strh	r2, [r3, #0]
 80053e4:	e045      	b.n	8005472 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ee:	785b      	ldrb	r3, [r3, #1]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d126      	bne.n	8005442 <PCD_EP_ISR_Handler+0x686>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	637b      	str	r3, [r7, #52]	; 0x34
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005402:	b29b      	uxth	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005408:	4413      	add	r3, r2
 800540a:	637b      	str	r3, [r7, #52]	; 0x34
 800540c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	00da      	lsls	r2, r3, #3
 8005412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005414:	4413      	add	r3, r2
 8005416:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800541a:	633b      	str	r3, [r7, #48]	; 0x30
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	b29b      	uxth	r3, r3
 8005422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005426:	b29a      	uxth	r2, r3
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	801a      	strh	r2, [r3, #0]
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	b29b      	uxth	r3, r3
 8005432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800543a:	b29a      	uxth	r2, r3
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543e:	801a      	strh	r2, [r3, #0]
 8005440:	e017      	b.n	8005472 <PCD_EP_ISR_Handler+0x6b6>
 8005442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005444:	785b      	ldrb	r3, [r3, #1]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d113      	bne.n	8005472 <PCD_EP_ISR_Handler+0x6b6>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005452:	b29b      	uxth	r3, r3
 8005454:	461a      	mov	r2, r3
 8005456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005458:	4413      	add	r3, r2
 800545a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800545c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	00da      	lsls	r2, r3, #3
 8005462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005464:	4413      	add	r3, r2
 8005466:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800546a:	63bb      	str	r3, [r7, #56]	; 0x38
 800546c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546e:	2200      	movs	r2, #0
 8005470:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f008 fc06 	bl	800dc8a <HAL_PCD_DataInStageCallback>
 800547e:	e051      	b.n	8005524 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005480:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005488:	2b00      	cmp	r3, #0
 800548a:	d144      	bne.n	8005516 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005494:	b29b      	uxth	r3, r3
 8005496:	461a      	mov	r2, r3
 8005498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	4413      	add	r3, r2
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	4413      	add	r3, r2
 80054a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80054b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054b6:	699a      	ldr	r2, [r3, #24]
 80054b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80054bc:	429a      	cmp	r2, r3
 80054be:	d907      	bls.n	80054d0 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80054c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80054c8:	1ad2      	subs	r2, r2, r3
 80054ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054cc:	619a      	str	r2, [r3, #24]
 80054ce:	e002      	b.n	80054d6 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80054d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d2:	2200      	movs	r2, #0
 80054d4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80054d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	4619      	mov	r1, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f008 fbd0 	bl	800dc8a <HAL_PCD_DataInStageCallback>
 80054ea:	e01b      	b.n	8005524 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80054ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ee:	695a      	ldr	r2, [r3, #20]
 80054f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80054f4:	441a      	add	r2, r3
 80054f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054f8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80054fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054fc:	69da      	ldr	r2, [r3, #28]
 80054fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005502:	441a      	add	r2, r3
 8005504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005506:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800550e:	4618      	mov	r0, r3
 8005510:	f004 fea3 	bl	800a25a <USB_EPStartXfer>
 8005514:	e006      	b.n	8005524 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005516:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800551a:	461a      	mov	r2, r3
 800551c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f917 	bl	8005752 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800552c:	b29b      	uxth	r3, r3
 800552e:	b21b      	sxth	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	f6ff ac48 	blt.w	8004dc6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3758      	adds	r7, #88	; 0x58
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	4613      	mov	r3, r2
 800554c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d07c      	beq.n	8005652 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005560:	b29b      	uxth	r3, r3
 8005562:	461a      	mov	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	4413      	add	r3, r2
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	6812      	ldr	r2, [r2, #0]
 8005570:	4413      	add	r3, r2
 8005572:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800557c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	8b7b      	ldrh	r3, [r7, #26]
 8005584:	429a      	cmp	r2, r3
 8005586:	d306      	bcc.n	8005596 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	699a      	ldr	r2, [r3, #24]
 800558c:	8b7b      	ldrh	r3, [r7, #26]
 800558e:	1ad2      	subs	r2, r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	619a      	str	r2, [r3, #24]
 8005594:	e002      	b.n	800559c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2200      	movs	r2, #0
 800559a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d123      	bne.n	80055ec <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055be:	833b      	strh	r3, [r7, #24]
 80055c0:	8b3b      	ldrh	r3, [r7, #24]
 80055c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055c6:	833b      	strh	r3, [r7, #24]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	441a      	add	r2, r3
 80055d6:	8b3b      	ldrh	r3, [r7, #24]
 80055d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01f      	beq.n	8005636 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	b29b      	uxth	r3, r3
 8005608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005610:	82fb      	strh	r3, [r7, #22]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	441a      	add	r2, r3
 8005620:	8afb      	ldrh	r3, [r7, #22]
 8005622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800562a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005632:	b29b      	uxth	r3, r3
 8005634:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005636:	8b7b      	ldrh	r3, [r7, #26]
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 8085 	beq.w	8005748 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	6959      	ldr	r1, [r3, #20]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	891a      	ldrh	r2, [r3, #8]
 800564a:	8b7b      	ldrh	r3, [r7, #26]
 800564c:	f006 fb32 	bl	800bcb4 <USB_ReadPMA>
 8005650:	e07a      	b.n	8005748 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565a:	b29b      	uxth	r3, r3
 800565c:	461a      	mov	r2, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4413      	add	r3, r2
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	4413      	add	r3, r2
 800566c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005676:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	699a      	ldr	r2, [r3, #24]
 800567c:	8b7b      	ldrh	r3, [r7, #26]
 800567e:	429a      	cmp	r2, r3
 8005680:	d306      	bcc.n	8005690 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	8b7b      	ldrh	r3, [r7, #26]
 8005688:	1ad2      	subs	r2, r2, r3
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	619a      	str	r2, [r3, #24]
 800568e:	e002      	b.n	8005696 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2200      	movs	r2, #0
 8005694:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d123      	bne.n	80056e6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b8:	83fb      	strh	r3, [r7, #30]
 80056ba:	8bfb      	ldrh	r3, [r7, #30]
 80056bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056c0:	83fb      	strh	r3, [r7, #30]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	441a      	add	r2, r3
 80056d0:	8bfb      	ldrh	r3, [r7, #30]
 80056d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80056e6:	88fb      	ldrh	r3, [r7, #6]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d11f      	bne.n	8005730 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	461a      	mov	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	83bb      	strh	r3, [r7, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	441a      	add	r2, r3
 800571a:	8bbb      	ldrh	r3, [r7, #28]
 800571c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005728:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800572c:	b29b      	uxth	r3, r3
 800572e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005730:	8b7b      	ldrh	r3, [r7, #26]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d008      	beq.n	8005748 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	6959      	ldr	r1, [r3, #20]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	895a      	ldrh	r2, [r3, #10]
 8005742:	8b7b      	ldrh	r3, [r7, #26]
 8005744:	f006 fab6 	bl	800bcb4 <USB_ReadPMA>
    }
  }

  return count;
 8005748:	8b7b      	ldrh	r3, [r7, #26]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b0a4      	sub	sp, #144	; 0x90
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	4613      	mov	r3, r2
 800575e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005760:	88fb      	ldrh	r3, [r7, #6]
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 81db 	beq.w	8005b22 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005774:	b29b      	uxth	r3, r3
 8005776:	461a      	mov	r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	4413      	add	r3, r2
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	6812      	ldr	r2, [r2, #0]
 8005784:	4413      	add	r3, r2
 8005786:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005790:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	699a      	ldr	r2, [r3, #24]
 8005798:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800579c:	429a      	cmp	r2, r3
 800579e:	d907      	bls.n	80057b0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	699a      	ldr	r2, [r3, #24]
 80057a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80057a8:	1ad2      	subs	r2, r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	619a      	str	r2, [r3, #24]
 80057ae:	e002      	b.n	80057b6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2200      	movs	r2, #0
 80057b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f040 80b9 	bne.w	8005932 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d126      	bne.n	8005816 <HAL_PCD_EP_DB_Transmit+0xc4>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	461a      	mov	r2, r3
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	4413      	add	r3, r2
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	00da      	lsls	r2, r3, #3
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	4413      	add	r3, r2
 80057ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80057f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	801a      	strh	r2, [r3, #0]
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800580e:	b29a      	uxth	r2, r3
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	801a      	strh	r2, [r3, #0]
 8005814:	e01a      	b.n	800584c <HAL_PCD_EP_DB_Transmit+0xfa>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	785b      	ldrb	r3, [r3, #1]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d116      	bne.n	800584c <HAL_PCD_EP_DB_Transmit+0xfa>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	637b      	str	r3, [r7, #52]	; 0x34
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800582c:	b29b      	uxth	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	4413      	add	r3, r2
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	00da      	lsls	r2, r3, #3
 800583c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583e:	4413      	add	r3, r2
 8005840:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005844:	633b      	str	r3, [r7, #48]	; 0x30
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	2200      	movs	r2, #0
 800584a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	627b      	str	r3, [r7, #36]	; 0x24
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d126      	bne.n	80058a8 <HAL_PCD_EP_DB_Transmit+0x156>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	61fb      	str	r3, [r7, #28]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005868:	b29b      	uxth	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	4413      	add	r3, r2
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	00da      	lsls	r2, r3, #3
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	4413      	add	r3, r2
 800587c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	b29b      	uxth	r3, r3
 8005888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800588c:	b29a      	uxth	r2, r3
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	b29b      	uxth	r3, r3
 8005898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800589c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	801a      	strh	r2, [r3, #0]
 80058a6:	e017      	b.n	80058d8 <HAL_PCD_EP_DB_Transmit+0x186>
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	785b      	ldrb	r3, [r3, #1]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d113      	bne.n	80058d8 <HAL_PCD_EP_DB_Transmit+0x186>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	4413      	add	r3, r2
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	00da      	lsls	r2, r3, #3
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	4413      	add	r3, r2
 80058cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058d0:	623b      	str	r3, [r7, #32]
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	2200      	movs	r2, #0
 80058d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	4619      	mov	r1, r3
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f008 f9d3 	bl	800dc8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058e4:	88fb      	ldrh	r3, [r7, #6]
 80058e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 82fa 	beq.w	8005ee4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	b29b      	uxth	r3, r3
 8005902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590a:	82fb      	strh	r3, [r7, #22]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	441a      	add	r2, r3
 800591a:	8afb      	ldrh	r3, [r7, #22]
 800591c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592c:	b29b      	uxth	r3, r3
 800592e:	8013      	strh	r3, [r2, #0]
 8005930:	e2d8      	b.n	8005ee4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d021      	beq.n	8005980 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	441a      	add	r2, r3
 8005968:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800596c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597c:	b29b      	uxth	r3, r3
 800597e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005986:	2b01      	cmp	r3, #1
 8005988:	f040 82ac 	bne.w	8005ee4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	695a      	ldr	r2, [r3, #20]
 8005990:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005994:	441a      	add	r2, r3
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	69da      	ldr	r2, [r3, #28]
 800599e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80059a2:	441a      	add	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	6a1a      	ldr	r2, [r3, #32]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d30b      	bcc.n	80059cc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6a1a      	ldr	r2, [r3, #32]
 80059c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059c4:	1ad2      	subs	r2, r2, r3
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	621a      	str	r2, [r3, #32]
 80059ca:	e017      	b.n	80059fc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d108      	bne.n	80059e6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80059d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80059d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80059e4:	e00a      	b.n	80059fc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2200      	movs	r2, #0
 80059fa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	785b      	ldrb	r3, [r3, #1]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d165      	bne.n	8005ad0 <HAL_PCD_EP_DB_Transmit+0x37e>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a18:	4413      	add	r3, r2
 8005a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	00da      	lsls	r2, r3, #3
 8005a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a24:	4413      	add	r3, r2
 8005a26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	801a      	strh	r2, [r3, #0]
 8005a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a40:	2b3e      	cmp	r3, #62	; 0x3e
 8005a42:	d91d      	bls.n	8005a80 <HAL_PCD_EP_DB_Transmit+0x32e>
 8005a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a50:	f003 031f 	and.w	r3, r3, #31
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d102      	bne.n	8005a5e <HAL_PCD_EP_DB_Transmit+0x30c>
 8005a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	029b      	lsls	r3, r3, #10
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	801a      	strh	r2, [r3, #0]
 8005a7e:	e044      	b.n	8005b0a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10a      	bne.n	8005a9e <HAL_PCD_EP_DB_Transmit+0x34c>
 8005a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	801a      	strh	r2, [r3, #0]
 8005a9c:	e035      	b.n	8005b0a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aa2:	085b      	lsrs	r3, r3, #1
 8005aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <HAL_PCD_EP_DB_Transmit+0x366>
 8005ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	029b      	lsls	r3, r3, #10
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	e01c      	b.n	8005b0a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d118      	bne.n	8005b0a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aec:	4413      	add	r3, r2
 8005aee:	647b      	str	r3, [r7, #68]	; 0x44
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	00da      	lsls	r2, r3, #3
 8005af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af8:	4413      	add	r3, r2
 8005afa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005afe:	643b      	str	r3, [r7, #64]	; 0x40
 8005b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b08:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6959      	ldr	r1, [r3, #20]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	891a      	ldrh	r2, [r3, #8]
 8005b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	f006 f888 	bl	800bc30 <USB_WritePMA>
 8005b20:	e1e0      	b.n	8005ee4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	4413      	add	r3, r2
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	6812      	ldr	r2, [r2, #0]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b46:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d307      	bcc.n	8005b66 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005b5e:	1ad2      	subs	r2, r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	619a      	str	r2, [r3, #24]
 8005b64:	e002      	b.n	8005b6c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f040 80c0 	bne.w	8005cf6 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	785b      	ldrb	r3, [r3, #1]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d126      	bne.n	8005bcc <HAL_PCD_EP_DB_Transmit+0x47a>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b92:	4413      	add	r3, r2
 8005b94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	00da      	lsls	r2, r3, #3
 8005b9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ba4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bc8:	801a      	strh	r2, [r3, #0]
 8005bca:	e01a      	b.n	8005c02 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d116      	bne.n	8005c02 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	667b      	str	r3, [r7, #100]	; 0x64
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005be8:	4413      	add	r3, r2
 8005bea:	667b      	str	r3, [r7, #100]	; 0x64
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	00da      	lsls	r2, r3, #3
 8005bf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bfa:	663b      	str	r3, [r7, #96]	; 0x60
 8005bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bfe:	2200      	movs	r2, #0
 8005c00:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	677b      	str	r3, [r7, #116]	; 0x74
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	785b      	ldrb	r3, [r3, #1]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d12b      	bne.n	8005c68 <HAL_PCD_EP_DB_Transmit+0x516>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c24:	4413      	add	r3, r2
 8005c26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	00da      	lsls	r2, r3, #3
 8005c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c30:	4413      	add	r3, r2
 8005c32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c4c:	801a      	strh	r2, [r3, #0]
 8005c4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	e017      	b.n	8005c98 <HAL_PCD_EP_DB_Transmit+0x546>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d113      	bne.n	8005c98 <HAL_PCD_EP_DB_Transmit+0x546>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c7e:	4413      	add	r3, r2
 8005c80:	677b      	str	r3, [r7, #116]	; 0x74
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	00da      	lsls	r2, r3, #3
 8005c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c90:	673b      	str	r3, [r7, #112]	; 0x70
 8005c92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c94:	2200      	movs	r2, #0
 8005c96:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f007 fff3 	bl	800dc8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ca4:	88fb      	ldrh	r3, [r7, #6]
 8005ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f040 811a 	bne.w	8005ee4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	441a      	add	r2, r3
 8005cdc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8013      	strh	r3, [r2, #0]
 8005cf4:	e0f6      	b.n	8005ee4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005cf6:	88fb      	ldrh	r3, [r7, #6]
 8005cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d121      	bne.n	8005d44 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	441a      	add	r2, r3
 8005d2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	f040 80ca 	bne.w	8005ee4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	695a      	ldr	r2, [r3, #20]
 8005d54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005d58:	441a      	add	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	69da      	ldr	r2, [r3, #28]
 8005d62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005d66:	441a      	add	r2, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	6a1a      	ldr	r2, [r3, #32]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d30b      	bcc.n	8005d90 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6a1a      	ldr	r2, [r3, #32]
 8005d84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d88:	1ad2      	subs	r2, r2, r3
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	621a      	str	r2, [r3, #32]
 8005d8e:	e017      	b.n	8005dc0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d108      	bne.n	8005daa <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005d98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005d9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005da8:	e00a      	b.n	8005dc0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2200      	movs	r2, #0
 8005db6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	657b      	str	r3, [r7, #84]	; 0x54
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d165      	bne.n	8005e9a <HAL_PCD_EP_DB_Transmit+0x748>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005de2:	4413      	add	r3, r2
 8005de4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	00da      	lsls	r2, r3, #3
 8005dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dee:	4413      	add	r3, r2
 8005df0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005df4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e04:	801a      	strh	r2, [r3, #0]
 8005e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e0c:	d91d      	bls.n	8005e4a <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d102      	bne.n	8005e28 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005e22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e24:	3b01      	subs	r3, #1
 8005e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	029b      	lsls	r3, r3, #10
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	4313      	orrs	r3, r2
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	e041      	b.n	8005ece <HAL_PCD_EP_DB_Transmit+0x77c>
 8005e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10a      	bne.n	8005e68 <HAL_PCD_EP_DB_Transmit+0x716>
 8005e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e64:	801a      	strh	r2, [r3, #0]
 8005e66:	e032      	b.n	8005ece <HAL_PCD_EP_DB_Transmit+0x77c>
 8005e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <HAL_PCD_EP_DB_Transmit+0x730>
 8005e7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e7e:	3301      	adds	r3, #1
 8005e80:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	029b      	lsls	r3, r3, #10
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	4313      	orrs	r3, r2
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e96:	801a      	strh	r2, [r3, #0]
 8005e98:	e019      	b.n	8005ece <HAL_PCD_EP_DB_Transmit+0x77c>
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	785b      	ldrb	r3, [r3, #1]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d115      	bne.n	8005ece <HAL_PCD_EP_DB_Transmit+0x77c>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eb0:	4413      	add	r3, r2
 8005eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	00da      	lsls	r2, r3, #3
 8005eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ec2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ecc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	6959      	ldr	r1, [r3, #20]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	895a      	ldrh	r2, [r3, #10]
 8005eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f005 fea6 	bl	800bc30 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005efe:	82bb      	strh	r3, [r7, #20]
 8005f00:	8abb      	ldrh	r3, [r7, #20]
 8005f02:	f083 0310 	eor.w	r3, r3, #16
 8005f06:	82bb      	strh	r3, [r7, #20]
 8005f08:	8abb      	ldrh	r3, [r7, #20]
 8005f0a:	f083 0320 	eor.w	r3, r3, #32
 8005f0e:	82bb      	strh	r3, [r7, #20]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	461a      	mov	r2, r3
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	441a      	add	r2, r3
 8005f1e:	8abb      	ldrh	r3, [r7, #20]
 8005f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3790      	adds	r7, #144	; 0x90
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b087      	sub	sp, #28
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	60f8      	str	r0, [r7, #12]
 8005f46:	607b      	str	r3, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	817b      	strh	r3, [r7, #10]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005f50:	897b      	ldrh	r3, [r7, #10]
 8005f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00b      	beq.n	8005f74 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f5c:	897b      	ldrh	r3, [r7, #10]
 8005f5e:	f003 0207 	and.w	r2, r3, #7
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	3310      	adds	r3, #16
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4413      	add	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	e009      	b.n	8005f88 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f74:	897a      	ldrh	r2, [r7, #10]
 8005f76:	4613      	mov	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4413      	add	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005f88:	893b      	ldrh	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d107      	bne.n	8005f9e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2200      	movs	r2, #0
 8005f92:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	80da      	strh	r2, [r3, #6]
 8005f9c:	e00b      	b.n	8005fb6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	0c1b      	lsrs	r3, r3, #16
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f043 0302 	orr.w	r3, r3, #2
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d141      	bne.n	80060aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006026:	4b4b      	ldr	r3, [pc, #300]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800602e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006032:	d131      	bne.n	8006098 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006034:	4b47      	ldr	r3, [pc, #284]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800603a:	4a46      	ldr	r2, [pc, #280]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800603c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006040:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006044:	4b43      	ldr	r3, [pc, #268]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800604c:	4a41      	ldr	r2, [pc, #260]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800604e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006052:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006054:	4b40      	ldr	r3, [pc, #256]	; (8006158 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2232      	movs	r2, #50	; 0x32
 800605a:	fb02 f303 	mul.w	r3, r2, r3
 800605e:	4a3f      	ldr	r2, [pc, #252]	; (800615c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006060:	fba2 2303 	umull	r2, r3, r2, r3
 8006064:	0c9b      	lsrs	r3, r3, #18
 8006066:	3301      	adds	r3, #1
 8006068:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800606a:	e002      	b.n	8006072 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3b01      	subs	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006072:	4b38      	ldr	r3, [pc, #224]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800607a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800607e:	d102      	bne.n	8006086 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f2      	bne.n	800606c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006086:	4b33      	ldr	r3, [pc, #204]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800608e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006092:	d158      	bne.n	8006146 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e057      	b.n	8006148 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006098:	4b2e      	ldr	r3, [pc, #184]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800609a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800609e:	4a2d      	ldr	r2, [pc, #180]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80060a8:	e04d      	b.n	8006146 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b0:	d141      	bne.n	8006136 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80060b2:	4b28      	ldr	r3, [pc, #160]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80060ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060be:	d131      	bne.n	8006124 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060c0:	4b24      	ldr	r3, [pc, #144]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060c6:	4a23      	ldr	r2, [pc, #140]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80060d0:	4b20      	ldr	r3, [pc, #128]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80060d8:	4a1e      	ldr	r2, [pc, #120]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060e0:	4b1d      	ldr	r3, [pc, #116]	; (8006158 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2232      	movs	r2, #50	; 0x32
 80060e6:	fb02 f303 	mul.w	r3, r2, r3
 80060ea:	4a1c      	ldr	r2, [pc, #112]	; (800615c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80060ec:	fba2 2303 	umull	r2, r3, r2, r3
 80060f0:	0c9b      	lsrs	r3, r3, #18
 80060f2:	3301      	adds	r3, #1
 80060f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060f6:	e002      	b.n	80060fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060fe:	4b15      	ldr	r3, [pc, #84]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610a:	d102      	bne.n	8006112 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1f2      	bne.n	80060f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006112:	4b10      	ldr	r3, [pc, #64]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800611a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611e:	d112      	bne.n	8006146 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e011      	b.n	8006148 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800612a:	4a0a      	ldr	r2, [pc, #40]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800612c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006130:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006134:	e007      	b.n	8006146 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006136:	4b07      	ldr	r3, [pc, #28]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800613e:	4a05      	ldr	r2, [pc, #20]	; (8006154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006140:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006144:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	40007000 	.word	0x40007000
 8006158:	20000000 	.word	0x20000000
 800615c:	431bde83 	.word	0x431bde83

08006160 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006164:	4b05      	ldr	r3, [pc, #20]	; (800617c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	4a04      	ldr	r2, [pc, #16]	; (800617c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800616a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800616e:	6093      	str	r3, [r2, #8]
}
 8006170:	bf00      	nop
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40007000 	.word	0x40007000

08006180 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006186:	f7fd fe49 	bl	8003e1c <HAL_GetTick>
 800618a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800618c:	4b39      	ldr	r3, [pc, #228]	; (8006274 <HAL_RCC_DeInit+0xf4>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a38      	ldr	r2, [pc, #224]	; (8006274 <HAL_RCC_DeInit+0xf4>)
 8006192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006196:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006198:	e008      	b.n	80061ac <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800619a:	f7fd fe3f 	bl	8003e1c <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e05f      	b.n	800626c <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061ac:	4b31      	ldr	r3, [pc, #196]	; (8006274 <HAL_RCC_DeInit+0xf4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0f0      	beq.n	800619a <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 80061b8:	4b2e      	ldr	r3, [pc, #184]	; (8006274 <HAL_RCC_DeInit+0xf4>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	4a2d      	ldr	r2, [pc, #180]	; (8006274 <HAL_RCC_DeInit+0xf4>)
 80061be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061c2:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061c4:	f7fd fe2a 	bl	8003e1c <HAL_GetTick>
 80061c8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 80061ca:	4b2a      	ldr	r3, [pc, #168]	; (8006274 <HAL_RCC_DeInit+0xf4>)
 80061cc:	2201      	movs	r2, #1
 80061ce:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80061d0:	e00a      	b.n	80061e8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061d2:	f7fd fe23 	bl	8003e1c <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e041      	b.n	800626c <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80061e8:	4b22      	ldr	r3, [pc, #136]	; (8006274 <HAL_RCC_DeInit+0xf4>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 030c 	and.w	r3, r3, #12
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d1ee      	bne.n	80061d2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80061f4:	4b20      	ldr	r3, [pc, #128]	; (8006278 <HAL_RCC_DeInit+0xf8>)
 80061f6:	4a21      	ldr	r2, [pc, #132]	; (800627c <HAL_RCC_DeInit+0xfc>)
 80061f8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80061fa:	4b21      	ldr	r3, [pc, #132]	; (8006280 <HAL_RCC_DeInit+0x100>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fd fdc0 	bl	8003d84 <HAL_InitTick>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e02e      	b.n	800626c <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 800620e:	4b19      	ldr	r3, [pc, #100]	; (8006274 <HAL_RCC_DeInit+0xf4>)
 8006210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006214:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8006216:	4b17      	ldr	r3, [pc, #92]	; (8006274 <HAL_RCC_DeInit+0xf4>)
 8006218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800621c:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800621e:	f7fd fdfd 	bl	8003e1c <HAL_GetTick>
 8006222:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006224:	e008      	b.n	8006238 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006226:	f7fd fdf9 	bl	8003e1c <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e019      	b.n	800626c <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006238:	4b0e      	ldr	r3, [pc, #56]	; (8006274 <HAL_RCC_DeInit+0xf4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1f0      	bne.n	8006226 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8006244:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <HAL_RCC_DeInit+0xf4>)
 8006246:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800624a:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800624c:	4b09      	ldr	r3, [pc, #36]	; (8006274 <HAL_RCC_DeInit+0xf4>)
 800624e:	2200      	movs	r2, #0
 8006250:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8006252:	4b08      	ldr	r3, [pc, #32]	; (8006274 <HAL_RCC_DeInit+0xf4>)
 8006254:	f04f 32ff 	mov.w	r2, #4294967295
 8006258:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800625a:	4b06      	ldr	r3, [pc, #24]	; (8006274 <HAL_RCC_DeInit+0xf4>)
 800625c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006260:	4a04      	ldr	r2, [pc, #16]	; (8006274 <HAL_RCC_DeInit+0xf4>)
 8006262:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006266:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40021000 	.word	0x40021000
 8006278:	20000000 	.word	0x20000000
 800627c:	00f42400 	.word	0x00f42400
 8006280:	20000014 	.word	0x20000014

08006284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e2fe      	b.n	8006894 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d075      	beq.n	800638e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062a2:	4b97      	ldr	r3, [pc, #604]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 030c 	and.w	r3, r3, #12
 80062aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062ac:	4b94      	ldr	r3, [pc, #592]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f003 0303 	and.w	r3, r3, #3
 80062b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	2b0c      	cmp	r3, #12
 80062ba:	d102      	bne.n	80062c2 <HAL_RCC_OscConfig+0x3e>
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d002      	beq.n	80062c8 <HAL_RCC_OscConfig+0x44>
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d10b      	bne.n	80062e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c8:	4b8d      	ldr	r3, [pc, #564]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d05b      	beq.n	800638c <HAL_RCC_OscConfig+0x108>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d157      	bne.n	800638c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e2d9      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e8:	d106      	bne.n	80062f8 <HAL_RCC_OscConfig+0x74>
 80062ea:	4b85      	ldr	r3, [pc, #532]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a84      	ldr	r2, [pc, #528]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 80062f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	e01d      	b.n	8006334 <HAL_RCC_OscConfig+0xb0>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006300:	d10c      	bne.n	800631c <HAL_RCC_OscConfig+0x98>
 8006302:	4b7f      	ldr	r3, [pc, #508]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a7e      	ldr	r2, [pc, #504]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 8006308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	4b7c      	ldr	r3, [pc, #496]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a7b      	ldr	r2, [pc, #492]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 8006314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	e00b      	b.n	8006334 <HAL_RCC_OscConfig+0xb0>
 800631c:	4b78      	ldr	r3, [pc, #480]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a77      	ldr	r2, [pc, #476]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 8006322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	4b75      	ldr	r3, [pc, #468]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a74      	ldr	r2, [pc, #464]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 800632e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d013      	beq.n	8006364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633c:	f7fd fd6e 	bl	8003e1c <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006344:	f7fd fd6a 	bl	8003e1c <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b64      	cmp	r3, #100	; 0x64
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e29e      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006356:	4b6a      	ldr	r3, [pc, #424]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0f0      	beq.n	8006344 <HAL_RCC_OscConfig+0xc0>
 8006362:	e014      	b.n	800638e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006364:	f7fd fd5a 	bl	8003e1c <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800636c:	f7fd fd56 	bl	8003e1c <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b64      	cmp	r3, #100	; 0x64
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e28a      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800637e:	4b60      	ldr	r3, [pc, #384]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f0      	bne.n	800636c <HAL_RCC_OscConfig+0xe8>
 800638a:	e000      	b.n	800638e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800638c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d075      	beq.n	8006486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800639a:	4b59      	ldr	r3, [pc, #356]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 030c 	and.w	r3, r3, #12
 80063a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063a4:	4b56      	ldr	r3, [pc, #344]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2b0c      	cmp	r3, #12
 80063b2:	d102      	bne.n	80063ba <HAL_RCC_OscConfig+0x136>
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d002      	beq.n	80063c0 <HAL_RCC_OscConfig+0x13c>
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d11f      	bne.n	8006400 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063c0:	4b4f      	ldr	r3, [pc, #316]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <HAL_RCC_OscConfig+0x154>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e25d      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063d8:	4b49      	ldr	r3, [pc, #292]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	061b      	lsls	r3, r3, #24
 80063e6:	4946      	ldr	r1, [pc, #280]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80063ec:	4b45      	ldr	r3, [pc, #276]	; (8006504 <HAL_RCC_OscConfig+0x280>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fd fcc7 	bl	8003d84 <HAL_InitTick>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d043      	beq.n	8006484 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e249      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d023      	beq.n	8006450 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006408:	4b3d      	ldr	r3, [pc, #244]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a3c      	ldr	r2, [pc, #240]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 800640e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fd fd02 	bl	8003e1c <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800641c:	f7fd fcfe 	bl	8003e1c <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e232      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800642e:	4b34      	ldr	r3, [pc, #208]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800643a:	4b31      	ldr	r3, [pc, #196]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	061b      	lsls	r3, r3, #24
 8006448:	492d      	ldr	r1, [pc, #180]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 800644a:	4313      	orrs	r3, r2
 800644c:	604b      	str	r3, [r1, #4]
 800644e:	e01a      	b.n	8006486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006450:	4b2b      	ldr	r3, [pc, #172]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a2a      	ldr	r2, [pc, #168]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 8006456:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800645a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645c:	f7fd fcde 	bl	8003e1c <HAL_GetTick>
 8006460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006462:	e008      	b.n	8006476 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006464:	f7fd fcda 	bl	8003e1c <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e20e      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006476:	4b22      	ldr	r3, [pc, #136]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f0      	bne.n	8006464 <HAL_RCC_OscConfig+0x1e0>
 8006482:	e000      	b.n	8006486 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006484:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d041      	beq.n	8006516 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d01c      	beq.n	80064d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800649a:	4b19      	ldr	r3, [pc, #100]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 800649c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064a0:	4a17      	ldr	r2, [pc, #92]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 80064a2:	f043 0301 	orr.w	r3, r3, #1
 80064a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064aa:	f7fd fcb7 	bl	8003e1c <HAL_GetTick>
 80064ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064b0:	e008      	b.n	80064c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064b2:	f7fd fcb3 	bl	8003e1c <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e1e7      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064c4:	4b0e      	ldr	r3, [pc, #56]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 80064c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0ef      	beq.n	80064b2 <HAL_RCC_OscConfig+0x22e>
 80064d2:	e020      	b.n	8006516 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064d4:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 80064d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064da:	4a09      	ldr	r2, [pc, #36]	; (8006500 <HAL_RCC_OscConfig+0x27c>)
 80064dc:	f023 0301 	bic.w	r3, r3, #1
 80064e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e4:	f7fd fc9a 	bl	8003e1c <HAL_GetTick>
 80064e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064ea:	e00d      	b.n	8006508 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064ec:	f7fd fc96 	bl	8003e1c <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d906      	bls.n	8006508 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e1ca      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
 80064fe:	bf00      	nop
 8006500:	40021000 	.word	0x40021000
 8006504:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006508:	4b8c      	ldr	r3, [pc, #560]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 800650a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1ea      	bne.n	80064ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 80a6 	beq.w	8006670 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006524:	2300      	movs	r3, #0
 8006526:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006528:	4b84      	ldr	r3, [pc, #528]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 800652a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800652c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_RCC_OscConfig+0x2b4>
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <HAL_RCC_OscConfig+0x2b6>
 8006538:	2300      	movs	r3, #0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00d      	beq.n	800655a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800653e:	4b7f      	ldr	r3, [pc, #508]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 8006540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006542:	4a7e      	ldr	r2, [pc, #504]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 8006544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006548:	6593      	str	r3, [r2, #88]	; 0x58
 800654a:	4b7c      	ldr	r3, [pc, #496]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 800654c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800654e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006556:	2301      	movs	r3, #1
 8006558:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800655a:	4b79      	ldr	r3, [pc, #484]	; (8006740 <HAL_RCC_OscConfig+0x4bc>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006562:	2b00      	cmp	r3, #0
 8006564:	d118      	bne.n	8006598 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006566:	4b76      	ldr	r3, [pc, #472]	; (8006740 <HAL_RCC_OscConfig+0x4bc>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a75      	ldr	r2, [pc, #468]	; (8006740 <HAL_RCC_OscConfig+0x4bc>)
 800656c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006572:	f7fd fc53 	bl	8003e1c <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006578:	e008      	b.n	800658c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800657a:	f7fd fc4f 	bl	8003e1c <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e183      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800658c:	4b6c      	ldr	r3, [pc, #432]	; (8006740 <HAL_RCC_OscConfig+0x4bc>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0f0      	beq.n	800657a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d108      	bne.n	80065b2 <HAL_RCC_OscConfig+0x32e>
 80065a0:	4b66      	ldr	r3, [pc, #408]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 80065a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a6:	4a65      	ldr	r2, [pc, #404]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 80065a8:	f043 0301 	orr.w	r3, r3, #1
 80065ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065b0:	e024      	b.n	80065fc <HAL_RCC_OscConfig+0x378>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2b05      	cmp	r3, #5
 80065b8:	d110      	bne.n	80065dc <HAL_RCC_OscConfig+0x358>
 80065ba:	4b60      	ldr	r3, [pc, #384]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 80065bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c0:	4a5e      	ldr	r2, [pc, #376]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 80065c2:	f043 0304 	orr.w	r3, r3, #4
 80065c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065ca:	4b5c      	ldr	r3, [pc, #368]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 80065cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d0:	4a5a      	ldr	r2, [pc, #360]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 80065d2:	f043 0301 	orr.w	r3, r3, #1
 80065d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065da:	e00f      	b.n	80065fc <HAL_RCC_OscConfig+0x378>
 80065dc:	4b57      	ldr	r3, [pc, #348]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 80065de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e2:	4a56      	ldr	r2, [pc, #344]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 80065e4:	f023 0301 	bic.w	r3, r3, #1
 80065e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065ec:	4b53      	ldr	r3, [pc, #332]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f2:	4a52      	ldr	r2, [pc, #328]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 80065f4:	f023 0304 	bic.w	r3, r3, #4
 80065f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d016      	beq.n	8006632 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006604:	f7fd fc0a 	bl	8003e1c <HAL_GetTick>
 8006608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800660a:	e00a      	b.n	8006622 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800660c:	f7fd fc06 	bl	8003e1c <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	f241 3288 	movw	r2, #5000	; 0x1388
 800661a:	4293      	cmp	r3, r2
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e138      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006622:	4b46      	ldr	r3, [pc, #280]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 8006624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0ed      	beq.n	800660c <HAL_RCC_OscConfig+0x388>
 8006630:	e015      	b.n	800665e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006632:	f7fd fbf3 	bl	8003e1c <HAL_GetTick>
 8006636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006638:	e00a      	b.n	8006650 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800663a:	f7fd fbef 	bl	8003e1c <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	f241 3288 	movw	r2, #5000	; 0x1388
 8006648:	4293      	cmp	r3, r2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e121      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006650:	4b3a      	ldr	r3, [pc, #232]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 8006652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1ed      	bne.n	800663a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800665e:	7ffb      	ldrb	r3, [r7, #31]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d105      	bne.n	8006670 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006664:	4b35      	ldr	r3, [pc, #212]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 8006666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006668:	4a34      	ldr	r2, [pc, #208]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 800666a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800666e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0320 	and.w	r3, r3, #32
 8006678:	2b00      	cmp	r3, #0
 800667a:	d03c      	beq.n	80066f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01c      	beq.n	80066be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006684:	4b2d      	ldr	r3, [pc, #180]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 8006686:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800668a:	4a2c      	ldr	r2, [pc, #176]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 800668c:	f043 0301 	orr.w	r3, r3, #1
 8006690:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006694:	f7fd fbc2 	bl	8003e1c <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800669c:	f7fd fbbe 	bl	8003e1c <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e0f2      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066ae:	4b23      	ldr	r3, [pc, #140]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 80066b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d0ef      	beq.n	800669c <HAL_RCC_OscConfig+0x418>
 80066bc:	e01b      	b.n	80066f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066be:	4b1f      	ldr	r3, [pc, #124]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 80066c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066c4:	4a1d      	ldr	r2, [pc, #116]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 80066c6:	f023 0301 	bic.w	r3, r3, #1
 80066ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ce:	f7fd fba5 	bl	8003e1c <HAL_GetTick>
 80066d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066d4:	e008      	b.n	80066e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066d6:	f7fd fba1 	bl	8003e1c <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e0d5      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066e8:	4b14      	ldr	r3, [pc, #80]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 80066ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1ef      	bne.n	80066d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 80c9 	beq.w	8006892 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006700:	4b0e      	ldr	r3, [pc, #56]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 030c 	and.w	r3, r3, #12
 8006708:	2b0c      	cmp	r3, #12
 800670a:	f000 8083 	beq.w	8006814 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	2b02      	cmp	r3, #2
 8006714:	d15e      	bne.n	80067d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006716:	4b09      	ldr	r3, [pc, #36]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a08      	ldr	r2, [pc, #32]	; (800673c <HAL_RCC_OscConfig+0x4b8>)
 800671c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006722:	f7fd fb7b 	bl	8003e1c <HAL_GetTick>
 8006726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006728:	e00c      	b.n	8006744 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800672a:	f7fd fb77 	bl	8003e1c <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d905      	bls.n	8006744 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e0ab      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
 800673c:	40021000 	.word	0x40021000
 8006740:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006744:	4b55      	ldr	r3, [pc, #340]	; (800689c <HAL_RCC_OscConfig+0x618>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1ec      	bne.n	800672a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006750:	4b52      	ldr	r3, [pc, #328]	; (800689c <HAL_RCC_OscConfig+0x618>)
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	4b52      	ldr	r3, [pc, #328]	; (80068a0 <HAL_RCC_OscConfig+0x61c>)
 8006756:	4013      	ands	r3, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6a11      	ldr	r1, [r2, #32]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006760:	3a01      	subs	r2, #1
 8006762:	0112      	lsls	r2, r2, #4
 8006764:	4311      	orrs	r1, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800676a:	0212      	lsls	r2, r2, #8
 800676c:	4311      	orrs	r1, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006772:	0852      	lsrs	r2, r2, #1
 8006774:	3a01      	subs	r2, #1
 8006776:	0552      	lsls	r2, r2, #21
 8006778:	4311      	orrs	r1, r2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800677e:	0852      	lsrs	r2, r2, #1
 8006780:	3a01      	subs	r2, #1
 8006782:	0652      	lsls	r2, r2, #25
 8006784:	4311      	orrs	r1, r2
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800678a:	06d2      	lsls	r2, r2, #27
 800678c:	430a      	orrs	r2, r1
 800678e:	4943      	ldr	r1, [pc, #268]	; (800689c <HAL_RCC_OscConfig+0x618>)
 8006790:	4313      	orrs	r3, r2
 8006792:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006794:	4b41      	ldr	r3, [pc, #260]	; (800689c <HAL_RCC_OscConfig+0x618>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a40      	ldr	r2, [pc, #256]	; (800689c <HAL_RCC_OscConfig+0x618>)
 800679a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800679e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067a0:	4b3e      	ldr	r3, [pc, #248]	; (800689c <HAL_RCC_OscConfig+0x618>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	4a3d      	ldr	r2, [pc, #244]	; (800689c <HAL_RCC_OscConfig+0x618>)
 80067a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ac:	f7fd fb36 	bl	8003e1c <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b4:	f7fd fb32 	bl	8003e1c <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e066      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067c6:	4b35      	ldr	r3, [pc, #212]	; (800689c <HAL_RCC_OscConfig+0x618>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0f0      	beq.n	80067b4 <HAL_RCC_OscConfig+0x530>
 80067d2:	e05e      	b.n	8006892 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067d4:	4b31      	ldr	r3, [pc, #196]	; (800689c <HAL_RCC_OscConfig+0x618>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a30      	ldr	r2, [pc, #192]	; (800689c <HAL_RCC_OscConfig+0x618>)
 80067da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e0:	f7fd fb1c 	bl	8003e1c <HAL_GetTick>
 80067e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e8:	f7fd fb18 	bl	8003e1c <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e04c      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067fa:	4b28      	ldr	r3, [pc, #160]	; (800689c <HAL_RCC_OscConfig+0x618>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1f0      	bne.n	80067e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006806:	4b25      	ldr	r3, [pc, #148]	; (800689c <HAL_RCC_OscConfig+0x618>)
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	4924      	ldr	r1, [pc, #144]	; (800689c <HAL_RCC_OscConfig+0x618>)
 800680c:	4b25      	ldr	r3, [pc, #148]	; (80068a4 <HAL_RCC_OscConfig+0x620>)
 800680e:	4013      	ands	r3, r2
 8006810:	60cb      	str	r3, [r1, #12]
 8006812:	e03e      	b.n	8006892 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e039      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006820:	4b1e      	ldr	r3, [pc, #120]	; (800689c <HAL_RCC_OscConfig+0x618>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f003 0203 	and.w	r2, r3, #3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	429a      	cmp	r2, r3
 8006832:	d12c      	bne.n	800688e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	3b01      	subs	r3, #1
 8006840:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006842:	429a      	cmp	r2, r3
 8006844:	d123      	bne.n	800688e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006852:	429a      	cmp	r2, r3
 8006854:	d11b      	bne.n	800688e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006862:	429a      	cmp	r2, r3
 8006864:	d113      	bne.n	800688e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006870:	085b      	lsrs	r3, r3, #1
 8006872:	3b01      	subs	r3, #1
 8006874:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006876:	429a      	cmp	r2, r3
 8006878:	d109      	bne.n	800688e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	3b01      	subs	r3, #1
 8006888:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800688a:	429a      	cmp	r2, r3
 800688c:	d001      	beq.n	8006892 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e000      	b.n	8006894 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40021000 	.word	0x40021000
 80068a0:	019f800c 	.word	0x019f800c
 80068a4:	feeefffc 	.word	0xfeeefffc

080068a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80068b2:	2300      	movs	r3, #0
 80068b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e11e      	b.n	8006afe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068c0:	4b91      	ldr	r3, [pc, #580]	; (8006b08 <HAL_RCC_ClockConfig+0x260>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d910      	bls.n	80068f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ce:	4b8e      	ldr	r3, [pc, #568]	; (8006b08 <HAL_RCC_ClockConfig+0x260>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f023 020f 	bic.w	r2, r3, #15
 80068d6:	498c      	ldr	r1, [pc, #560]	; (8006b08 <HAL_RCC_ClockConfig+0x260>)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	4313      	orrs	r3, r2
 80068dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068de:	4b8a      	ldr	r3, [pc, #552]	; (8006b08 <HAL_RCC_ClockConfig+0x260>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d001      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e106      	b.n	8006afe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d073      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2b03      	cmp	r3, #3
 8006902:	d129      	bne.n	8006958 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006904:	4b81      	ldr	r3, [pc, #516]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e0f4      	b.n	8006afe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006914:	f000 f99e 	bl	8006c54 <RCC_GetSysClockFreqFromPLLSource>
 8006918:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	4a7c      	ldr	r2, [pc, #496]	; (8006b10 <HAL_RCC_ClockConfig+0x268>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d93f      	bls.n	80069a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006922:	4b7a      	ldr	r3, [pc, #488]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006936:	2b00      	cmp	r3, #0
 8006938:	d033      	beq.n	80069a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800693e:	2b00      	cmp	r3, #0
 8006940:	d12f      	bne.n	80069a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006942:	4b72      	ldr	r3, [pc, #456]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800694a:	4a70      	ldr	r2, [pc, #448]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 800694c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006950:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006952:	2380      	movs	r3, #128	; 0x80
 8006954:	617b      	str	r3, [r7, #20]
 8006956:	e024      	b.n	80069a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2b02      	cmp	r3, #2
 800695e:	d107      	bne.n	8006970 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006960:	4b6a      	ldr	r3, [pc, #424]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d109      	bne.n	8006980 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e0c6      	b.n	8006afe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006970:	4b66      	ldr	r3, [pc, #408]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e0be      	b.n	8006afe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006980:	f000 f8ce 	bl	8006b20 <HAL_RCC_GetSysClockFreq>
 8006984:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	4a61      	ldr	r2, [pc, #388]	; (8006b10 <HAL_RCC_ClockConfig+0x268>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d909      	bls.n	80069a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800698e:	4b5f      	ldr	r3, [pc, #380]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006996:	4a5d      	ldr	r2, [pc, #372]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800699e:	2380      	movs	r3, #128	; 0x80
 80069a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069a2:	4b5a      	ldr	r3, [pc, #360]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f023 0203 	bic.w	r2, r3, #3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	4957      	ldr	r1, [pc, #348]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069b4:	f7fd fa32 	bl	8003e1c <HAL_GetTick>
 80069b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ba:	e00a      	b.n	80069d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069bc:	f7fd fa2e 	bl	8003e1c <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e095      	b.n	8006afe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069d2:	4b4e      	ldr	r3, [pc, #312]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f003 020c 	and.w	r2, r3, #12
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d1eb      	bne.n	80069bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d023      	beq.n	8006a38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d005      	beq.n	8006a08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069fc:	4b43      	ldr	r3, [pc, #268]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	4a42      	ldr	r2, [pc, #264]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006a02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006a06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d007      	beq.n	8006a24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006a14:	4b3d      	ldr	r3, [pc, #244]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006a1c:	4a3b      	ldr	r2, [pc, #236]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006a1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006a22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a24:	4b39      	ldr	r3, [pc, #228]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	4936      	ldr	r1, [pc, #216]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	608b      	str	r3, [r1, #8]
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2b80      	cmp	r3, #128	; 0x80
 8006a3c:	d105      	bne.n	8006a4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006a3e:	4b33      	ldr	r3, [pc, #204]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	4a32      	ldr	r2, [pc, #200]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006a44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a4a:	4b2f      	ldr	r3, [pc, #188]	; (8006b08 <HAL_RCC_ClockConfig+0x260>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d21d      	bcs.n	8006a94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a58:	4b2b      	ldr	r3, [pc, #172]	; (8006b08 <HAL_RCC_ClockConfig+0x260>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f023 020f 	bic.w	r2, r3, #15
 8006a60:	4929      	ldr	r1, [pc, #164]	; (8006b08 <HAL_RCC_ClockConfig+0x260>)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a68:	f7fd f9d8 	bl	8003e1c <HAL_GetTick>
 8006a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a6e:	e00a      	b.n	8006a86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a70:	f7fd f9d4 	bl	8003e1c <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e03b      	b.n	8006afe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a86:	4b20      	ldr	r3, [pc, #128]	; (8006b08 <HAL_RCC_ClockConfig+0x260>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d1ed      	bne.n	8006a70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d008      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006aa0:	4b1a      	ldr	r3, [pc, #104]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	4917      	ldr	r1, [pc, #92]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d009      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006abe:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	490f      	ldr	r1, [pc, #60]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ad2:	f000 f825 	bl	8006b20 <HAL_RCC_GetSysClockFreq>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <HAL_RCC_ClockConfig+0x264>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	091b      	lsrs	r3, r3, #4
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	490c      	ldr	r1, [pc, #48]	; (8006b14 <HAL_RCC_ClockConfig+0x26c>)
 8006ae4:	5ccb      	ldrb	r3, [r1, r3]
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	fa22 f303 	lsr.w	r3, r2, r3
 8006aee:	4a0a      	ldr	r2, [pc, #40]	; (8006b18 <HAL_RCC_ClockConfig+0x270>)
 8006af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006af2:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <HAL_RCC_ClockConfig+0x274>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fd f944 	bl	8003d84 <HAL_InitTick>
 8006afc:	4603      	mov	r3, r0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40022000 	.word	0x40022000
 8006b0c:	40021000 	.word	0x40021000
 8006b10:	04c4b400 	.word	0x04c4b400
 8006b14:	080117bc 	.word	0x080117bc
 8006b18:	20000000 	.word	0x20000000
 8006b1c:	20000014 	.word	0x20000014

08006b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006b26:	4b2c      	ldr	r3, [pc, #176]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f003 030c 	and.w	r3, r3, #12
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d102      	bne.n	8006b38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b32:	4b2a      	ldr	r3, [pc, #168]	; (8006bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b34:	613b      	str	r3, [r7, #16]
 8006b36:	e047      	b.n	8006bc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006b38:	4b27      	ldr	r3, [pc, #156]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f003 030c 	and.w	r3, r3, #12
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d102      	bne.n	8006b4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b44:	4b26      	ldr	r3, [pc, #152]	; (8006be0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b46:	613b      	str	r3, [r7, #16]
 8006b48:	e03e      	b.n	8006bc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006b4a:	4b23      	ldr	r3, [pc, #140]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 030c 	and.w	r3, r3, #12
 8006b52:	2b0c      	cmp	r3, #12
 8006b54:	d136      	bne.n	8006bc4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b56:	4b20      	ldr	r3, [pc, #128]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b60:	4b1d      	ldr	r3, [pc, #116]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	091b      	lsrs	r3, r3, #4
 8006b66:	f003 030f 	and.w	r3, r3, #15
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d10c      	bne.n	8006b8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b74:	4a1a      	ldr	r2, [pc, #104]	; (8006be0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7c:	4a16      	ldr	r2, [pc, #88]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b7e:	68d2      	ldr	r2, [r2, #12]
 8006b80:	0a12      	lsrs	r2, r2, #8
 8006b82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b86:	fb02 f303 	mul.w	r3, r2, r3
 8006b8a:	617b      	str	r3, [r7, #20]
      break;
 8006b8c:	e00c      	b.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b8e:	4a13      	ldr	r2, [pc, #76]	; (8006bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b96:	4a10      	ldr	r2, [pc, #64]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b98:	68d2      	ldr	r2, [r2, #12]
 8006b9a:	0a12      	lsrs	r2, r2, #8
 8006b9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ba0:	fb02 f303 	mul.w	r3, r2, r3
 8006ba4:	617b      	str	r3, [r7, #20]
      break;
 8006ba6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ba8:	4b0b      	ldr	r3, [pc, #44]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	0e5b      	lsrs	r3, r3, #25
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	e001      	b.n	8006bc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006bc8:	693b      	ldr	r3, [r7, #16]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40021000 	.word	0x40021000
 8006bdc:	00f42400 	.word	0x00f42400
 8006be0:	016e3600 	.word	0x016e3600

08006be4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006be8:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bea:	681b      	ldr	r3, [r3, #0]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	20000000 	.word	0x20000000

08006bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c00:	f7ff fff0 	bl	8006be4 <HAL_RCC_GetHCLKFreq>
 8006c04:	4602      	mov	r2, r0
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	0a1b      	lsrs	r3, r3, #8
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	4904      	ldr	r1, [pc, #16]	; (8006c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c12:	5ccb      	ldrb	r3, [r1, r3]
 8006c14:	f003 031f 	and.w	r3, r3, #31
 8006c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	40021000 	.word	0x40021000
 8006c24:	080117cc 	.word	0x080117cc

08006c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c2c:	f7ff ffda 	bl	8006be4 <HAL_RCC_GetHCLKFreq>
 8006c30:	4602      	mov	r2, r0
 8006c32:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	0adb      	lsrs	r3, r3, #11
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	4904      	ldr	r1, [pc, #16]	; (8006c50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c3e:	5ccb      	ldrb	r3, [r1, r3]
 8006c40:	f003 031f 	and.w	r3, r3, #31
 8006c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40021000 	.word	0x40021000
 8006c50:	080117cc 	.word	0x080117cc

08006c54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c5a:	4b1e      	ldr	r3, [pc, #120]	; (8006cd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f003 0303 	and.w	r3, r3, #3
 8006c62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c64:	4b1b      	ldr	r3, [pc, #108]	; (8006cd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	091b      	lsrs	r3, r3, #4
 8006c6a:	f003 030f 	and.w	r3, r3, #15
 8006c6e:	3301      	adds	r3, #1
 8006c70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d10c      	bne.n	8006c92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c78:	4a17      	ldr	r2, [pc, #92]	; (8006cd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c80:	4a14      	ldr	r2, [pc, #80]	; (8006cd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c82:	68d2      	ldr	r2, [r2, #12]
 8006c84:	0a12      	lsrs	r2, r2, #8
 8006c86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c8a:	fb02 f303 	mul.w	r3, r2, r3
 8006c8e:	617b      	str	r3, [r7, #20]
    break;
 8006c90:	e00c      	b.n	8006cac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c92:	4a12      	ldr	r2, [pc, #72]	; (8006cdc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9a:	4a0e      	ldr	r2, [pc, #56]	; (8006cd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c9c:	68d2      	ldr	r2, [r2, #12]
 8006c9e:	0a12      	lsrs	r2, r2, #8
 8006ca0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ca4:	fb02 f303 	mul.w	r3, r2, r3
 8006ca8:	617b      	str	r3, [r7, #20]
    break;
 8006caa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006cac:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	0e5b      	lsrs	r3, r3, #25
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006cc6:	687b      	ldr	r3, [r7, #4]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	371c      	adds	r7, #28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	40021000 	.word	0x40021000
 8006cd8:	016e3600 	.word	0x016e3600
 8006cdc:	00f42400 	.word	0x00f42400

08006ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ce8:	2300      	movs	r3, #0
 8006cea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cec:	2300      	movs	r3, #0
 8006cee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 8098 	beq.w	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d02:	4b43      	ldr	r3, [pc, #268]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10d      	bne.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d0e:	4b40      	ldr	r3, [pc, #256]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d12:	4a3f      	ldr	r2, [pc, #252]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d18:	6593      	str	r3, [r2, #88]	; 0x58
 8006d1a:	4b3d      	ldr	r3, [pc, #244]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d22:	60bb      	str	r3, [r7, #8]
 8006d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d26:	2301      	movs	r3, #1
 8006d28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d2a:	4b3a      	ldr	r3, [pc, #232]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a39      	ldr	r2, [pc, #228]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d36:	f7fd f871 	bl	8003e1c <HAL_GetTick>
 8006d3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d3c:	e009      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d3e:	f7fd f86d 	bl	8003e1c <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d902      	bls.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	74fb      	strb	r3, [r7, #19]
        break;
 8006d50:	e005      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d52:	4b30      	ldr	r3, [pc, #192]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0ef      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006d5e:	7cfb      	ldrb	r3, [r7, #19]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d159      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d64:	4b2a      	ldr	r3, [pc, #168]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d01e      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d019      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d80:	4b23      	ldr	r3, [pc, #140]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d8c:	4b20      	ldr	r3, [pc, #128]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d92:	4a1f      	ldr	r2, [pc, #124]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d9c:	4b1c      	ldr	r3, [pc, #112]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da2:	4a1b      	ldr	r2, [pc, #108]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006dac:	4a18      	ldr	r2, [pc, #96]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d016      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dbe:	f7fd f82d 	bl	8003e1c <HAL_GetTick>
 8006dc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dc4:	e00b      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dc6:	f7fd f829 	bl	8003e1c <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d902      	bls.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	74fb      	strb	r3, [r7, #19]
            break;
 8006ddc:	e006      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dde:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0ec      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006dec:	7cfb      	ldrb	r3, [r7, #19]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10b      	bne.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006df2:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e00:	4903      	ldr	r1, [pc, #12]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006e08:	e008      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e0a:	7cfb      	ldrb	r3, [r7, #19]
 8006e0c:	74bb      	strb	r3, [r7, #18]
 8006e0e:	e005      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006e10:	40021000 	.word	0x40021000
 8006e14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e18:	7cfb      	ldrb	r3, [r7, #19]
 8006e1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e1c:	7c7b      	ldrb	r3, [r7, #17]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d105      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e22:	4ba7      	ldr	r3, [pc, #668]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e26:	4aa6      	ldr	r2, [pc, #664]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e3a:	4ba1      	ldr	r3, [pc, #644]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e40:	f023 0203 	bic.w	r2, r3, #3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	499d      	ldr	r1, [pc, #628]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00a      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e5c:	4b98      	ldr	r3, [pc, #608]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e62:	f023 020c 	bic.w	r2, r3, #12
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	4995      	ldr	r1, [pc, #596]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0304 	and.w	r3, r3, #4
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e7e:	4b90      	ldr	r3, [pc, #576]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	498c      	ldr	r1, [pc, #560]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0308 	and.w	r3, r3, #8
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00a      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ea0:	4b87      	ldr	r3, [pc, #540]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	4984      	ldr	r1, [pc, #528]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0310 	and.w	r3, r3, #16
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ec2:	4b7f      	ldr	r3, [pc, #508]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	497b      	ldr	r1, [pc, #492]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0320 	and.w	r3, r3, #32
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00a      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ee4:	4b76      	ldr	r3, [pc, #472]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	4973      	ldr	r1, [pc, #460]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00a      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f06:	4b6e      	ldr	r3, [pc, #440]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	496a      	ldr	r1, [pc, #424]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00a      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f28:	4b65      	ldr	r3, [pc, #404]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	4962      	ldr	r1, [pc, #392]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f4a:	4b5d      	ldr	r3, [pc, #372]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	4959      	ldr	r1, [pc, #356]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00a      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f6c:	4b54      	ldr	r3, [pc, #336]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f72:	f023 0203 	bic.w	r2, r3, #3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	4951      	ldr	r1, [pc, #324]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f8e:	4b4c      	ldr	r3, [pc, #304]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	4948      	ldr	r1, [pc, #288]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d015      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fb0:	4b43      	ldr	r3, [pc, #268]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbe:	4940      	ldr	r1, [pc, #256]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fce:	d105      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fd0:	4b3b      	ldr	r3, [pc, #236]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	4a3a      	ldr	r2, [pc, #232]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d015      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006fe8:	4b35      	ldr	r3, [pc, #212]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff6:	4932      	ldr	r1, [pc, #200]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007006:	d105      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007008:	4b2d      	ldr	r3, [pc, #180]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	4a2c      	ldr	r2, [pc, #176]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800700e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007012:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d015      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007020:	4b27      	ldr	r3, [pc, #156]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007026:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	4924      	ldr	r1, [pc, #144]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007030:	4313      	orrs	r3, r2
 8007032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800703e:	d105      	bne.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007040:	4b1f      	ldr	r3, [pc, #124]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	4a1e      	ldr	r2, [pc, #120]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800704a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d015      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007058:	4b19      	ldr	r3, [pc, #100]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800705a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007066:	4916      	ldr	r1, [pc, #88]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007068:	4313      	orrs	r3, r2
 800706a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007072:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007076:	d105      	bne.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007078:	4b11      	ldr	r3, [pc, #68]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	4a10      	ldr	r2, [pc, #64]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800707e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007082:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d019      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007090:	4b0b      	ldr	r3, [pc, #44]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007096:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	4908      	ldr	r1, [pc, #32]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070ae:	d109      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070b0:	4b03      	ldr	r3, [pc, #12]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	4a02      	ldr	r2, [pc, #8]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070ba:	60d3      	str	r3, [r2, #12]
 80070bc:	e002      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80070be:	bf00      	nop
 80070c0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d015      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80070d0:	4b29      	ldr	r3, [pc, #164]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070de:	4926      	ldr	r1, [pc, #152]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070ee:	d105      	bne.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070f0:	4b21      	ldr	r3, [pc, #132]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	4a20      	ldr	r2, [pc, #128]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d015      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007108:	4b1b      	ldr	r3, [pc, #108]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800710a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007116:	4918      	ldr	r1, [pc, #96]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007118:	4313      	orrs	r3, r2
 800711a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007126:	d105      	bne.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007128:	4b13      	ldr	r3, [pc, #76]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	4a12      	ldr	r2, [pc, #72]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800712e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007132:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d015      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007140:	4b0d      	ldr	r3, [pc, #52]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007142:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007146:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714e:	490a      	ldr	r1, [pc, #40]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007150:	4313      	orrs	r3, r2
 8007152:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800715a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800715e:	d105      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007160:	4b05      	ldr	r3, [pc, #20]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	4a04      	ldr	r2, [pc, #16]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800716a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800716c:	7cbb      	ldrb	r3, [r7, #18]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	40021000 	.word	0x40021000

0800717c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d070      	beq.n	8007270 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d106      	bne.n	80071a8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7fc f852 	bl	800324c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f003 0310 	and.w	r3, r3, #16
 80071ba:	2b10      	cmp	r3, #16
 80071bc:	d04f      	beq.n	800725e <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	22ca      	movs	r2, #202	; 0xca
 80071c4:	625a      	str	r2, [r3, #36]	; 0x24
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2253      	movs	r2, #83	; 0x53
 80071cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f878 	bl	80072c4 <RTC_EnterInitMode>
 80071d4:	4603      	mov	r3, r0
 80071d6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d126      	bne.n	800722c <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	6812      	ldr	r2, [r2, #0]
 80071e8:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80071ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6999      	ldr	r1, [r3, #24]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	431a      	orrs	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	431a      	orrs	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68d9      	ldr	r1, [r3, #12]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	041a      	lsls	r2, r3, #16
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f884 	bl	8007330 <RTC_ExitInitMode>
 8007228:	4603      	mov	r3, r0
 800722a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d110      	bne.n	8007254 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a1a      	ldr	r2, [r3, #32]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	431a      	orrs	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	22ff      	movs	r2, #255	; 0xff
 800725a:	625a      	str	r2, [r3, #36]	; 0x24
 800725c:	e001      	b.n	8007262 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d103      	bne.n	8007270 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8007270:	7bfb      	ldrb	r3, [r7, #15]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a0d      	ldr	r2, [pc, #52]	; (80072c0 <HAL_RTC_WaitForSynchro+0x44>)
 800728a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800728c:	f7fc fdc6 	bl	8003e1c <HAL_GetTick>
 8007290:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8007292:	e009      	b.n	80072a8 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007294:	f7fc fdc2 	bl	8003e1c <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072a2:	d901      	bls.n	80072a8 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e007      	b.n	80072b8 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0ee      	beq.n	8007294 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	0001005f 	.word	0x0001005f

080072c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d123      	bne.n	8007326 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072ec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80072ee:	f7fc fd95 	bl	8003e1c <HAL_GetTick>
 80072f2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80072f4:	e00d      	b.n	8007312 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80072f6:	f7fc fd91 	bl	8003e1c <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007304:	d905      	bls.n	8007312 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2203      	movs	r2, #3
 800730e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731c:	2b00      	cmp	r3, #0
 800731e:	d102      	bne.n	8007326 <RTC_EnterInitMode+0x62>
 8007320:	7bfb      	ldrb	r3, [r7, #15]
 8007322:	2b03      	cmp	r3, #3
 8007324:	d1e7      	bne.n	80072f6 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800734a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10c      	bne.n	8007374 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff ff8e 	bl	800727c <HAL_RTC_WaitForSynchro>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d022      	beq.n	80073ac <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2203      	movs	r2, #3
 800736a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	73fb      	strb	r3, [r7, #15]
 8007372:	e01b      	b.n	80073ac <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699a      	ldr	r2, [r3, #24]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0220 	bic.w	r2, r2, #32
 8007382:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff ff79 	bl	800727c <HAL_RTC_WaitForSynchro>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2203      	movs	r2, #3
 8007394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699a      	ldr	r2, [r3, #24]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f042 0220 	orr.w	r2, r2, #32
 80073aa:	619a      	str	r2, [r3, #24]
  }

  return status;
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified TAMP Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 80073c4:	4b07      	ldr	r3, [pc, #28]	; (80073e4 <HAL_RTCEx_BKUPWrite+0x2c>)
 80073c6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	4413      	add	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	601a      	str	r2, [r3, #0]
}
 80073d8:	bf00      	nop
 80073da:	371c      	adds	r7, #28
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	40002500 	.word	0x40002500

080073e8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB to
  *          specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 80073f2:	4b07      	ldr	r3, [pc, #28]	; (8007410 <HAL_RTCEx_BKUPRead+0x28>)
 80073f4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4413      	add	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	40002500 	.word	0x40002500

08007414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e042      	b.n	80074ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742c:	2b00      	cmp	r3, #0
 800742e:	d106      	bne.n	800743e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7fc fa1d 	bl	8003878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2224      	movs	r2, #36	; 0x24
 8007442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0201 	bic.w	r2, r2, #1
 8007454:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 ff38 	bl	80082d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fc39 	bl	8007cdc <UART_SetConfig>
 800746a:	4603      	mov	r3, r0
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e01b      	b.n	80074ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0201 	orr.w	r2, r2, #1
 80074a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 ffb7 	bl	8008418 <UART_CheckIdleState>
 80074aa:	4603      	mov	r3, r0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08a      	sub	sp, #40	; 0x28
 80074b8:	af02      	add	r7, sp, #8
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	4613      	mov	r3, r2
 80074c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d17b      	bne.n	80075c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <HAL_UART_Transmit+0x26>
 80074d4:	88fb      	ldrh	r3, [r7, #6]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e074      	b.n	80075c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2221      	movs	r2, #33	; 0x21
 80074ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074ee:	f7fc fc95 	bl	8003e1c <HAL_GetTick>
 80074f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	88fa      	ldrh	r2, [r7, #6]
 80074f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	88fa      	ldrh	r2, [r7, #6]
 8007500:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750c:	d108      	bne.n	8007520 <HAL_UART_Transmit+0x6c>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d104      	bne.n	8007520 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	61bb      	str	r3, [r7, #24]
 800751e:	e003      	b.n	8007528 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007524:	2300      	movs	r3, #0
 8007526:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007528:	e030      	b.n	800758c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2200      	movs	r2, #0
 8007532:	2180      	movs	r1, #128	; 0x80
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f001 f819 	bl	800856c <UART_WaitOnFlagUntilTimeout>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e03d      	b.n	80075c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10b      	bne.n	800756a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007560:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	3302      	adds	r3, #2
 8007566:	61bb      	str	r3, [r7, #24]
 8007568:	e007      	b.n	800757a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	781a      	ldrb	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	3301      	adds	r3, #1
 8007578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007580:	b29b      	uxth	r3, r3
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007592:	b29b      	uxth	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1c8      	bne.n	800752a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2200      	movs	r2, #0
 80075a0:	2140      	movs	r1, #64	; 0x40
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 ffe2 	bl	800856c <UART_WaitOnFlagUntilTimeout>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e006      	b.n	80075c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2220      	movs	r2, #32
 80075be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	e000      	b.n	80075c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80075c6:	2302      	movs	r3, #2
  }
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3720      	adds	r7, #32
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08a      	sub	sp, #40	; 0x28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	4613      	mov	r3, r2
 80075dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	d137      	bne.n	8007658 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <HAL_UART_Receive_IT+0x24>
 80075ee:	88fb      	ldrh	r3, [r7, #6]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e030      	b.n	800765a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a18      	ldr	r2, [pc, #96]	; (8007664 <HAL_UART_Receive_IT+0x94>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d01f      	beq.n	8007648 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d018      	beq.n	8007648 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	613b      	str	r3, [r7, #16]
   return(result);
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	623b      	str	r3, [r7, #32]
 8007636:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007638:	69f9      	ldr	r1, [r7, #28]
 800763a:	6a3a      	ldr	r2, [r7, #32]
 800763c:	e841 2300 	strex	r3, r2, [r1]
 8007640:	61bb      	str	r3, [r7, #24]
   return(result);
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e6      	bne.n	8007616 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007648:	88fb      	ldrh	r3, [r7, #6]
 800764a:	461a      	mov	r2, r3
 800764c:	68b9      	ldr	r1, [r7, #8]
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 fffa 	bl	8008648 <UART_Start_Receive_IT>
 8007654:	4603      	mov	r3, r0
 8007656:	e000      	b.n	800765a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007658:	2302      	movs	r3, #2
  }
}
 800765a:	4618      	mov	r0, r3
 800765c:	3728      	adds	r7, #40	; 0x28
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	40008000 	.word	0x40008000

08007668 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b0ba      	sub	sp, #232	; 0xe8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800768e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007692:	f640 030f 	movw	r3, #2063	; 0x80f
 8007696:	4013      	ands	r3, r2
 8007698:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800769c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d11b      	bne.n	80076dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80076a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a8:	f003 0320 	and.w	r3, r3, #32
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d015      	beq.n	80076dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80076b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b4:	f003 0320 	and.w	r3, r3, #32
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d105      	bne.n	80076c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80076bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d009      	beq.n	80076dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 82e3 	beq.w	8007c98 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	4798      	blx	r3
      }
      return;
 80076da:	e2dd      	b.n	8007c98 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 8123 	beq.w	800792c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80076e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80076ea:	4b8d      	ldr	r3, [pc, #564]	; (8007920 <HAL_UART_IRQHandler+0x2b8>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d106      	bne.n	8007700 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80076f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80076f6:	4b8b      	ldr	r3, [pc, #556]	; (8007924 <HAL_UART_IRQHandler+0x2bc>)
 80076f8:	4013      	ands	r3, r2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 8116 	beq.w	800792c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b00      	cmp	r3, #0
 800770a:	d011      	beq.n	8007730 <HAL_UART_IRQHandler+0xc8>
 800770c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00b      	beq.n	8007730 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2201      	movs	r2, #1
 800771e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007726:	f043 0201 	orr.w	r2, r3, #1
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007734:	f003 0302 	and.w	r3, r3, #2
 8007738:	2b00      	cmp	r3, #0
 800773a:	d011      	beq.n	8007760 <HAL_UART_IRQHandler+0xf8>
 800773c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2202      	movs	r2, #2
 800774e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007756:	f043 0204 	orr.w	r2, r3, #4
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	d011      	beq.n	8007790 <HAL_UART_IRQHandler+0x128>
 800776c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00b      	beq.n	8007790 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2204      	movs	r2, #4
 800777e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007786:	f043 0202 	orr.w	r2, r3, #2
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007794:	f003 0308 	and.w	r3, r3, #8
 8007798:	2b00      	cmp	r3, #0
 800779a:	d017      	beq.n	80077cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800779c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a0:	f003 0320 	and.w	r3, r3, #32
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d105      	bne.n	80077b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80077a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80077ac:	4b5c      	ldr	r3, [pc, #368]	; (8007920 <HAL_UART_IRQHandler+0x2b8>)
 80077ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00b      	beq.n	80077cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2208      	movs	r2, #8
 80077ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c2:	f043 0208 	orr.w	r2, r3, #8
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d012      	beq.n	80077fe <HAL_UART_IRQHandler+0x196>
 80077d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00c      	beq.n	80077fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f4:	f043 0220 	orr.w	r2, r3, #32
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 8249 	beq.w	8007c9c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800780a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b00      	cmp	r3, #0
 8007814:	d013      	beq.n	800783e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800781a:	f003 0320 	and.w	r3, r3, #32
 800781e:	2b00      	cmp	r3, #0
 8007820:	d105      	bne.n	800782e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d007      	beq.n	800783e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007844:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007852:	2b40      	cmp	r3, #64	; 0x40
 8007854:	d005      	beq.n	8007862 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800785a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800785e:	2b00      	cmp	r3, #0
 8007860:	d054      	beq.n	800790c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f001 f812 	bl	800888c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007872:	2b40      	cmp	r3, #64	; 0x40
 8007874:	d146      	bne.n	8007904 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3308      	adds	r3, #8
 800787c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007880:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800788c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3308      	adds	r3, #8
 800789e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1d9      	bne.n	8007876 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d017      	beq.n	80078fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078d2:	4a15      	ldr	r2, [pc, #84]	; (8007928 <HAL_UART_IRQHandler+0x2c0>)
 80078d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fc fc33 	bl	8004148 <HAL_DMA_Abort_IT>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d019      	beq.n	800791c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80078f6:	4610      	mov	r0, r2
 80078f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078fa:	e00f      	b.n	800791c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7fb ff91 	bl	8003824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007902:	e00b      	b.n	800791c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7fb ff8d 	bl	8003824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800790a:	e007      	b.n	800791c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7fb ff89 	bl	8003824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800791a:	e1bf      	b.n	8007c9c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800791c:	bf00      	nop
    return;
 800791e:	e1bd      	b.n	8007c9c <HAL_UART_IRQHandler+0x634>
 8007920:	10000001 	.word	0x10000001
 8007924:	04000120 	.word	0x04000120
 8007928:	08008959 	.word	0x08008959

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007930:	2b01      	cmp	r3, #1
 8007932:	f040 8153 	bne.w	8007bdc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793a:	f003 0310 	and.w	r3, r3, #16
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 814c 	beq.w	8007bdc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007948:	f003 0310 	and.w	r3, r3, #16
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 8145 	beq.w	8007bdc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2210      	movs	r2, #16
 8007958:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007964:	2b40      	cmp	r3, #64	; 0x40
 8007966:	f040 80bb 	bne.w	8007ae0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007978:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 818f 	beq.w	8007ca0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007988:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800798c:	429a      	cmp	r2, r3
 800798e:	f080 8187 	bcs.w	8007ca0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007998:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f040 8087 	bne.w	8007abe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	461a      	mov	r2, r3
 80079d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079ea:	e841 2300 	strex	r3, r2, [r1]
 80079ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1da      	bne.n	80079b0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3308      	adds	r3, #8
 8007a00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a0c:	f023 0301 	bic.w	r3, r3, #1
 8007a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3308      	adds	r3, #8
 8007a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e1      	bne.n	80079fa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a40:	e853 3f00 	ldrex	r3, [r3]
 8007a44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3308      	adds	r3, #8
 8007a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a62:	e841 2300 	strex	r3, r2, [r1]
 8007a66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1e3      	bne.n	8007a36 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2220      	movs	r2, #32
 8007a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a84:	e853 3f00 	ldrex	r3, [r3]
 8007a88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a8c:	f023 0310 	bic.w	r3, r3, #16
 8007a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007aa0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007aa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e4      	bne.n	8007a7c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fc faec 	bl	8004096 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f8f3 	bl	8007cc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ade:	e0df      	b.n	8007ca0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 80d1 	beq.w	8007ca4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007b02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 80cc 	beq.w	8007ca4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e4      	bne.n	8007b0c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3308      	adds	r3, #8
 8007b48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	623b      	str	r3, [r7, #32]
   return(result);
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b58:	f023 0301 	bic.w	r3, r3, #1
 8007b5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3308      	adds	r3, #8
 8007b66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b6a:	633a      	str	r2, [r7, #48]	; 0x30
 8007b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e1      	bne.n	8007b42 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f023 0310 	bic.w	r3, r3, #16
 8007ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007bb4:	61fb      	str	r3, [r7, #28]
 8007bb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb8:	69b9      	ldr	r1, [r7, #24]
 8007bba:	69fa      	ldr	r2, [r7, #28]
 8007bbc:	e841 2300 	strex	r3, r2, [r1]
 8007bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1e4      	bne.n	8007b92 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f875 	bl	8007cc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bda:	e063      	b.n	8007ca4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00e      	beq.n	8007c06 <HAL_UART_IRQHandler+0x59e>
 8007be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d008      	beq.n	8007c06 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007bfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 fc08 	bl	8009414 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c04:	e051      	b.n	8007caa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d014      	beq.n	8007c3c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d105      	bne.n	8007c2a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d008      	beq.n	8007c3c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d03a      	beq.n	8007ca8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
    }
    return;
 8007c3a:	e035      	b.n	8007ca8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d009      	beq.n	8007c5c <HAL_UART_IRQHandler+0x5f4>
 8007c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d003      	beq.n	8007c5c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fe95 	bl	8008984 <UART_EndTransmit_IT>
    return;
 8007c5a:	e026      	b.n	8007caa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d009      	beq.n	8007c7c <HAL_UART_IRQHandler+0x614>
 8007c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f001 fbe1 	bl	800943c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c7a:	e016      	b.n	8007caa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d010      	beq.n	8007caa <HAL_UART_IRQHandler+0x642>
 8007c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	da0c      	bge.n	8007caa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 fbc9 	bl	8009428 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c96:	e008      	b.n	8007caa <HAL_UART_IRQHandler+0x642>
      return;
 8007c98:	bf00      	nop
 8007c9a:	e006      	b.n	8007caa <HAL_UART_IRQHandler+0x642>
    return;
 8007c9c:	bf00      	nop
 8007c9e:	e004      	b.n	8007caa <HAL_UART_IRQHandler+0x642>
      return;
 8007ca0:	bf00      	nop
 8007ca2:	e002      	b.n	8007caa <HAL_UART_IRQHandler+0x642>
      return;
 8007ca4:	bf00      	nop
 8007ca6:	e000      	b.n	8007caa <HAL_UART_IRQHandler+0x642>
    return;
 8007ca8:	bf00      	nop
  }
}
 8007caa:	37e8      	adds	r7, #232	; 0xe8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ce0:	b08c      	sub	sp, #48	; 0x30
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	4baa      	ldr	r3, [pc, #680]	; (8007fb4 <UART_SetConfig+0x2d8>)
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	6812      	ldr	r2, [r2, #0]
 8007d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d14:	430b      	orrs	r3, r1
 8007d16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	68da      	ldr	r2, [r3, #12]
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a9f      	ldr	r2, [pc, #636]	; (8007fb8 <UART_SetConfig+0x2dc>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d004      	beq.n	8007d48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d44:	4313      	orrs	r3, r2
 8007d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007d52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	6812      	ldr	r2, [r2, #0]
 8007d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d5c:	430b      	orrs	r3, r1
 8007d5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d66:	f023 010f 	bic.w	r1, r3, #15
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a90      	ldr	r2, [pc, #576]	; (8007fbc <UART_SetConfig+0x2e0>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d125      	bne.n	8007dcc <UART_SetConfig+0xf0>
 8007d80:	4b8f      	ldr	r3, [pc, #572]	; (8007fc0 <UART_SetConfig+0x2e4>)
 8007d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d86:	f003 0303 	and.w	r3, r3, #3
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d81a      	bhi.n	8007dc4 <UART_SetConfig+0xe8>
 8007d8e:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <UART_SetConfig+0xb8>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007da5 	.word	0x08007da5
 8007d98:	08007db5 	.word	0x08007db5
 8007d9c:	08007dad 	.word	0x08007dad
 8007da0:	08007dbd 	.word	0x08007dbd
 8007da4:	2301      	movs	r3, #1
 8007da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007daa:	e116      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007dac:	2302      	movs	r3, #2
 8007dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007db2:	e112      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007db4:	2304      	movs	r3, #4
 8007db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dba:	e10e      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007dbc:	2308      	movs	r3, #8
 8007dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dc2:	e10a      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007dc4:	2310      	movs	r3, #16
 8007dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dca:	e106      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a7c      	ldr	r2, [pc, #496]	; (8007fc4 <UART_SetConfig+0x2e8>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d138      	bne.n	8007e48 <UART_SetConfig+0x16c>
 8007dd6:	4b7a      	ldr	r3, [pc, #488]	; (8007fc0 <UART_SetConfig+0x2e4>)
 8007dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ddc:	f003 030c 	and.w	r3, r3, #12
 8007de0:	2b0c      	cmp	r3, #12
 8007de2:	d82d      	bhi.n	8007e40 <UART_SetConfig+0x164>
 8007de4:	a201      	add	r2, pc, #4	; (adr r2, 8007dec <UART_SetConfig+0x110>)
 8007de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dea:	bf00      	nop
 8007dec:	08007e21 	.word	0x08007e21
 8007df0:	08007e41 	.word	0x08007e41
 8007df4:	08007e41 	.word	0x08007e41
 8007df8:	08007e41 	.word	0x08007e41
 8007dfc:	08007e31 	.word	0x08007e31
 8007e00:	08007e41 	.word	0x08007e41
 8007e04:	08007e41 	.word	0x08007e41
 8007e08:	08007e41 	.word	0x08007e41
 8007e0c:	08007e29 	.word	0x08007e29
 8007e10:	08007e41 	.word	0x08007e41
 8007e14:	08007e41 	.word	0x08007e41
 8007e18:	08007e41 	.word	0x08007e41
 8007e1c:	08007e39 	.word	0x08007e39
 8007e20:	2300      	movs	r3, #0
 8007e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e26:	e0d8      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e2e:	e0d4      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007e30:	2304      	movs	r3, #4
 8007e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e36:	e0d0      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007e38:	2308      	movs	r3, #8
 8007e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e3e:	e0cc      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007e40:	2310      	movs	r3, #16
 8007e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e46:	e0c8      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a5e      	ldr	r2, [pc, #376]	; (8007fc8 <UART_SetConfig+0x2ec>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d125      	bne.n	8007e9e <UART_SetConfig+0x1c2>
 8007e52:	4b5b      	ldr	r3, [pc, #364]	; (8007fc0 <UART_SetConfig+0x2e4>)
 8007e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e5c:	2b30      	cmp	r3, #48	; 0x30
 8007e5e:	d016      	beq.n	8007e8e <UART_SetConfig+0x1b2>
 8007e60:	2b30      	cmp	r3, #48	; 0x30
 8007e62:	d818      	bhi.n	8007e96 <UART_SetConfig+0x1ba>
 8007e64:	2b20      	cmp	r3, #32
 8007e66:	d00a      	beq.n	8007e7e <UART_SetConfig+0x1a2>
 8007e68:	2b20      	cmp	r3, #32
 8007e6a:	d814      	bhi.n	8007e96 <UART_SetConfig+0x1ba>
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <UART_SetConfig+0x19a>
 8007e70:	2b10      	cmp	r3, #16
 8007e72:	d008      	beq.n	8007e86 <UART_SetConfig+0x1aa>
 8007e74:	e00f      	b.n	8007e96 <UART_SetConfig+0x1ba>
 8007e76:	2300      	movs	r3, #0
 8007e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e7c:	e0ad      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007e7e:	2302      	movs	r3, #2
 8007e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e84:	e0a9      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007e86:	2304      	movs	r3, #4
 8007e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e8c:	e0a5      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007e8e:	2308      	movs	r3, #8
 8007e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e94:	e0a1      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007e96:	2310      	movs	r3, #16
 8007e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e9c:	e09d      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a4a      	ldr	r2, [pc, #296]	; (8007fcc <UART_SetConfig+0x2f0>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d125      	bne.n	8007ef4 <UART_SetConfig+0x218>
 8007ea8:	4b45      	ldr	r3, [pc, #276]	; (8007fc0 <UART_SetConfig+0x2e4>)
 8007eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8007eb4:	d016      	beq.n	8007ee4 <UART_SetConfig+0x208>
 8007eb6:	2bc0      	cmp	r3, #192	; 0xc0
 8007eb8:	d818      	bhi.n	8007eec <UART_SetConfig+0x210>
 8007eba:	2b80      	cmp	r3, #128	; 0x80
 8007ebc:	d00a      	beq.n	8007ed4 <UART_SetConfig+0x1f8>
 8007ebe:	2b80      	cmp	r3, #128	; 0x80
 8007ec0:	d814      	bhi.n	8007eec <UART_SetConfig+0x210>
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <UART_SetConfig+0x1f0>
 8007ec6:	2b40      	cmp	r3, #64	; 0x40
 8007ec8:	d008      	beq.n	8007edc <UART_SetConfig+0x200>
 8007eca:	e00f      	b.n	8007eec <UART_SetConfig+0x210>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ed2:	e082      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eda:	e07e      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007edc:	2304      	movs	r3, #4
 8007ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ee2:	e07a      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007ee4:	2308      	movs	r3, #8
 8007ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eea:	e076      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007eec:	2310      	movs	r3, #16
 8007eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ef2:	e072      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a35      	ldr	r2, [pc, #212]	; (8007fd0 <UART_SetConfig+0x2f4>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d12a      	bne.n	8007f54 <UART_SetConfig+0x278>
 8007efe:	4b30      	ldr	r3, [pc, #192]	; (8007fc0 <UART_SetConfig+0x2e4>)
 8007f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f0c:	d01a      	beq.n	8007f44 <UART_SetConfig+0x268>
 8007f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f12:	d81b      	bhi.n	8007f4c <UART_SetConfig+0x270>
 8007f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f18:	d00c      	beq.n	8007f34 <UART_SetConfig+0x258>
 8007f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f1e:	d815      	bhi.n	8007f4c <UART_SetConfig+0x270>
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <UART_SetConfig+0x250>
 8007f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f28:	d008      	beq.n	8007f3c <UART_SetConfig+0x260>
 8007f2a:	e00f      	b.n	8007f4c <UART_SetConfig+0x270>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f32:	e052      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007f34:	2302      	movs	r3, #2
 8007f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f3a:	e04e      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f42:	e04a      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007f44:	2308      	movs	r3, #8
 8007f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f4a:	e046      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007f4c:	2310      	movs	r3, #16
 8007f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f52:	e042      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a17      	ldr	r2, [pc, #92]	; (8007fb8 <UART_SetConfig+0x2dc>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d13a      	bne.n	8007fd4 <UART_SetConfig+0x2f8>
 8007f5e:	4b18      	ldr	r3, [pc, #96]	; (8007fc0 <UART_SetConfig+0x2e4>)
 8007f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f6c:	d01a      	beq.n	8007fa4 <UART_SetConfig+0x2c8>
 8007f6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f72:	d81b      	bhi.n	8007fac <UART_SetConfig+0x2d0>
 8007f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f78:	d00c      	beq.n	8007f94 <UART_SetConfig+0x2b8>
 8007f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f7e:	d815      	bhi.n	8007fac <UART_SetConfig+0x2d0>
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d003      	beq.n	8007f8c <UART_SetConfig+0x2b0>
 8007f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f88:	d008      	beq.n	8007f9c <UART_SetConfig+0x2c0>
 8007f8a:	e00f      	b.n	8007fac <UART_SetConfig+0x2d0>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f92:	e022      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007f94:	2302      	movs	r3, #2
 8007f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f9a:	e01e      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007f9c:	2304      	movs	r3, #4
 8007f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fa2:	e01a      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007fa4:	2308      	movs	r3, #8
 8007fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007faa:	e016      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007fac:	2310      	movs	r3, #16
 8007fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fb2:	e012      	b.n	8007fda <UART_SetConfig+0x2fe>
 8007fb4:	cfff69f3 	.word	0xcfff69f3
 8007fb8:	40008000 	.word	0x40008000
 8007fbc:	40013800 	.word	0x40013800
 8007fc0:	40021000 	.word	0x40021000
 8007fc4:	40004400 	.word	0x40004400
 8007fc8:	40004800 	.word	0x40004800
 8007fcc:	40004c00 	.word	0x40004c00
 8007fd0:	40005000 	.word	0x40005000
 8007fd4:	2310      	movs	r3, #16
 8007fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4aae      	ldr	r2, [pc, #696]	; (8008298 <UART_SetConfig+0x5bc>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	f040 8097 	bne.w	8008114 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007fe6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fea:	2b08      	cmp	r3, #8
 8007fec:	d823      	bhi.n	8008036 <UART_SetConfig+0x35a>
 8007fee:	a201      	add	r2, pc, #4	; (adr r2, 8007ff4 <UART_SetConfig+0x318>)
 8007ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff4:	08008019 	.word	0x08008019
 8007ff8:	08008037 	.word	0x08008037
 8007ffc:	08008021 	.word	0x08008021
 8008000:	08008037 	.word	0x08008037
 8008004:	08008027 	.word	0x08008027
 8008008:	08008037 	.word	0x08008037
 800800c:	08008037 	.word	0x08008037
 8008010:	08008037 	.word	0x08008037
 8008014:	0800802f 	.word	0x0800802f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008018:	f7fe fdf0 	bl	8006bfc <HAL_RCC_GetPCLK1Freq>
 800801c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800801e:	e010      	b.n	8008042 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008020:	4b9e      	ldr	r3, [pc, #632]	; (800829c <UART_SetConfig+0x5c0>)
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008024:	e00d      	b.n	8008042 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008026:	f7fe fd7b 	bl	8006b20 <HAL_RCC_GetSysClockFreq>
 800802a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800802c:	e009      	b.n	8008042 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800802e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008032:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008034:	e005      	b.n	8008042 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008040:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 8130 	beq.w	80082aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	4a94      	ldr	r2, [pc, #592]	; (80082a0 <UART_SetConfig+0x5c4>)
 8008050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008054:	461a      	mov	r2, r3
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	fbb3 f3f2 	udiv	r3, r3, r2
 800805c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	4613      	mov	r3, r2
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	4413      	add	r3, r2
 8008068:	69ba      	ldr	r2, [r7, #24]
 800806a:	429a      	cmp	r2, r3
 800806c:	d305      	bcc.n	800807a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	429a      	cmp	r2, r3
 8008078:	d903      	bls.n	8008082 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008080:	e113      	b.n	80082aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	2200      	movs	r2, #0
 8008086:	60bb      	str	r3, [r7, #8]
 8008088:	60fa      	str	r2, [r7, #12]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	4a84      	ldr	r2, [pc, #528]	; (80082a0 <UART_SetConfig+0x5c4>)
 8008090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008094:	b29b      	uxth	r3, r3
 8008096:	2200      	movs	r2, #0
 8008098:	603b      	str	r3, [r7, #0]
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080a4:	f7f8 fdf8 	bl	8000c98 <__aeabi_uldivmod>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	4610      	mov	r0, r2
 80080ae:	4619      	mov	r1, r3
 80080b0:	f04f 0200 	mov.w	r2, #0
 80080b4:	f04f 0300 	mov.w	r3, #0
 80080b8:	020b      	lsls	r3, r1, #8
 80080ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080be:	0202      	lsls	r2, r0, #8
 80080c0:	6979      	ldr	r1, [r7, #20]
 80080c2:	6849      	ldr	r1, [r1, #4]
 80080c4:	0849      	lsrs	r1, r1, #1
 80080c6:	2000      	movs	r0, #0
 80080c8:	460c      	mov	r4, r1
 80080ca:	4605      	mov	r5, r0
 80080cc:	eb12 0804 	adds.w	r8, r2, r4
 80080d0:	eb43 0905 	adc.w	r9, r3, r5
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	469a      	mov	sl, r3
 80080dc:	4693      	mov	fp, r2
 80080de:	4652      	mov	r2, sl
 80080e0:	465b      	mov	r3, fp
 80080e2:	4640      	mov	r0, r8
 80080e4:	4649      	mov	r1, r9
 80080e6:	f7f8 fdd7 	bl	8000c98 <__aeabi_uldivmod>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4613      	mov	r3, r2
 80080f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080f8:	d308      	bcc.n	800810c <UART_SetConfig+0x430>
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008100:	d204      	bcs.n	800810c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6a3a      	ldr	r2, [r7, #32]
 8008108:	60da      	str	r2, [r3, #12]
 800810a:	e0ce      	b.n	80082aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008112:	e0ca      	b.n	80082aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800811c:	d166      	bne.n	80081ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800811e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008122:	2b08      	cmp	r3, #8
 8008124:	d827      	bhi.n	8008176 <UART_SetConfig+0x49a>
 8008126:	a201      	add	r2, pc, #4	; (adr r2, 800812c <UART_SetConfig+0x450>)
 8008128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812c:	08008151 	.word	0x08008151
 8008130:	08008159 	.word	0x08008159
 8008134:	08008161 	.word	0x08008161
 8008138:	08008177 	.word	0x08008177
 800813c:	08008167 	.word	0x08008167
 8008140:	08008177 	.word	0x08008177
 8008144:	08008177 	.word	0x08008177
 8008148:	08008177 	.word	0x08008177
 800814c:	0800816f 	.word	0x0800816f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008150:	f7fe fd54 	bl	8006bfc <HAL_RCC_GetPCLK1Freq>
 8008154:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008156:	e014      	b.n	8008182 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008158:	f7fe fd66 	bl	8006c28 <HAL_RCC_GetPCLK2Freq>
 800815c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800815e:	e010      	b.n	8008182 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008160:	4b4e      	ldr	r3, [pc, #312]	; (800829c <UART_SetConfig+0x5c0>)
 8008162:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008164:	e00d      	b.n	8008182 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008166:	f7fe fcdb 	bl	8006b20 <HAL_RCC_GetSysClockFreq>
 800816a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800816c:	e009      	b.n	8008182 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800816e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008172:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008174:	e005      	b.n	8008182 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008180:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 8090 	beq.w	80082aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818e:	4a44      	ldr	r2, [pc, #272]	; (80082a0 <UART_SetConfig+0x5c4>)
 8008190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008194:	461a      	mov	r2, r3
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	fbb3 f3f2 	udiv	r3, r3, r2
 800819c:	005a      	lsls	r2, r3, #1
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	085b      	lsrs	r3, r3, #1
 80081a4:	441a      	add	r2, r3
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	2b0f      	cmp	r3, #15
 80081b4:	d916      	bls.n	80081e4 <UART_SetConfig+0x508>
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081bc:	d212      	bcs.n	80081e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	f023 030f 	bic.w	r3, r3, #15
 80081c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	085b      	lsrs	r3, r3, #1
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	f003 0307 	and.w	r3, r3, #7
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	8bfb      	ldrh	r3, [r7, #30]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	8bfa      	ldrh	r2, [r7, #30]
 80081e0:	60da      	str	r2, [r3, #12]
 80081e2:	e062      	b.n	80082aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80081ea:	e05e      	b.n	80082aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081f0:	2b08      	cmp	r3, #8
 80081f2:	d828      	bhi.n	8008246 <UART_SetConfig+0x56a>
 80081f4:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <UART_SetConfig+0x520>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	08008221 	.word	0x08008221
 8008200:	08008229 	.word	0x08008229
 8008204:	08008231 	.word	0x08008231
 8008208:	08008247 	.word	0x08008247
 800820c:	08008237 	.word	0x08008237
 8008210:	08008247 	.word	0x08008247
 8008214:	08008247 	.word	0x08008247
 8008218:	08008247 	.word	0x08008247
 800821c:	0800823f 	.word	0x0800823f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008220:	f7fe fcec 	bl	8006bfc <HAL_RCC_GetPCLK1Freq>
 8008224:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008226:	e014      	b.n	8008252 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008228:	f7fe fcfe 	bl	8006c28 <HAL_RCC_GetPCLK2Freq>
 800822c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800822e:	e010      	b.n	8008252 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008230:	4b1a      	ldr	r3, [pc, #104]	; (800829c <UART_SetConfig+0x5c0>)
 8008232:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008234:	e00d      	b.n	8008252 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008236:	f7fe fc73 	bl	8006b20 <HAL_RCC_GetSysClockFreq>
 800823a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800823c:	e009      	b.n	8008252 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800823e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008244:	e005      	b.n	8008252 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008246:	2300      	movs	r3, #0
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008250:	bf00      	nop
    }

    if (pclk != 0U)
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	2b00      	cmp	r3, #0
 8008256:	d028      	beq.n	80082aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	4a10      	ldr	r2, [pc, #64]	; (80082a0 <UART_SetConfig+0x5c4>)
 800825e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008262:	461a      	mov	r2, r3
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	fbb3 f2f2 	udiv	r2, r3, r2
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	085b      	lsrs	r3, r3, #1
 8008270:	441a      	add	r2, r3
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	fbb2 f3f3 	udiv	r3, r2, r3
 800827a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	2b0f      	cmp	r3, #15
 8008280:	d910      	bls.n	80082a4 <UART_SetConfig+0x5c8>
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008288:	d20c      	bcs.n	80082a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	b29a      	uxth	r2, r3
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	60da      	str	r2, [r3, #12]
 8008294:	e009      	b.n	80082aa <UART_SetConfig+0x5ce>
 8008296:	bf00      	nop
 8008298:	40008000 	.word	0x40008000
 800829c:	00f42400 	.word	0x00f42400
 80082a0:	080117e8 	.word	0x080117e8
      }
      else
      {
        ret = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2200      	movs	r2, #0
 80082be:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2200      	movs	r2, #0
 80082c4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80082c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3730      	adds	r7, #48	; 0x30
 80082ce:	46bd      	mov	sp, r7
 80082d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080082d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00a      	beq.n	80082fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008324:	f003 0302 	and.w	r3, r3, #2
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00a      	beq.n	8008342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008346:	f003 0304 	and.w	r3, r3, #4
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00a      	beq.n	8008364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008368:	f003 0310 	and.w	r3, r3, #16
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00a      	beq.n	8008386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d01a      	beq.n	80083ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083d2:	d10a      	bne.n	80083ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	430a      	orrs	r2, r1
 80083e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00a      	beq.n	800840c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	430a      	orrs	r2, r1
 800840a:	605a      	str	r2, [r3, #4]
  }
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b098      	sub	sp, #96	; 0x60
 800841c:	af02      	add	r7, sp, #8
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008428:	f7fb fcf8 	bl	8003e1c <HAL_GetTick>
 800842c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0308 	and.w	r3, r3, #8
 8008438:	2b08      	cmp	r3, #8
 800843a:	d12f      	bne.n	800849c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800843c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008444:	2200      	movs	r2, #0
 8008446:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f88e 	bl	800856c <UART_WaitOnFlagUntilTimeout>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d022      	beq.n	800849c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	e853 3f00 	ldrex	r3, [r3]
 8008462:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800846a:	653b      	str	r3, [r7, #80]	; 0x50
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	461a      	mov	r2, r3
 8008472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008474:	647b      	str	r3, [r7, #68]	; 0x44
 8008476:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800847a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e6      	bne.n	8008456 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e063      	b.n	8008564 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0304 	and.w	r3, r3, #4
 80084a6:	2b04      	cmp	r3, #4
 80084a8:	d149      	bne.n	800853e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084b2:	2200      	movs	r2, #0
 80084b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f857 	bl	800856c <UART_WaitOnFlagUntilTimeout>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d03c      	beq.n	800853e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	623b      	str	r3, [r7, #32]
   return(result);
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e2:	633b      	str	r3, [r7, #48]	; 0x30
 80084e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ea:	e841 2300 	strex	r3, r2, [r1]
 80084ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1e6      	bne.n	80084c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3308      	adds	r3, #8
 80084fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	e853 3f00 	ldrex	r3, [r3]
 8008504:	60fb      	str	r3, [r7, #12]
   return(result);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f023 0301 	bic.w	r3, r3, #1
 800850c:	64bb      	str	r3, [r7, #72]	; 0x48
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3308      	adds	r3, #8
 8008514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008516:	61fa      	str	r2, [r7, #28]
 8008518:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851a:	69b9      	ldr	r1, [r7, #24]
 800851c:	69fa      	ldr	r2, [r7, #28]
 800851e:	e841 2300 	strex	r3, r2, [r1]
 8008522:	617b      	str	r3, [r7, #20]
   return(result);
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1e5      	bne.n	80084f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2220      	movs	r2, #32
 800852e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e012      	b.n	8008564 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2220      	movs	r2, #32
 8008542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2220      	movs	r2, #32
 800854a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3758      	adds	r7, #88	; 0x58
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	603b      	str	r3, [r7, #0]
 8008578:	4613      	mov	r3, r2
 800857a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800857c:	e04f      	b.n	800861e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008584:	d04b      	beq.n	800861e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008586:	f7fb fc49 	bl	8003e1c <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	429a      	cmp	r2, r3
 8008594:	d302      	bcc.n	800859c <UART_WaitOnFlagUntilTimeout+0x30>
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e04e      	b.n	800863e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0304 	and.w	r3, r3, #4
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d037      	beq.n	800861e <UART_WaitOnFlagUntilTimeout+0xb2>
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b80      	cmp	r3, #128	; 0x80
 80085b2:	d034      	beq.n	800861e <UART_WaitOnFlagUntilTimeout+0xb2>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b40      	cmp	r3, #64	; 0x40
 80085b8:	d031      	beq.n	800861e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	f003 0308 	and.w	r3, r3, #8
 80085c4:	2b08      	cmp	r3, #8
 80085c6:	d110      	bne.n	80085ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2208      	movs	r2, #8
 80085ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 f95b 	bl	800888c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2208      	movs	r2, #8
 80085da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e029      	b.n	800863e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69db      	ldr	r3, [r3, #28]
 80085f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085f8:	d111      	bne.n	800861e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008602:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 f941 	bl	800888c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2220      	movs	r2, #32
 800860e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e00f      	b.n	800863e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	69da      	ldr	r2, [r3, #28]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	4013      	ands	r3, r2
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	429a      	cmp	r2, r3
 800862c:	bf0c      	ite	eq
 800862e:	2301      	moveq	r3, #1
 8008630:	2300      	movne	r3, #0
 8008632:	b2db      	uxtb	r3, r3
 8008634:	461a      	mov	r2, r3
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	429a      	cmp	r2, r3
 800863a:	d0a0      	beq.n	800857e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008648:	b480      	push	{r7}
 800864a:	b0a3      	sub	sp, #140	; 0x8c
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	4613      	mov	r3, r2
 8008654:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	88fa      	ldrh	r2, [r7, #6]
 8008660:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	88fa      	ldrh	r2, [r7, #6]
 8008668:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800867a:	d10e      	bne.n	800869a <UART_Start_Receive_IT+0x52>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d105      	bne.n	8008690 <UART_Start_Receive_IT+0x48>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f240 12ff 	movw	r2, #511	; 0x1ff
 800868a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800868e:	e02d      	b.n	80086ec <UART_Start_Receive_IT+0xa4>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	22ff      	movs	r2, #255	; 0xff
 8008694:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008698:	e028      	b.n	80086ec <UART_Start_Receive_IT+0xa4>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10d      	bne.n	80086be <UART_Start_Receive_IT+0x76>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d104      	bne.n	80086b4 <UART_Start_Receive_IT+0x6c>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	22ff      	movs	r2, #255	; 0xff
 80086ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086b2:	e01b      	b.n	80086ec <UART_Start_Receive_IT+0xa4>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	227f      	movs	r2, #127	; 0x7f
 80086b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086bc:	e016      	b.n	80086ec <UART_Start_Receive_IT+0xa4>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086c6:	d10d      	bne.n	80086e4 <UART_Start_Receive_IT+0x9c>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d104      	bne.n	80086da <UART_Start_Receive_IT+0x92>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	227f      	movs	r2, #127	; 0x7f
 80086d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086d8:	e008      	b.n	80086ec <UART_Start_Receive_IT+0xa4>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	223f      	movs	r2, #63	; 0x3f
 80086de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086e2:	e003      	b.n	80086ec <UART_Start_Receive_IT+0xa4>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2222      	movs	r2, #34	; 0x22
 80086f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3308      	adds	r3, #8
 8008702:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800870c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800870e:	f043 0301 	orr.w	r3, r3, #1
 8008712:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3308      	adds	r3, #8
 800871c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008720:	673a      	str	r2, [r7, #112]	; 0x70
 8008722:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008724:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008726:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008728:	e841 2300 	strex	r3, r2, [r1]
 800872c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800872e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e3      	bne.n	80086fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800873c:	d14f      	bne.n	80087de <UART_Start_Receive_IT+0x196>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008744:	88fa      	ldrh	r2, [r7, #6]
 8008746:	429a      	cmp	r2, r3
 8008748:	d349      	bcc.n	80087de <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008752:	d107      	bne.n	8008764 <UART_Start_Receive_IT+0x11c>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d103      	bne.n	8008764 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4a47      	ldr	r2, [pc, #284]	; (800887c <UART_Start_Receive_IT+0x234>)
 8008760:	675a      	str	r2, [r3, #116]	; 0x74
 8008762:	e002      	b.n	800876a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4a46      	ldr	r2, [pc, #280]	; (8008880 <UART_Start_Receive_IT+0x238>)
 8008768:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d01a      	beq.n	80087a8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800877a:	e853 3f00 	ldrex	r3, [r3]
 800877e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008786:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008794:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008796:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800879a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80087a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e4      	bne.n	8008772 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3308      	adds	r3, #8
 80087ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3308      	adds	r3, #8
 80087c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80087c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80087ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e5      	bne.n	80087a8 <UART_Start_Receive_IT+0x160>
 80087dc:	e046      	b.n	800886c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e6:	d107      	bne.n	80087f8 <UART_Start_Receive_IT+0x1b0>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d103      	bne.n	80087f8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4a24      	ldr	r2, [pc, #144]	; (8008884 <UART_Start_Receive_IT+0x23c>)
 80087f4:	675a      	str	r2, [r3, #116]	; 0x74
 80087f6:	e002      	b.n	80087fe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	4a23      	ldr	r2, [pc, #140]	; (8008888 <UART_Start_Receive_IT+0x240>)
 80087fc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d019      	beq.n	800883a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	e853 3f00 	ldrex	r3, [r3]
 8008812:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800881a:	677b      	str	r3, [r7, #116]	; 0x74
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	461a      	mov	r2, r3
 8008822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008824:	637b      	str	r3, [r7, #52]	; 0x34
 8008826:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008828:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800882a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800882c:	e841 2300 	strex	r3, r2, [r1]
 8008830:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1e6      	bne.n	8008806 <UART_Start_Receive_IT+0x1be>
 8008838:	e018      	b.n	800886c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	613b      	str	r3, [r7, #16]
   return(result);
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f043 0320 	orr.w	r3, r3, #32
 800884e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008858:	623b      	str	r3, [r7, #32]
 800885a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885c:	69f9      	ldr	r1, [r7, #28]
 800885e:	6a3a      	ldr	r2, [r7, #32]
 8008860:	e841 2300 	strex	r3, r2, [r1]
 8008864:	61bb      	str	r3, [r7, #24]
   return(result);
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e6      	bne.n	800883a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	378c      	adds	r7, #140	; 0x8c
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	080090ad 	.word	0x080090ad
 8008880:	08008d4d 	.word	0x08008d4d
 8008884:	08008b95 	.word	0x08008b95
 8008888:	080089dd 	.word	0x080089dd

0800888c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800888c:	b480      	push	{r7}
 800888e:	b095      	sub	sp, #84	; 0x54
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889c:	e853 3f00 	ldrex	r3, [r3]
 80088a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088b2:	643b      	str	r3, [r7, #64]	; 0x40
 80088b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088ba:	e841 2300 	strex	r3, r2, [r1]
 80088be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e6      	bne.n	8008894 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3308      	adds	r3, #8
 80088cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088dc:	f023 0301 	bic.w	r3, r3, #1
 80088e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3308      	adds	r3, #8
 80088e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1e3      	bne.n	80088c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008902:	2b01      	cmp	r3, #1
 8008904:	d118      	bne.n	8008938 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	e853 3f00 	ldrex	r3, [r3]
 8008912:	60bb      	str	r3, [r7, #8]
   return(result);
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	f023 0310 	bic.w	r3, r3, #16
 800891a:	647b      	str	r3, [r7, #68]	; 0x44
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008924:	61bb      	str	r3, [r7, #24]
 8008926:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	6979      	ldr	r1, [r7, #20]
 800892a:	69ba      	ldr	r2, [r7, #24]
 800892c:	e841 2300 	strex	r3, r2, [r1]
 8008930:	613b      	str	r3, [r7, #16]
   return(result);
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e6      	bne.n	8008906 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2220      	movs	r2, #32
 800893c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800894c:	bf00      	nop
 800894e:	3754      	adds	r7, #84	; 0x54
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f7fa ff54 	bl	8003824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800897c:	bf00      	nop
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b088      	sub	sp, #32
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	60bb      	str	r3, [r7, #8]
   return(result);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a0:	61fb      	str	r3, [r7, #28]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	61bb      	str	r3, [r7, #24]
 80089ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ae:	6979      	ldr	r1, [r7, #20]
 80089b0:	69ba      	ldr	r2, [r7, #24]
 80089b2:	e841 2300 	strex	r3, r2, [r1]
 80089b6:	613b      	str	r3, [r7, #16]
   return(result);
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1e6      	bne.n	800898c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2220      	movs	r2, #32
 80089c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7ff f96f 	bl	8007cb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089d2:	bf00      	nop
 80089d4:	3720      	adds	r7, #32
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b09c      	sub	sp, #112	; 0x70
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089ea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089f4:	2b22      	cmp	r3, #34	; 0x22
 80089f6:	f040 80be 	bne.w	8008b76 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008a08:	b2d9      	uxtb	r1, r3
 8008a0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a14:	400a      	ands	r2, r1
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f040 80a1 	bne.w	8008b86 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a4c:	e853 3f00 	ldrex	r3, [r3]
 8008a50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a58:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a62:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a6a:	e841 2300 	strex	r3, r2, [r1]
 8008a6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1e6      	bne.n	8008a44 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3308      	adds	r3, #8
 8008a7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a88:	f023 0301 	bic.w	r3, r3, #1
 8008a8c:	667b      	str	r3, [r7, #100]	; 0x64
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3308      	adds	r3, #8
 8008a94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008a96:	647a      	str	r2, [r7, #68]	; 0x44
 8008a98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a9e:	e841 2300 	strex	r3, r2, [r1]
 8008aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1e5      	bne.n	8008a76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2220      	movs	r2, #32
 8008aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a33      	ldr	r2, [pc, #204]	; (8008b90 <UART_RxISR_8BIT+0x1b4>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d01f      	beq.n	8008b08 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d018      	beq.n	8008b08 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	e853 3f00 	ldrex	r3, [r3]
 8008ae2:	623b      	str	r3, [r7, #32]
   return(result);
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008aea:	663b      	str	r3, [r7, #96]	; 0x60
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	461a      	mov	r2, r3
 8008af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008af4:	633b      	str	r3, [r7, #48]	; 0x30
 8008af6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008afc:	e841 2300 	strex	r3, r2, [r1]
 8008b00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1e6      	bne.n	8008ad6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d12e      	bne.n	8008b6e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	e853 3f00 	ldrex	r3, [r3]
 8008b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 0310 	bic.w	r3, r3, #16
 8008b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	461a      	mov	r2, r3
 8008b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b34:	61fb      	str	r3, [r7, #28]
 8008b36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b38:	69b9      	ldr	r1, [r7, #24]
 8008b3a:	69fa      	ldr	r2, [r7, #28]
 8008b3c:	e841 2300 	strex	r3, r2, [r1]
 8008b40:	617b      	str	r3, [r7, #20]
   return(result);
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e6      	bne.n	8008b16 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	f003 0310 	and.w	r3, r3, #16
 8008b52:	2b10      	cmp	r3, #16
 8008b54:	d103      	bne.n	8008b5e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2210      	movs	r2, #16
 8008b5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7ff f8ac 	bl	8007cc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b6c:	e00b      	b.n	8008b86 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7fa fe62 	bl	8003838 <HAL_UART_RxCpltCallback>
}
 8008b74:	e007      	b.n	8008b86 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	699a      	ldr	r2, [r3, #24]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f042 0208 	orr.w	r2, r2, #8
 8008b84:	619a      	str	r2, [r3, #24]
}
 8008b86:	bf00      	nop
 8008b88:	3770      	adds	r7, #112	; 0x70
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	40008000 	.word	0x40008000

08008b94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b09c      	sub	sp, #112	; 0x70
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ba2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bac:	2b22      	cmp	r3, #34	; 0x22
 8008bae:	f040 80be 	bne.w	8008d2e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008bc2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008bc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008bca:	4013      	ands	r3, r2
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bd0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd6:	1c9a      	adds	r2, r3, #2
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	3b01      	subs	r3, #1
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f040 80a1 	bne.w	8008d3e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c10:	667b      	str	r3, [r7, #100]	; 0x64
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c1a:	657b      	str	r3, [r7, #84]	; 0x54
 8008c1c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e6      	bne.n	8008bfc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3308      	adds	r3, #8
 8008c34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c38:	e853 3f00 	ldrex	r3, [r3]
 8008c3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c40:	f023 0301 	bic.w	r3, r3, #1
 8008c44:	663b      	str	r3, [r7, #96]	; 0x60
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c4e:	643a      	str	r2, [r7, #64]	; 0x40
 8008c50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c56:	e841 2300 	strex	r3, r2, [r1]
 8008c5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1e5      	bne.n	8008c2e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2220      	movs	r2, #32
 8008c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a33      	ldr	r2, [pc, #204]	; (8008d48 <UART_RxISR_16BIT+0x1b4>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d01f      	beq.n	8008cc0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d018      	beq.n	8008cc0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c94:	6a3b      	ldr	r3, [r7, #32]
 8008c96:	e853 3f00 	ldrex	r3, [r3]
 8008c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e6      	bne.n	8008c8e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d12e      	bne.n	8008d26 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	e853 3f00 	ldrex	r3, [r3]
 8008cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f023 0310 	bic.w	r3, r3, #16
 8008ce2:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cec:	61bb      	str	r3, [r7, #24]
 8008cee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf0:	6979      	ldr	r1, [r7, #20]
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	e841 2300 	strex	r3, r2, [r1]
 8008cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1e6      	bne.n	8008cce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	f003 0310 	and.w	r3, r3, #16
 8008d0a:	2b10      	cmp	r3, #16
 8008d0c:	d103      	bne.n	8008d16 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2210      	movs	r2, #16
 8008d14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7fe ffd0 	bl	8007cc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d24:	e00b      	b.n	8008d3e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7fa fd86 	bl	8003838 <HAL_UART_RxCpltCallback>
}
 8008d2c:	e007      	b.n	8008d3e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	699a      	ldr	r2, [r3, #24]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f042 0208 	orr.w	r2, r2, #8
 8008d3c:	619a      	str	r2, [r3, #24]
}
 8008d3e:	bf00      	nop
 8008d40:	3770      	adds	r7, #112	; 0x70
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	40008000 	.word	0x40008000

08008d4c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b0ac      	sub	sp, #176	; 0xb0
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d5a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d82:	2b22      	cmp	r3, #34	; 0x22
 8008d84:	f040 8182 	bne.w	800908c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d8e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d92:	e125      	b.n	8008fe0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d9e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008da2:	b2d9      	uxtb	r1, r3
 8008da4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dae:	400a      	ands	r2, r1
 8008db0:	b2d2      	uxtb	r2, r2
 8008db2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db8:	1c5a      	adds	r2, r3, #1
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d053      	beq.n	8008e8e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d011      	beq.n	8008e16 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008df2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00b      	beq.n	8008e16 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2201      	movs	r2, #1
 8008e04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e0c:	f043 0201 	orr.w	r2, r3, #1
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d011      	beq.n	8008e46 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00b      	beq.n	8008e46 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2202      	movs	r2, #2
 8008e34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e3c:	f043 0204 	orr.w	r2, r3, #4
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e4a:	f003 0304 	and.w	r3, r3, #4
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d011      	beq.n	8008e76 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00b      	beq.n	8008e76 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2204      	movs	r2, #4
 8008e64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e6c:	f043 0202 	orr.w	r2, r3, #2
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d006      	beq.n	8008e8e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7fa fccf 	bl	8003824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f040 80a2 	bne.w	8008fe0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ea4:	e853 3f00 	ldrex	r3, [r3]
 8008ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ec0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008ec4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1e4      	bne.n	8008e9c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3308      	adds	r3, #8
 8008ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ee8:	f023 0301 	bic.w	r3, r3, #1
 8008eec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008efa:	66ba      	str	r2, [r7, #104]	; 0x68
 8008efc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008f00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f02:	e841 2300 	strex	r3, r2, [r1]
 8008f06:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008f08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1e1      	bne.n	8008ed2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2220      	movs	r2, #32
 8008f12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a5f      	ldr	r2, [pc, #380]	; (80090a4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d021      	beq.n	8008f70 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d01a      	beq.n	8008f70 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f42:	e853 3f00 	ldrex	r3, [r3]
 8008f46:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	461a      	mov	r2, r3
 8008f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f5c:	657b      	str	r3, [r7, #84]	; 0x54
 8008f5e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f64:	e841 2300 	strex	r3, r2, [r1]
 8008f68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e4      	bne.n	8008f3a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d130      	bne.n	8008fda <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f86:	e853 3f00 	ldrex	r3, [r3]
 8008f8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8e:	f023 0310 	bic.w	r3, r3, #16
 8008f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8008fa2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fa8:	e841 2300 	strex	r3, r2, [r1]
 8008fac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1e4      	bne.n	8008f7e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	69db      	ldr	r3, [r3, #28]
 8008fba:	f003 0310 	and.w	r3, r3, #16
 8008fbe:	2b10      	cmp	r3, #16
 8008fc0:	d103      	bne.n	8008fca <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2210      	movs	r2, #16
 8008fc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7fe fe76 	bl	8007cc4 <HAL_UARTEx_RxEventCallback>
 8008fd8:	e002      	b.n	8008fe0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7fa fc2c 	bl	8003838 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fe0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d006      	beq.n	8008ff6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fec:	f003 0320 	and.w	r3, r3, #32
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f47f aecf 	bne.w	8008d94 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ffc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009000:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009004:	2b00      	cmp	r3, #0
 8009006:	d049      	beq.n	800909c <UART_RxISR_8BIT_FIFOEN+0x350>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800900e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009012:	429a      	cmp	r2, r3
 8009014:	d242      	bcs.n	800909c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3308      	adds	r3, #8
 800901c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	61fb      	str	r3, [r7, #28]
   return(result);
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800902c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3308      	adds	r3, #8
 8009036:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800903a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800903c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009042:	e841 2300 	strex	r3, r2, [r1]
 8009046:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1e3      	bne.n	8009016 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a15      	ldr	r2, [pc, #84]	; (80090a8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009052:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	e853 3f00 	ldrex	r3, [r3]
 8009060:	60bb      	str	r3, [r7, #8]
   return(result);
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	f043 0320 	orr.w	r3, r3, #32
 8009068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	461a      	mov	r2, r3
 8009072:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009076:	61bb      	str	r3, [r7, #24]
 8009078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907a:	6979      	ldr	r1, [r7, #20]
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	e841 2300 	strex	r3, r2, [r1]
 8009082:	613b      	str	r3, [r7, #16]
   return(result);
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1e4      	bne.n	8009054 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800908a:	e007      	b.n	800909c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	699a      	ldr	r2, [r3, #24]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f042 0208 	orr.w	r2, r2, #8
 800909a:	619a      	str	r2, [r3, #24]
}
 800909c:	bf00      	nop
 800909e:	37b0      	adds	r7, #176	; 0xb0
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	40008000 	.word	0x40008000
 80090a8:	080089dd 	.word	0x080089dd

080090ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b0ae      	sub	sp, #184	; 0xb8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090ba:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	69db      	ldr	r3, [r3, #28]
 80090c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090e2:	2b22      	cmp	r3, #34	; 0x22
 80090e4:	f040 8186 	bne.w	80093f4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090ee:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090f2:	e129      	b.n	8009348 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009106:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800910a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800910e:	4013      	ands	r3, r2
 8009110:	b29a      	uxth	r2, r3
 8009112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009116:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911c:	1c9a      	adds	r2, r3, #2
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009128:	b29b      	uxth	r3, r3
 800912a:	3b01      	subs	r3, #1
 800912c:	b29a      	uxth	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800913e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009142:	f003 0307 	and.w	r3, r3, #7
 8009146:	2b00      	cmp	r3, #0
 8009148:	d053      	beq.n	80091f2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800914a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	2b00      	cmp	r3, #0
 8009154:	d011      	beq.n	800917a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800915a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00b      	beq.n	800917a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2201      	movs	r2, #1
 8009168:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009170:	f043 0201 	orr.w	r2, r3, #1
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800917a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800917e:	f003 0302 	and.w	r3, r3, #2
 8009182:	2b00      	cmp	r3, #0
 8009184:	d011      	beq.n	80091aa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009186:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00b      	beq.n	80091aa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2202      	movs	r2, #2
 8009198:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a0:	f043 0204 	orr.w	r2, r3, #4
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091ae:	f003 0304 	and.w	r3, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d011      	beq.n	80091da <UART_RxISR_16BIT_FIFOEN+0x12e>
 80091b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00b      	beq.n	80091da <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2204      	movs	r2, #4
 80091c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d0:	f043 0202 	orr.w	r2, r3, #2
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d006      	beq.n	80091f2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f7fa fb1d 	bl	8003824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f040 80a4 	bne.w	8009348 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009208:	e853 3f00 	ldrex	r3, [r3]
 800920c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800920e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	461a      	mov	r2, r3
 800921e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009222:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009226:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009228:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800922a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e2      	bne.n	8009200 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3308      	adds	r3, #8
 8009240:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800924a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800924c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009250:	f023 0301 	bic.w	r3, r3, #1
 8009254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3308      	adds	r3, #8
 800925e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009262:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009264:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009266:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800926a:	e841 2300 	strex	r3, r2, [r1]
 800926e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1e1      	bne.n	800923a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2220      	movs	r2, #32
 800927a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a5f      	ldr	r2, [pc, #380]	; (800940c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d021      	beq.n	80092d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d01a      	beq.n	80092d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092aa:	e853 3f00 	ldrex	r3, [r3]
 80092ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80092b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80092c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80092c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092cc:	e841 2300 	strex	r3, r2, [r1]
 80092d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e4      	bne.n	80092a2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d130      	bne.n	8009342 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ee:	e853 3f00 	ldrex	r3, [r3]
 80092f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f6:	f023 0310 	bic.w	r3, r3, #16
 80092fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009308:	647b      	str	r3, [r7, #68]	; 0x44
 800930a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800930e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009310:	e841 2300 	strex	r3, r2, [r1]
 8009314:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1e4      	bne.n	80092e6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	f003 0310 	and.w	r3, r3, #16
 8009326:	2b10      	cmp	r3, #16
 8009328:	d103      	bne.n	8009332 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2210      	movs	r2, #16
 8009330:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009338:	4619      	mov	r1, r3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f7fe fcc2 	bl	8007cc4 <HAL_UARTEx_RxEventCallback>
 8009340:	e002      	b.n	8009348 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7fa fa78 	bl	8003838 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009348:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800934c:	2b00      	cmp	r3, #0
 800934e:	d006      	beq.n	800935e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009350:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009354:	f003 0320 	and.w	r3, r3, #32
 8009358:	2b00      	cmp	r3, #0
 800935a:	f47f aecb 	bne.w	80090f4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009364:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009368:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800936c:	2b00      	cmp	r3, #0
 800936e:	d049      	beq.n	8009404 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009376:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800937a:	429a      	cmp	r2, r3
 800937c:	d242      	bcs.n	8009404 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3308      	adds	r3, #8
 8009384:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009388:	e853 3f00 	ldrex	r3, [r3]
 800938c:	623b      	str	r3, [r7, #32]
   return(result);
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3308      	adds	r3, #8
 800939e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80093a2:	633a      	str	r2, [r7, #48]	; 0x30
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093aa:	e841 2300 	strex	r3, r2, [r1]
 80093ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1e3      	bne.n	800937e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a15      	ldr	r2, [pc, #84]	; (8009410 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80093ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	e853 3f00 	ldrex	r3, [r3]
 80093c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f043 0320 	orr.w	r3, r3, #32
 80093d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	461a      	mov	r2, r3
 80093da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093de:	61fb      	str	r3, [r7, #28]
 80093e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e2:	69b9      	ldr	r1, [r7, #24]
 80093e4:	69fa      	ldr	r2, [r7, #28]
 80093e6:	e841 2300 	strex	r3, r2, [r1]
 80093ea:	617b      	str	r3, [r7, #20]
   return(result);
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e4      	bne.n	80093bc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093f2:	e007      	b.n	8009404 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	699a      	ldr	r2, [r3, #24]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f042 0208 	orr.w	r2, r2, #8
 8009402:	619a      	str	r2, [r3, #24]
}
 8009404:	bf00      	nop
 8009406:	37b8      	adds	r7, #184	; 0xb8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	40008000 	.word	0x40008000
 8009410:	08008b95 	.word	0x08008b95

08009414 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800945e:	2b01      	cmp	r3, #1
 8009460:	d101      	bne.n	8009466 <HAL_UARTEx_DisableFifoMode+0x16>
 8009462:	2302      	movs	r3, #2
 8009464:	e027      	b.n	80094b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2224      	movs	r2, #36	; 0x24
 8009472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f022 0201 	bic.w	r2, r2, #1
 800948c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009494:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2220      	movs	r2, #32
 80094a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d101      	bne.n	80094da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094d6:	2302      	movs	r3, #2
 80094d8:	e02d      	b.n	8009536 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2224      	movs	r2, #36	; 0x24
 80094e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f022 0201 	bic.w	r2, r2, #1
 8009500:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	430a      	orrs	r2, r1
 8009514:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f850 	bl	80095bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2220      	movs	r2, #32
 8009528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b084      	sub	sp, #16
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800954e:	2b01      	cmp	r3, #1
 8009550:	d101      	bne.n	8009556 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009552:	2302      	movs	r3, #2
 8009554:	e02d      	b.n	80095b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2224      	movs	r2, #36	; 0x24
 8009562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f022 0201 	bic.w	r2, r2, #1
 800957c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	683a      	ldr	r2, [r7, #0]
 800958e:	430a      	orrs	r2, r1
 8009590:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f812 	bl	80095bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2220      	movs	r2, #32
 80095a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
	...

080095bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d108      	bne.n	80095de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095dc:	e031      	b.n	8009642 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095de:	2308      	movs	r3, #8
 80095e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095e2:	2308      	movs	r3, #8
 80095e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	0e5b      	lsrs	r3, r3, #25
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	f003 0307 	and.w	r3, r3, #7
 80095f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	0f5b      	lsrs	r3, r3, #29
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	f003 0307 	and.w	r3, r3, #7
 8009604:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	7b3a      	ldrb	r2, [r7, #12]
 800960a:	4911      	ldr	r1, [pc, #68]	; (8009650 <UARTEx_SetNbDataToProcess+0x94>)
 800960c:	5c8a      	ldrb	r2, [r1, r2]
 800960e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009612:	7b3a      	ldrb	r2, [r7, #12]
 8009614:	490f      	ldr	r1, [pc, #60]	; (8009654 <UARTEx_SetNbDataToProcess+0x98>)
 8009616:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009618:	fb93 f3f2 	sdiv	r3, r3, r2
 800961c:	b29a      	uxth	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	7b7a      	ldrb	r2, [r7, #13]
 8009628:	4909      	ldr	r1, [pc, #36]	; (8009650 <UARTEx_SetNbDataToProcess+0x94>)
 800962a:	5c8a      	ldrb	r2, [r1, r2]
 800962c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009630:	7b7a      	ldrb	r2, [r7, #13]
 8009632:	4908      	ldr	r1, [pc, #32]	; (8009654 <UARTEx_SetNbDataToProcess+0x98>)
 8009634:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009636:	fb93 f3f2 	sdiv	r3, r3, r2
 800963a:	b29a      	uxth	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009642:	bf00      	nop
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	08011800 	.word	0x08011800
 8009654:	08011808 	.word	0x08011808

08009658 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009668:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800966c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	b29a      	uxth	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009686:	b480      	push	{r7}
 8009688:	b085      	sub	sp, #20
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800968e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009692:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800969a:	b29a      	uxth	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	b29b      	uxth	r3, r3
 80096a0:	43db      	mvns	r3, r3
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	4013      	ands	r3, r2
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	1d3b      	adds	r3, r7, #4
 80096c6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3714      	adds	r7, #20
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b09d      	sub	sp, #116	; 0x74
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	4413      	add	r3, r2
 8009712:	881b      	ldrh	r3, [r3, #0]
 8009714:	b29b      	uxth	r3, r3
 8009716:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800971a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800971e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	78db      	ldrb	r3, [r3, #3]
 8009726:	2b03      	cmp	r3, #3
 8009728:	d81f      	bhi.n	800976a <USB_ActivateEndpoint+0x72>
 800972a:	a201      	add	r2, pc, #4	; (adr r2, 8009730 <USB_ActivateEndpoint+0x38>)
 800972c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009730:	08009741 	.word	0x08009741
 8009734:	0800975d 	.word	0x0800975d
 8009738:	08009773 	.word	0x08009773
 800973c:	0800974f 	.word	0x0800974f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009740:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009744:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009748:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800974c:	e012      	b.n	8009774 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800974e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009752:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009756:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800975a:	e00b      	b.n	8009774 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800975c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009760:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009764:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009768:	e004      	b.n	8009774 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009770:	e000      	b.n	8009774 <USB_ActivateEndpoint+0x7c>
      break;
 8009772:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	441a      	add	r2, r3
 800977e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800978a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800978e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009792:	b29b      	uxth	r3, r3
 8009794:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	881b      	ldrh	r3, [r3, #0]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	b21b      	sxth	r3, r3
 80097a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ae:	b21a      	sxth	r2, r3
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	b21b      	sxth	r3, r3
 80097b6:	4313      	orrs	r3, r2
 80097b8:	b21b      	sxth	r3, r3
 80097ba:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	441a      	add	r2, r3
 80097c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80097cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097dc:	b29b      	uxth	r3, r3
 80097de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	7b1b      	ldrb	r3, [r3, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f040 8178 	bne.w	8009ada <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	785b      	ldrb	r3, [r3, #1]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 8084 	beq.w	80098fc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	61bb      	str	r3, [r7, #24]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097fe:	b29b      	uxth	r3, r3
 8009800:	461a      	mov	r2, r3
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	4413      	add	r3, r2
 8009806:	61bb      	str	r3, [r7, #24]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	00da      	lsls	r2, r3, #3
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	4413      	add	r3, r2
 8009812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009816:	617b      	str	r3, [r7, #20]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	88db      	ldrh	r3, [r3, #6]
 800981c:	085b      	lsrs	r3, r3, #1
 800981e:	b29b      	uxth	r3, r3
 8009820:	005b      	lsls	r3, r3, #1
 8009822:	b29a      	uxth	r2, r3
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	827b      	strh	r3, [r7, #18]
 8009836:	8a7b      	ldrh	r3, [r7, #18]
 8009838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983c:	2b00      	cmp	r3, #0
 800983e:	d01b      	beq.n	8009878 <USB_ActivateEndpoint+0x180>
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	b29b      	uxth	r3, r3
 800984e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009856:	823b      	strh	r3, [r7, #16]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	441a      	add	r2, r3
 8009862:	8a3b      	ldrh	r3, [r7, #16]
 8009864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800986c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009870:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009874:	b29b      	uxth	r3, r3
 8009876:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	78db      	ldrb	r3, [r3, #3]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d020      	beq.n	80098c2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	b29b      	uxth	r3, r3
 800988e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009896:	81bb      	strh	r3, [r7, #12]
 8009898:	89bb      	ldrh	r3, [r7, #12]
 800989a:	f083 0320 	eor.w	r3, r3, #32
 800989e:	81bb      	strh	r3, [r7, #12]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	441a      	add	r2, r3
 80098aa:	89bb      	ldrh	r3, [r7, #12]
 80098ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098bc:	b29b      	uxth	r3, r3
 80098be:	8013      	strh	r3, [r2, #0]
 80098c0:	e2d5      	b.n	8009e6e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4413      	add	r3, r2
 80098cc:	881b      	ldrh	r3, [r3, #0]
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098d8:	81fb      	strh	r3, [r7, #14]
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	441a      	add	r2, r3
 80098e4:	89fb      	ldrh	r3, [r7, #14]
 80098e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	8013      	strh	r3, [r2, #0]
 80098fa:	e2b8      	b.n	8009e6e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	633b      	str	r3, [r7, #48]	; 0x30
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009906:	b29b      	uxth	r3, r3
 8009908:	461a      	mov	r2, r3
 800990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990c:	4413      	add	r3, r2
 800990e:	633b      	str	r3, [r7, #48]	; 0x30
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	00da      	lsls	r2, r3, #3
 8009916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009918:	4413      	add	r3, r2
 800991a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800991e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	88db      	ldrh	r3, [r3, #6]
 8009924:	085b      	lsrs	r3, r3, #1
 8009926:	b29b      	uxth	r3, r3
 8009928:	005b      	lsls	r3, r3, #1
 800992a:	b29a      	uxth	r2, r3
 800992c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	62bb      	str	r3, [r7, #40]	; 0x28
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800993a:	b29b      	uxth	r3, r3
 800993c:	461a      	mov	r2, r3
 800993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009940:	4413      	add	r3, r2
 8009942:	62bb      	str	r3, [r7, #40]	; 0x28
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	00da      	lsls	r2, r3, #3
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	4413      	add	r3, r2
 800994e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009952:	627b      	str	r3, [r7, #36]	; 0x24
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	881b      	ldrh	r3, [r3, #0]
 8009958:	b29b      	uxth	r3, r3
 800995a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800995e:	b29a      	uxth	r2, r3
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	801a      	strh	r2, [r3, #0]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	2b3e      	cmp	r3, #62	; 0x3e
 800996a:	d91d      	bls.n	80099a8 <USB_ActivateEndpoint+0x2b0>
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	095b      	lsrs	r3, r3, #5
 8009972:	66bb      	str	r3, [r7, #104]	; 0x68
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	f003 031f 	and.w	r3, r3, #31
 800997c:	2b00      	cmp	r3, #0
 800997e:	d102      	bne.n	8009986 <USB_ActivateEndpoint+0x28e>
 8009980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009982:	3b01      	subs	r3, #1
 8009984:	66bb      	str	r3, [r7, #104]	; 0x68
 8009986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	b29a      	uxth	r2, r3
 800998c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800998e:	b29b      	uxth	r3, r3
 8009990:	029b      	lsls	r3, r3, #10
 8009992:	b29b      	uxth	r3, r3
 8009994:	4313      	orrs	r3, r2
 8009996:	b29b      	uxth	r3, r3
 8009998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800999c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a4:	801a      	strh	r2, [r3, #0]
 80099a6:	e026      	b.n	80099f6 <USB_ActivateEndpoint+0x2fe>
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10a      	bne.n	80099c6 <USB_ActivateEndpoint+0x2ce>
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	881b      	ldrh	r3, [r3, #0]
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099be:	b29a      	uxth	r2, r3
 80099c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c2:	801a      	strh	r2, [r3, #0]
 80099c4:	e017      	b.n	80099f6 <USB_ActivateEndpoint+0x2fe>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	085b      	lsrs	r3, r3, #1
 80099cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	f003 0301 	and.w	r3, r3, #1
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d002      	beq.n	80099e0 <USB_ActivateEndpoint+0x2e8>
 80099da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099dc:	3301      	adds	r3, #1
 80099de:	66bb      	str	r3, [r7, #104]	; 0x68
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	029b      	lsls	r3, r3, #10
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	4313      	orrs	r3, r2
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	881b      	ldrh	r3, [r3, #0]
 8009a02:	847b      	strh	r3, [r7, #34]	; 0x22
 8009a04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d01b      	beq.n	8009a46 <USB_ActivateEndpoint+0x34e>
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	881b      	ldrh	r3, [r3, #0]
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a24:	843b      	strh	r3, [r7, #32]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	441a      	add	r2, r3
 8009a30:	8c3b      	ldrh	r3, [r7, #32]
 8009a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d124      	bne.n	8009a98 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a64:	83bb      	strh	r3, [r7, #28]
 8009a66:	8bbb      	ldrh	r3, [r7, #28]
 8009a68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a6c:	83bb      	strh	r3, [r7, #28]
 8009a6e:	8bbb      	ldrh	r3, [r7, #28]
 8009a70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a74:	83bb      	strh	r3, [r7, #28]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	441a      	add	r2, r3
 8009a80:	8bbb      	ldrh	r3, [r7, #28]
 8009a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	8013      	strh	r3, [r2, #0]
 8009a96:	e1ea      	b.n	8009e6e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aae:	83fb      	strh	r3, [r7, #30]
 8009ab0:	8bfb      	ldrh	r3, [r7, #30]
 8009ab2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ab6:	83fb      	strh	r3, [r7, #30]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	441a      	add	r2, r3
 8009ac2:	8bfb      	ldrh	r3, [r7, #30]
 8009ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	8013      	strh	r3, [r2, #0]
 8009ad8:	e1c9      	b.n	8009e6e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	78db      	ldrb	r3, [r3, #3]
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d11e      	bne.n	8009b20 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009af8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	441a      	add	r2, r3
 8009b06:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b12:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	8013      	strh	r3, [r2, #0]
 8009b1e:	e01d      	b.n	8009b5c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	881b      	ldrh	r3, [r3, #0]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b36:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	441a      	add	r2, r3
 8009b44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	461a      	mov	r2, r3
 8009b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b6c:	4413      	add	r3, r2
 8009b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	00da      	lsls	r2, r3, #3
 8009b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	891b      	ldrh	r3, [r3, #8]
 8009b84:	085b      	lsrs	r3, r3, #1
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b8e:	801a      	strh	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	657b      	str	r3, [r7, #84]	; 0x54
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ba0:	4413      	add	r3, r2
 8009ba2:	657b      	str	r3, [r7, #84]	; 0x54
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	00da      	lsls	r2, r3, #3
 8009baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bac:	4413      	add	r3, r2
 8009bae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009bb2:	653b      	str	r3, [r7, #80]	; 0x50
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	895b      	ldrh	r3, [r3, #10]
 8009bb8:	085b      	lsrs	r3, r3, #1
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bc2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	785b      	ldrb	r3, [r3, #1]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f040 8093 	bne.w	8009cf4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4413      	add	r3, r2
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009bde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d01b      	beq.n	8009c22 <USB_ActivateEndpoint+0x52a>
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c00:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	441a      	add	r2, r3
 8009c0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009c30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d01b      	beq.n	8009c72 <USB_ActivateEndpoint+0x57a>
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4413      	add	r3, r2
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c50:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	441a      	add	r2, r3
 8009c5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	881b      	ldrh	r3, [r3, #0]
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c88:	873b      	strh	r3, [r7, #56]	; 0x38
 8009c8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c90:	873b      	strh	r3, [r7, #56]	; 0x38
 8009c92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c98:	873b      	strh	r3, [r7, #56]	; 0x38
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	441a      	add	r2, r3
 8009ca4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cd0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	441a      	add	r2, r3
 8009cdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	8013      	strh	r3, [r2, #0]
 8009cf2:	e0bc      	b.n	8009e6e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009d04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d01d      	beq.n	8009d4c <USB_ActivateEndpoint+0x654>
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	881b      	ldrh	r3, [r3, #0]
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d26:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	441a      	add	r2, r3
 8009d34:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	881b      	ldrh	r3, [r3, #0]
 8009d58:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009d5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01d      	beq.n	8009da4 <USB_ActivateEndpoint+0x6ac>
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	881b      	ldrh	r3, [r3, #0]
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d7e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	441a      	add	r2, r3
 8009d8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	78db      	ldrb	r3, [r3, #3]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d024      	beq.n	8009df6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4413      	add	r3, r2
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dc2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009dc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009dca:	f083 0320 	eor.w	r3, r3, #32
 8009dce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	441a      	add	r2, r3
 8009ddc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	8013      	strh	r3, [r2, #0]
 8009df4:	e01d      	b.n	8009e32 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	881b      	ldrh	r3, [r3, #0]
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e0c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	441a      	add	r2, r3
 8009e1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	441a      	add	r2, r3
 8009e56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009e6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3774      	adds	r7, #116	; 0x74
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop

08009e80 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b08d      	sub	sp, #52	; 0x34
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	7b1b      	ldrb	r3, [r3, #12]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f040 808e 	bne.w	8009fb0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	785b      	ldrb	r3, [r3, #1]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d044      	beq.n	8009f26 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	881b      	ldrh	r3, [r3, #0]
 8009ea8:	81bb      	strh	r3, [r7, #12]
 8009eaa:	89bb      	ldrh	r3, [r7, #12]
 8009eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d01b      	beq.n	8009eec <USB_DeactivateEndpoint+0x6c>
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eca:	817b      	strh	r3, [r7, #10]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	441a      	add	r2, r3
 8009ed6:	897b      	ldrh	r3, [r7, #10]
 8009ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ee4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4413      	add	r3, r2
 8009ef6:	881b      	ldrh	r3, [r3, #0]
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f02:	813b      	strh	r3, [r7, #8]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	441a      	add	r2, r3
 8009f0e:	893b      	ldrh	r3, [r7, #8]
 8009f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	8013      	strh	r3, [r2, #0]
 8009f24:	e192      	b.n	800a24c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	4413      	add	r3, r2
 8009f30:	881b      	ldrh	r3, [r3, #0]
 8009f32:	827b      	strh	r3, [r7, #18]
 8009f34:	8a7b      	ldrh	r3, [r7, #18]
 8009f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d01b      	beq.n	8009f76 <USB_DeactivateEndpoint+0xf6>
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4413      	add	r3, r2
 8009f48:	881b      	ldrh	r3, [r3, #0]
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f54:	823b      	strh	r3, [r7, #16]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	441a      	add	r2, r3
 8009f60:	8a3b      	ldrh	r3, [r7, #16]
 8009f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f8c:	81fb      	strh	r3, [r7, #14]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	441a      	add	r2, r3
 8009f98:	89fb      	ldrh	r3, [r7, #14]
 8009f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	8013      	strh	r3, [r2, #0]
 8009fae:	e14d      	b.n	800a24c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	785b      	ldrb	r3, [r3, #1]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f040 80a5 	bne.w	800a104 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	881b      	ldrh	r3, [r3, #0]
 8009fc6:	843b      	strh	r3, [r7, #32]
 8009fc8:	8c3b      	ldrh	r3, [r7, #32]
 8009fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d01b      	beq.n	800a00a <USB_DeactivateEndpoint+0x18a>
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4413      	add	r3, r2
 8009fdc:	881b      	ldrh	r3, [r3, #0]
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe8:	83fb      	strh	r3, [r7, #30]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	441a      	add	r2, r3
 8009ff4:	8bfb      	ldrh	r3, [r7, #30]
 8009ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a006:	b29b      	uxth	r3, r3
 800a008:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	881b      	ldrh	r3, [r3, #0]
 800a016:	83bb      	strh	r3, [r7, #28]
 800a018:	8bbb      	ldrh	r3, [r7, #28]
 800a01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d01b      	beq.n	800a05a <USB_DeactivateEndpoint+0x1da>
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4413      	add	r3, r2
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a038:	837b      	strh	r3, [r7, #26]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	441a      	add	r2, r3
 800a044:	8b7b      	ldrh	r3, [r7, #26]
 800a046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a04a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a04e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a052:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a056:	b29b      	uxth	r3, r3
 800a058:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	4413      	add	r3, r2
 800a064:	881b      	ldrh	r3, [r3, #0]
 800a066:	b29b      	uxth	r3, r3
 800a068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a06c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a070:	833b      	strh	r3, [r7, #24]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	441a      	add	r2, r3
 800a07c:	8b3b      	ldrh	r3, [r7, #24]
 800a07e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a08a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a08e:	b29b      	uxth	r3, r3
 800a090:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4413      	add	r3, r2
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0a8:	82fb      	strh	r3, [r7, #22]
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	441a      	add	r2, r3
 800a0b4:	8afb      	ldrh	r3, [r7, #22]
 800a0b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0e0:	82bb      	strh	r3, [r7, #20]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	441a      	add	r2, r3
 800a0ec:	8abb      	ldrh	r3, [r7, #20]
 800a0ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	8013      	strh	r3, [r2, #0]
 800a102:	e0a3      	b.n	800a24c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	881b      	ldrh	r3, [r3, #0]
 800a110:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a112:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d01b      	beq.n	800a154 <USB_DeactivateEndpoint+0x2d4>
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	b29b      	uxth	r3, r3
 800a12a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a12e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a132:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	441a      	add	r2, r3
 800a13e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a150:	b29b      	uxth	r3, r3
 800a152:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4413      	add	r3, r2
 800a15e:	881b      	ldrh	r3, [r3, #0]
 800a160:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a162:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d01b      	beq.n	800a1a4 <USB_DeactivateEndpoint+0x324>
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	881b      	ldrh	r3, [r3, #0]
 800a178:	b29b      	uxth	r3, r3
 800a17a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a17e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a182:	853b      	strh	r3, [r7, #40]	; 0x28
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	441a      	add	r2, r3
 800a18e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a19c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	881b      	ldrh	r3, [r3, #0]
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	441a      	add	r2, r3
 800a1c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	881b      	ldrh	r3, [r3, #0]
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	441a      	add	r2, r3
 800a1fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a20c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a210:	b29b      	uxth	r3, r3
 800a212:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4413      	add	r3, r2
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	b29b      	uxth	r3, r3
 800a222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a22a:	847b      	strh	r3, [r7, #34]	; 0x22
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	441a      	add	r2, r3
 800a236:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a23c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a248:	b29b      	uxth	r3, r3
 800a24a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3734      	adds	r7, #52	; 0x34
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b0c2      	sub	sp, #264	; 0x108
 800a25e:	af00      	add	r7, sp, #0
 800a260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a264:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a268:	6018      	str	r0, [r3, #0]
 800a26a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a26e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a272:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	785b      	ldrb	r3, [r3, #1]
 800a280:	2b01      	cmp	r3, #1
 800a282:	f040 86b7 	bne.w	800aff4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a28a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	699a      	ldr	r2, [r3, #24]
 800a292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d908      	bls.n	800a2b4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a2a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a2b2:	e007      	b.n	800a2c4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a2b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a2c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	7b1b      	ldrb	r3, [r3, #12]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d13a      	bne.n	800a34a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a2d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6959      	ldr	r1, [r3, #20]
 800a2e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	88da      	ldrh	r2, [r3, #6]
 800a2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a2f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a2fa:	6800      	ldr	r0, [r0, #0]
 800a2fc:	f001 fc98 	bl	800bc30 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	613b      	str	r3, [r7, #16]
 800a30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	461a      	mov	r2, r3
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	4413      	add	r3, r2
 800a322:	613b      	str	r3, [r7, #16]
 800a324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	00da      	lsls	r2, r3, #3
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	4413      	add	r3, r2
 800a336:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a340:	b29a      	uxth	r2, r3
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	801a      	strh	r2, [r3, #0]
 800a346:	f000 be1f 	b.w	800af88 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a34a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a34e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	78db      	ldrb	r3, [r3, #3]
 800a356:	2b02      	cmp	r3, #2
 800a358:	f040 8462 	bne.w	800ac20 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6a1a      	ldr	r2, [r3, #32]
 800a368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a36c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	429a      	cmp	r2, r3
 800a376:	f240 83df 	bls.w	800ab38 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a37a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a37e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4413      	add	r3, r2
 800a394:	881b      	ldrh	r3, [r3, #0]
 800a396:	b29b      	uxth	r3, r3
 800a398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a39c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a3a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	441a      	add	r2, r3
 800a3be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a3c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a3ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a3d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6a1a      	ldr	r2, [r3, #32]
 800a3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e6:	1ad2      	subs	r2, r2, r3
 800a3e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a3f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	881b      	ldrh	r3, [r3, #0]
 800a410:	b29b      	uxth	r3, r3
 800a412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 81c7 	beq.w	800a7aa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a41c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a420:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	633b      	str	r3, [r7, #48]	; 0x30
 800a428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a42c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	785b      	ldrb	r3, [r3, #1]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d177      	bne.n	800a528 <USB_EPStartXfer+0x2ce>
 800a438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a43c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	62bb      	str	r3, [r7, #40]	; 0x28
 800a444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a452:	b29b      	uxth	r3, r3
 800a454:	461a      	mov	r2, r3
 800a456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a458:	4413      	add	r3, r2
 800a45a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a45c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	00da      	lsls	r2, r3, #3
 800a46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46c:	4413      	add	r3, r2
 800a46e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a472:	627b      	str	r3, [r7, #36]	; 0x24
 800a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a476:	881b      	ldrh	r3, [r3, #0]
 800a478:	b29b      	uxth	r3, r3
 800a47a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a47e:	b29a      	uxth	r2, r3
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	801a      	strh	r2, [r3, #0]
 800a484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a488:	2b3e      	cmp	r3, #62	; 0x3e
 800a48a:	d921      	bls.n	800a4d0 <USB_EPStartXfer+0x276>
 800a48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a490:	095b      	lsrs	r3, r3, #5
 800a492:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a49a:	f003 031f 	and.w	r3, r3, #31
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d104      	bne.n	800a4ac <USB_EPStartXfer+0x252>
 800a4a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	029b      	lsls	r3, r3, #10
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	801a      	strh	r2, [r3, #0]
 800a4ce:	e050      	b.n	800a572 <USB_EPStartXfer+0x318>
 800a4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10a      	bne.n	800a4ee <USB_EPStartXfer+0x294>
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	881b      	ldrh	r3, [r3, #0]
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ea:	801a      	strh	r2, [r3, #0]
 800a4ec:	e041      	b.n	800a572 <USB_EPStartXfer+0x318>
 800a4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4f2:	085b      	lsrs	r3, r3, #1
 800a4f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4fc:	f003 0301 	and.w	r3, r3, #1
 800a500:	2b00      	cmp	r3, #0
 800a502:	d004      	beq.n	800a50e <USB_EPStartXfer+0x2b4>
 800a504:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a508:	3301      	adds	r3, #1
 800a50a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a510:	881b      	ldrh	r3, [r3, #0]
 800a512:	b29a      	uxth	r2, r3
 800a514:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a518:	b29b      	uxth	r3, r3
 800a51a:	029b      	lsls	r3, r3, #10
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	4313      	orrs	r3, r2
 800a520:	b29a      	uxth	r2, r3
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	801a      	strh	r2, [r3, #0]
 800a526:	e024      	b.n	800a572 <USB_EPStartXfer+0x318>
 800a528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	785b      	ldrb	r3, [r3, #1]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d11c      	bne.n	800a572 <USB_EPStartXfer+0x318>
 800a538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a53c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a546:	b29b      	uxth	r3, r3
 800a548:	461a      	mov	r2, r3
 800a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54c:	4413      	add	r3, r2
 800a54e:	633b      	str	r3, [r7, #48]	; 0x30
 800a550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	00da      	lsls	r2, r3, #3
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	4413      	add	r3, r2
 800a562:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a566:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a570:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	895b      	ldrh	r3, [r3, #10]
 800a57e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6959      	ldr	r1, [r3, #20]
 800a58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a592:	b29b      	uxth	r3, r3
 800a594:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a598:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a59c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a5a0:	6800      	ldr	r0, [r0, #0]
 800a5a2:	f001 fb45 	bl	800bc30 <USB_WritePMA>
            ep->xfer_buff += len;
 800a5a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	695a      	ldr	r2, [r3, #20]
 800a5b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b6:	441a      	add	r2, r3
 800a5b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6a1a      	ldr	r2, [r3, #32]
 800a5d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d90f      	bls.n	800a600 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a5e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	6a1a      	ldr	r2, [r3, #32]
 800a5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f0:	1ad2      	subs	r2, r2, r3
 800a5f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	621a      	str	r2, [r3, #32]
 800a5fe:	e00e      	b.n	800a61e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6a1b      	ldr	r3, [r3, #32]
 800a60c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2200      	movs	r2, #0
 800a61c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	785b      	ldrb	r3, [r3, #1]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d177      	bne.n	800a71e <USB_EPStartXfer+0x4c4>
 800a62e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	61bb      	str	r3, [r7, #24]
 800a63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a648:	b29b      	uxth	r3, r3
 800a64a:	461a      	mov	r2, r3
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	4413      	add	r3, r2
 800a650:	61bb      	str	r3, [r7, #24]
 800a652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	00da      	lsls	r2, r3, #3
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	4413      	add	r3, r2
 800a664:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a668:	617b      	str	r3, [r7, #20]
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	881b      	ldrh	r3, [r3, #0]
 800a66e:	b29b      	uxth	r3, r3
 800a670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a674:	b29a      	uxth	r2, r3
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	801a      	strh	r2, [r3, #0]
 800a67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a67e:	2b3e      	cmp	r3, #62	; 0x3e
 800a680:	d921      	bls.n	800a6c6 <USB_EPStartXfer+0x46c>
 800a682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a686:	095b      	lsrs	r3, r3, #5
 800a688:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a690:	f003 031f 	and.w	r3, r3, #31
 800a694:	2b00      	cmp	r3, #0
 800a696:	d104      	bne.n	800a6a2 <USB_EPStartXfer+0x448>
 800a698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a69c:	3b01      	subs	r3, #1
 800a69e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	029b      	lsls	r3, r3, #10
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	801a      	strh	r2, [r3, #0]
 800a6c4:	e056      	b.n	800a774 <USB_EPStartXfer+0x51a>
 800a6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10a      	bne.n	800a6e4 <USB_EPStartXfer+0x48a>
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	881b      	ldrh	r3, [r3, #0]
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	801a      	strh	r2, [r3, #0]
 800a6e2:	e047      	b.n	800a774 <USB_EPStartXfer+0x51a>
 800a6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e8:	085b      	lsrs	r3, r3, #1
 800a6ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f2:	f003 0301 	and.w	r3, r3, #1
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d004      	beq.n	800a704 <USB_EPStartXfer+0x4aa>
 800a6fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6fe:	3301      	adds	r3, #1
 800a700:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	b29a      	uxth	r2, r3
 800a70a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a70e:	b29b      	uxth	r3, r3
 800a710:	029b      	lsls	r3, r3, #10
 800a712:	b29b      	uxth	r3, r3
 800a714:	4313      	orrs	r3, r2
 800a716:	b29a      	uxth	r2, r3
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	801a      	strh	r2, [r3, #0]
 800a71c:	e02a      	b.n	800a774 <USB_EPStartXfer+0x51a>
 800a71e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	785b      	ldrb	r3, [r3, #1]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d122      	bne.n	800a774 <USB_EPStartXfer+0x51a>
 800a72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	623b      	str	r3, [r7, #32]
 800a73a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a73e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a748:	b29b      	uxth	r3, r3
 800a74a:	461a      	mov	r2, r3
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	4413      	add	r3, r2
 800a750:	623b      	str	r3, [r7, #32]
 800a752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	00da      	lsls	r2, r3, #3
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	4413      	add	r3, r2
 800a764:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a768:	61fb      	str	r3, [r7, #28]
 800a76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a76e:	b29a      	uxth	r2, r3
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	891b      	ldrh	r3, [r3, #8]
 800a780:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	6959      	ldr	r1, [r3, #20]
 800a790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a794:	b29b      	uxth	r3, r3
 800a796:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a79a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a79e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a7a2:	6800      	ldr	r0, [r0, #0]
 800a7a4:	f001 fa44 	bl	800bc30 <USB_WritePMA>
 800a7a8:	e3ee      	b.n	800af88 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a7aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	785b      	ldrb	r3, [r3, #1]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d177      	bne.n	800a8aa <USB_EPStartXfer+0x650>
 800a7ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7da:	4413      	add	r3, r2
 800a7dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	00da      	lsls	r2, r3, #3
 800a7ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7ee:	4413      	add	r3, r2
 800a7f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7f4:	647b      	str	r3, [r7, #68]	; 0x44
 800a7f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7f8:	881b      	ldrh	r3, [r3, #0]
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a800:	b29a      	uxth	r2, r3
 800a802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a804:	801a      	strh	r2, [r3, #0]
 800a806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a80a:	2b3e      	cmp	r3, #62	; 0x3e
 800a80c:	d921      	bls.n	800a852 <USB_EPStartXfer+0x5f8>
 800a80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a812:	095b      	lsrs	r3, r3, #5
 800a814:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a81c:	f003 031f 	and.w	r3, r3, #31
 800a820:	2b00      	cmp	r3, #0
 800a822:	d104      	bne.n	800a82e <USB_EPStartXfer+0x5d4>
 800a824:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a828:	3b01      	subs	r3, #1
 800a82a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a82e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a830:	881b      	ldrh	r3, [r3, #0]
 800a832:	b29a      	uxth	r2, r3
 800a834:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a838:	b29b      	uxth	r3, r3
 800a83a:	029b      	lsls	r3, r3, #10
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	4313      	orrs	r3, r2
 800a840:	b29b      	uxth	r3, r3
 800a842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a84e:	801a      	strh	r2, [r3, #0]
 800a850:	e056      	b.n	800a900 <USB_EPStartXfer+0x6a6>
 800a852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10a      	bne.n	800a870 <USB_EPStartXfer+0x616>
 800a85a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a85c:	881b      	ldrh	r3, [r3, #0]
 800a85e:	b29b      	uxth	r3, r3
 800a860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a868:	b29a      	uxth	r2, r3
 800a86a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a86c:	801a      	strh	r2, [r3, #0]
 800a86e:	e047      	b.n	800a900 <USB_EPStartXfer+0x6a6>
 800a870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a874:	085b      	lsrs	r3, r3, #1
 800a876:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d004      	beq.n	800a890 <USB_EPStartXfer+0x636>
 800a886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a88a:	3301      	adds	r3, #1
 800a88c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a892:	881b      	ldrh	r3, [r3, #0]
 800a894:	b29a      	uxth	r2, r3
 800a896:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	029b      	lsls	r3, r3, #10
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8a6:	801a      	strh	r2, [r3, #0]
 800a8a8:	e02a      	b.n	800a900 <USB_EPStartXfer+0x6a6>
 800a8aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	785b      	ldrb	r3, [r3, #1]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d122      	bne.n	800a900 <USB_EPStartXfer+0x6a6>
 800a8ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	653b      	str	r3, [r7, #80]	; 0x50
 800a8c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8da:	4413      	add	r3, r2
 800a8dc:	653b      	str	r3, [r7, #80]	; 0x50
 800a8de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	00da      	lsls	r2, r3, #3
 800a8ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a8f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	891b      	ldrh	r3, [r3, #8]
 800a90c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	6959      	ldr	r1, [r3, #20]
 800a91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a920:	b29b      	uxth	r3, r3
 800a922:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a926:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a92a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a92e:	6800      	ldr	r0, [r0, #0]
 800a930:	f001 f97e 	bl	800bc30 <USB_WritePMA>
            ep->xfer_buff += len;
 800a934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	695a      	ldr	r2, [r3, #20]
 800a940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a944:	441a      	add	r2, r3
 800a946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a94a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6a1a      	ldr	r2, [r3, #32]
 800a95e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d90f      	bls.n	800a98e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a96e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6a1a      	ldr	r2, [r3, #32]
 800a97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a97e:	1ad2      	subs	r2, r2, r3
 800a980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	621a      	str	r2, [r3, #32]
 800a98c:	e00e      	b.n	800a9ac <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a98e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a99e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a9ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	643b      	str	r3, [r7, #64]	; 0x40
 800a9b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	785b      	ldrb	r3, [r3, #1]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d177      	bne.n	800aab8 <USB_EPStartXfer+0x85e>
 800a9c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e8:	4413      	add	r3, r2
 800a9ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	00da      	lsls	r2, r3, #3
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fc:	4413      	add	r3, r2
 800a9fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa02:	637b      	str	r3, [r7, #52]	; 0x34
 800aa04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa06:	881b      	ldrh	r3, [r3, #0]
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa12:	801a      	strh	r2, [r3, #0]
 800aa14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa18:	2b3e      	cmp	r3, #62	; 0x3e
 800aa1a:	d921      	bls.n	800aa60 <USB_EPStartXfer+0x806>
 800aa1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa20:	095b      	lsrs	r3, r3, #5
 800aa22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aa26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2a:	f003 031f 	and.w	r3, r3, #31
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d104      	bne.n	800aa3c <USB_EPStartXfer+0x7e2>
 800aa32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa36:	3b01      	subs	r3, #1
 800aa38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aa3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3e:	881b      	ldrh	r3, [r3, #0]
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	029b      	lsls	r3, r3, #10
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa5c:	801a      	strh	r2, [r3, #0]
 800aa5e:	e050      	b.n	800ab02 <USB_EPStartXfer+0x8a8>
 800aa60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10a      	bne.n	800aa7e <USB_EPStartXfer+0x824>
 800aa68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa6a:	881b      	ldrh	r3, [r3, #0]
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa7a:	801a      	strh	r2, [r3, #0]
 800aa7c:	e041      	b.n	800ab02 <USB_EPStartXfer+0x8a8>
 800aa7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa82:	085b      	lsrs	r3, r3, #1
 800aa84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aa88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa8c:	f003 0301 	and.w	r3, r3, #1
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d004      	beq.n	800aa9e <USB_EPStartXfer+0x844>
 800aa94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa98:	3301      	adds	r3, #1
 800aa9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aa9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa0:	881b      	ldrh	r3, [r3, #0]
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	029b      	lsls	r3, r3, #10
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	4313      	orrs	r3, r2
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab4:	801a      	strh	r2, [r3, #0]
 800aab6:	e024      	b.n	800ab02 <USB_EPStartXfer+0x8a8>
 800aab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aabc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	785b      	ldrb	r3, [r3, #1]
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d11c      	bne.n	800ab02 <USB_EPStartXfer+0x8a8>
 800aac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aacc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	461a      	mov	r2, r3
 800aada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aadc:	4413      	add	r3, r2
 800aade:	643b      	str	r3, [r7, #64]	; 0x40
 800aae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	00da      	lsls	r2, r3, #3
 800aaee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aaf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aafc:	b29a      	uxth	r2, r3
 800aafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ab02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	895b      	ldrh	r3, [r3, #10]
 800ab0e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6959      	ldr	r1, [r3, #20]
 800ab1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ab28:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ab2c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ab30:	6800      	ldr	r0, [r0, #0]
 800ab32:	f001 f87d 	bl	800bc30 <USB_WritePMA>
 800ab36:	e227      	b.n	800af88 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ab38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ab48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ab6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab6e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ab72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	441a      	add	r2, r3
 800ab8c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ab90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	461a      	mov	r2, r3
 800abc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abc4:	4413      	add	r3, r2
 800abc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	00da      	lsls	r2, r3, #3
 800abd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abd8:	4413      	add	r3, r2
 800abda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800abde:	65bb      	str	r3, [r7, #88]	; 0x58
 800abe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe4:	b29a      	uxth	r2, r3
 800abe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abe8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800abea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	891b      	ldrh	r3, [r3, #8]
 800abf6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800abfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6959      	ldr	r1, [r3, #20]
 800ac06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ac10:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ac14:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ac18:	6800      	ldr	r0, [r0, #0]
 800ac1a:	f001 f809 	bl	800bc30 <USB_WritePMA>
 800ac1e:	e1b3      	b.n	800af88 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ac20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	6a1a      	ldr	r2, [r3, #32]
 800ac2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac30:	1ad2      	subs	r2, r2, r3
 800ac32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ac3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	881b      	ldrh	r3, [r3, #0]
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 80c6 	beq.w	800adf2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ac66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	673b      	str	r3, [r7, #112]	; 0x70
 800ac72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	785b      	ldrb	r3, [r3, #1]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d177      	bne.n	800ad72 <USB_EPStartXfer+0xb18>
 800ac82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	461a      	mov	r2, r3
 800aca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aca2:	4413      	add	r3, r2
 800aca4:	66bb      	str	r3, [r7, #104]	; 0x68
 800aca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	00da      	lsls	r2, r3, #3
 800acb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acb6:	4413      	add	r3, r2
 800acb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800acbc:	667b      	str	r3, [r7, #100]	; 0x64
 800acbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acc0:	881b      	ldrh	r3, [r3, #0]
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800acc8:	b29a      	uxth	r2, r3
 800acca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800accc:	801a      	strh	r2, [r3, #0]
 800acce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd2:	2b3e      	cmp	r3, #62	; 0x3e
 800acd4:	d921      	bls.n	800ad1a <USB_EPStartXfer+0xac0>
 800acd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acda:	095b      	lsrs	r3, r3, #5
 800acdc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ace0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace4:	f003 031f 	and.w	r3, r3, #31
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d104      	bne.n	800acf6 <USB_EPStartXfer+0xa9c>
 800acec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800acf0:	3b01      	subs	r3, #1
 800acf2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800acf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acf8:	881b      	ldrh	r3, [r3, #0]
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	029b      	lsls	r3, r3, #10
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	4313      	orrs	r3, r2
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad16:	801a      	strh	r2, [r3, #0]
 800ad18:	e050      	b.n	800adbc <USB_EPStartXfer+0xb62>
 800ad1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d10a      	bne.n	800ad38 <USB_EPStartXfer+0xade>
 800ad22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad34:	801a      	strh	r2, [r3, #0]
 800ad36:	e041      	b.n	800adbc <USB_EPStartXfer+0xb62>
 800ad38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad3c:	085b      	lsrs	r3, r3, #1
 800ad3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ad42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d004      	beq.n	800ad58 <USB_EPStartXfer+0xafe>
 800ad4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ad52:	3301      	adds	r3, #1
 800ad54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ad58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad5a:	881b      	ldrh	r3, [r3, #0]
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	029b      	lsls	r3, r3, #10
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad6e:	801a      	strh	r2, [r3, #0]
 800ad70:	e024      	b.n	800adbc <USB_EPStartXfer+0xb62>
 800ad72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	785b      	ldrb	r3, [r3, #1]
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d11c      	bne.n	800adbc <USB_EPStartXfer+0xb62>
 800ad82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	461a      	mov	r2, r3
 800ad94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad96:	4413      	add	r3, r2
 800ad98:	673b      	str	r3, [r7, #112]	; 0x70
 800ad9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	00da      	lsls	r2, r3, #3
 800ada8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800adaa:	4413      	add	r3, r2
 800adac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800adb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800adb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb6:	b29a      	uxth	r2, r3
 800adb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800adbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	895b      	ldrh	r3, [r3, #10]
 800adc8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800adcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	6959      	ldr	r1, [r3, #20]
 800add8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800addc:	b29b      	uxth	r3, r3
 800adde:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ade2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ade6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800adea:	6800      	ldr	r0, [r0, #0]
 800adec:	f000 ff20 	bl	800bc30 <USB_WritePMA>
 800adf0:	e0ca      	b.n	800af88 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800adf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	785b      	ldrb	r3, [r3, #1]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d177      	bne.n	800aef2 <USB_EPStartXfer+0xc98>
 800ae02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ae0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	461a      	mov	r2, r3
 800ae20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae22:	4413      	add	r3, r2
 800ae24:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ae26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	00da      	lsls	r2, r3, #3
 800ae34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae36:	4413      	add	r3, r2
 800ae38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae3c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae40:	881b      	ldrh	r3, [r3, #0]
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae48:	b29a      	uxth	r2, r3
 800ae4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae4c:	801a      	strh	r2, [r3, #0]
 800ae4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae52:	2b3e      	cmp	r3, #62	; 0x3e
 800ae54:	d921      	bls.n	800ae9a <USB_EPStartXfer+0xc40>
 800ae56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae5a:	095b      	lsrs	r3, r3, #5
 800ae5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ae60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae64:	f003 031f 	and.w	r3, r3, #31
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d104      	bne.n	800ae76 <USB_EPStartXfer+0xc1c>
 800ae6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ae70:	3b01      	subs	r3, #1
 800ae72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ae76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	029b      	lsls	r3, r3, #10
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	4313      	orrs	r3, r2
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae96:	801a      	strh	r2, [r3, #0]
 800ae98:	e05c      	b.n	800af54 <USB_EPStartXfer+0xcfa>
 800ae9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10a      	bne.n	800aeb8 <USB_EPStartXfer+0xc5e>
 800aea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aea4:	881b      	ldrh	r3, [r3, #0]
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aeac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aeb4:	801a      	strh	r2, [r3, #0]
 800aeb6:	e04d      	b.n	800af54 <USB_EPStartXfer+0xcfa>
 800aeb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aebc:	085b      	lsrs	r3, r3, #1
 800aebe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec6:	f003 0301 	and.w	r3, r3, #1
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d004      	beq.n	800aed8 <USB_EPStartXfer+0xc7e>
 800aece:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800aed2:	3301      	adds	r3, #1
 800aed4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aeda:	881b      	ldrh	r3, [r3, #0]
 800aedc:	b29a      	uxth	r2, r3
 800aede:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	029b      	lsls	r3, r3, #10
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	4313      	orrs	r3, r2
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aeee:	801a      	strh	r2, [r3, #0]
 800aef0:	e030      	b.n	800af54 <USB_EPStartXfer+0xcfa>
 800aef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	785b      	ldrb	r3, [r3, #1]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d128      	bne.n	800af54 <USB_EPStartXfer+0xcfa>
 800af02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800af10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af1e:	b29b      	uxth	r3, r3
 800af20:	461a      	mov	r2, r3
 800af22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af26:	4413      	add	r3, r2
 800af28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800af2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	00da      	lsls	r2, r3, #3
 800af3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af3e:	4413      	add	r3, r2
 800af40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800af44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800af48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800af52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800af54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	891b      	ldrh	r3, [r3, #8]
 800af60:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	6959      	ldr	r1, [r3, #20]
 800af70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af74:	b29b      	uxth	r3, r3
 800af76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800af7a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800af7e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800af82:	6800      	ldr	r0, [r0, #0]
 800af84:	f000 fe54 	bl	800bc30 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800af88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	881b      	ldrh	r3, [r3, #0]
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afae:	817b      	strh	r3, [r7, #10]
 800afb0:	897b      	ldrh	r3, [r7, #10]
 800afb2:	f083 0310 	eor.w	r3, r3, #16
 800afb6:	817b      	strh	r3, [r7, #10]
 800afb8:	897b      	ldrh	r3, [r7, #10]
 800afba:	f083 0320 	eor.w	r3, r3, #32
 800afbe:	817b      	strh	r3, [r7, #10]
 800afc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	441a      	add	r2, r3
 800afda:	897b      	ldrh	r3, [r7, #10]
 800afdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afec:	b29b      	uxth	r3, r3
 800afee:	8013      	strh	r3, [r2, #0]
 800aff0:	f000 bcde 	b.w	800b9b0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800aff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	7b1b      	ldrb	r3, [r3, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	f040 80bb 	bne.w	800b17c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b00a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	699a      	ldr	r2, [r3, #24]
 800b012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	691b      	ldr	r3, [r3, #16]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d917      	bls.n	800b052 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	699a      	ldr	r2, [r3, #24]
 800b03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b042:	1ad2      	subs	r2, r2, r3
 800b044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	619a      	str	r2, [r3, #24]
 800b050:	e00e      	b.n	800b070 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2200      	movs	r2, #0
 800b06e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b074:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b07e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	461a      	mov	r2, r3
 800b090:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b094:	4413      	add	r3, r2
 800b096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b09a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b09e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	00da      	lsls	r2, r3, #3
 800b0a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b0ac:	4413      	add	r3, r2
 800b0ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b0b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b0b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0ba:	881b      	ldrh	r3, [r3, #0]
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0c2:	b29a      	uxth	r2, r3
 800b0c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0c8:	801a      	strh	r2, [r3, #0]
 800b0ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ce:	2b3e      	cmp	r3, #62	; 0x3e
 800b0d0:	d924      	bls.n	800b11c <USB_EPStartXfer+0xec2>
 800b0d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d6:	095b      	lsrs	r3, r3, #5
 800b0d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b0dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e0:	f003 031f 	and.w	r3, r3, #31
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d104      	bne.n	800b0f2 <USB_EPStartXfer+0xe98>
 800b0e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b0f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0f6:	881b      	ldrh	r3, [r3, #0]
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	029b      	lsls	r3, r3, #10
 800b102:	b29b      	uxth	r3, r3
 800b104:	4313      	orrs	r3, r2
 800b106:	b29b      	uxth	r3, r3
 800b108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b10c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b110:	b29a      	uxth	r2, r3
 800b112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b116:	801a      	strh	r2, [r3, #0]
 800b118:	f000 bc10 	b.w	800b93c <USB_EPStartXfer+0x16e2>
 800b11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b120:	2b00      	cmp	r3, #0
 800b122:	d10c      	bne.n	800b13e <USB_EPStartXfer+0xee4>
 800b124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b134:	b29a      	uxth	r2, r3
 800b136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b13a:	801a      	strh	r2, [r3, #0]
 800b13c:	e3fe      	b.n	800b93c <USB_EPStartXfer+0x16e2>
 800b13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b142:	085b      	lsrs	r3, r3, #1
 800b144:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b14c:	f003 0301 	and.w	r3, r3, #1
 800b150:	2b00      	cmp	r3, #0
 800b152:	d004      	beq.n	800b15e <USB_EPStartXfer+0xf04>
 800b154:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b158:	3301      	adds	r3, #1
 800b15a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b15e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b162:	881b      	ldrh	r3, [r3, #0]
 800b164:	b29a      	uxth	r2, r3
 800b166:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	029b      	lsls	r3, r3, #10
 800b16e:	b29b      	uxth	r3, r3
 800b170:	4313      	orrs	r3, r2
 800b172:	b29a      	uxth	r2, r3
 800b174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b178:	801a      	strh	r2, [r3, #0]
 800b17a:	e3df      	b.n	800b93c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b17c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	78db      	ldrb	r3, [r3, #3]
 800b188:	2b02      	cmp	r3, #2
 800b18a:	f040 8218 	bne.w	800b5be <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	785b      	ldrb	r3, [r3, #1]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f040 809d 	bne.w	800b2da <USB_EPStartXfer+0x1080>
 800b1a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	461a      	mov	r2, r3
 800b1c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	00da      	lsls	r2, r3, #3
 800b1d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1dc:	4413      	add	r3, r2
 800b1de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b1e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b1e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1ea:	881b      	ldrh	r3, [r3, #0]
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1f8:	801a      	strh	r2, [r3, #0]
 800b1fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	2b3e      	cmp	r3, #62	; 0x3e
 800b208:	d92b      	bls.n	800b262 <USB_EPStartXfer+0x1008>
 800b20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b20e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	095b      	lsrs	r3, r3, #5
 800b218:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b21c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	f003 031f 	and.w	r3, r3, #31
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d104      	bne.n	800b23a <USB_EPStartXfer+0xfe0>
 800b230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b234:	3b01      	subs	r3, #1
 800b236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b23a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b23e:	881b      	ldrh	r3, [r3, #0]
 800b240:	b29a      	uxth	r2, r3
 800b242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b246:	b29b      	uxth	r3, r3
 800b248:	029b      	lsls	r3, r3, #10
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	4313      	orrs	r3, r2
 800b24e:	b29b      	uxth	r3, r3
 800b250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b258:	b29a      	uxth	r2, r3
 800b25a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b25e:	801a      	strh	r2, [r3, #0]
 800b260:	e070      	b.n	800b344 <USB_EPStartXfer+0x10ea>
 800b262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10c      	bne.n	800b28c <USB_EPStartXfer+0x1032>
 800b272:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b276:	881b      	ldrh	r3, [r3, #0]
 800b278:	b29b      	uxth	r3, r3
 800b27a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b27e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b282:	b29a      	uxth	r2, r3
 800b284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b288:	801a      	strh	r2, [r3, #0]
 800b28a:	e05b      	b.n	800b344 <USB_EPStartXfer+0x10ea>
 800b28c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	085b      	lsrs	r3, r3, #1
 800b29a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b29e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	f003 0301 	and.w	r3, r3, #1
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d004      	beq.n	800b2bc <USB_EPStartXfer+0x1062>
 800b2b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b2bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b2c0:	881b      	ldrh	r3, [r3, #0]
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	029b      	lsls	r3, r3, #10
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b2d6:	801a      	strh	r2, [r3, #0]
 800b2d8:	e034      	b.n	800b344 <USB_EPStartXfer+0x10ea>
 800b2da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	785b      	ldrb	r3, [r3, #1]
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d12c      	bne.n	800b344 <USB_EPStartXfer+0x10ea>
 800b2ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b306:	b29b      	uxth	r3, r3
 800b308:	461a      	mov	r2, r3
 800b30a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b30e:	4413      	add	r3, r2
 800b310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	00da      	lsls	r2, r3, #3
 800b322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b326:	4413      	add	r3, r2
 800b328:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b32c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b342:	801a      	strh	r2, [r3, #0]
 800b344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b348:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	785b      	ldrb	r3, [r3, #1]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	f040 809d 	bne.w	800b49e <USB_EPStartXfer+0x1244>
 800b364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b380:	b29b      	uxth	r3, r3
 800b382:	461a      	mov	r2, r3
 800b384:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b388:	4413      	add	r3, r2
 800b38a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b38e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	00da      	lsls	r2, r3, #3
 800b39c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b3a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b3aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3ae:	881b      	ldrh	r3, [r3, #0]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3bc:	801a      	strh	r2, [r3, #0]
 800b3be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	2b3e      	cmp	r3, #62	; 0x3e
 800b3cc:	d92b      	bls.n	800b426 <USB_EPStartXfer+0x11cc>
 800b3ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	095b      	lsrs	r3, r3, #5
 800b3dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b3e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	f003 031f 	and.w	r3, r3, #31
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d104      	bne.n	800b3fe <USB_EPStartXfer+0x11a4>
 800b3f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b3fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b402:	881b      	ldrh	r3, [r3, #0]
 800b404:	b29a      	uxth	r2, r3
 800b406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	029b      	lsls	r3, r3, #10
 800b40e:	b29b      	uxth	r3, r3
 800b410:	4313      	orrs	r3, r2
 800b412:	b29b      	uxth	r3, r3
 800b414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b422:	801a      	strh	r2, [r3, #0]
 800b424:	e069      	b.n	800b4fa <USB_EPStartXfer+0x12a0>
 800b426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b42a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	691b      	ldr	r3, [r3, #16]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10c      	bne.n	800b450 <USB_EPStartXfer+0x11f6>
 800b436:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b43a:	881b      	ldrh	r3, [r3, #0]
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b446:	b29a      	uxth	r2, r3
 800b448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b44c:	801a      	strh	r2, [r3, #0]
 800b44e:	e054      	b.n	800b4fa <USB_EPStartXfer+0x12a0>
 800b450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	085b      	lsrs	r3, r3, #1
 800b45e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	2b00      	cmp	r3, #0
 800b474:	d004      	beq.n	800b480 <USB_EPStartXfer+0x1226>
 800b476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b47a:	3301      	adds	r3, #1
 800b47c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	b29a      	uxth	r2, r3
 800b488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	029b      	lsls	r3, r3, #10
 800b490:	b29b      	uxth	r3, r3
 800b492:	4313      	orrs	r3, r2
 800b494:	b29a      	uxth	r2, r3
 800b496:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b49a:	801a      	strh	r2, [r3, #0]
 800b49c:	e02d      	b.n	800b4fa <USB_EPStartXfer+0x12a0>
 800b49e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	785b      	ldrb	r3, [r3, #1]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d125      	bne.n	800b4fa <USB_EPStartXfer+0x12a0>
 800b4ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	461a      	mov	r2, r3
 800b4c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b4c4:	4413      	add	r3, r2
 800b4c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	00da      	lsls	r2, r3, #3
 800b4d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b4dc:	4413      	add	r3, r2
 800b4de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b4e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b4e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b4f8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b4fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	69db      	ldr	r3, [r3, #28]
 800b506:	2b00      	cmp	r3, #0
 800b508:	f000 8218 	beq.w	800b93c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b510:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b51a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	4413      	add	r3, r2
 800b526:	881b      	ldrh	r3, [r3, #0]
 800b528:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b52c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b534:	2b00      	cmp	r3, #0
 800b536:	d005      	beq.n	800b544 <USB_EPStartXfer+0x12ea>
 800b538:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10d      	bne.n	800b560 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b544:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f040 81f5 	bne.w	800b93c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b552:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f040 81ee 	bne.w	800b93c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b564:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b56e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	4413      	add	r3, r2
 800b57a:	881b      	ldrh	r3, [r3, #0]
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b586:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b58a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b58e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	441a      	add	r2, r3
 800b5a4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b5a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	8013      	strh	r3, [r2, #0]
 800b5bc:	e1be      	b.n	800b93c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b5be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	78db      	ldrb	r3, [r3, #3]
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	f040 81b4 	bne.w	800b938 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b5d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	699a      	ldr	r2, [r3, #24]
 800b5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d917      	bls.n	800b61c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b5ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	699a      	ldr	r2, [r3, #24]
 800b608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60c:	1ad2      	subs	r2, r2, r3
 800b60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	619a      	str	r2, [r3, #24]
 800b61a:	e00e      	b.n	800b63a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b61c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	699b      	ldr	r3, [r3, #24]
 800b628:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2200      	movs	r2, #0
 800b638:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	785b      	ldrb	r3, [r3, #1]
 800b646:	2b00      	cmp	r3, #0
 800b648:	f040 8085 	bne.w	800b756 <USB_EPStartXfer+0x14fc>
 800b64c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b65a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b65e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b668:	b29b      	uxth	r3, r3
 800b66a:	461a      	mov	r2, r3
 800b66c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b670:	4413      	add	r3, r2
 800b672:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b67a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	00da      	lsls	r2, r3, #3
 800b684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b688:	4413      	add	r3, r2
 800b68a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b68e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b692:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b696:	881b      	ldrh	r3, [r3, #0]
 800b698:	b29b      	uxth	r3, r3
 800b69a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6a4:	801a      	strh	r2, [r3, #0]
 800b6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6aa:	2b3e      	cmp	r3, #62	; 0x3e
 800b6ac:	d923      	bls.n	800b6f6 <USB_EPStartXfer+0x149c>
 800b6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b2:	095b      	lsrs	r3, r3, #5
 800b6b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6bc:	f003 031f 	and.w	r3, r3, #31
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d104      	bne.n	800b6ce <USB_EPStartXfer+0x1474>
 800b6c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b6ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	029b      	lsls	r3, r3, #10
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6ec:	b29a      	uxth	r2, r3
 800b6ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6f2:	801a      	strh	r2, [r3, #0]
 800b6f4:	e060      	b.n	800b7b8 <USB_EPStartXfer+0x155e>
 800b6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10c      	bne.n	800b718 <USB_EPStartXfer+0x14be>
 800b6fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b702:	881b      	ldrh	r3, [r3, #0]
 800b704:	b29b      	uxth	r3, r3
 800b706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b70a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b70e:	b29a      	uxth	r2, r3
 800b710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b714:	801a      	strh	r2, [r3, #0]
 800b716:	e04f      	b.n	800b7b8 <USB_EPStartXfer+0x155e>
 800b718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b71c:	085b      	lsrs	r3, r3, #1
 800b71e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d004      	beq.n	800b738 <USB_EPStartXfer+0x14de>
 800b72e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b732:	3301      	adds	r3, #1
 800b734:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b738:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b73c:	881b      	ldrh	r3, [r3, #0]
 800b73e:	b29a      	uxth	r2, r3
 800b740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b744:	b29b      	uxth	r3, r3
 800b746:	029b      	lsls	r3, r3, #10
 800b748:	b29b      	uxth	r3, r3
 800b74a:	4313      	orrs	r3, r2
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b752:	801a      	strh	r2, [r3, #0]
 800b754:	e030      	b.n	800b7b8 <USB_EPStartXfer+0x155e>
 800b756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b75a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	785b      	ldrb	r3, [r3, #1]
 800b762:	2b01      	cmp	r3, #1
 800b764:	d128      	bne.n	800b7b8 <USB_EPStartXfer+0x155e>
 800b766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b76a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b782:	b29b      	uxth	r3, r3
 800b784:	461a      	mov	r2, r3
 800b786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b78a:	4413      	add	r3, r2
 800b78c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	00da      	lsls	r2, r3, #3
 800b79e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7a2:	4413      	add	r3, r2
 800b7a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b7a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b7b6:	801a      	strh	r2, [r3, #0]
 800b7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b7c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	785b      	ldrb	r3, [r3, #1]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f040 8085 	bne.w	800b8e2 <USB_EPStartXfer+0x1688>
 800b7d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b7e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b7fc:	4413      	add	r3, r2
 800b7fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	00da      	lsls	r2, r3, #3
 800b810:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b814:	4413      	add	r3, r2
 800b816:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b81a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b81e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b822:	881b      	ldrh	r3, [r3, #0]
 800b824:	b29b      	uxth	r3, r3
 800b826:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b830:	801a      	strh	r2, [r3, #0]
 800b832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b836:	2b3e      	cmp	r3, #62	; 0x3e
 800b838:	d923      	bls.n	800b882 <USB_EPStartXfer+0x1628>
 800b83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b83e:	095b      	lsrs	r3, r3, #5
 800b840:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b848:	f003 031f 	and.w	r3, r3, #31
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d104      	bne.n	800b85a <USB_EPStartXfer+0x1600>
 800b850:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b854:	3b01      	subs	r3, #1
 800b856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b85a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	b29a      	uxth	r2, r3
 800b862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b866:	b29b      	uxth	r3, r3
 800b868:	029b      	lsls	r3, r3, #10
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	4313      	orrs	r3, r2
 800b86e:	b29b      	uxth	r3, r3
 800b870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b878:	b29a      	uxth	r2, r3
 800b87a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b87e:	801a      	strh	r2, [r3, #0]
 800b880:	e05c      	b.n	800b93c <USB_EPStartXfer+0x16e2>
 800b882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10c      	bne.n	800b8a4 <USB_EPStartXfer+0x164a>
 800b88a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b88e:	881b      	ldrh	r3, [r3, #0]
 800b890:	b29b      	uxth	r3, r3
 800b892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b8a0:	801a      	strh	r2, [r3, #0]
 800b8a2:	e04b      	b.n	800b93c <USB_EPStartXfer+0x16e2>
 800b8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a8:	085b      	lsrs	r3, r3, #1
 800b8aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8b2:	f003 0301 	and.w	r3, r3, #1
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d004      	beq.n	800b8c4 <USB_EPStartXfer+0x166a>
 800b8ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8be:	3301      	adds	r3, #1
 800b8c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b8c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b8c8:	881b      	ldrh	r3, [r3, #0]
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	029b      	lsls	r3, r3, #10
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b8de:	801a      	strh	r2, [r3, #0]
 800b8e0:	e02c      	b.n	800b93c <USB_EPStartXfer+0x16e2>
 800b8e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	785b      	ldrb	r3, [r3, #1]
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d124      	bne.n	800b93c <USB_EPStartXfer+0x16e2>
 800b8f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b900:	b29b      	uxth	r3, r3
 800b902:	461a      	mov	r2, r3
 800b904:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b908:	4413      	add	r3, r2
 800b90a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b90e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	00da      	lsls	r2, r3, #3
 800b91c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b920:	4413      	add	r3, r2
 800b922:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b926:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b92e:	b29a      	uxth	r2, r3
 800b930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b934:	801a      	strh	r2, [r3, #0]
 800b936:	e001      	b.n	800b93c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	e03a      	b.n	800b9b2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b93c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b94a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	4413      	add	r3, r2
 800b956:	881b      	ldrh	r3, [r3, #0]
 800b958:	b29b      	uxth	r3, r3
 800b95a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b95e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b962:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b966:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b96a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b96e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b972:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b976:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b97a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b97e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b982:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b98c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	441a      	add	r2, r3
 800b998:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b99c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b9b0:	2300      	movs	r3, #0
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	785b      	ldrb	r3, [r3, #1]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d020      	beq.n	800ba10 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	881b      	ldrh	r3, [r3, #0]
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9e4:	81bb      	strh	r3, [r7, #12]
 800b9e6:	89bb      	ldrh	r3, [r7, #12]
 800b9e8:	f083 0310 	eor.w	r3, r3, #16
 800b9ec:	81bb      	strh	r3, [r7, #12]
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	441a      	add	r2, r3
 800b9f8:	89bb      	ldrh	r3, [r7, #12]
 800b9fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	8013      	strh	r3, [r2, #0]
 800ba0e:	e01f      	b.n	800ba50 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	4413      	add	r3, r2
 800ba1a:	881b      	ldrh	r3, [r3, #0]
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba26:	81fb      	strh	r3, [r7, #14]
 800ba28:	89fb      	ldrh	r3, [r7, #14]
 800ba2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ba2e:	81fb      	strh	r3, [r7, #14]
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	441a      	add	r2, r3
 800ba3a:	89fb      	ldrh	r3, [r7, #14]
 800ba3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3714      	adds	r7, #20
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr

0800ba5e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ba5e:	b480      	push	{r7}
 800ba60:	b087      	sub	sp, #28
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	7b1b      	ldrb	r3, [r3, #12]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f040 809d 	bne.w	800bbac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	785b      	ldrb	r3, [r3, #1]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d04c      	beq.n	800bb14 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4413      	add	r3, r2
 800ba84:	881b      	ldrh	r3, [r3, #0]
 800ba86:	823b      	strh	r3, [r7, #16]
 800ba88:	8a3b      	ldrh	r3, [r7, #16]
 800ba8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d01b      	beq.n	800baca <USB_EPClearStall+0x6c>
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4413      	add	r3, r2
 800ba9c:	881b      	ldrh	r3, [r3, #0]
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baa8:	81fb      	strh	r3, [r7, #14]
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	441a      	add	r2, r3
 800bab4:	89fb      	ldrh	r3, [r7, #14]
 800bab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800babe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bac2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	78db      	ldrb	r3, [r3, #3]
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d06c      	beq.n	800bbac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	4413      	add	r3, r2
 800badc:	881b      	ldrh	r3, [r3, #0]
 800bade:	b29b      	uxth	r3, r3
 800bae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bae8:	81bb      	strh	r3, [r7, #12]
 800baea:	89bb      	ldrh	r3, [r7, #12]
 800baec:	f083 0320 	eor.w	r3, r3, #32
 800baf0:	81bb      	strh	r3, [r7, #12]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	441a      	add	r2, r3
 800bafc:	89bb      	ldrh	r3, [r7, #12]
 800bafe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	8013      	strh	r3, [r2, #0]
 800bb12:	e04b      	b.n	800bbac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	4413      	add	r3, r2
 800bb1e:	881b      	ldrh	r3, [r3, #0]
 800bb20:	82fb      	strh	r3, [r7, #22]
 800bb22:	8afb      	ldrh	r3, [r7, #22]
 800bb24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d01b      	beq.n	800bb64 <USB_EPClearStall+0x106>
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	4413      	add	r3, r2
 800bb36:	881b      	ldrh	r3, [r3, #0]
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb42:	82bb      	strh	r3, [r7, #20]
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	441a      	add	r2, r3
 800bb4e:	8abb      	ldrh	r3, [r7, #20]
 800bb50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	4413      	add	r3, r2
 800bb6e:	881b      	ldrh	r3, [r3, #0]
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb7a:	827b      	strh	r3, [r7, #18]
 800bb7c:	8a7b      	ldrh	r3, [r7, #18]
 800bb7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bb82:	827b      	strh	r3, [r7, #18]
 800bb84:	8a7b      	ldrh	r3, [r7, #18]
 800bb86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bb8a:	827b      	strh	r3, [r7, #18]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	441a      	add	r2, r3
 800bb96:	8a7b      	ldrh	r3, [r7, #18]
 800bb98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	371c      	adds	r7, #28
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bbba:	b480      	push	{r7}
 800bbbc:	b083      	sub	sp, #12
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bbc6:	78fb      	ldrb	r3, [r7, #3]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d103      	bne.n	800bbd4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2280      	movs	r2, #128	; 0x80
 800bbd0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	370c      	adds	r7, #12
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b083      	sub	sp, #12
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800bc02:	2300      	movs	r3, #0
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bc22:	68fb      	ldr	r3, [r7, #12]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b08b      	sub	sp, #44	; 0x2c
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	460b      	mov	r3, r1
 800bc40:	80fb      	strh	r3, [r7, #6]
 800bc42:	4613      	mov	r3, r2
 800bc44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bc46:	88bb      	ldrh	r3, [r7, #4]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	085b      	lsrs	r3, r3, #1
 800bc4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc56:	88fa      	ldrh	r2, [r7, #6]
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc60:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	627b      	str	r3, [r7, #36]	; 0x24
 800bc66:	e01b      	b.n	800bca0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	3301      	adds	r3, #1
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	021b      	lsls	r3, r3, #8
 800bc76:	b21a      	sxth	r2, r3
 800bc78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	b21b      	sxth	r3, r3
 800bc80:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bc82:	6a3b      	ldr	r3, [r7, #32]
 800bc84:	8a7a      	ldrh	r2, [r7, #18]
 800bc86:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bc88:	6a3b      	ldr	r3, [r7, #32]
 800bc8a:	3302      	adds	r3, #2
 800bc8c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	3301      	adds	r3, #1
 800bc92:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bc94:	69fb      	ldr	r3, [r7, #28]
 800bc96:	3301      	adds	r3, #1
 800bc98:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	627b      	str	r3, [r7, #36]	; 0x24
 800bca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d1e0      	bne.n	800bc68 <USB_WritePMA+0x38>
  }
}
 800bca6:	bf00      	nop
 800bca8:	bf00      	nop
 800bcaa:	372c      	adds	r7, #44	; 0x2c
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b08b      	sub	sp, #44	; 0x2c
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	4611      	mov	r1, r2
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	80fb      	strh	r3, [r7, #6]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bcca:	88bb      	ldrh	r3, [r7, #4]
 800bccc:	085b      	lsrs	r3, r3, #1
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bcda:	88fa      	ldrh	r2, [r7, #6]
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	4413      	add	r3, r2
 800bce0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bce4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	627b      	str	r3, [r7, #36]	; 0x24
 800bcea:	e018      	b.n	800bd1e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bcec:	6a3b      	ldr	r3, [r7, #32]
 800bcee:	881b      	ldrh	r3, [r3, #0]
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bcf4:	6a3b      	ldr	r3, [r7, #32]
 800bcf6:	3302      	adds	r3, #2
 800bcf8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	b2da      	uxtb	r2, r3
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	3301      	adds	r3, #1
 800bd06:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	0a1b      	lsrs	r3, r3, #8
 800bd0c:	b2da      	uxtb	r2, r3
 800bd0e:	69fb      	ldr	r3, [r7, #28]
 800bd10:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	3301      	adds	r3, #1
 800bd16:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1a:	3b01      	subs	r3, #1
 800bd1c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1e3      	bne.n	800bcec <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bd24:	88bb      	ldrh	r3, [r7, #4]
 800bd26:	f003 0301 	and.w	r3, r3, #1
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d007      	beq.n	800bd40 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800bd30:	6a3b      	ldr	r3, [r7, #32]
 800bd32:	881b      	ldrh	r3, [r3, #0]
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	b2da      	uxtb	r2, r3
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	701a      	strb	r2, [r3, #0]
  }
}
 800bd40:	bf00      	nop
 800bd42:	372c      	adds	r7, #44	; 0x2c
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bd58:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bd5c:	f002 f9e6 	bl	800e12c <USBD_static_malloc>
 800bd60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d105      	bne.n	800bd74 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bd70:	2302      	movs	r3, #2
 800bd72:	e066      	b.n	800be42 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	7c1b      	ldrb	r3, [r3, #16]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d119      	bne.n	800bdb8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bd84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd88:	2202      	movs	r2, #2
 800bd8a:	2181      	movs	r1, #129	; 0x81
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f002 f874 	bl	800de7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2201      	movs	r2, #1
 800bd96:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bd98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd9c:	2202      	movs	r2, #2
 800bd9e:	2101      	movs	r1, #1
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f002 f86a 	bl	800de7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2210      	movs	r2, #16
 800bdb2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bdb6:	e016      	b.n	800bde6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bdb8:	2340      	movs	r3, #64	; 0x40
 800bdba:	2202      	movs	r2, #2
 800bdbc:	2181      	movs	r1, #129	; 0x81
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f002 f85b 	bl	800de7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bdca:	2340      	movs	r3, #64	; 0x40
 800bdcc:	2202      	movs	r2, #2
 800bdce:	2101      	movs	r1, #1
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f002 f852 	bl	800de7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2201      	movs	r2, #1
 800bdda:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2210      	movs	r2, #16
 800bde2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bde6:	2308      	movs	r3, #8
 800bde8:	2203      	movs	r2, #3
 800bdea:	2182      	movs	r1, #130	; 0x82
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f002 f844 	bl	800de7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2200      	movs	r2, #0
 800be08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2200      	movs	r2, #0
 800be10:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	7c1b      	ldrb	r3, [r3, #16]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d109      	bne.n	800be30 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be26:	2101      	movs	r1, #1
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f002 f915 	bl	800e058 <USBD_LL_PrepareReceive>
 800be2e:	e007      	b.n	800be40 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be36:	2340      	movs	r3, #64	; 0x40
 800be38:	2101      	movs	r1, #1
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f002 f90c 	bl	800e058 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b082      	sub	sp, #8
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	460b      	mov	r3, r1
 800be54:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800be56:	2181      	movs	r1, #129	; 0x81
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f002 f834 	bl	800dec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800be64:	2101      	movs	r1, #1
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f002 f82d 	bl	800dec6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800be74:	2182      	movs	r1, #130	; 0x82
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f002 f825 	bl	800dec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00e      	beq.n	800beb4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bea6:	4618      	mov	r0, r3
 800bea8:	f002 f94e 	bl	800e148 <USBD_static_free>
    pdev->pClassData = NULL;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
	...

0800bec0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bed0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bed2:	2300      	movs	r3, #0
 800bed4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bed6:	2300      	movs	r3, #0
 800bed8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800beda:	2300      	movs	r3, #0
 800bedc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bee4:	2303      	movs	r3, #3
 800bee6:	e0af      	b.n	800c048 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d03f      	beq.n	800bf74 <USBD_CDC_Setup+0xb4>
 800bef4:	2b20      	cmp	r3, #32
 800bef6:	f040 809f 	bne.w	800c038 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	88db      	ldrh	r3, [r3, #6]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d02e      	beq.n	800bf60 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	b25b      	sxtb	r3, r3
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	da16      	bge.n	800bf3a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	683a      	ldr	r2, [r7, #0]
 800bf16:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bf18:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf1a:	683a      	ldr	r2, [r7, #0]
 800bf1c:	88d2      	ldrh	r2, [r2, #6]
 800bf1e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	88db      	ldrh	r3, [r3, #6]
 800bf24:	2b07      	cmp	r3, #7
 800bf26:	bf28      	it	cs
 800bf28:	2307      	movcs	r3, #7
 800bf2a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	89fa      	ldrh	r2, [r7, #14]
 800bf30:	4619      	mov	r1, r3
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f001 fa9f 	bl	800d476 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bf38:	e085      	b.n	800c046 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	785a      	ldrb	r2, [r3, #1]
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	88db      	ldrh	r3, [r3, #6]
 800bf48:	b2da      	uxtb	r2, r3
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bf50:	6939      	ldr	r1, [r7, #16]
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	88db      	ldrh	r3, [r3, #6]
 800bf56:	461a      	mov	r2, r3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f001 fab8 	bl	800d4ce <USBD_CtlPrepareRx>
      break;
 800bf5e:	e072      	b.n	800c046 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	683a      	ldr	r2, [r7, #0]
 800bf6a:	7850      	ldrb	r0, [r2, #1]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	4798      	blx	r3
      break;
 800bf72:	e068      	b.n	800c046 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	785b      	ldrb	r3, [r3, #1]
 800bf78:	2b0b      	cmp	r3, #11
 800bf7a:	d852      	bhi.n	800c022 <USBD_CDC_Setup+0x162>
 800bf7c:	a201      	add	r2, pc, #4	; (adr r2, 800bf84 <USBD_CDC_Setup+0xc4>)
 800bf7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf82:	bf00      	nop
 800bf84:	0800bfb5 	.word	0x0800bfb5
 800bf88:	0800c031 	.word	0x0800c031
 800bf8c:	0800c023 	.word	0x0800c023
 800bf90:	0800c023 	.word	0x0800c023
 800bf94:	0800c023 	.word	0x0800c023
 800bf98:	0800c023 	.word	0x0800c023
 800bf9c:	0800c023 	.word	0x0800c023
 800bfa0:	0800c023 	.word	0x0800c023
 800bfa4:	0800c023 	.word	0x0800c023
 800bfa8:	0800c023 	.word	0x0800c023
 800bfac:	0800bfdf 	.word	0x0800bfdf
 800bfb0:	0800c009 	.word	0x0800c009
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	2b03      	cmp	r3, #3
 800bfbe:	d107      	bne.n	800bfd0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bfc0:	f107 030a 	add.w	r3, r7, #10
 800bfc4:	2202      	movs	r2, #2
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f001 fa54 	bl	800d476 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfce:	e032      	b.n	800c036 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bfd0:	6839      	ldr	r1, [r7, #0]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f001 f9de 	bl	800d394 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfd8:	2303      	movs	r3, #3
 800bfda:	75fb      	strb	r3, [r7, #23]
          break;
 800bfdc:	e02b      	b.n	800c036 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	2b03      	cmp	r3, #3
 800bfe8:	d107      	bne.n	800bffa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bfea:	f107 030d 	add.w	r3, r7, #13
 800bfee:	2201      	movs	r2, #1
 800bff0:	4619      	mov	r1, r3
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f001 fa3f 	bl	800d476 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bff8:	e01d      	b.n	800c036 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f001 f9c9 	bl	800d394 <USBD_CtlError>
            ret = USBD_FAIL;
 800c002:	2303      	movs	r3, #3
 800c004:	75fb      	strb	r3, [r7, #23]
          break;
 800c006:	e016      	b.n	800c036 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	2b03      	cmp	r3, #3
 800c012:	d00f      	beq.n	800c034 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c014:	6839      	ldr	r1, [r7, #0]
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f001 f9bc 	bl	800d394 <USBD_CtlError>
            ret = USBD_FAIL;
 800c01c:	2303      	movs	r3, #3
 800c01e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c020:	e008      	b.n	800c034 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c022:	6839      	ldr	r1, [r7, #0]
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f001 f9b5 	bl	800d394 <USBD_CtlError>
          ret = USBD_FAIL;
 800c02a:	2303      	movs	r3, #3
 800c02c:	75fb      	strb	r3, [r7, #23]
          break;
 800c02e:	e002      	b.n	800c036 <USBD_CDC_Setup+0x176>
          break;
 800c030:	bf00      	nop
 800c032:	e008      	b.n	800c046 <USBD_CDC_Setup+0x186>
          break;
 800c034:	bf00      	nop
      }
      break;
 800c036:	e006      	b.n	800c046 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c038:	6839      	ldr	r1, [r7, #0]
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f001 f9aa 	bl	800d394 <USBD_CtlError>
      ret = USBD_FAIL;
 800c040:	2303      	movs	r3, #3
 800c042:	75fb      	strb	r3, [r7, #23]
      break;
 800c044:	bf00      	nop
  }

  return (uint8_t)ret;
 800c046:	7dfb      	ldrb	r3, [r7, #23]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3718      	adds	r7, #24
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	460b      	mov	r3, r1
 800c05a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c062:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d101      	bne.n	800c072 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c06e:	2303      	movs	r3, #3
 800c070:	e04f      	b.n	800c112 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c078:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c07a:	78fa      	ldrb	r2, [r7, #3]
 800c07c:	6879      	ldr	r1, [r7, #4]
 800c07e:	4613      	mov	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	4413      	add	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	440b      	add	r3, r1
 800c088:	3318      	adds	r3, #24
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d029      	beq.n	800c0e4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c090:	78fa      	ldrb	r2, [r7, #3]
 800c092:	6879      	ldr	r1, [r7, #4]
 800c094:	4613      	mov	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	4413      	add	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	440b      	add	r3, r1
 800c09e:	3318      	adds	r3, #24
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	78f9      	ldrb	r1, [r7, #3]
 800c0a4:	68f8      	ldr	r0, [r7, #12]
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	440b      	add	r3, r1
 800c0ac:	00db      	lsls	r3, r3, #3
 800c0ae:	4403      	add	r3, r0
 800c0b0:	3320      	adds	r3, #32
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	fbb2 f1f3 	udiv	r1, r2, r3
 800c0b8:	fb01 f303 	mul.w	r3, r1, r3
 800c0bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d110      	bne.n	800c0e4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c0c2:	78fa      	ldrb	r2, [r7, #3]
 800c0c4:	6879      	ldr	r1, [r7, #4]
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	440b      	add	r3, r1
 800c0d0:	3318      	adds	r3, #24
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c0d6:	78f9      	ldrb	r1, [r7, #3]
 800c0d8:	2300      	movs	r3, #0
 800c0da:	2200      	movs	r2, #0
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f001 ff9a 	bl	800e016 <USBD_LL_Transmit>
 800c0e2:	e015      	b.n	800c110 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0f2:	691b      	ldr	r3, [r3, #16]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00b      	beq.n	800c110 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0fe:	691b      	ldr	r3, [r3, #16]
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c106:	68ba      	ldr	r2, [r7, #8]
 800c108:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c10c:	78fa      	ldrb	r2, [r7, #3]
 800c10e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c110:	2300      	movs	r3, #0
}
 800c112:	4618      	mov	r0, r3
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b084      	sub	sp, #16
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	460b      	mov	r3, r1
 800c124:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c12c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c134:	2b00      	cmp	r3, #0
 800c136:	d101      	bne.n	800c13c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c138:	2303      	movs	r3, #3
 800c13a:	e015      	b.n	800c168 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c13c:	78fb      	ldrb	r3, [r7, #3]
 800c13e:	4619      	mov	r1, r3
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f001 ffaa 	bl	800e09a <USBD_LL_GetRxDataSize>
 800c146:	4602      	mov	r2, r0
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c162:	4611      	mov	r1, r2
 800c164:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c166:	2300      	movs	r3, #0
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c17e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d101      	bne.n	800c18a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c186:	2303      	movs	r3, #3
 800c188:	e01b      	b.n	800c1c2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d015      	beq.n	800c1c0 <USBD_CDC_EP0_RxReady+0x50>
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c19a:	2bff      	cmp	r3, #255	; 0xff
 800c19c:	d010      	beq.n	800c1c0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c1ac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c1b4:	b292      	uxth	r2, r2
 800c1b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	22ff      	movs	r2, #255	; 0xff
 800c1bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c1c0:	2300      	movs	r3, #0
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
	...

0800c1cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2243      	movs	r2, #67	; 0x43
 800c1d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c1da:	4b03      	ldr	r3, [pc, #12]	; (800c1e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	200000a4 	.word	0x200000a4

0800c1ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2243      	movs	r2, #67	; 0x43
 800c1f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c1fa:	4b03      	ldr	r3, [pc, #12]	; (800c208 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr
 800c208:	20000060 	.word	0x20000060

0800c20c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2243      	movs	r2, #67	; 0x43
 800c218:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c21a:	4b03      	ldr	r3, [pc, #12]	; (800c228 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr
 800c228:	200000e8 	.word	0x200000e8

0800c22c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	220a      	movs	r2, #10
 800c238:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c23a:	4b03      	ldr	r3, [pc, #12]	; (800c248 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	2000001c 	.word	0x2000001c

0800c24c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d101      	bne.n	800c260 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c25c:	2303      	movs	r3, #3
 800c25e:	e004      	b.n	800c26a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	683a      	ldr	r2, [r7, #0]
 800c264:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	370c      	adds	r7, #12
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr

0800c276 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c276:	b480      	push	{r7}
 800c278:	b087      	sub	sp, #28
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	60f8      	str	r0, [r7, #12]
 800c27e:	60b9      	str	r1, [r7, #8]
 800c280:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c288:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d101      	bne.n	800c294 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c290:	2303      	movs	r3, #3
 800c292:	e008      	b.n	800c2a6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	68ba      	ldr	r2, [r7, #8]
 800c298:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	371c      	adds	r7, #28
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr

0800c2b2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c2b2:	b480      	push	{r7}
 800c2b4:	b085      	sub	sp, #20
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
 800c2ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d101      	bne.n	800c2ce <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	e004      	b.n	800c2d8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	683a      	ldr	r2, [r7, #0]
 800c2d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3714      	adds	r7, #20
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d101      	bne.n	800c302 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c2fe:	2303      	movs	r3, #3
 800c300:	e016      	b.n	800c330 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	7c1b      	ldrb	r3, [r3, #16]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d109      	bne.n	800c31e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c310:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c314:	2101      	movs	r1, #1
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f001 fe9e 	bl	800e058 <USBD_LL_PrepareReceive>
 800c31c:	e007      	b.n	800c32e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c324:	2340      	movs	r3, #64	; 0x40
 800c326:	2101      	movs	r1, #1
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f001 fe95 	bl	800e058 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c32e:	2300      	movs	r3, #0
}
 800c330:	4618      	mov	r0, r3
 800c332:	3710      	adds	r7, #16
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b086      	sub	sp, #24
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	4613      	mov	r3, r2
 800c344:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d101      	bne.n	800c350 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c34c:	2303      	movs	r3, #3
 800c34e:	e01f      	b.n	800c390 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2200      	movs	r2, #0
 800c354:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2200      	movs	r2, #0
 800c35c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2200      	movs	r2, #0
 800c364:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d003      	beq.n	800c376 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	68ba      	ldr	r2, [r7, #8]
 800c372:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2201      	movs	r2, #1
 800c37a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	79fa      	ldrb	r2, [r7, #7]
 800c382:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	f001 fcfd 	bl	800dd84 <USBD_LL_Init>
 800c38a:	4603      	mov	r3, r0
 800c38c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c38e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c390:	4618      	mov	r0, r3
 800c392:	3718      	adds	r7, #24
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d101      	bne.n	800c3b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c3ac:	2303      	movs	r3, #3
 800c3ae:	e016      	b.n	800c3de <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	683a      	ldr	r2, [r7, #0]
 800c3b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00b      	beq.n	800c3dc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3cc:	f107 020e 	add.w	r2, r7, #14
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	4798      	blx	r3
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b082      	sub	sp, #8
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f001 fd28 	bl	800de44 <USBD_LL_Start>
 800c3f4:	4603      	mov	r3, r0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c3fe:	b480      	push	{r7}
 800c400:	b083      	sub	sp, #12
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	370c      	adds	r7, #12
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	460b      	mov	r3, r1
 800c41e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c420:	2303      	movs	r3, #3
 800c422:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d009      	beq.n	800c442 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	78fa      	ldrb	r2, [r7, #3]
 800c438:	4611      	mov	r1, r2
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	4798      	blx	r3
 800c43e:	4603      	mov	r3, r0
 800c440:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c442:	7bfb      	ldrb	r3, [r7, #15]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3710      	adds	r7, #16
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	460b      	mov	r3, r1
 800c456:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d007      	beq.n	800c472 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	78fa      	ldrb	r2, [r7, #3]
 800c46c:	4611      	mov	r1, r2
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	4798      	blx	r3
  }

  return USBD_OK;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c48c:	6839      	ldr	r1, [r7, #0]
 800c48e:	4618      	mov	r0, r3
 800c490:	f000 ff46 	bl	800d320 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c4b0:	f003 031f 	and.w	r3, r3, #31
 800c4b4:	2b02      	cmp	r3, #2
 800c4b6:	d01a      	beq.n	800c4ee <USBD_LL_SetupStage+0x72>
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d822      	bhi.n	800c502 <USBD_LL_SetupStage+0x86>
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d002      	beq.n	800c4c6 <USBD_LL_SetupStage+0x4a>
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d00a      	beq.n	800c4da <USBD_LL_SetupStage+0x5e>
 800c4c4:	e01d      	b.n	800c502 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 f9ee 	bl	800c8b0 <USBD_StdDevReq>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	73fb      	strb	r3, [r7, #15]
      break;
 800c4d8:	e020      	b.n	800c51c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 fa52 	bl	800c98c <USBD_StdItfReq>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	73fb      	strb	r3, [r7, #15]
      break;
 800c4ec:	e016      	b.n	800c51c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 fa91 	bl	800ca1e <USBD_StdEPReq>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	73fb      	strb	r3, [r7, #15]
      break;
 800c500:	e00c      	b.n	800c51c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c508:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	4619      	mov	r1, r3
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f001 fcf7 	bl	800df04 <USBD_LL_StallEP>
 800c516:	4603      	mov	r3, r0
 800c518:	73fb      	strb	r3, [r7, #15]
      break;
 800c51a:	bf00      	nop
  }

  return ret;
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b086      	sub	sp, #24
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	60f8      	str	r0, [r7, #12]
 800c52e:	460b      	mov	r3, r1
 800c530:	607a      	str	r2, [r7, #4]
 800c532:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c534:	7afb      	ldrb	r3, [r7, #11]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d138      	bne.n	800c5ac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c540:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c548:	2b03      	cmp	r3, #3
 800c54a:	d14a      	bne.n	800c5e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	689a      	ldr	r2, [r3, #8]
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	429a      	cmp	r2, r3
 800c556:	d913      	bls.n	800c580 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	689a      	ldr	r2, [r3, #8]
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	1ad2      	subs	r2, r2, r3
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	68da      	ldr	r2, [r3, #12]
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	4293      	cmp	r3, r2
 800c570:	bf28      	it	cs
 800c572:	4613      	movcs	r3, r2
 800c574:	461a      	mov	r2, r3
 800c576:	6879      	ldr	r1, [r7, #4]
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f000 ffc5 	bl	800d508 <USBD_CtlContinueRx>
 800c57e:	e030      	b.n	800c5e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c586:	b2db      	uxtb	r3, r3
 800c588:	2b03      	cmp	r3, #3
 800c58a:	d10b      	bne.n	800c5a4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d005      	beq.n	800c5a4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	68f8      	ldr	r0, [r7, #12]
 800c5a2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f000 ffc0 	bl	800d52a <USBD_CtlSendStatus>
 800c5aa:	e01a      	b.n	800c5e2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5b2:	b2db      	uxtb	r3, r3
 800c5b4:	2b03      	cmp	r3, #3
 800c5b6:	d114      	bne.n	800c5e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5be:	699b      	ldr	r3, [r3, #24]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00e      	beq.n	800c5e2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ca:	699b      	ldr	r3, [r3, #24]
 800c5cc:	7afa      	ldrb	r2, [r7, #11]
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	4798      	blx	r3
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c5d8:	7dfb      	ldrb	r3, [r7, #23]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d001      	beq.n	800c5e2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c5de:	7dfb      	ldrb	r3, [r7, #23]
 800c5e0:	e000      	b.n	800c5e4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3718      	adds	r7, #24
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	607a      	str	r2, [r7, #4]
 800c5f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c5fa:	7afb      	ldrb	r3, [r7, #11]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d16b      	bne.n	800c6d8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	3314      	adds	r3, #20
 800c604:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d156      	bne.n	800c6be <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	689a      	ldr	r2, [r3, #8]
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d914      	bls.n	800c646 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	689a      	ldr	r2, [r3, #8]
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	1ad2      	subs	r2, r2, r3
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	461a      	mov	r2, r3
 800c630:	6879      	ldr	r1, [r7, #4]
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f000 ff3a 	bl	800d4ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c638:	2300      	movs	r3, #0
 800c63a:	2200      	movs	r2, #0
 800c63c:	2100      	movs	r1, #0
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f001 fd0a 	bl	800e058 <USBD_LL_PrepareReceive>
 800c644:	e03b      	b.n	800c6be <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	68da      	ldr	r2, [r3, #12]
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d11c      	bne.n	800c68c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	685a      	ldr	r2, [r3, #4]
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d316      	bcc.n	800c68c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	685a      	ldr	r2, [r3, #4]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c668:	429a      	cmp	r2, r3
 800c66a:	d20f      	bcs.n	800c68c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c66c:	2200      	movs	r2, #0
 800c66e:	2100      	movs	r1, #0
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f000 ff1b 	bl	800d4ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2200      	movs	r2, #0
 800c67a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c67e:	2300      	movs	r3, #0
 800c680:	2200      	movs	r2, #0
 800c682:	2100      	movs	r1, #0
 800c684:	68f8      	ldr	r0, [r7, #12]
 800c686:	f001 fce7 	bl	800e058 <USBD_LL_PrepareReceive>
 800c68a:	e018      	b.n	800c6be <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c692:	b2db      	uxtb	r3, r3
 800c694:	2b03      	cmp	r3, #3
 800c696:	d10b      	bne.n	800c6b0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c69e:	68db      	ldr	r3, [r3, #12]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d005      	beq.n	800c6b0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6b0:	2180      	movs	r1, #128	; 0x80
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f001 fc26 	bl	800df04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	f000 ff49 	bl	800d550 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d122      	bne.n	800c70e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f7ff fe98 	bl	800c3fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c6d6:	e01a      	b.n	800c70e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	2b03      	cmp	r3, #3
 800c6e2:	d114      	bne.n	800c70e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ea:	695b      	ldr	r3, [r3, #20]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d00e      	beq.n	800c70e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6f6:	695b      	ldr	r3, [r3, #20]
 800c6f8:	7afa      	ldrb	r2, [r7, #11]
 800c6fa:	4611      	mov	r1, r2
 800c6fc:	68f8      	ldr	r0, [r7, #12]
 800c6fe:	4798      	blx	r3
 800c700:	4603      	mov	r3, r0
 800c702:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c704:	7dfb      	ldrb	r3, [r7, #23]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d001      	beq.n	800c70e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c70a:	7dfb      	ldrb	r3, [r7, #23]
 800c70c:	e000      	b.n	800c710 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c70e:	2300      	movs	r3, #0
}
 800c710:	4618      	mov	r0, r3
 800c712:	3718      	adds	r7, #24
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c744:	2b00      	cmp	r3, #0
 800c746:	d101      	bne.n	800c74c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c748:	2303      	movs	r3, #3
 800c74a:	e02f      	b.n	800c7ac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00f      	beq.n	800c776 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d009      	beq.n	800c776 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	6852      	ldr	r2, [r2, #4]
 800c76e:	b2d2      	uxtb	r2, r2
 800c770:	4611      	mov	r1, r2
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c776:	2340      	movs	r3, #64	; 0x40
 800c778:	2200      	movs	r2, #0
 800c77a:	2100      	movs	r1, #0
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f001 fb7c 	bl	800de7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2201      	movs	r2, #1
 800c786:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2240      	movs	r2, #64	; 0x40
 800c78e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c792:	2340      	movs	r3, #64	; 0x40
 800c794:	2200      	movs	r2, #0
 800c796:	2180      	movs	r1, #128	; 0x80
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f001 fb6e 	bl	800de7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2240      	movs	r2, #64	; 0x40
 800c7a8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c7aa:	2300      	movs	r3, #0
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3708      	adds	r7, #8
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	460b      	mov	r3, r1
 800c7be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	78fa      	ldrb	r2, [r7, #3]
 800c7c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	370c      	adds	r7, #12
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2204      	movs	r2, #4
 800c7ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c7f2:	2300      	movs	r3, #0
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c800:	b480      	push	{r7}
 800c802:	b083      	sub	sp, #12
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	2b04      	cmp	r3, #4
 800c812:	d106      	bne.n	800c822 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	370c      	adds	r7, #12
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d101      	bne.n	800c846 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c842:	2303      	movs	r3, #3
 800c844:	e012      	b.n	800c86c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	2b03      	cmp	r3, #3
 800c850:	d10b      	bne.n	800c86a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c858:	69db      	ldr	r3, [r3, #28]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d005      	beq.n	800c86a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c864:	69db      	ldr	r3, [r3, #28]
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c86a:	2300      	movs	r3, #0
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3708      	adds	r7, #8
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c874:	b480      	push	{r7}
 800c876:	b087      	sub	sp, #28
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	3301      	adds	r3, #1
 800c88a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c892:	8a3b      	ldrh	r3, [r7, #16]
 800c894:	021b      	lsls	r3, r3, #8
 800c896:	b21a      	sxth	r2, r3
 800c898:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c89c:	4313      	orrs	r3, r2
 800c89e:	b21b      	sxth	r3, r3
 800c8a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c8a2:	89fb      	ldrh	r3, [r7, #14]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	371c      	adds	r7, #28
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c8c6:	2b40      	cmp	r3, #64	; 0x40
 800c8c8:	d005      	beq.n	800c8d6 <USBD_StdDevReq+0x26>
 800c8ca:	2b40      	cmp	r3, #64	; 0x40
 800c8cc:	d853      	bhi.n	800c976 <USBD_StdDevReq+0xc6>
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00b      	beq.n	800c8ea <USBD_StdDevReq+0x3a>
 800c8d2:	2b20      	cmp	r3, #32
 800c8d4:	d14f      	bne.n	800c976 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	4798      	blx	r3
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	73fb      	strb	r3, [r7, #15]
      break;
 800c8e8:	e04a      	b.n	800c980 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	785b      	ldrb	r3, [r3, #1]
 800c8ee:	2b09      	cmp	r3, #9
 800c8f0:	d83b      	bhi.n	800c96a <USBD_StdDevReq+0xba>
 800c8f2:	a201      	add	r2, pc, #4	; (adr r2, 800c8f8 <USBD_StdDevReq+0x48>)
 800c8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f8:	0800c94d 	.word	0x0800c94d
 800c8fc:	0800c961 	.word	0x0800c961
 800c900:	0800c96b 	.word	0x0800c96b
 800c904:	0800c957 	.word	0x0800c957
 800c908:	0800c96b 	.word	0x0800c96b
 800c90c:	0800c92b 	.word	0x0800c92b
 800c910:	0800c921 	.word	0x0800c921
 800c914:	0800c96b 	.word	0x0800c96b
 800c918:	0800c943 	.word	0x0800c943
 800c91c:	0800c935 	.word	0x0800c935
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c920:	6839      	ldr	r1, [r7, #0]
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 f9de 	bl	800cce4 <USBD_GetDescriptor>
          break;
 800c928:	e024      	b.n	800c974 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c92a:	6839      	ldr	r1, [r7, #0]
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 fb6d 	bl	800d00c <USBD_SetAddress>
          break;
 800c932:	e01f      	b.n	800c974 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c934:	6839      	ldr	r1, [r7, #0]
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 fbac 	bl	800d094 <USBD_SetConfig>
 800c93c:	4603      	mov	r3, r0
 800c93e:	73fb      	strb	r3, [r7, #15]
          break;
 800c940:	e018      	b.n	800c974 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c942:	6839      	ldr	r1, [r7, #0]
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 fc4b 	bl	800d1e0 <USBD_GetConfig>
          break;
 800c94a:	e013      	b.n	800c974 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fc7c 	bl	800d24c <USBD_GetStatus>
          break;
 800c954:	e00e      	b.n	800c974 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c956:	6839      	ldr	r1, [r7, #0]
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fcab 	bl	800d2b4 <USBD_SetFeature>
          break;
 800c95e:	e009      	b.n	800c974 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c960:	6839      	ldr	r1, [r7, #0]
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 fcba 	bl	800d2dc <USBD_ClrFeature>
          break;
 800c968:	e004      	b.n	800c974 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c96a:	6839      	ldr	r1, [r7, #0]
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fd11 	bl	800d394 <USBD_CtlError>
          break;
 800c972:	bf00      	nop
      }
      break;
 800c974:	e004      	b.n	800c980 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 fd0b 	bl	800d394 <USBD_CtlError>
      break;
 800c97e:	bf00      	nop
  }

  return ret;
 800c980:	7bfb      	ldrb	r3, [r7, #15]
}
 800c982:	4618      	mov	r0, r3
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop

0800c98c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c996:	2300      	movs	r3, #0
 800c998:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9a2:	2b40      	cmp	r3, #64	; 0x40
 800c9a4:	d005      	beq.n	800c9b2 <USBD_StdItfReq+0x26>
 800c9a6:	2b40      	cmp	r3, #64	; 0x40
 800c9a8:	d82f      	bhi.n	800ca0a <USBD_StdItfReq+0x7e>
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d001      	beq.n	800c9b2 <USBD_StdItfReq+0x26>
 800c9ae:	2b20      	cmp	r3, #32
 800c9b0:	d12b      	bne.n	800ca0a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d81d      	bhi.n	800c9fc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	889b      	ldrh	r3, [r3, #4]
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d813      	bhi.n	800c9f2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	6839      	ldr	r1, [r7, #0]
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	4798      	blx	r3
 800c9d8:	4603      	mov	r3, r0
 800c9da:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	88db      	ldrh	r3, [r3, #6]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d110      	bne.n	800ca06 <USBD_StdItfReq+0x7a>
 800c9e4:	7bfb      	ldrb	r3, [r7, #15]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d10d      	bne.n	800ca06 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 fd9d 	bl	800d52a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c9f0:	e009      	b.n	800ca06 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 fccd 	bl	800d394 <USBD_CtlError>
          break;
 800c9fa:	e004      	b.n	800ca06 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 fcc8 	bl	800d394 <USBD_CtlError>
          break;
 800ca04:	e000      	b.n	800ca08 <USBD_StdItfReq+0x7c>
          break;
 800ca06:	bf00      	nop
      }
      break;
 800ca08:	e004      	b.n	800ca14 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ca0a:	6839      	ldr	r1, [r7, #0]
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 fcc1 	bl	800d394 <USBD_CtlError>
      break;
 800ca12:	bf00      	nop
  }

  return ret;
 800ca14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b084      	sub	sp, #16
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
 800ca26:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	889b      	ldrh	r3, [r3, #4]
 800ca30:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca3a:	2b40      	cmp	r3, #64	; 0x40
 800ca3c:	d007      	beq.n	800ca4e <USBD_StdEPReq+0x30>
 800ca3e:	2b40      	cmp	r3, #64	; 0x40
 800ca40:	f200 8145 	bhi.w	800ccce <USBD_StdEPReq+0x2b0>
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00c      	beq.n	800ca62 <USBD_StdEPReq+0x44>
 800ca48:	2b20      	cmp	r3, #32
 800ca4a:	f040 8140 	bne.w	800ccce <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	6839      	ldr	r1, [r7, #0]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	4798      	blx	r3
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ca60:	e13a      	b.n	800ccd8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	785b      	ldrb	r3, [r3, #1]
 800ca66:	2b03      	cmp	r3, #3
 800ca68:	d007      	beq.n	800ca7a <USBD_StdEPReq+0x5c>
 800ca6a:	2b03      	cmp	r3, #3
 800ca6c:	f300 8129 	bgt.w	800ccc2 <USBD_StdEPReq+0x2a4>
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d07f      	beq.n	800cb74 <USBD_StdEPReq+0x156>
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d03c      	beq.n	800caf2 <USBD_StdEPReq+0xd4>
 800ca78:	e123      	b.n	800ccc2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	2b02      	cmp	r3, #2
 800ca84:	d002      	beq.n	800ca8c <USBD_StdEPReq+0x6e>
 800ca86:	2b03      	cmp	r3, #3
 800ca88:	d016      	beq.n	800cab8 <USBD_StdEPReq+0x9a>
 800ca8a:	e02c      	b.n	800cae6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca8c:	7bbb      	ldrb	r3, [r7, #14]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d00d      	beq.n	800caae <USBD_StdEPReq+0x90>
 800ca92:	7bbb      	ldrb	r3, [r7, #14]
 800ca94:	2b80      	cmp	r3, #128	; 0x80
 800ca96:	d00a      	beq.n	800caae <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca98:	7bbb      	ldrb	r3, [r7, #14]
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f001 fa31 	bl	800df04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800caa2:	2180      	movs	r1, #128	; 0x80
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f001 fa2d 	bl	800df04 <USBD_LL_StallEP>
 800caaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800caac:	e020      	b.n	800caf0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800caae:	6839      	ldr	r1, [r7, #0]
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fc6f 	bl	800d394 <USBD_CtlError>
              break;
 800cab6:	e01b      	b.n	800caf0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	885b      	ldrh	r3, [r3, #2]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d10e      	bne.n	800cade <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cac0:	7bbb      	ldrb	r3, [r7, #14]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00b      	beq.n	800cade <USBD_StdEPReq+0xc0>
 800cac6:	7bbb      	ldrb	r3, [r7, #14]
 800cac8:	2b80      	cmp	r3, #128	; 0x80
 800caca:	d008      	beq.n	800cade <USBD_StdEPReq+0xc0>
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	88db      	ldrh	r3, [r3, #6]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d104      	bne.n	800cade <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cad4:	7bbb      	ldrb	r3, [r7, #14]
 800cad6:	4619      	mov	r1, r3
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f001 fa13 	bl	800df04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 fd23 	bl	800d52a <USBD_CtlSendStatus>

              break;
 800cae4:	e004      	b.n	800caf0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 fc53 	bl	800d394 <USBD_CtlError>
              break;
 800caee:	bf00      	nop
          }
          break;
 800caf0:	e0ec      	b.n	800cccc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d002      	beq.n	800cb04 <USBD_StdEPReq+0xe6>
 800cafe:	2b03      	cmp	r3, #3
 800cb00:	d016      	beq.n	800cb30 <USBD_StdEPReq+0x112>
 800cb02:	e030      	b.n	800cb66 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb04:	7bbb      	ldrb	r3, [r7, #14]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00d      	beq.n	800cb26 <USBD_StdEPReq+0x108>
 800cb0a:	7bbb      	ldrb	r3, [r7, #14]
 800cb0c:	2b80      	cmp	r3, #128	; 0x80
 800cb0e:	d00a      	beq.n	800cb26 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb10:	7bbb      	ldrb	r3, [r7, #14]
 800cb12:	4619      	mov	r1, r3
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f001 f9f5 	bl	800df04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb1a:	2180      	movs	r1, #128	; 0x80
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f001 f9f1 	bl	800df04 <USBD_LL_StallEP>
 800cb22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb24:	e025      	b.n	800cb72 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cb26:	6839      	ldr	r1, [r7, #0]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 fc33 	bl	800d394 <USBD_CtlError>
              break;
 800cb2e:	e020      	b.n	800cb72 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	885b      	ldrh	r3, [r3, #2]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d11b      	bne.n	800cb70 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cb38:	7bbb      	ldrb	r3, [r7, #14]
 800cb3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d004      	beq.n	800cb4c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb42:	7bbb      	ldrb	r3, [r7, #14]
 800cb44:	4619      	mov	r1, r3
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f001 f9fb 	bl	800df42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 fcec 	bl	800d52a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb58:	689b      	ldr	r3, [r3, #8]
 800cb5a:	6839      	ldr	r1, [r7, #0]
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	4798      	blx	r3
 800cb60:	4603      	mov	r3, r0
 800cb62:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cb64:	e004      	b.n	800cb70 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cb66:	6839      	ldr	r1, [r7, #0]
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 fc13 	bl	800d394 <USBD_CtlError>
              break;
 800cb6e:	e000      	b.n	800cb72 <USBD_StdEPReq+0x154>
              break;
 800cb70:	bf00      	nop
          }
          break;
 800cb72:	e0ab      	b.n	800cccc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	2b02      	cmp	r3, #2
 800cb7e:	d002      	beq.n	800cb86 <USBD_StdEPReq+0x168>
 800cb80:	2b03      	cmp	r3, #3
 800cb82:	d032      	beq.n	800cbea <USBD_StdEPReq+0x1cc>
 800cb84:	e097      	b.n	800ccb6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb86:	7bbb      	ldrb	r3, [r7, #14]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d007      	beq.n	800cb9c <USBD_StdEPReq+0x17e>
 800cb8c:	7bbb      	ldrb	r3, [r7, #14]
 800cb8e:	2b80      	cmp	r3, #128	; 0x80
 800cb90:	d004      	beq.n	800cb9c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800cb92:	6839      	ldr	r1, [r7, #0]
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 fbfd 	bl	800d394 <USBD_CtlError>
                break;
 800cb9a:	e091      	b.n	800ccc0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	da0b      	bge.n	800cbbc <USBD_StdEPReq+0x19e>
 800cba4:	7bbb      	ldrb	r3, [r7, #14]
 800cba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbaa:	4613      	mov	r3, r2
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	4413      	add	r3, r2
 800cbb0:	009b      	lsls	r3, r3, #2
 800cbb2:	3310      	adds	r3, #16
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	3304      	adds	r3, #4
 800cbba:	e00b      	b.n	800cbd4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbbc:	7bbb      	ldrb	r3, [r7, #14]
 800cbbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbc2:	4613      	mov	r3, r2
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	4413      	add	r3, r2
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	2202      	movs	r2, #2
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 fc47 	bl	800d476 <USBD_CtlSendData>
              break;
 800cbe8:	e06a      	b.n	800ccc0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cbea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	da11      	bge.n	800cc16 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cbf2:	7bbb      	ldrb	r3, [r7, #14]
 800cbf4:	f003 020f 	and.w	r2, r3, #15
 800cbf8:	6879      	ldr	r1, [r7, #4]
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	4413      	add	r3, r2
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	440b      	add	r3, r1
 800cc04:	3324      	adds	r3, #36	; 0x24
 800cc06:	881b      	ldrh	r3, [r3, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d117      	bne.n	800cc3c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cc0c:	6839      	ldr	r1, [r7, #0]
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 fbc0 	bl	800d394 <USBD_CtlError>
                  break;
 800cc14:	e054      	b.n	800ccc0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc16:	7bbb      	ldrb	r3, [r7, #14]
 800cc18:	f003 020f 	and.w	r2, r3, #15
 800cc1c:	6879      	ldr	r1, [r7, #4]
 800cc1e:	4613      	mov	r3, r2
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	4413      	add	r3, r2
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	440b      	add	r3, r1
 800cc28:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cc2c:	881b      	ldrh	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d104      	bne.n	800cc3c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cc32:	6839      	ldr	r1, [r7, #0]
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fbad 	bl	800d394 <USBD_CtlError>
                  break;
 800cc3a:	e041      	b.n	800ccc0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	da0b      	bge.n	800cc5c <USBD_StdEPReq+0x23e>
 800cc44:	7bbb      	ldrb	r3, [r7, #14]
 800cc46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	4413      	add	r3, r2
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	3310      	adds	r3, #16
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	4413      	add	r3, r2
 800cc58:	3304      	adds	r3, #4
 800cc5a:	e00b      	b.n	800cc74 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc5c:	7bbb      	ldrb	r3, [r7, #14]
 800cc5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc62:	4613      	mov	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	4413      	add	r3, r2
 800cc72:	3304      	adds	r3, #4
 800cc74:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc76:	7bbb      	ldrb	r3, [r7, #14]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d002      	beq.n	800cc82 <USBD_StdEPReq+0x264>
 800cc7c:	7bbb      	ldrb	r3, [r7, #14]
 800cc7e:	2b80      	cmp	r3, #128	; 0x80
 800cc80:	d103      	bne.n	800cc8a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	2200      	movs	r2, #0
 800cc86:	601a      	str	r2, [r3, #0]
 800cc88:	e00e      	b.n	800cca8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cc8a:	7bbb      	ldrb	r3, [r7, #14]
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f001 f976 	bl	800df80 <USBD_LL_IsStallEP>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d003      	beq.n	800cca2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	601a      	str	r2, [r3, #0]
 800cca0:	e002      	b.n	800cca8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	2200      	movs	r2, #0
 800cca6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	2202      	movs	r2, #2
 800ccac:	4619      	mov	r1, r3
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 fbe1 	bl	800d476 <USBD_CtlSendData>
              break;
 800ccb4:	e004      	b.n	800ccc0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 fb6b 	bl	800d394 <USBD_CtlError>
              break;
 800ccbe:	bf00      	nop
          }
          break;
 800ccc0:	e004      	b.n	800cccc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ccc2:	6839      	ldr	r1, [r7, #0]
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 fb65 	bl	800d394 <USBD_CtlError>
          break;
 800ccca:	bf00      	nop
      }
      break;
 800cccc:	e004      	b.n	800ccd8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ccce:	6839      	ldr	r1, [r7, #0]
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f000 fb5f 	bl	800d394 <USBD_CtlError>
      break;
 800ccd6:	bf00      	nop
  }

  return ret;
 800ccd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
	...

0800cce4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	885b      	ldrh	r3, [r3, #2]
 800ccfe:	0a1b      	lsrs	r3, r3, #8
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	3b01      	subs	r3, #1
 800cd04:	2b0e      	cmp	r3, #14
 800cd06:	f200 8152 	bhi.w	800cfae <USBD_GetDescriptor+0x2ca>
 800cd0a:	a201      	add	r2, pc, #4	; (adr r2, 800cd10 <USBD_GetDescriptor+0x2c>)
 800cd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd10:	0800cd81 	.word	0x0800cd81
 800cd14:	0800cd99 	.word	0x0800cd99
 800cd18:	0800cdd9 	.word	0x0800cdd9
 800cd1c:	0800cfaf 	.word	0x0800cfaf
 800cd20:	0800cfaf 	.word	0x0800cfaf
 800cd24:	0800cf4f 	.word	0x0800cf4f
 800cd28:	0800cf7b 	.word	0x0800cf7b
 800cd2c:	0800cfaf 	.word	0x0800cfaf
 800cd30:	0800cfaf 	.word	0x0800cfaf
 800cd34:	0800cfaf 	.word	0x0800cfaf
 800cd38:	0800cfaf 	.word	0x0800cfaf
 800cd3c:	0800cfaf 	.word	0x0800cfaf
 800cd40:	0800cfaf 	.word	0x0800cfaf
 800cd44:	0800cfaf 	.word	0x0800cfaf
 800cd48:	0800cd4d 	.word	0x0800cd4d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd52:	69db      	ldr	r3, [r3, #28]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d00b      	beq.n	800cd70 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd5e:	69db      	ldr	r3, [r3, #28]
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	7c12      	ldrb	r2, [r2, #16]
 800cd64:	f107 0108 	add.w	r1, r7, #8
 800cd68:	4610      	mov	r0, r2
 800cd6a:	4798      	blx	r3
 800cd6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd6e:	e126      	b.n	800cfbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cd70:	6839      	ldr	r1, [r7, #0]
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 fb0e 	bl	800d394 <USBD_CtlError>
        err++;
 800cd78:	7afb      	ldrb	r3, [r7, #11]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	72fb      	strb	r3, [r7, #11]
      break;
 800cd7e:	e11e      	b.n	800cfbe <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	7c12      	ldrb	r2, [r2, #16]
 800cd8c:	f107 0108 	add.w	r1, r7, #8
 800cd90:	4610      	mov	r0, r2
 800cd92:	4798      	blx	r3
 800cd94:	60f8      	str	r0, [r7, #12]
      break;
 800cd96:	e112      	b.n	800cfbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	7c1b      	ldrb	r3, [r3, #16]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10d      	bne.n	800cdbc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda8:	f107 0208 	add.w	r2, r7, #8
 800cdac:	4610      	mov	r0, r2
 800cdae:	4798      	blx	r3
 800cdb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	2202      	movs	r2, #2
 800cdb8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cdba:	e100      	b.n	800cfbe <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc4:	f107 0208 	add.w	r2, r7, #8
 800cdc8:	4610      	mov	r0, r2
 800cdca:	4798      	blx	r3
 800cdcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	2202      	movs	r2, #2
 800cdd4:	701a      	strb	r2, [r3, #0]
      break;
 800cdd6:	e0f2      	b.n	800cfbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	885b      	ldrh	r3, [r3, #2]
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	2b05      	cmp	r3, #5
 800cde0:	f200 80ac 	bhi.w	800cf3c <USBD_GetDescriptor+0x258>
 800cde4:	a201      	add	r2, pc, #4	; (adr r2, 800cdec <USBD_GetDescriptor+0x108>)
 800cde6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdea:	bf00      	nop
 800cdec:	0800ce05 	.word	0x0800ce05
 800cdf0:	0800ce39 	.word	0x0800ce39
 800cdf4:	0800ce6d 	.word	0x0800ce6d
 800cdf8:	0800cea1 	.word	0x0800cea1
 800cdfc:	0800ced5 	.word	0x0800ced5
 800ce00:	0800cf09 	.word	0x0800cf09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00b      	beq.n	800ce28 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	7c12      	ldrb	r2, [r2, #16]
 800ce1c:	f107 0108 	add.w	r1, r7, #8
 800ce20:	4610      	mov	r0, r2
 800ce22:	4798      	blx	r3
 800ce24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce26:	e091      	b.n	800cf4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce28:	6839      	ldr	r1, [r7, #0]
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 fab2 	bl	800d394 <USBD_CtlError>
            err++;
 800ce30:	7afb      	ldrb	r3, [r7, #11]
 800ce32:	3301      	adds	r3, #1
 800ce34:	72fb      	strb	r3, [r7, #11]
          break;
 800ce36:	e089      	b.n	800cf4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce3e:	689b      	ldr	r3, [r3, #8]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d00b      	beq.n	800ce5c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	7c12      	ldrb	r2, [r2, #16]
 800ce50:	f107 0108 	add.w	r1, r7, #8
 800ce54:	4610      	mov	r0, r2
 800ce56:	4798      	blx	r3
 800ce58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce5a:	e077      	b.n	800cf4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce5c:	6839      	ldr	r1, [r7, #0]
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 fa98 	bl	800d394 <USBD_CtlError>
            err++;
 800ce64:	7afb      	ldrb	r3, [r7, #11]
 800ce66:	3301      	adds	r3, #1
 800ce68:	72fb      	strb	r3, [r7, #11]
          break;
 800ce6a:	e06f      	b.n	800cf4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00b      	beq.n	800ce90 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	7c12      	ldrb	r2, [r2, #16]
 800ce84:	f107 0108 	add.w	r1, r7, #8
 800ce88:	4610      	mov	r0, r2
 800ce8a:	4798      	blx	r3
 800ce8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce8e:	e05d      	b.n	800cf4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce90:	6839      	ldr	r1, [r7, #0]
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 fa7e 	bl	800d394 <USBD_CtlError>
            err++;
 800ce98:	7afb      	ldrb	r3, [r7, #11]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce9e:	e055      	b.n	800cf4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cea6:	691b      	ldr	r3, [r3, #16]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00b      	beq.n	800cec4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceb2:	691b      	ldr	r3, [r3, #16]
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	7c12      	ldrb	r2, [r2, #16]
 800ceb8:	f107 0108 	add.w	r1, r7, #8
 800cebc:	4610      	mov	r0, r2
 800cebe:	4798      	blx	r3
 800cec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cec2:	e043      	b.n	800cf4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cec4:	6839      	ldr	r1, [r7, #0]
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 fa64 	bl	800d394 <USBD_CtlError>
            err++;
 800cecc:	7afb      	ldrb	r3, [r7, #11]
 800cece:	3301      	adds	r3, #1
 800ced0:	72fb      	strb	r3, [r7, #11]
          break;
 800ced2:	e03b      	b.n	800cf4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceda:	695b      	ldr	r3, [r3, #20]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00b      	beq.n	800cef8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cee6:	695b      	ldr	r3, [r3, #20]
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	7c12      	ldrb	r2, [r2, #16]
 800ceec:	f107 0108 	add.w	r1, r7, #8
 800cef0:	4610      	mov	r0, r2
 800cef2:	4798      	blx	r3
 800cef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cef6:	e029      	b.n	800cf4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cef8:	6839      	ldr	r1, [r7, #0]
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 fa4a 	bl	800d394 <USBD_CtlError>
            err++;
 800cf00:	7afb      	ldrb	r3, [r7, #11]
 800cf02:	3301      	adds	r3, #1
 800cf04:	72fb      	strb	r3, [r7, #11]
          break;
 800cf06:	e021      	b.n	800cf4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf0e:	699b      	ldr	r3, [r3, #24]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d00b      	beq.n	800cf2c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf1a:	699b      	ldr	r3, [r3, #24]
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	7c12      	ldrb	r2, [r2, #16]
 800cf20:	f107 0108 	add.w	r1, r7, #8
 800cf24:	4610      	mov	r0, r2
 800cf26:	4798      	blx	r3
 800cf28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf2a:	e00f      	b.n	800cf4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf2c:	6839      	ldr	r1, [r7, #0]
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fa30 	bl	800d394 <USBD_CtlError>
            err++;
 800cf34:	7afb      	ldrb	r3, [r7, #11]
 800cf36:	3301      	adds	r3, #1
 800cf38:	72fb      	strb	r3, [r7, #11]
          break;
 800cf3a:	e007      	b.n	800cf4c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cf3c:	6839      	ldr	r1, [r7, #0]
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 fa28 	bl	800d394 <USBD_CtlError>
          err++;
 800cf44:	7afb      	ldrb	r3, [r7, #11]
 800cf46:	3301      	adds	r3, #1
 800cf48:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cf4a:	bf00      	nop
      }
      break;
 800cf4c:	e037      	b.n	800cfbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	7c1b      	ldrb	r3, [r3, #16]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d109      	bne.n	800cf6a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf5e:	f107 0208 	add.w	r2, r7, #8
 800cf62:	4610      	mov	r0, r2
 800cf64:	4798      	blx	r3
 800cf66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf68:	e029      	b.n	800cfbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cf6a:	6839      	ldr	r1, [r7, #0]
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 fa11 	bl	800d394 <USBD_CtlError>
        err++;
 800cf72:	7afb      	ldrb	r3, [r7, #11]
 800cf74:	3301      	adds	r3, #1
 800cf76:	72fb      	strb	r3, [r7, #11]
      break;
 800cf78:	e021      	b.n	800cfbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	7c1b      	ldrb	r3, [r3, #16]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d10d      	bne.n	800cf9e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf8a:	f107 0208 	add.w	r2, r7, #8
 800cf8e:	4610      	mov	r0, r2
 800cf90:	4798      	blx	r3
 800cf92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	3301      	adds	r3, #1
 800cf98:	2207      	movs	r2, #7
 800cf9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf9c:	e00f      	b.n	800cfbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cf9e:	6839      	ldr	r1, [r7, #0]
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 f9f7 	bl	800d394 <USBD_CtlError>
        err++;
 800cfa6:	7afb      	ldrb	r3, [r7, #11]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	72fb      	strb	r3, [r7, #11]
      break;
 800cfac:	e007      	b.n	800cfbe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cfae:	6839      	ldr	r1, [r7, #0]
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 f9ef 	bl	800d394 <USBD_CtlError>
      err++;
 800cfb6:	7afb      	ldrb	r3, [r7, #11]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	72fb      	strb	r3, [r7, #11]
      break;
 800cfbc:	bf00      	nop
  }

  if (err != 0U)
 800cfbe:	7afb      	ldrb	r3, [r7, #11]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d11e      	bne.n	800d002 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	88db      	ldrh	r3, [r3, #6]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d016      	beq.n	800cffa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cfcc:	893b      	ldrh	r3, [r7, #8]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00e      	beq.n	800cff0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	88da      	ldrh	r2, [r3, #6]
 800cfd6:	893b      	ldrh	r3, [r7, #8]
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	bf28      	it	cs
 800cfdc:	4613      	movcs	r3, r2
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cfe2:	893b      	ldrh	r3, [r7, #8]
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	68f9      	ldr	r1, [r7, #12]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fa44 	bl	800d476 <USBD_CtlSendData>
 800cfee:	e009      	b.n	800d004 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cff0:	6839      	ldr	r1, [r7, #0]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 f9ce 	bl	800d394 <USBD_CtlError>
 800cff8:	e004      	b.n	800d004 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 fa95 	bl	800d52a <USBD_CtlSendStatus>
 800d000:	e000      	b.n	800d004 <USBD_GetDescriptor+0x320>
    return;
 800d002:	bf00      	nop
  }
}
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop

0800d00c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	889b      	ldrh	r3, [r3, #4]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d131      	bne.n	800d082 <USBD_SetAddress+0x76>
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	88db      	ldrh	r3, [r3, #6]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d12d      	bne.n	800d082 <USBD_SetAddress+0x76>
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	885b      	ldrh	r3, [r3, #2]
 800d02a:	2b7f      	cmp	r3, #127	; 0x7f
 800d02c:	d829      	bhi.n	800d082 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	885b      	ldrh	r3, [r3, #2]
 800d032:	b2db      	uxtb	r3, r3
 800d034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d038:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d040:	b2db      	uxtb	r3, r3
 800d042:	2b03      	cmp	r3, #3
 800d044:	d104      	bne.n	800d050 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d046:	6839      	ldr	r1, [r7, #0]
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 f9a3 	bl	800d394 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d04e:	e01d      	b.n	800d08c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	7bfa      	ldrb	r2, [r7, #15]
 800d054:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d058:	7bfb      	ldrb	r3, [r7, #15]
 800d05a:	4619      	mov	r1, r3
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f000 ffbb 	bl	800dfd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 fa61 	bl	800d52a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d068:	7bfb      	ldrb	r3, [r7, #15]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d004      	beq.n	800d078 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2202      	movs	r2, #2
 800d072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d076:	e009      	b.n	800d08c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d080:	e004      	b.n	800d08c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d082:	6839      	ldr	r1, [r7, #0]
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 f985 	bl	800d394 <USBD_CtlError>
  }
}
 800d08a:	bf00      	nop
 800d08c:	bf00      	nop
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	885b      	ldrh	r3, [r3, #2]
 800d0a6:	b2da      	uxtb	r2, r3
 800d0a8:	4b4c      	ldr	r3, [pc, #304]	; (800d1dc <USBD_SetConfig+0x148>)
 800d0aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d0ac:	4b4b      	ldr	r3, [pc, #300]	; (800d1dc <USBD_SetConfig+0x148>)
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d905      	bls.n	800d0c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d0b4:	6839      	ldr	r1, [r7, #0]
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 f96c 	bl	800d394 <USBD_CtlError>
    return USBD_FAIL;
 800d0bc:	2303      	movs	r3, #3
 800d0be:	e088      	b.n	800d1d2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	2b02      	cmp	r3, #2
 800d0ca:	d002      	beq.n	800d0d2 <USBD_SetConfig+0x3e>
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	d025      	beq.n	800d11c <USBD_SetConfig+0x88>
 800d0d0:	e071      	b.n	800d1b6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d0d2:	4b42      	ldr	r3, [pc, #264]	; (800d1dc <USBD_SetConfig+0x148>)
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d01c      	beq.n	800d114 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d0da:	4b40      	ldr	r3, [pc, #256]	; (800d1dc <USBD_SetConfig+0x148>)
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	461a      	mov	r2, r3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0e4:	4b3d      	ldr	r3, [pc, #244]	; (800d1dc <USBD_SetConfig+0x148>)
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f7ff f992 	bl	800c414 <USBD_SetClassConfig>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d0f4:	7bfb      	ldrb	r3, [r7, #15]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d004      	beq.n	800d104 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d0fa:	6839      	ldr	r1, [r7, #0]
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 f949 	bl	800d394 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d102:	e065      	b.n	800d1d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 fa10 	bl	800d52a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2203      	movs	r2, #3
 800d10e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d112:	e05d      	b.n	800d1d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 fa08 	bl	800d52a <USBD_CtlSendStatus>
      break;
 800d11a:	e059      	b.n	800d1d0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d11c:	4b2f      	ldr	r3, [pc, #188]	; (800d1dc <USBD_SetConfig+0x148>)
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d112      	bne.n	800d14a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2202      	movs	r2, #2
 800d128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d12c:	4b2b      	ldr	r3, [pc, #172]	; (800d1dc <USBD_SetConfig+0x148>)
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	461a      	mov	r2, r3
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d136:	4b29      	ldr	r3, [pc, #164]	; (800d1dc <USBD_SetConfig+0x148>)
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	4619      	mov	r1, r3
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f7ff f985 	bl	800c44c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 f9f1 	bl	800d52a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d148:	e042      	b.n	800d1d0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d14a:	4b24      	ldr	r3, [pc, #144]	; (800d1dc <USBD_SetConfig+0x148>)
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	461a      	mov	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	429a      	cmp	r2, r3
 800d156:	d02a      	beq.n	800d1ae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	b2db      	uxtb	r3, r3
 800d15e:	4619      	mov	r1, r3
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f7ff f973 	bl	800c44c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d166:	4b1d      	ldr	r3, [pc, #116]	; (800d1dc <USBD_SetConfig+0x148>)
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	461a      	mov	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d170:	4b1a      	ldr	r3, [pc, #104]	; (800d1dc <USBD_SetConfig+0x148>)
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	4619      	mov	r1, r3
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f7ff f94c 	bl	800c414 <USBD_SetClassConfig>
 800d17c:	4603      	mov	r3, r0
 800d17e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d180:	7bfb      	ldrb	r3, [r7, #15]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00f      	beq.n	800d1a6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d186:	6839      	ldr	r1, [r7, #0]
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f903 	bl	800d394 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	b2db      	uxtb	r3, r3
 800d194:	4619      	mov	r1, r3
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f7ff f958 	bl	800c44c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2202      	movs	r2, #2
 800d1a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d1a4:	e014      	b.n	800d1d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 f9bf 	bl	800d52a <USBD_CtlSendStatus>
      break;
 800d1ac:	e010      	b.n	800d1d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 f9bb 	bl	800d52a <USBD_CtlSendStatus>
      break;
 800d1b4:	e00c      	b.n	800d1d0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d1b6:	6839      	ldr	r1, [r7, #0]
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 f8eb 	bl	800d394 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d1be:	4b07      	ldr	r3, [pc, #28]	; (800d1dc <USBD_SetConfig+0x148>)
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f7ff f941 	bl	800c44c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d1ca:	2303      	movs	r3, #3
 800d1cc:	73fb      	strb	r3, [r7, #15]
      break;
 800d1ce:	bf00      	nop
  }

  return ret;
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	20000b68 	.word	0x20000b68

0800d1e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	88db      	ldrh	r3, [r3, #6]
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	d004      	beq.n	800d1fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d1f2:	6839      	ldr	r1, [r7, #0]
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 f8cd 	bl	800d394 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d1fa:	e023      	b.n	800d244 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d202:	b2db      	uxtb	r3, r3
 800d204:	2b02      	cmp	r3, #2
 800d206:	dc02      	bgt.n	800d20e <USBD_GetConfig+0x2e>
 800d208:	2b00      	cmp	r3, #0
 800d20a:	dc03      	bgt.n	800d214 <USBD_GetConfig+0x34>
 800d20c:	e015      	b.n	800d23a <USBD_GetConfig+0x5a>
 800d20e:	2b03      	cmp	r3, #3
 800d210:	d00b      	beq.n	800d22a <USBD_GetConfig+0x4a>
 800d212:	e012      	b.n	800d23a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	3308      	adds	r3, #8
 800d21e:	2201      	movs	r2, #1
 800d220:	4619      	mov	r1, r3
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 f927 	bl	800d476 <USBD_CtlSendData>
        break;
 800d228:	e00c      	b.n	800d244 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	3304      	adds	r3, #4
 800d22e:	2201      	movs	r2, #1
 800d230:	4619      	mov	r1, r3
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f000 f91f 	bl	800d476 <USBD_CtlSendData>
        break;
 800d238:	e004      	b.n	800d244 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d23a:	6839      	ldr	r1, [r7, #0]
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 f8a9 	bl	800d394 <USBD_CtlError>
        break;
 800d242:	bf00      	nop
}
 800d244:	bf00      	nop
 800d246:	3708      	adds	r7, #8
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	3b01      	subs	r3, #1
 800d260:	2b02      	cmp	r3, #2
 800d262:	d81e      	bhi.n	800d2a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	88db      	ldrh	r3, [r3, #6]
 800d268:	2b02      	cmp	r3, #2
 800d26a:	d004      	beq.n	800d276 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d26c:	6839      	ldr	r1, [r7, #0]
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 f890 	bl	800d394 <USBD_CtlError>
        break;
 800d274:	e01a      	b.n	800d2ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2201      	movs	r2, #1
 800d27a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d282:	2b00      	cmp	r3, #0
 800d284:	d005      	beq.n	800d292 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	f043 0202 	orr.w	r2, r3, #2
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	330c      	adds	r3, #12
 800d296:	2202      	movs	r2, #2
 800d298:	4619      	mov	r1, r3
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 f8eb 	bl	800d476 <USBD_CtlSendData>
      break;
 800d2a0:	e004      	b.n	800d2ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d2a2:	6839      	ldr	r1, [r7, #0]
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 f875 	bl	800d394 <USBD_CtlError>
      break;
 800d2aa:	bf00      	nop
  }
}
 800d2ac:	bf00      	nop
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	885b      	ldrh	r3, [r3, #2]
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d106      	bne.n	800d2d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 f92b 	bl	800d52a <USBD_CtlSendStatus>
  }
}
 800d2d4:	bf00      	nop
 800d2d6:	3708      	adds	r7, #8
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	2b02      	cmp	r3, #2
 800d2f2:	d80b      	bhi.n	800d30c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	885b      	ldrh	r3, [r3, #2]
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d10c      	bne.n	800d316 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2200      	movs	r2, #0
 800d300:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 f910 	bl	800d52a <USBD_CtlSendStatus>
      }
      break;
 800d30a:	e004      	b.n	800d316 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d30c:	6839      	ldr	r1, [r7, #0]
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f840 	bl	800d394 <USBD_CtlError>
      break;
 800d314:	e000      	b.n	800d318 <USBD_ClrFeature+0x3c>
      break;
 800d316:	bf00      	nop
  }
}
 800d318:	bf00      	nop
 800d31a:	3708      	adds	r7, #8
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	781a      	ldrb	r2, [r3, #0]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	3301      	adds	r3, #1
 800d33a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	781a      	ldrb	r2, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	3301      	adds	r3, #1
 800d348:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d34a:	68f8      	ldr	r0, [r7, #12]
 800d34c:	f7ff fa92 	bl	800c874 <SWAPBYTE>
 800d350:	4603      	mov	r3, r0
 800d352:	461a      	mov	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	3301      	adds	r3, #1
 800d35c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	3301      	adds	r3, #1
 800d362:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d364:	68f8      	ldr	r0, [r7, #12]
 800d366:	f7ff fa85 	bl	800c874 <SWAPBYTE>
 800d36a:	4603      	mov	r3, r0
 800d36c:	461a      	mov	r2, r3
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	3301      	adds	r3, #1
 800d376:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	3301      	adds	r3, #1
 800d37c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f7ff fa78 	bl	800c874 <SWAPBYTE>
 800d384:	4603      	mov	r3, r0
 800d386:	461a      	mov	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	80da      	strh	r2, [r3, #6]
}
 800d38c:	bf00      	nop
 800d38e:	3710      	adds	r7, #16
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d39e:	2180      	movs	r1, #128	; 0x80
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 fdaf 	bl	800df04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d3a6:	2100      	movs	r1, #0
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 fdab 	bl	800df04 <USBD_LL_StallEP>
}
 800d3ae:	bf00      	nop
 800d3b0:	3708      	adds	r7, #8
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}

0800d3b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b086      	sub	sp, #24
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	60f8      	str	r0, [r7, #12]
 800d3be:	60b9      	str	r1, [r7, #8]
 800d3c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d036      	beq.n	800d43a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d3d0:	6938      	ldr	r0, [r7, #16]
 800d3d2:	f000 f836 	bl	800d442 <USBD_GetLen>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	3301      	adds	r3, #1
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	005b      	lsls	r3, r3, #1
 800d3de:	b29a      	uxth	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d3e4:	7dfb      	ldrb	r3, [r7, #23]
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	687a      	ldr	r2, [r7, #4]
 800d3ec:	7812      	ldrb	r2, [r2, #0]
 800d3ee:	701a      	strb	r2, [r3, #0]
  idx++;
 800d3f0:	7dfb      	ldrb	r3, [r7, #23]
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d3f6:	7dfb      	ldrb	r3, [r7, #23]
 800d3f8:	68ba      	ldr	r2, [r7, #8]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	2203      	movs	r2, #3
 800d3fe:	701a      	strb	r2, [r3, #0]
  idx++;
 800d400:	7dfb      	ldrb	r3, [r7, #23]
 800d402:	3301      	adds	r3, #1
 800d404:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d406:	e013      	b.n	800d430 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d408:	7dfb      	ldrb	r3, [r7, #23]
 800d40a:	68ba      	ldr	r2, [r7, #8]
 800d40c:	4413      	add	r3, r2
 800d40e:	693a      	ldr	r2, [r7, #16]
 800d410:	7812      	ldrb	r2, [r2, #0]
 800d412:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	3301      	adds	r3, #1
 800d418:	613b      	str	r3, [r7, #16]
    idx++;
 800d41a:	7dfb      	ldrb	r3, [r7, #23]
 800d41c:	3301      	adds	r3, #1
 800d41e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d420:	7dfb      	ldrb	r3, [r7, #23]
 800d422:	68ba      	ldr	r2, [r7, #8]
 800d424:	4413      	add	r3, r2
 800d426:	2200      	movs	r2, #0
 800d428:	701a      	strb	r2, [r3, #0]
    idx++;
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
 800d42c:	3301      	adds	r3, #1
 800d42e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d1e7      	bne.n	800d408 <USBD_GetString+0x52>
 800d438:	e000      	b.n	800d43c <USBD_GetString+0x86>
    return;
 800d43a:	bf00      	nop
  }
}
 800d43c:	3718      	adds	r7, #24
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d442:	b480      	push	{r7}
 800d444:	b085      	sub	sp, #20
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d44a:	2300      	movs	r3, #0
 800d44c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d452:	e005      	b.n	800d460 <USBD_GetLen+0x1e>
  {
    len++;
 800d454:	7bfb      	ldrb	r3, [r7, #15]
 800d456:	3301      	adds	r3, #1
 800d458:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	3301      	adds	r3, #1
 800d45e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d1f5      	bne.n	800d454 <USBD_GetLen+0x12>
  }

  return len;
 800d468:	7bfb      	ldrb	r3, [r7, #15]
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3714      	adds	r7, #20
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr

0800d476 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d476:	b580      	push	{r7, lr}
 800d478:	b084      	sub	sp, #16
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	60f8      	str	r0, [r7, #12]
 800d47e:	60b9      	str	r1, [r7, #8]
 800d480:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2202      	movs	r2, #2
 800d486:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	68ba      	ldr	r2, [r7, #8]
 800d49a:	2100      	movs	r1, #0
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f000 fdba 	bl	800e016 <USBD_LL_Transmit>

  return USBD_OK;
 800d4a2:	2300      	movs	r3, #0
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	68ba      	ldr	r2, [r7, #8]
 800d4bc:	2100      	movs	r1, #0
 800d4be:	68f8      	ldr	r0, [r7, #12]
 800d4c0:	f000 fda9 	bl	800e016 <USBD_LL_Transmit>

  return USBD_OK;
 800d4c4:	2300      	movs	r3, #0
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3710      	adds	r7, #16
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b084      	sub	sp, #16
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	60f8      	str	r0, [r7, #12]
 800d4d6:	60b9      	str	r1, [r7, #8]
 800d4d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2203      	movs	r2, #3
 800d4de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	68ba      	ldr	r2, [r7, #8]
 800d4f6:	2100      	movs	r1, #0
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f000 fdad 	bl	800e058 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4fe:	2300      	movs	r3, #0
}
 800d500:	4618      	mov	r0, r3
 800d502:	3710      	adds	r7, #16
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	2100      	movs	r1, #0
 800d51a:	68f8      	ldr	r0, [r7, #12]
 800d51c:	f000 fd9c 	bl	800e058 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d520:	2300      	movs	r3, #0
}
 800d522:	4618      	mov	r0, r3
 800d524:	3710      	adds	r7, #16
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b082      	sub	sp, #8
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2204      	movs	r2, #4
 800d536:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d53a:	2300      	movs	r3, #0
 800d53c:	2200      	movs	r2, #0
 800d53e:	2100      	movs	r1, #0
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 fd68 	bl	800e016 <USBD_LL_Transmit>

  return USBD_OK;
 800d546:	2300      	movs	r3, #0
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3708      	adds	r7, #8
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2205      	movs	r2, #5
 800d55c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d560:	2300      	movs	r3, #0
 800d562:	2200      	movs	r2, #0
 800d564:	2100      	movs	r1, #0
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 fd76 	bl	800e058 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3708      	adds	r7, #8
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
	...

0800d578 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d57c:	2200      	movs	r2, #0
 800d57e:	4912      	ldr	r1, [pc, #72]	; (800d5c8 <MX_USB_Device_Init+0x50>)
 800d580:	4812      	ldr	r0, [pc, #72]	; (800d5cc <MX_USB_Device_Init+0x54>)
 800d582:	f7fe fed9 	bl	800c338 <USBD_Init>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d001      	beq.n	800d590 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d58c:	f7f3 fe22 	bl	80011d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d590:	490f      	ldr	r1, [pc, #60]	; (800d5d0 <MX_USB_Device_Init+0x58>)
 800d592:	480e      	ldr	r0, [pc, #56]	; (800d5cc <MX_USB_Device_Init+0x54>)
 800d594:	f7fe ff00 	bl	800c398 <USBD_RegisterClass>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d001      	beq.n	800d5a2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d59e:	f7f3 fe19 	bl	80011d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d5a2:	490c      	ldr	r1, [pc, #48]	; (800d5d4 <MX_USB_Device_Init+0x5c>)
 800d5a4:	4809      	ldr	r0, [pc, #36]	; (800d5cc <MX_USB_Device_Init+0x54>)
 800d5a6:	f7fe fe51 	bl	800c24c <USBD_CDC_RegisterInterface>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d001      	beq.n	800d5b4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d5b0:	f7f3 fe10 	bl	80011d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d5b4:	4805      	ldr	r0, [pc, #20]	; (800d5cc <MX_USB_Device_Init+0x54>)
 800d5b6:	f7fe ff16 	bl	800c3e6 <USBD_Start>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d001      	beq.n	800d5c4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d5c0:	f7f3 fe08 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d5c4:	bf00      	nop
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	20000148 	.word	0x20000148
 800d5cc:	20000b6c 	.word	0x20000b6c
 800d5d0:	20000028 	.word	0x20000028
 800d5d4:	20000134 	.word	0x20000134

0800d5d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d5dc:	2200      	movs	r2, #0
 800d5de:	4905      	ldr	r1, [pc, #20]	; (800d5f4 <CDC_Init_FS+0x1c>)
 800d5e0:	4805      	ldr	r0, [pc, #20]	; (800d5f8 <CDC_Init_FS+0x20>)
 800d5e2:	f7fe fe48 	bl	800c276 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d5e6:	4905      	ldr	r1, [pc, #20]	; (800d5fc <CDC_Init_FS+0x24>)
 800d5e8:	4803      	ldr	r0, [pc, #12]	; (800d5f8 <CDC_Init_FS+0x20>)
 800d5ea:	f7fe fe62 	bl	800c2b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d5ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	20002668 	.word	0x20002668
 800d5f8:	20000b6c 	.word	0x20000b6c
 800d5fc:	20001e68 	.word	0x20001e68

0800d600 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d600:	b480      	push	{r7}
 800d602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d604:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d606:	4618      	mov	r0, r3
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d610:	b480      	push	{r7}
 800d612:	b085      	sub	sp, #20
 800d614:	af00      	add	r7, sp, #0
 800d616:	4603      	mov	r3, r0
 800d618:	6039      	str	r1, [r7, #0]
 800d61a:	71fb      	strb	r3, [r7, #7]
 800d61c:	4613      	mov	r3, r2
 800d61e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	60fb      	str	r3, [r7, #12]

  switch(cmd)
 800d624:	79fb      	ldrb	r3, [r7, #7]
 800d626:	2b23      	cmp	r3, #35	; 0x23
 800d628:	f200 80af 	bhi.w	800d78a <CDC_Control_FS+0x17a>
 800d62c:	a201      	add	r2, pc, #4	; (adr r2, 800d634 <CDC_Control_FS+0x24>)
 800d62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d632:	bf00      	nop
 800d634:	0800d78b 	.word	0x0800d78b
 800d638:	0800d78b 	.word	0x0800d78b
 800d63c:	0800d78b 	.word	0x0800d78b
 800d640:	0800d78b 	.word	0x0800d78b
 800d644:	0800d78b 	.word	0x0800d78b
 800d648:	0800d78b 	.word	0x0800d78b
 800d64c:	0800d78b 	.word	0x0800d78b
 800d650:	0800d78b 	.word	0x0800d78b
 800d654:	0800d78b 	.word	0x0800d78b
 800d658:	0800d78b 	.word	0x0800d78b
 800d65c:	0800d78b 	.word	0x0800d78b
 800d660:	0800d78b 	.word	0x0800d78b
 800d664:	0800d78b 	.word	0x0800d78b
 800d668:	0800d78b 	.word	0x0800d78b
 800d66c:	0800d78b 	.word	0x0800d78b
 800d670:	0800d78b 	.word	0x0800d78b
 800d674:	0800d78b 	.word	0x0800d78b
 800d678:	0800d78b 	.word	0x0800d78b
 800d67c:	0800d78b 	.word	0x0800d78b
 800d680:	0800d78b 	.word	0x0800d78b
 800d684:	0800d78b 	.word	0x0800d78b
 800d688:	0800d78b 	.word	0x0800d78b
 800d68c:	0800d78b 	.word	0x0800d78b
 800d690:	0800d78b 	.word	0x0800d78b
 800d694:	0800d78b 	.word	0x0800d78b
 800d698:	0800d78b 	.word	0x0800d78b
 800d69c:	0800d78b 	.word	0x0800d78b
 800d6a0:	0800d78b 	.word	0x0800d78b
 800d6a4:	0800d78b 	.word	0x0800d78b
 800d6a8:	0800d78b 	.word	0x0800d78b
 800d6ac:	0800d78b 	.word	0x0800d78b
 800d6b0:	0800d78b 	.word	0x0800d78b
 800d6b4:	0800d6c5 	.word	0x0800d6c5
 800d6b8:	0800d71f 	.word	0x0800d71f
 800d6bc:	0800d773 	.word	0x0800d773
 800d6c0:	0800d78b 	.word	0x0800d78b
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	461a      	mov	r2, r3
 800d6ca:	4b34      	ldr	r3, [pc, #208]	; (800d79c <CDC_Control_FS+0x18c>)
 800d6cc:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 800d6ce:	4b33      	ldr	r3, [pc, #204]	; (800d79c <CDC_Control_FS+0x18c>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	683a      	ldr	r2, [r7, #0]
 800d6d4:	3201      	adds	r2, #1
 800d6d6:	7812      	ldrb	r2, [r2, #0]
 800d6d8:	0212      	lsls	r2, r2, #8
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	4a2f      	ldr	r2, [pc, #188]	; (800d79c <CDC_Control_FS+0x18c>)
 800d6de:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 800d6e0:	4b2e      	ldr	r3, [pc, #184]	; (800d79c <CDC_Control_FS+0x18c>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	683a      	ldr	r2, [r7, #0]
 800d6e6:	3202      	adds	r2, #2
 800d6e8:	7812      	ldrb	r2, [r2, #0]
 800d6ea:	0412      	lsls	r2, r2, #16
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	4a2b      	ldr	r2, [pc, #172]	; (800d79c <CDC_Control_FS+0x18c>)
 800d6f0:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 800d6f2:	4b2a      	ldr	r3, [pc, #168]	; (800d79c <CDC_Control_FS+0x18c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	683a      	ldr	r2, [r7, #0]
 800d6f8:	3203      	adds	r2, #3
 800d6fa:	7812      	ldrb	r2, [r2, #0]
 800d6fc:	0612      	lsls	r2, r2, #24
 800d6fe:	4313      	orrs	r3, r2
 800d700:	4a26      	ldr	r2, [pc, #152]	; (800d79c <CDC_Control_FS+0x18c>)
 800d702:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	791a      	ldrb	r2, [r3, #4]
 800d708:	4b24      	ldr	r3, [pc, #144]	; (800d79c <CDC_Control_FS+0x18c>)
 800d70a:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	795a      	ldrb	r2, [r3, #5]
 800d710:	4b22      	ldr	r3, [pc, #136]	; (800d79c <CDC_Control_FS+0x18c>)
 800d712:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	799a      	ldrb	r2, [r3, #6]
 800d718:	4b20      	ldr	r3, [pc, #128]	; (800d79c <CDC_Control_FS+0x18c>)
 800d71a:	719a      	strb	r2, [r3, #6]

    break;
 800d71c:	e036      	b.n	800d78c <CDC_Control_FS+0x17c>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800d71e:	4b1f      	ldr	r3, [pc, #124]	; (800d79c <CDC_Control_FS+0x18c>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	b2da      	uxtb	r2, r3
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 800d728:	4b1c      	ldr	r3, [pc, #112]	; (800d79c <CDC_Control_FS+0x18c>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	0a1a      	lsrs	r2, r3, #8
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	3301      	adds	r3, #1
 800d732:	b2d2      	uxtb	r2, r2
 800d734:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 800d736:	4b19      	ldr	r3, [pc, #100]	; (800d79c <CDC_Control_FS+0x18c>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	0c1a      	lsrs	r2, r3, #16
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	3302      	adds	r3, #2
 800d740:	b2d2      	uxtb	r2, r2
 800d742:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 800d744:	4b15      	ldr	r3, [pc, #84]	; (800d79c <CDC_Control_FS+0x18c>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	0e1a      	lsrs	r2, r3, #24
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	3303      	adds	r3, #3
 800d74e:	b2d2      	uxtb	r2, r2
 800d750:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	3304      	adds	r3, #4
 800d756:	4a11      	ldr	r2, [pc, #68]	; (800d79c <CDC_Control_FS+0x18c>)
 800d758:	7912      	ldrb	r2, [r2, #4]
 800d75a:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	3305      	adds	r3, #5
 800d760:	4a0e      	ldr	r2, [pc, #56]	; (800d79c <CDC_Control_FS+0x18c>)
 800d762:	7952      	ldrb	r2, [r2, #5]
 800d764:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	3306      	adds	r3, #6
 800d76a:	4a0c      	ldr	r2, [pc, #48]	; (800d79c <CDC_Control_FS+0x18c>)
 800d76c:	7992      	ldrb	r2, [r2, #6]
 800d76e:	701a      	strb	r2, [r3, #0]

    break;
 800d770:	e00c      	b.n	800d78c <CDC_Control_FS+0x17c>

    case CDC_SET_CONTROL_LINE_STATE:
      is_opened = req->wValue & 0x01;   // 0 bit: DTR, 1 bit: RTS
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	885b      	ldrh	r3, [r3, #2]
 800d776:	f003 0301 	and.w	r3, r3, #1
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	bf14      	ite	ne
 800d77e:	2301      	movne	r3, #1
 800d780:	2300      	moveq	r3, #0
 800d782:	b2da      	uxtb	r2, r3
 800d784:	4b06      	ldr	r3, [pc, #24]	; (800d7a0 <CDC_Control_FS+0x190>)
 800d786:	701a      	strb	r2, [r3, #0]

    break;
 800d788:	e000      	b.n	800d78c <CDC_Control_FS+0x17c>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d78a:	bf00      	nop
  }

  return (USBD_OK);
 800d78c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3714      	adds	r7, #20
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr
 800d79a:	bf00      	nop
 800d79c:	2000012c 	.word	0x2000012c
 800d7a0:	20001e64 	.word	0x20001e64

0800d7a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d7a4:	b590      	push	{r4, r7, lr}
 800d7a6:	b085      	sub	sp, #20
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  qbufferWrite(&q_rx, Buf, *Len);
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	6879      	ldr	r1, [r7, #4]
 800d7b6:	480f      	ldr	r0, [pc, #60]	; (800d7f4 <CDC_Receive_FS+0x50>)
 800d7b8:	f7f3 fe95 	bl	80014e6 <qbufferWrite>


  uint32_t buf_len;

  buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 800d7bc:	4b0d      	ldr	r3, [pc, #52]	; (800d7f4 <CDC_Receive_FS+0x50>)
 800d7be:	689c      	ldr	r4, [r3, #8]
 800d7c0:	480c      	ldr	r0, [pc, #48]	; (800d7f4 <CDC_Receive_FS+0x50>)
 800d7c2:	f7f3 ff44 	bl	800164e <qbufferAvailable>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	1ae3      	subs	r3, r4, r3
 800d7ca:	3b01      	subs	r3, #1
 800d7cc:	60fb      	str	r3, [r7, #12]

  if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2b3f      	cmp	r3, #63	; 0x3f
 800d7d2:	d907      	bls.n	800d7e4 <CDC_Receive_FS+0x40>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d7d4:	6879      	ldr	r1, [r7, #4]
 800d7d6:	4808      	ldr	r0, [pc, #32]	; (800d7f8 <CDC_Receive_FS+0x54>)
 800d7d8:	f7fe fd6b 	bl	800c2b2 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d7dc:	4806      	ldr	r0, [pc, #24]	; (800d7f8 <CDC_Receive_FS+0x54>)
 800d7de:	f7fe fd81 	bl	800c2e4 <USBD_CDC_ReceivePacket>
 800d7e2:	e002      	b.n	800d7ea <CDC_Receive_FS+0x46>
  }
  else
  {
    is_rx_full = true;
 800d7e4:	4b05      	ldr	r3, [pc, #20]	; (800d7fc <CDC_Receive_FS+0x58>)
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	701a      	strb	r2, [r3, #0]
  }

    return (USBD_OK);
 800d7ea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3714      	adds	r7, #20
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd90      	pop	{r4, r7, pc}
 800d7f4:	20000e3c 	.word	0x20000e3c
 800d7f8:	20000b6c 	.word	0x20000b6c
 800d7fc:	20001e65 	.word	0x20001e65

0800d800 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d800:	b480      	push	{r7}
 800d802:	b087      	sub	sp, #28
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	4613      	mov	r3, r2
 800d80c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d80e:	2300      	movs	r3, #0
 800d810:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d812:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d816:	4618      	mov	r0, r3
 800d818:	371c      	adds	r7, #28
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
	...

0800d824 <cdcIfInit>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool cdcIfInit(void)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	af00      	add	r7, sp, #0
  is_opened = false;
 800d828:	4b08      	ldr	r3, [pc, #32]	; (800d84c <cdcIfInit+0x28>)
 800d82a:	2200      	movs	r2, #0
 800d82c:	701a      	strb	r2, [r3, #0]
  qbufferCreate(&q_rx, q_rx_buf, 2048);
 800d82e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d832:	4907      	ldr	r1, [pc, #28]	; (800d850 <cdcIfInit+0x2c>)
 800d834:	4807      	ldr	r0, [pc, #28]	; (800d854 <cdcIfInit+0x30>)
 800d836:	f7f3 fe38 	bl	80014aa <qbufferCreate>
  qbufferCreate(&q_tx, q_tx_buf, 2048);
 800d83a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d83e:	4906      	ldr	r1, [pc, #24]	; (800d858 <cdcIfInit+0x34>)
 800d840:	4806      	ldr	r0, [pc, #24]	; (800d85c <cdcIfInit+0x38>)
 800d842:	f7f3 fe32 	bl	80014aa <qbufferCreate>

  return true;
 800d846:	2301      	movs	r3, #1
}
 800d848:	4618      	mov	r0, r3
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	20001e64 	.word	0x20001e64
 800d850:	20000e64 	.word	0x20000e64
 800d854:	20000e3c 	.word	0x20000e3c
 800d858:	20001664 	.word	0x20001664
 800d85c:	20000e50 	.word	0x20000e50

0800d860 <cdcIfAvailable>:

uint32_t cdcIfAvailable(void)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
  return qbufferAvailable(&q_rx);
 800d864:	4802      	ldr	r0, [pc, #8]	; (800d870 <cdcIfAvailable+0x10>)
 800d866:	f7f3 fef2 	bl	800164e <qbufferAvailable>
 800d86a:	4603      	mov	r3, r0
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	20000e3c 	.word	0x20000e3c

0800d874 <cdcIfRead>:

uint8_t cdcIfRead(void)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 800d87a:	2300      	movs	r3, #0
 800d87c:	71fb      	strb	r3, [r7, #7]

  qbufferRead(&q_rx, &ret, 1);
 800d87e:	1dfb      	adds	r3, r7, #7
 800d880:	2201      	movs	r2, #1
 800d882:	4619      	mov	r1, r3
 800d884:	4803      	ldr	r0, [pc, #12]	; (800d894 <cdcIfRead+0x20>)
 800d886:	f7f3 fe8a 	bl	800159e <qbufferRead>

  return ret;
 800d88a:	79fb      	ldrb	r3, [r7, #7]
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3708      	adds	r7, #8
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	20000e3c 	.word	0x20000e3c

0800d898 <cdcIfWrite>:

uint32_t cdcIfWrite(uint8_t *p_data, uint32_t length)
{
 800d898:	b590      	push	{r4, r7, lr}
 800d89a:	b087      	sub	sp, #28
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
  uint32_t tx_len;
  uint32_t buf_len;
  uint32_t sent_len;


  if (cdcIfIsConnected() != true) return 0;
 800d8a2:	f000 f84f 	bl	800d944 <cdcIfIsConnected>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	f083 0301 	eor.w	r3, r3, #1
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d001      	beq.n	800d8b6 <cdcIfWrite+0x1e>
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	e03f      	b.n	800d936 <cdcIfWrite+0x9e>


  sent_len = 0;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	613b      	str	r3, [r7, #16]

  pre_time = HAL_GetTick();
 800d8ba:	f7f6 faaf 	bl	8003e1c <HAL_GetTick>
 800d8be:	60f8      	str	r0, [r7, #12]
  while(sent_len < length)
 800d8c0:	e030      	b.n	800d924 <cdcIfWrite+0x8c>
  {
    buf_len = (q_tx.len - qbufferAvailable(&q_tx)) - 1;
 800d8c2:	4b1f      	ldr	r3, [pc, #124]	; (800d940 <cdcIfWrite+0xa8>)
 800d8c4:	689c      	ldr	r4, [r3, #8]
 800d8c6:	481e      	ldr	r0, [pc, #120]	; (800d940 <cdcIfWrite+0xa8>)
 800d8c8:	f7f3 fec1 	bl	800164e <qbufferAvailable>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	1ae3      	subs	r3, r4, r3
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	60bb      	str	r3, [r7, #8]
    tx_len = length;
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	617b      	str	r3, [r7, #20]

    if (tx_len > buf_len)
 800d8d8:	697a      	ldr	r2, [r7, #20]
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d901      	bls.n	800d8e4 <cdcIfWrite+0x4c>
    {
      tx_len = buf_len;
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	617b      	str	r3, [r7, #20]
    }

    if (tx_len > 0)
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d00c      	beq.n	800d904 <cdcIfWrite+0x6c>
    {
      qbufferWrite(&q_tx, p_data, tx_len);
 800d8ea:	697a      	ldr	r2, [r7, #20]
 800d8ec:	6879      	ldr	r1, [r7, #4]
 800d8ee:	4814      	ldr	r0, [pc, #80]	; (800d940 <cdcIfWrite+0xa8>)
 800d8f0:	f7f3 fdf9 	bl	80014e6 <qbufferWrite>
      p_data += tx_len;
 800d8f4:	687a      	ldr	r2, [r7, #4]
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	607b      	str	r3, [r7, #4]
      sent_len += tx_len;
 800d8fc:	693a      	ldr	r2, [r7, #16]
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	4413      	add	r3, r2
 800d902:	613b      	str	r3, [r7, #16]
    }

    if (cdcIfIsConnected() != true)
 800d904:	f000 f81e 	bl	800d944 <cdcIfIsConnected>
 800d908:	4603      	mov	r3, r0
 800d90a:	f083 0301 	eor.w	r3, r3, #1
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	2b00      	cmp	r3, #0
 800d912:	d10c      	bne.n	800d92e <cdcIfWrite+0x96>
    {
      break;
    }

    if (millis()-pre_time >= 100)
 800d914:	f7f3 fbfd 	bl	8001112 <millis>
 800d918:	4603      	mov	r3, r0
 800d91a:	461a      	mov	r2, r3
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	1ad3      	subs	r3, r2, r3
 800d920:	2b63      	cmp	r3, #99	; 0x63
 800d922:	d806      	bhi.n	800d932 <cdcIfWrite+0x9a>
  while(sent_len < length)
 800d924:	693a      	ldr	r2, [r7, #16]
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	429a      	cmp	r2, r3
 800d92a:	d3ca      	bcc.n	800d8c2 <cdcIfWrite+0x2a>
 800d92c:	e002      	b.n	800d934 <cdcIfWrite+0x9c>
      break;
 800d92e:	bf00      	nop
 800d930:	e000      	b.n	800d934 <cdcIfWrite+0x9c>
    {
      break;
 800d932:	bf00      	nop
    }
  }

  return sent_len;
 800d934:	693b      	ldr	r3, [r7, #16]
}
 800d936:	4618      	mov	r0, r3
 800d938:	371c      	adds	r7, #28
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd90      	pop	{r4, r7, pc}
 800d93e:	bf00      	nop
 800d940:	20000e50 	.word	0x20000e50

0800d944 <cdcIfIsConnected>:
{
  return LineCoding.bitrate;
}

bool cdcIfIsConnected(void)
{
 800d944:	b480      	push	{r7}
 800d946:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.pClassData == NULL)
 800d948:	4b11      	ldr	r3, [pc, #68]	; (800d990 <cdcIfIsConnected+0x4c>)
 800d94a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d101      	bne.n	800d956 <cdcIfIsConnected+0x12>
  {
    return false;
 800d952:	2300      	movs	r3, #0
 800d954:	e017      	b.n	800d986 <cdcIfIsConnected+0x42>
  }
  if (is_opened == false)
 800d956:	4b0f      	ldr	r3, [pc, #60]	; (800d994 <cdcIfIsConnected+0x50>)
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	f083 0301 	eor.w	r3, r3, #1
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	2b00      	cmp	r3, #0
 800d962:	d001      	beq.n	800d968 <cdcIfIsConnected+0x24>
  {
    return false;
 800d964:	2300      	movs	r3, #0
 800d966:	e00e      	b.n	800d986 <cdcIfIsConnected+0x42>
  }
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 800d968:	4b09      	ldr	r3, [pc, #36]	; (800d990 <cdcIfIsConnected+0x4c>)
 800d96a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	2b03      	cmp	r3, #3
 800d972:	d001      	beq.n	800d978 <cdcIfIsConnected+0x34>
  {
    return false;
 800d974:	2300      	movs	r3, #0
 800d976:	e006      	b.n	800d986 <cdcIfIsConnected+0x42>
  }
  if (hUsbDeviceFS.dev_config == 0)
 800d978:	4b05      	ldr	r3, [pc, #20]	; (800d990 <cdcIfIsConnected+0x4c>)
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d101      	bne.n	800d984 <cdcIfIsConnected+0x40>
  {
    return false;
 800d980:	2300      	movs	r3, #0
 800d982:	e000      	b.n	800d986 <cdcIfIsConnected+0x42>
  }

  return true;
 800d984:	2301      	movs	r3, #1
}
 800d986:	4618      	mov	r0, r3
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr
 800d990:	20000b6c 	.word	0x20000b6c
 800d994:	20001e64 	.word	0x20001e64

0800d998 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d998:	b480      	push	{r7}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	4603      	mov	r3, r0
 800d9a0:	6039      	str	r1, [r7, #0]
 800d9a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	2212      	movs	r2, #18
 800d9a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d9aa:	4b03      	ldr	r3, [pc, #12]	; (800d9b8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr
 800d9b8:	20000168 	.word	0x20000168

0800d9bc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b083      	sub	sp, #12
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	6039      	str	r1, [r7, #0]
 800d9c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	2204      	movs	r2, #4
 800d9cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d9ce:	4b03      	ldr	r3, [pc, #12]	; (800d9dc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr
 800d9dc:	2000017c 	.word	0x2000017c

0800d9e0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	6039      	str	r1, [r7, #0]
 800d9ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d9ec:	79fb      	ldrb	r3, [r7, #7]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d105      	bne.n	800d9fe <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d9f2:	683a      	ldr	r2, [r7, #0]
 800d9f4:	4907      	ldr	r1, [pc, #28]	; (800da14 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d9f6:	4808      	ldr	r0, [pc, #32]	; (800da18 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d9f8:	f7ff fcdd 	bl	800d3b6 <USBD_GetString>
 800d9fc:	e004      	b.n	800da08 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d9fe:	683a      	ldr	r2, [r7, #0]
 800da00:	4904      	ldr	r1, [pc, #16]	; (800da14 <USBD_CDC_ProductStrDescriptor+0x34>)
 800da02:	4805      	ldr	r0, [pc, #20]	; (800da18 <USBD_CDC_ProductStrDescriptor+0x38>)
 800da04:	f7ff fcd7 	bl	800d3b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da08:	4b02      	ldr	r3, [pc, #8]	; (800da14 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	20002e68 	.word	0x20002e68
 800da18:	08011774 	.word	0x08011774

0800da1c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	4603      	mov	r3, r0
 800da24:	6039      	str	r1, [r7, #0]
 800da26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800da28:	683a      	ldr	r2, [r7, #0]
 800da2a:	4904      	ldr	r1, [pc, #16]	; (800da3c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800da2c:	4804      	ldr	r0, [pc, #16]	; (800da40 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800da2e:	f7ff fcc2 	bl	800d3b6 <USBD_GetString>
  return USBD_StrDesc;
 800da32:	4b02      	ldr	r3, [pc, #8]	; (800da3c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800da34:	4618      	mov	r0, r3
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	20002e68 	.word	0x20002e68
 800da40:	0801178c 	.word	0x0801178c

0800da44 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	4603      	mov	r3, r0
 800da4c:	6039      	str	r1, [r7, #0]
 800da4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	221a      	movs	r2, #26
 800da54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800da56:	f000 f843 	bl	800dae0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800da5a:	4b02      	ldr	r3, [pc, #8]	; (800da64 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3708      	adds	r7, #8
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	20000180 	.word	0x20000180

0800da68 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	4603      	mov	r3, r0
 800da70:	6039      	str	r1, [r7, #0]
 800da72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800da74:	79fb      	ldrb	r3, [r7, #7]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d105      	bne.n	800da86 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800da7a:	683a      	ldr	r2, [r7, #0]
 800da7c:	4907      	ldr	r1, [pc, #28]	; (800da9c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800da7e:	4808      	ldr	r0, [pc, #32]	; (800daa0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800da80:	f7ff fc99 	bl	800d3b6 <USBD_GetString>
 800da84:	e004      	b.n	800da90 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800da86:	683a      	ldr	r2, [r7, #0]
 800da88:	4904      	ldr	r1, [pc, #16]	; (800da9c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800da8a:	4805      	ldr	r0, [pc, #20]	; (800daa0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800da8c:	f7ff fc93 	bl	800d3b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da90:	4b02      	ldr	r3, [pc, #8]	; (800da9c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800da92:	4618      	mov	r0, r3
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	20002e68 	.word	0x20002e68
 800daa0:	080117a0 	.word	0x080117a0

0800daa4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	4603      	mov	r3, r0
 800daac:	6039      	str	r1, [r7, #0]
 800daae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dab0:	79fb      	ldrb	r3, [r7, #7]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d105      	bne.n	800dac2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dab6:	683a      	ldr	r2, [r7, #0]
 800dab8:	4907      	ldr	r1, [pc, #28]	; (800dad8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800daba:	4808      	ldr	r0, [pc, #32]	; (800dadc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dabc:	f7ff fc7b 	bl	800d3b6 <USBD_GetString>
 800dac0:	e004      	b.n	800dacc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dac2:	683a      	ldr	r2, [r7, #0]
 800dac4:	4904      	ldr	r1, [pc, #16]	; (800dad8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dac6:	4805      	ldr	r0, [pc, #20]	; (800dadc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dac8:	f7ff fc75 	bl	800d3b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dacc:	4b02      	ldr	r3, [pc, #8]	; (800dad8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3708      	adds	r7, #8
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	20002e68 	.word	0x20002e68
 800dadc:	080117ac 	.word	0x080117ac

0800dae0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b084      	sub	sp, #16
 800dae4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dae6:	4b0f      	ldr	r3, [pc, #60]	; (800db24 <Get_SerialNum+0x44>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800daec:	4b0e      	ldr	r3, [pc, #56]	; (800db28 <Get_SerialNum+0x48>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800daf2:	4b0e      	ldr	r3, [pc, #56]	; (800db2c <Get_SerialNum+0x4c>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	4413      	add	r3, r2
 800dafe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d009      	beq.n	800db1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800db06:	2208      	movs	r2, #8
 800db08:	4909      	ldr	r1, [pc, #36]	; (800db30 <Get_SerialNum+0x50>)
 800db0a:	68f8      	ldr	r0, [r7, #12]
 800db0c:	f000 f814 	bl	800db38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800db10:	2204      	movs	r2, #4
 800db12:	4908      	ldr	r1, [pc, #32]	; (800db34 <Get_SerialNum+0x54>)
 800db14:	68b8      	ldr	r0, [r7, #8]
 800db16:	f000 f80f 	bl	800db38 <IntToUnicode>
  }
}
 800db1a:	bf00      	nop
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	1fff7590 	.word	0x1fff7590
 800db28:	1fff7594 	.word	0x1fff7594
 800db2c:	1fff7598 	.word	0x1fff7598
 800db30:	20000182 	.word	0x20000182
 800db34:	20000192 	.word	0x20000192

0800db38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800db38:	b480      	push	{r7}
 800db3a:	b087      	sub	sp, #28
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	4613      	mov	r3, r2
 800db44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800db46:	2300      	movs	r3, #0
 800db48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800db4a:	2300      	movs	r3, #0
 800db4c:	75fb      	strb	r3, [r7, #23]
 800db4e:	e027      	b.n	800dba0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	0f1b      	lsrs	r3, r3, #28
 800db54:	2b09      	cmp	r3, #9
 800db56:	d80b      	bhi.n	800db70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	0f1b      	lsrs	r3, r3, #28
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	7dfb      	ldrb	r3, [r7, #23]
 800db60:	005b      	lsls	r3, r3, #1
 800db62:	4619      	mov	r1, r3
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	440b      	add	r3, r1
 800db68:	3230      	adds	r2, #48	; 0x30
 800db6a:	b2d2      	uxtb	r2, r2
 800db6c:	701a      	strb	r2, [r3, #0]
 800db6e:	e00a      	b.n	800db86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	0f1b      	lsrs	r3, r3, #28
 800db74:	b2da      	uxtb	r2, r3
 800db76:	7dfb      	ldrb	r3, [r7, #23]
 800db78:	005b      	lsls	r3, r3, #1
 800db7a:	4619      	mov	r1, r3
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	440b      	add	r3, r1
 800db80:	3237      	adds	r2, #55	; 0x37
 800db82:	b2d2      	uxtb	r2, r2
 800db84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	011b      	lsls	r3, r3, #4
 800db8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800db8c:	7dfb      	ldrb	r3, [r7, #23]
 800db8e:	005b      	lsls	r3, r3, #1
 800db90:	3301      	adds	r3, #1
 800db92:	68ba      	ldr	r2, [r7, #8]
 800db94:	4413      	add	r3, r2
 800db96:	2200      	movs	r2, #0
 800db98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800db9a:	7dfb      	ldrb	r3, [r7, #23]
 800db9c:	3301      	adds	r3, #1
 800db9e:	75fb      	strb	r3, [r7, #23]
 800dba0:	7dfa      	ldrb	r2, [r7, #23]
 800dba2:	79fb      	ldrb	r3, [r7, #7]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d3d3      	bcc.n	800db50 <IntToUnicode+0x18>
  }
}
 800dba8:	bf00      	nop
 800dbaa:	bf00      	nop
 800dbac:	371c      	adds	r7, #28
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr
	...

0800dbb8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b098      	sub	sp, #96	; 0x60
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800dbc0:	f107 030c 	add.w	r3, r7, #12
 800dbc4:	2254      	movs	r2, #84	; 0x54
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f001 fb31 	bl	800f230 <memset>
  if(pcdHandle->Instance==USB)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a15      	ldr	r2, [pc, #84]	; (800dc28 <HAL_PCD_MspInit+0x70>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d123      	bne.n	800dc20 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800dbd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dbdc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800dbde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dbe2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800dbe4:	f107 030c 	add.w	r3, r7, #12
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7f9 f879 	bl	8006ce0 <HAL_RCCEx_PeriphCLKConfig>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d001      	beq.n	800dbf8 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800dbf4:	f7f3 faee 	bl	80011d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800dbf8:	4b0c      	ldr	r3, [pc, #48]	; (800dc2c <HAL_PCD_MspInit+0x74>)
 800dbfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbfc:	4a0b      	ldr	r2, [pc, #44]	; (800dc2c <HAL_PCD_MspInit+0x74>)
 800dbfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dc02:	6593      	str	r3, [r2, #88]	; 0x58
 800dc04:	4b09      	ldr	r3, [pc, #36]	; (800dc2c <HAL_PCD_MspInit+0x74>)
 800dc06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc0c:	60bb      	str	r3, [r7, #8]
 800dc0e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800dc10:	2200      	movs	r2, #0
 800dc12:	2100      	movs	r1, #0
 800dc14:	2014      	movs	r0, #20
 800dc16:	f7f6 fa0a 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800dc1a:	2014      	movs	r0, #20
 800dc1c:	f7f6 fa21 	bl	8004062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800dc20:	bf00      	nop
 800dc22:	3760      	adds	r7, #96	; 0x60
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	40005c00 	.word	0x40005c00
 800dc2c:	40021000 	.word	0x40021000

0800dc30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800dc44:	4619      	mov	r1, r3
 800dc46:	4610      	mov	r0, r2
 800dc48:	f7fe fc18 	bl	800c47c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800dc4c:	bf00      	nop
 800dc4e:	3708      	adds	r7, #8
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800dc66:	78fa      	ldrb	r2, [r7, #3]
 800dc68:	6879      	ldr	r1, [r7, #4]
 800dc6a:	4613      	mov	r3, r2
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	4413      	add	r3, r2
 800dc70:	00db      	lsls	r3, r3, #3
 800dc72:	440b      	add	r3, r1
 800dc74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	78fb      	ldrb	r3, [r7, #3]
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	f7fe fc52 	bl	800c526 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800dc82:	bf00      	nop
 800dc84:	3708      	adds	r7, #8
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b082      	sub	sp, #8
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
 800dc92:	460b      	mov	r3, r1
 800dc94:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800dc9c:	78fa      	ldrb	r2, [r7, #3]
 800dc9e:	6879      	ldr	r1, [r7, #4]
 800dca0:	4613      	mov	r3, r2
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	4413      	add	r3, r2
 800dca6:	00db      	lsls	r3, r3, #3
 800dca8:	440b      	add	r3, r1
 800dcaa:	3324      	adds	r3, #36	; 0x24
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	78fb      	ldrb	r3, [r7, #3]
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	f7fe fc9b 	bl	800c5ec <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800dcb6:	bf00      	nop
 800dcb8:	3708      	adds	r7, #8
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b082      	sub	sp, #8
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7fe fdaf 	bl	800c830 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800dcd2:	bf00      	nop
 800dcd4:	3708      	adds	r7, #8
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b084      	sub	sp, #16
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dce2:	2301      	movs	r3, #1
 800dce4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	795b      	ldrb	r3, [r3, #5]
 800dcea:	2b02      	cmp	r3, #2
 800dcec:	d001      	beq.n	800dcf2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dcee:	f7f3 fa71 	bl	80011d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dcf8:	7bfa      	ldrb	r2, [r7, #15]
 800dcfa:	4611      	mov	r1, r2
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7fe fd59 	bl	800c7b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7fe fd05 	bl	800c718 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800dd0e:	bf00      	nop
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
	...

0800dd18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7fe fd54 	bl	800c7d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	7a5b      	ldrb	r3, [r3, #9]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d005      	beq.n	800dd40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd34:	4b04      	ldr	r3, [pc, #16]	; (800dd48 <HAL_PCD_SuspendCallback+0x30>)
 800dd36:	691b      	ldr	r3, [r3, #16]
 800dd38:	4a03      	ldr	r2, [pc, #12]	; (800dd48 <HAL_PCD_SuspendCallback+0x30>)
 800dd3a:	f043 0306 	orr.w	r3, r3, #6
 800dd3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800dd40:	bf00      	nop
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	e000ed00 	.word	0xe000ed00

0800dd4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	7a5b      	ldrb	r3, [r3, #9]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d007      	beq.n	800dd6c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd5c:	4b08      	ldr	r3, [pc, #32]	; (800dd80 <HAL_PCD_ResumeCallback+0x34>)
 800dd5e:	691b      	ldr	r3, [r3, #16]
 800dd60:	4a07      	ldr	r2, [pc, #28]	; (800dd80 <HAL_PCD_ResumeCallback+0x34>)
 800dd62:	f023 0306 	bic.w	r3, r3, #6
 800dd66:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800dd68:	f000 f9f8 	bl	800e15c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7fe fd44 	bl	800c800 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800dd78:	bf00      	nop
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	e000ed00 	.word	0xe000ed00

0800dd84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800dd8c:	4a2b      	ldr	r2, [pc, #172]	; (800de3c <USBD_LL_Init+0xb8>)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	4a29      	ldr	r2, [pc, #164]	; (800de3c <USBD_LL_Init+0xb8>)
 800dd98:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800dd9c:	4b27      	ldr	r3, [pc, #156]	; (800de3c <USBD_LL_Init+0xb8>)
 800dd9e:	4a28      	ldr	r2, [pc, #160]	; (800de40 <USBD_LL_Init+0xbc>)
 800dda0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800dda2:	4b26      	ldr	r3, [pc, #152]	; (800de3c <USBD_LL_Init+0xb8>)
 800dda4:	2208      	movs	r2, #8
 800dda6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800dda8:	4b24      	ldr	r3, [pc, #144]	; (800de3c <USBD_LL_Init+0xb8>)
 800ddaa:	2202      	movs	r2, #2
 800ddac:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ddae:	4b23      	ldr	r3, [pc, #140]	; (800de3c <USBD_LL_Init+0xb8>)
 800ddb0:	2202      	movs	r2, #2
 800ddb2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ddb4:	4b21      	ldr	r3, [pc, #132]	; (800de3c <USBD_LL_Init+0xb8>)
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ddba:	4b20      	ldr	r3, [pc, #128]	; (800de3c <USBD_LL_Init+0xb8>)
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ddc0:	4b1e      	ldr	r3, [pc, #120]	; (800de3c <USBD_LL_Init+0xb8>)
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ddc6:	4b1d      	ldr	r3, [pc, #116]	; (800de3c <USBD_LL_Init+0xb8>)
 800ddc8:	2200      	movs	r2, #0
 800ddca:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ddcc:	481b      	ldr	r0, [pc, #108]	; (800de3c <USBD_LL_Init+0xb8>)
 800ddce:	f7f6 fbef 	bl	80045b0 <HAL_PCD_Init>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d001      	beq.n	800dddc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ddd8:	f7f3 f9fc 	bl	80011d4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dde2:	2318      	movs	r3, #24
 800dde4:	2200      	movs	r2, #0
 800dde6:	2100      	movs	r1, #0
 800dde8:	f7f8 f8a9 	bl	8005f3e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ddf2:	2358      	movs	r3, #88	; 0x58
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	2180      	movs	r1, #128	; 0x80
 800ddf8:	f7f8 f8a1 	bl	8005f3e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de02:	23c0      	movs	r3, #192	; 0xc0
 800de04:	2200      	movs	r2, #0
 800de06:	2181      	movs	r1, #129	; 0x81
 800de08:	f7f8 f899 	bl	8005f3e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de12:	f44f 7388 	mov.w	r3, #272	; 0x110
 800de16:	2200      	movs	r2, #0
 800de18:	2101      	movs	r1, #1
 800de1a:	f7f8 f890 	bl	8005f3e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de28:	2200      	movs	r2, #0
 800de2a:	2182      	movs	r1, #130	; 0x82
 800de2c:	f7f8 f887 	bl	8005f3e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3708      	adds	r7, #8
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	20003068 	.word	0x20003068
 800de40:	40005c00 	.word	0x40005c00

0800de44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de4c:	2300      	movs	r3, #0
 800de4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de50:	2300      	movs	r3, #0
 800de52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7f6 fc76 	bl	800474c <HAL_PCD_Start>
 800de60:	4603      	mov	r3, r0
 800de62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de64:	7bfb      	ldrb	r3, [r7, #15]
 800de66:	4618      	mov	r0, r3
 800de68:	f000 f97e 	bl	800e168 <USBD_Get_USB_Status>
 800de6c:	4603      	mov	r3, r0
 800de6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de70:	7bbb      	ldrb	r3, [r7, #14]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b084      	sub	sp, #16
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
 800de82:	4608      	mov	r0, r1
 800de84:	4611      	mov	r1, r2
 800de86:	461a      	mov	r2, r3
 800de88:	4603      	mov	r3, r0
 800de8a:	70fb      	strb	r3, [r7, #3]
 800de8c:	460b      	mov	r3, r1
 800de8e:	70bb      	strb	r3, [r7, #2]
 800de90:	4613      	mov	r3, r2
 800de92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de94:	2300      	movs	r3, #0
 800de96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dea2:	78bb      	ldrb	r3, [r7, #2]
 800dea4:	883a      	ldrh	r2, [r7, #0]
 800dea6:	78f9      	ldrb	r1, [r7, #3]
 800dea8:	f7f6 fdbd 	bl	8004a26 <HAL_PCD_EP_Open>
 800deac:	4603      	mov	r3, r0
 800deae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800deb0:	7bfb      	ldrb	r3, [r7, #15]
 800deb2:	4618      	mov	r0, r3
 800deb4:	f000 f958 	bl	800e168 <USBD_Get_USB_Status>
 800deb8:	4603      	mov	r3, r0
 800deba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800debc:	7bbb      	ldrb	r3, [r7, #14]
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}

0800dec6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dec6:	b580      	push	{r7, lr}
 800dec8:	b084      	sub	sp, #16
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
 800dece:	460b      	mov	r3, r1
 800ded0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ded2:	2300      	movs	r3, #0
 800ded4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ded6:	2300      	movs	r3, #0
 800ded8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dee0:	78fa      	ldrb	r2, [r7, #3]
 800dee2:	4611      	mov	r1, r2
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7f6 fdfb 	bl	8004ae0 <HAL_PCD_EP_Close>
 800deea:	4603      	mov	r3, r0
 800deec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800deee:	7bfb      	ldrb	r3, [r7, #15]
 800def0:	4618      	mov	r0, r3
 800def2:	f000 f939 	bl	800e168 <USBD_Get_USB_Status>
 800def6:	4603      	mov	r3, r0
 800def8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800defa:	7bbb      	ldrb	r3, [r7, #14]
}
 800defc:	4618      	mov	r0, r3
 800defe:	3710      	adds	r7, #16
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	460b      	mov	r3, r1
 800df0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df10:	2300      	movs	r3, #0
 800df12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df14:	2300      	movs	r3, #0
 800df16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800df1e:	78fa      	ldrb	r2, [r7, #3]
 800df20:	4611      	mov	r1, r2
 800df22:	4618      	mov	r0, r3
 800df24:	f7f6 fea4 	bl	8004c70 <HAL_PCD_EP_SetStall>
 800df28:	4603      	mov	r3, r0
 800df2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df2c:	7bfb      	ldrb	r3, [r7, #15]
 800df2e:	4618      	mov	r0, r3
 800df30:	f000 f91a 	bl	800e168 <USBD_Get_USB_Status>
 800df34:	4603      	mov	r3, r0
 800df36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df38:	7bbb      	ldrb	r3, [r7, #14]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df42:	b580      	push	{r7, lr}
 800df44:	b084      	sub	sp, #16
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
 800df4a:	460b      	mov	r3, r1
 800df4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df4e:	2300      	movs	r3, #0
 800df50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df52:	2300      	movs	r3, #0
 800df54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800df5c:	78fa      	ldrb	r2, [r7, #3]
 800df5e:	4611      	mov	r1, r2
 800df60:	4618      	mov	r0, r3
 800df62:	f7f6 fed7 	bl	8004d14 <HAL_PCD_EP_ClrStall>
 800df66:	4603      	mov	r3, r0
 800df68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df6a:	7bfb      	ldrb	r3, [r7, #15]
 800df6c:	4618      	mov	r0, r3
 800df6e:	f000 f8fb 	bl	800e168 <USBD_Get_USB_Status>
 800df72:	4603      	mov	r3, r0
 800df74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df76:	7bbb      	ldrb	r3, [r7, #14]
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df80:	b480      	push	{r7}
 800df82:	b085      	sub	sp, #20
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	460b      	mov	r3, r1
 800df8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800df92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800df94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	da0b      	bge.n	800dfb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800df9c:	78fb      	ldrb	r3, [r7, #3]
 800df9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dfa2:	68f9      	ldr	r1, [r7, #12]
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	4413      	add	r3, r2
 800dfaa:	00db      	lsls	r3, r3, #3
 800dfac:	440b      	add	r3, r1
 800dfae:	3312      	adds	r3, #18
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	e00b      	b.n	800dfcc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dfb4:	78fb      	ldrb	r3, [r7, #3]
 800dfb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dfba:	68f9      	ldr	r1, [r7, #12]
 800dfbc:	4613      	mov	r3, r2
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	4413      	add	r3, r2
 800dfc2:	00db      	lsls	r3, r3, #3
 800dfc4:	440b      	add	r3, r1
 800dfc6:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800dfca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3714      	adds	r7, #20
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr

0800dfd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dff2:	78fa      	ldrb	r2, [r7, #3]
 800dff4:	4611      	mov	r1, r2
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7f6 fcf1 	bl	80049de <HAL_PCD_SetAddress>
 800dffc:	4603      	mov	r3, r0
 800dffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e000:	7bfb      	ldrb	r3, [r7, #15]
 800e002:	4618      	mov	r0, r3
 800e004:	f000 f8b0 	bl	800e168 <USBD_Get_USB_Status>
 800e008:	4603      	mov	r3, r0
 800e00a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e00c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b086      	sub	sp, #24
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	60f8      	str	r0, [r7, #12]
 800e01e:	607a      	str	r2, [r7, #4]
 800e020:	603b      	str	r3, [r7, #0]
 800e022:	460b      	mov	r3, r1
 800e024:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e026:	2300      	movs	r3, #0
 800e028:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e02a:	2300      	movs	r3, #0
 800e02c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e034:	7af9      	ldrb	r1, [r7, #11]
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	f7f6 fde2 	bl	8004c02 <HAL_PCD_EP_Transmit>
 800e03e:	4603      	mov	r3, r0
 800e040:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e042:	7dfb      	ldrb	r3, [r7, #23]
 800e044:	4618      	mov	r0, r3
 800e046:	f000 f88f 	bl	800e168 <USBD_Get_USB_Status>
 800e04a:	4603      	mov	r3, r0
 800e04c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e04e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3718      	adds	r7, #24
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b086      	sub	sp, #24
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	607a      	str	r2, [r7, #4]
 800e062:	603b      	str	r3, [r7, #0]
 800e064:	460b      	mov	r3, r1
 800e066:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e068:	2300      	movs	r3, #0
 800e06a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e06c:	2300      	movs	r3, #0
 800e06e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e076:	7af9      	ldrb	r1, [r7, #11]
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	f7f6 fd78 	bl	8004b70 <HAL_PCD_EP_Receive>
 800e080:	4603      	mov	r3, r0
 800e082:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e084:	7dfb      	ldrb	r3, [r7, #23]
 800e086:	4618      	mov	r0, r3
 800e088:	f000 f86e 	bl	800e168 <USBD_Get_USB_Status>
 800e08c:	4603      	mov	r3, r0
 800e08e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e090:	7dbb      	ldrb	r3, [r7, #22]
}
 800e092:	4618      	mov	r0, r3
 800e094:	3718      	adds	r7, #24
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b082      	sub	sp, #8
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e0ac:	78fa      	ldrb	r2, [r7, #3]
 800e0ae:	4611      	mov	r1, r2
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7f6 fd8e 	bl	8004bd2 <HAL_PCD_EP_GetRxCount>
 800e0b6:	4603      	mov	r3, r0
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e0cc:	78fb      	ldrb	r3, [r7, #3]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d002      	beq.n	800e0d8 <HAL_PCDEx_LPM_Callback+0x18>
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d013      	beq.n	800e0fe <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e0d6:	e023      	b.n	800e120 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	7a5b      	ldrb	r3, [r3, #9]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d007      	beq.n	800e0f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e0e0:	f000 f83c 	bl	800e15c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e0e4:	4b10      	ldr	r3, [pc, #64]	; (800e128 <HAL_PCDEx_LPM_Callback+0x68>)
 800e0e6:	691b      	ldr	r3, [r3, #16]
 800e0e8:	4a0f      	ldr	r2, [pc, #60]	; (800e128 <HAL_PCDEx_LPM_Callback+0x68>)
 800e0ea:	f023 0306 	bic.w	r3, r3, #6
 800e0ee:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7fe fb82 	bl	800c800 <USBD_LL_Resume>
    break;
 800e0fc:	e010      	b.n	800e120 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e104:	4618      	mov	r0, r3
 800e106:	f7fe fb65 	bl	800c7d4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	7a5b      	ldrb	r3, [r3, #9]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d005      	beq.n	800e11e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e112:	4b05      	ldr	r3, [pc, #20]	; (800e128 <HAL_PCDEx_LPM_Callback+0x68>)
 800e114:	691b      	ldr	r3, [r3, #16]
 800e116:	4a04      	ldr	r2, [pc, #16]	; (800e128 <HAL_PCDEx_LPM_Callback+0x68>)
 800e118:	f043 0306 	orr.w	r3, r3, #6
 800e11c:	6113      	str	r3, [r2, #16]
    break;
 800e11e:	bf00      	nop
}
 800e120:	bf00      	nop
 800e122:	3708      	adds	r7, #8
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}
 800e128:	e000ed00 	.word	0xe000ed00

0800e12c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e134:	4b03      	ldr	r3, [pc, #12]	; (800e144 <USBD_static_malloc+0x18>)
}
 800e136:	4618      	mov	r0, r3
 800e138:	370c      	adds	r7, #12
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr
 800e142:	bf00      	nop
 800e144:	20003344 	.word	0x20003344

0800e148 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]

}
 800e150:	bf00      	nop
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e160:	f7f2 ffde 	bl	8001120 <SystemClock_Config>
}
 800e164:	bf00      	nop
 800e166:	bd80      	pop	{r7, pc}

0800e168 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e168:	b480      	push	{r7}
 800e16a:	b085      	sub	sp, #20
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	4603      	mov	r3, r0
 800e170:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e172:	2300      	movs	r3, #0
 800e174:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e176:	79fb      	ldrb	r3, [r7, #7]
 800e178:	2b03      	cmp	r3, #3
 800e17a:	d817      	bhi.n	800e1ac <USBD_Get_USB_Status+0x44>
 800e17c:	a201      	add	r2, pc, #4	; (adr r2, 800e184 <USBD_Get_USB_Status+0x1c>)
 800e17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e182:	bf00      	nop
 800e184:	0800e195 	.word	0x0800e195
 800e188:	0800e19b 	.word	0x0800e19b
 800e18c:	0800e1a1 	.word	0x0800e1a1
 800e190:	0800e1a7 	.word	0x0800e1a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e194:	2300      	movs	r3, #0
 800e196:	73fb      	strb	r3, [r7, #15]
    break;
 800e198:	e00b      	b.n	800e1b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e19a:	2303      	movs	r3, #3
 800e19c:	73fb      	strb	r3, [r7, #15]
    break;
 800e19e:	e008      	b.n	800e1b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800e1a4:	e005      	b.n	800e1b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e1a6:	2303      	movs	r3, #3
 800e1a8:	73fb      	strb	r3, [r7, #15]
    break;
 800e1aa:	e002      	b.n	800e1b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e1ac:	2303      	movs	r3, #3
 800e1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800e1b0:	bf00      	nop
  }
  return usb_status;
 800e1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3714      	adds	r7, #20
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr

0800e1c0 <main>:


#include "main.h"

int main(void)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	af00      	add	r7, sp, #0
  hwInit();
 800e1c4:	f7f5 fd16 	bl	8003bf4 <hwInit>
  apInit();
 800e1c8:	f7f2 ff1a 	bl	8001000 <apInit>

  apMain();
 800e1cc:	f7f2 ff21 	bl	8001012 <apMain>
 800e1d0:	2300      	movs	r3, #0
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <sulp>:
 800e1d6:	b570      	push	{r4, r5, r6, lr}
 800e1d8:	4604      	mov	r4, r0
 800e1da:	460d      	mov	r5, r1
 800e1dc:	ec45 4b10 	vmov	d0, r4, r5
 800e1e0:	4616      	mov	r6, r2
 800e1e2:	f002 f8d1 	bl	8010388 <__ulp>
 800e1e6:	ec51 0b10 	vmov	r0, r1, d0
 800e1ea:	b17e      	cbz	r6, 800e20c <sulp+0x36>
 800e1ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e1f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	dd09      	ble.n	800e20c <sulp+0x36>
 800e1f8:	051b      	lsls	r3, r3, #20
 800e1fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e1fe:	2400      	movs	r4, #0
 800e200:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e204:	4622      	mov	r2, r4
 800e206:	462b      	mov	r3, r5
 800e208:	f7f2 fa26 	bl	8000658 <__aeabi_dmul>
 800e20c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e210 <_strtod_l>:
 800e210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e214:	ed2d 8b02 	vpush	{d8}
 800e218:	b09b      	sub	sp, #108	; 0x6c
 800e21a:	4604      	mov	r4, r0
 800e21c:	9213      	str	r2, [sp, #76]	; 0x4c
 800e21e:	2200      	movs	r2, #0
 800e220:	9216      	str	r2, [sp, #88]	; 0x58
 800e222:	460d      	mov	r5, r1
 800e224:	f04f 0800 	mov.w	r8, #0
 800e228:	f04f 0900 	mov.w	r9, #0
 800e22c:	460a      	mov	r2, r1
 800e22e:	9215      	str	r2, [sp, #84]	; 0x54
 800e230:	7811      	ldrb	r1, [r2, #0]
 800e232:	292b      	cmp	r1, #43	; 0x2b
 800e234:	d04c      	beq.n	800e2d0 <_strtod_l+0xc0>
 800e236:	d83a      	bhi.n	800e2ae <_strtod_l+0x9e>
 800e238:	290d      	cmp	r1, #13
 800e23a:	d834      	bhi.n	800e2a6 <_strtod_l+0x96>
 800e23c:	2908      	cmp	r1, #8
 800e23e:	d834      	bhi.n	800e2aa <_strtod_l+0x9a>
 800e240:	2900      	cmp	r1, #0
 800e242:	d03d      	beq.n	800e2c0 <_strtod_l+0xb0>
 800e244:	2200      	movs	r2, #0
 800e246:	920a      	str	r2, [sp, #40]	; 0x28
 800e248:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800e24a:	7832      	ldrb	r2, [r6, #0]
 800e24c:	2a30      	cmp	r2, #48	; 0x30
 800e24e:	f040 80b4 	bne.w	800e3ba <_strtod_l+0x1aa>
 800e252:	7872      	ldrb	r2, [r6, #1]
 800e254:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800e258:	2a58      	cmp	r2, #88	; 0x58
 800e25a:	d170      	bne.n	800e33e <_strtod_l+0x12e>
 800e25c:	9302      	str	r3, [sp, #8]
 800e25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e260:	9301      	str	r3, [sp, #4]
 800e262:	ab16      	add	r3, sp, #88	; 0x58
 800e264:	9300      	str	r3, [sp, #0]
 800e266:	4a8e      	ldr	r2, [pc, #568]	; (800e4a0 <_strtod_l+0x290>)
 800e268:	ab17      	add	r3, sp, #92	; 0x5c
 800e26a:	a915      	add	r1, sp, #84	; 0x54
 800e26c:	4620      	mov	r0, r4
 800e26e:	f001 f971 	bl	800f554 <__gethex>
 800e272:	f010 070f 	ands.w	r7, r0, #15
 800e276:	4605      	mov	r5, r0
 800e278:	d005      	beq.n	800e286 <_strtod_l+0x76>
 800e27a:	2f06      	cmp	r7, #6
 800e27c:	d12a      	bne.n	800e2d4 <_strtod_l+0xc4>
 800e27e:	3601      	adds	r6, #1
 800e280:	2300      	movs	r3, #0
 800e282:	9615      	str	r6, [sp, #84]	; 0x54
 800e284:	930a      	str	r3, [sp, #40]	; 0x28
 800e286:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e288:	2b00      	cmp	r3, #0
 800e28a:	f040 857f 	bne.w	800ed8c <_strtod_l+0xb7c>
 800e28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e290:	b1db      	cbz	r3, 800e2ca <_strtod_l+0xba>
 800e292:	4642      	mov	r2, r8
 800e294:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e298:	ec43 2b10 	vmov	d0, r2, r3
 800e29c:	b01b      	add	sp, #108	; 0x6c
 800e29e:	ecbd 8b02 	vpop	{d8}
 800e2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a6:	2920      	cmp	r1, #32
 800e2a8:	d1cc      	bne.n	800e244 <_strtod_l+0x34>
 800e2aa:	3201      	adds	r2, #1
 800e2ac:	e7bf      	b.n	800e22e <_strtod_l+0x1e>
 800e2ae:	292d      	cmp	r1, #45	; 0x2d
 800e2b0:	d1c8      	bne.n	800e244 <_strtod_l+0x34>
 800e2b2:	2101      	movs	r1, #1
 800e2b4:	910a      	str	r1, [sp, #40]	; 0x28
 800e2b6:	1c51      	adds	r1, r2, #1
 800e2b8:	9115      	str	r1, [sp, #84]	; 0x54
 800e2ba:	7852      	ldrb	r2, [r2, #1]
 800e2bc:	2a00      	cmp	r2, #0
 800e2be:	d1c3      	bne.n	800e248 <_strtod_l+0x38>
 800e2c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e2c2:	9515      	str	r5, [sp, #84]	; 0x54
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	f040 855f 	bne.w	800ed88 <_strtod_l+0xb78>
 800e2ca:	4642      	mov	r2, r8
 800e2cc:	464b      	mov	r3, r9
 800e2ce:	e7e3      	b.n	800e298 <_strtod_l+0x88>
 800e2d0:	2100      	movs	r1, #0
 800e2d2:	e7ef      	b.n	800e2b4 <_strtod_l+0xa4>
 800e2d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e2d6:	b13a      	cbz	r2, 800e2e8 <_strtod_l+0xd8>
 800e2d8:	2135      	movs	r1, #53	; 0x35
 800e2da:	a818      	add	r0, sp, #96	; 0x60
 800e2dc:	f002 f951 	bl	8010582 <__copybits>
 800e2e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	f001 fd24 	bl	800fd30 <_Bfree>
 800e2e8:	3f01      	subs	r7, #1
 800e2ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e2ec:	2f04      	cmp	r7, #4
 800e2ee:	d806      	bhi.n	800e2fe <_strtod_l+0xee>
 800e2f0:	e8df f007 	tbb	[pc, r7]
 800e2f4:	201d0314 	.word	0x201d0314
 800e2f8:	14          	.byte	0x14
 800e2f9:	00          	.byte	0x00
 800e2fa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800e2fe:	05e9      	lsls	r1, r5, #23
 800e300:	bf48      	it	mi
 800e302:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800e306:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e30a:	0d1b      	lsrs	r3, r3, #20
 800e30c:	051b      	lsls	r3, r3, #20
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d1b9      	bne.n	800e286 <_strtod_l+0x76>
 800e312:	f001 f819 	bl	800f348 <__errno>
 800e316:	2322      	movs	r3, #34	; 0x22
 800e318:	6003      	str	r3, [r0, #0]
 800e31a:	e7b4      	b.n	800e286 <_strtod_l+0x76>
 800e31c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800e320:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e324:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e328:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e32c:	e7e7      	b.n	800e2fe <_strtod_l+0xee>
 800e32e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e4a8 <_strtod_l+0x298>
 800e332:	e7e4      	b.n	800e2fe <_strtod_l+0xee>
 800e334:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e338:	f04f 38ff 	mov.w	r8, #4294967295
 800e33c:	e7df      	b.n	800e2fe <_strtod_l+0xee>
 800e33e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e340:	1c5a      	adds	r2, r3, #1
 800e342:	9215      	str	r2, [sp, #84]	; 0x54
 800e344:	785b      	ldrb	r3, [r3, #1]
 800e346:	2b30      	cmp	r3, #48	; 0x30
 800e348:	d0f9      	beq.n	800e33e <_strtod_l+0x12e>
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d09b      	beq.n	800e286 <_strtod_l+0x76>
 800e34e:	2301      	movs	r3, #1
 800e350:	f04f 0a00 	mov.w	sl, #0
 800e354:	9304      	str	r3, [sp, #16]
 800e356:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e358:	930b      	str	r3, [sp, #44]	; 0x2c
 800e35a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e35e:	46d3      	mov	fp, sl
 800e360:	220a      	movs	r2, #10
 800e362:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e364:	7806      	ldrb	r6, [r0, #0]
 800e366:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e36a:	b2d9      	uxtb	r1, r3
 800e36c:	2909      	cmp	r1, #9
 800e36e:	d926      	bls.n	800e3be <_strtod_l+0x1ae>
 800e370:	494c      	ldr	r1, [pc, #304]	; (800e4a4 <_strtod_l+0x294>)
 800e372:	2201      	movs	r2, #1
 800e374:	f000 ff64 	bl	800f240 <strncmp>
 800e378:	2800      	cmp	r0, #0
 800e37a:	d030      	beq.n	800e3de <_strtod_l+0x1ce>
 800e37c:	2000      	movs	r0, #0
 800e37e:	4632      	mov	r2, r6
 800e380:	9005      	str	r0, [sp, #20]
 800e382:	465e      	mov	r6, fp
 800e384:	4603      	mov	r3, r0
 800e386:	2a65      	cmp	r2, #101	; 0x65
 800e388:	d001      	beq.n	800e38e <_strtod_l+0x17e>
 800e38a:	2a45      	cmp	r2, #69	; 0x45
 800e38c:	d113      	bne.n	800e3b6 <_strtod_l+0x1a6>
 800e38e:	b91e      	cbnz	r6, 800e398 <_strtod_l+0x188>
 800e390:	9a04      	ldr	r2, [sp, #16]
 800e392:	4302      	orrs	r2, r0
 800e394:	d094      	beq.n	800e2c0 <_strtod_l+0xb0>
 800e396:	2600      	movs	r6, #0
 800e398:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e39a:	1c6a      	adds	r2, r5, #1
 800e39c:	9215      	str	r2, [sp, #84]	; 0x54
 800e39e:	786a      	ldrb	r2, [r5, #1]
 800e3a0:	2a2b      	cmp	r2, #43	; 0x2b
 800e3a2:	d074      	beq.n	800e48e <_strtod_l+0x27e>
 800e3a4:	2a2d      	cmp	r2, #45	; 0x2d
 800e3a6:	d078      	beq.n	800e49a <_strtod_l+0x28a>
 800e3a8:	f04f 0c00 	mov.w	ip, #0
 800e3ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e3b0:	2909      	cmp	r1, #9
 800e3b2:	d97f      	bls.n	800e4b4 <_strtod_l+0x2a4>
 800e3b4:	9515      	str	r5, [sp, #84]	; 0x54
 800e3b6:	2700      	movs	r7, #0
 800e3b8:	e09e      	b.n	800e4f8 <_strtod_l+0x2e8>
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	e7c8      	b.n	800e350 <_strtod_l+0x140>
 800e3be:	f1bb 0f08 	cmp.w	fp, #8
 800e3c2:	bfd8      	it	le
 800e3c4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e3c6:	f100 0001 	add.w	r0, r0, #1
 800e3ca:	bfda      	itte	le
 800e3cc:	fb02 3301 	mlale	r3, r2, r1, r3
 800e3d0:	9309      	strle	r3, [sp, #36]	; 0x24
 800e3d2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e3d6:	f10b 0b01 	add.w	fp, fp, #1
 800e3da:	9015      	str	r0, [sp, #84]	; 0x54
 800e3dc:	e7c1      	b.n	800e362 <_strtod_l+0x152>
 800e3de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3e0:	1c5a      	adds	r2, r3, #1
 800e3e2:	9215      	str	r2, [sp, #84]	; 0x54
 800e3e4:	785a      	ldrb	r2, [r3, #1]
 800e3e6:	f1bb 0f00 	cmp.w	fp, #0
 800e3ea:	d037      	beq.n	800e45c <_strtod_l+0x24c>
 800e3ec:	9005      	str	r0, [sp, #20]
 800e3ee:	465e      	mov	r6, fp
 800e3f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e3f4:	2b09      	cmp	r3, #9
 800e3f6:	d912      	bls.n	800e41e <_strtod_l+0x20e>
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	e7c4      	b.n	800e386 <_strtod_l+0x176>
 800e3fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3fe:	1c5a      	adds	r2, r3, #1
 800e400:	9215      	str	r2, [sp, #84]	; 0x54
 800e402:	785a      	ldrb	r2, [r3, #1]
 800e404:	3001      	adds	r0, #1
 800e406:	2a30      	cmp	r2, #48	; 0x30
 800e408:	d0f8      	beq.n	800e3fc <_strtod_l+0x1ec>
 800e40a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e40e:	2b08      	cmp	r3, #8
 800e410:	f200 84c1 	bhi.w	800ed96 <_strtod_l+0xb86>
 800e414:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e416:	9005      	str	r0, [sp, #20]
 800e418:	2000      	movs	r0, #0
 800e41a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e41c:	4606      	mov	r6, r0
 800e41e:	3a30      	subs	r2, #48	; 0x30
 800e420:	f100 0301 	add.w	r3, r0, #1
 800e424:	d014      	beq.n	800e450 <_strtod_l+0x240>
 800e426:	9905      	ldr	r1, [sp, #20]
 800e428:	4419      	add	r1, r3
 800e42a:	9105      	str	r1, [sp, #20]
 800e42c:	4633      	mov	r3, r6
 800e42e:	eb00 0c06 	add.w	ip, r0, r6
 800e432:	210a      	movs	r1, #10
 800e434:	4563      	cmp	r3, ip
 800e436:	d113      	bne.n	800e460 <_strtod_l+0x250>
 800e438:	1833      	adds	r3, r6, r0
 800e43a:	2b08      	cmp	r3, #8
 800e43c:	f106 0601 	add.w	r6, r6, #1
 800e440:	4406      	add	r6, r0
 800e442:	dc1a      	bgt.n	800e47a <_strtod_l+0x26a>
 800e444:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e446:	230a      	movs	r3, #10
 800e448:	fb03 2301 	mla	r3, r3, r1, r2
 800e44c:	9309      	str	r3, [sp, #36]	; 0x24
 800e44e:	2300      	movs	r3, #0
 800e450:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e452:	1c51      	adds	r1, r2, #1
 800e454:	9115      	str	r1, [sp, #84]	; 0x54
 800e456:	7852      	ldrb	r2, [r2, #1]
 800e458:	4618      	mov	r0, r3
 800e45a:	e7c9      	b.n	800e3f0 <_strtod_l+0x1e0>
 800e45c:	4658      	mov	r0, fp
 800e45e:	e7d2      	b.n	800e406 <_strtod_l+0x1f6>
 800e460:	2b08      	cmp	r3, #8
 800e462:	f103 0301 	add.w	r3, r3, #1
 800e466:	dc03      	bgt.n	800e470 <_strtod_l+0x260>
 800e468:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e46a:	434f      	muls	r7, r1
 800e46c:	9709      	str	r7, [sp, #36]	; 0x24
 800e46e:	e7e1      	b.n	800e434 <_strtod_l+0x224>
 800e470:	2b10      	cmp	r3, #16
 800e472:	bfd8      	it	le
 800e474:	fb01 fa0a 	mulle.w	sl, r1, sl
 800e478:	e7dc      	b.n	800e434 <_strtod_l+0x224>
 800e47a:	2e10      	cmp	r6, #16
 800e47c:	bfdc      	itt	le
 800e47e:	230a      	movle	r3, #10
 800e480:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800e484:	e7e3      	b.n	800e44e <_strtod_l+0x23e>
 800e486:	2300      	movs	r3, #0
 800e488:	9305      	str	r3, [sp, #20]
 800e48a:	2301      	movs	r3, #1
 800e48c:	e780      	b.n	800e390 <_strtod_l+0x180>
 800e48e:	f04f 0c00 	mov.w	ip, #0
 800e492:	1caa      	adds	r2, r5, #2
 800e494:	9215      	str	r2, [sp, #84]	; 0x54
 800e496:	78aa      	ldrb	r2, [r5, #2]
 800e498:	e788      	b.n	800e3ac <_strtod_l+0x19c>
 800e49a:	f04f 0c01 	mov.w	ip, #1
 800e49e:	e7f8      	b.n	800e492 <_strtod_l+0x282>
 800e4a0:	08011820 	.word	0x08011820
 800e4a4:	08011810 	.word	0x08011810
 800e4a8:	7ff00000 	.word	0x7ff00000
 800e4ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e4ae:	1c51      	adds	r1, r2, #1
 800e4b0:	9115      	str	r1, [sp, #84]	; 0x54
 800e4b2:	7852      	ldrb	r2, [r2, #1]
 800e4b4:	2a30      	cmp	r2, #48	; 0x30
 800e4b6:	d0f9      	beq.n	800e4ac <_strtod_l+0x29c>
 800e4b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e4bc:	2908      	cmp	r1, #8
 800e4be:	f63f af7a 	bhi.w	800e3b6 <_strtod_l+0x1a6>
 800e4c2:	3a30      	subs	r2, #48	; 0x30
 800e4c4:	9208      	str	r2, [sp, #32]
 800e4c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e4c8:	920c      	str	r2, [sp, #48]	; 0x30
 800e4ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e4cc:	1c57      	adds	r7, r2, #1
 800e4ce:	9715      	str	r7, [sp, #84]	; 0x54
 800e4d0:	7852      	ldrb	r2, [r2, #1]
 800e4d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e4d6:	f1be 0f09 	cmp.w	lr, #9
 800e4da:	d938      	bls.n	800e54e <_strtod_l+0x33e>
 800e4dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e4de:	1a7f      	subs	r7, r7, r1
 800e4e0:	2f08      	cmp	r7, #8
 800e4e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e4e6:	dc03      	bgt.n	800e4f0 <_strtod_l+0x2e0>
 800e4e8:	9908      	ldr	r1, [sp, #32]
 800e4ea:	428f      	cmp	r7, r1
 800e4ec:	bfa8      	it	ge
 800e4ee:	460f      	movge	r7, r1
 800e4f0:	f1bc 0f00 	cmp.w	ip, #0
 800e4f4:	d000      	beq.n	800e4f8 <_strtod_l+0x2e8>
 800e4f6:	427f      	negs	r7, r7
 800e4f8:	2e00      	cmp	r6, #0
 800e4fa:	d14f      	bne.n	800e59c <_strtod_l+0x38c>
 800e4fc:	9904      	ldr	r1, [sp, #16]
 800e4fe:	4301      	orrs	r1, r0
 800e500:	f47f aec1 	bne.w	800e286 <_strtod_l+0x76>
 800e504:	2b00      	cmp	r3, #0
 800e506:	f47f aedb 	bne.w	800e2c0 <_strtod_l+0xb0>
 800e50a:	2a69      	cmp	r2, #105	; 0x69
 800e50c:	d029      	beq.n	800e562 <_strtod_l+0x352>
 800e50e:	dc26      	bgt.n	800e55e <_strtod_l+0x34e>
 800e510:	2a49      	cmp	r2, #73	; 0x49
 800e512:	d026      	beq.n	800e562 <_strtod_l+0x352>
 800e514:	2a4e      	cmp	r2, #78	; 0x4e
 800e516:	f47f aed3 	bne.w	800e2c0 <_strtod_l+0xb0>
 800e51a:	499b      	ldr	r1, [pc, #620]	; (800e788 <_strtod_l+0x578>)
 800e51c:	a815      	add	r0, sp, #84	; 0x54
 800e51e:	f001 fa59 	bl	800f9d4 <__match>
 800e522:	2800      	cmp	r0, #0
 800e524:	f43f aecc 	beq.w	800e2c0 <_strtod_l+0xb0>
 800e528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	2b28      	cmp	r3, #40	; 0x28
 800e52e:	d12f      	bne.n	800e590 <_strtod_l+0x380>
 800e530:	4996      	ldr	r1, [pc, #600]	; (800e78c <_strtod_l+0x57c>)
 800e532:	aa18      	add	r2, sp, #96	; 0x60
 800e534:	a815      	add	r0, sp, #84	; 0x54
 800e536:	f001 fa61 	bl	800f9fc <__hexnan>
 800e53a:	2805      	cmp	r0, #5
 800e53c:	d128      	bne.n	800e590 <_strtod_l+0x380>
 800e53e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e540:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e544:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e548:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e54c:	e69b      	b.n	800e286 <_strtod_l+0x76>
 800e54e:	9f08      	ldr	r7, [sp, #32]
 800e550:	210a      	movs	r1, #10
 800e552:	fb01 2107 	mla	r1, r1, r7, r2
 800e556:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800e55a:	9208      	str	r2, [sp, #32]
 800e55c:	e7b5      	b.n	800e4ca <_strtod_l+0x2ba>
 800e55e:	2a6e      	cmp	r2, #110	; 0x6e
 800e560:	e7d9      	b.n	800e516 <_strtod_l+0x306>
 800e562:	498b      	ldr	r1, [pc, #556]	; (800e790 <_strtod_l+0x580>)
 800e564:	a815      	add	r0, sp, #84	; 0x54
 800e566:	f001 fa35 	bl	800f9d4 <__match>
 800e56a:	2800      	cmp	r0, #0
 800e56c:	f43f aea8 	beq.w	800e2c0 <_strtod_l+0xb0>
 800e570:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e572:	4988      	ldr	r1, [pc, #544]	; (800e794 <_strtod_l+0x584>)
 800e574:	3b01      	subs	r3, #1
 800e576:	a815      	add	r0, sp, #84	; 0x54
 800e578:	9315      	str	r3, [sp, #84]	; 0x54
 800e57a:	f001 fa2b 	bl	800f9d4 <__match>
 800e57e:	b910      	cbnz	r0, 800e586 <_strtod_l+0x376>
 800e580:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e582:	3301      	adds	r3, #1
 800e584:	9315      	str	r3, [sp, #84]	; 0x54
 800e586:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800e7a4 <_strtod_l+0x594>
 800e58a:	f04f 0800 	mov.w	r8, #0
 800e58e:	e67a      	b.n	800e286 <_strtod_l+0x76>
 800e590:	4881      	ldr	r0, [pc, #516]	; (800e798 <_strtod_l+0x588>)
 800e592:	f000 ff1d 	bl	800f3d0 <nan>
 800e596:	ec59 8b10 	vmov	r8, r9, d0
 800e59a:	e674      	b.n	800e286 <_strtod_l+0x76>
 800e59c:	9b05      	ldr	r3, [sp, #20]
 800e59e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5a0:	1afb      	subs	r3, r7, r3
 800e5a2:	f1bb 0f00 	cmp.w	fp, #0
 800e5a6:	bf08      	it	eq
 800e5a8:	46b3      	moveq	fp, r6
 800e5aa:	2e10      	cmp	r6, #16
 800e5ac:	9308      	str	r3, [sp, #32]
 800e5ae:	4635      	mov	r5, r6
 800e5b0:	bfa8      	it	ge
 800e5b2:	2510      	movge	r5, #16
 800e5b4:	f7f1 ffd6 	bl	8000564 <__aeabi_ui2d>
 800e5b8:	2e09      	cmp	r6, #9
 800e5ba:	4680      	mov	r8, r0
 800e5bc:	4689      	mov	r9, r1
 800e5be:	dd13      	ble.n	800e5e8 <_strtod_l+0x3d8>
 800e5c0:	4b76      	ldr	r3, [pc, #472]	; (800e79c <_strtod_l+0x58c>)
 800e5c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e5c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e5ca:	f7f2 f845 	bl	8000658 <__aeabi_dmul>
 800e5ce:	4680      	mov	r8, r0
 800e5d0:	4650      	mov	r0, sl
 800e5d2:	4689      	mov	r9, r1
 800e5d4:	f7f1 ffc6 	bl	8000564 <__aeabi_ui2d>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	460b      	mov	r3, r1
 800e5dc:	4640      	mov	r0, r8
 800e5de:	4649      	mov	r1, r9
 800e5e0:	f7f1 fe84 	bl	80002ec <__adddf3>
 800e5e4:	4680      	mov	r8, r0
 800e5e6:	4689      	mov	r9, r1
 800e5e8:	2e0f      	cmp	r6, #15
 800e5ea:	dc38      	bgt.n	800e65e <_strtod_l+0x44e>
 800e5ec:	9b08      	ldr	r3, [sp, #32]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	f43f ae49 	beq.w	800e286 <_strtod_l+0x76>
 800e5f4:	dd24      	ble.n	800e640 <_strtod_l+0x430>
 800e5f6:	2b16      	cmp	r3, #22
 800e5f8:	dc0b      	bgt.n	800e612 <_strtod_l+0x402>
 800e5fa:	4968      	ldr	r1, [pc, #416]	; (800e79c <_strtod_l+0x58c>)
 800e5fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e600:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e604:	4642      	mov	r2, r8
 800e606:	464b      	mov	r3, r9
 800e608:	f7f2 f826 	bl	8000658 <__aeabi_dmul>
 800e60c:	4680      	mov	r8, r0
 800e60e:	4689      	mov	r9, r1
 800e610:	e639      	b.n	800e286 <_strtod_l+0x76>
 800e612:	9a08      	ldr	r2, [sp, #32]
 800e614:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800e618:	4293      	cmp	r3, r2
 800e61a:	db20      	blt.n	800e65e <_strtod_l+0x44e>
 800e61c:	4c5f      	ldr	r4, [pc, #380]	; (800e79c <_strtod_l+0x58c>)
 800e61e:	f1c6 060f 	rsb	r6, r6, #15
 800e622:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800e626:	4642      	mov	r2, r8
 800e628:	464b      	mov	r3, r9
 800e62a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e62e:	f7f2 f813 	bl	8000658 <__aeabi_dmul>
 800e632:	9b08      	ldr	r3, [sp, #32]
 800e634:	1b9e      	subs	r6, r3, r6
 800e636:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e63a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e63e:	e7e3      	b.n	800e608 <_strtod_l+0x3f8>
 800e640:	9b08      	ldr	r3, [sp, #32]
 800e642:	3316      	adds	r3, #22
 800e644:	db0b      	blt.n	800e65e <_strtod_l+0x44e>
 800e646:	9b05      	ldr	r3, [sp, #20]
 800e648:	1bdf      	subs	r7, r3, r7
 800e64a:	4b54      	ldr	r3, [pc, #336]	; (800e79c <_strtod_l+0x58c>)
 800e64c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e650:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e654:	4640      	mov	r0, r8
 800e656:	4649      	mov	r1, r9
 800e658:	f7f2 f928 	bl	80008ac <__aeabi_ddiv>
 800e65c:	e7d6      	b.n	800e60c <_strtod_l+0x3fc>
 800e65e:	9b08      	ldr	r3, [sp, #32]
 800e660:	1b75      	subs	r5, r6, r5
 800e662:	441d      	add	r5, r3
 800e664:	2d00      	cmp	r5, #0
 800e666:	dd70      	ble.n	800e74a <_strtod_l+0x53a>
 800e668:	f015 030f 	ands.w	r3, r5, #15
 800e66c:	d00a      	beq.n	800e684 <_strtod_l+0x474>
 800e66e:	494b      	ldr	r1, [pc, #300]	; (800e79c <_strtod_l+0x58c>)
 800e670:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e674:	4642      	mov	r2, r8
 800e676:	464b      	mov	r3, r9
 800e678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e67c:	f7f1 ffec 	bl	8000658 <__aeabi_dmul>
 800e680:	4680      	mov	r8, r0
 800e682:	4689      	mov	r9, r1
 800e684:	f035 050f 	bics.w	r5, r5, #15
 800e688:	d04d      	beq.n	800e726 <_strtod_l+0x516>
 800e68a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800e68e:	dd22      	ble.n	800e6d6 <_strtod_l+0x4c6>
 800e690:	2500      	movs	r5, #0
 800e692:	46ab      	mov	fp, r5
 800e694:	9509      	str	r5, [sp, #36]	; 0x24
 800e696:	9505      	str	r5, [sp, #20]
 800e698:	2322      	movs	r3, #34	; 0x22
 800e69a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800e7a4 <_strtod_l+0x594>
 800e69e:	6023      	str	r3, [r4, #0]
 800e6a0:	f04f 0800 	mov.w	r8, #0
 800e6a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	f43f aded 	beq.w	800e286 <_strtod_l+0x76>
 800e6ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	f001 fb3e 	bl	800fd30 <_Bfree>
 800e6b4:	9905      	ldr	r1, [sp, #20]
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f001 fb3a 	bl	800fd30 <_Bfree>
 800e6bc:	4659      	mov	r1, fp
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f001 fb36 	bl	800fd30 <_Bfree>
 800e6c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	f001 fb32 	bl	800fd30 <_Bfree>
 800e6cc:	4629      	mov	r1, r5
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	f001 fb2e 	bl	800fd30 <_Bfree>
 800e6d4:	e5d7      	b.n	800e286 <_strtod_l+0x76>
 800e6d6:	4b32      	ldr	r3, [pc, #200]	; (800e7a0 <_strtod_l+0x590>)
 800e6d8:	9304      	str	r3, [sp, #16]
 800e6da:	2300      	movs	r3, #0
 800e6dc:	112d      	asrs	r5, r5, #4
 800e6de:	4640      	mov	r0, r8
 800e6e0:	4649      	mov	r1, r9
 800e6e2:	469a      	mov	sl, r3
 800e6e4:	2d01      	cmp	r5, #1
 800e6e6:	dc21      	bgt.n	800e72c <_strtod_l+0x51c>
 800e6e8:	b10b      	cbz	r3, 800e6ee <_strtod_l+0x4de>
 800e6ea:	4680      	mov	r8, r0
 800e6ec:	4689      	mov	r9, r1
 800e6ee:	492c      	ldr	r1, [pc, #176]	; (800e7a0 <_strtod_l+0x590>)
 800e6f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e6f4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e6f8:	4642      	mov	r2, r8
 800e6fa:	464b      	mov	r3, r9
 800e6fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e700:	f7f1 ffaa 	bl	8000658 <__aeabi_dmul>
 800e704:	4b27      	ldr	r3, [pc, #156]	; (800e7a4 <_strtod_l+0x594>)
 800e706:	460a      	mov	r2, r1
 800e708:	400b      	ands	r3, r1
 800e70a:	4927      	ldr	r1, [pc, #156]	; (800e7a8 <_strtod_l+0x598>)
 800e70c:	428b      	cmp	r3, r1
 800e70e:	4680      	mov	r8, r0
 800e710:	d8be      	bhi.n	800e690 <_strtod_l+0x480>
 800e712:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e716:	428b      	cmp	r3, r1
 800e718:	bf86      	itte	hi
 800e71a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800e7ac <_strtod_l+0x59c>
 800e71e:	f04f 38ff 	movhi.w	r8, #4294967295
 800e722:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e726:	2300      	movs	r3, #0
 800e728:	9304      	str	r3, [sp, #16]
 800e72a:	e07b      	b.n	800e824 <_strtod_l+0x614>
 800e72c:	07ea      	lsls	r2, r5, #31
 800e72e:	d505      	bpl.n	800e73c <_strtod_l+0x52c>
 800e730:	9b04      	ldr	r3, [sp, #16]
 800e732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e736:	f7f1 ff8f 	bl	8000658 <__aeabi_dmul>
 800e73a:	2301      	movs	r3, #1
 800e73c:	9a04      	ldr	r2, [sp, #16]
 800e73e:	3208      	adds	r2, #8
 800e740:	f10a 0a01 	add.w	sl, sl, #1
 800e744:	106d      	asrs	r5, r5, #1
 800e746:	9204      	str	r2, [sp, #16]
 800e748:	e7cc      	b.n	800e6e4 <_strtod_l+0x4d4>
 800e74a:	d0ec      	beq.n	800e726 <_strtod_l+0x516>
 800e74c:	426d      	negs	r5, r5
 800e74e:	f015 020f 	ands.w	r2, r5, #15
 800e752:	d00a      	beq.n	800e76a <_strtod_l+0x55a>
 800e754:	4b11      	ldr	r3, [pc, #68]	; (800e79c <_strtod_l+0x58c>)
 800e756:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e75a:	4640      	mov	r0, r8
 800e75c:	4649      	mov	r1, r9
 800e75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e762:	f7f2 f8a3 	bl	80008ac <__aeabi_ddiv>
 800e766:	4680      	mov	r8, r0
 800e768:	4689      	mov	r9, r1
 800e76a:	112d      	asrs	r5, r5, #4
 800e76c:	d0db      	beq.n	800e726 <_strtod_l+0x516>
 800e76e:	2d1f      	cmp	r5, #31
 800e770:	dd1e      	ble.n	800e7b0 <_strtod_l+0x5a0>
 800e772:	2500      	movs	r5, #0
 800e774:	46ab      	mov	fp, r5
 800e776:	9509      	str	r5, [sp, #36]	; 0x24
 800e778:	9505      	str	r5, [sp, #20]
 800e77a:	2322      	movs	r3, #34	; 0x22
 800e77c:	f04f 0800 	mov.w	r8, #0
 800e780:	f04f 0900 	mov.w	r9, #0
 800e784:	6023      	str	r3, [r4, #0]
 800e786:	e78d      	b.n	800e6a4 <_strtod_l+0x494>
 800e788:	0801181b 	.word	0x0801181b
 800e78c:	08011834 	.word	0x08011834
 800e790:	08011812 	.word	0x08011812
 800e794:	08011815 	.word	0x08011815
 800e798:	08011bca 	.word	0x08011bca
 800e79c:	08011a88 	.word	0x08011a88
 800e7a0:	08011a60 	.word	0x08011a60
 800e7a4:	7ff00000 	.word	0x7ff00000
 800e7a8:	7ca00000 	.word	0x7ca00000
 800e7ac:	7fefffff 	.word	0x7fefffff
 800e7b0:	f015 0310 	ands.w	r3, r5, #16
 800e7b4:	bf18      	it	ne
 800e7b6:	236a      	movne	r3, #106	; 0x6a
 800e7b8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800eb5c <_strtod_l+0x94c>
 800e7bc:	9304      	str	r3, [sp, #16]
 800e7be:	4640      	mov	r0, r8
 800e7c0:	4649      	mov	r1, r9
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	07ea      	lsls	r2, r5, #31
 800e7c6:	d504      	bpl.n	800e7d2 <_strtod_l+0x5c2>
 800e7c8:	e9da 2300 	ldrd	r2, r3, [sl]
 800e7cc:	f7f1 ff44 	bl	8000658 <__aeabi_dmul>
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	106d      	asrs	r5, r5, #1
 800e7d4:	f10a 0a08 	add.w	sl, sl, #8
 800e7d8:	d1f4      	bne.n	800e7c4 <_strtod_l+0x5b4>
 800e7da:	b10b      	cbz	r3, 800e7e0 <_strtod_l+0x5d0>
 800e7dc:	4680      	mov	r8, r0
 800e7de:	4689      	mov	r9, r1
 800e7e0:	9b04      	ldr	r3, [sp, #16]
 800e7e2:	b1bb      	cbz	r3, 800e814 <_strtod_l+0x604>
 800e7e4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e7e8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	4649      	mov	r1, r9
 800e7f0:	dd10      	ble.n	800e814 <_strtod_l+0x604>
 800e7f2:	2b1f      	cmp	r3, #31
 800e7f4:	f340 811e 	ble.w	800ea34 <_strtod_l+0x824>
 800e7f8:	2b34      	cmp	r3, #52	; 0x34
 800e7fa:	bfde      	ittt	le
 800e7fc:	f04f 33ff 	movle.w	r3, #4294967295
 800e800:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e804:	4093      	lslle	r3, r2
 800e806:	f04f 0800 	mov.w	r8, #0
 800e80a:	bfcc      	ite	gt
 800e80c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e810:	ea03 0901 	andle.w	r9, r3, r1
 800e814:	2200      	movs	r2, #0
 800e816:	2300      	movs	r3, #0
 800e818:	4640      	mov	r0, r8
 800e81a:	4649      	mov	r1, r9
 800e81c:	f7f2 f984 	bl	8000b28 <__aeabi_dcmpeq>
 800e820:	2800      	cmp	r0, #0
 800e822:	d1a6      	bne.n	800e772 <_strtod_l+0x562>
 800e824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e82a:	4633      	mov	r3, r6
 800e82c:	465a      	mov	r2, fp
 800e82e:	4620      	mov	r0, r4
 800e830:	f001 fae6 	bl	800fe00 <__s2b>
 800e834:	9009      	str	r0, [sp, #36]	; 0x24
 800e836:	2800      	cmp	r0, #0
 800e838:	f43f af2a 	beq.w	800e690 <_strtod_l+0x480>
 800e83c:	9a08      	ldr	r2, [sp, #32]
 800e83e:	9b05      	ldr	r3, [sp, #20]
 800e840:	2a00      	cmp	r2, #0
 800e842:	eba3 0307 	sub.w	r3, r3, r7
 800e846:	bfa8      	it	ge
 800e848:	2300      	movge	r3, #0
 800e84a:	930c      	str	r3, [sp, #48]	; 0x30
 800e84c:	2500      	movs	r5, #0
 800e84e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e852:	9312      	str	r3, [sp, #72]	; 0x48
 800e854:	46ab      	mov	fp, r5
 800e856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e858:	4620      	mov	r0, r4
 800e85a:	6859      	ldr	r1, [r3, #4]
 800e85c:	f001 fa28 	bl	800fcb0 <_Balloc>
 800e860:	9005      	str	r0, [sp, #20]
 800e862:	2800      	cmp	r0, #0
 800e864:	f43f af18 	beq.w	800e698 <_strtod_l+0x488>
 800e868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e86a:	691a      	ldr	r2, [r3, #16]
 800e86c:	3202      	adds	r2, #2
 800e86e:	f103 010c 	add.w	r1, r3, #12
 800e872:	0092      	lsls	r2, r2, #2
 800e874:	300c      	adds	r0, #12
 800e876:	f000 fd9c 	bl	800f3b2 <memcpy>
 800e87a:	ec49 8b10 	vmov	d0, r8, r9
 800e87e:	aa18      	add	r2, sp, #96	; 0x60
 800e880:	a917      	add	r1, sp, #92	; 0x5c
 800e882:	4620      	mov	r0, r4
 800e884:	f001 fdf0 	bl	8010468 <__d2b>
 800e888:	ec49 8b18 	vmov	d8, r8, r9
 800e88c:	9016      	str	r0, [sp, #88]	; 0x58
 800e88e:	2800      	cmp	r0, #0
 800e890:	f43f af02 	beq.w	800e698 <_strtod_l+0x488>
 800e894:	2101      	movs	r1, #1
 800e896:	4620      	mov	r0, r4
 800e898:	f001 fb4a 	bl	800ff30 <__i2b>
 800e89c:	4683      	mov	fp, r0
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	f43f aefa 	beq.w	800e698 <_strtod_l+0x488>
 800e8a4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e8a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e8a8:	2e00      	cmp	r6, #0
 800e8aa:	bfab      	itete	ge
 800e8ac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800e8ae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800e8b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e8b2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800e8b6:	bfac      	ite	ge
 800e8b8:	eb06 0a03 	addge.w	sl, r6, r3
 800e8bc:	1b9f      	sublt	r7, r3, r6
 800e8be:	9b04      	ldr	r3, [sp, #16]
 800e8c0:	1af6      	subs	r6, r6, r3
 800e8c2:	4416      	add	r6, r2
 800e8c4:	4ba0      	ldr	r3, [pc, #640]	; (800eb48 <_strtod_l+0x938>)
 800e8c6:	3e01      	subs	r6, #1
 800e8c8:	429e      	cmp	r6, r3
 800e8ca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e8ce:	f280 80c4 	bge.w	800ea5a <_strtod_l+0x84a>
 800e8d2:	1b9b      	subs	r3, r3, r6
 800e8d4:	2b1f      	cmp	r3, #31
 800e8d6:	eba2 0203 	sub.w	r2, r2, r3
 800e8da:	f04f 0101 	mov.w	r1, #1
 800e8de:	f300 80b0 	bgt.w	800ea42 <_strtod_l+0x832>
 800e8e2:	fa01 f303 	lsl.w	r3, r1, r3
 800e8e6:	930e      	str	r3, [sp, #56]	; 0x38
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	930d      	str	r3, [sp, #52]	; 0x34
 800e8ec:	eb0a 0602 	add.w	r6, sl, r2
 800e8f0:	9b04      	ldr	r3, [sp, #16]
 800e8f2:	45b2      	cmp	sl, r6
 800e8f4:	4417      	add	r7, r2
 800e8f6:	441f      	add	r7, r3
 800e8f8:	4653      	mov	r3, sl
 800e8fa:	bfa8      	it	ge
 800e8fc:	4633      	movge	r3, r6
 800e8fe:	42bb      	cmp	r3, r7
 800e900:	bfa8      	it	ge
 800e902:	463b      	movge	r3, r7
 800e904:	2b00      	cmp	r3, #0
 800e906:	bfc2      	ittt	gt
 800e908:	1af6      	subgt	r6, r6, r3
 800e90a:	1aff      	subgt	r7, r7, r3
 800e90c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800e910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e912:	2b00      	cmp	r3, #0
 800e914:	dd17      	ble.n	800e946 <_strtod_l+0x736>
 800e916:	4659      	mov	r1, fp
 800e918:	461a      	mov	r2, r3
 800e91a:	4620      	mov	r0, r4
 800e91c:	f001 fbc8 	bl	80100b0 <__pow5mult>
 800e920:	4683      	mov	fp, r0
 800e922:	2800      	cmp	r0, #0
 800e924:	f43f aeb8 	beq.w	800e698 <_strtod_l+0x488>
 800e928:	4601      	mov	r1, r0
 800e92a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e92c:	4620      	mov	r0, r4
 800e92e:	f001 fb15 	bl	800ff5c <__multiply>
 800e932:	900b      	str	r0, [sp, #44]	; 0x2c
 800e934:	2800      	cmp	r0, #0
 800e936:	f43f aeaf 	beq.w	800e698 <_strtod_l+0x488>
 800e93a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e93c:	4620      	mov	r0, r4
 800e93e:	f001 f9f7 	bl	800fd30 <_Bfree>
 800e942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e944:	9316      	str	r3, [sp, #88]	; 0x58
 800e946:	2e00      	cmp	r6, #0
 800e948:	f300 808c 	bgt.w	800ea64 <_strtod_l+0x854>
 800e94c:	9b08      	ldr	r3, [sp, #32]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	dd08      	ble.n	800e964 <_strtod_l+0x754>
 800e952:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e954:	9905      	ldr	r1, [sp, #20]
 800e956:	4620      	mov	r0, r4
 800e958:	f001 fbaa 	bl	80100b0 <__pow5mult>
 800e95c:	9005      	str	r0, [sp, #20]
 800e95e:	2800      	cmp	r0, #0
 800e960:	f43f ae9a 	beq.w	800e698 <_strtod_l+0x488>
 800e964:	2f00      	cmp	r7, #0
 800e966:	dd08      	ble.n	800e97a <_strtod_l+0x76a>
 800e968:	9905      	ldr	r1, [sp, #20]
 800e96a:	463a      	mov	r2, r7
 800e96c:	4620      	mov	r0, r4
 800e96e:	f001 fbf9 	bl	8010164 <__lshift>
 800e972:	9005      	str	r0, [sp, #20]
 800e974:	2800      	cmp	r0, #0
 800e976:	f43f ae8f 	beq.w	800e698 <_strtod_l+0x488>
 800e97a:	f1ba 0f00 	cmp.w	sl, #0
 800e97e:	dd08      	ble.n	800e992 <_strtod_l+0x782>
 800e980:	4659      	mov	r1, fp
 800e982:	4652      	mov	r2, sl
 800e984:	4620      	mov	r0, r4
 800e986:	f001 fbed 	bl	8010164 <__lshift>
 800e98a:	4683      	mov	fp, r0
 800e98c:	2800      	cmp	r0, #0
 800e98e:	f43f ae83 	beq.w	800e698 <_strtod_l+0x488>
 800e992:	9a05      	ldr	r2, [sp, #20]
 800e994:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e996:	4620      	mov	r0, r4
 800e998:	f001 fc6c 	bl	8010274 <__mdiff>
 800e99c:	4605      	mov	r5, r0
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	f43f ae7a 	beq.w	800e698 <_strtod_l+0x488>
 800e9a4:	68c3      	ldr	r3, [r0, #12]
 800e9a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	60c3      	str	r3, [r0, #12]
 800e9ac:	4659      	mov	r1, fp
 800e9ae:	f001 fc45 	bl	801023c <__mcmp>
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	da60      	bge.n	800ea78 <_strtod_l+0x868>
 800e9b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9b8:	ea53 0308 	orrs.w	r3, r3, r8
 800e9bc:	f040 8084 	bne.w	800eac8 <_strtod_l+0x8b8>
 800e9c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d17f      	bne.n	800eac8 <_strtod_l+0x8b8>
 800e9c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e9cc:	0d1b      	lsrs	r3, r3, #20
 800e9ce:	051b      	lsls	r3, r3, #20
 800e9d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e9d4:	d978      	bls.n	800eac8 <_strtod_l+0x8b8>
 800e9d6:	696b      	ldr	r3, [r5, #20]
 800e9d8:	b913      	cbnz	r3, 800e9e0 <_strtod_l+0x7d0>
 800e9da:	692b      	ldr	r3, [r5, #16]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	dd73      	ble.n	800eac8 <_strtod_l+0x8b8>
 800e9e0:	4629      	mov	r1, r5
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	f001 fbbd 	bl	8010164 <__lshift>
 800e9ea:	4659      	mov	r1, fp
 800e9ec:	4605      	mov	r5, r0
 800e9ee:	f001 fc25 	bl	801023c <__mcmp>
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	dd68      	ble.n	800eac8 <_strtod_l+0x8b8>
 800e9f6:	9904      	ldr	r1, [sp, #16]
 800e9f8:	4a54      	ldr	r2, [pc, #336]	; (800eb4c <_strtod_l+0x93c>)
 800e9fa:	464b      	mov	r3, r9
 800e9fc:	2900      	cmp	r1, #0
 800e9fe:	f000 8084 	beq.w	800eb0a <_strtod_l+0x8fa>
 800ea02:	ea02 0109 	and.w	r1, r2, r9
 800ea06:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ea0a:	dc7e      	bgt.n	800eb0a <_strtod_l+0x8fa>
 800ea0c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ea10:	f77f aeb3 	ble.w	800e77a <_strtod_l+0x56a>
 800ea14:	4b4e      	ldr	r3, [pc, #312]	; (800eb50 <_strtod_l+0x940>)
 800ea16:	4640      	mov	r0, r8
 800ea18:	4649      	mov	r1, r9
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f7f1 fe1c 	bl	8000658 <__aeabi_dmul>
 800ea20:	4b4a      	ldr	r3, [pc, #296]	; (800eb4c <_strtod_l+0x93c>)
 800ea22:	400b      	ands	r3, r1
 800ea24:	4680      	mov	r8, r0
 800ea26:	4689      	mov	r9, r1
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	f47f ae3f 	bne.w	800e6ac <_strtod_l+0x49c>
 800ea2e:	2322      	movs	r3, #34	; 0x22
 800ea30:	6023      	str	r3, [r4, #0]
 800ea32:	e63b      	b.n	800e6ac <_strtod_l+0x49c>
 800ea34:	f04f 32ff 	mov.w	r2, #4294967295
 800ea38:	fa02 f303 	lsl.w	r3, r2, r3
 800ea3c:	ea03 0808 	and.w	r8, r3, r8
 800ea40:	e6e8      	b.n	800e814 <_strtod_l+0x604>
 800ea42:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ea46:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ea4a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ea4e:	36e2      	adds	r6, #226	; 0xe2
 800ea50:	fa01 f306 	lsl.w	r3, r1, r6
 800ea54:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ea58:	e748      	b.n	800e8ec <_strtod_l+0x6dc>
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ea62:	e743      	b.n	800e8ec <_strtod_l+0x6dc>
 800ea64:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ea66:	4632      	mov	r2, r6
 800ea68:	4620      	mov	r0, r4
 800ea6a:	f001 fb7b 	bl	8010164 <__lshift>
 800ea6e:	9016      	str	r0, [sp, #88]	; 0x58
 800ea70:	2800      	cmp	r0, #0
 800ea72:	f47f af6b 	bne.w	800e94c <_strtod_l+0x73c>
 800ea76:	e60f      	b.n	800e698 <_strtod_l+0x488>
 800ea78:	46ca      	mov	sl, r9
 800ea7a:	d171      	bne.n	800eb60 <_strtod_l+0x950>
 800ea7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ea7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea82:	b352      	cbz	r2, 800eada <_strtod_l+0x8ca>
 800ea84:	4a33      	ldr	r2, [pc, #204]	; (800eb54 <_strtod_l+0x944>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d12a      	bne.n	800eae0 <_strtod_l+0x8d0>
 800ea8a:	9b04      	ldr	r3, [sp, #16]
 800ea8c:	4641      	mov	r1, r8
 800ea8e:	b1fb      	cbz	r3, 800ead0 <_strtod_l+0x8c0>
 800ea90:	4b2e      	ldr	r3, [pc, #184]	; (800eb4c <_strtod_l+0x93c>)
 800ea92:	ea09 0303 	and.w	r3, r9, r3
 800ea96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ea9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea9e:	d81a      	bhi.n	800ead6 <_strtod_l+0x8c6>
 800eaa0:	0d1b      	lsrs	r3, r3, #20
 800eaa2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eaa6:	fa02 f303 	lsl.w	r3, r2, r3
 800eaaa:	4299      	cmp	r1, r3
 800eaac:	d118      	bne.n	800eae0 <_strtod_l+0x8d0>
 800eaae:	4b2a      	ldr	r3, [pc, #168]	; (800eb58 <_strtod_l+0x948>)
 800eab0:	459a      	cmp	sl, r3
 800eab2:	d102      	bne.n	800eaba <_strtod_l+0x8aa>
 800eab4:	3101      	adds	r1, #1
 800eab6:	f43f adef 	beq.w	800e698 <_strtod_l+0x488>
 800eaba:	4b24      	ldr	r3, [pc, #144]	; (800eb4c <_strtod_l+0x93c>)
 800eabc:	ea0a 0303 	and.w	r3, sl, r3
 800eac0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800eac4:	f04f 0800 	mov.w	r8, #0
 800eac8:	9b04      	ldr	r3, [sp, #16]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d1a2      	bne.n	800ea14 <_strtod_l+0x804>
 800eace:	e5ed      	b.n	800e6ac <_strtod_l+0x49c>
 800ead0:	f04f 33ff 	mov.w	r3, #4294967295
 800ead4:	e7e9      	b.n	800eaaa <_strtod_l+0x89a>
 800ead6:	4613      	mov	r3, r2
 800ead8:	e7e7      	b.n	800eaaa <_strtod_l+0x89a>
 800eada:	ea53 0308 	orrs.w	r3, r3, r8
 800eade:	d08a      	beq.n	800e9f6 <_strtod_l+0x7e6>
 800eae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eae2:	b1e3      	cbz	r3, 800eb1e <_strtod_l+0x90e>
 800eae4:	ea13 0f0a 	tst.w	r3, sl
 800eae8:	d0ee      	beq.n	800eac8 <_strtod_l+0x8b8>
 800eaea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eaec:	9a04      	ldr	r2, [sp, #16]
 800eaee:	4640      	mov	r0, r8
 800eaf0:	4649      	mov	r1, r9
 800eaf2:	b1c3      	cbz	r3, 800eb26 <_strtod_l+0x916>
 800eaf4:	f7ff fb6f 	bl	800e1d6 <sulp>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	460b      	mov	r3, r1
 800eafc:	ec51 0b18 	vmov	r0, r1, d8
 800eb00:	f7f1 fbf4 	bl	80002ec <__adddf3>
 800eb04:	4680      	mov	r8, r0
 800eb06:	4689      	mov	r9, r1
 800eb08:	e7de      	b.n	800eac8 <_strtod_l+0x8b8>
 800eb0a:	4013      	ands	r3, r2
 800eb0c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eb10:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800eb14:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800eb18:	f04f 38ff 	mov.w	r8, #4294967295
 800eb1c:	e7d4      	b.n	800eac8 <_strtod_l+0x8b8>
 800eb1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb20:	ea13 0f08 	tst.w	r3, r8
 800eb24:	e7e0      	b.n	800eae8 <_strtod_l+0x8d8>
 800eb26:	f7ff fb56 	bl	800e1d6 <sulp>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	ec51 0b18 	vmov	r0, r1, d8
 800eb32:	f7f1 fbd9 	bl	80002e8 <__aeabi_dsub>
 800eb36:	2200      	movs	r2, #0
 800eb38:	2300      	movs	r3, #0
 800eb3a:	4680      	mov	r8, r0
 800eb3c:	4689      	mov	r9, r1
 800eb3e:	f7f1 fff3 	bl	8000b28 <__aeabi_dcmpeq>
 800eb42:	2800      	cmp	r0, #0
 800eb44:	d0c0      	beq.n	800eac8 <_strtod_l+0x8b8>
 800eb46:	e618      	b.n	800e77a <_strtod_l+0x56a>
 800eb48:	fffffc02 	.word	0xfffffc02
 800eb4c:	7ff00000 	.word	0x7ff00000
 800eb50:	39500000 	.word	0x39500000
 800eb54:	000fffff 	.word	0x000fffff
 800eb58:	7fefffff 	.word	0x7fefffff
 800eb5c:	08011848 	.word	0x08011848
 800eb60:	4659      	mov	r1, fp
 800eb62:	4628      	mov	r0, r5
 800eb64:	f001 fcda 	bl	801051c <__ratio>
 800eb68:	ec57 6b10 	vmov	r6, r7, d0
 800eb6c:	ee10 0a10 	vmov	r0, s0
 800eb70:	2200      	movs	r2, #0
 800eb72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eb76:	4639      	mov	r1, r7
 800eb78:	f7f1 ffea 	bl	8000b50 <__aeabi_dcmple>
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	d071      	beq.n	800ec64 <_strtod_l+0xa54>
 800eb80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d17c      	bne.n	800ec80 <_strtod_l+0xa70>
 800eb86:	f1b8 0f00 	cmp.w	r8, #0
 800eb8a:	d15a      	bne.n	800ec42 <_strtod_l+0xa32>
 800eb8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d15d      	bne.n	800ec50 <_strtod_l+0xa40>
 800eb94:	4b90      	ldr	r3, [pc, #576]	; (800edd8 <_strtod_l+0xbc8>)
 800eb96:	2200      	movs	r2, #0
 800eb98:	4630      	mov	r0, r6
 800eb9a:	4639      	mov	r1, r7
 800eb9c:	f7f1 ffce 	bl	8000b3c <__aeabi_dcmplt>
 800eba0:	2800      	cmp	r0, #0
 800eba2:	d15c      	bne.n	800ec5e <_strtod_l+0xa4e>
 800eba4:	4630      	mov	r0, r6
 800eba6:	4639      	mov	r1, r7
 800eba8:	4b8c      	ldr	r3, [pc, #560]	; (800eddc <_strtod_l+0xbcc>)
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f7f1 fd54 	bl	8000658 <__aeabi_dmul>
 800ebb0:	4606      	mov	r6, r0
 800ebb2:	460f      	mov	r7, r1
 800ebb4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ebb8:	9606      	str	r6, [sp, #24]
 800ebba:	9307      	str	r3, [sp, #28]
 800ebbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ebc0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ebc4:	4b86      	ldr	r3, [pc, #536]	; (800ede0 <_strtod_l+0xbd0>)
 800ebc6:	ea0a 0303 	and.w	r3, sl, r3
 800ebca:	930d      	str	r3, [sp, #52]	; 0x34
 800ebcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ebce:	4b85      	ldr	r3, [pc, #532]	; (800ede4 <_strtod_l+0xbd4>)
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	f040 8090 	bne.w	800ecf6 <_strtod_l+0xae6>
 800ebd6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ebda:	ec49 8b10 	vmov	d0, r8, r9
 800ebde:	f001 fbd3 	bl	8010388 <__ulp>
 800ebe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ebe6:	ec51 0b10 	vmov	r0, r1, d0
 800ebea:	f7f1 fd35 	bl	8000658 <__aeabi_dmul>
 800ebee:	4642      	mov	r2, r8
 800ebf0:	464b      	mov	r3, r9
 800ebf2:	f7f1 fb7b 	bl	80002ec <__adddf3>
 800ebf6:	460b      	mov	r3, r1
 800ebf8:	4979      	ldr	r1, [pc, #484]	; (800ede0 <_strtod_l+0xbd0>)
 800ebfa:	4a7b      	ldr	r2, [pc, #492]	; (800ede8 <_strtod_l+0xbd8>)
 800ebfc:	4019      	ands	r1, r3
 800ebfe:	4291      	cmp	r1, r2
 800ec00:	4680      	mov	r8, r0
 800ec02:	d944      	bls.n	800ec8e <_strtod_l+0xa7e>
 800ec04:	ee18 2a90 	vmov	r2, s17
 800ec08:	4b78      	ldr	r3, [pc, #480]	; (800edec <_strtod_l+0xbdc>)
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d104      	bne.n	800ec18 <_strtod_l+0xa08>
 800ec0e:	ee18 3a10 	vmov	r3, s16
 800ec12:	3301      	adds	r3, #1
 800ec14:	f43f ad40 	beq.w	800e698 <_strtod_l+0x488>
 800ec18:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800edec <_strtod_l+0xbdc>
 800ec1c:	f04f 38ff 	mov.w	r8, #4294967295
 800ec20:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ec22:	4620      	mov	r0, r4
 800ec24:	f001 f884 	bl	800fd30 <_Bfree>
 800ec28:	9905      	ldr	r1, [sp, #20]
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	f001 f880 	bl	800fd30 <_Bfree>
 800ec30:	4659      	mov	r1, fp
 800ec32:	4620      	mov	r0, r4
 800ec34:	f001 f87c 	bl	800fd30 <_Bfree>
 800ec38:	4629      	mov	r1, r5
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f001 f878 	bl	800fd30 <_Bfree>
 800ec40:	e609      	b.n	800e856 <_strtod_l+0x646>
 800ec42:	f1b8 0f01 	cmp.w	r8, #1
 800ec46:	d103      	bne.n	800ec50 <_strtod_l+0xa40>
 800ec48:	f1b9 0f00 	cmp.w	r9, #0
 800ec4c:	f43f ad95 	beq.w	800e77a <_strtod_l+0x56a>
 800ec50:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800eda8 <_strtod_l+0xb98>
 800ec54:	4f60      	ldr	r7, [pc, #384]	; (800edd8 <_strtod_l+0xbc8>)
 800ec56:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ec5a:	2600      	movs	r6, #0
 800ec5c:	e7ae      	b.n	800ebbc <_strtod_l+0x9ac>
 800ec5e:	4f5f      	ldr	r7, [pc, #380]	; (800eddc <_strtod_l+0xbcc>)
 800ec60:	2600      	movs	r6, #0
 800ec62:	e7a7      	b.n	800ebb4 <_strtod_l+0x9a4>
 800ec64:	4b5d      	ldr	r3, [pc, #372]	; (800eddc <_strtod_l+0xbcc>)
 800ec66:	4630      	mov	r0, r6
 800ec68:	4639      	mov	r1, r7
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	f7f1 fcf4 	bl	8000658 <__aeabi_dmul>
 800ec70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec72:	4606      	mov	r6, r0
 800ec74:	460f      	mov	r7, r1
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d09c      	beq.n	800ebb4 <_strtod_l+0x9a4>
 800ec7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ec7e:	e79d      	b.n	800ebbc <_strtod_l+0x9ac>
 800ec80:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800edb0 <_strtod_l+0xba0>
 800ec84:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ec88:	ec57 6b17 	vmov	r6, r7, d7
 800ec8c:	e796      	b.n	800ebbc <_strtod_l+0x9ac>
 800ec8e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ec92:	9b04      	ldr	r3, [sp, #16]
 800ec94:	46ca      	mov	sl, r9
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d1c2      	bne.n	800ec20 <_strtod_l+0xa10>
 800ec9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ec9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eca0:	0d1b      	lsrs	r3, r3, #20
 800eca2:	051b      	lsls	r3, r3, #20
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d1bb      	bne.n	800ec20 <_strtod_l+0xa10>
 800eca8:	4630      	mov	r0, r6
 800ecaa:	4639      	mov	r1, r7
 800ecac:	f7f2 f80c 	bl	8000cc8 <__aeabi_d2lz>
 800ecb0:	f7f1 fca4 	bl	80005fc <__aeabi_l2d>
 800ecb4:	4602      	mov	r2, r0
 800ecb6:	460b      	mov	r3, r1
 800ecb8:	4630      	mov	r0, r6
 800ecba:	4639      	mov	r1, r7
 800ecbc:	f7f1 fb14 	bl	80002e8 <__aeabi_dsub>
 800ecc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ecc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ecc6:	ea43 0308 	orr.w	r3, r3, r8
 800ecca:	4313      	orrs	r3, r2
 800eccc:	4606      	mov	r6, r0
 800ecce:	460f      	mov	r7, r1
 800ecd0:	d054      	beq.n	800ed7c <_strtod_l+0xb6c>
 800ecd2:	a339      	add	r3, pc, #228	; (adr r3, 800edb8 <_strtod_l+0xba8>)
 800ecd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd8:	f7f1 ff30 	bl	8000b3c <__aeabi_dcmplt>
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	f47f ace5 	bne.w	800e6ac <_strtod_l+0x49c>
 800ece2:	a337      	add	r3, pc, #220	; (adr r3, 800edc0 <_strtod_l+0xbb0>)
 800ece4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece8:	4630      	mov	r0, r6
 800ecea:	4639      	mov	r1, r7
 800ecec:	f7f1 ff44 	bl	8000b78 <__aeabi_dcmpgt>
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	d095      	beq.n	800ec20 <_strtod_l+0xa10>
 800ecf4:	e4da      	b.n	800e6ac <_strtod_l+0x49c>
 800ecf6:	9b04      	ldr	r3, [sp, #16]
 800ecf8:	b333      	cbz	r3, 800ed48 <_strtod_l+0xb38>
 800ecfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecfc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ed00:	d822      	bhi.n	800ed48 <_strtod_l+0xb38>
 800ed02:	a331      	add	r3, pc, #196	; (adr r3, 800edc8 <_strtod_l+0xbb8>)
 800ed04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed08:	4630      	mov	r0, r6
 800ed0a:	4639      	mov	r1, r7
 800ed0c:	f7f1 ff20 	bl	8000b50 <__aeabi_dcmple>
 800ed10:	b1a0      	cbz	r0, 800ed3c <_strtod_l+0xb2c>
 800ed12:	4639      	mov	r1, r7
 800ed14:	4630      	mov	r0, r6
 800ed16:	f7f1 ff4f 	bl	8000bb8 <__aeabi_d2uiz>
 800ed1a:	2801      	cmp	r0, #1
 800ed1c:	bf38      	it	cc
 800ed1e:	2001      	movcc	r0, #1
 800ed20:	f7f1 fc20 	bl	8000564 <__aeabi_ui2d>
 800ed24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed26:	4606      	mov	r6, r0
 800ed28:	460f      	mov	r7, r1
 800ed2a:	bb23      	cbnz	r3, 800ed76 <_strtod_l+0xb66>
 800ed2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed30:	9010      	str	r0, [sp, #64]	; 0x40
 800ed32:	9311      	str	r3, [sp, #68]	; 0x44
 800ed34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ed38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ed3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed40:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ed44:	1a9b      	subs	r3, r3, r2
 800ed46:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed48:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ed4c:	eeb0 0a48 	vmov.f32	s0, s16
 800ed50:	eef0 0a68 	vmov.f32	s1, s17
 800ed54:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ed58:	f001 fb16 	bl	8010388 <__ulp>
 800ed5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ed60:	ec53 2b10 	vmov	r2, r3, d0
 800ed64:	f7f1 fc78 	bl	8000658 <__aeabi_dmul>
 800ed68:	ec53 2b18 	vmov	r2, r3, d8
 800ed6c:	f7f1 fabe 	bl	80002ec <__adddf3>
 800ed70:	4680      	mov	r8, r0
 800ed72:	4689      	mov	r9, r1
 800ed74:	e78d      	b.n	800ec92 <_strtod_l+0xa82>
 800ed76:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ed7a:	e7db      	b.n	800ed34 <_strtod_l+0xb24>
 800ed7c:	a314      	add	r3, pc, #80	; (adr r3, 800edd0 <_strtod_l+0xbc0>)
 800ed7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed82:	f7f1 fedb 	bl	8000b3c <__aeabi_dcmplt>
 800ed86:	e7b3      	b.n	800ecf0 <_strtod_l+0xae0>
 800ed88:	2300      	movs	r3, #0
 800ed8a:	930a      	str	r3, [sp, #40]	; 0x28
 800ed8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ed8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed90:	6013      	str	r3, [r2, #0]
 800ed92:	f7ff ba7c 	b.w	800e28e <_strtod_l+0x7e>
 800ed96:	2a65      	cmp	r2, #101	; 0x65
 800ed98:	f43f ab75 	beq.w	800e486 <_strtod_l+0x276>
 800ed9c:	2a45      	cmp	r2, #69	; 0x45
 800ed9e:	f43f ab72 	beq.w	800e486 <_strtod_l+0x276>
 800eda2:	2301      	movs	r3, #1
 800eda4:	f7ff bbaa 	b.w	800e4fc <_strtod_l+0x2ec>
 800eda8:	00000000 	.word	0x00000000
 800edac:	bff00000 	.word	0xbff00000
 800edb0:	00000000 	.word	0x00000000
 800edb4:	3ff00000 	.word	0x3ff00000
 800edb8:	94a03595 	.word	0x94a03595
 800edbc:	3fdfffff 	.word	0x3fdfffff
 800edc0:	35afe535 	.word	0x35afe535
 800edc4:	3fe00000 	.word	0x3fe00000
 800edc8:	ffc00000 	.word	0xffc00000
 800edcc:	41dfffff 	.word	0x41dfffff
 800edd0:	94a03595 	.word	0x94a03595
 800edd4:	3fcfffff 	.word	0x3fcfffff
 800edd8:	3ff00000 	.word	0x3ff00000
 800eddc:	3fe00000 	.word	0x3fe00000
 800ede0:	7ff00000 	.word	0x7ff00000
 800ede4:	7fe00000 	.word	0x7fe00000
 800ede8:	7c9fffff 	.word	0x7c9fffff
 800edec:	7fefffff 	.word	0x7fefffff

0800edf0 <strtof>:
 800edf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800eeb8 <strtof+0xc8>
 800edf8:	4b2a      	ldr	r3, [pc, #168]	; (800eea4 <strtof+0xb4>)
 800edfa:	460a      	mov	r2, r1
 800edfc:	ed2d 8b02 	vpush	{d8}
 800ee00:	4601      	mov	r1, r0
 800ee02:	f8d8 0000 	ldr.w	r0, [r8]
 800ee06:	f7ff fa03 	bl	800e210 <_strtod_l>
 800ee0a:	ec55 4b10 	vmov	r4, r5, d0
 800ee0e:	ee10 2a10 	vmov	r2, s0
 800ee12:	ee10 0a10 	vmov	r0, s0
 800ee16:	462b      	mov	r3, r5
 800ee18:	4629      	mov	r1, r5
 800ee1a:	f7f1 feb7 	bl	8000b8c <__aeabi_dcmpun>
 800ee1e:	b190      	cbz	r0, 800ee46 <strtof+0x56>
 800ee20:	2d00      	cmp	r5, #0
 800ee22:	4821      	ldr	r0, [pc, #132]	; (800eea8 <strtof+0xb8>)
 800ee24:	da09      	bge.n	800ee3a <strtof+0x4a>
 800ee26:	f000 fadb 	bl	800f3e0 <nanf>
 800ee2a:	eeb1 8a40 	vneg.f32	s16, s0
 800ee2e:	eeb0 0a48 	vmov.f32	s0, s16
 800ee32:	ecbd 8b02 	vpop	{d8}
 800ee36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee3a:	ecbd 8b02 	vpop	{d8}
 800ee3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee42:	f000 bacd 	b.w	800f3e0 <nanf>
 800ee46:	4620      	mov	r0, r4
 800ee48:	4629      	mov	r1, r5
 800ee4a:	f7f1 fed5 	bl	8000bf8 <__aeabi_d2f>
 800ee4e:	ee08 0a10 	vmov	s16, r0
 800ee52:	eddf 7a16 	vldr	s15, [pc, #88]	; 800eeac <strtof+0xbc>
 800ee56:	eeb0 7ac8 	vabs.f32	s14, s16
 800ee5a:	eeb4 7a67 	vcmp.f32	s14, s15
 800ee5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee62:	dd11      	ble.n	800ee88 <strtof+0x98>
 800ee64:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800ee68:	4b11      	ldr	r3, [pc, #68]	; (800eeb0 <strtof+0xc0>)
 800ee6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee6e:	4620      	mov	r0, r4
 800ee70:	4639      	mov	r1, r7
 800ee72:	f7f1 fe8b 	bl	8000b8c <__aeabi_dcmpun>
 800ee76:	b980      	cbnz	r0, 800ee9a <strtof+0xaa>
 800ee78:	4b0d      	ldr	r3, [pc, #52]	; (800eeb0 <strtof+0xc0>)
 800ee7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee7e:	4620      	mov	r0, r4
 800ee80:	4639      	mov	r1, r7
 800ee82:	f7f1 fe65 	bl	8000b50 <__aeabi_dcmple>
 800ee86:	b940      	cbnz	r0, 800ee9a <strtof+0xaa>
 800ee88:	ee18 3a10 	vmov	r3, s16
 800ee8c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ee90:	d1cd      	bne.n	800ee2e <strtof+0x3e>
 800ee92:	4b08      	ldr	r3, [pc, #32]	; (800eeb4 <strtof+0xc4>)
 800ee94:	402b      	ands	r3, r5
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d0c9      	beq.n	800ee2e <strtof+0x3e>
 800ee9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ee9e:	2222      	movs	r2, #34	; 0x22
 800eea0:	601a      	str	r2, [r3, #0]
 800eea2:	e7c4      	b.n	800ee2e <strtof+0x3e>
 800eea4:	200001a8 	.word	0x200001a8
 800eea8:	08011bca 	.word	0x08011bca
 800eeac:	7f7fffff 	.word	0x7f7fffff
 800eeb0:	7fefffff 	.word	0x7fefffff
 800eeb4:	7ff00000 	.word	0x7ff00000
 800eeb8:	20000360 	.word	0x20000360

0800eebc <_strtoul_l.constprop.0>:
 800eebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eec0:	4f36      	ldr	r7, [pc, #216]	; (800ef9c <_strtoul_l.constprop.0+0xe0>)
 800eec2:	4686      	mov	lr, r0
 800eec4:	460d      	mov	r5, r1
 800eec6:	4628      	mov	r0, r5
 800eec8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eecc:	5d3e      	ldrb	r6, [r7, r4]
 800eece:	f016 0608 	ands.w	r6, r6, #8
 800eed2:	d1f8      	bne.n	800eec6 <_strtoul_l.constprop.0+0xa>
 800eed4:	2c2d      	cmp	r4, #45	; 0x2d
 800eed6:	d130      	bne.n	800ef3a <_strtoul_l.constprop.0+0x7e>
 800eed8:	782c      	ldrb	r4, [r5, #0]
 800eeda:	2601      	movs	r6, #1
 800eedc:	1c85      	adds	r5, r0, #2
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d057      	beq.n	800ef92 <_strtoul_l.constprop.0+0xd6>
 800eee2:	2b10      	cmp	r3, #16
 800eee4:	d109      	bne.n	800eefa <_strtoul_l.constprop.0+0x3e>
 800eee6:	2c30      	cmp	r4, #48	; 0x30
 800eee8:	d107      	bne.n	800eefa <_strtoul_l.constprop.0+0x3e>
 800eeea:	7828      	ldrb	r0, [r5, #0]
 800eeec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800eef0:	2858      	cmp	r0, #88	; 0x58
 800eef2:	d149      	bne.n	800ef88 <_strtoul_l.constprop.0+0xcc>
 800eef4:	786c      	ldrb	r4, [r5, #1]
 800eef6:	2310      	movs	r3, #16
 800eef8:	3502      	adds	r5, #2
 800eefa:	f04f 38ff 	mov.w	r8, #4294967295
 800eefe:	2700      	movs	r7, #0
 800ef00:	fbb8 f8f3 	udiv	r8, r8, r3
 800ef04:	fb03 f908 	mul.w	r9, r3, r8
 800ef08:	ea6f 0909 	mvn.w	r9, r9
 800ef0c:	4638      	mov	r0, r7
 800ef0e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ef12:	f1bc 0f09 	cmp.w	ip, #9
 800ef16:	d815      	bhi.n	800ef44 <_strtoul_l.constprop.0+0x88>
 800ef18:	4664      	mov	r4, ip
 800ef1a:	42a3      	cmp	r3, r4
 800ef1c:	dd23      	ble.n	800ef66 <_strtoul_l.constprop.0+0xaa>
 800ef1e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800ef22:	d007      	beq.n	800ef34 <_strtoul_l.constprop.0+0x78>
 800ef24:	4580      	cmp	r8, r0
 800ef26:	d31b      	bcc.n	800ef60 <_strtoul_l.constprop.0+0xa4>
 800ef28:	d101      	bne.n	800ef2e <_strtoul_l.constprop.0+0x72>
 800ef2a:	45a1      	cmp	r9, r4
 800ef2c:	db18      	blt.n	800ef60 <_strtoul_l.constprop.0+0xa4>
 800ef2e:	fb00 4003 	mla	r0, r0, r3, r4
 800ef32:	2701      	movs	r7, #1
 800ef34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef38:	e7e9      	b.n	800ef0e <_strtoul_l.constprop.0+0x52>
 800ef3a:	2c2b      	cmp	r4, #43	; 0x2b
 800ef3c:	bf04      	itt	eq
 800ef3e:	782c      	ldrbeq	r4, [r5, #0]
 800ef40:	1c85      	addeq	r5, r0, #2
 800ef42:	e7cc      	b.n	800eede <_strtoul_l.constprop.0+0x22>
 800ef44:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ef48:	f1bc 0f19 	cmp.w	ip, #25
 800ef4c:	d801      	bhi.n	800ef52 <_strtoul_l.constprop.0+0x96>
 800ef4e:	3c37      	subs	r4, #55	; 0x37
 800ef50:	e7e3      	b.n	800ef1a <_strtoul_l.constprop.0+0x5e>
 800ef52:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ef56:	f1bc 0f19 	cmp.w	ip, #25
 800ef5a:	d804      	bhi.n	800ef66 <_strtoul_l.constprop.0+0xaa>
 800ef5c:	3c57      	subs	r4, #87	; 0x57
 800ef5e:	e7dc      	b.n	800ef1a <_strtoul_l.constprop.0+0x5e>
 800ef60:	f04f 37ff 	mov.w	r7, #4294967295
 800ef64:	e7e6      	b.n	800ef34 <_strtoul_l.constprop.0+0x78>
 800ef66:	1c7b      	adds	r3, r7, #1
 800ef68:	d106      	bne.n	800ef78 <_strtoul_l.constprop.0+0xbc>
 800ef6a:	2322      	movs	r3, #34	; 0x22
 800ef6c:	f8ce 3000 	str.w	r3, [lr]
 800ef70:	4638      	mov	r0, r7
 800ef72:	b932      	cbnz	r2, 800ef82 <_strtoul_l.constprop.0+0xc6>
 800ef74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef78:	b106      	cbz	r6, 800ef7c <_strtoul_l.constprop.0+0xc0>
 800ef7a:	4240      	negs	r0, r0
 800ef7c:	2a00      	cmp	r2, #0
 800ef7e:	d0f9      	beq.n	800ef74 <_strtoul_l.constprop.0+0xb8>
 800ef80:	b107      	cbz	r7, 800ef84 <_strtoul_l.constprop.0+0xc8>
 800ef82:	1e69      	subs	r1, r5, #1
 800ef84:	6011      	str	r1, [r2, #0]
 800ef86:	e7f5      	b.n	800ef74 <_strtoul_l.constprop.0+0xb8>
 800ef88:	2430      	movs	r4, #48	; 0x30
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d1b5      	bne.n	800eefa <_strtoul_l.constprop.0+0x3e>
 800ef8e:	2308      	movs	r3, #8
 800ef90:	e7b3      	b.n	800eefa <_strtoul_l.constprop.0+0x3e>
 800ef92:	2c30      	cmp	r4, #48	; 0x30
 800ef94:	d0a9      	beq.n	800eeea <_strtoul_l.constprop.0+0x2e>
 800ef96:	230a      	movs	r3, #10
 800ef98:	e7af      	b.n	800eefa <_strtoul_l.constprop.0+0x3e>
 800ef9a:	bf00      	nop
 800ef9c:	08011871 	.word	0x08011871

0800efa0 <strtoul>:
 800efa0:	4613      	mov	r3, r2
 800efa2:	460a      	mov	r2, r1
 800efa4:	4601      	mov	r1, r0
 800efa6:	4802      	ldr	r0, [pc, #8]	; (800efb0 <strtoul+0x10>)
 800efa8:	6800      	ldr	r0, [r0, #0]
 800efaa:	f7ff bf87 	b.w	800eebc <_strtoul_l.constprop.0>
 800efae:	bf00      	nop
 800efb0:	20000360 	.word	0x20000360

0800efb4 <std>:
 800efb4:	2300      	movs	r3, #0
 800efb6:	b510      	push	{r4, lr}
 800efb8:	4604      	mov	r4, r0
 800efba:	e9c0 3300 	strd	r3, r3, [r0]
 800efbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800efc2:	6083      	str	r3, [r0, #8]
 800efc4:	8181      	strh	r1, [r0, #12]
 800efc6:	6643      	str	r3, [r0, #100]	; 0x64
 800efc8:	81c2      	strh	r2, [r0, #14]
 800efca:	6183      	str	r3, [r0, #24]
 800efcc:	4619      	mov	r1, r3
 800efce:	2208      	movs	r2, #8
 800efd0:	305c      	adds	r0, #92	; 0x5c
 800efd2:	f000 f92d 	bl	800f230 <memset>
 800efd6:	4b0d      	ldr	r3, [pc, #52]	; (800f00c <std+0x58>)
 800efd8:	6263      	str	r3, [r4, #36]	; 0x24
 800efda:	4b0d      	ldr	r3, [pc, #52]	; (800f010 <std+0x5c>)
 800efdc:	62a3      	str	r3, [r4, #40]	; 0x28
 800efde:	4b0d      	ldr	r3, [pc, #52]	; (800f014 <std+0x60>)
 800efe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800efe2:	4b0d      	ldr	r3, [pc, #52]	; (800f018 <std+0x64>)
 800efe4:	6323      	str	r3, [r4, #48]	; 0x30
 800efe6:	4b0d      	ldr	r3, [pc, #52]	; (800f01c <std+0x68>)
 800efe8:	6224      	str	r4, [r4, #32]
 800efea:	429c      	cmp	r4, r3
 800efec:	d006      	beq.n	800effc <std+0x48>
 800efee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800eff2:	4294      	cmp	r4, r2
 800eff4:	d002      	beq.n	800effc <std+0x48>
 800eff6:	33d0      	adds	r3, #208	; 0xd0
 800eff8:	429c      	cmp	r4, r3
 800effa:	d105      	bne.n	800f008 <std+0x54>
 800effc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f004:	f000 b9ca 	b.w	800f39c <__retarget_lock_init_recursive>
 800f008:	bd10      	pop	{r4, pc}
 800f00a:	bf00      	nop
 800f00c:	0800f139 	.word	0x0800f139
 800f010:	0800f15b 	.word	0x0800f15b
 800f014:	0800f193 	.word	0x0800f193
 800f018:	0800f1b7 	.word	0x0800f1b7
 800f01c:	20003564 	.word	0x20003564

0800f020 <stdio_exit_handler>:
 800f020:	4a02      	ldr	r2, [pc, #8]	; (800f02c <stdio_exit_handler+0xc>)
 800f022:	4903      	ldr	r1, [pc, #12]	; (800f030 <stdio_exit_handler+0x10>)
 800f024:	4803      	ldr	r0, [pc, #12]	; (800f034 <stdio_exit_handler+0x14>)
 800f026:	f000 b869 	b.w	800f0fc <_fwalk_sglue>
 800f02a:	bf00      	nop
 800f02c:	2000019c 	.word	0x2000019c
 800f030:	08010d01 	.word	0x08010d01
 800f034:	20000314 	.word	0x20000314

0800f038 <cleanup_stdio>:
 800f038:	6841      	ldr	r1, [r0, #4]
 800f03a:	4b0c      	ldr	r3, [pc, #48]	; (800f06c <cleanup_stdio+0x34>)
 800f03c:	4299      	cmp	r1, r3
 800f03e:	b510      	push	{r4, lr}
 800f040:	4604      	mov	r4, r0
 800f042:	d001      	beq.n	800f048 <cleanup_stdio+0x10>
 800f044:	f001 fe5c 	bl	8010d00 <_fflush_r>
 800f048:	68a1      	ldr	r1, [r4, #8]
 800f04a:	4b09      	ldr	r3, [pc, #36]	; (800f070 <cleanup_stdio+0x38>)
 800f04c:	4299      	cmp	r1, r3
 800f04e:	d002      	beq.n	800f056 <cleanup_stdio+0x1e>
 800f050:	4620      	mov	r0, r4
 800f052:	f001 fe55 	bl	8010d00 <_fflush_r>
 800f056:	68e1      	ldr	r1, [r4, #12]
 800f058:	4b06      	ldr	r3, [pc, #24]	; (800f074 <cleanup_stdio+0x3c>)
 800f05a:	4299      	cmp	r1, r3
 800f05c:	d004      	beq.n	800f068 <cleanup_stdio+0x30>
 800f05e:	4620      	mov	r0, r4
 800f060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f064:	f001 be4c 	b.w	8010d00 <_fflush_r>
 800f068:	bd10      	pop	{r4, pc}
 800f06a:	bf00      	nop
 800f06c:	20003564 	.word	0x20003564
 800f070:	200035cc 	.word	0x200035cc
 800f074:	20003634 	.word	0x20003634

0800f078 <global_stdio_init.part.0>:
 800f078:	b510      	push	{r4, lr}
 800f07a:	4b0b      	ldr	r3, [pc, #44]	; (800f0a8 <global_stdio_init.part.0+0x30>)
 800f07c:	4c0b      	ldr	r4, [pc, #44]	; (800f0ac <global_stdio_init.part.0+0x34>)
 800f07e:	4a0c      	ldr	r2, [pc, #48]	; (800f0b0 <global_stdio_init.part.0+0x38>)
 800f080:	601a      	str	r2, [r3, #0]
 800f082:	4620      	mov	r0, r4
 800f084:	2200      	movs	r2, #0
 800f086:	2104      	movs	r1, #4
 800f088:	f7ff ff94 	bl	800efb4 <std>
 800f08c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f090:	2201      	movs	r2, #1
 800f092:	2109      	movs	r1, #9
 800f094:	f7ff ff8e 	bl	800efb4 <std>
 800f098:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f09c:	2202      	movs	r2, #2
 800f09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0a2:	2112      	movs	r1, #18
 800f0a4:	f7ff bf86 	b.w	800efb4 <std>
 800f0a8:	2000369c 	.word	0x2000369c
 800f0ac:	20003564 	.word	0x20003564
 800f0b0:	0800f021 	.word	0x0800f021

0800f0b4 <__sfp_lock_acquire>:
 800f0b4:	4801      	ldr	r0, [pc, #4]	; (800f0bc <__sfp_lock_acquire+0x8>)
 800f0b6:	f000 b972 	b.w	800f39e <__retarget_lock_acquire_recursive>
 800f0ba:	bf00      	nop
 800f0bc:	200036a5 	.word	0x200036a5

0800f0c0 <__sfp_lock_release>:
 800f0c0:	4801      	ldr	r0, [pc, #4]	; (800f0c8 <__sfp_lock_release+0x8>)
 800f0c2:	f000 b96d 	b.w	800f3a0 <__retarget_lock_release_recursive>
 800f0c6:	bf00      	nop
 800f0c8:	200036a5 	.word	0x200036a5

0800f0cc <__sinit>:
 800f0cc:	b510      	push	{r4, lr}
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	f7ff fff0 	bl	800f0b4 <__sfp_lock_acquire>
 800f0d4:	6a23      	ldr	r3, [r4, #32]
 800f0d6:	b11b      	cbz	r3, 800f0e0 <__sinit+0x14>
 800f0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0dc:	f7ff bff0 	b.w	800f0c0 <__sfp_lock_release>
 800f0e0:	4b04      	ldr	r3, [pc, #16]	; (800f0f4 <__sinit+0x28>)
 800f0e2:	6223      	str	r3, [r4, #32]
 800f0e4:	4b04      	ldr	r3, [pc, #16]	; (800f0f8 <__sinit+0x2c>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d1f5      	bne.n	800f0d8 <__sinit+0xc>
 800f0ec:	f7ff ffc4 	bl	800f078 <global_stdio_init.part.0>
 800f0f0:	e7f2      	b.n	800f0d8 <__sinit+0xc>
 800f0f2:	bf00      	nop
 800f0f4:	0800f039 	.word	0x0800f039
 800f0f8:	2000369c 	.word	0x2000369c

0800f0fc <_fwalk_sglue>:
 800f0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f100:	4607      	mov	r7, r0
 800f102:	4688      	mov	r8, r1
 800f104:	4614      	mov	r4, r2
 800f106:	2600      	movs	r6, #0
 800f108:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f10c:	f1b9 0901 	subs.w	r9, r9, #1
 800f110:	d505      	bpl.n	800f11e <_fwalk_sglue+0x22>
 800f112:	6824      	ldr	r4, [r4, #0]
 800f114:	2c00      	cmp	r4, #0
 800f116:	d1f7      	bne.n	800f108 <_fwalk_sglue+0xc>
 800f118:	4630      	mov	r0, r6
 800f11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f11e:	89ab      	ldrh	r3, [r5, #12]
 800f120:	2b01      	cmp	r3, #1
 800f122:	d907      	bls.n	800f134 <_fwalk_sglue+0x38>
 800f124:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f128:	3301      	adds	r3, #1
 800f12a:	d003      	beq.n	800f134 <_fwalk_sglue+0x38>
 800f12c:	4629      	mov	r1, r5
 800f12e:	4638      	mov	r0, r7
 800f130:	47c0      	blx	r8
 800f132:	4306      	orrs	r6, r0
 800f134:	3568      	adds	r5, #104	; 0x68
 800f136:	e7e9      	b.n	800f10c <_fwalk_sglue+0x10>

0800f138 <__sread>:
 800f138:	b510      	push	{r4, lr}
 800f13a:	460c      	mov	r4, r1
 800f13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f140:	f000 f8de 	bl	800f300 <_read_r>
 800f144:	2800      	cmp	r0, #0
 800f146:	bfab      	itete	ge
 800f148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f14a:	89a3      	ldrhlt	r3, [r4, #12]
 800f14c:	181b      	addge	r3, r3, r0
 800f14e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f152:	bfac      	ite	ge
 800f154:	6563      	strge	r3, [r4, #84]	; 0x54
 800f156:	81a3      	strhlt	r3, [r4, #12]
 800f158:	bd10      	pop	{r4, pc}

0800f15a <__swrite>:
 800f15a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f15e:	461f      	mov	r7, r3
 800f160:	898b      	ldrh	r3, [r1, #12]
 800f162:	05db      	lsls	r3, r3, #23
 800f164:	4605      	mov	r5, r0
 800f166:	460c      	mov	r4, r1
 800f168:	4616      	mov	r6, r2
 800f16a:	d505      	bpl.n	800f178 <__swrite+0x1e>
 800f16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f170:	2302      	movs	r3, #2
 800f172:	2200      	movs	r2, #0
 800f174:	f000 f8b2 	bl	800f2dc <_lseek_r>
 800f178:	89a3      	ldrh	r3, [r4, #12]
 800f17a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f17e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f182:	81a3      	strh	r3, [r4, #12]
 800f184:	4632      	mov	r2, r6
 800f186:	463b      	mov	r3, r7
 800f188:	4628      	mov	r0, r5
 800f18a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f18e:	f000 b8c9 	b.w	800f324 <_write_r>

0800f192 <__sseek>:
 800f192:	b510      	push	{r4, lr}
 800f194:	460c      	mov	r4, r1
 800f196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f19a:	f000 f89f 	bl	800f2dc <_lseek_r>
 800f19e:	1c43      	adds	r3, r0, #1
 800f1a0:	89a3      	ldrh	r3, [r4, #12]
 800f1a2:	bf15      	itete	ne
 800f1a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f1a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1ae:	81a3      	strheq	r3, [r4, #12]
 800f1b0:	bf18      	it	ne
 800f1b2:	81a3      	strhne	r3, [r4, #12]
 800f1b4:	bd10      	pop	{r4, pc}

0800f1b6 <__sclose>:
 800f1b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1ba:	f000 b87f 	b.w	800f2bc <_close_r>

0800f1be <_vsniprintf_r>:
 800f1be:	b530      	push	{r4, r5, lr}
 800f1c0:	4614      	mov	r4, r2
 800f1c2:	2c00      	cmp	r4, #0
 800f1c4:	b09b      	sub	sp, #108	; 0x6c
 800f1c6:	4605      	mov	r5, r0
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	da05      	bge.n	800f1d8 <_vsniprintf_r+0x1a>
 800f1cc:	238b      	movs	r3, #139	; 0x8b
 800f1ce:	6003      	str	r3, [r0, #0]
 800f1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d4:	b01b      	add	sp, #108	; 0x6c
 800f1d6:	bd30      	pop	{r4, r5, pc}
 800f1d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f1dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f1e0:	bf14      	ite	ne
 800f1e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f1e6:	4623      	moveq	r3, r4
 800f1e8:	9302      	str	r3, [sp, #8]
 800f1ea:	9305      	str	r3, [sp, #20]
 800f1ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f1f0:	9100      	str	r1, [sp, #0]
 800f1f2:	9104      	str	r1, [sp, #16]
 800f1f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f1f8:	4669      	mov	r1, sp
 800f1fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f1fc:	f001 fa6c 	bl	80106d8 <_svfiprintf_r>
 800f200:	1c43      	adds	r3, r0, #1
 800f202:	bfbc      	itt	lt
 800f204:	238b      	movlt	r3, #139	; 0x8b
 800f206:	602b      	strlt	r3, [r5, #0]
 800f208:	2c00      	cmp	r4, #0
 800f20a:	d0e3      	beq.n	800f1d4 <_vsniprintf_r+0x16>
 800f20c:	9b00      	ldr	r3, [sp, #0]
 800f20e:	2200      	movs	r2, #0
 800f210:	701a      	strb	r2, [r3, #0]
 800f212:	e7df      	b.n	800f1d4 <_vsniprintf_r+0x16>

0800f214 <vsniprintf>:
 800f214:	b507      	push	{r0, r1, r2, lr}
 800f216:	9300      	str	r3, [sp, #0]
 800f218:	4613      	mov	r3, r2
 800f21a:	460a      	mov	r2, r1
 800f21c:	4601      	mov	r1, r0
 800f21e:	4803      	ldr	r0, [pc, #12]	; (800f22c <vsniprintf+0x18>)
 800f220:	6800      	ldr	r0, [r0, #0]
 800f222:	f7ff ffcc 	bl	800f1be <_vsniprintf_r>
 800f226:	b003      	add	sp, #12
 800f228:	f85d fb04 	ldr.w	pc, [sp], #4
 800f22c:	20000360 	.word	0x20000360

0800f230 <memset>:
 800f230:	4402      	add	r2, r0
 800f232:	4603      	mov	r3, r0
 800f234:	4293      	cmp	r3, r2
 800f236:	d100      	bne.n	800f23a <memset+0xa>
 800f238:	4770      	bx	lr
 800f23a:	f803 1b01 	strb.w	r1, [r3], #1
 800f23e:	e7f9      	b.n	800f234 <memset+0x4>

0800f240 <strncmp>:
 800f240:	b510      	push	{r4, lr}
 800f242:	b16a      	cbz	r2, 800f260 <strncmp+0x20>
 800f244:	3901      	subs	r1, #1
 800f246:	1884      	adds	r4, r0, r2
 800f248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f24c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f250:	429a      	cmp	r2, r3
 800f252:	d103      	bne.n	800f25c <strncmp+0x1c>
 800f254:	42a0      	cmp	r0, r4
 800f256:	d001      	beq.n	800f25c <strncmp+0x1c>
 800f258:	2a00      	cmp	r2, #0
 800f25a:	d1f5      	bne.n	800f248 <strncmp+0x8>
 800f25c:	1ad0      	subs	r0, r2, r3
 800f25e:	bd10      	pop	{r4, pc}
 800f260:	4610      	mov	r0, r2
 800f262:	e7fc      	b.n	800f25e <strncmp+0x1e>

0800f264 <__strtok_r>:
 800f264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f266:	b908      	cbnz	r0, 800f26c <__strtok_r+0x8>
 800f268:	6810      	ldr	r0, [r2, #0]
 800f26a:	b188      	cbz	r0, 800f290 <__strtok_r+0x2c>
 800f26c:	4604      	mov	r4, r0
 800f26e:	4620      	mov	r0, r4
 800f270:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f274:	460f      	mov	r7, r1
 800f276:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f27a:	b91e      	cbnz	r6, 800f284 <__strtok_r+0x20>
 800f27c:	b965      	cbnz	r5, 800f298 <__strtok_r+0x34>
 800f27e:	6015      	str	r5, [r2, #0]
 800f280:	4628      	mov	r0, r5
 800f282:	e005      	b.n	800f290 <__strtok_r+0x2c>
 800f284:	42b5      	cmp	r5, r6
 800f286:	d1f6      	bne.n	800f276 <__strtok_r+0x12>
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d1f0      	bne.n	800f26e <__strtok_r+0xa>
 800f28c:	6014      	str	r4, [r2, #0]
 800f28e:	7003      	strb	r3, [r0, #0]
 800f290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f292:	461c      	mov	r4, r3
 800f294:	e00c      	b.n	800f2b0 <__strtok_r+0x4c>
 800f296:	b915      	cbnz	r5, 800f29e <__strtok_r+0x3a>
 800f298:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f29c:	460e      	mov	r6, r1
 800f29e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f2a2:	42ab      	cmp	r3, r5
 800f2a4:	d1f7      	bne.n	800f296 <__strtok_r+0x32>
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d0f3      	beq.n	800f292 <__strtok_r+0x2e>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f2b0:	6014      	str	r4, [r2, #0]
 800f2b2:	e7ed      	b.n	800f290 <__strtok_r+0x2c>

0800f2b4 <strtok_r>:
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	f7ff bfd5 	b.w	800f264 <__strtok_r>
	...

0800f2bc <_close_r>:
 800f2bc:	b538      	push	{r3, r4, r5, lr}
 800f2be:	4d06      	ldr	r5, [pc, #24]	; (800f2d8 <_close_r+0x1c>)
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	4608      	mov	r0, r1
 800f2c6:	602b      	str	r3, [r5, #0]
 800f2c8:	f7f2 f849 	bl	800135e <_close>
 800f2cc:	1c43      	adds	r3, r0, #1
 800f2ce:	d102      	bne.n	800f2d6 <_close_r+0x1a>
 800f2d0:	682b      	ldr	r3, [r5, #0]
 800f2d2:	b103      	cbz	r3, 800f2d6 <_close_r+0x1a>
 800f2d4:	6023      	str	r3, [r4, #0]
 800f2d6:	bd38      	pop	{r3, r4, r5, pc}
 800f2d8:	200036a0 	.word	0x200036a0

0800f2dc <_lseek_r>:
 800f2dc:	b538      	push	{r3, r4, r5, lr}
 800f2de:	4d07      	ldr	r5, [pc, #28]	; (800f2fc <_lseek_r+0x20>)
 800f2e0:	4604      	mov	r4, r0
 800f2e2:	4608      	mov	r0, r1
 800f2e4:	4611      	mov	r1, r2
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	602a      	str	r2, [r5, #0]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	f7f2 f85e 	bl	80013ac <_lseek>
 800f2f0:	1c43      	adds	r3, r0, #1
 800f2f2:	d102      	bne.n	800f2fa <_lseek_r+0x1e>
 800f2f4:	682b      	ldr	r3, [r5, #0]
 800f2f6:	b103      	cbz	r3, 800f2fa <_lseek_r+0x1e>
 800f2f8:	6023      	str	r3, [r4, #0]
 800f2fa:	bd38      	pop	{r3, r4, r5, pc}
 800f2fc:	200036a0 	.word	0x200036a0

0800f300 <_read_r>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	4d07      	ldr	r5, [pc, #28]	; (800f320 <_read_r+0x20>)
 800f304:	4604      	mov	r4, r0
 800f306:	4608      	mov	r0, r1
 800f308:	4611      	mov	r1, r2
 800f30a:	2200      	movs	r2, #0
 800f30c:	602a      	str	r2, [r5, #0]
 800f30e:	461a      	mov	r2, r3
 800f310:	f7f1 ffec 	bl	80012ec <_read>
 800f314:	1c43      	adds	r3, r0, #1
 800f316:	d102      	bne.n	800f31e <_read_r+0x1e>
 800f318:	682b      	ldr	r3, [r5, #0]
 800f31a:	b103      	cbz	r3, 800f31e <_read_r+0x1e>
 800f31c:	6023      	str	r3, [r4, #0]
 800f31e:	bd38      	pop	{r3, r4, r5, pc}
 800f320:	200036a0 	.word	0x200036a0

0800f324 <_write_r>:
 800f324:	b538      	push	{r3, r4, r5, lr}
 800f326:	4d07      	ldr	r5, [pc, #28]	; (800f344 <_write_r+0x20>)
 800f328:	4604      	mov	r4, r0
 800f32a:	4608      	mov	r0, r1
 800f32c:	4611      	mov	r1, r2
 800f32e:	2200      	movs	r2, #0
 800f330:	602a      	str	r2, [r5, #0]
 800f332:	461a      	mov	r2, r3
 800f334:	f7f1 fff7 	bl	8001326 <_write>
 800f338:	1c43      	adds	r3, r0, #1
 800f33a:	d102      	bne.n	800f342 <_write_r+0x1e>
 800f33c:	682b      	ldr	r3, [r5, #0]
 800f33e:	b103      	cbz	r3, 800f342 <_write_r+0x1e>
 800f340:	6023      	str	r3, [r4, #0]
 800f342:	bd38      	pop	{r3, r4, r5, pc}
 800f344:	200036a0 	.word	0x200036a0

0800f348 <__errno>:
 800f348:	4b01      	ldr	r3, [pc, #4]	; (800f350 <__errno+0x8>)
 800f34a:	6818      	ldr	r0, [r3, #0]
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	20000360 	.word	0x20000360

0800f354 <__libc_init_array>:
 800f354:	b570      	push	{r4, r5, r6, lr}
 800f356:	4d0d      	ldr	r5, [pc, #52]	; (800f38c <__libc_init_array+0x38>)
 800f358:	4c0d      	ldr	r4, [pc, #52]	; (800f390 <__libc_init_array+0x3c>)
 800f35a:	1b64      	subs	r4, r4, r5
 800f35c:	10a4      	asrs	r4, r4, #2
 800f35e:	2600      	movs	r6, #0
 800f360:	42a6      	cmp	r6, r4
 800f362:	d109      	bne.n	800f378 <__libc_init_array+0x24>
 800f364:	4d0b      	ldr	r5, [pc, #44]	; (800f394 <__libc_init_array+0x40>)
 800f366:	4c0c      	ldr	r4, [pc, #48]	; (800f398 <__libc_init_array+0x44>)
 800f368:	f002 f84a 	bl	8011400 <_init>
 800f36c:	1b64      	subs	r4, r4, r5
 800f36e:	10a4      	asrs	r4, r4, #2
 800f370:	2600      	movs	r6, #0
 800f372:	42a6      	cmp	r6, r4
 800f374:	d105      	bne.n	800f382 <__libc_init_array+0x2e>
 800f376:	bd70      	pop	{r4, r5, r6, pc}
 800f378:	f855 3b04 	ldr.w	r3, [r5], #4
 800f37c:	4798      	blx	r3
 800f37e:	3601      	adds	r6, #1
 800f380:	e7ee      	b.n	800f360 <__libc_init_array+0xc>
 800f382:	f855 3b04 	ldr.w	r3, [r5], #4
 800f386:	4798      	blx	r3
 800f388:	3601      	adds	r6, #1
 800f38a:	e7f2      	b.n	800f372 <__libc_init_array+0x1e>
 800f38c:	08011bd4 	.word	0x08011bd4
 800f390:	08011bd4 	.word	0x08011bd4
 800f394:	08011bd4 	.word	0x08011bd4
 800f398:	08011bd8 	.word	0x08011bd8

0800f39c <__retarget_lock_init_recursive>:
 800f39c:	4770      	bx	lr

0800f39e <__retarget_lock_acquire_recursive>:
 800f39e:	4770      	bx	lr

0800f3a0 <__retarget_lock_release_recursive>:
 800f3a0:	4770      	bx	lr

0800f3a2 <strcpy>:
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3a8:	f803 2b01 	strb.w	r2, [r3], #1
 800f3ac:	2a00      	cmp	r2, #0
 800f3ae:	d1f9      	bne.n	800f3a4 <strcpy+0x2>
 800f3b0:	4770      	bx	lr

0800f3b2 <memcpy>:
 800f3b2:	440a      	add	r2, r1
 800f3b4:	4291      	cmp	r1, r2
 800f3b6:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3ba:	d100      	bne.n	800f3be <memcpy+0xc>
 800f3bc:	4770      	bx	lr
 800f3be:	b510      	push	{r4, lr}
 800f3c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3c8:	4291      	cmp	r1, r2
 800f3ca:	d1f9      	bne.n	800f3c0 <memcpy+0xe>
 800f3cc:	bd10      	pop	{r4, pc}
	...

0800f3d0 <nan>:
 800f3d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f3d8 <nan+0x8>
 800f3d4:	4770      	bx	lr
 800f3d6:	bf00      	nop
 800f3d8:	00000000 	.word	0x00000000
 800f3dc:	7ff80000 	.word	0x7ff80000

0800f3e0 <nanf>:
 800f3e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f3e8 <nanf+0x8>
 800f3e4:	4770      	bx	lr
 800f3e6:	bf00      	nop
 800f3e8:	7fc00000 	.word	0x7fc00000

0800f3ec <_free_r>:
 800f3ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3ee:	2900      	cmp	r1, #0
 800f3f0:	d044      	beq.n	800f47c <_free_r+0x90>
 800f3f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3f6:	9001      	str	r0, [sp, #4]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	f1a1 0404 	sub.w	r4, r1, #4
 800f3fe:	bfb8      	it	lt
 800f400:	18e4      	addlt	r4, r4, r3
 800f402:	f000 fc49 	bl	800fc98 <__malloc_lock>
 800f406:	4a1e      	ldr	r2, [pc, #120]	; (800f480 <_free_r+0x94>)
 800f408:	9801      	ldr	r0, [sp, #4]
 800f40a:	6813      	ldr	r3, [r2, #0]
 800f40c:	b933      	cbnz	r3, 800f41c <_free_r+0x30>
 800f40e:	6063      	str	r3, [r4, #4]
 800f410:	6014      	str	r4, [r2, #0]
 800f412:	b003      	add	sp, #12
 800f414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f418:	f000 bc44 	b.w	800fca4 <__malloc_unlock>
 800f41c:	42a3      	cmp	r3, r4
 800f41e:	d908      	bls.n	800f432 <_free_r+0x46>
 800f420:	6825      	ldr	r5, [r4, #0]
 800f422:	1961      	adds	r1, r4, r5
 800f424:	428b      	cmp	r3, r1
 800f426:	bf01      	itttt	eq
 800f428:	6819      	ldreq	r1, [r3, #0]
 800f42a:	685b      	ldreq	r3, [r3, #4]
 800f42c:	1949      	addeq	r1, r1, r5
 800f42e:	6021      	streq	r1, [r4, #0]
 800f430:	e7ed      	b.n	800f40e <_free_r+0x22>
 800f432:	461a      	mov	r2, r3
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	b10b      	cbz	r3, 800f43c <_free_r+0x50>
 800f438:	42a3      	cmp	r3, r4
 800f43a:	d9fa      	bls.n	800f432 <_free_r+0x46>
 800f43c:	6811      	ldr	r1, [r2, #0]
 800f43e:	1855      	adds	r5, r2, r1
 800f440:	42a5      	cmp	r5, r4
 800f442:	d10b      	bne.n	800f45c <_free_r+0x70>
 800f444:	6824      	ldr	r4, [r4, #0]
 800f446:	4421      	add	r1, r4
 800f448:	1854      	adds	r4, r2, r1
 800f44a:	42a3      	cmp	r3, r4
 800f44c:	6011      	str	r1, [r2, #0]
 800f44e:	d1e0      	bne.n	800f412 <_free_r+0x26>
 800f450:	681c      	ldr	r4, [r3, #0]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	6053      	str	r3, [r2, #4]
 800f456:	440c      	add	r4, r1
 800f458:	6014      	str	r4, [r2, #0]
 800f45a:	e7da      	b.n	800f412 <_free_r+0x26>
 800f45c:	d902      	bls.n	800f464 <_free_r+0x78>
 800f45e:	230c      	movs	r3, #12
 800f460:	6003      	str	r3, [r0, #0]
 800f462:	e7d6      	b.n	800f412 <_free_r+0x26>
 800f464:	6825      	ldr	r5, [r4, #0]
 800f466:	1961      	adds	r1, r4, r5
 800f468:	428b      	cmp	r3, r1
 800f46a:	bf04      	itt	eq
 800f46c:	6819      	ldreq	r1, [r3, #0]
 800f46e:	685b      	ldreq	r3, [r3, #4]
 800f470:	6063      	str	r3, [r4, #4]
 800f472:	bf04      	itt	eq
 800f474:	1949      	addeq	r1, r1, r5
 800f476:	6021      	streq	r1, [r4, #0]
 800f478:	6054      	str	r4, [r2, #4]
 800f47a:	e7ca      	b.n	800f412 <_free_r+0x26>
 800f47c:	b003      	add	sp, #12
 800f47e:	bd30      	pop	{r4, r5, pc}
 800f480:	200036a8 	.word	0x200036a8

0800f484 <rshift>:
 800f484:	6903      	ldr	r3, [r0, #16]
 800f486:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f48a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f48e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f492:	f100 0414 	add.w	r4, r0, #20
 800f496:	dd45      	ble.n	800f524 <rshift+0xa0>
 800f498:	f011 011f 	ands.w	r1, r1, #31
 800f49c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f4a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f4a4:	d10c      	bne.n	800f4c0 <rshift+0x3c>
 800f4a6:	f100 0710 	add.w	r7, r0, #16
 800f4aa:	4629      	mov	r1, r5
 800f4ac:	42b1      	cmp	r1, r6
 800f4ae:	d334      	bcc.n	800f51a <rshift+0x96>
 800f4b0:	1a9b      	subs	r3, r3, r2
 800f4b2:	009b      	lsls	r3, r3, #2
 800f4b4:	1eea      	subs	r2, r5, #3
 800f4b6:	4296      	cmp	r6, r2
 800f4b8:	bf38      	it	cc
 800f4ba:	2300      	movcc	r3, #0
 800f4bc:	4423      	add	r3, r4
 800f4be:	e015      	b.n	800f4ec <rshift+0x68>
 800f4c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f4c4:	f1c1 0820 	rsb	r8, r1, #32
 800f4c8:	40cf      	lsrs	r7, r1
 800f4ca:	f105 0e04 	add.w	lr, r5, #4
 800f4ce:	46a1      	mov	r9, r4
 800f4d0:	4576      	cmp	r6, lr
 800f4d2:	46f4      	mov	ip, lr
 800f4d4:	d815      	bhi.n	800f502 <rshift+0x7e>
 800f4d6:	1a9a      	subs	r2, r3, r2
 800f4d8:	0092      	lsls	r2, r2, #2
 800f4da:	3a04      	subs	r2, #4
 800f4dc:	3501      	adds	r5, #1
 800f4de:	42ae      	cmp	r6, r5
 800f4e0:	bf38      	it	cc
 800f4e2:	2200      	movcc	r2, #0
 800f4e4:	18a3      	adds	r3, r4, r2
 800f4e6:	50a7      	str	r7, [r4, r2]
 800f4e8:	b107      	cbz	r7, 800f4ec <rshift+0x68>
 800f4ea:	3304      	adds	r3, #4
 800f4ec:	1b1a      	subs	r2, r3, r4
 800f4ee:	42a3      	cmp	r3, r4
 800f4f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f4f4:	bf08      	it	eq
 800f4f6:	2300      	moveq	r3, #0
 800f4f8:	6102      	str	r2, [r0, #16]
 800f4fa:	bf08      	it	eq
 800f4fc:	6143      	streq	r3, [r0, #20]
 800f4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f502:	f8dc c000 	ldr.w	ip, [ip]
 800f506:	fa0c fc08 	lsl.w	ip, ip, r8
 800f50a:	ea4c 0707 	orr.w	r7, ip, r7
 800f50e:	f849 7b04 	str.w	r7, [r9], #4
 800f512:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f516:	40cf      	lsrs	r7, r1
 800f518:	e7da      	b.n	800f4d0 <rshift+0x4c>
 800f51a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f51e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f522:	e7c3      	b.n	800f4ac <rshift+0x28>
 800f524:	4623      	mov	r3, r4
 800f526:	e7e1      	b.n	800f4ec <rshift+0x68>

0800f528 <__hexdig_fun>:
 800f528:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f52c:	2b09      	cmp	r3, #9
 800f52e:	d802      	bhi.n	800f536 <__hexdig_fun+0xe>
 800f530:	3820      	subs	r0, #32
 800f532:	b2c0      	uxtb	r0, r0
 800f534:	4770      	bx	lr
 800f536:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f53a:	2b05      	cmp	r3, #5
 800f53c:	d801      	bhi.n	800f542 <__hexdig_fun+0x1a>
 800f53e:	3847      	subs	r0, #71	; 0x47
 800f540:	e7f7      	b.n	800f532 <__hexdig_fun+0xa>
 800f542:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f546:	2b05      	cmp	r3, #5
 800f548:	d801      	bhi.n	800f54e <__hexdig_fun+0x26>
 800f54a:	3827      	subs	r0, #39	; 0x27
 800f54c:	e7f1      	b.n	800f532 <__hexdig_fun+0xa>
 800f54e:	2000      	movs	r0, #0
 800f550:	4770      	bx	lr
	...

0800f554 <__gethex>:
 800f554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f558:	4617      	mov	r7, r2
 800f55a:	680a      	ldr	r2, [r1, #0]
 800f55c:	b085      	sub	sp, #20
 800f55e:	f102 0b02 	add.w	fp, r2, #2
 800f562:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f566:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f56a:	4681      	mov	r9, r0
 800f56c:	468a      	mov	sl, r1
 800f56e:	9302      	str	r3, [sp, #8]
 800f570:	32fe      	adds	r2, #254	; 0xfe
 800f572:	eb02 030b 	add.w	r3, r2, fp
 800f576:	46d8      	mov	r8, fp
 800f578:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800f57c:	9301      	str	r3, [sp, #4]
 800f57e:	2830      	cmp	r0, #48	; 0x30
 800f580:	d0f7      	beq.n	800f572 <__gethex+0x1e>
 800f582:	f7ff ffd1 	bl	800f528 <__hexdig_fun>
 800f586:	4604      	mov	r4, r0
 800f588:	2800      	cmp	r0, #0
 800f58a:	d138      	bne.n	800f5fe <__gethex+0xaa>
 800f58c:	49a7      	ldr	r1, [pc, #668]	; (800f82c <__gethex+0x2d8>)
 800f58e:	2201      	movs	r2, #1
 800f590:	4640      	mov	r0, r8
 800f592:	f7ff fe55 	bl	800f240 <strncmp>
 800f596:	4606      	mov	r6, r0
 800f598:	2800      	cmp	r0, #0
 800f59a:	d169      	bne.n	800f670 <__gethex+0x11c>
 800f59c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f5a0:	465d      	mov	r5, fp
 800f5a2:	f7ff ffc1 	bl	800f528 <__hexdig_fun>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	d064      	beq.n	800f674 <__gethex+0x120>
 800f5aa:	465a      	mov	r2, fp
 800f5ac:	7810      	ldrb	r0, [r2, #0]
 800f5ae:	2830      	cmp	r0, #48	; 0x30
 800f5b0:	4690      	mov	r8, r2
 800f5b2:	f102 0201 	add.w	r2, r2, #1
 800f5b6:	d0f9      	beq.n	800f5ac <__gethex+0x58>
 800f5b8:	f7ff ffb6 	bl	800f528 <__hexdig_fun>
 800f5bc:	2301      	movs	r3, #1
 800f5be:	fab0 f480 	clz	r4, r0
 800f5c2:	0964      	lsrs	r4, r4, #5
 800f5c4:	465e      	mov	r6, fp
 800f5c6:	9301      	str	r3, [sp, #4]
 800f5c8:	4642      	mov	r2, r8
 800f5ca:	4615      	mov	r5, r2
 800f5cc:	3201      	adds	r2, #1
 800f5ce:	7828      	ldrb	r0, [r5, #0]
 800f5d0:	f7ff ffaa 	bl	800f528 <__hexdig_fun>
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	d1f8      	bne.n	800f5ca <__gethex+0x76>
 800f5d8:	4994      	ldr	r1, [pc, #592]	; (800f82c <__gethex+0x2d8>)
 800f5da:	2201      	movs	r2, #1
 800f5dc:	4628      	mov	r0, r5
 800f5de:	f7ff fe2f 	bl	800f240 <strncmp>
 800f5e2:	b978      	cbnz	r0, 800f604 <__gethex+0xb0>
 800f5e4:	b946      	cbnz	r6, 800f5f8 <__gethex+0xa4>
 800f5e6:	1c6e      	adds	r6, r5, #1
 800f5e8:	4632      	mov	r2, r6
 800f5ea:	4615      	mov	r5, r2
 800f5ec:	3201      	adds	r2, #1
 800f5ee:	7828      	ldrb	r0, [r5, #0]
 800f5f0:	f7ff ff9a 	bl	800f528 <__hexdig_fun>
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	d1f8      	bne.n	800f5ea <__gethex+0x96>
 800f5f8:	1b73      	subs	r3, r6, r5
 800f5fa:	009e      	lsls	r6, r3, #2
 800f5fc:	e004      	b.n	800f608 <__gethex+0xb4>
 800f5fe:	2400      	movs	r4, #0
 800f600:	4626      	mov	r6, r4
 800f602:	e7e1      	b.n	800f5c8 <__gethex+0x74>
 800f604:	2e00      	cmp	r6, #0
 800f606:	d1f7      	bne.n	800f5f8 <__gethex+0xa4>
 800f608:	782b      	ldrb	r3, [r5, #0]
 800f60a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f60e:	2b50      	cmp	r3, #80	; 0x50
 800f610:	d13d      	bne.n	800f68e <__gethex+0x13a>
 800f612:	786b      	ldrb	r3, [r5, #1]
 800f614:	2b2b      	cmp	r3, #43	; 0x2b
 800f616:	d02f      	beq.n	800f678 <__gethex+0x124>
 800f618:	2b2d      	cmp	r3, #45	; 0x2d
 800f61a:	d031      	beq.n	800f680 <__gethex+0x12c>
 800f61c:	1c69      	adds	r1, r5, #1
 800f61e:	f04f 0b00 	mov.w	fp, #0
 800f622:	7808      	ldrb	r0, [r1, #0]
 800f624:	f7ff ff80 	bl	800f528 <__hexdig_fun>
 800f628:	1e42      	subs	r2, r0, #1
 800f62a:	b2d2      	uxtb	r2, r2
 800f62c:	2a18      	cmp	r2, #24
 800f62e:	d82e      	bhi.n	800f68e <__gethex+0x13a>
 800f630:	f1a0 0210 	sub.w	r2, r0, #16
 800f634:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f638:	f7ff ff76 	bl	800f528 <__hexdig_fun>
 800f63c:	f100 3cff 	add.w	ip, r0, #4294967295
 800f640:	fa5f fc8c 	uxtb.w	ip, ip
 800f644:	f1bc 0f18 	cmp.w	ip, #24
 800f648:	d91d      	bls.n	800f686 <__gethex+0x132>
 800f64a:	f1bb 0f00 	cmp.w	fp, #0
 800f64e:	d000      	beq.n	800f652 <__gethex+0xfe>
 800f650:	4252      	negs	r2, r2
 800f652:	4416      	add	r6, r2
 800f654:	f8ca 1000 	str.w	r1, [sl]
 800f658:	b1dc      	cbz	r4, 800f692 <__gethex+0x13e>
 800f65a:	9b01      	ldr	r3, [sp, #4]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	bf14      	ite	ne
 800f660:	f04f 0800 	movne.w	r8, #0
 800f664:	f04f 0806 	moveq.w	r8, #6
 800f668:	4640      	mov	r0, r8
 800f66a:	b005      	add	sp, #20
 800f66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f670:	4645      	mov	r5, r8
 800f672:	4626      	mov	r6, r4
 800f674:	2401      	movs	r4, #1
 800f676:	e7c7      	b.n	800f608 <__gethex+0xb4>
 800f678:	f04f 0b00 	mov.w	fp, #0
 800f67c:	1ca9      	adds	r1, r5, #2
 800f67e:	e7d0      	b.n	800f622 <__gethex+0xce>
 800f680:	f04f 0b01 	mov.w	fp, #1
 800f684:	e7fa      	b.n	800f67c <__gethex+0x128>
 800f686:	230a      	movs	r3, #10
 800f688:	fb03 0002 	mla	r0, r3, r2, r0
 800f68c:	e7d0      	b.n	800f630 <__gethex+0xdc>
 800f68e:	4629      	mov	r1, r5
 800f690:	e7e0      	b.n	800f654 <__gethex+0x100>
 800f692:	eba5 0308 	sub.w	r3, r5, r8
 800f696:	3b01      	subs	r3, #1
 800f698:	4621      	mov	r1, r4
 800f69a:	2b07      	cmp	r3, #7
 800f69c:	dc0a      	bgt.n	800f6b4 <__gethex+0x160>
 800f69e:	4648      	mov	r0, r9
 800f6a0:	f000 fb06 	bl	800fcb0 <_Balloc>
 800f6a4:	4604      	mov	r4, r0
 800f6a6:	b940      	cbnz	r0, 800f6ba <__gethex+0x166>
 800f6a8:	4b61      	ldr	r3, [pc, #388]	; (800f830 <__gethex+0x2dc>)
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	21e4      	movs	r1, #228	; 0xe4
 800f6ae:	4861      	ldr	r0, [pc, #388]	; (800f834 <__gethex+0x2e0>)
 800f6b0:	f001 fb78 	bl	8010da4 <__assert_func>
 800f6b4:	3101      	adds	r1, #1
 800f6b6:	105b      	asrs	r3, r3, #1
 800f6b8:	e7ef      	b.n	800f69a <__gethex+0x146>
 800f6ba:	f100 0a14 	add.w	sl, r0, #20
 800f6be:	2300      	movs	r3, #0
 800f6c0:	495a      	ldr	r1, [pc, #360]	; (800f82c <__gethex+0x2d8>)
 800f6c2:	f8cd a004 	str.w	sl, [sp, #4]
 800f6c6:	469b      	mov	fp, r3
 800f6c8:	45a8      	cmp	r8, r5
 800f6ca:	d342      	bcc.n	800f752 <__gethex+0x1fe>
 800f6cc:	9801      	ldr	r0, [sp, #4]
 800f6ce:	f840 bb04 	str.w	fp, [r0], #4
 800f6d2:	eba0 000a 	sub.w	r0, r0, sl
 800f6d6:	1080      	asrs	r0, r0, #2
 800f6d8:	6120      	str	r0, [r4, #16]
 800f6da:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800f6de:	4658      	mov	r0, fp
 800f6e0:	f000 fbd8 	bl	800fe94 <__hi0bits>
 800f6e4:	683d      	ldr	r5, [r7, #0]
 800f6e6:	eba8 0000 	sub.w	r0, r8, r0
 800f6ea:	42a8      	cmp	r0, r5
 800f6ec:	dd59      	ble.n	800f7a2 <__gethex+0x24e>
 800f6ee:	eba0 0805 	sub.w	r8, r0, r5
 800f6f2:	4641      	mov	r1, r8
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f000 ff67 	bl	80105c8 <__any_on>
 800f6fa:	4683      	mov	fp, r0
 800f6fc:	b1b8      	cbz	r0, 800f72e <__gethex+0x1da>
 800f6fe:	f108 33ff 	add.w	r3, r8, #4294967295
 800f702:	1159      	asrs	r1, r3, #5
 800f704:	f003 021f 	and.w	r2, r3, #31
 800f708:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f70c:	f04f 0b01 	mov.w	fp, #1
 800f710:	fa0b f202 	lsl.w	r2, fp, r2
 800f714:	420a      	tst	r2, r1
 800f716:	d00a      	beq.n	800f72e <__gethex+0x1da>
 800f718:	455b      	cmp	r3, fp
 800f71a:	dd06      	ble.n	800f72a <__gethex+0x1d6>
 800f71c:	f1a8 0102 	sub.w	r1, r8, #2
 800f720:	4620      	mov	r0, r4
 800f722:	f000 ff51 	bl	80105c8 <__any_on>
 800f726:	2800      	cmp	r0, #0
 800f728:	d138      	bne.n	800f79c <__gethex+0x248>
 800f72a:	f04f 0b02 	mov.w	fp, #2
 800f72e:	4641      	mov	r1, r8
 800f730:	4620      	mov	r0, r4
 800f732:	f7ff fea7 	bl	800f484 <rshift>
 800f736:	4446      	add	r6, r8
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	42b3      	cmp	r3, r6
 800f73c:	da41      	bge.n	800f7c2 <__gethex+0x26e>
 800f73e:	4621      	mov	r1, r4
 800f740:	4648      	mov	r0, r9
 800f742:	f000 faf5 	bl	800fd30 <_Bfree>
 800f746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f748:	2300      	movs	r3, #0
 800f74a:	6013      	str	r3, [r2, #0]
 800f74c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800f750:	e78a      	b.n	800f668 <__gethex+0x114>
 800f752:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800f756:	2a2e      	cmp	r2, #46	; 0x2e
 800f758:	d014      	beq.n	800f784 <__gethex+0x230>
 800f75a:	2b20      	cmp	r3, #32
 800f75c:	d106      	bne.n	800f76c <__gethex+0x218>
 800f75e:	9b01      	ldr	r3, [sp, #4]
 800f760:	f843 bb04 	str.w	fp, [r3], #4
 800f764:	f04f 0b00 	mov.w	fp, #0
 800f768:	9301      	str	r3, [sp, #4]
 800f76a:	465b      	mov	r3, fp
 800f76c:	7828      	ldrb	r0, [r5, #0]
 800f76e:	9303      	str	r3, [sp, #12]
 800f770:	f7ff feda 	bl	800f528 <__hexdig_fun>
 800f774:	9b03      	ldr	r3, [sp, #12]
 800f776:	f000 000f 	and.w	r0, r0, #15
 800f77a:	4098      	lsls	r0, r3
 800f77c:	ea4b 0b00 	orr.w	fp, fp, r0
 800f780:	3304      	adds	r3, #4
 800f782:	e7a1      	b.n	800f6c8 <__gethex+0x174>
 800f784:	45a8      	cmp	r8, r5
 800f786:	d8e8      	bhi.n	800f75a <__gethex+0x206>
 800f788:	2201      	movs	r2, #1
 800f78a:	4628      	mov	r0, r5
 800f78c:	9303      	str	r3, [sp, #12]
 800f78e:	f7ff fd57 	bl	800f240 <strncmp>
 800f792:	4926      	ldr	r1, [pc, #152]	; (800f82c <__gethex+0x2d8>)
 800f794:	9b03      	ldr	r3, [sp, #12]
 800f796:	2800      	cmp	r0, #0
 800f798:	d1df      	bne.n	800f75a <__gethex+0x206>
 800f79a:	e795      	b.n	800f6c8 <__gethex+0x174>
 800f79c:	f04f 0b03 	mov.w	fp, #3
 800f7a0:	e7c5      	b.n	800f72e <__gethex+0x1da>
 800f7a2:	da0b      	bge.n	800f7bc <__gethex+0x268>
 800f7a4:	eba5 0800 	sub.w	r8, r5, r0
 800f7a8:	4621      	mov	r1, r4
 800f7aa:	4642      	mov	r2, r8
 800f7ac:	4648      	mov	r0, r9
 800f7ae:	f000 fcd9 	bl	8010164 <__lshift>
 800f7b2:	eba6 0608 	sub.w	r6, r6, r8
 800f7b6:	4604      	mov	r4, r0
 800f7b8:	f100 0a14 	add.w	sl, r0, #20
 800f7bc:	f04f 0b00 	mov.w	fp, #0
 800f7c0:	e7ba      	b.n	800f738 <__gethex+0x1e4>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	42b3      	cmp	r3, r6
 800f7c6:	dd73      	ble.n	800f8b0 <__gethex+0x35c>
 800f7c8:	1b9e      	subs	r6, r3, r6
 800f7ca:	42b5      	cmp	r5, r6
 800f7cc:	dc34      	bgt.n	800f838 <__gethex+0x2e4>
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	2b02      	cmp	r3, #2
 800f7d2:	d023      	beq.n	800f81c <__gethex+0x2c8>
 800f7d4:	2b03      	cmp	r3, #3
 800f7d6:	d025      	beq.n	800f824 <__gethex+0x2d0>
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d115      	bne.n	800f808 <__gethex+0x2b4>
 800f7dc:	42b5      	cmp	r5, r6
 800f7de:	d113      	bne.n	800f808 <__gethex+0x2b4>
 800f7e0:	2d01      	cmp	r5, #1
 800f7e2:	d10b      	bne.n	800f7fc <__gethex+0x2a8>
 800f7e4:	9a02      	ldr	r2, [sp, #8]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6013      	str	r3, [r2, #0]
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	6123      	str	r3, [r4, #16]
 800f7ee:	f8ca 3000 	str.w	r3, [sl]
 800f7f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7f4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800f7f8:	601c      	str	r4, [r3, #0]
 800f7fa:	e735      	b.n	800f668 <__gethex+0x114>
 800f7fc:	1e69      	subs	r1, r5, #1
 800f7fe:	4620      	mov	r0, r4
 800f800:	f000 fee2 	bl	80105c8 <__any_on>
 800f804:	2800      	cmp	r0, #0
 800f806:	d1ed      	bne.n	800f7e4 <__gethex+0x290>
 800f808:	4621      	mov	r1, r4
 800f80a:	4648      	mov	r0, r9
 800f80c:	f000 fa90 	bl	800fd30 <_Bfree>
 800f810:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f812:	2300      	movs	r3, #0
 800f814:	6013      	str	r3, [r2, #0]
 800f816:	f04f 0850 	mov.w	r8, #80	; 0x50
 800f81a:	e725      	b.n	800f668 <__gethex+0x114>
 800f81c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d1f2      	bne.n	800f808 <__gethex+0x2b4>
 800f822:	e7df      	b.n	800f7e4 <__gethex+0x290>
 800f824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f826:	2b00      	cmp	r3, #0
 800f828:	d1dc      	bne.n	800f7e4 <__gethex+0x290>
 800f82a:	e7ed      	b.n	800f808 <__gethex+0x2b4>
 800f82c:	08011810 	.word	0x08011810
 800f830:	08011979 	.word	0x08011979
 800f834:	0801198a 	.word	0x0801198a
 800f838:	f106 38ff 	add.w	r8, r6, #4294967295
 800f83c:	f1bb 0f00 	cmp.w	fp, #0
 800f840:	d133      	bne.n	800f8aa <__gethex+0x356>
 800f842:	f1b8 0f00 	cmp.w	r8, #0
 800f846:	d004      	beq.n	800f852 <__gethex+0x2fe>
 800f848:	4641      	mov	r1, r8
 800f84a:	4620      	mov	r0, r4
 800f84c:	f000 febc 	bl	80105c8 <__any_on>
 800f850:	4683      	mov	fp, r0
 800f852:	ea4f 1268 	mov.w	r2, r8, asr #5
 800f856:	2301      	movs	r3, #1
 800f858:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f85c:	f008 081f 	and.w	r8, r8, #31
 800f860:	fa03 f308 	lsl.w	r3, r3, r8
 800f864:	4213      	tst	r3, r2
 800f866:	4631      	mov	r1, r6
 800f868:	4620      	mov	r0, r4
 800f86a:	bf18      	it	ne
 800f86c:	f04b 0b02 	orrne.w	fp, fp, #2
 800f870:	1bad      	subs	r5, r5, r6
 800f872:	f7ff fe07 	bl	800f484 <rshift>
 800f876:	687e      	ldr	r6, [r7, #4]
 800f878:	f04f 0802 	mov.w	r8, #2
 800f87c:	f1bb 0f00 	cmp.w	fp, #0
 800f880:	d04a      	beq.n	800f918 <__gethex+0x3c4>
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2b02      	cmp	r3, #2
 800f886:	d016      	beq.n	800f8b6 <__gethex+0x362>
 800f888:	2b03      	cmp	r3, #3
 800f88a:	d018      	beq.n	800f8be <__gethex+0x36a>
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d109      	bne.n	800f8a4 <__gethex+0x350>
 800f890:	f01b 0f02 	tst.w	fp, #2
 800f894:	d006      	beq.n	800f8a4 <__gethex+0x350>
 800f896:	f8da 3000 	ldr.w	r3, [sl]
 800f89a:	ea4b 0b03 	orr.w	fp, fp, r3
 800f89e:	f01b 0f01 	tst.w	fp, #1
 800f8a2:	d10f      	bne.n	800f8c4 <__gethex+0x370>
 800f8a4:	f048 0810 	orr.w	r8, r8, #16
 800f8a8:	e036      	b.n	800f918 <__gethex+0x3c4>
 800f8aa:	f04f 0b01 	mov.w	fp, #1
 800f8ae:	e7d0      	b.n	800f852 <__gethex+0x2fe>
 800f8b0:	f04f 0801 	mov.w	r8, #1
 800f8b4:	e7e2      	b.n	800f87c <__gethex+0x328>
 800f8b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8b8:	f1c3 0301 	rsb	r3, r3, #1
 800f8bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800f8be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d0ef      	beq.n	800f8a4 <__gethex+0x350>
 800f8c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f8c8:	f104 0214 	add.w	r2, r4, #20
 800f8cc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800f8d0:	9301      	str	r3, [sp, #4]
 800f8d2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	4694      	mov	ip, r2
 800f8da:	f852 1b04 	ldr.w	r1, [r2], #4
 800f8de:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f8e2:	d01e      	beq.n	800f922 <__gethex+0x3ce>
 800f8e4:	3101      	adds	r1, #1
 800f8e6:	f8cc 1000 	str.w	r1, [ip]
 800f8ea:	f1b8 0f02 	cmp.w	r8, #2
 800f8ee:	f104 0214 	add.w	r2, r4, #20
 800f8f2:	d13d      	bne.n	800f970 <__gethex+0x41c>
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	3b01      	subs	r3, #1
 800f8f8:	42ab      	cmp	r3, r5
 800f8fa:	d10b      	bne.n	800f914 <__gethex+0x3c0>
 800f8fc:	1169      	asrs	r1, r5, #5
 800f8fe:	2301      	movs	r3, #1
 800f900:	f005 051f 	and.w	r5, r5, #31
 800f904:	fa03 f505 	lsl.w	r5, r3, r5
 800f908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f90c:	421d      	tst	r5, r3
 800f90e:	bf18      	it	ne
 800f910:	f04f 0801 	movne.w	r8, #1
 800f914:	f048 0820 	orr.w	r8, r8, #32
 800f918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f91a:	601c      	str	r4, [r3, #0]
 800f91c:	9b02      	ldr	r3, [sp, #8]
 800f91e:	601e      	str	r6, [r3, #0]
 800f920:	e6a2      	b.n	800f668 <__gethex+0x114>
 800f922:	4290      	cmp	r0, r2
 800f924:	f842 3c04 	str.w	r3, [r2, #-4]
 800f928:	d8d6      	bhi.n	800f8d8 <__gethex+0x384>
 800f92a:	68a2      	ldr	r2, [r4, #8]
 800f92c:	4593      	cmp	fp, r2
 800f92e:	db17      	blt.n	800f960 <__gethex+0x40c>
 800f930:	6861      	ldr	r1, [r4, #4]
 800f932:	4648      	mov	r0, r9
 800f934:	3101      	adds	r1, #1
 800f936:	f000 f9bb 	bl	800fcb0 <_Balloc>
 800f93a:	4682      	mov	sl, r0
 800f93c:	b918      	cbnz	r0, 800f946 <__gethex+0x3f2>
 800f93e:	4b1b      	ldr	r3, [pc, #108]	; (800f9ac <__gethex+0x458>)
 800f940:	4602      	mov	r2, r0
 800f942:	2184      	movs	r1, #132	; 0x84
 800f944:	e6b3      	b.n	800f6ae <__gethex+0x15a>
 800f946:	6922      	ldr	r2, [r4, #16]
 800f948:	3202      	adds	r2, #2
 800f94a:	f104 010c 	add.w	r1, r4, #12
 800f94e:	0092      	lsls	r2, r2, #2
 800f950:	300c      	adds	r0, #12
 800f952:	f7ff fd2e 	bl	800f3b2 <memcpy>
 800f956:	4621      	mov	r1, r4
 800f958:	4648      	mov	r0, r9
 800f95a:	f000 f9e9 	bl	800fd30 <_Bfree>
 800f95e:	4654      	mov	r4, sl
 800f960:	6922      	ldr	r2, [r4, #16]
 800f962:	1c51      	adds	r1, r2, #1
 800f964:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f968:	6121      	str	r1, [r4, #16]
 800f96a:	2101      	movs	r1, #1
 800f96c:	6151      	str	r1, [r2, #20]
 800f96e:	e7bc      	b.n	800f8ea <__gethex+0x396>
 800f970:	6921      	ldr	r1, [r4, #16]
 800f972:	4559      	cmp	r1, fp
 800f974:	dd0b      	ble.n	800f98e <__gethex+0x43a>
 800f976:	2101      	movs	r1, #1
 800f978:	4620      	mov	r0, r4
 800f97a:	f7ff fd83 	bl	800f484 <rshift>
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	3601      	adds	r6, #1
 800f982:	42b3      	cmp	r3, r6
 800f984:	f6ff aedb 	blt.w	800f73e <__gethex+0x1ea>
 800f988:	f04f 0801 	mov.w	r8, #1
 800f98c:	e7c2      	b.n	800f914 <__gethex+0x3c0>
 800f98e:	f015 051f 	ands.w	r5, r5, #31
 800f992:	d0f9      	beq.n	800f988 <__gethex+0x434>
 800f994:	9b01      	ldr	r3, [sp, #4]
 800f996:	441a      	add	r2, r3
 800f998:	f1c5 0520 	rsb	r5, r5, #32
 800f99c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800f9a0:	f000 fa78 	bl	800fe94 <__hi0bits>
 800f9a4:	42a8      	cmp	r0, r5
 800f9a6:	dbe6      	blt.n	800f976 <__gethex+0x422>
 800f9a8:	e7ee      	b.n	800f988 <__gethex+0x434>
 800f9aa:	bf00      	nop
 800f9ac:	08011979 	.word	0x08011979

0800f9b0 <L_shift>:
 800f9b0:	f1c2 0208 	rsb	r2, r2, #8
 800f9b4:	0092      	lsls	r2, r2, #2
 800f9b6:	b570      	push	{r4, r5, r6, lr}
 800f9b8:	f1c2 0620 	rsb	r6, r2, #32
 800f9bc:	6843      	ldr	r3, [r0, #4]
 800f9be:	6804      	ldr	r4, [r0, #0]
 800f9c0:	fa03 f506 	lsl.w	r5, r3, r6
 800f9c4:	432c      	orrs	r4, r5
 800f9c6:	40d3      	lsrs	r3, r2
 800f9c8:	6004      	str	r4, [r0, #0]
 800f9ca:	f840 3f04 	str.w	r3, [r0, #4]!
 800f9ce:	4288      	cmp	r0, r1
 800f9d0:	d3f4      	bcc.n	800f9bc <L_shift+0xc>
 800f9d2:	bd70      	pop	{r4, r5, r6, pc}

0800f9d4 <__match>:
 800f9d4:	b530      	push	{r4, r5, lr}
 800f9d6:	6803      	ldr	r3, [r0, #0]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9de:	b914      	cbnz	r4, 800f9e6 <__match+0x12>
 800f9e0:	6003      	str	r3, [r0, #0]
 800f9e2:	2001      	movs	r0, #1
 800f9e4:	bd30      	pop	{r4, r5, pc}
 800f9e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f9ee:	2d19      	cmp	r5, #25
 800f9f0:	bf98      	it	ls
 800f9f2:	3220      	addls	r2, #32
 800f9f4:	42a2      	cmp	r2, r4
 800f9f6:	d0f0      	beq.n	800f9da <__match+0x6>
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	e7f3      	b.n	800f9e4 <__match+0x10>

0800f9fc <__hexnan>:
 800f9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa00:	680b      	ldr	r3, [r1, #0]
 800fa02:	6801      	ldr	r1, [r0, #0]
 800fa04:	115e      	asrs	r6, r3, #5
 800fa06:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fa0a:	f013 031f 	ands.w	r3, r3, #31
 800fa0e:	b087      	sub	sp, #28
 800fa10:	bf18      	it	ne
 800fa12:	3604      	addne	r6, #4
 800fa14:	2500      	movs	r5, #0
 800fa16:	1f37      	subs	r7, r6, #4
 800fa18:	4682      	mov	sl, r0
 800fa1a:	4690      	mov	r8, r2
 800fa1c:	9301      	str	r3, [sp, #4]
 800fa1e:	f846 5c04 	str.w	r5, [r6, #-4]
 800fa22:	46b9      	mov	r9, r7
 800fa24:	463c      	mov	r4, r7
 800fa26:	9502      	str	r5, [sp, #8]
 800fa28:	46ab      	mov	fp, r5
 800fa2a:	784a      	ldrb	r2, [r1, #1]
 800fa2c:	1c4b      	adds	r3, r1, #1
 800fa2e:	9303      	str	r3, [sp, #12]
 800fa30:	b342      	cbz	r2, 800fa84 <__hexnan+0x88>
 800fa32:	4610      	mov	r0, r2
 800fa34:	9105      	str	r1, [sp, #20]
 800fa36:	9204      	str	r2, [sp, #16]
 800fa38:	f7ff fd76 	bl	800f528 <__hexdig_fun>
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	d14f      	bne.n	800fae0 <__hexnan+0xe4>
 800fa40:	9a04      	ldr	r2, [sp, #16]
 800fa42:	9905      	ldr	r1, [sp, #20]
 800fa44:	2a20      	cmp	r2, #32
 800fa46:	d818      	bhi.n	800fa7a <__hexnan+0x7e>
 800fa48:	9b02      	ldr	r3, [sp, #8]
 800fa4a:	459b      	cmp	fp, r3
 800fa4c:	dd13      	ble.n	800fa76 <__hexnan+0x7a>
 800fa4e:	454c      	cmp	r4, r9
 800fa50:	d206      	bcs.n	800fa60 <__hexnan+0x64>
 800fa52:	2d07      	cmp	r5, #7
 800fa54:	dc04      	bgt.n	800fa60 <__hexnan+0x64>
 800fa56:	462a      	mov	r2, r5
 800fa58:	4649      	mov	r1, r9
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	f7ff ffa8 	bl	800f9b0 <L_shift>
 800fa60:	4544      	cmp	r4, r8
 800fa62:	d950      	bls.n	800fb06 <__hexnan+0x10a>
 800fa64:	2300      	movs	r3, #0
 800fa66:	f1a4 0904 	sub.w	r9, r4, #4
 800fa6a:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa6e:	f8cd b008 	str.w	fp, [sp, #8]
 800fa72:	464c      	mov	r4, r9
 800fa74:	461d      	mov	r5, r3
 800fa76:	9903      	ldr	r1, [sp, #12]
 800fa78:	e7d7      	b.n	800fa2a <__hexnan+0x2e>
 800fa7a:	2a29      	cmp	r2, #41	; 0x29
 800fa7c:	d155      	bne.n	800fb2a <__hexnan+0x12e>
 800fa7e:	3102      	adds	r1, #2
 800fa80:	f8ca 1000 	str.w	r1, [sl]
 800fa84:	f1bb 0f00 	cmp.w	fp, #0
 800fa88:	d04f      	beq.n	800fb2a <__hexnan+0x12e>
 800fa8a:	454c      	cmp	r4, r9
 800fa8c:	d206      	bcs.n	800fa9c <__hexnan+0xa0>
 800fa8e:	2d07      	cmp	r5, #7
 800fa90:	dc04      	bgt.n	800fa9c <__hexnan+0xa0>
 800fa92:	462a      	mov	r2, r5
 800fa94:	4649      	mov	r1, r9
 800fa96:	4620      	mov	r0, r4
 800fa98:	f7ff ff8a 	bl	800f9b0 <L_shift>
 800fa9c:	4544      	cmp	r4, r8
 800fa9e:	d934      	bls.n	800fb0a <__hexnan+0x10e>
 800faa0:	f1a8 0204 	sub.w	r2, r8, #4
 800faa4:	4623      	mov	r3, r4
 800faa6:	f853 1b04 	ldr.w	r1, [r3], #4
 800faaa:	f842 1f04 	str.w	r1, [r2, #4]!
 800faae:	429f      	cmp	r7, r3
 800fab0:	d2f9      	bcs.n	800faa6 <__hexnan+0xaa>
 800fab2:	1b3b      	subs	r3, r7, r4
 800fab4:	f023 0303 	bic.w	r3, r3, #3
 800fab8:	3304      	adds	r3, #4
 800faba:	3e03      	subs	r6, #3
 800fabc:	3401      	adds	r4, #1
 800fabe:	42a6      	cmp	r6, r4
 800fac0:	bf38      	it	cc
 800fac2:	2304      	movcc	r3, #4
 800fac4:	4443      	add	r3, r8
 800fac6:	2200      	movs	r2, #0
 800fac8:	f843 2b04 	str.w	r2, [r3], #4
 800facc:	429f      	cmp	r7, r3
 800face:	d2fb      	bcs.n	800fac8 <__hexnan+0xcc>
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	b91b      	cbnz	r3, 800fadc <__hexnan+0xe0>
 800fad4:	4547      	cmp	r7, r8
 800fad6:	d126      	bne.n	800fb26 <__hexnan+0x12a>
 800fad8:	2301      	movs	r3, #1
 800fada:	603b      	str	r3, [r7, #0]
 800fadc:	2005      	movs	r0, #5
 800fade:	e025      	b.n	800fb2c <__hexnan+0x130>
 800fae0:	3501      	adds	r5, #1
 800fae2:	2d08      	cmp	r5, #8
 800fae4:	f10b 0b01 	add.w	fp, fp, #1
 800fae8:	dd06      	ble.n	800faf8 <__hexnan+0xfc>
 800faea:	4544      	cmp	r4, r8
 800faec:	d9c3      	bls.n	800fa76 <__hexnan+0x7a>
 800faee:	2300      	movs	r3, #0
 800faf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800faf4:	2501      	movs	r5, #1
 800faf6:	3c04      	subs	r4, #4
 800faf8:	6822      	ldr	r2, [r4, #0]
 800fafa:	f000 000f 	and.w	r0, r0, #15
 800fafe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fb02:	6020      	str	r0, [r4, #0]
 800fb04:	e7b7      	b.n	800fa76 <__hexnan+0x7a>
 800fb06:	2508      	movs	r5, #8
 800fb08:	e7b5      	b.n	800fa76 <__hexnan+0x7a>
 800fb0a:	9b01      	ldr	r3, [sp, #4]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d0df      	beq.n	800fad0 <__hexnan+0xd4>
 800fb10:	f1c3 0320 	rsb	r3, r3, #32
 800fb14:	f04f 32ff 	mov.w	r2, #4294967295
 800fb18:	40da      	lsrs	r2, r3
 800fb1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fb1e:	4013      	ands	r3, r2
 800fb20:	f846 3c04 	str.w	r3, [r6, #-4]
 800fb24:	e7d4      	b.n	800fad0 <__hexnan+0xd4>
 800fb26:	3f04      	subs	r7, #4
 800fb28:	e7d2      	b.n	800fad0 <__hexnan+0xd4>
 800fb2a:	2004      	movs	r0, #4
 800fb2c:	b007      	add	sp, #28
 800fb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800fb34 <sbrk_aligned>:
 800fb34:	b570      	push	{r4, r5, r6, lr}
 800fb36:	4e0e      	ldr	r6, [pc, #56]	; (800fb70 <sbrk_aligned+0x3c>)
 800fb38:	460c      	mov	r4, r1
 800fb3a:	6831      	ldr	r1, [r6, #0]
 800fb3c:	4605      	mov	r5, r0
 800fb3e:	b911      	cbnz	r1, 800fb46 <sbrk_aligned+0x12>
 800fb40:	f001 f920 	bl	8010d84 <_sbrk_r>
 800fb44:	6030      	str	r0, [r6, #0]
 800fb46:	4621      	mov	r1, r4
 800fb48:	4628      	mov	r0, r5
 800fb4a:	f001 f91b 	bl	8010d84 <_sbrk_r>
 800fb4e:	1c43      	adds	r3, r0, #1
 800fb50:	d00a      	beq.n	800fb68 <sbrk_aligned+0x34>
 800fb52:	1cc4      	adds	r4, r0, #3
 800fb54:	f024 0403 	bic.w	r4, r4, #3
 800fb58:	42a0      	cmp	r0, r4
 800fb5a:	d007      	beq.n	800fb6c <sbrk_aligned+0x38>
 800fb5c:	1a21      	subs	r1, r4, r0
 800fb5e:	4628      	mov	r0, r5
 800fb60:	f001 f910 	bl	8010d84 <_sbrk_r>
 800fb64:	3001      	adds	r0, #1
 800fb66:	d101      	bne.n	800fb6c <sbrk_aligned+0x38>
 800fb68:	f04f 34ff 	mov.w	r4, #4294967295
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	bd70      	pop	{r4, r5, r6, pc}
 800fb70:	200036ac 	.word	0x200036ac

0800fb74 <_malloc_r>:
 800fb74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb78:	1ccd      	adds	r5, r1, #3
 800fb7a:	f025 0503 	bic.w	r5, r5, #3
 800fb7e:	3508      	adds	r5, #8
 800fb80:	2d0c      	cmp	r5, #12
 800fb82:	bf38      	it	cc
 800fb84:	250c      	movcc	r5, #12
 800fb86:	2d00      	cmp	r5, #0
 800fb88:	4607      	mov	r7, r0
 800fb8a:	db01      	blt.n	800fb90 <_malloc_r+0x1c>
 800fb8c:	42a9      	cmp	r1, r5
 800fb8e:	d905      	bls.n	800fb9c <_malloc_r+0x28>
 800fb90:	230c      	movs	r3, #12
 800fb92:	603b      	str	r3, [r7, #0]
 800fb94:	2600      	movs	r6, #0
 800fb96:	4630      	mov	r0, r6
 800fb98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fc70 <_malloc_r+0xfc>
 800fba0:	f000 f87a 	bl	800fc98 <__malloc_lock>
 800fba4:	f8d8 3000 	ldr.w	r3, [r8]
 800fba8:	461c      	mov	r4, r3
 800fbaa:	bb5c      	cbnz	r4, 800fc04 <_malloc_r+0x90>
 800fbac:	4629      	mov	r1, r5
 800fbae:	4638      	mov	r0, r7
 800fbb0:	f7ff ffc0 	bl	800fb34 <sbrk_aligned>
 800fbb4:	1c43      	adds	r3, r0, #1
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	d155      	bne.n	800fc66 <_malloc_r+0xf2>
 800fbba:	f8d8 4000 	ldr.w	r4, [r8]
 800fbbe:	4626      	mov	r6, r4
 800fbc0:	2e00      	cmp	r6, #0
 800fbc2:	d145      	bne.n	800fc50 <_malloc_r+0xdc>
 800fbc4:	2c00      	cmp	r4, #0
 800fbc6:	d048      	beq.n	800fc5a <_malloc_r+0xe6>
 800fbc8:	6823      	ldr	r3, [r4, #0]
 800fbca:	4631      	mov	r1, r6
 800fbcc:	4638      	mov	r0, r7
 800fbce:	eb04 0903 	add.w	r9, r4, r3
 800fbd2:	f001 f8d7 	bl	8010d84 <_sbrk_r>
 800fbd6:	4581      	cmp	r9, r0
 800fbd8:	d13f      	bne.n	800fc5a <_malloc_r+0xe6>
 800fbda:	6821      	ldr	r1, [r4, #0]
 800fbdc:	1a6d      	subs	r5, r5, r1
 800fbde:	4629      	mov	r1, r5
 800fbe0:	4638      	mov	r0, r7
 800fbe2:	f7ff ffa7 	bl	800fb34 <sbrk_aligned>
 800fbe6:	3001      	adds	r0, #1
 800fbe8:	d037      	beq.n	800fc5a <_malloc_r+0xe6>
 800fbea:	6823      	ldr	r3, [r4, #0]
 800fbec:	442b      	add	r3, r5
 800fbee:	6023      	str	r3, [r4, #0]
 800fbf0:	f8d8 3000 	ldr.w	r3, [r8]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d038      	beq.n	800fc6a <_malloc_r+0xf6>
 800fbf8:	685a      	ldr	r2, [r3, #4]
 800fbfa:	42a2      	cmp	r2, r4
 800fbfc:	d12b      	bne.n	800fc56 <_malloc_r+0xe2>
 800fbfe:	2200      	movs	r2, #0
 800fc00:	605a      	str	r2, [r3, #4]
 800fc02:	e00f      	b.n	800fc24 <_malloc_r+0xb0>
 800fc04:	6822      	ldr	r2, [r4, #0]
 800fc06:	1b52      	subs	r2, r2, r5
 800fc08:	d41f      	bmi.n	800fc4a <_malloc_r+0xd6>
 800fc0a:	2a0b      	cmp	r2, #11
 800fc0c:	d917      	bls.n	800fc3e <_malloc_r+0xca>
 800fc0e:	1961      	adds	r1, r4, r5
 800fc10:	42a3      	cmp	r3, r4
 800fc12:	6025      	str	r5, [r4, #0]
 800fc14:	bf18      	it	ne
 800fc16:	6059      	strne	r1, [r3, #4]
 800fc18:	6863      	ldr	r3, [r4, #4]
 800fc1a:	bf08      	it	eq
 800fc1c:	f8c8 1000 	streq.w	r1, [r8]
 800fc20:	5162      	str	r2, [r4, r5]
 800fc22:	604b      	str	r3, [r1, #4]
 800fc24:	4638      	mov	r0, r7
 800fc26:	f104 060b 	add.w	r6, r4, #11
 800fc2a:	f000 f83b 	bl	800fca4 <__malloc_unlock>
 800fc2e:	f026 0607 	bic.w	r6, r6, #7
 800fc32:	1d23      	adds	r3, r4, #4
 800fc34:	1af2      	subs	r2, r6, r3
 800fc36:	d0ae      	beq.n	800fb96 <_malloc_r+0x22>
 800fc38:	1b9b      	subs	r3, r3, r6
 800fc3a:	50a3      	str	r3, [r4, r2]
 800fc3c:	e7ab      	b.n	800fb96 <_malloc_r+0x22>
 800fc3e:	42a3      	cmp	r3, r4
 800fc40:	6862      	ldr	r2, [r4, #4]
 800fc42:	d1dd      	bne.n	800fc00 <_malloc_r+0x8c>
 800fc44:	f8c8 2000 	str.w	r2, [r8]
 800fc48:	e7ec      	b.n	800fc24 <_malloc_r+0xb0>
 800fc4a:	4623      	mov	r3, r4
 800fc4c:	6864      	ldr	r4, [r4, #4]
 800fc4e:	e7ac      	b.n	800fbaa <_malloc_r+0x36>
 800fc50:	4634      	mov	r4, r6
 800fc52:	6876      	ldr	r6, [r6, #4]
 800fc54:	e7b4      	b.n	800fbc0 <_malloc_r+0x4c>
 800fc56:	4613      	mov	r3, r2
 800fc58:	e7cc      	b.n	800fbf4 <_malloc_r+0x80>
 800fc5a:	230c      	movs	r3, #12
 800fc5c:	603b      	str	r3, [r7, #0]
 800fc5e:	4638      	mov	r0, r7
 800fc60:	f000 f820 	bl	800fca4 <__malloc_unlock>
 800fc64:	e797      	b.n	800fb96 <_malloc_r+0x22>
 800fc66:	6025      	str	r5, [r4, #0]
 800fc68:	e7dc      	b.n	800fc24 <_malloc_r+0xb0>
 800fc6a:	605b      	str	r3, [r3, #4]
 800fc6c:	deff      	udf	#255	; 0xff
 800fc6e:	bf00      	nop
 800fc70:	200036a8 	.word	0x200036a8

0800fc74 <__ascii_mbtowc>:
 800fc74:	b082      	sub	sp, #8
 800fc76:	b901      	cbnz	r1, 800fc7a <__ascii_mbtowc+0x6>
 800fc78:	a901      	add	r1, sp, #4
 800fc7a:	b142      	cbz	r2, 800fc8e <__ascii_mbtowc+0x1a>
 800fc7c:	b14b      	cbz	r3, 800fc92 <__ascii_mbtowc+0x1e>
 800fc7e:	7813      	ldrb	r3, [r2, #0]
 800fc80:	600b      	str	r3, [r1, #0]
 800fc82:	7812      	ldrb	r2, [r2, #0]
 800fc84:	1e10      	subs	r0, r2, #0
 800fc86:	bf18      	it	ne
 800fc88:	2001      	movne	r0, #1
 800fc8a:	b002      	add	sp, #8
 800fc8c:	4770      	bx	lr
 800fc8e:	4610      	mov	r0, r2
 800fc90:	e7fb      	b.n	800fc8a <__ascii_mbtowc+0x16>
 800fc92:	f06f 0001 	mvn.w	r0, #1
 800fc96:	e7f8      	b.n	800fc8a <__ascii_mbtowc+0x16>

0800fc98 <__malloc_lock>:
 800fc98:	4801      	ldr	r0, [pc, #4]	; (800fca0 <__malloc_lock+0x8>)
 800fc9a:	f7ff bb80 	b.w	800f39e <__retarget_lock_acquire_recursive>
 800fc9e:	bf00      	nop
 800fca0:	200036a4 	.word	0x200036a4

0800fca4 <__malloc_unlock>:
 800fca4:	4801      	ldr	r0, [pc, #4]	; (800fcac <__malloc_unlock+0x8>)
 800fca6:	f7ff bb7b 	b.w	800f3a0 <__retarget_lock_release_recursive>
 800fcaa:	bf00      	nop
 800fcac:	200036a4 	.word	0x200036a4

0800fcb0 <_Balloc>:
 800fcb0:	b570      	push	{r4, r5, r6, lr}
 800fcb2:	69c6      	ldr	r6, [r0, #28]
 800fcb4:	4604      	mov	r4, r0
 800fcb6:	460d      	mov	r5, r1
 800fcb8:	b976      	cbnz	r6, 800fcd8 <_Balloc+0x28>
 800fcba:	2010      	movs	r0, #16
 800fcbc:	f001 f8a6 	bl	8010e0c <malloc>
 800fcc0:	4602      	mov	r2, r0
 800fcc2:	61e0      	str	r0, [r4, #28]
 800fcc4:	b920      	cbnz	r0, 800fcd0 <_Balloc+0x20>
 800fcc6:	4b18      	ldr	r3, [pc, #96]	; (800fd28 <_Balloc+0x78>)
 800fcc8:	4818      	ldr	r0, [pc, #96]	; (800fd2c <_Balloc+0x7c>)
 800fcca:	216b      	movs	r1, #107	; 0x6b
 800fccc:	f001 f86a 	bl	8010da4 <__assert_func>
 800fcd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fcd4:	6006      	str	r6, [r0, #0]
 800fcd6:	60c6      	str	r6, [r0, #12]
 800fcd8:	69e6      	ldr	r6, [r4, #28]
 800fcda:	68f3      	ldr	r3, [r6, #12]
 800fcdc:	b183      	cbz	r3, 800fd00 <_Balloc+0x50>
 800fcde:	69e3      	ldr	r3, [r4, #28]
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fce6:	b9b8      	cbnz	r0, 800fd18 <_Balloc+0x68>
 800fce8:	2101      	movs	r1, #1
 800fcea:	fa01 f605 	lsl.w	r6, r1, r5
 800fcee:	1d72      	adds	r2, r6, #5
 800fcf0:	0092      	lsls	r2, r2, #2
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	f001 f874 	bl	8010de0 <_calloc_r>
 800fcf8:	b160      	cbz	r0, 800fd14 <_Balloc+0x64>
 800fcfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fcfe:	e00e      	b.n	800fd1e <_Balloc+0x6e>
 800fd00:	2221      	movs	r2, #33	; 0x21
 800fd02:	2104      	movs	r1, #4
 800fd04:	4620      	mov	r0, r4
 800fd06:	f001 f86b 	bl	8010de0 <_calloc_r>
 800fd0a:	69e3      	ldr	r3, [r4, #28]
 800fd0c:	60f0      	str	r0, [r6, #12]
 800fd0e:	68db      	ldr	r3, [r3, #12]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d1e4      	bne.n	800fcde <_Balloc+0x2e>
 800fd14:	2000      	movs	r0, #0
 800fd16:	bd70      	pop	{r4, r5, r6, pc}
 800fd18:	6802      	ldr	r2, [r0, #0]
 800fd1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd1e:	2300      	movs	r3, #0
 800fd20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd24:	e7f7      	b.n	800fd16 <_Balloc+0x66>
 800fd26:	bf00      	nop
 800fd28:	080119ea 	.word	0x080119ea
 800fd2c:	08011a01 	.word	0x08011a01

0800fd30 <_Bfree>:
 800fd30:	b570      	push	{r4, r5, r6, lr}
 800fd32:	69c6      	ldr	r6, [r0, #28]
 800fd34:	4605      	mov	r5, r0
 800fd36:	460c      	mov	r4, r1
 800fd38:	b976      	cbnz	r6, 800fd58 <_Bfree+0x28>
 800fd3a:	2010      	movs	r0, #16
 800fd3c:	f001 f866 	bl	8010e0c <malloc>
 800fd40:	4602      	mov	r2, r0
 800fd42:	61e8      	str	r0, [r5, #28]
 800fd44:	b920      	cbnz	r0, 800fd50 <_Bfree+0x20>
 800fd46:	4b09      	ldr	r3, [pc, #36]	; (800fd6c <_Bfree+0x3c>)
 800fd48:	4809      	ldr	r0, [pc, #36]	; (800fd70 <_Bfree+0x40>)
 800fd4a:	218f      	movs	r1, #143	; 0x8f
 800fd4c:	f001 f82a 	bl	8010da4 <__assert_func>
 800fd50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd54:	6006      	str	r6, [r0, #0]
 800fd56:	60c6      	str	r6, [r0, #12]
 800fd58:	b13c      	cbz	r4, 800fd6a <_Bfree+0x3a>
 800fd5a:	69eb      	ldr	r3, [r5, #28]
 800fd5c:	6862      	ldr	r2, [r4, #4]
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd64:	6021      	str	r1, [r4, #0]
 800fd66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fd6a:	bd70      	pop	{r4, r5, r6, pc}
 800fd6c:	080119ea 	.word	0x080119ea
 800fd70:	08011a01 	.word	0x08011a01

0800fd74 <__multadd>:
 800fd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd78:	690d      	ldr	r5, [r1, #16]
 800fd7a:	4607      	mov	r7, r0
 800fd7c:	460c      	mov	r4, r1
 800fd7e:	461e      	mov	r6, r3
 800fd80:	f101 0c14 	add.w	ip, r1, #20
 800fd84:	2000      	movs	r0, #0
 800fd86:	f8dc 3000 	ldr.w	r3, [ip]
 800fd8a:	b299      	uxth	r1, r3
 800fd8c:	fb02 6101 	mla	r1, r2, r1, r6
 800fd90:	0c1e      	lsrs	r6, r3, #16
 800fd92:	0c0b      	lsrs	r3, r1, #16
 800fd94:	fb02 3306 	mla	r3, r2, r6, r3
 800fd98:	b289      	uxth	r1, r1
 800fd9a:	3001      	adds	r0, #1
 800fd9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fda0:	4285      	cmp	r5, r0
 800fda2:	f84c 1b04 	str.w	r1, [ip], #4
 800fda6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fdaa:	dcec      	bgt.n	800fd86 <__multadd+0x12>
 800fdac:	b30e      	cbz	r6, 800fdf2 <__multadd+0x7e>
 800fdae:	68a3      	ldr	r3, [r4, #8]
 800fdb0:	42ab      	cmp	r3, r5
 800fdb2:	dc19      	bgt.n	800fde8 <__multadd+0x74>
 800fdb4:	6861      	ldr	r1, [r4, #4]
 800fdb6:	4638      	mov	r0, r7
 800fdb8:	3101      	adds	r1, #1
 800fdba:	f7ff ff79 	bl	800fcb0 <_Balloc>
 800fdbe:	4680      	mov	r8, r0
 800fdc0:	b928      	cbnz	r0, 800fdce <__multadd+0x5a>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	4b0c      	ldr	r3, [pc, #48]	; (800fdf8 <__multadd+0x84>)
 800fdc6:	480d      	ldr	r0, [pc, #52]	; (800fdfc <__multadd+0x88>)
 800fdc8:	21ba      	movs	r1, #186	; 0xba
 800fdca:	f000 ffeb 	bl	8010da4 <__assert_func>
 800fdce:	6922      	ldr	r2, [r4, #16]
 800fdd0:	3202      	adds	r2, #2
 800fdd2:	f104 010c 	add.w	r1, r4, #12
 800fdd6:	0092      	lsls	r2, r2, #2
 800fdd8:	300c      	adds	r0, #12
 800fdda:	f7ff faea 	bl	800f3b2 <memcpy>
 800fdde:	4621      	mov	r1, r4
 800fde0:	4638      	mov	r0, r7
 800fde2:	f7ff ffa5 	bl	800fd30 <_Bfree>
 800fde6:	4644      	mov	r4, r8
 800fde8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fdec:	3501      	adds	r5, #1
 800fdee:	615e      	str	r6, [r3, #20]
 800fdf0:	6125      	str	r5, [r4, #16]
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdf8:	08011979 	.word	0x08011979
 800fdfc:	08011a01 	.word	0x08011a01

0800fe00 <__s2b>:
 800fe00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe04:	460c      	mov	r4, r1
 800fe06:	4615      	mov	r5, r2
 800fe08:	461f      	mov	r7, r3
 800fe0a:	2209      	movs	r2, #9
 800fe0c:	3308      	adds	r3, #8
 800fe0e:	4606      	mov	r6, r0
 800fe10:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe14:	2100      	movs	r1, #0
 800fe16:	2201      	movs	r2, #1
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	db09      	blt.n	800fe30 <__s2b+0x30>
 800fe1c:	4630      	mov	r0, r6
 800fe1e:	f7ff ff47 	bl	800fcb0 <_Balloc>
 800fe22:	b940      	cbnz	r0, 800fe36 <__s2b+0x36>
 800fe24:	4602      	mov	r2, r0
 800fe26:	4b19      	ldr	r3, [pc, #100]	; (800fe8c <__s2b+0x8c>)
 800fe28:	4819      	ldr	r0, [pc, #100]	; (800fe90 <__s2b+0x90>)
 800fe2a:	21d3      	movs	r1, #211	; 0xd3
 800fe2c:	f000 ffba 	bl	8010da4 <__assert_func>
 800fe30:	0052      	lsls	r2, r2, #1
 800fe32:	3101      	adds	r1, #1
 800fe34:	e7f0      	b.n	800fe18 <__s2b+0x18>
 800fe36:	9b08      	ldr	r3, [sp, #32]
 800fe38:	6143      	str	r3, [r0, #20]
 800fe3a:	2d09      	cmp	r5, #9
 800fe3c:	f04f 0301 	mov.w	r3, #1
 800fe40:	6103      	str	r3, [r0, #16]
 800fe42:	dd16      	ble.n	800fe72 <__s2b+0x72>
 800fe44:	f104 0909 	add.w	r9, r4, #9
 800fe48:	46c8      	mov	r8, r9
 800fe4a:	442c      	add	r4, r5
 800fe4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fe50:	4601      	mov	r1, r0
 800fe52:	3b30      	subs	r3, #48	; 0x30
 800fe54:	220a      	movs	r2, #10
 800fe56:	4630      	mov	r0, r6
 800fe58:	f7ff ff8c 	bl	800fd74 <__multadd>
 800fe5c:	45a0      	cmp	r8, r4
 800fe5e:	d1f5      	bne.n	800fe4c <__s2b+0x4c>
 800fe60:	f1a5 0408 	sub.w	r4, r5, #8
 800fe64:	444c      	add	r4, r9
 800fe66:	1b2d      	subs	r5, r5, r4
 800fe68:	1963      	adds	r3, r4, r5
 800fe6a:	42bb      	cmp	r3, r7
 800fe6c:	db04      	blt.n	800fe78 <__s2b+0x78>
 800fe6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe72:	340a      	adds	r4, #10
 800fe74:	2509      	movs	r5, #9
 800fe76:	e7f6      	b.n	800fe66 <__s2b+0x66>
 800fe78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fe7c:	4601      	mov	r1, r0
 800fe7e:	3b30      	subs	r3, #48	; 0x30
 800fe80:	220a      	movs	r2, #10
 800fe82:	4630      	mov	r0, r6
 800fe84:	f7ff ff76 	bl	800fd74 <__multadd>
 800fe88:	e7ee      	b.n	800fe68 <__s2b+0x68>
 800fe8a:	bf00      	nop
 800fe8c:	08011979 	.word	0x08011979
 800fe90:	08011a01 	.word	0x08011a01

0800fe94 <__hi0bits>:
 800fe94:	0c03      	lsrs	r3, r0, #16
 800fe96:	041b      	lsls	r3, r3, #16
 800fe98:	b9d3      	cbnz	r3, 800fed0 <__hi0bits+0x3c>
 800fe9a:	0400      	lsls	r0, r0, #16
 800fe9c:	2310      	movs	r3, #16
 800fe9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fea2:	bf04      	itt	eq
 800fea4:	0200      	lsleq	r0, r0, #8
 800fea6:	3308      	addeq	r3, #8
 800fea8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800feac:	bf04      	itt	eq
 800feae:	0100      	lsleq	r0, r0, #4
 800feb0:	3304      	addeq	r3, #4
 800feb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800feb6:	bf04      	itt	eq
 800feb8:	0080      	lsleq	r0, r0, #2
 800feba:	3302      	addeq	r3, #2
 800febc:	2800      	cmp	r0, #0
 800febe:	db05      	blt.n	800fecc <__hi0bits+0x38>
 800fec0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fec4:	f103 0301 	add.w	r3, r3, #1
 800fec8:	bf08      	it	eq
 800feca:	2320      	moveq	r3, #32
 800fecc:	4618      	mov	r0, r3
 800fece:	4770      	bx	lr
 800fed0:	2300      	movs	r3, #0
 800fed2:	e7e4      	b.n	800fe9e <__hi0bits+0xa>

0800fed4 <__lo0bits>:
 800fed4:	6803      	ldr	r3, [r0, #0]
 800fed6:	f013 0207 	ands.w	r2, r3, #7
 800feda:	d00c      	beq.n	800fef6 <__lo0bits+0x22>
 800fedc:	07d9      	lsls	r1, r3, #31
 800fede:	d422      	bmi.n	800ff26 <__lo0bits+0x52>
 800fee0:	079a      	lsls	r2, r3, #30
 800fee2:	bf49      	itett	mi
 800fee4:	085b      	lsrmi	r3, r3, #1
 800fee6:	089b      	lsrpl	r3, r3, #2
 800fee8:	6003      	strmi	r3, [r0, #0]
 800feea:	2201      	movmi	r2, #1
 800feec:	bf5c      	itt	pl
 800feee:	6003      	strpl	r3, [r0, #0]
 800fef0:	2202      	movpl	r2, #2
 800fef2:	4610      	mov	r0, r2
 800fef4:	4770      	bx	lr
 800fef6:	b299      	uxth	r1, r3
 800fef8:	b909      	cbnz	r1, 800fefe <__lo0bits+0x2a>
 800fefa:	0c1b      	lsrs	r3, r3, #16
 800fefc:	2210      	movs	r2, #16
 800fefe:	b2d9      	uxtb	r1, r3
 800ff00:	b909      	cbnz	r1, 800ff06 <__lo0bits+0x32>
 800ff02:	3208      	adds	r2, #8
 800ff04:	0a1b      	lsrs	r3, r3, #8
 800ff06:	0719      	lsls	r1, r3, #28
 800ff08:	bf04      	itt	eq
 800ff0a:	091b      	lsreq	r3, r3, #4
 800ff0c:	3204      	addeq	r2, #4
 800ff0e:	0799      	lsls	r1, r3, #30
 800ff10:	bf04      	itt	eq
 800ff12:	089b      	lsreq	r3, r3, #2
 800ff14:	3202      	addeq	r2, #2
 800ff16:	07d9      	lsls	r1, r3, #31
 800ff18:	d403      	bmi.n	800ff22 <__lo0bits+0x4e>
 800ff1a:	085b      	lsrs	r3, r3, #1
 800ff1c:	f102 0201 	add.w	r2, r2, #1
 800ff20:	d003      	beq.n	800ff2a <__lo0bits+0x56>
 800ff22:	6003      	str	r3, [r0, #0]
 800ff24:	e7e5      	b.n	800fef2 <__lo0bits+0x1e>
 800ff26:	2200      	movs	r2, #0
 800ff28:	e7e3      	b.n	800fef2 <__lo0bits+0x1e>
 800ff2a:	2220      	movs	r2, #32
 800ff2c:	e7e1      	b.n	800fef2 <__lo0bits+0x1e>
	...

0800ff30 <__i2b>:
 800ff30:	b510      	push	{r4, lr}
 800ff32:	460c      	mov	r4, r1
 800ff34:	2101      	movs	r1, #1
 800ff36:	f7ff febb 	bl	800fcb0 <_Balloc>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	b928      	cbnz	r0, 800ff4a <__i2b+0x1a>
 800ff3e:	4b05      	ldr	r3, [pc, #20]	; (800ff54 <__i2b+0x24>)
 800ff40:	4805      	ldr	r0, [pc, #20]	; (800ff58 <__i2b+0x28>)
 800ff42:	f240 1145 	movw	r1, #325	; 0x145
 800ff46:	f000 ff2d 	bl	8010da4 <__assert_func>
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	6144      	str	r4, [r0, #20]
 800ff4e:	6103      	str	r3, [r0, #16]
 800ff50:	bd10      	pop	{r4, pc}
 800ff52:	bf00      	nop
 800ff54:	08011979 	.word	0x08011979
 800ff58:	08011a01 	.word	0x08011a01

0800ff5c <__multiply>:
 800ff5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff60:	4691      	mov	r9, r2
 800ff62:	690a      	ldr	r2, [r1, #16]
 800ff64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	bfb8      	it	lt
 800ff6c:	460b      	movlt	r3, r1
 800ff6e:	460c      	mov	r4, r1
 800ff70:	bfbc      	itt	lt
 800ff72:	464c      	movlt	r4, r9
 800ff74:	4699      	movlt	r9, r3
 800ff76:	6927      	ldr	r7, [r4, #16]
 800ff78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ff7c:	68a3      	ldr	r3, [r4, #8]
 800ff7e:	6861      	ldr	r1, [r4, #4]
 800ff80:	eb07 060a 	add.w	r6, r7, sl
 800ff84:	42b3      	cmp	r3, r6
 800ff86:	b085      	sub	sp, #20
 800ff88:	bfb8      	it	lt
 800ff8a:	3101      	addlt	r1, #1
 800ff8c:	f7ff fe90 	bl	800fcb0 <_Balloc>
 800ff90:	b930      	cbnz	r0, 800ffa0 <__multiply+0x44>
 800ff92:	4602      	mov	r2, r0
 800ff94:	4b44      	ldr	r3, [pc, #272]	; (80100a8 <__multiply+0x14c>)
 800ff96:	4845      	ldr	r0, [pc, #276]	; (80100ac <__multiply+0x150>)
 800ff98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ff9c:	f000 ff02 	bl	8010da4 <__assert_func>
 800ffa0:	f100 0514 	add.w	r5, r0, #20
 800ffa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ffa8:	462b      	mov	r3, r5
 800ffaa:	2200      	movs	r2, #0
 800ffac:	4543      	cmp	r3, r8
 800ffae:	d321      	bcc.n	800fff4 <__multiply+0x98>
 800ffb0:	f104 0314 	add.w	r3, r4, #20
 800ffb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ffb8:	f109 0314 	add.w	r3, r9, #20
 800ffbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ffc0:	9202      	str	r2, [sp, #8]
 800ffc2:	1b3a      	subs	r2, r7, r4
 800ffc4:	3a15      	subs	r2, #21
 800ffc6:	f022 0203 	bic.w	r2, r2, #3
 800ffca:	3204      	adds	r2, #4
 800ffcc:	f104 0115 	add.w	r1, r4, #21
 800ffd0:	428f      	cmp	r7, r1
 800ffd2:	bf38      	it	cc
 800ffd4:	2204      	movcc	r2, #4
 800ffd6:	9201      	str	r2, [sp, #4]
 800ffd8:	9a02      	ldr	r2, [sp, #8]
 800ffda:	9303      	str	r3, [sp, #12]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d80c      	bhi.n	800fffa <__multiply+0x9e>
 800ffe0:	2e00      	cmp	r6, #0
 800ffe2:	dd03      	ble.n	800ffec <__multiply+0x90>
 800ffe4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d05b      	beq.n	80100a4 <__multiply+0x148>
 800ffec:	6106      	str	r6, [r0, #16]
 800ffee:	b005      	add	sp, #20
 800fff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fff4:	f843 2b04 	str.w	r2, [r3], #4
 800fff8:	e7d8      	b.n	800ffac <__multiply+0x50>
 800fffa:	f8b3 a000 	ldrh.w	sl, [r3]
 800fffe:	f1ba 0f00 	cmp.w	sl, #0
 8010002:	d024      	beq.n	801004e <__multiply+0xf2>
 8010004:	f104 0e14 	add.w	lr, r4, #20
 8010008:	46a9      	mov	r9, r5
 801000a:	f04f 0c00 	mov.w	ip, #0
 801000e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010012:	f8d9 1000 	ldr.w	r1, [r9]
 8010016:	fa1f fb82 	uxth.w	fp, r2
 801001a:	b289      	uxth	r1, r1
 801001c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010020:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010024:	f8d9 2000 	ldr.w	r2, [r9]
 8010028:	4461      	add	r1, ip
 801002a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801002e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010032:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010036:	b289      	uxth	r1, r1
 8010038:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801003c:	4577      	cmp	r7, lr
 801003e:	f849 1b04 	str.w	r1, [r9], #4
 8010042:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010046:	d8e2      	bhi.n	801000e <__multiply+0xb2>
 8010048:	9a01      	ldr	r2, [sp, #4]
 801004a:	f845 c002 	str.w	ip, [r5, r2]
 801004e:	9a03      	ldr	r2, [sp, #12]
 8010050:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010054:	3304      	adds	r3, #4
 8010056:	f1b9 0f00 	cmp.w	r9, #0
 801005a:	d021      	beq.n	80100a0 <__multiply+0x144>
 801005c:	6829      	ldr	r1, [r5, #0]
 801005e:	f104 0c14 	add.w	ip, r4, #20
 8010062:	46ae      	mov	lr, r5
 8010064:	f04f 0a00 	mov.w	sl, #0
 8010068:	f8bc b000 	ldrh.w	fp, [ip]
 801006c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010070:	fb09 220b 	mla	r2, r9, fp, r2
 8010074:	4452      	add	r2, sl
 8010076:	b289      	uxth	r1, r1
 8010078:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801007c:	f84e 1b04 	str.w	r1, [lr], #4
 8010080:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010084:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010088:	f8be 1000 	ldrh.w	r1, [lr]
 801008c:	fb09 110a 	mla	r1, r9, sl, r1
 8010090:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010094:	4567      	cmp	r7, ip
 8010096:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801009a:	d8e5      	bhi.n	8010068 <__multiply+0x10c>
 801009c:	9a01      	ldr	r2, [sp, #4]
 801009e:	50a9      	str	r1, [r5, r2]
 80100a0:	3504      	adds	r5, #4
 80100a2:	e799      	b.n	800ffd8 <__multiply+0x7c>
 80100a4:	3e01      	subs	r6, #1
 80100a6:	e79b      	b.n	800ffe0 <__multiply+0x84>
 80100a8:	08011979 	.word	0x08011979
 80100ac:	08011a01 	.word	0x08011a01

080100b0 <__pow5mult>:
 80100b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100b4:	4615      	mov	r5, r2
 80100b6:	f012 0203 	ands.w	r2, r2, #3
 80100ba:	4606      	mov	r6, r0
 80100bc:	460f      	mov	r7, r1
 80100be:	d007      	beq.n	80100d0 <__pow5mult+0x20>
 80100c0:	4c25      	ldr	r4, [pc, #148]	; (8010158 <__pow5mult+0xa8>)
 80100c2:	3a01      	subs	r2, #1
 80100c4:	2300      	movs	r3, #0
 80100c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80100ca:	f7ff fe53 	bl	800fd74 <__multadd>
 80100ce:	4607      	mov	r7, r0
 80100d0:	10ad      	asrs	r5, r5, #2
 80100d2:	d03d      	beq.n	8010150 <__pow5mult+0xa0>
 80100d4:	69f4      	ldr	r4, [r6, #28]
 80100d6:	b97c      	cbnz	r4, 80100f8 <__pow5mult+0x48>
 80100d8:	2010      	movs	r0, #16
 80100da:	f000 fe97 	bl	8010e0c <malloc>
 80100de:	4602      	mov	r2, r0
 80100e0:	61f0      	str	r0, [r6, #28]
 80100e2:	b928      	cbnz	r0, 80100f0 <__pow5mult+0x40>
 80100e4:	4b1d      	ldr	r3, [pc, #116]	; (801015c <__pow5mult+0xac>)
 80100e6:	481e      	ldr	r0, [pc, #120]	; (8010160 <__pow5mult+0xb0>)
 80100e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80100ec:	f000 fe5a 	bl	8010da4 <__assert_func>
 80100f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100f4:	6004      	str	r4, [r0, #0]
 80100f6:	60c4      	str	r4, [r0, #12]
 80100f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80100fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010100:	b94c      	cbnz	r4, 8010116 <__pow5mult+0x66>
 8010102:	f240 2171 	movw	r1, #625	; 0x271
 8010106:	4630      	mov	r0, r6
 8010108:	f7ff ff12 	bl	800ff30 <__i2b>
 801010c:	2300      	movs	r3, #0
 801010e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010112:	4604      	mov	r4, r0
 8010114:	6003      	str	r3, [r0, #0]
 8010116:	f04f 0900 	mov.w	r9, #0
 801011a:	07eb      	lsls	r3, r5, #31
 801011c:	d50a      	bpl.n	8010134 <__pow5mult+0x84>
 801011e:	4639      	mov	r1, r7
 8010120:	4622      	mov	r2, r4
 8010122:	4630      	mov	r0, r6
 8010124:	f7ff ff1a 	bl	800ff5c <__multiply>
 8010128:	4639      	mov	r1, r7
 801012a:	4680      	mov	r8, r0
 801012c:	4630      	mov	r0, r6
 801012e:	f7ff fdff 	bl	800fd30 <_Bfree>
 8010132:	4647      	mov	r7, r8
 8010134:	106d      	asrs	r5, r5, #1
 8010136:	d00b      	beq.n	8010150 <__pow5mult+0xa0>
 8010138:	6820      	ldr	r0, [r4, #0]
 801013a:	b938      	cbnz	r0, 801014c <__pow5mult+0x9c>
 801013c:	4622      	mov	r2, r4
 801013e:	4621      	mov	r1, r4
 8010140:	4630      	mov	r0, r6
 8010142:	f7ff ff0b 	bl	800ff5c <__multiply>
 8010146:	6020      	str	r0, [r4, #0]
 8010148:	f8c0 9000 	str.w	r9, [r0]
 801014c:	4604      	mov	r4, r0
 801014e:	e7e4      	b.n	801011a <__pow5mult+0x6a>
 8010150:	4638      	mov	r0, r7
 8010152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010156:	bf00      	nop
 8010158:	08011b50 	.word	0x08011b50
 801015c:	080119ea 	.word	0x080119ea
 8010160:	08011a01 	.word	0x08011a01

08010164 <__lshift>:
 8010164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010168:	460c      	mov	r4, r1
 801016a:	6849      	ldr	r1, [r1, #4]
 801016c:	6923      	ldr	r3, [r4, #16]
 801016e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010172:	68a3      	ldr	r3, [r4, #8]
 8010174:	4607      	mov	r7, r0
 8010176:	4691      	mov	r9, r2
 8010178:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801017c:	f108 0601 	add.w	r6, r8, #1
 8010180:	42b3      	cmp	r3, r6
 8010182:	db0b      	blt.n	801019c <__lshift+0x38>
 8010184:	4638      	mov	r0, r7
 8010186:	f7ff fd93 	bl	800fcb0 <_Balloc>
 801018a:	4605      	mov	r5, r0
 801018c:	b948      	cbnz	r0, 80101a2 <__lshift+0x3e>
 801018e:	4602      	mov	r2, r0
 8010190:	4b28      	ldr	r3, [pc, #160]	; (8010234 <__lshift+0xd0>)
 8010192:	4829      	ldr	r0, [pc, #164]	; (8010238 <__lshift+0xd4>)
 8010194:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010198:	f000 fe04 	bl	8010da4 <__assert_func>
 801019c:	3101      	adds	r1, #1
 801019e:	005b      	lsls	r3, r3, #1
 80101a0:	e7ee      	b.n	8010180 <__lshift+0x1c>
 80101a2:	2300      	movs	r3, #0
 80101a4:	f100 0114 	add.w	r1, r0, #20
 80101a8:	f100 0210 	add.w	r2, r0, #16
 80101ac:	4618      	mov	r0, r3
 80101ae:	4553      	cmp	r3, sl
 80101b0:	db33      	blt.n	801021a <__lshift+0xb6>
 80101b2:	6920      	ldr	r0, [r4, #16]
 80101b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80101b8:	f104 0314 	add.w	r3, r4, #20
 80101bc:	f019 091f 	ands.w	r9, r9, #31
 80101c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80101c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80101c8:	d02b      	beq.n	8010222 <__lshift+0xbe>
 80101ca:	f1c9 0e20 	rsb	lr, r9, #32
 80101ce:	468a      	mov	sl, r1
 80101d0:	2200      	movs	r2, #0
 80101d2:	6818      	ldr	r0, [r3, #0]
 80101d4:	fa00 f009 	lsl.w	r0, r0, r9
 80101d8:	4310      	orrs	r0, r2
 80101da:	f84a 0b04 	str.w	r0, [sl], #4
 80101de:	f853 2b04 	ldr.w	r2, [r3], #4
 80101e2:	459c      	cmp	ip, r3
 80101e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80101e8:	d8f3      	bhi.n	80101d2 <__lshift+0x6e>
 80101ea:	ebac 0304 	sub.w	r3, ip, r4
 80101ee:	3b15      	subs	r3, #21
 80101f0:	f023 0303 	bic.w	r3, r3, #3
 80101f4:	3304      	adds	r3, #4
 80101f6:	f104 0015 	add.w	r0, r4, #21
 80101fa:	4584      	cmp	ip, r0
 80101fc:	bf38      	it	cc
 80101fe:	2304      	movcc	r3, #4
 8010200:	50ca      	str	r2, [r1, r3]
 8010202:	b10a      	cbz	r2, 8010208 <__lshift+0xa4>
 8010204:	f108 0602 	add.w	r6, r8, #2
 8010208:	3e01      	subs	r6, #1
 801020a:	4638      	mov	r0, r7
 801020c:	612e      	str	r6, [r5, #16]
 801020e:	4621      	mov	r1, r4
 8010210:	f7ff fd8e 	bl	800fd30 <_Bfree>
 8010214:	4628      	mov	r0, r5
 8010216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801021a:	f842 0f04 	str.w	r0, [r2, #4]!
 801021e:	3301      	adds	r3, #1
 8010220:	e7c5      	b.n	80101ae <__lshift+0x4a>
 8010222:	3904      	subs	r1, #4
 8010224:	f853 2b04 	ldr.w	r2, [r3], #4
 8010228:	f841 2f04 	str.w	r2, [r1, #4]!
 801022c:	459c      	cmp	ip, r3
 801022e:	d8f9      	bhi.n	8010224 <__lshift+0xc0>
 8010230:	e7ea      	b.n	8010208 <__lshift+0xa4>
 8010232:	bf00      	nop
 8010234:	08011979 	.word	0x08011979
 8010238:	08011a01 	.word	0x08011a01

0801023c <__mcmp>:
 801023c:	b530      	push	{r4, r5, lr}
 801023e:	6902      	ldr	r2, [r0, #16]
 8010240:	690c      	ldr	r4, [r1, #16]
 8010242:	1b12      	subs	r2, r2, r4
 8010244:	d10e      	bne.n	8010264 <__mcmp+0x28>
 8010246:	f100 0314 	add.w	r3, r0, #20
 801024a:	3114      	adds	r1, #20
 801024c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010250:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010254:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010258:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801025c:	42a5      	cmp	r5, r4
 801025e:	d003      	beq.n	8010268 <__mcmp+0x2c>
 8010260:	d305      	bcc.n	801026e <__mcmp+0x32>
 8010262:	2201      	movs	r2, #1
 8010264:	4610      	mov	r0, r2
 8010266:	bd30      	pop	{r4, r5, pc}
 8010268:	4283      	cmp	r3, r0
 801026a:	d3f3      	bcc.n	8010254 <__mcmp+0x18>
 801026c:	e7fa      	b.n	8010264 <__mcmp+0x28>
 801026e:	f04f 32ff 	mov.w	r2, #4294967295
 8010272:	e7f7      	b.n	8010264 <__mcmp+0x28>

08010274 <__mdiff>:
 8010274:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010278:	460c      	mov	r4, r1
 801027a:	4606      	mov	r6, r0
 801027c:	4611      	mov	r1, r2
 801027e:	4620      	mov	r0, r4
 8010280:	4690      	mov	r8, r2
 8010282:	f7ff ffdb 	bl	801023c <__mcmp>
 8010286:	1e05      	subs	r5, r0, #0
 8010288:	d110      	bne.n	80102ac <__mdiff+0x38>
 801028a:	4629      	mov	r1, r5
 801028c:	4630      	mov	r0, r6
 801028e:	f7ff fd0f 	bl	800fcb0 <_Balloc>
 8010292:	b930      	cbnz	r0, 80102a2 <__mdiff+0x2e>
 8010294:	4b3a      	ldr	r3, [pc, #232]	; (8010380 <__mdiff+0x10c>)
 8010296:	4602      	mov	r2, r0
 8010298:	f240 2137 	movw	r1, #567	; 0x237
 801029c:	4839      	ldr	r0, [pc, #228]	; (8010384 <__mdiff+0x110>)
 801029e:	f000 fd81 	bl	8010da4 <__assert_func>
 80102a2:	2301      	movs	r3, #1
 80102a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80102a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ac:	bfa4      	itt	ge
 80102ae:	4643      	movge	r3, r8
 80102b0:	46a0      	movge	r8, r4
 80102b2:	4630      	mov	r0, r6
 80102b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80102b8:	bfa6      	itte	ge
 80102ba:	461c      	movge	r4, r3
 80102bc:	2500      	movge	r5, #0
 80102be:	2501      	movlt	r5, #1
 80102c0:	f7ff fcf6 	bl	800fcb0 <_Balloc>
 80102c4:	b920      	cbnz	r0, 80102d0 <__mdiff+0x5c>
 80102c6:	4b2e      	ldr	r3, [pc, #184]	; (8010380 <__mdiff+0x10c>)
 80102c8:	4602      	mov	r2, r0
 80102ca:	f240 2145 	movw	r1, #581	; 0x245
 80102ce:	e7e5      	b.n	801029c <__mdiff+0x28>
 80102d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80102d4:	6926      	ldr	r6, [r4, #16]
 80102d6:	60c5      	str	r5, [r0, #12]
 80102d8:	f104 0914 	add.w	r9, r4, #20
 80102dc:	f108 0514 	add.w	r5, r8, #20
 80102e0:	f100 0e14 	add.w	lr, r0, #20
 80102e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80102e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80102ec:	f108 0210 	add.w	r2, r8, #16
 80102f0:	46f2      	mov	sl, lr
 80102f2:	2100      	movs	r1, #0
 80102f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80102f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80102fc:	fa11 f88b 	uxtah	r8, r1, fp
 8010300:	b299      	uxth	r1, r3
 8010302:	0c1b      	lsrs	r3, r3, #16
 8010304:	eba8 0801 	sub.w	r8, r8, r1
 8010308:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801030c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010310:	fa1f f888 	uxth.w	r8, r8
 8010314:	1419      	asrs	r1, r3, #16
 8010316:	454e      	cmp	r6, r9
 8010318:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801031c:	f84a 3b04 	str.w	r3, [sl], #4
 8010320:	d8e8      	bhi.n	80102f4 <__mdiff+0x80>
 8010322:	1b33      	subs	r3, r6, r4
 8010324:	3b15      	subs	r3, #21
 8010326:	f023 0303 	bic.w	r3, r3, #3
 801032a:	3304      	adds	r3, #4
 801032c:	3415      	adds	r4, #21
 801032e:	42a6      	cmp	r6, r4
 8010330:	bf38      	it	cc
 8010332:	2304      	movcc	r3, #4
 8010334:	441d      	add	r5, r3
 8010336:	4473      	add	r3, lr
 8010338:	469e      	mov	lr, r3
 801033a:	462e      	mov	r6, r5
 801033c:	4566      	cmp	r6, ip
 801033e:	d30e      	bcc.n	801035e <__mdiff+0xea>
 8010340:	f10c 0203 	add.w	r2, ip, #3
 8010344:	1b52      	subs	r2, r2, r5
 8010346:	f022 0203 	bic.w	r2, r2, #3
 801034a:	3d03      	subs	r5, #3
 801034c:	45ac      	cmp	ip, r5
 801034e:	bf38      	it	cc
 8010350:	2200      	movcc	r2, #0
 8010352:	4413      	add	r3, r2
 8010354:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010358:	b17a      	cbz	r2, 801037a <__mdiff+0x106>
 801035a:	6107      	str	r7, [r0, #16]
 801035c:	e7a4      	b.n	80102a8 <__mdiff+0x34>
 801035e:	f856 8b04 	ldr.w	r8, [r6], #4
 8010362:	fa11 f288 	uxtah	r2, r1, r8
 8010366:	1414      	asrs	r4, r2, #16
 8010368:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801036c:	b292      	uxth	r2, r2
 801036e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010372:	f84e 2b04 	str.w	r2, [lr], #4
 8010376:	1421      	asrs	r1, r4, #16
 8010378:	e7e0      	b.n	801033c <__mdiff+0xc8>
 801037a:	3f01      	subs	r7, #1
 801037c:	e7ea      	b.n	8010354 <__mdiff+0xe0>
 801037e:	bf00      	nop
 8010380:	08011979 	.word	0x08011979
 8010384:	08011a01 	.word	0x08011a01

08010388 <__ulp>:
 8010388:	b082      	sub	sp, #8
 801038a:	ed8d 0b00 	vstr	d0, [sp]
 801038e:	9a01      	ldr	r2, [sp, #4]
 8010390:	4b0f      	ldr	r3, [pc, #60]	; (80103d0 <__ulp+0x48>)
 8010392:	4013      	ands	r3, r2
 8010394:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8010398:	2b00      	cmp	r3, #0
 801039a:	dc08      	bgt.n	80103ae <__ulp+0x26>
 801039c:	425b      	negs	r3, r3
 801039e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80103a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80103a6:	da04      	bge.n	80103b2 <__ulp+0x2a>
 80103a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80103ac:	4113      	asrs	r3, r2
 80103ae:	2200      	movs	r2, #0
 80103b0:	e008      	b.n	80103c4 <__ulp+0x3c>
 80103b2:	f1a2 0314 	sub.w	r3, r2, #20
 80103b6:	2b1e      	cmp	r3, #30
 80103b8:	bfda      	itte	le
 80103ba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80103be:	40da      	lsrle	r2, r3
 80103c0:	2201      	movgt	r2, #1
 80103c2:	2300      	movs	r3, #0
 80103c4:	4619      	mov	r1, r3
 80103c6:	4610      	mov	r0, r2
 80103c8:	ec41 0b10 	vmov	d0, r0, r1
 80103cc:	b002      	add	sp, #8
 80103ce:	4770      	bx	lr
 80103d0:	7ff00000 	.word	0x7ff00000

080103d4 <__b2d>:
 80103d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103d8:	6906      	ldr	r6, [r0, #16]
 80103da:	f100 0814 	add.w	r8, r0, #20
 80103de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80103e2:	1f37      	subs	r7, r6, #4
 80103e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80103e8:	4610      	mov	r0, r2
 80103ea:	f7ff fd53 	bl	800fe94 <__hi0bits>
 80103ee:	f1c0 0320 	rsb	r3, r0, #32
 80103f2:	280a      	cmp	r0, #10
 80103f4:	600b      	str	r3, [r1, #0]
 80103f6:	491b      	ldr	r1, [pc, #108]	; (8010464 <__b2d+0x90>)
 80103f8:	dc15      	bgt.n	8010426 <__b2d+0x52>
 80103fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80103fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8010402:	45b8      	cmp	r8, r7
 8010404:	ea43 0501 	orr.w	r5, r3, r1
 8010408:	bf34      	ite	cc
 801040a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801040e:	2300      	movcs	r3, #0
 8010410:	3015      	adds	r0, #21
 8010412:	fa02 f000 	lsl.w	r0, r2, r0
 8010416:	fa23 f30c 	lsr.w	r3, r3, ip
 801041a:	4303      	orrs	r3, r0
 801041c:	461c      	mov	r4, r3
 801041e:	ec45 4b10 	vmov	d0, r4, r5
 8010422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010426:	45b8      	cmp	r8, r7
 8010428:	bf3a      	itte	cc
 801042a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801042e:	f1a6 0708 	subcc.w	r7, r6, #8
 8010432:	2300      	movcs	r3, #0
 8010434:	380b      	subs	r0, #11
 8010436:	d012      	beq.n	801045e <__b2d+0x8a>
 8010438:	f1c0 0120 	rsb	r1, r0, #32
 801043c:	fa23 f401 	lsr.w	r4, r3, r1
 8010440:	4082      	lsls	r2, r0
 8010442:	4322      	orrs	r2, r4
 8010444:	4547      	cmp	r7, r8
 8010446:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801044a:	bf8c      	ite	hi
 801044c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010450:	2200      	movls	r2, #0
 8010452:	4083      	lsls	r3, r0
 8010454:	40ca      	lsrs	r2, r1
 8010456:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801045a:	4313      	orrs	r3, r2
 801045c:	e7de      	b.n	801041c <__b2d+0x48>
 801045e:	ea42 0501 	orr.w	r5, r2, r1
 8010462:	e7db      	b.n	801041c <__b2d+0x48>
 8010464:	3ff00000 	.word	0x3ff00000

08010468 <__d2b>:
 8010468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801046c:	460f      	mov	r7, r1
 801046e:	2101      	movs	r1, #1
 8010470:	ec59 8b10 	vmov	r8, r9, d0
 8010474:	4616      	mov	r6, r2
 8010476:	f7ff fc1b 	bl	800fcb0 <_Balloc>
 801047a:	4604      	mov	r4, r0
 801047c:	b930      	cbnz	r0, 801048c <__d2b+0x24>
 801047e:	4602      	mov	r2, r0
 8010480:	4b24      	ldr	r3, [pc, #144]	; (8010514 <__d2b+0xac>)
 8010482:	4825      	ldr	r0, [pc, #148]	; (8010518 <__d2b+0xb0>)
 8010484:	f240 310f 	movw	r1, #783	; 0x30f
 8010488:	f000 fc8c 	bl	8010da4 <__assert_func>
 801048c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010494:	bb2d      	cbnz	r5, 80104e2 <__d2b+0x7a>
 8010496:	9301      	str	r3, [sp, #4]
 8010498:	f1b8 0300 	subs.w	r3, r8, #0
 801049c:	d026      	beq.n	80104ec <__d2b+0x84>
 801049e:	4668      	mov	r0, sp
 80104a0:	9300      	str	r3, [sp, #0]
 80104a2:	f7ff fd17 	bl	800fed4 <__lo0bits>
 80104a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80104aa:	b1e8      	cbz	r0, 80104e8 <__d2b+0x80>
 80104ac:	f1c0 0320 	rsb	r3, r0, #32
 80104b0:	fa02 f303 	lsl.w	r3, r2, r3
 80104b4:	430b      	orrs	r3, r1
 80104b6:	40c2      	lsrs	r2, r0
 80104b8:	6163      	str	r3, [r4, #20]
 80104ba:	9201      	str	r2, [sp, #4]
 80104bc:	9b01      	ldr	r3, [sp, #4]
 80104be:	61a3      	str	r3, [r4, #24]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	bf14      	ite	ne
 80104c4:	2202      	movne	r2, #2
 80104c6:	2201      	moveq	r2, #1
 80104c8:	6122      	str	r2, [r4, #16]
 80104ca:	b1bd      	cbz	r5, 80104fc <__d2b+0x94>
 80104cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80104d0:	4405      	add	r5, r0
 80104d2:	603d      	str	r5, [r7, #0]
 80104d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80104d8:	6030      	str	r0, [r6, #0]
 80104da:	4620      	mov	r0, r4
 80104dc:	b003      	add	sp, #12
 80104de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80104e6:	e7d6      	b.n	8010496 <__d2b+0x2e>
 80104e8:	6161      	str	r1, [r4, #20]
 80104ea:	e7e7      	b.n	80104bc <__d2b+0x54>
 80104ec:	a801      	add	r0, sp, #4
 80104ee:	f7ff fcf1 	bl	800fed4 <__lo0bits>
 80104f2:	9b01      	ldr	r3, [sp, #4]
 80104f4:	6163      	str	r3, [r4, #20]
 80104f6:	3020      	adds	r0, #32
 80104f8:	2201      	movs	r2, #1
 80104fa:	e7e5      	b.n	80104c8 <__d2b+0x60>
 80104fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010500:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010504:	6038      	str	r0, [r7, #0]
 8010506:	6918      	ldr	r0, [r3, #16]
 8010508:	f7ff fcc4 	bl	800fe94 <__hi0bits>
 801050c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010510:	e7e2      	b.n	80104d8 <__d2b+0x70>
 8010512:	bf00      	nop
 8010514:	08011979 	.word	0x08011979
 8010518:	08011a01 	.word	0x08011a01

0801051c <__ratio>:
 801051c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010520:	4688      	mov	r8, r1
 8010522:	4669      	mov	r1, sp
 8010524:	4681      	mov	r9, r0
 8010526:	f7ff ff55 	bl	80103d4 <__b2d>
 801052a:	a901      	add	r1, sp, #4
 801052c:	4640      	mov	r0, r8
 801052e:	ec55 4b10 	vmov	r4, r5, d0
 8010532:	f7ff ff4f 	bl	80103d4 <__b2d>
 8010536:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801053a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801053e:	eba3 0c02 	sub.w	ip, r3, r2
 8010542:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010546:	1a9b      	subs	r3, r3, r2
 8010548:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801054c:	ec51 0b10 	vmov	r0, r1, d0
 8010550:	2b00      	cmp	r3, #0
 8010552:	bfd6      	itet	le
 8010554:	460a      	movle	r2, r1
 8010556:	462a      	movgt	r2, r5
 8010558:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801055c:	468b      	mov	fp, r1
 801055e:	462f      	mov	r7, r5
 8010560:	bfd4      	ite	le
 8010562:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010566:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801056a:	4620      	mov	r0, r4
 801056c:	ee10 2a10 	vmov	r2, s0
 8010570:	465b      	mov	r3, fp
 8010572:	4639      	mov	r1, r7
 8010574:	f7f0 f99a 	bl	80008ac <__aeabi_ddiv>
 8010578:	ec41 0b10 	vmov	d0, r0, r1
 801057c:	b003      	add	sp, #12
 801057e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010582 <__copybits>:
 8010582:	3901      	subs	r1, #1
 8010584:	b570      	push	{r4, r5, r6, lr}
 8010586:	1149      	asrs	r1, r1, #5
 8010588:	6914      	ldr	r4, [r2, #16]
 801058a:	3101      	adds	r1, #1
 801058c:	f102 0314 	add.w	r3, r2, #20
 8010590:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010594:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010598:	1f05      	subs	r5, r0, #4
 801059a:	42a3      	cmp	r3, r4
 801059c:	d30c      	bcc.n	80105b8 <__copybits+0x36>
 801059e:	1aa3      	subs	r3, r4, r2
 80105a0:	3b11      	subs	r3, #17
 80105a2:	f023 0303 	bic.w	r3, r3, #3
 80105a6:	3211      	adds	r2, #17
 80105a8:	42a2      	cmp	r2, r4
 80105aa:	bf88      	it	hi
 80105ac:	2300      	movhi	r3, #0
 80105ae:	4418      	add	r0, r3
 80105b0:	2300      	movs	r3, #0
 80105b2:	4288      	cmp	r0, r1
 80105b4:	d305      	bcc.n	80105c2 <__copybits+0x40>
 80105b6:	bd70      	pop	{r4, r5, r6, pc}
 80105b8:	f853 6b04 	ldr.w	r6, [r3], #4
 80105bc:	f845 6f04 	str.w	r6, [r5, #4]!
 80105c0:	e7eb      	b.n	801059a <__copybits+0x18>
 80105c2:	f840 3b04 	str.w	r3, [r0], #4
 80105c6:	e7f4      	b.n	80105b2 <__copybits+0x30>

080105c8 <__any_on>:
 80105c8:	f100 0214 	add.w	r2, r0, #20
 80105cc:	6900      	ldr	r0, [r0, #16]
 80105ce:	114b      	asrs	r3, r1, #5
 80105d0:	4298      	cmp	r0, r3
 80105d2:	b510      	push	{r4, lr}
 80105d4:	db11      	blt.n	80105fa <__any_on+0x32>
 80105d6:	dd0a      	ble.n	80105ee <__any_on+0x26>
 80105d8:	f011 011f 	ands.w	r1, r1, #31
 80105dc:	d007      	beq.n	80105ee <__any_on+0x26>
 80105de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80105e2:	fa24 f001 	lsr.w	r0, r4, r1
 80105e6:	fa00 f101 	lsl.w	r1, r0, r1
 80105ea:	428c      	cmp	r4, r1
 80105ec:	d10b      	bne.n	8010606 <__any_on+0x3e>
 80105ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80105f2:	4293      	cmp	r3, r2
 80105f4:	d803      	bhi.n	80105fe <__any_on+0x36>
 80105f6:	2000      	movs	r0, #0
 80105f8:	bd10      	pop	{r4, pc}
 80105fa:	4603      	mov	r3, r0
 80105fc:	e7f7      	b.n	80105ee <__any_on+0x26>
 80105fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010602:	2900      	cmp	r1, #0
 8010604:	d0f5      	beq.n	80105f2 <__any_on+0x2a>
 8010606:	2001      	movs	r0, #1
 8010608:	e7f6      	b.n	80105f8 <__any_on+0x30>

0801060a <__ascii_wctomb>:
 801060a:	b149      	cbz	r1, 8010620 <__ascii_wctomb+0x16>
 801060c:	2aff      	cmp	r2, #255	; 0xff
 801060e:	bf85      	ittet	hi
 8010610:	238a      	movhi	r3, #138	; 0x8a
 8010612:	6003      	strhi	r3, [r0, #0]
 8010614:	700a      	strbls	r2, [r1, #0]
 8010616:	f04f 30ff 	movhi.w	r0, #4294967295
 801061a:	bf98      	it	ls
 801061c:	2001      	movls	r0, #1
 801061e:	4770      	bx	lr
 8010620:	4608      	mov	r0, r1
 8010622:	4770      	bx	lr

08010624 <__ssputs_r>:
 8010624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010628:	688e      	ldr	r6, [r1, #8]
 801062a:	461f      	mov	r7, r3
 801062c:	42be      	cmp	r6, r7
 801062e:	680b      	ldr	r3, [r1, #0]
 8010630:	4682      	mov	sl, r0
 8010632:	460c      	mov	r4, r1
 8010634:	4690      	mov	r8, r2
 8010636:	d82c      	bhi.n	8010692 <__ssputs_r+0x6e>
 8010638:	898a      	ldrh	r2, [r1, #12]
 801063a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801063e:	d026      	beq.n	801068e <__ssputs_r+0x6a>
 8010640:	6965      	ldr	r5, [r4, #20]
 8010642:	6909      	ldr	r1, [r1, #16]
 8010644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010648:	eba3 0901 	sub.w	r9, r3, r1
 801064c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010650:	1c7b      	adds	r3, r7, #1
 8010652:	444b      	add	r3, r9
 8010654:	106d      	asrs	r5, r5, #1
 8010656:	429d      	cmp	r5, r3
 8010658:	bf38      	it	cc
 801065a:	461d      	movcc	r5, r3
 801065c:	0553      	lsls	r3, r2, #21
 801065e:	d527      	bpl.n	80106b0 <__ssputs_r+0x8c>
 8010660:	4629      	mov	r1, r5
 8010662:	f7ff fa87 	bl	800fb74 <_malloc_r>
 8010666:	4606      	mov	r6, r0
 8010668:	b360      	cbz	r0, 80106c4 <__ssputs_r+0xa0>
 801066a:	6921      	ldr	r1, [r4, #16]
 801066c:	464a      	mov	r2, r9
 801066e:	f7fe fea0 	bl	800f3b2 <memcpy>
 8010672:	89a3      	ldrh	r3, [r4, #12]
 8010674:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801067c:	81a3      	strh	r3, [r4, #12]
 801067e:	6126      	str	r6, [r4, #16]
 8010680:	6165      	str	r5, [r4, #20]
 8010682:	444e      	add	r6, r9
 8010684:	eba5 0509 	sub.w	r5, r5, r9
 8010688:	6026      	str	r6, [r4, #0]
 801068a:	60a5      	str	r5, [r4, #8]
 801068c:	463e      	mov	r6, r7
 801068e:	42be      	cmp	r6, r7
 8010690:	d900      	bls.n	8010694 <__ssputs_r+0x70>
 8010692:	463e      	mov	r6, r7
 8010694:	6820      	ldr	r0, [r4, #0]
 8010696:	4632      	mov	r2, r6
 8010698:	4641      	mov	r1, r8
 801069a:	f000 fb59 	bl	8010d50 <memmove>
 801069e:	68a3      	ldr	r3, [r4, #8]
 80106a0:	1b9b      	subs	r3, r3, r6
 80106a2:	60a3      	str	r3, [r4, #8]
 80106a4:	6823      	ldr	r3, [r4, #0]
 80106a6:	4433      	add	r3, r6
 80106a8:	6023      	str	r3, [r4, #0]
 80106aa:	2000      	movs	r0, #0
 80106ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106b0:	462a      	mov	r2, r5
 80106b2:	f000 fbb3 	bl	8010e1c <_realloc_r>
 80106b6:	4606      	mov	r6, r0
 80106b8:	2800      	cmp	r0, #0
 80106ba:	d1e0      	bne.n	801067e <__ssputs_r+0x5a>
 80106bc:	6921      	ldr	r1, [r4, #16]
 80106be:	4650      	mov	r0, sl
 80106c0:	f7fe fe94 	bl	800f3ec <_free_r>
 80106c4:	230c      	movs	r3, #12
 80106c6:	f8ca 3000 	str.w	r3, [sl]
 80106ca:	89a3      	ldrh	r3, [r4, #12]
 80106cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106d0:	81a3      	strh	r3, [r4, #12]
 80106d2:	f04f 30ff 	mov.w	r0, #4294967295
 80106d6:	e7e9      	b.n	80106ac <__ssputs_r+0x88>

080106d8 <_svfiprintf_r>:
 80106d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106dc:	4698      	mov	r8, r3
 80106de:	898b      	ldrh	r3, [r1, #12]
 80106e0:	061b      	lsls	r3, r3, #24
 80106e2:	b09d      	sub	sp, #116	; 0x74
 80106e4:	4607      	mov	r7, r0
 80106e6:	460d      	mov	r5, r1
 80106e8:	4614      	mov	r4, r2
 80106ea:	d50e      	bpl.n	801070a <_svfiprintf_r+0x32>
 80106ec:	690b      	ldr	r3, [r1, #16]
 80106ee:	b963      	cbnz	r3, 801070a <_svfiprintf_r+0x32>
 80106f0:	2140      	movs	r1, #64	; 0x40
 80106f2:	f7ff fa3f 	bl	800fb74 <_malloc_r>
 80106f6:	6028      	str	r0, [r5, #0]
 80106f8:	6128      	str	r0, [r5, #16]
 80106fa:	b920      	cbnz	r0, 8010706 <_svfiprintf_r+0x2e>
 80106fc:	230c      	movs	r3, #12
 80106fe:	603b      	str	r3, [r7, #0]
 8010700:	f04f 30ff 	mov.w	r0, #4294967295
 8010704:	e0d0      	b.n	80108a8 <_svfiprintf_r+0x1d0>
 8010706:	2340      	movs	r3, #64	; 0x40
 8010708:	616b      	str	r3, [r5, #20]
 801070a:	2300      	movs	r3, #0
 801070c:	9309      	str	r3, [sp, #36]	; 0x24
 801070e:	2320      	movs	r3, #32
 8010710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010714:	f8cd 800c 	str.w	r8, [sp, #12]
 8010718:	2330      	movs	r3, #48	; 0x30
 801071a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80108c0 <_svfiprintf_r+0x1e8>
 801071e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010722:	f04f 0901 	mov.w	r9, #1
 8010726:	4623      	mov	r3, r4
 8010728:	469a      	mov	sl, r3
 801072a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801072e:	b10a      	cbz	r2, 8010734 <_svfiprintf_r+0x5c>
 8010730:	2a25      	cmp	r2, #37	; 0x25
 8010732:	d1f9      	bne.n	8010728 <_svfiprintf_r+0x50>
 8010734:	ebba 0b04 	subs.w	fp, sl, r4
 8010738:	d00b      	beq.n	8010752 <_svfiprintf_r+0x7a>
 801073a:	465b      	mov	r3, fp
 801073c:	4622      	mov	r2, r4
 801073e:	4629      	mov	r1, r5
 8010740:	4638      	mov	r0, r7
 8010742:	f7ff ff6f 	bl	8010624 <__ssputs_r>
 8010746:	3001      	adds	r0, #1
 8010748:	f000 80a9 	beq.w	801089e <_svfiprintf_r+0x1c6>
 801074c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801074e:	445a      	add	r2, fp
 8010750:	9209      	str	r2, [sp, #36]	; 0x24
 8010752:	f89a 3000 	ldrb.w	r3, [sl]
 8010756:	2b00      	cmp	r3, #0
 8010758:	f000 80a1 	beq.w	801089e <_svfiprintf_r+0x1c6>
 801075c:	2300      	movs	r3, #0
 801075e:	f04f 32ff 	mov.w	r2, #4294967295
 8010762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010766:	f10a 0a01 	add.w	sl, sl, #1
 801076a:	9304      	str	r3, [sp, #16]
 801076c:	9307      	str	r3, [sp, #28]
 801076e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010772:	931a      	str	r3, [sp, #104]	; 0x68
 8010774:	4654      	mov	r4, sl
 8010776:	2205      	movs	r2, #5
 8010778:	f814 1b01 	ldrb.w	r1, [r4], #1
 801077c:	4850      	ldr	r0, [pc, #320]	; (80108c0 <_svfiprintf_r+0x1e8>)
 801077e:	f7ef fd5f 	bl	8000240 <memchr>
 8010782:	9a04      	ldr	r2, [sp, #16]
 8010784:	b9d8      	cbnz	r0, 80107be <_svfiprintf_r+0xe6>
 8010786:	06d0      	lsls	r0, r2, #27
 8010788:	bf44      	itt	mi
 801078a:	2320      	movmi	r3, #32
 801078c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010790:	0711      	lsls	r1, r2, #28
 8010792:	bf44      	itt	mi
 8010794:	232b      	movmi	r3, #43	; 0x2b
 8010796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801079a:	f89a 3000 	ldrb.w	r3, [sl]
 801079e:	2b2a      	cmp	r3, #42	; 0x2a
 80107a0:	d015      	beq.n	80107ce <_svfiprintf_r+0xf6>
 80107a2:	9a07      	ldr	r2, [sp, #28]
 80107a4:	4654      	mov	r4, sl
 80107a6:	2000      	movs	r0, #0
 80107a8:	f04f 0c0a 	mov.w	ip, #10
 80107ac:	4621      	mov	r1, r4
 80107ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107b2:	3b30      	subs	r3, #48	; 0x30
 80107b4:	2b09      	cmp	r3, #9
 80107b6:	d94d      	bls.n	8010854 <_svfiprintf_r+0x17c>
 80107b8:	b1b0      	cbz	r0, 80107e8 <_svfiprintf_r+0x110>
 80107ba:	9207      	str	r2, [sp, #28]
 80107bc:	e014      	b.n	80107e8 <_svfiprintf_r+0x110>
 80107be:	eba0 0308 	sub.w	r3, r0, r8
 80107c2:	fa09 f303 	lsl.w	r3, r9, r3
 80107c6:	4313      	orrs	r3, r2
 80107c8:	9304      	str	r3, [sp, #16]
 80107ca:	46a2      	mov	sl, r4
 80107cc:	e7d2      	b.n	8010774 <_svfiprintf_r+0x9c>
 80107ce:	9b03      	ldr	r3, [sp, #12]
 80107d0:	1d19      	adds	r1, r3, #4
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	9103      	str	r1, [sp, #12]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	bfbb      	ittet	lt
 80107da:	425b      	neglt	r3, r3
 80107dc:	f042 0202 	orrlt.w	r2, r2, #2
 80107e0:	9307      	strge	r3, [sp, #28]
 80107e2:	9307      	strlt	r3, [sp, #28]
 80107e4:	bfb8      	it	lt
 80107e6:	9204      	strlt	r2, [sp, #16]
 80107e8:	7823      	ldrb	r3, [r4, #0]
 80107ea:	2b2e      	cmp	r3, #46	; 0x2e
 80107ec:	d10c      	bne.n	8010808 <_svfiprintf_r+0x130>
 80107ee:	7863      	ldrb	r3, [r4, #1]
 80107f0:	2b2a      	cmp	r3, #42	; 0x2a
 80107f2:	d134      	bne.n	801085e <_svfiprintf_r+0x186>
 80107f4:	9b03      	ldr	r3, [sp, #12]
 80107f6:	1d1a      	adds	r2, r3, #4
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	9203      	str	r2, [sp, #12]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	bfb8      	it	lt
 8010800:	f04f 33ff 	movlt.w	r3, #4294967295
 8010804:	3402      	adds	r4, #2
 8010806:	9305      	str	r3, [sp, #20]
 8010808:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80108d0 <_svfiprintf_r+0x1f8>
 801080c:	7821      	ldrb	r1, [r4, #0]
 801080e:	2203      	movs	r2, #3
 8010810:	4650      	mov	r0, sl
 8010812:	f7ef fd15 	bl	8000240 <memchr>
 8010816:	b138      	cbz	r0, 8010828 <_svfiprintf_r+0x150>
 8010818:	9b04      	ldr	r3, [sp, #16]
 801081a:	eba0 000a 	sub.w	r0, r0, sl
 801081e:	2240      	movs	r2, #64	; 0x40
 8010820:	4082      	lsls	r2, r0
 8010822:	4313      	orrs	r3, r2
 8010824:	3401      	adds	r4, #1
 8010826:	9304      	str	r3, [sp, #16]
 8010828:	f814 1b01 	ldrb.w	r1, [r4], #1
 801082c:	4825      	ldr	r0, [pc, #148]	; (80108c4 <_svfiprintf_r+0x1ec>)
 801082e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010832:	2206      	movs	r2, #6
 8010834:	f7ef fd04 	bl	8000240 <memchr>
 8010838:	2800      	cmp	r0, #0
 801083a:	d038      	beq.n	80108ae <_svfiprintf_r+0x1d6>
 801083c:	4b22      	ldr	r3, [pc, #136]	; (80108c8 <_svfiprintf_r+0x1f0>)
 801083e:	bb1b      	cbnz	r3, 8010888 <_svfiprintf_r+0x1b0>
 8010840:	9b03      	ldr	r3, [sp, #12]
 8010842:	3307      	adds	r3, #7
 8010844:	f023 0307 	bic.w	r3, r3, #7
 8010848:	3308      	adds	r3, #8
 801084a:	9303      	str	r3, [sp, #12]
 801084c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801084e:	4433      	add	r3, r6
 8010850:	9309      	str	r3, [sp, #36]	; 0x24
 8010852:	e768      	b.n	8010726 <_svfiprintf_r+0x4e>
 8010854:	fb0c 3202 	mla	r2, ip, r2, r3
 8010858:	460c      	mov	r4, r1
 801085a:	2001      	movs	r0, #1
 801085c:	e7a6      	b.n	80107ac <_svfiprintf_r+0xd4>
 801085e:	2300      	movs	r3, #0
 8010860:	3401      	adds	r4, #1
 8010862:	9305      	str	r3, [sp, #20]
 8010864:	4619      	mov	r1, r3
 8010866:	f04f 0c0a 	mov.w	ip, #10
 801086a:	4620      	mov	r0, r4
 801086c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010870:	3a30      	subs	r2, #48	; 0x30
 8010872:	2a09      	cmp	r2, #9
 8010874:	d903      	bls.n	801087e <_svfiprintf_r+0x1a6>
 8010876:	2b00      	cmp	r3, #0
 8010878:	d0c6      	beq.n	8010808 <_svfiprintf_r+0x130>
 801087a:	9105      	str	r1, [sp, #20]
 801087c:	e7c4      	b.n	8010808 <_svfiprintf_r+0x130>
 801087e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010882:	4604      	mov	r4, r0
 8010884:	2301      	movs	r3, #1
 8010886:	e7f0      	b.n	801086a <_svfiprintf_r+0x192>
 8010888:	ab03      	add	r3, sp, #12
 801088a:	9300      	str	r3, [sp, #0]
 801088c:	462a      	mov	r2, r5
 801088e:	4b0f      	ldr	r3, [pc, #60]	; (80108cc <_svfiprintf_r+0x1f4>)
 8010890:	a904      	add	r1, sp, #16
 8010892:	4638      	mov	r0, r7
 8010894:	f3af 8000 	nop.w
 8010898:	1c42      	adds	r2, r0, #1
 801089a:	4606      	mov	r6, r0
 801089c:	d1d6      	bne.n	801084c <_svfiprintf_r+0x174>
 801089e:	89ab      	ldrh	r3, [r5, #12]
 80108a0:	065b      	lsls	r3, r3, #25
 80108a2:	f53f af2d 	bmi.w	8010700 <_svfiprintf_r+0x28>
 80108a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108a8:	b01d      	add	sp, #116	; 0x74
 80108aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ae:	ab03      	add	r3, sp, #12
 80108b0:	9300      	str	r3, [sp, #0]
 80108b2:	462a      	mov	r2, r5
 80108b4:	4b05      	ldr	r3, [pc, #20]	; (80108cc <_svfiprintf_r+0x1f4>)
 80108b6:	a904      	add	r1, sp, #16
 80108b8:	4638      	mov	r0, r7
 80108ba:	f000 f879 	bl	80109b0 <_printf_i>
 80108be:	e7eb      	b.n	8010898 <_svfiprintf_r+0x1c0>
 80108c0:	08011b5c 	.word	0x08011b5c
 80108c4:	08011b66 	.word	0x08011b66
 80108c8:	00000000 	.word	0x00000000
 80108cc:	08010625 	.word	0x08010625
 80108d0:	08011b62 	.word	0x08011b62

080108d4 <_printf_common>:
 80108d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108d8:	4616      	mov	r6, r2
 80108da:	4699      	mov	r9, r3
 80108dc:	688a      	ldr	r2, [r1, #8]
 80108de:	690b      	ldr	r3, [r1, #16]
 80108e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80108e4:	4293      	cmp	r3, r2
 80108e6:	bfb8      	it	lt
 80108e8:	4613      	movlt	r3, r2
 80108ea:	6033      	str	r3, [r6, #0]
 80108ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80108f0:	4607      	mov	r7, r0
 80108f2:	460c      	mov	r4, r1
 80108f4:	b10a      	cbz	r2, 80108fa <_printf_common+0x26>
 80108f6:	3301      	adds	r3, #1
 80108f8:	6033      	str	r3, [r6, #0]
 80108fa:	6823      	ldr	r3, [r4, #0]
 80108fc:	0699      	lsls	r1, r3, #26
 80108fe:	bf42      	ittt	mi
 8010900:	6833      	ldrmi	r3, [r6, #0]
 8010902:	3302      	addmi	r3, #2
 8010904:	6033      	strmi	r3, [r6, #0]
 8010906:	6825      	ldr	r5, [r4, #0]
 8010908:	f015 0506 	ands.w	r5, r5, #6
 801090c:	d106      	bne.n	801091c <_printf_common+0x48>
 801090e:	f104 0a19 	add.w	sl, r4, #25
 8010912:	68e3      	ldr	r3, [r4, #12]
 8010914:	6832      	ldr	r2, [r6, #0]
 8010916:	1a9b      	subs	r3, r3, r2
 8010918:	42ab      	cmp	r3, r5
 801091a:	dc26      	bgt.n	801096a <_printf_common+0x96>
 801091c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010920:	1e13      	subs	r3, r2, #0
 8010922:	6822      	ldr	r2, [r4, #0]
 8010924:	bf18      	it	ne
 8010926:	2301      	movne	r3, #1
 8010928:	0692      	lsls	r2, r2, #26
 801092a:	d42b      	bmi.n	8010984 <_printf_common+0xb0>
 801092c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010930:	4649      	mov	r1, r9
 8010932:	4638      	mov	r0, r7
 8010934:	47c0      	blx	r8
 8010936:	3001      	adds	r0, #1
 8010938:	d01e      	beq.n	8010978 <_printf_common+0xa4>
 801093a:	6823      	ldr	r3, [r4, #0]
 801093c:	6922      	ldr	r2, [r4, #16]
 801093e:	f003 0306 	and.w	r3, r3, #6
 8010942:	2b04      	cmp	r3, #4
 8010944:	bf02      	ittt	eq
 8010946:	68e5      	ldreq	r5, [r4, #12]
 8010948:	6833      	ldreq	r3, [r6, #0]
 801094a:	1aed      	subeq	r5, r5, r3
 801094c:	68a3      	ldr	r3, [r4, #8]
 801094e:	bf0c      	ite	eq
 8010950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010954:	2500      	movne	r5, #0
 8010956:	4293      	cmp	r3, r2
 8010958:	bfc4      	itt	gt
 801095a:	1a9b      	subgt	r3, r3, r2
 801095c:	18ed      	addgt	r5, r5, r3
 801095e:	2600      	movs	r6, #0
 8010960:	341a      	adds	r4, #26
 8010962:	42b5      	cmp	r5, r6
 8010964:	d11a      	bne.n	801099c <_printf_common+0xc8>
 8010966:	2000      	movs	r0, #0
 8010968:	e008      	b.n	801097c <_printf_common+0xa8>
 801096a:	2301      	movs	r3, #1
 801096c:	4652      	mov	r2, sl
 801096e:	4649      	mov	r1, r9
 8010970:	4638      	mov	r0, r7
 8010972:	47c0      	blx	r8
 8010974:	3001      	adds	r0, #1
 8010976:	d103      	bne.n	8010980 <_printf_common+0xac>
 8010978:	f04f 30ff 	mov.w	r0, #4294967295
 801097c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010980:	3501      	adds	r5, #1
 8010982:	e7c6      	b.n	8010912 <_printf_common+0x3e>
 8010984:	18e1      	adds	r1, r4, r3
 8010986:	1c5a      	adds	r2, r3, #1
 8010988:	2030      	movs	r0, #48	; 0x30
 801098a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801098e:	4422      	add	r2, r4
 8010990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010998:	3302      	adds	r3, #2
 801099a:	e7c7      	b.n	801092c <_printf_common+0x58>
 801099c:	2301      	movs	r3, #1
 801099e:	4622      	mov	r2, r4
 80109a0:	4649      	mov	r1, r9
 80109a2:	4638      	mov	r0, r7
 80109a4:	47c0      	blx	r8
 80109a6:	3001      	adds	r0, #1
 80109a8:	d0e6      	beq.n	8010978 <_printf_common+0xa4>
 80109aa:	3601      	adds	r6, #1
 80109ac:	e7d9      	b.n	8010962 <_printf_common+0x8e>
	...

080109b0 <_printf_i>:
 80109b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109b4:	7e0f      	ldrb	r7, [r1, #24]
 80109b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80109b8:	2f78      	cmp	r7, #120	; 0x78
 80109ba:	4691      	mov	r9, r2
 80109bc:	4680      	mov	r8, r0
 80109be:	460c      	mov	r4, r1
 80109c0:	469a      	mov	sl, r3
 80109c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80109c6:	d807      	bhi.n	80109d8 <_printf_i+0x28>
 80109c8:	2f62      	cmp	r7, #98	; 0x62
 80109ca:	d80a      	bhi.n	80109e2 <_printf_i+0x32>
 80109cc:	2f00      	cmp	r7, #0
 80109ce:	f000 80d4 	beq.w	8010b7a <_printf_i+0x1ca>
 80109d2:	2f58      	cmp	r7, #88	; 0x58
 80109d4:	f000 80c0 	beq.w	8010b58 <_printf_i+0x1a8>
 80109d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80109e0:	e03a      	b.n	8010a58 <_printf_i+0xa8>
 80109e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80109e6:	2b15      	cmp	r3, #21
 80109e8:	d8f6      	bhi.n	80109d8 <_printf_i+0x28>
 80109ea:	a101      	add	r1, pc, #4	; (adr r1, 80109f0 <_printf_i+0x40>)
 80109ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80109f0:	08010a49 	.word	0x08010a49
 80109f4:	08010a5d 	.word	0x08010a5d
 80109f8:	080109d9 	.word	0x080109d9
 80109fc:	080109d9 	.word	0x080109d9
 8010a00:	080109d9 	.word	0x080109d9
 8010a04:	080109d9 	.word	0x080109d9
 8010a08:	08010a5d 	.word	0x08010a5d
 8010a0c:	080109d9 	.word	0x080109d9
 8010a10:	080109d9 	.word	0x080109d9
 8010a14:	080109d9 	.word	0x080109d9
 8010a18:	080109d9 	.word	0x080109d9
 8010a1c:	08010b61 	.word	0x08010b61
 8010a20:	08010a89 	.word	0x08010a89
 8010a24:	08010b1b 	.word	0x08010b1b
 8010a28:	080109d9 	.word	0x080109d9
 8010a2c:	080109d9 	.word	0x080109d9
 8010a30:	08010b83 	.word	0x08010b83
 8010a34:	080109d9 	.word	0x080109d9
 8010a38:	08010a89 	.word	0x08010a89
 8010a3c:	080109d9 	.word	0x080109d9
 8010a40:	080109d9 	.word	0x080109d9
 8010a44:	08010b23 	.word	0x08010b23
 8010a48:	682b      	ldr	r3, [r5, #0]
 8010a4a:	1d1a      	adds	r2, r3, #4
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	602a      	str	r2, [r5, #0]
 8010a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a58:	2301      	movs	r3, #1
 8010a5a:	e09f      	b.n	8010b9c <_printf_i+0x1ec>
 8010a5c:	6820      	ldr	r0, [r4, #0]
 8010a5e:	682b      	ldr	r3, [r5, #0]
 8010a60:	0607      	lsls	r7, r0, #24
 8010a62:	f103 0104 	add.w	r1, r3, #4
 8010a66:	6029      	str	r1, [r5, #0]
 8010a68:	d501      	bpl.n	8010a6e <_printf_i+0xbe>
 8010a6a:	681e      	ldr	r6, [r3, #0]
 8010a6c:	e003      	b.n	8010a76 <_printf_i+0xc6>
 8010a6e:	0646      	lsls	r6, r0, #25
 8010a70:	d5fb      	bpl.n	8010a6a <_printf_i+0xba>
 8010a72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010a76:	2e00      	cmp	r6, #0
 8010a78:	da03      	bge.n	8010a82 <_printf_i+0xd2>
 8010a7a:	232d      	movs	r3, #45	; 0x2d
 8010a7c:	4276      	negs	r6, r6
 8010a7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a82:	485a      	ldr	r0, [pc, #360]	; (8010bec <_printf_i+0x23c>)
 8010a84:	230a      	movs	r3, #10
 8010a86:	e012      	b.n	8010aae <_printf_i+0xfe>
 8010a88:	682b      	ldr	r3, [r5, #0]
 8010a8a:	6820      	ldr	r0, [r4, #0]
 8010a8c:	1d19      	adds	r1, r3, #4
 8010a8e:	6029      	str	r1, [r5, #0]
 8010a90:	0605      	lsls	r5, r0, #24
 8010a92:	d501      	bpl.n	8010a98 <_printf_i+0xe8>
 8010a94:	681e      	ldr	r6, [r3, #0]
 8010a96:	e002      	b.n	8010a9e <_printf_i+0xee>
 8010a98:	0641      	lsls	r1, r0, #25
 8010a9a:	d5fb      	bpl.n	8010a94 <_printf_i+0xe4>
 8010a9c:	881e      	ldrh	r6, [r3, #0]
 8010a9e:	4853      	ldr	r0, [pc, #332]	; (8010bec <_printf_i+0x23c>)
 8010aa0:	2f6f      	cmp	r7, #111	; 0x6f
 8010aa2:	bf0c      	ite	eq
 8010aa4:	2308      	moveq	r3, #8
 8010aa6:	230a      	movne	r3, #10
 8010aa8:	2100      	movs	r1, #0
 8010aaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010aae:	6865      	ldr	r5, [r4, #4]
 8010ab0:	60a5      	str	r5, [r4, #8]
 8010ab2:	2d00      	cmp	r5, #0
 8010ab4:	bfa2      	ittt	ge
 8010ab6:	6821      	ldrge	r1, [r4, #0]
 8010ab8:	f021 0104 	bicge.w	r1, r1, #4
 8010abc:	6021      	strge	r1, [r4, #0]
 8010abe:	b90e      	cbnz	r6, 8010ac4 <_printf_i+0x114>
 8010ac0:	2d00      	cmp	r5, #0
 8010ac2:	d04b      	beq.n	8010b5c <_printf_i+0x1ac>
 8010ac4:	4615      	mov	r5, r2
 8010ac6:	fbb6 f1f3 	udiv	r1, r6, r3
 8010aca:	fb03 6711 	mls	r7, r3, r1, r6
 8010ace:	5dc7      	ldrb	r7, [r0, r7]
 8010ad0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010ad4:	4637      	mov	r7, r6
 8010ad6:	42bb      	cmp	r3, r7
 8010ad8:	460e      	mov	r6, r1
 8010ada:	d9f4      	bls.n	8010ac6 <_printf_i+0x116>
 8010adc:	2b08      	cmp	r3, #8
 8010ade:	d10b      	bne.n	8010af8 <_printf_i+0x148>
 8010ae0:	6823      	ldr	r3, [r4, #0]
 8010ae2:	07de      	lsls	r6, r3, #31
 8010ae4:	d508      	bpl.n	8010af8 <_printf_i+0x148>
 8010ae6:	6923      	ldr	r3, [r4, #16]
 8010ae8:	6861      	ldr	r1, [r4, #4]
 8010aea:	4299      	cmp	r1, r3
 8010aec:	bfde      	ittt	le
 8010aee:	2330      	movle	r3, #48	; 0x30
 8010af0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010af4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010af8:	1b52      	subs	r2, r2, r5
 8010afa:	6122      	str	r2, [r4, #16]
 8010afc:	f8cd a000 	str.w	sl, [sp]
 8010b00:	464b      	mov	r3, r9
 8010b02:	aa03      	add	r2, sp, #12
 8010b04:	4621      	mov	r1, r4
 8010b06:	4640      	mov	r0, r8
 8010b08:	f7ff fee4 	bl	80108d4 <_printf_common>
 8010b0c:	3001      	adds	r0, #1
 8010b0e:	d14a      	bne.n	8010ba6 <_printf_i+0x1f6>
 8010b10:	f04f 30ff 	mov.w	r0, #4294967295
 8010b14:	b004      	add	sp, #16
 8010b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b1a:	6823      	ldr	r3, [r4, #0]
 8010b1c:	f043 0320 	orr.w	r3, r3, #32
 8010b20:	6023      	str	r3, [r4, #0]
 8010b22:	4833      	ldr	r0, [pc, #204]	; (8010bf0 <_printf_i+0x240>)
 8010b24:	2778      	movs	r7, #120	; 0x78
 8010b26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010b2a:	6823      	ldr	r3, [r4, #0]
 8010b2c:	6829      	ldr	r1, [r5, #0]
 8010b2e:	061f      	lsls	r7, r3, #24
 8010b30:	f851 6b04 	ldr.w	r6, [r1], #4
 8010b34:	d402      	bmi.n	8010b3c <_printf_i+0x18c>
 8010b36:	065f      	lsls	r7, r3, #25
 8010b38:	bf48      	it	mi
 8010b3a:	b2b6      	uxthmi	r6, r6
 8010b3c:	07df      	lsls	r7, r3, #31
 8010b3e:	bf48      	it	mi
 8010b40:	f043 0320 	orrmi.w	r3, r3, #32
 8010b44:	6029      	str	r1, [r5, #0]
 8010b46:	bf48      	it	mi
 8010b48:	6023      	strmi	r3, [r4, #0]
 8010b4a:	b91e      	cbnz	r6, 8010b54 <_printf_i+0x1a4>
 8010b4c:	6823      	ldr	r3, [r4, #0]
 8010b4e:	f023 0320 	bic.w	r3, r3, #32
 8010b52:	6023      	str	r3, [r4, #0]
 8010b54:	2310      	movs	r3, #16
 8010b56:	e7a7      	b.n	8010aa8 <_printf_i+0xf8>
 8010b58:	4824      	ldr	r0, [pc, #144]	; (8010bec <_printf_i+0x23c>)
 8010b5a:	e7e4      	b.n	8010b26 <_printf_i+0x176>
 8010b5c:	4615      	mov	r5, r2
 8010b5e:	e7bd      	b.n	8010adc <_printf_i+0x12c>
 8010b60:	682b      	ldr	r3, [r5, #0]
 8010b62:	6826      	ldr	r6, [r4, #0]
 8010b64:	6961      	ldr	r1, [r4, #20]
 8010b66:	1d18      	adds	r0, r3, #4
 8010b68:	6028      	str	r0, [r5, #0]
 8010b6a:	0635      	lsls	r5, r6, #24
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	d501      	bpl.n	8010b74 <_printf_i+0x1c4>
 8010b70:	6019      	str	r1, [r3, #0]
 8010b72:	e002      	b.n	8010b7a <_printf_i+0x1ca>
 8010b74:	0670      	lsls	r0, r6, #25
 8010b76:	d5fb      	bpl.n	8010b70 <_printf_i+0x1c0>
 8010b78:	8019      	strh	r1, [r3, #0]
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	6123      	str	r3, [r4, #16]
 8010b7e:	4615      	mov	r5, r2
 8010b80:	e7bc      	b.n	8010afc <_printf_i+0x14c>
 8010b82:	682b      	ldr	r3, [r5, #0]
 8010b84:	1d1a      	adds	r2, r3, #4
 8010b86:	602a      	str	r2, [r5, #0]
 8010b88:	681d      	ldr	r5, [r3, #0]
 8010b8a:	6862      	ldr	r2, [r4, #4]
 8010b8c:	2100      	movs	r1, #0
 8010b8e:	4628      	mov	r0, r5
 8010b90:	f7ef fb56 	bl	8000240 <memchr>
 8010b94:	b108      	cbz	r0, 8010b9a <_printf_i+0x1ea>
 8010b96:	1b40      	subs	r0, r0, r5
 8010b98:	6060      	str	r0, [r4, #4]
 8010b9a:	6863      	ldr	r3, [r4, #4]
 8010b9c:	6123      	str	r3, [r4, #16]
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ba4:	e7aa      	b.n	8010afc <_printf_i+0x14c>
 8010ba6:	6923      	ldr	r3, [r4, #16]
 8010ba8:	462a      	mov	r2, r5
 8010baa:	4649      	mov	r1, r9
 8010bac:	4640      	mov	r0, r8
 8010bae:	47d0      	blx	sl
 8010bb0:	3001      	adds	r0, #1
 8010bb2:	d0ad      	beq.n	8010b10 <_printf_i+0x160>
 8010bb4:	6823      	ldr	r3, [r4, #0]
 8010bb6:	079b      	lsls	r3, r3, #30
 8010bb8:	d413      	bmi.n	8010be2 <_printf_i+0x232>
 8010bba:	68e0      	ldr	r0, [r4, #12]
 8010bbc:	9b03      	ldr	r3, [sp, #12]
 8010bbe:	4298      	cmp	r0, r3
 8010bc0:	bfb8      	it	lt
 8010bc2:	4618      	movlt	r0, r3
 8010bc4:	e7a6      	b.n	8010b14 <_printf_i+0x164>
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	4632      	mov	r2, r6
 8010bca:	4649      	mov	r1, r9
 8010bcc:	4640      	mov	r0, r8
 8010bce:	47d0      	blx	sl
 8010bd0:	3001      	adds	r0, #1
 8010bd2:	d09d      	beq.n	8010b10 <_printf_i+0x160>
 8010bd4:	3501      	adds	r5, #1
 8010bd6:	68e3      	ldr	r3, [r4, #12]
 8010bd8:	9903      	ldr	r1, [sp, #12]
 8010bda:	1a5b      	subs	r3, r3, r1
 8010bdc:	42ab      	cmp	r3, r5
 8010bde:	dcf2      	bgt.n	8010bc6 <_printf_i+0x216>
 8010be0:	e7eb      	b.n	8010bba <_printf_i+0x20a>
 8010be2:	2500      	movs	r5, #0
 8010be4:	f104 0619 	add.w	r6, r4, #25
 8010be8:	e7f5      	b.n	8010bd6 <_printf_i+0x226>
 8010bea:	bf00      	nop
 8010bec:	08011b6d 	.word	0x08011b6d
 8010bf0:	08011b7e 	.word	0x08011b7e

08010bf4 <__sflush_r>:
 8010bf4:	898a      	ldrh	r2, [r1, #12]
 8010bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bfa:	4605      	mov	r5, r0
 8010bfc:	0710      	lsls	r0, r2, #28
 8010bfe:	460c      	mov	r4, r1
 8010c00:	d458      	bmi.n	8010cb4 <__sflush_r+0xc0>
 8010c02:	684b      	ldr	r3, [r1, #4]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	dc05      	bgt.n	8010c14 <__sflush_r+0x20>
 8010c08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	dc02      	bgt.n	8010c14 <__sflush_r+0x20>
 8010c0e:	2000      	movs	r0, #0
 8010c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c16:	2e00      	cmp	r6, #0
 8010c18:	d0f9      	beq.n	8010c0e <__sflush_r+0x1a>
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010c20:	682f      	ldr	r7, [r5, #0]
 8010c22:	6a21      	ldr	r1, [r4, #32]
 8010c24:	602b      	str	r3, [r5, #0]
 8010c26:	d032      	beq.n	8010c8e <__sflush_r+0x9a>
 8010c28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010c2a:	89a3      	ldrh	r3, [r4, #12]
 8010c2c:	075a      	lsls	r2, r3, #29
 8010c2e:	d505      	bpl.n	8010c3c <__sflush_r+0x48>
 8010c30:	6863      	ldr	r3, [r4, #4]
 8010c32:	1ac0      	subs	r0, r0, r3
 8010c34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c36:	b10b      	cbz	r3, 8010c3c <__sflush_r+0x48>
 8010c38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010c3a:	1ac0      	subs	r0, r0, r3
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	4602      	mov	r2, r0
 8010c40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c42:	6a21      	ldr	r1, [r4, #32]
 8010c44:	4628      	mov	r0, r5
 8010c46:	47b0      	blx	r6
 8010c48:	1c43      	adds	r3, r0, #1
 8010c4a:	89a3      	ldrh	r3, [r4, #12]
 8010c4c:	d106      	bne.n	8010c5c <__sflush_r+0x68>
 8010c4e:	6829      	ldr	r1, [r5, #0]
 8010c50:	291d      	cmp	r1, #29
 8010c52:	d82b      	bhi.n	8010cac <__sflush_r+0xb8>
 8010c54:	4a29      	ldr	r2, [pc, #164]	; (8010cfc <__sflush_r+0x108>)
 8010c56:	410a      	asrs	r2, r1
 8010c58:	07d6      	lsls	r6, r2, #31
 8010c5a:	d427      	bmi.n	8010cac <__sflush_r+0xb8>
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	6062      	str	r2, [r4, #4]
 8010c60:	04d9      	lsls	r1, r3, #19
 8010c62:	6922      	ldr	r2, [r4, #16]
 8010c64:	6022      	str	r2, [r4, #0]
 8010c66:	d504      	bpl.n	8010c72 <__sflush_r+0x7e>
 8010c68:	1c42      	adds	r2, r0, #1
 8010c6a:	d101      	bne.n	8010c70 <__sflush_r+0x7c>
 8010c6c:	682b      	ldr	r3, [r5, #0]
 8010c6e:	b903      	cbnz	r3, 8010c72 <__sflush_r+0x7e>
 8010c70:	6560      	str	r0, [r4, #84]	; 0x54
 8010c72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c74:	602f      	str	r7, [r5, #0]
 8010c76:	2900      	cmp	r1, #0
 8010c78:	d0c9      	beq.n	8010c0e <__sflush_r+0x1a>
 8010c7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c7e:	4299      	cmp	r1, r3
 8010c80:	d002      	beq.n	8010c88 <__sflush_r+0x94>
 8010c82:	4628      	mov	r0, r5
 8010c84:	f7fe fbb2 	bl	800f3ec <_free_r>
 8010c88:	2000      	movs	r0, #0
 8010c8a:	6360      	str	r0, [r4, #52]	; 0x34
 8010c8c:	e7c0      	b.n	8010c10 <__sflush_r+0x1c>
 8010c8e:	2301      	movs	r3, #1
 8010c90:	4628      	mov	r0, r5
 8010c92:	47b0      	blx	r6
 8010c94:	1c41      	adds	r1, r0, #1
 8010c96:	d1c8      	bne.n	8010c2a <__sflush_r+0x36>
 8010c98:	682b      	ldr	r3, [r5, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d0c5      	beq.n	8010c2a <__sflush_r+0x36>
 8010c9e:	2b1d      	cmp	r3, #29
 8010ca0:	d001      	beq.n	8010ca6 <__sflush_r+0xb2>
 8010ca2:	2b16      	cmp	r3, #22
 8010ca4:	d101      	bne.n	8010caa <__sflush_r+0xb6>
 8010ca6:	602f      	str	r7, [r5, #0]
 8010ca8:	e7b1      	b.n	8010c0e <__sflush_r+0x1a>
 8010caa:	89a3      	ldrh	r3, [r4, #12]
 8010cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cb0:	81a3      	strh	r3, [r4, #12]
 8010cb2:	e7ad      	b.n	8010c10 <__sflush_r+0x1c>
 8010cb4:	690f      	ldr	r7, [r1, #16]
 8010cb6:	2f00      	cmp	r7, #0
 8010cb8:	d0a9      	beq.n	8010c0e <__sflush_r+0x1a>
 8010cba:	0793      	lsls	r3, r2, #30
 8010cbc:	680e      	ldr	r6, [r1, #0]
 8010cbe:	bf08      	it	eq
 8010cc0:	694b      	ldreq	r3, [r1, #20]
 8010cc2:	600f      	str	r7, [r1, #0]
 8010cc4:	bf18      	it	ne
 8010cc6:	2300      	movne	r3, #0
 8010cc8:	eba6 0807 	sub.w	r8, r6, r7
 8010ccc:	608b      	str	r3, [r1, #8]
 8010cce:	f1b8 0f00 	cmp.w	r8, #0
 8010cd2:	dd9c      	ble.n	8010c0e <__sflush_r+0x1a>
 8010cd4:	6a21      	ldr	r1, [r4, #32]
 8010cd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010cd8:	4643      	mov	r3, r8
 8010cda:	463a      	mov	r2, r7
 8010cdc:	4628      	mov	r0, r5
 8010cde:	47b0      	blx	r6
 8010ce0:	2800      	cmp	r0, #0
 8010ce2:	dc06      	bgt.n	8010cf2 <__sflush_r+0xfe>
 8010ce4:	89a3      	ldrh	r3, [r4, #12]
 8010ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cea:	81a3      	strh	r3, [r4, #12]
 8010cec:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf0:	e78e      	b.n	8010c10 <__sflush_r+0x1c>
 8010cf2:	4407      	add	r7, r0
 8010cf4:	eba8 0800 	sub.w	r8, r8, r0
 8010cf8:	e7e9      	b.n	8010cce <__sflush_r+0xda>
 8010cfa:	bf00      	nop
 8010cfc:	dfbffffe 	.word	0xdfbffffe

08010d00 <_fflush_r>:
 8010d00:	b538      	push	{r3, r4, r5, lr}
 8010d02:	690b      	ldr	r3, [r1, #16]
 8010d04:	4605      	mov	r5, r0
 8010d06:	460c      	mov	r4, r1
 8010d08:	b913      	cbnz	r3, 8010d10 <_fflush_r+0x10>
 8010d0a:	2500      	movs	r5, #0
 8010d0c:	4628      	mov	r0, r5
 8010d0e:	bd38      	pop	{r3, r4, r5, pc}
 8010d10:	b118      	cbz	r0, 8010d1a <_fflush_r+0x1a>
 8010d12:	6a03      	ldr	r3, [r0, #32]
 8010d14:	b90b      	cbnz	r3, 8010d1a <_fflush_r+0x1a>
 8010d16:	f7fe f9d9 	bl	800f0cc <__sinit>
 8010d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d0f3      	beq.n	8010d0a <_fflush_r+0xa>
 8010d22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d24:	07d0      	lsls	r0, r2, #31
 8010d26:	d404      	bmi.n	8010d32 <_fflush_r+0x32>
 8010d28:	0599      	lsls	r1, r3, #22
 8010d2a:	d402      	bmi.n	8010d32 <_fflush_r+0x32>
 8010d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d2e:	f7fe fb36 	bl	800f39e <__retarget_lock_acquire_recursive>
 8010d32:	4628      	mov	r0, r5
 8010d34:	4621      	mov	r1, r4
 8010d36:	f7ff ff5d 	bl	8010bf4 <__sflush_r>
 8010d3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d3c:	07da      	lsls	r2, r3, #31
 8010d3e:	4605      	mov	r5, r0
 8010d40:	d4e4      	bmi.n	8010d0c <_fflush_r+0xc>
 8010d42:	89a3      	ldrh	r3, [r4, #12]
 8010d44:	059b      	lsls	r3, r3, #22
 8010d46:	d4e1      	bmi.n	8010d0c <_fflush_r+0xc>
 8010d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d4a:	f7fe fb29 	bl	800f3a0 <__retarget_lock_release_recursive>
 8010d4e:	e7dd      	b.n	8010d0c <_fflush_r+0xc>

08010d50 <memmove>:
 8010d50:	4288      	cmp	r0, r1
 8010d52:	b510      	push	{r4, lr}
 8010d54:	eb01 0402 	add.w	r4, r1, r2
 8010d58:	d902      	bls.n	8010d60 <memmove+0x10>
 8010d5a:	4284      	cmp	r4, r0
 8010d5c:	4623      	mov	r3, r4
 8010d5e:	d807      	bhi.n	8010d70 <memmove+0x20>
 8010d60:	1e43      	subs	r3, r0, #1
 8010d62:	42a1      	cmp	r1, r4
 8010d64:	d008      	beq.n	8010d78 <memmove+0x28>
 8010d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d6e:	e7f8      	b.n	8010d62 <memmove+0x12>
 8010d70:	4402      	add	r2, r0
 8010d72:	4601      	mov	r1, r0
 8010d74:	428a      	cmp	r2, r1
 8010d76:	d100      	bne.n	8010d7a <memmove+0x2a>
 8010d78:	bd10      	pop	{r4, pc}
 8010d7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d82:	e7f7      	b.n	8010d74 <memmove+0x24>

08010d84 <_sbrk_r>:
 8010d84:	b538      	push	{r3, r4, r5, lr}
 8010d86:	4d06      	ldr	r5, [pc, #24]	; (8010da0 <_sbrk_r+0x1c>)
 8010d88:	2300      	movs	r3, #0
 8010d8a:	4604      	mov	r4, r0
 8010d8c:	4608      	mov	r0, r1
 8010d8e:	602b      	str	r3, [r5, #0]
 8010d90:	f7f0 fb1a 	bl	80013c8 <_sbrk>
 8010d94:	1c43      	adds	r3, r0, #1
 8010d96:	d102      	bne.n	8010d9e <_sbrk_r+0x1a>
 8010d98:	682b      	ldr	r3, [r5, #0]
 8010d9a:	b103      	cbz	r3, 8010d9e <_sbrk_r+0x1a>
 8010d9c:	6023      	str	r3, [r4, #0]
 8010d9e:	bd38      	pop	{r3, r4, r5, pc}
 8010da0:	200036a0 	.word	0x200036a0

08010da4 <__assert_func>:
 8010da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010da6:	4614      	mov	r4, r2
 8010da8:	461a      	mov	r2, r3
 8010daa:	4b09      	ldr	r3, [pc, #36]	; (8010dd0 <__assert_func+0x2c>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	4605      	mov	r5, r0
 8010db0:	68d8      	ldr	r0, [r3, #12]
 8010db2:	b14c      	cbz	r4, 8010dc8 <__assert_func+0x24>
 8010db4:	4b07      	ldr	r3, [pc, #28]	; (8010dd4 <__assert_func+0x30>)
 8010db6:	9100      	str	r1, [sp, #0]
 8010db8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010dbc:	4906      	ldr	r1, [pc, #24]	; (8010dd8 <__assert_func+0x34>)
 8010dbe:	462b      	mov	r3, r5
 8010dc0:	f000 f85c 	bl	8010e7c <fiprintf>
 8010dc4:	f000 f86c 	bl	8010ea0 <abort>
 8010dc8:	4b04      	ldr	r3, [pc, #16]	; (8010ddc <__assert_func+0x38>)
 8010dca:	461c      	mov	r4, r3
 8010dcc:	e7f3      	b.n	8010db6 <__assert_func+0x12>
 8010dce:	bf00      	nop
 8010dd0:	20000360 	.word	0x20000360
 8010dd4:	08011b8f 	.word	0x08011b8f
 8010dd8:	08011b9c 	.word	0x08011b9c
 8010ddc:	08011bca 	.word	0x08011bca

08010de0 <_calloc_r>:
 8010de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010de2:	fba1 2402 	umull	r2, r4, r1, r2
 8010de6:	b94c      	cbnz	r4, 8010dfc <_calloc_r+0x1c>
 8010de8:	4611      	mov	r1, r2
 8010dea:	9201      	str	r2, [sp, #4]
 8010dec:	f7fe fec2 	bl	800fb74 <_malloc_r>
 8010df0:	9a01      	ldr	r2, [sp, #4]
 8010df2:	4605      	mov	r5, r0
 8010df4:	b930      	cbnz	r0, 8010e04 <_calloc_r+0x24>
 8010df6:	4628      	mov	r0, r5
 8010df8:	b003      	add	sp, #12
 8010dfa:	bd30      	pop	{r4, r5, pc}
 8010dfc:	220c      	movs	r2, #12
 8010dfe:	6002      	str	r2, [r0, #0]
 8010e00:	2500      	movs	r5, #0
 8010e02:	e7f8      	b.n	8010df6 <_calloc_r+0x16>
 8010e04:	4621      	mov	r1, r4
 8010e06:	f7fe fa13 	bl	800f230 <memset>
 8010e0a:	e7f4      	b.n	8010df6 <_calloc_r+0x16>

08010e0c <malloc>:
 8010e0c:	4b02      	ldr	r3, [pc, #8]	; (8010e18 <malloc+0xc>)
 8010e0e:	4601      	mov	r1, r0
 8010e10:	6818      	ldr	r0, [r3, #0]
 8010e12:	f7fe beaf 	b.w	800fb74 <_malloc_r>
 8010e16:	bf00      	nop
 8010e18:	20000360 	.word	0x20000360

08010e1c <_realloc_r>:
 8010e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e20:	4680      	mov	r8, r0
 8010e22:	4614      	mov	r4, r2
 8010e24:	460e      	mov	r6, r1
 8010e26:	b921      	cbnz	r1, 8010e32 <_realloc_r+0x16>
 8010e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e2c:	4611      	mov	r1, r2
 8010e2e:	f7fe bea1 	b.w	800fb74 <_malloc_r>
 8010e32:	b92a      	cbnz	r2, 8010e40 <_realloc_r+0x24>
 8010e34:	f7fe fada 	bl	800f3ec <_free_r>
 8010e38:	4625      	mov	r5, r4
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e40:	f000 f835 	bl	8010eae <_malloc_usable_size_r>
 8010e44:	4284      	cmp	r4, r0
 8010e46:	4607      	mov	r7, r0
 8010e48:	d802      	bhi.n	8010e50 <_realloc_r+0x34>
 8010e4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010e4e:	d812      	bhi.n	8010e76 <_realloc_r+0x5a>
 8010e50:	4621      	mov	r1, r4
 8010e52:	4640      	mov	r0, r8
 8010e54:	f7fe fe8e 	bl	800fb74 <_malloc_r>
 8010e58:	4605      	mov	r5, r0
 8010e5a:	2800      	cmp	r0, #0
 8010e5c:	d0ed      	beq.n	8010e3a <_realloc_r+0x1e>
 8010e5e:	42bc      	cmp	r4, r7
 8010e60:	4622      	mov	r2, r4
 8010e62:	4631      	mov	r1, r6
 8010e64:	bf28      	it	cs
 8010e66:	463a      	movcs	r2, r7
 8010e68:	f7fe faa3 	bl	800f3b2 <memcpy>
 8010e6c:	4631      	mov	r1, r6
 8010e6e:	4640      	mov	r0, r8
 8010e70:	f7fe fabc 	bl	800f3ec <_free_r>
 8010e74:	e7e1      	b.n	8010e3a <_realloc_r+0x1e>
 8010e76:	4635      	mov	r5, r6
 8010e78:	e7df      	b.n	8010e3a <_realloc_r+0x1e>
	...

08010e7c <fiprintf>:
 8010e7c:	b40e      	push	{r1, r2, r3}
 8010e7e:	b503      	push	{r0, r1, lr}
 8010e80:	4601      	mov	r1, r0
 8010e82:	ab03      	add	r3, sp, #12
 8010e84:	4805      	ldr	r0, [pc, #20]	; (8010e9c <fiprintf+0x20>)
 8010e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e8a:	6800      	ldr	r0, [r0, #0]
 8010e8c:	9301      	str	r3, [sp, #4]
 8010e8e:	f000 f83f 	bl	8010f10 <_vfiprintf_r>
 8010e92:	b002      	add	sp, #8
 8010e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e98:	b003      	add	sp, #12
 8010e9a:	4770      	bx	lr
 8010e9c:	20000360 	.word	0x20000360

08010ea0 <abort>:
 8010ea0:	b508      	push	{r3, lr}
 8010ea2:	2006      	movs	r0, #6
 8010ea4:	f000 fa0c 	bl	80112c0 <raise>
 8010ea8:	2001      	movs	r0, #1
 8010eaa:	f7f0 fa15 	bl	80012d8 <_exit>

08010eae <_malloc_usable_size_r>:
 8010eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010eb2:	1f18      	subs	r0, r3, #4
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	bfbc      	itt	lt
 8010eb8:	580b      	ldrlt	r3, [r1, r0]
 8010eba:	18c0      	addlt	r0, r0, r3
 8010ebc:	4770      	bx	lr

08010ebe <__sfputc_r>:
 8010ebe:	6893      	ldr	r3, [r2, #8]
 8010ec0:	3b01      	subs	r3, #1
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	b410      	push	{r4}
 8010ec6:	6093      	str	r3, [r2, #8]
 8010ec8:	da08      	bge.n	8010edc <__sfputc_r+0x1e>
 8010eca:	6994      	ldr	r4, [r2, #24]
 8010ecc:	42a3      	cmp	r3, r4
 8010ece:	db01      	blt.n	8010ed4 <__sfputc_r+0x16>
 8010ed0:	290a      	cmp	r1, #10
 8010ed2:	d103      	bne.n	8010edc <__sfputc_r+0x1e>
 8010ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ed8:	f000 b934 	b.w	8011144 <__swbuf_r>
 8010edc:	6813      	ldr	r3, [r2, #0]
 8010ede:	1c58      	adds	r0, r3, #1
 8010ee0:	6010      	str	r0, [r2, #0]
 8010ee2:	7019      	strb	r1, [r3, #0]
 8010ee4:	4608      	mov	r0, r1
 8010ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010eea:	4770      	bx	lr

08010eec <__sfputs_r>:
 8010eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eee:	4606      	mov	r6, r0
 8010ef0:	460f      	mov	r7, r1
 8010ef2:	4614      	mov	r4, r2
 8010ef4:	18d5      	adds	r5, r2, r3
 8010ef6:	42ac      	cmp	r4, r5
 8010ef8:	d101      	bne.n	8010efe <__sfputs_r+0x12>
 8010efa:	2000      	movs	r0, #0
 8010efc:	e007      	b.n	8010f0e <__sfputs_r+0x22>
 8010efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f02:	463a      	mov	r2, r7
 8010f04:	4630      	mov	r0, r6
 8010f06:	f7ff ffda 	bl	8010ebe <__sfputc_r>
 8010f0a:	1c43      	adds	r3, r0, #1
 8010f0c:	d1f3      	bne.n	8010ef6 <__sfputs_r+0xa>
 8010f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010f10 <_vfiprintf_r>:
 8010f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f14:	460d      	mov	r5, r1
 8010f16:	b09d      	sub	sp, #116	; 0x74
 8010f18:	4614      	mov	r4, r2
 8010f1a:	4698      	mov	r8, r3
 8010f1c:	4606      	mov	r6, r0
 8010f1e:	b118      	cbz	r0, 8010f28 <_vfiprintf_r+0x18>
 8010f20:	6a03      	ldr	r3, [r0, #32]
 8010f22:	b90b      	cbnz	r3, 8010f28 <_vfiprintf_r+0x18>
 8010f24:	f7fe f8d2 	bl	800f0cc <__sinit>
 8010f28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f2a:	07d9      	lsls	r1, r3, #31
 8010f2c:	d405      	bmi.n	8010f3a <_vfiprintf_r+0x2a>
 8010f2e:	89ab      	ldrh	r3, [r5, #12]
 8010f30:	059a      	lsls	r2, r3, #22
 8010f32:	d402      	bmi.n	8010f3a <_vfiprintf_r+0x2a>
 8010f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f36:	f7fe fa32 	bl	800f39e <__retarget_lock_acquire_recursive>
 8010f3a:	89ab      	ldrh	r3, [r5, #12]
 8010f3c:	071b      	lsls	r3, r3, #28
 8010f3e:	d501      	bpl.n	8010f44 <_vfiprintf_r+0x34>
 8010f40:	692b      	ldr	r3, [r5, #16]
 8010f42:	b99b      	cbnz	r3, 8010f6c <_vfiprintf_r+0x5c>
 8010f44:	4629      	mov	r1, r5
 8010f46:	4630      	mov	r0, r6
 8010f48:	f000 f93a 	bl	80111c0 <__swsetup_r>
 8010f4c:	b170      	cbz	r0, 8010f6c <_vfiprintf_r+0x5c>
 8010f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f50:	07dc      	lsls	r4, r3, #31
 8010f52:	d504      	bpl.n	8010f5e <_vfiprintf_r+0x4e>
 8010f54:	f04f 30ff 	mov.w	r0, #4294967295
 8010f58:	b01d      	add	sp, #116	; 0x74
 8010f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f5e:	89ab      	ldrh	r3, [r5, #12]
 8010f60:	0598      	lsls	r0, r3, #22
 8010f62:	d4f7      	bmi.n	8010f54 <_vfiprintf_r+0x44>
 8010f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f66:	f7fe fa1b 	bl	800f3a0 <__retarget_lock_release_recursive>
 8010f6a:	e7f3      	b.n	8010f54 <_vfiprintf_r+0x44>
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8010f70:	2320      	movs	r3, #32
 8010f72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f76:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f7a:	2330      	movs	r3, #48	; 0x30
 8010f7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011130 <_vfiprintf_r+0x220>
 8010f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f84:	f04f 0901 	mov.w	r9, #1
 8010f88:	4623      	mov	r3, r4
 8010f8a:	469a      	mov	sl, r3
 8010f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f90:	b10a      	cbz	r2, 8010f96 <_vfiprintf_r+0x86>
 8010f92:	2a25      	cmp	r2, #37	; 0x25
 8010f94:	d1f9      	bne.n	8010f8a <_vfiprintf_r+0x7a>
 8010f96:	ebba 0b04 	subs.w	fp, sl, r4
 8010f9a:	d00b      	beq.n	8010fb4 <_vfiprintf_r+0xa4>
 8010f9c:	465b      	mov	r3, fp
 8010f9e:	4622      	mov	r2, r4
 8010fa0:	4629      	mov	r1, r5
 8010fa2:	4630      	mov	r0, r6
 8010fa4:	f7ff ffa2 	bl	8010eec <__sfputs_r>
 8010fa8:	3001      	adds	r0, #1
 8010faa:	f000 80a9 	beq.w	8011100 <_vfiprintf_r+0x1f0>
 8010fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010fb0:	445a      	add	r2, fp
 8010fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8010fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	f000 80a1 	beq.w	8011100 <_vfiprintf_r+0x1f0>
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8010fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fc8:	f10a 0a01 	add.w	sl, sl, #1
 8010fcc:	9304      	str	r3, [sp, #16]
 8010fce:	9307      	str	r3, [sp, #28]
 8010fd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010fd4:	931a      	str	r3, [sp, #104]	; 0x68
 8010fd6:	4654      	mov	r4, sl
 8010fd8:	2205      	movs	r2, #5
 8010fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fde:	4854      	ldr	r0, [pc, #336]	; (8011130 <_vfiprintf_r+0x220>)
 8010fe0:	f7ef f92e 	bl	8000240 <memchr>
 8010fe4:	9a04      	ldr	r2, [sp, #16]
 8010fe6:	b9d8      	cbnz	r0, 8011020 <_vfiprintf_r+0x110>
 8010fe8:	06d1      	lsls	r1, r2, #27
 8010fea:	bf44      	itt	mi
 8010fec:	2320      	movmi	r3, #32
 8010fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ff2:	0713      	lsls	r3, r2, #28
 8010ff4:	bf44      	itt	mi
 8010ff6:	232b      	movmi	r3, #43	; 0x2b
 8010ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8011000:	2b2a      	cmp	r3, #42	; 0x2a
 8011002:	d015      	beq.n	8011030 <_vfiprintf_r+0x120>
 8011004:	9a07      	ldr	r2, [sp, #28]
 8011006:	4654      	mov	r4, sl
 8011008:	2000      	movs	r0, #0
 801100a:	f04f 0c0a 	mov.w	ip, #10
 801100e:	4621      	mov	r1, r4
 8011010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011014:	3b30      	subs	r3, #48	; 0x30
 8011016:	2b09      	cmp	r3, #9
 8011018:	d94d      	bls.n	80110b6 <_vfiprintf_r+0x1a6>
 801101a:	b1b0      	cbz	r0, 801104a <_vfiprintf_r+0x13a>
 801101c:	9207      	str	r2, [sp, #28]
 801101e:	e014      	b.n	801104a <_vfiprintf_r+0x13a>
 8011020:	eba0 0308 	sub.w	r3, r0, r8
 8011024:	fa09 f303 	lsl.w	r3, r9, r3
 8011028:	4313      	orrs	r3, r2
 801102a:	9304      	str	r3, [sp, #16]
 801102c:	46a2      	mov	sl, r4
 801102e:	e7d2      	b.n	8010fd6 <_vfiprintf_r+0xc6>
 8011030:	9b03      	ldr	r3, [sp, #12]
 8011032:	1d19      	adds	r1, r3, #4
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	9103      	str	r1, [sp, #12]
 8011038:	2b00      	cmp	r3, #0
 801103a:	bfbb      	ittet	lt
 801103c:	425b      	neglt	r3, r3
 801103e:	f042 0202 	orrlt.w	r2, r2, #2
 8011042:	9307      	strge	r3, [sp, #28]
 8011044:	9307      	strlt	r3, [sp, #28]
 8011046:	bfb8      	it	lt
 8011048:	9204      	strlt	r2, [sp, #16]
 801104a:	7823      	ldrb	r3, [r4, #0]
 801104c:	2b2e      	cmp	r3, #46	; 0x2e
 801104e:	d10c      	bne.n	801106a <_vfiprintf_r+0x15a>
 8011050:	7863      	ldrb	r3, [r4, #1]
 8011052:	2b2a      	cmp	r3, #42	; 0x2a
 8011054:	d134      	bne.n	80110c0 <_vfiprintf_r+0x1b0>
 8011056:	9b03      	ldr	r3, [sp, #12]
 8011058:	1d1a      	adds	r2, r3, #4
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	9203      	str	r2, [sp, #12]
 801105e:	2b00      	cmp	r3, #0
 8011060:	bfb8      	it	lt
 8011062:	f04f 33ff 	movlt.w	r3, #4294967295
 8011066:	3402      	adds	r4, #2
 8011068:	9305      	str	r3, [sp, #20]
 801106a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011140 <_vfiprintf_r+0x230>
 801106e:	7821      	ldrb	r1, [r4, #0]
 8011070:	2203      	movs	r2, #3
 8011072:	4650      	mov	r0, sl
 8011074:	f7ef f8e4 	bl	8000240 <memchr>
 8011078:	b138      	cbz	r0, 801108a <_vfiprintf_r+0x17a>
 801107a:	9b04      	ldr	r3, [sp, #16]
 801107c:	eba0 000a 	sub.w	r0, r0, sl
 8011080:	2240      	movs	r2, #64	; 0x40
 8011082:	4082      	lsls	r2, r0
 8011084:	4313      	orrs	r3, r2
 8011086:	3401      	adds	r4, #1
 8011088:	9304      	str	r3, [sp, #16]
 801108a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801108e:	4829      	ldr	r0, [pc, #164]	; (8011134 <_vfiprintf_r+0x224>)
 8011090:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011094:	2206      	movs	r2, #6
 8011096:	f7ef f8d3 	bl	8000240 <memchr>
 801109a:	2800      	cmp	r0, #0
 801109c:	d03f      	beq.n	801111e <_vfiprintf_r+0x20e>
 801109e:	4b26      	ldr	r3, [pc, #152]	; (8011138 <_vfiprintf_r+0x228>)
 80110a0:	bb1b      	cbnz	r3, 80110ea <_vfiprintf_r+0x1da>
 80110a2:	9b03      	ldr	r3, [sp, #12]
 80110a4:	3307      	adds	r3, #7
 80110a6:	f023 0307 	bic.w	r3, r3, #7
 80110aa:	3308      	adds	r3, #8
 80110ac:	9303      	str	r3, [sp, #12]
 80110ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110b0:	443b      	add	r3, r7
 80110b2:	9309      	str	r3, [sp, #36]	; 0x24
 80110b4:	e768      	b.n	8010f88 <_vfiprintf_r+0x78>
 80110b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80110ba:	460c      	mov	r4, r1
 80110bc:	2001      	movs	r0, #1
 80110be:	e7a6      	b.n	801100e <_vfiprintf_r+0xfe>
 80110c0:	2300      	movs	r3, #0
 80110c2:	3401      	adds	r4, #1
 80110c4:	9305      	str	r3, [sp, #20]
 80110c6:	4619      	mov	r1, r3
 80110c8:	f04f 0c0a 	mov.w	ip, #10
 80110cc:	4620      	mov	r0, r4
 80110ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110d2:	3a30      	subs	r2, #48	; 0x30
 80110d4:	2a09      	cmp	r2, #9
 80110d6:	d903      	bls.n	80110e0 <_vfiprintf_r+0x1d0>
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d0c6      	beq.n	801106a <_vfiprintf_r+0x15a>
 80110dc:	9105      	str	r1, [sp, #20]
 80110de:	e7c4      	b.n	801106a <_vfiprintf_r+0x15a>
 80110e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80110e4:	4604      	mov	r4, r0
 80110e6:	2301      	movs	r3, #1
 80110e8:	e7f0      	b.n	80110cc <_vfiprintf_r+0x1bc>
 80110ea:	ab03      	add	r3, sp, #12
 80110ec:	9300      	str	r3, [sp, #0]
 80110ee:	462a      	mov	r2, r5
 80110f0:	4b12      	ldr	r3, [pc, #72]	; (801113c <_vfiprintf_r+0x22c>)
 80110f2:	a904      	add	r1, sp, #16
 80110f4:	4630      	mov	r0, r6
 80110f6:	f3af 8000 	nop.w
 80110fa:	4607      	mov	r7, r0
 80110fc:	1c78      	adds	r0, r7, #1
 80110fe:	d1d6      	bne.n	80110ae <_vfiprintf_r+0x19e>
 8011100:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011102:	07d9      	lsls	r1, r3, #31
 8011104:	d405      	bmi.n	8011112 <_vfiprintf_r+0x202>
 8011106:	89ab      	ldrh	r3, [r5, #12]
 8011108:	059a      	lsls	r2, r3, #22
 801110a:	d402      	bmi.n	8011112 <_vfiprintf_r+0x202>
 801110c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801110e:	f7fe f947 	bl	800f3a0 <__retarget_lock_release_recursive>
 8011112:	89ab      	ldrh	r3, [r5, #12]
 8011114:	065b      	lsls	r3, r3, #25
 8011116:	f53f af1d 	bmi.w	8010f54 <_vfiprintf_r+0x44>
 801111a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801111c:	e71c      	b.n	8010f58 <_vfiprintf_r+0x48>
 801111e:	ab03      	add	r3, sp, #12
 8011120:	9300      	str	r3, [sp, #0]
 8011122:	462a      	mov	r2, r5
 8011124:	4b05      	ldr	r3, [pc, #20]	; (801113c <_vfiprintf_r+0x22c>)
 8011126:	a904      	add	r1, sp, #16
 8011128:	4630      	mov	r0, r6
 801112a:	f7ff fc41 	bl	80109b0 <_printf_i>
 801112e:	e7e4      	b.n	80110fa <_vfiprintf_r+0x1ea>
 8011130:	08011b5c 	.word	0x08011b5c
 8011134:	08011b66 	.word	0x08011b66
 8011138:	00000000 	.word	0x00000000
 801113c:	08010eed 	.word	0x08010eed
 8011140:	08011b62 	.word	0x08011b62

08011144 <__swbuf_r>:
 8011144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011146:	460e      	mov	r6, r1
 8011148:	4614      	mov	r4, r2
 801114a:	4605      	mov	r5, r0
 801114c:	b118      	cbz	r0, 8011156 <__swbuf_r+0x12>
 801114e:	6a03      	ldr	r3, [r0, #32]
 8011150:	b90b      	cbnz	r3, 8011156 <__swbuf_r+0x12>
 8011152:	f7fd ffbb 	bl	800f0cc <__sinit>
 8011156:	69a3      	ldr	r3, [r4, #24]
 8011158:	60a3      	str	r3, [r4, #8]
 801115a:	89a3      	ldrh	r3, [r4, #12]
 801115c:	071a      	lsls	r2, r3, #28
 801115e:	d525      	bpl.n	80111ac <__swbuf_r+0x68>
 8011160:	6923      	ldr	r3, [r4, #16]
 8011162:	b31b      	cbz	r3, 80111ac <__swbuf_r+0x68>
 8011164:	6823      	ldr	r3, [r4, #0]
 8011166:	6922      	ldr	r2, [r4, #16]
 8011168:	1a98      	subs	r0, r3, r2
 801116a:	6963      	ldr	r3, [r4, #20]
 801116c:	b2f6      	uxtb	r6, r6
 801116e:	4283      	cmp	r3, r0
 8011170:	4637      	mov	r7, r6
 8011172:	dc04      	bgt.n	801117e <__swbuf_r+0x3a>
 8011174:	4621      	mov	r1, r4
 8011176:	4628      	mov	r0, r5
 8011178:	f7ff fdc2 	bl	8010d00 <_fflush_r>
 801117c:	b9e0      	cbnz	r0, 80111b8 <__swbuf_r+0x74>
 801117e:	68a3      	ldr	r3, [r4, #8]
 8011180:	3b01      	subs	r3, #1
 8011182:	60a3      	str	r3, [r4, #8]
 8011184:	6823      	ldr	r3, [r4, #0]
 8011186:	1c5a      	adds	r2, r3, #1
 8011188:	6022      	str	r2, [r4, #0]
 801118a:	701e      	strb	r6, [r3, #0]
 801118c:	6962      	ldr	r2, [r4, #20]
 801118e:	1c43      	adds	r3, r0, #1
 8011190:	429a      	cmp	r2, r3
 8011192:	d004      	beq.n	801119e <__swbuf_r+0x5a>
 8011194:	89a3      	ldrh	r3, [r4, #12]
 8011196:	07db      	lsls	r3, r3, #31
 8011198:	d506      	bpl.n	80111a8 <__swbuf_r+0x64>
 801119a:	2e0a      	cmp	r6, #10
 801119c:	d104      	bne.n	80111a8 <__swbuf_r+0x64>
 801119e:	4621      	mov	r1, r4
 80111a0:	4628      	mov	r0, r5
 80111a2:	f7ff fdad 	bl	8010d00 <_fflush_r>
 80111a6:	b938      	cbnz	r0, 80111b8 <__swbuf_r+0x74>
 80111a8:	4638      	mov	r0, r7
 80111aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111ac:	4621      	mov	r1, r4
 80111ae:	4628      	mov	r0, r5
 80111b0:	f000 f806 	bl	80111c0 <__swsetup_r>
 80111b4:	2800      	cmp	r0, #0
 80111b6:	d0d5      	beq.n	8011164 <__swbuf_r+0x20>
 80111b8:	f04f 37ff 	mov.w	r7, #4294967295
 80111bc:	e7f4      	b.n	80111a8 <__swbuf_r+0x64>
	...

080111c0 <__swsetup_r>:
 80111c0:	b538      	push	{r3, r4, r5, lr}
 80111c2:	4b2a      	ldr	r3, [pc, #168]	; (801126c <__swsetup_r+0xac>)
 80111c4:	4605      	mov	r5, r0
 80111c6:	6818      	ldr	r0, [r3, #0]
 80111c8:	460c      	mov	r4, r1
 80111ca:	b118      	cbz	r0, 80111d4 <__swsetup_r+0x14>
 80111cc:	6a03      	ldr	r3, [r0, #32]
 80111ce:	b90b      	cbnz	r3, 80111d4 <__swsetup_r+0x14>
 80111d0:	f7fd ff7c 	bl	800f0cc <__sinit>
 80111d4:	89a3      	ldrh	r3, [r4, #12]
 80111d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80111da:	0718      	lsls	r0, r3, #28
 80111dc:	d422      	bmi.n	8011224 <__swsetup_r+0x64>
 80111de:	06d9      	lsls	r1, r3, #27
 80111e0:	d407      	bmi.n	80111f2 <__swsetup_r+0x32>
 80111e2:	2309      	movs	r3, #9
 80111e4:	602b      	str	r3, [r5, #0]
 80111e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80111ea:	81a3      	strh	r3, [r4, #12]
 80111ec:	f04f 30ff 	mov.w	r0, #4294967295
 80111f0:	e034      	b.n	801125c <__swsetup_r+0x9c>
 80111f2:	0758      	lsls	r0, r3, #29
 80111f4:	d512      	bpl.n	801121c <__swsetup_r+0x5c>
 80111f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111f8:	b141      	cbz	r1, 801120c <__swsetup_r+0x4c>
 80111fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111fe:	4299      	cmp	r1, r3
 8011200:	d002      	beq.n	8011208 <__swsetup_r+0x48>
 8011202:	4628      	mov	r0, r5
 8011204:	f7fe f8f2 	bl	800f3ec <_free_r>
 8011208:	2300      	movs	r3, #0
 801120a:	6363      	str	r3, [r4, #52]	; 0x34
 801120c:	89a3      	ldrh	r3, [r4, #12]
 801120e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011212:	81a3      	strh	r3, [r4, #12]
 8011214:	2300      	movs	r3, #0
 8011216:	6063      	str	r3, [r4, #4]
 8011218:	6923      	ldr	r3, [r4, #16]
 801121a:	6023      	str	r3, [r4, #0]
 801121c:	89a3      	ldrh	r3, [r4, #12]
 801121e:	f043 0308 	orr.w	r3, r3, #8
 8011222:	81a3      	strh	r3, [r4, #12]
 8011224:	6923      	ldr	r3, [r4, #16]
 8011226:	b94b      	cbnz	r3, 801123c <__swsetup_r+0x7c>
 8011228:	89a3      	ldrh	r3, [r4, #12]
 801122a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801122e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011232:	d003      	beq.n	801123c <__swsetup_r+0x7c>
 8011234:	4621      	mov	r1, r4
 8011236:	4628      	mov	r0, r5
 8011238:	f000 f884 	bl	8011344 <__smakebuf_r>
 801123c:	89a0      	ldrh	r0, [r4, #12]
 801123e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011242:	f010 0301 	ands.w	r3, r0, #1
 8011246:	d00a      	beq.n	801125e <__swsetup_r+0x9e>
 8011248:	2300      	movs	r3, #0
 801124a:	60a3      	str	r3, [r4, #8]
 801124c:	6963      	ldr	r3, [r4, #20]
 801124e:	425b      	negs	r3, r3
 8011250:	61a3      	str	r3, [r4, #24]
 8011252:	6923      	ldr	r3, [r4, #16]
 8011254:	b943      	cbnz	r3, 8011268 <__swsetup_r+0xa8>
 8011256:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801125a:	d1c4      	bne.n	80111e6 <__swsetup_r+0x26>
 801125c:	bd38      	pop	{r3, r4, r5, pc}
 801125e:	0781      	lsls	r1, r0, #30
 8011260:	bf58      	it	pl
 8011262:	6963      	ldrpl	r3, [r4, #20]
 8011264:	60a3      	str	r3, [r4, #8]
 8011266:	e7f4      	b.n	8011252 <__swsetup_r+0x92>
 8011268:	2000      	movs	r0, #0
 801126a:	e7f7      	b.n	801125c <__swsetup_r+0x9c>
 801126c:	20000360 	.word	0x20000360

08011270 <_raise_r>:
 8011270:	291f      	cmp	r1, #31
 8011272:	b538      	push	{r3, r4, r5, lr}
 8011274:	4604      	mov	r4, r0
 8011276:	460d      	mov	r5, r1
 8011278:	d904      	bls.n	8011284 <_raise_r+0x14>
 801127a:	2316      	movs	r3, #22
 801127c:	6003      	str	r3, [r0, #0]
 801127e:	f04f 30ff 	mov.w	r0, #4294967295
 8011282:	bd38      	pop	{r3, r4, r5, pc}
 8011284:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011286:	b112      	cbz	r2, 801128e <_raise_r+0x1e>
 8011288:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801128c:	b94b      	cbnz	r3, 80112a2 <_raise_r+0x32>
 801128e:	4620      	mov	r0, r4
 8011290:	f000 f830 	bl	80112f4 <_getpid_r>
 8011294:	462a      	mov	r2, r5
 8011296:	4601      	mov	r1, r0
 8011298:	4620      	mov	r0, r4
 801129a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801129e:	f000 b817 	b.w	80112d0 <_kill_r>
 80112a2:	2b01      	cmp	r3, #1
 80112a4:	d00a      	beq.n	80112bc <_raise_r+0x4c>
 80112a6:	1c59      	adds	r1, r3, #1
 80112a8:	d103      	bne.n	80112b2 <_raise_r+0x42>
 80112aa:	2316      	movs	r3, #22
 80112ac:	6003      	str	r3, [r0, #0]
 80112ae:	2001      	movs	r0, #1
 80112b0:	e7e7      	b.n	8011282 <_raise_r+0x12>
 80112b2:	2400      	movs	r4, #0
 80112b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80112b8:	4628      	mov	r0, r5
 80112ba:	4798      	blx	r3
 80112bc:	2000      	movs	r0, #0
 80112be:	e7e0      	b.n	8011282 <_raise_r+0x12>

080112c0 <raise>:
 80112c0:	4b02      	ldr	r3, [pc, #8]	; (80112cc <raise+0xc>)
 80112c2:	4601      	mov	r1, r0
 80112c4:	6818      	ldr	r0, [r3, #0]
 80112c6:	f7ff bfd3 	b.w	8011270 <_raise_r>
 80112ca:	bf00      	nop
 80112cc:	20000360 	.word	0x20000360

080112d0 <_kill_r>:
 80112d0:	b538      	push	{r3, r4, r5, lr}
 80112d2:	4d07      	ldr	r5, [pc, #28]	; (80112f0 <_kill_r+0x20>)
 80112d4:	2300      	movs	r3, #0
 80112d6:	4604      	mov	r4, r0
 80112d8:	4608      	mov	r0, r1
 80112da:	4611      	mov	r1, r2
 80112dc:	602b      	str	r3, [r5, #0]
 80112de:	f7ef ffeb 	bl	80012b8 <_kill>
 80112e2:	1c43      	adds	r3, r0, #1
 80112e4:	d102      	bne.n	80112ec <_kill_r+0x1c>
 80112e6:	682b      	ldr	r3, [r5, #0]
 80112e8:	b103      	cbz	r3, 80112ec <_kill_r+0x1c>
 80112ea:	6023      	str	r3, [r4, #0]
 80112ec:	bd38      	pop	{r3, r4, r5, pc}
 80112ee:	bf00      	nop
 80112f0:	200036a0 	.word	0x200036a0

080112f4 <_getpid_r>:
 80112f4:	f7ef bfd8 	b.w	80012a8 <_getpid>

080112f8 <__swhatbuf_r>:
 80112f8:	b570      	push	{r4, r5, r6, lr}
 80112fa:	460c      	mov	r4, r1
 80112fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011300:	2900      	cmp	r1, #0
 8011302:	b096      	sub	sp, #88	; 0x58
 8011304:	4615      	mov	r5, r2
 8011306:	461e      	mov	r6, r3
 8011308:	da0d      	bge.n	8011326 <__swhatbuf_r+0x2e>
 801130a:	89a3      	ldrh	r3, [r4, #12]
 801130c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011310:	f04f 0100 	mov.w	r1, #0
 8011314:	bf0c      	ite	eq
 8011316:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801131a:	2340      	movne	r3, #64	; 0x40
 801131c:	2000      	movs	r0, #0
 801131e:	6031      	str	r1, [r6, #0]
 8011320:	602b      	str	r3, [r5, #0]
 8011322:	b016      	add	sp, #88	; 0x58
 8011324:	bd70      	pop	{r4, r5, r6, pc}
 8011326:	466a      	mov	r2, sp
 8011328:	f000 f848 	bl	80113bc <_fstat_r>
 801132c:	2800      	cmp	r0, #0
 801132e:	dbec      	blt.n	801130a <__swhatbuf_r+0x12>
 8011330:	9901      	ldr	r1, [sp, #4]
 8011332:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011336:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801133a:	4259      	negs	r1, r3
 801133c:	4159      	adcs	r1, r3
 801133e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011342:	e7eb      	b.n	801131c <__swhatbuf_r+0x24>

08011344 <__smakebuf_r>:
 8011344:	898b      	ldrh	r3, [r1, #12]
 8011346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011348:	079d      	lsls	r5, r3, #30
 801134a:	4606      	mov	r6, r0
 801134c:	460c      	mov	r4, r1
 801134e:	d507      	bpl.n	8011360 <__smakebuf_r+0x1c>
 8011350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011354:	6023      	str	r3, [r4, #0]
 8011356:	6123      	str	r3, [r4, #16]
 8011358:	2301      	movs	r3, #1
 801135a:	6163      	str	r3, [r4, #20]
 801135c:	b002      	add	sp, #8
 801135e:	bd70      	pop	{r4, r5, r6, pc}
 8011360:	ab01      	add	r3, sp, #4
 8011362:	466a      	mov	r2, sp
 8011364:	f7ff ffc8 	bl	80112f8 <__swhatbuf_r>
 8011368:	9900      	ldr	r1, [sp, #0]
 801136a:	4605      	mov	r5, r0
 801136c:	4630      	mov	r0, r6
 801136e:	f7fe fc01 	bl	800fb74 <_malloc_r>
 8011372:	b948      	cbnz	r0, 8011388 <__smakebuf_r+0x44>
 8011374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011378:	059a      	lsls	r2, r3, #22
 801137a:	d4ef      	bmi.n	801135c <__smakebuf_r+0x18>
 801137c:	f023 0303 	bic.w	r3, r3, #3
 8011380:	f043 0302 	orr.w	r3, r3, #2
 8011384:	81a3      	strh	r3, [r4, #12]
 8011386:	e7e3      	b.n	8011350 <__smakebuf_r+0xc>
 8011388:	89a3      	ldrh	r3, [r4, #12]
 801138a:	6020      	str	r0, [r4, #0]
 801138c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011390:	81a3      	strh	r3, [r4, #12]
 8011392:	9b00      	ldr	r3, [sp, #0]
 8011394:	6163      	str	r3, [r4, #20]
 8011396:	9b01      	ldr	r3, [sp, #4]
 8011398:	6120      	str	r0, [r4, #16]
 801139a:	b15b      	cbz	r3, 80113b4 <__smakebuf_r+0x70>
 801139c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113a0:	4630      	mov	r0, r6
 80113a2:	f000 f81d 	bl	80113e0 <_isatty_r>
 80113a6:	b128      	cbz	r0, 80113b4 <__smakebuf_r+0x70>
 80113a8:	89a3      	ldrh	r3, [r4, #12]
 80113aa:	f023 0303 	bic.w	r3, r3, #3
 80113ae:	f043 0301 	orr.w	r3, r3, #1
 80113b2:	81a3      	strh	r3, [r4, #12]
 80113b4:	89a3      	ldrh	r3, [r4, #12]
 80113b6:	431d      	orrs	r5, r3
 80113b8:	81a5      	strh	r5, [r4, #12]
 80113ba:	e7cf      	b.n	801135c <__smakebuf_r+0x18>

080113bc <_fstat_r>:
 80113bc:	b538      	push	{r3, r4, r5, lr}
 80113be:	4d07      	ldr	r5, [pc, #28]	; (80113dc <_fstat_r+0x20>)
 80113c0:	2300      	movs	r3, #0
 80113c2:	4604      	mov	r4, r0
 80113c4:	4608      	mov	r0, r1
 80113c6:	4611      	mov	r1, r2
 80113c8:	602b      	str	r3, [r5, #0]
 80113ca:	f7ef ffd4 	bl	8001376 <_fstat>
 80113ce:	1c43      	adds	r3, r0, #1
 80113d0:	d102      	bne.n	80113d8 <_fstat_r+0x1c>
 80113d2:	682b      	ldr	r3, [r5, #0]
 80113d4:	b103      	cbz	r3, 80113d8 <_fstat_r+0x1c>
 80113d6:	6023      	str	r3, [r4, #0]
 80113d8:	bd38      	pop	{r3, r4, r5, pc}
 80113da:	bf00      	nop
 80113dc:	200036a0 	.word	0x200036a0

080113e0 <_isatty_r>:
 80113e0:	b538      	push	{r3, r4, r5, lr}
 80113e2:	4d06      	ldr	r5, [pc, #24]	; (80113fc <_isatty_r+0x1c>)
 80113e4:	2300      	movs	r3, #0
 80113e6:	4604      	mov	r4, r0
 80113e8:	4608      	mov	r0, r1
 80113ea:	602b      	str	r3, [r5, #0]
 80113ec:	f7ef ffd3 	bl	8001396 <_isatty>
 80113f0:	1c43      	adds	r3, r0, #1
 80113f2:	d102      	bne.n	80113fa <_isatty_r+0x1a>
 80113f4:	682b      	ldr	r3, [r5, #0]
 80113f6:	b103      	cbz	r3, 80113fa <_isatty_r+0x1a>
 80113f8:	6023      	str	r3, [r4, #0]
 80113fa:	bd38      	pop	{r3, r4, r5, pc}
 80113fc:	200036a0 	.word	0x200036a0

08011400 <_init>:
 8011400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011402:	bf00      	nop
 8011404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011406:	bc08      	pop	{r3}
 8011408:	469e      	mov	lr, r3
 801140a:	4770      	bx	lr

0801140c <_fini>:
 801140c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801140e:	bf00      	nop
 8011410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011412:	bc08      	pop	{r3}
 8011414:	469e      	mov	lr, r3
 8011416:	4770      	bx	lr
