
stm32g474_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b270  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800b448  0800b448  0001b448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4e4  0800b4e4  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4e4  0800b4e4  0001b4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4ec  0800b4ec  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4ec  0800b4ec  0001b4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4f0  0800b4f0  0001b4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800b4f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  0002018c  2**0
                  CONTENTS
 10 .bss          00002c4c  2000018c  2000018c  0002018c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002dd8  20002dd8  0002018c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c096  00000000  00000000  000201ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d52  00000000  00000000  0003c295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001650  00000000  00000000  00040fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010c1  00000000  00000000  00042638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b264  00000000  00000000  000436f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022f67  00000000  00000000  0006e95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f5c9f  00000000  00000000  000918c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000058bc  00000000  00000000  00187564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0018ce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000018c 	.word	0x2000018c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b430 	.word	0x0800b430

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000190 	.word	0x20000190
 8000214:	0800b430 	.word	0x0800b430

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <apInit>:
static uint32_t g_LEDOffTime = 200;
static uint32_t nextmill = 0;
*/

void apInit(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <apMain>:

void apMain(void)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
  uint32_t pre_time1 = millis();
 8000528:	f000 f887 	bl	800063a <millis>
 800052c:	6078      	str	r0, [r7, #4]
  uint32_t pre_time2 = millis();
 800052e:	f000 f884 	bl	800063a <millis>
 8000532:	6038      	str	r0, [r7, #0]
  while(1)
  {
    /* LED Non blocking toggle*/
    /* Using Reg to toggle */
    if(millis()-pre_time1 >= 500)
 8000534:	f000 f881 	bl	800063a <millis>
 8000538:	4602      	mov	r2, r0
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000542:	d3f7      	bcc.n	8000534 <apMain+0x12>
    {
      pre_time1 = millis();
 8000544:	f000 f879 	bl	800063a <millis>
 8000548:	6078      	str	r0, [r7, #4]
      //ledToggle(_DEF_LED1);
      gpio_out_toggle(GPIOA, GPIO_PIN_5);
 800054a:	2120      	movs	r1, #32
 800054c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000550:	f000 fb1c 	bl	8000b8c <gpio_out_toggle>
    if(millis()-pre_time1 >= 500)
 8000554:	e7ee      	b.n	8000534 <apMain+0x12>
	...

08000558 <bspInit>:
#include "usb_device.h"

void SystemClock_Config(void);

bool bspInit(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055e:	4b30      	ldr	r3, [pc, #192]	; (8000620 <bspInit+0xc8>)
 8000560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000562:	4a2f      	ldr	r2, [pc, #188]	; (8000620 <bspInit+0xc8>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6613      	str	r3, [r2, #96]	; 0x60
 800056a:	4b2d      	ldr	r3, [pc, #180]	; (8000620 <bspInit+0xc8>)
 800056c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]


  HAL_Init();
 8000576:	f000 fe49 	bl	800120c <HAL_Init>
  SystemClock_Config();
 800057a:	f000 f865 	bl	8000648 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800057e:	4b28      	ldr	r3, [pc, #160]	; (8000620 <bspInit+0xc8>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a27      	ldr	r2, [pc, #156]	; (8000620 <bspInit+0xc8>)
 8000584:	f043 0320 	orr.w	r3, r3, #32
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b25      	ldr	r3, [pc, #148]	; (8000620 <bspInit+0xc8>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0320 	and.w	r3, r3, #32
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b22      	ldr	r3, [pc, #136]	; (8000620 <bspInit+0xc8>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a21      	ldr	r2, [pc, #132]	; (8000620 <bspInit+0xc8>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <bspInit+0xc8>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]

  /* USB - RESET 시 장치관리자 해제 연결 안될 시 */

  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]
  // PA12(USB_DP) 출력 설정
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 80005be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80005c4:	2311      	movs	r3, #17
 80005c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005da:	f001 f879 	bl	80016d0 <HAL_GPIO_Init>

  //회로에 PULL UP 이 걸려있다면 - 내리고
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e8:	f001 f9f4 	bl	80019d4 <HAL_GPIO_WritePin>
  delay(100);
 80005ec:	2064      	movs	r0, #100	; 0x64
 80005ee:	f000 f819 	bl	8000624 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f001 f9ea 	bl	80019d4 <HAL_GPIO_WritePin>

  // INPUT 으로 다시 변경
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	4619      	mov	r1, r3
 800060a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060e:	f001 f85f 	bl	80016d0 <HAL_GPIO_Init>

  MX_USB_Device_Init();
 8000612:	f00a f94d 	bl	800a8b0 <MX_USB_Device_Init>

  return true;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40021000 	.word	0x40021000

08000624 <delay>:

void delay(uint32_t time_ms)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  HAL_Delay(time_ms);
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f000 fe5d 	bl	80012ec <HAL_Delay>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <millis>:

uint32_t millis(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800063e:	f000 fe49 	bl	80012d4 <HAL_GetTick>
 8000642:	4603      	mov	r3, r0
}
 8000644:	4618      	mov	r0, r3
 8000646:	bd80      	pop	{r7, pc}

08000648 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <SystemClock_Config+0xb0>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a29      	ldr	r2, [pc, #164]	; (80006f8 <SystemClock_Config+0xb0>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <SystemClock_Config+0xb0>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	2238      	movs	r2, #56	; 0x38
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f00a feb1 	bl	800b3d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000682:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000686:	f002 fef1 	bl	800346c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800068a:	2309      	movs	r3, #9
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069c:	2303      	movs	r3, #3
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0318 	add.w	r3, r7, #24
 80006b8:	4618      	mov	r0, r3
 80006ba:	f003 f80d 	bl	80036d8 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006c4:	f000 f81a 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2303      	movs	r3, #3
 80006ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2101      	movs	r1, #1
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fb0b 	bl	8003cfc <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006ec:	f000 f806 	bl	80006fc <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	; 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000

080006fc <Error_Handler>:


void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
	...

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_MspInit+0x44>)
 8000714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <HAL_MspInit+0x44>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6613      	str	r3, [r2, #96]	; 0x60
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_MspInit+0x44>)
 8000720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_MspInit+0x44>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072e:	4a08      	ldr	r2, [pc, #32]	; (8000750 <HAL_MspInit+0x44>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000734:	6593      	str	r3, [r2, #88]	; 0x58
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_MspInit+0x44>)
 8000738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000742:	f002 ff37 	bl	80035b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler+0x4>

0800075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <MemManage_Handler+0x4>

08000766 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <BusFault_Handler+0x4>

0800076c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <UsageFault_Handler+0x4>

08000772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a0:	f000 fd86 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <USB_LP_IRQHandler+0x10>)
 80007ae:	f001 fa19 	bl	8001be4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200028dc 	.word	0x200028dc

080007bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <USART1_IRQHandler+0x10>)
 80007c2:	f004 f8ed 	bl	80049a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000340 	.word	0x20000340

080007d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <SystemInit+0x20>)
 80007d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <SystemInit+0x20>)
 80007dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007f8:	f7ff ffea 	bl	80007d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <LoopForever+0x6>)
  ldr r1, =_edata
 80007fe:	490d      	ldr	r1, [pc, #52]	; (8000834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000800:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <LoopForever+0xe>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000814:	4c0a      	ldr	r4, [pc, #40]	; (8000840 <LoopForever+0x16>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000822:	f00a fde1 	bl	800b3e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f00a fdcb 	bl	800b3c0 <main>

0800082a <LoopForever>:

LoopForever:
  b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
  ldr   r0, =_estack
 800082c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8000838:	0800b4f4 	.word	0x0800b4f4
  ldr r2, =_sbss
 800083c:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8000840:	20002dd8 	.word	0x20002dd8

08000844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_2_IRQHandler>

08000846 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000846:	b480      	push	{r7}
 8000848:	b087      	sub	sp, #28
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000852:	2301      	movs	r3, #1
 8000854:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2201      	movs	r2, #1
 800086c:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	68ba      	ldr	r2, [r7, #8]
 8000872:	611a      	str	r2, [r3, #16]

  return ret;
 8000874:	7dfb      	ldrb	r3, [r7, #23]
}
 8000876:	4618      	mov	r0, r3
 8000878:	371c      	adds	r7, #28
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <qbufferWrite>:

  return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000882:	b480      	push	{r7}
 8000884:	b08b      	sub	sp, #44	; 0x2c
 8000886:	af00      	add	r7, sp, #0
 8000888:	60f8      	str	r0, [r7, #12]
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800088e:	2301      	movs	r3, #1
 8000890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t next_in;


  for (int i=0; i<length; i++)
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
 8000898:	e043      	b.n	8000922 <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	6892      	ldr	r2, [r2, #8]
 80008a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80008a8:	fb01 f202 	mul.w	r2, r1, r2
 80008ac:	1a9b      	subs	r3, r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d02c      	beq.n	8000914 <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d024      	beq.n	800090c <qbufferWrite+0x8a>
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d021      	beq.n	800090c <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	691a      	ldr	r2, [r3, #16]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	68f9      	ldr	r1, [r7, #12]
 80008d2:	68c9      	ldr	r1, [r1, #12]
 80008d4:	fb01 f303 	mul.w	r3, r1, r3
 80008d8:	4413      	add	r3, r2
 80008da:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
 80008e0:	e00a      	b.n	80008f8 <qbufferWrite+0x76>
        {
          p_buf[i] = p_data[i];
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	441a      	add	r2, r3
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	6979      	ldr	r1, [r7, #20]
 80008ec:	440b      	add	r3, r1
 80008ee:	7812      	ldrb	r2, [r2, #0]
 80008f0:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3301      	adds	r3, #1
 80008f6:	61fb      	str	r3, [r7, #28]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	68da      	ldr	r2, [r3, #12]
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d8ef      	bhi.n	80008e2 <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	4413      	add	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	e003      	b.n	800091c <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 8000914:	2300      	movs	r3, #0
 8000916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800091a:	e006      	b.n	800092a <qbufferWrite+0xa8>
  for (int i=0; i<length; i++)
 800091c:	6a3b      	ldr	r3, [r7, #32]
 800091e:	3301      	adds	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
 8000922:	6a3b      	ldr	r3, [r7, #32]
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	429a      	cmp	r2, r3
 8000928:	d8b7      	bhi.n	800089a <qbufferWrite+0x18>
    }
  }

  return ret;
 800092a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800092e:	4618      	mov	r0, r3
 8000930:	372c      	adds	r7, #44	; 0x2c
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800093a:	b480      	push	{r7}
 800093c:	b085      	sub	sp, #20
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	6892      	ldr	r2, [r2, #8]
 8000950:	fbb3 f1f2 	udiv	r1, r3, r2
 8000954:	fb01 f202 	mul.w	r2, r1, r2
 8000958:	1a9b      	subs	r3, r3, r2
 800095a:	60fb      	str	r3, [r7, #12]

  return ret;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <buttonInit>:
extern void buttonISR(void *arg);
extern bool buttonGetPin(uint8_t ch);


bool buttonInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
  bool ret = true;
 8000972:	2301      	movs	r3, #1
 8000974:	76fb      	strb	r3, [r7, #27]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000984:	4b40      	ldr	r3, [pc, #256]	; (8000a88 <buttonInit+0x11c>)
 8000986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000988:	4a3f      	ldr	r2, [pc, #252]	; (8000a88 <buttonInit+0x11c>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000990:	4b3d      	ldr	r3, [pc, #244]	; (8000a88 <buttonInit+0x11c>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]

  for(int i=0; i < BTN_MAX_CH; i++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
 80009a8:	e011      	b.n	80009ce <buttonInit+0x62>
  {
    GPIO_InitStruct.Pin = button_pin[i].pin;
 80009aa:	4938      	ldr	r1, [pc, #224]	; (8000a8c <buttonInit+0x120>)
 80009ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ae:	4613      	mov	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	440b      	add	r3, r1
 80009b8:	3304      	adds	r3, #4
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(PC13_BLU_SW_GPIO_Port, &GPIO_InitStruct);
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	4833      	ldr	r0, [pc, #204]	; (8000a90 <buttonInit+0x124>)
 80009c4:	f000 fe84 	bl	80016d0 <HAL_GPIO_Init>
  for(int i=0; i < BTN_MAX_CH; i++)
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	3301      	adds	r3, #1
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	ddea      	ble.n	80009aa <buttonInit+0x3e>
  }

  for(int i=0; i < BTN_MAX_CH; i++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
 80009d8:	e040      	b.n	8000a5c <buttonInit+0xf0>
  {
    button_tbl[i].pressed = 0;
 80009da:	4a2e      	ldr	r2, [pc, #184]	; (8000a94 <buttonInit+0x128>)
 80009dc:	6a3b      	ldr	r3, [r7, #32]
 80009de:	212c      	movs	r1, #44	; 0x2c
 80009e0:	fb01 f303 	mul.w	r3, r1, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
    button_tbl[i].pressed_cnt = 0;
 80009ea:	4a2a      	ldr	r2, [pc, #168]	; (8000a94 <buttonInit+0x128>)
 80009ec:	6a3b      	ldr	r3, [r7, #32]
 80009ee:	212c      	movs	r1, #44	; 0x2c
 80009f0:	fb01 f303 	mul.w	r3, r1, r3
 80009f4:	4413      	add	r3, r2
 80009f6:	3302      	adds	r3, #2
 80009f8:	2200      	movs	r2, #0
 80009fa:	801a      	strh	r2, [r3, #0]
    button_tbl[i].pressed_event = 0;
 80009fc:	4a25      	ldr	r2, [pc, #148]	; (8000a94 <buttonInit+0x128>)
 80009fe:	6a3b      	ldr	r3, [r7, #32]
 8000a00:	212c      	movs	r1, #44	; 0x2c
 8000a02:	fb01 f303 	mul.w	r3, r1, r3
 8000a06:	4413      	add	r3, r2
 8000a08:	3301      	adds	r3, #1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]

    button_tbl[i].released = 0;
 8000a0e:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <buttonInit+0x128>)
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	212c      	movs	r1, #44	; 0x2c
 8000a14:	fb01 f303 	mul.w	r3, r1, r3
 8000a18:	4413      	add	r3, r2
 8000a1a:	330c      	adds	r3, #12
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released_event = 0;
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <buttonInit+0x128>)
 8000a22:	6a3b      	ldr	r3, [r7, #32]
 8000a24:	212c      	movs	r1, #44	; 0x2c
 8000a26:	fb01 f303 	mul.w	r3, r1, r3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	330d      	adds	r3, #13
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]

    button_tbl[i].repeat_cnt = 0;
 8000a32:	4a18      	ldr	r2, [pc, #96]	; (8000a94 <buttonInit+0x128>)
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	212c      	movs	r1, #44	; 0x2c
 8000a38:	fb01 f303 	mul.w	r3, r1, r3
 8000a3c:	4413      	add	r3, r2
 8000a3e:	331c      	adds	r3, #28
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
    button_tbl[i].repeat_update = 0;
 8000a44:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <buttonInit+0x128>)
 8000a46:	6a3b      	ldr	r3, [r7, #32]
 8000a48:	212c      	movs	r1, #44	; 0x2c
 8000a4a:	fb01 f303 	mul.w	r3, r1, r3
 8000a4e:	4413      	add	r3, r2
 8000a50:	3318      	adds	r3, #24
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
  for(int i=0; i < BTN_MAX_CH; i++)
 8000a56:	6a3b      	ldr	r3, [r7, #32]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
 8000a5c:	6a3b      	ldr	r3, [r7, #32]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	ddbb      	ble.n	80009da <buttonInit+0x6e>
  }

  for (int i=0; i<BTN_EVENT_MAX; i++)
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
 8000a66:	e007      	b.n	8000a78 <buttonInit+0x10c>
  {
   event_tbl[i] = NULL;
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <buttonInit+0x12c>)
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i=0; i<BTN_EVENT_MAX; i++)
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3301      	adds	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	2b07      	cmp	r3, #7
 8000a7c:	ddf4      	ble.n	8000a68 <buttonInit+0xfc>
  }
  return ret;
 8000a7e:	7efb      	ldrb	r3, [r7, #27]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	0800b4a8 	.word	0x0800b4a8
 8000a90:	48000800 	.word	0x48000800
 8000a94:	200001a8 	.word	0x200001a8
 8000a98:	200001d4 	.word	0x200001d4

08000a9c <cdcInit>:


static bool is_init = false;

bool cdcInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  bool ret = true;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	71fb      	strb	r3, [r7, #7]


  ret = cdcIfInit();
 8000aa6:	f00a f859 	bl	800ab5c <cdcIfInit>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bf14      	ite	ne
 8000ab0:	2301      	movne	r3, #1
 8000ab2:	2300      	moveq	r3, #0
 8000ab4:	71fb      	strb	r3, [r7, #7]

  is_init = ret;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <cdcInit+0x2c>)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	7013      	strb	r3, [r2, #0]

  return ret;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200001f4 	.word	0x200001f4

08000acc <ledInit>:




bool ledInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <ledInit+0x80>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <ledInit+0x80>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <ledInit+0x80>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
 8000b0a:	e017      	b.n	8000b3c <ledInit+0x70>
  {
    GPIO_InitStructure.Pin = led_tbl[i].pin;
 8000b0c:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <ledInit+0x84>)
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	4413      	add	r3, r2
 8000b14:	889b      	ldrh	r3, [r3, #4]
 8000b16:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <ledInit+0x84>)
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b20:	f107 0208 	add.w	r2, r7, #8
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fdd2 	bl	80016d0 <HAL_GPIO_Init>

    ledOff(i);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f80f 	bl	8000b54 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	dde4      	ble.n	8000b0c <ledInit+0x40>
  }
  return true;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	0800b4b4 	.word	0x0800b4b4

08000b54 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10d      	bne.n	8000b80 <ledOff+0x2c>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <ledOff+0x34>)
 8000b68:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <ledOff+0x34>)
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	4413      	add	r3, r2
 8000b74:	889b      	ldrh	r3, [r3, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f000 ff2b 	bl	80019d4 <HAL_GPIO_WritePin>
 8000b7e:	e000      	b.n	8000b82 <ledOff+0x2e>
  if (ch >= LED_MAX_CH) return;
 8000b80:	bf00      	nop
}
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	0800b4b4 	.word	0x0800b4b4

08000b8c <gpio_out_toggle>:
  gpio->ODR &= ~(GPIO_Pin);
}

//
void gpio_out_toggle(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
  GPIO_TypeDef *gpio = (void*)GPIOA_BASE;
 8000b98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b9c:	60fb      	str	r3, [r7, #12]
  gpio->ODR ^= GPIO_Pin;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	695a      	ldr	r2, [r3, #20]
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	405a      	eors	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	615a      	str	r2, [r3, #20]
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <resetInit>:
  }
}


bool resetInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  bool ret = true;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	71bb      	strb	r3, [r7, #6]
  bool is_debug = false;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	71fb      	strb	r3, [r7, #7]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <resetInit+0x80>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <resetInit+0x1e>
  {
    is_debug = true;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	71fb      	strb	r3, [r7, #7]
  }

  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if (RCC->CSR & (1<<26) && is_debug != true)
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <resetInit+0x84>)
 8000bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d01f      	beq.n	8000c24 <resetInit+0x6c>
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f083 0301 	eor.w	r3, r3, #1
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d019      	beq.n	8000c24 <resetInit+0x6c>
  if(RCC->CSR & (1<<26))
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <resetInit+0x84>)
 8000bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d012      	beq.n	8000c24 <resetInit+0x6c>
  {
    rtcBackupRegWrite(RESET_REG_COUNT, rtcBackupRegRead(RESET_REG_COUNT) + 1);
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f000 f8a2 	bl	8000d48 <rtcBackupRegRead>
 8000c04:	4603      	mov	r3, r0
 8000c06:	3301      	adds	r3, #1
 8000c08:	4619      	mov	r1, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f000 f8ac 	bl	8000d68 <rtcBackupRegWrite>
    delay(500);
 8000c10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c14:	f7ff fd06 	bl	8000624 <delay>
    reset_count = rtcBackupRegRead(RESET_REG_COUNT);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 f895 	bl	8000d48 <rtcBackupRegRead>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <resetInit+0x88>)
 8000c22:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  rtcBackupRegWrite(RESET_REG_COUNT, 0);
 8000c24:	2100      	movs	r1, #0
 8000c26:	2001      	movs	r0, #1
 8000c28:	f000 f89e 	bl	8000d68 <rtcBackupRegWrite>

  return ret;
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	e000edf0 	.word	0xe000edf0
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	200001f8 	.word	0x200001f8

08000c44 <resetGetCount>:

uint32_t resetGetCount(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return reset_count;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <resetGetCount+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	200001f8 	.word	0x200001f8

08000c5c <resetToSystemBoot>:
    run_timeout_count = timeout;
  }
}

void resetToSystemBoot(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
  void (*SysMemBootJump)(void);
  volatile uint32_t addr = 0x1FFF0000; // System Boot Loader 주소
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <resetToSystemBoot+0x7c>)
 8000c64:	603b      	str	r3, [r7, #0]


  HAL_RCC_DeInit();
 8000c66:	f002 fcb5 	bl	80035d4 <HAL_RCC_DeInit>

  SysTick->CTRL = 0;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <resetToSystemBoot+0x80>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <resetToSystemBoot+0x80>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  SysTick->VAL  = 0;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <resetToSystemBoot+0x80>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]

  // 인터럽트
  for (int i=0;i<8;i++)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	e016      	b.n	8000cb0 <resetToSystemBoot+0x54>
  {
    NVIC->ICER[i]=0xFFFFFFFF;
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <resetToSystemBoot+0x84>)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3320      	adds	r3, #32
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NVIC->ICPR[i]=0xFFFFFFFF;
 8000c90:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <resetToSystemBoot+0x84>)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3360      	adds	r3, #96	; 0x60
 8000c96:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c9e:	f3bf 8f4f 	dsb	sy
}
 8000ca2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ca4:	f3bf 8f6f 	isb	sy
}
 8000ca8:	bf00      	nop
  for (int i=0;i<8;i++)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3301      	adds	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2b07      	cmp	r3, #7
 8000cb4:	dde5      	ble.n	8000c82 <resetToSystemBoot+0x26>
    __DSB();
    __ISB();
  }

  SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60bb      	str	r3, [r7, #8]

  // Main Stack 주소 셋팅
  __set_MSP(*(uint32_t *)addr);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f383 8808 	msr	MSP, r3
}
 8000cca:	bf00      	nop
  // Jump
  SysMemBootJump();
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4798      	blx	r3
}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	1fff0000 	.word	0x1fff0000
 8000cdc:	e000e010 	.word	0xe000e010
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  bool ret = true;
 8000cea:	2301      	movs	r3, #1
 8000cec:	71fb      	strb	r3, [r7, #7]


  hrtc.Instance = RTC;
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <rtcInit+0x5c>)
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <rtcInit+0x60>)
 8000cf2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <rtcInit+0x5c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <rtcInit+0x5c>)
 8000cfc:	227f      	movs	r2, #127	; 0x7f
 8000cfe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <rtcInit+0x5c>)
 8000d02:	22ff      	movs	r2, #255	; 0xff
 8000d04:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <rtcInit+0x5c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <rtcInit+0x5c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <rtcInit+0x5c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <rtcInit+0x5c>)
 8000d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d1e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <rtcInit+0x5c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <rtcInit+0x5c>)
 8000d28:	f003 fc52 	bl	80045d0 <HAL_RTC_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <rtcInit+0x52>
  {
    return false;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e000      	b.n	8000d38 <rtcInit+0x54>
  }

  return ret;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200001fc 	.word	0x200001fc
 8000d44:	40002800 	.word	0x40002800

08000d48 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	4804      	ldr	r0, [pc, #16]	; (8000d64 <rtcBackupRegRead+0x1c>)
 8000d54:	f003 fd72 	bl	800483c <HAL_RTCEx_BKUPRead>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200001fc 	.word	0x200001fc

08000d68 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <rtcBackupRegWrite+0x1c>)
 8000d78:	f003 fd48 	bl	800480c <HAL_RTCEx_BKUPWrite>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200001fc 	.word	0x200001fc

08000d88 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b098      	sub	sp, #96	; 0x60
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2254      	movs	r2, #84	; 0x54
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f00a fb1c 	bl	800b3d6 <memset>
  if(rtcHandle->Instance==RTC)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <HAL_RTC_MspInit+0x70>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d123      	bne.n	8000df0 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000da8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000dac:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	4618      	mov	r0, r3
 8000dba:	f003 f9bb 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000dc4:	f7ff fc9a 	bl	80006fc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_RTC_MspInit+0x74>)
 8000dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <HAL_RTC_MspInit+0x74>)
 8000dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_RTC_MspInit+0x74>)
 8000dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_RTC_MspInit+0x74>)
 8000dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de2:	6593      	str	r3, [r2, #88]	; 0x58
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_RTC_MspInit+0x74>)
 8000de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000df0:	bf00      	nop
 8000df2:	3760      	adds	r7, #96	; 0x60
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40002800 	.word	0x40002800
 8000dfc:	40021000 	.word	0x40021000

08000e00 <uartInit>:
UART_HandleTypeDef huart1;



bool uartInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
  for(int i = 0; i <UART_MAX_CH; i++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	e007      	b.n	8000e1c <uartInit+0x1c>
  {
    is_open[i] = false;
 8000e0c:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <uartInit+0x30>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i <UART_MAX_CH; i++)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	ddf4      	ble.n	8000e0c <uartInit+0xc>
  }

  return true;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	20000224 	.word	0x20000224

08000e34 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
  bool ret =false;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d176      	bne.n	8000f38 <uartOpen+0x104>
  {
    case _DEF_UART1:
      huart1.Instance = USART1;
 8000e4a:	4b3e      	ldr	r3, [pc, #248]	; (8000f44 <uartOpen+0x110>)
 8000e4c:	4a3e      	ldr	r2, [pc, #248]	; (8000f48 <uartOpen+0x114>)
 8000e4e:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 8000e50:	4a3c      	ldr	r2, [pc, #240]	; (8000f44 <uartOpen+0x110>)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	6053      	str	r3, [r2, #4]
      huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e56:	4b3b      	ldr	r3, [pc, #236]	; (8000f44 <uartOpen+0x110>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5c:	4b39      	ldr	r3, [pc, #228]	; (8000f44 <uartOpen+0x110>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8000e62:	4b38      	ldr	r3, [pc, #224]	; (8000f44 <uartOpen+0x110>)
 8000e64:	220c      	movs	r2, #12
 8000e66:	615a      	str	r2, [r3, #20]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <uartOpen+0x110>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
      huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6e:	4b35      	ldr	r3, [pc, #212]	; (8000f44 <uartOpen+0x110>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
      huart1.Init.Parity = UART_PARITY_NONE;
 8000e74:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <uartOpen+0x110>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8000e7a:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <uartOpen+0x110>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e80:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <uartOpen+0x110>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e86:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <uartOpen+0x110>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
      qbufferCreate(&qbuffer[ch],&rx_buf[ch], 256); // 수신 버퍼 생성
 8000e8c:	79fa      	ldrb	r2, [r7, #7]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4a2d      	ldr	r2, [pc, #180]	; (8000f4c <uartOpen+0x118>)
 8000e98:	1898      	adds	r0, r3, r2
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	4a2c      	ldr	r2, [pc, #176]	; (8000f50 <uartOpen+0x11c>)
 8000e9e:	4413      	add	r3, r2
 8000ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f7ff fcce 	bl	8000846 <qbufferCreate>
      if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eaa:	4826      	ldr	r0, [pc, #152]	; (8000f44 <uartOpen+0x110>)
 8000eac:	f003 fcdc 	bl	8004868 <HAL_UART_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <uartOpen+0x88>
      {
        ret = false;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	e016      	b.n	8000eea <uartOpen+0xb6>
      }
      else
      {
        ret = true;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4a24      	ldr	r2, [pc, #144]	; (8000f54 <uartOpen+0x120>)
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	54d1      	strb	r1, [r2, r3]
        // 수신용 데이터 버퍼 (rx_data)에 size 만큼 받아서 HAL_UART_RxCpltCallback 함수 호출
        if(HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[ch], 1) != HAL_OK)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <uartOpen+0x124>)
 8000ecc:	4413      	add	r3, r2
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	481c      	ldr	r0, [pc, #112]	; (8000f44 <uartOpen+0x110>)
 8000ed4:	f003 fd18 	bl	8004908 <HAL_UART_Receive_IT>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d005      	beq.n	8000eea <uartOpen+0xb6>
        {
         ret = false;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]
         is_open[ch] = false;
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <uartOpen+0x120>)
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	54d1      	strb	r1, [r2, r3]
        }
      }
      if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4815      	ldr	r0, [pc, #84]	; (8000f44 <uartOpen+0x110>)
 8000eee:	f005 fc84 	bl	80067fa <HAL_UARTEx_SetTxFifoThreshold>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <uartOpen+0xd0>
      {
        ret = false;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <uartOpen+0x120>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f04:	2100      	movs	r1, #0
 8000f06:	480f      	ldr	r0, [pc, #60]	; (8000f44 <uartOpen+0x110>)
 8000f08:	f005 fcb5 	bl	8006876 <HAL_UARTEx_SetRxFifoThreshold>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d005      	beq.n	8000f1e <uartOpen+0xea>
      {
        ret = false;
 8000f12:	2300      	movs	r3, #0
 8000f14:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <uartOpen+0x120>)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <uartOpen+0x110>)
 8000f20:	f005 fc32 	bl	8006788 <HAL_UARTEx_DisableFifoMode>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d005      	beq.n	8000f36 <uartOpen+0x102>
      {
        ret = false;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <uartOpen+0x120>)
 8000f32:	2100      	movs	r1, #0
 8000f34:	54d1      	strb	r1, [r2, r3]
      }
      break;
 8000f36:	bf00      	nop
  }


  return ret;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000340 	.word	0x20000340
 8000f48:	40013800 	.word	0x40013800
 8000f4c:	20000228 	.word	0x20000228
 8000f50:	2000023c 	.word	0x2000023c
 8000f54:	20000224 	.word	0x20000224
 8000f58:	2000033c 	.word	0x2000033c

08000f5c <HAL_UART_ErrorCallback>:

  return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
  {

  }
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_UART_RxCpltCallback+0x30>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d109      	bne.n	8000f96 <HAL_UART_RxCpltCallback+0x26>
  {
    // 빠르게 송신시 1 바이트 사용시 인터럽트가 많이 걸려서 처리가 늦어져 overrun (덮어쓰기 에러) , 데이터 손실 에러 발생 가능
    // 고속의 송수신 - DMA 방식을 사용
    qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
 8000f82:	2201      	movs	r2, #1
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <HAL_UART_RxCpltCallback+0x34>)
 8000f86:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <HAL_UART_RxCpltCallback+0x38>)
 8000f88:	f7ff fc7b 	bl	8000882 <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[_DEF_UART1], 1);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4905      	ldr	r1, [pc, #20]	; (8000fa4 <HAL_UART_RxCpltCallback+0x34>)
 8000f90:	4806      	ldr	r0, [pc, #24]	; (8000fac <HAL_UART_RxCpltCallback+0x3c>)
 8000f92:	f003 fcb9 	bl	8004908 <HAL_UART_Receive_IT>
  }
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40013800 	.word	0x40013800
 8000fa4:	2000033c 	.word	0x2000033c
 8000fa8:	20000228 	.word	0x20000228
 8000fac:	20000340 	.word	0x20000340

08000fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b09e      	sub	sp, #120	; 0x78
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	2254      	movs	r2, #84	; 0x54
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00a fa00 	bl	800b3d6 <memset>
  if(uartHandle->Instance==USART1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a22      	ldr	r2, [pc, #136]	; (8001064 <HAL_UART_MspInit+0xb4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d13d      	bne.n	800105c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	4618      	mov	r0, r3
 8000fee:	f003 f8a1 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ff8:	f7ff fb80 	bl	80006fc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <HAL_UART_MspInit+0xb8>)
 8000ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001000:	4a19      	ldr	r2, [pc, #100]	; (8001068 <HAL_UART_MspInit+0xb8>)
 8001002:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001006:	6613      	str	r3, [r2, #96]	; 0x60
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_UART_MspInit+0xb8>)
 800100a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_UART_MspInit+0xb8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	4a13      	ldr	r2, [pc, #76]	; (8001068 <HAL_UART_MspInit+0xb8>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_UART_MspInit+0xb8>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC4_USART1_TX_Pin|PC5_USART1_RX_Pin;
 800102c:	2330      	movs	r3, #48	; 0x30
 800102e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800103c:	2307      	movs	r3, #7
 800103e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001040:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001044:	4619      	mov	r1, r3
 8001046:	4809      	ldr	r0, [pc, #36]	; (800106c <HAL_UART_MspInit+0xbc>)
 8001048:	f000 fb42 	bl	80016d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	2025      	movs	r0, #37	; 0x25
 8001052:	f000 fa48 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001056:	2025      	movs	r0, #37	; 0x25
 8001058:	f000 fa5f 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800105c:	bf00      	nop
 800105e:	3778      	adds	r7, #120	; 0x78
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40013800 	.word	0x40013800
 8001068:	40021000 	.word	0x40021000
 800106c:	48000800 	.word	0x48000800

08001070 <usbInit>:
#endif



bool usbInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
  bool ret = true;
 8001076:	2301      	movs	r3, #1
 8001078:	71fb      	strb	r3, [r7, #7]


#ifdef _USE_HW_CLI
  cliAdd("usb", cliCmd);
#endif
  return ret;
 800107a:	79fb      	ldrb	r3, [r7, #7]
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <usbBegin>:
{
  return is_usb_mode;
}

bool usbBegin(UsbMode usb_mode)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001092:	2300      	movs	r3, #0
 8001094:	73fb      	strb	r3, [r7, #15]


#if HW_USE_CDC == 1

  if (usb_mode == USB_CDC_MODE)
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d12a      	bne.n	80010f2 <usbBegin+0x6a>
  {
    if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 800109c:	2200      	movs	r2, #0
 800109e:	4919      	ldr	r1, [pc, #100]	; (8001104 <usbBegin+0x7c>)
 80010a0:	4819      	ldr	r0, [pc, #100]	; (8001108 <usbBegin+0x80>)
 80010a2:	f008 fae5 	bl	8009670 <USBD_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <usbBegin+0x28>
    {
      return false;
 80010ac:	2300      	movs	r3, #0
 80010ae:	e024      	b.n	80010fa <usbBegin+0x72>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80010b0:	4916      	ldr	r1, [pc, #88]	; (800110c <usbBegin+0x84>)
 80010b2:	4815      	ldr	r0, [pc, #84]	; (8001108 <usbBegin+0x80>)
 80010b4:	f008 fb0c 	bl	80096d0 <USBD_RegisterClass>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <usbBegin+0x3a>
    {
      return false;
 80010be:	2300      	movs	r3, #0
 80010c0:	e01b      	b.n	80010fa <usbBegin+0x72>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80010c2:	4913      	ldr	r1, [pc, #76]	; (8001110 <usbBegin+0x88>)
 80010c4:	4810      	ldr	r0, [pc, #64]	; (8001108 <usbBegin+0x80>)
 80010c6:	f008 fa5d 	bl	8009584 <USBD_CDC_RegisterInterface>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <usbBegin+0x4c>
    {
      return false;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e012      	b.n	80010fa <usbBegin+0x72>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <usbBegin+0x80>)
 80010d6:	f008 fb22 	bl	800971e <USBD_Start>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <usbBegin+0x5c>
    {
      return false;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e00a      	b.n	80010fa <usbBegin+0x72>
    }


    cdcInit();
 80010e4:	f7ff fcda 	bl	8000a9c <cdcInit>

    is_usb_mode = USB_CDC_MODE;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <usbBegin+0x8c>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
    ret = true;
 80010ee:	2301      	movs	r3, #1
 80010f0:	73fb      	strb	r3, [r7, #15]
    ret = true;
  }
#endif


  is_init = ret;
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <usbBegin+0x90>)
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	7013      	strb	r3, [r2, #0]

  return ret;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000138 	.word	0x20000138
 8001108:	200003e0 	.word	0x200003e0
 800110c:	20000018 	.word	0x20000018
 8001110:	20000124 	.word	0x20000124
 8001114:	200003d5 	.word	0x200003d5
 8001118:	200003d4 	.word	0x200003d4

0800111c <hwInit>:
 *      Author: mm940
 */
#include "hw.h"

bool hwInit(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
  bool ret = true;
 8001122:	2301      	movs	r3, #1
 8001124:	71fb      	strb	r3, [r7, #7]

  ret &= bspInit();
 8001126:	f7ff fa17 	bl	8000558 <bspInit>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4013      	ands	r3, r2
 8001132:	2b00      	cmp	r3, #0
 8001134:	bf14      	ite	ne
 8001136:	2301      	movne	r3, #1
 8001138:	2300      	moveq	r3, #0
 800113a:	71fb      	strb	r3, [r7, #7]
  ret &= rtcInit();
 800113c:	f7ff fdd2 	bl	8000ce4 <rtcInit>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4013      	ands	r3, r2
 8001148:	2b00      	cmp	r3, #0
 800114a:	bf14      	ite	ne
 800114c:	2301      	movne	r3, #1
 800114e:	2300      	moveq	r3, #0
 8001150:	71fb      	strb	r3, [r7, #7]
#ifdef _USE_HW_RESET
  ret &= resetInit();
 8001152:	f7ff fd31 	bl	8000bb8 <resetInit>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4013      	ands	r3, r2
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf14      	ite	ne
 8001162:	2301      	movne	r3, #1
 8001164:	2300      	moveq	r3, #0
 8001166:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef _USE_HW_RESET
  if (resetGetCount() == 2)
 8001168:	f7ff fd6c 	bl	8000c44 <resetGetCount>
 800116c:	4603      	mov	r3, r0
 800116e:	2b02      	cmp	r3, #2
 8001170:	d101      	bne.n	8001176 <hwInit+0x5a>
  {
    // Jump To SystemBootloader
    resetToSystemBoot();
 8001172:	f7ff fd73 	bl	8000c5c <resetToSystemBoot>
  }
#endif
  ret &= buttonInit();
 8001176:	f7ff fbf9 	bl	800096c <buttonInit>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4013      	ands	r3, r2
 8001182:	2b00      	cmp	r3, #0
 8001184:	bf14      	ite	ne
 8001186:	2301      	movne	r3, #1
 8001188:	2300      	moveq	r3, #0
 800118a:	71fb      	strb	r3, [r7, #7]
  ret &= ledInit();
 800118c:	f7ff fc9e 	bl	8000acc <ledInit>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf14      	ite	ne
 800119c:	2301      	movne	r3, #1
 800119e:	2300      	moveq	r3, #0
 80011a0:	71fb      	strb	r3, [r7, #7]
  ret &= usbInit();
 80011a2:	f7ff ff65 	bl	8001070 <usbInit>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bf14      	ite	ne
 80011b2:	2301      	movne	r3, #1
 80011b4:	2300      	moveq	r3, #0
 80011b6:	71fb      	strb	r3, [r7, #7]
  ret &= usbBegin(USB_CDC_MODE);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff ff65 	bl	8001088 <usbBegin>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bf14      	ite	ne
 80011ca:	2301      	movne	r3, #1
 80011cc:	2300      	moveq	r3, #0
 80011ce:	71fb      	strb	r3, [r7, #7]
  ret &= uartInit();
 80011d0:	f7ff fe16 	bl	8000e00 <uartInit>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4013      	ands	r3, r2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	bf14      	ite	ne
 80011e0:	2301      	movne	r3, #1
 80011e2:	2300      	moveq	r3, #0
 80011e4:	71fb      	strb	r3, [r7, #7]
  ret &= uartOpen(_DEF_UART1, 115200);
 80011e6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff fe22 	bl	8000e34 <uartOpen>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	bf14      	ite	ne
 80011fc:	2301      	movne	r3, #1
 80011fe:	2300      	moveq	r3, #0
 8001200:	71fb      	strb	r3, [r7, #7]

  /* Reset Test */
  //uartPrintf(_DEF_UART1, "Reset Count : %d\n", resetGetCount());
  return ret;
 8001202:	79fb      	ldrb	r3, [r7, #7]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001216:	2003      	movs	r0, #3
 8001218:	f000 f95a 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800121c:	200f      	movs	r0, #15
 800121e:	f000 f80d 	bl	800123c <HAL_InitTick>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	71fb      	strb	r3, [r7, #7]
 800122c:	e001      	b.n	8001232 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800122e:	f7ff fa6d 	bl	800070c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001232:	79fb      	ldrb	r3, [r7, #7]

}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <HAL_InitTick+0x68>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d022      	beq.n	8001296 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_InitTick+0x6c>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_InitTick+0x68>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800125c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001260:	fbb2 f3f3 	udiv	r3, r2, r3
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f966 	bl	8001536 <HAL_SYSTICK_Config>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10f      	bne.n	8001290 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b0f      	cmp	r3, #15
 8001274:	d809      	bhi.n	800128a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001276:	2200      	movs	r2, #0
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	f04f 30ff 	mov.w	r0, #4294967295
 800127e:	f000 f932 	bl	80014e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_InitTick+0x70>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e007      	b.n	800129a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	73fb      	strb	r3, [r7, #15]
 800128e:	e004      	b.n	800129a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e001      	b.n	800129a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000008 	.word	0x20000008
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000004 	.word	0x20000004

080012b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_IncTick+0x1c>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_IncTick+0x20>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	4a03      	ldr	r2, [pc, #12]	; (80012cc <HAL_IncTick+0x1c>)
 80012c0:	6013      	str	r3, [r2, #0]
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	200003d8 	.word	0x200003d8
 80012d0:	20000008 	.word	0x20000008

080012d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <HAL_GetTick+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200003d8 	.word	0x200003d8

080012ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f4:	f7ff ffee 	bl	80012d4 <HAL_GetTick>
 80012f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001304:	d004      	beq.n	8001310 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_Delay+0x40>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001310:	bf00      	nop
 8001312:	f7ff ffdf 	bl	80012d4 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	429a      	cmp	r2, r3
 8001320:	d8f7      	bhi.n	8001312 <HAL_Delay+0x26>
  {
  }
}
 8001322:	bf00      	nop
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000008 	.word	0x20000008

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4907      	ldr	r1, [pc, #28]	; (80013cc <__NVIC_EnableIRQ+0x38>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	; (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f1c3 0307 	rsb	r3, r3, #7
 800143e:	2b04      	cmp	r3, #4
 8001440:	bf28      	it	cs
 8001442:	2304      	movcs	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d902      	bls.n	8001454 <NVIC_EncodePriority+0x30>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3b03      	subs	r3, #3
 8001452:	e000      	b.n	8001456 <NVIC_EncodePriority+0x32>
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43d9      	mvns	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	4313      	orrs	r3, r2
         );
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800149c:	d301      	bcc.n	80014a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149e:	2301      	movs	r3, #1
 80014a0:	e00f      	b.n	80014c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <SysTick_Config+0x40>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014aa:	210f      	movs	r1, #15
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f7ff ff8e 	bl	80013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <SysTick_Config+0x40>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SysTick_Config+0x40>)
 80014bc:	2207      	movs	r2, #7
 80014be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff29 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014f4:	f7ff ff40 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff ff90 	bl	8001424 <NVIC_EncodePriority>
 8001504:	4602      	mov	r2, r0
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff5f 	bl	80013d0 <__NVIC_SetPriority>
}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff33 	bl	8001394 <__NVIC_EnableIRQ>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffa4 	bl	800148c <SysTick_Config>
 8001544:	4603      	mov	r3, r0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800154e:	b480      	push	{r7}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d005      	beq.n	8001572 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2204      	movs	r2, #4
 800156a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	e037      	b.n	80015e2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 020e 	bic.w	r2, r2, #14
 8001580:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001590:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0201 	bic.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f003 021f 	and.w	r2, r3, #31
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015be:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00c      	beq.n	80015e2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015d6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015e0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d00d      	beq.n	8001634 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2204      	movs	r2, #4
 800161c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	e047      	b.n	80016c4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 020e 	bic.w	r2, r2, #14
 8001642:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0201 	bic.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001662:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	2101      	movs	r1, #1
 8001672:	fa01 f202 	lsl.w	r2, r1, r2
 8001676:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001680:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00c      	beq.n	80016a4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001698:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
    }
  }
  return status;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016de:	e15a      	b.n	8001996 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2101      	movs	r1, #1
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 814c 	beq.w	8001990 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b01      	cmp	r3, #1
 8001702:	d005      	beq.n	8001710 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800170c:	2b02      	cmp	r3, #2
 800170e:	d130      	bne.n	8001772 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001746:	2201      	movs	r2, #1
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	f003 0201 	and.w	r2, r3, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b03      	cmp	r3, #3
 800177c:	d017      	beq.n	80017ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d123      	bne.n	8001802 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	08da      	lsrs	r2, r3, #3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3208      	adds	r2, #8
 80017fc:	6939      	ldr	r1, [r7, #16]
 80017fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0203 	and.w	r2, r3, #3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 80a6 	beq.w	8001990 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001844:	4b5b      	ldr	r3, [pc, #364]	; (80019b4 <HAL_GPIO_Init+0x2e4>)
 8001846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001848:	4a5a      	ldr	r2, [pc, #360]	; (80019b4 <HAL_GPIO_Init+0x2e4>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6613      	str	r3, [r2, #96]	; 0x60
 8001850:	4b58      	ldr	r3, [pc, #352]	; (80019b4 <HAL_GPIO_Init+0x2e4>)
 8001852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800185c:	4a56      	ldr	r2, [pc, #344]	; (80019b8 <HAL_GPIO_Init+0x2e8>)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001886:	d01f      	beq.n	80018c8 <HAL_GPIO_Init+0x1f8>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a4c      	ldr	r2, [pc, #304]	; (80019bc <HAL_GPIO_Init+0x2ec>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d019      	beq.n	80018c4 <HAL_GPIO_Init+0x1f4>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <HAL_GPIO_Init+0x2f0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d013      	beq.n	80018c0 <HAL_GPIO_Init+0x1f0>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a4a      	ldr	r2, [pc, #296]	; (80019c4 <HAL_GPIO_Init+0x2f4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00d      	beq.n	80018bc <HAL_GPIO_Init+0x1ec>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a49      	ldr	r2, [pc, #292]	; (80019c8 <HAL_GPIO_Init+0x2f8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d007      	beq.n	80018b8 <HAL_GPIO_Init+0x1e8>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a48      	ldr	r2, [pc, #288]	; (80019cc <HAL_GPIO_Init+0x2fc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d101      	bne.n	80018b4 <HAL_GPIO_Init+0x1e4>
 80018b0:	2305      	movs	r3, #5
 80018b2:	e00a      	b.n	80018ca <HAL_GPIO_Init+0x1fa>
 80018b4:	2306      	movs	r3, #6
 80018b6:	e008      	b.n	80018ca <HAL_GPIO_Init+0x1fa>
 80018b8:	2304      	movs	r3, #4
 80018ba:	e006      	b.n	80018ca <HAL_GPIO_Init+0x1fa>
 80018bc:	2303      	movs	r3, #3
 80018be:	e004      	b.n	80018ca <HAL_GPIO_Init+0x1fa>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e002      	b.n	80018ca <HAL_GPIO_Init+0x1fa>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <HAL_GPIO_Init+0x1fa>
 80018c8:	2300      	movs	r3, #0
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	f002 0203 	and.w	r2, r2, #3
 80018d0:	0092      	lsls	r2, r2, #2
 80018d2:	4093      	lsls	r3, r2
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018da:	4937      	ldr	r1, [pc, #220]	; (80019b8 <HAL_GPIO_Init+0x2e8>)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	3302      	adds	r3, #2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018e8:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <HAL_GPIO_Init+0x300>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800190c:	4a30      	ldr	r2, [pc, #192]	; (80019d0 <HAL_GPIO_Init+0x300>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <HAL_GPIO_Init+0x300>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001936:	4a26      	ldr	r2, [pc, #152]	; (80019d0 <HAL_GPIO_Init+0x300>)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <HAL_GPIO_Init+0x300>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001960:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <HAL_GPIO_Init+0x300>)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_GPIO_Init+0x300>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800198a:	4a11      	ldr	r2, [pc, #68]	; (80019d0 <HAL_GPIO_Init+0x300>)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f47f ae9d 	bne.w	80016e0 <HAL_GPIO_Init+0x10>
  }
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	371c      	adds	r7, #28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010000 	.word	0x40010000
 80019bc:	48000400 	.word	0x48000400
 80019c0:	48000800 	.word	0x48000800
 80019c4:	48000c00 	.word	0x48000c00
 80019c8:	48001000 	.word	0x48001000
 80019cc:	48001400 	.word	0x48001400
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
 80019e0:	4613      	mov	r3, r2
 80019e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e4:	787b      	ldrb	r3, [r7, #1]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019f0:	e002      	b.n	80019f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0c0      	b.n	8001b98 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f009 f9c4 	bl	800adb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2203      	movs	r2, #3
 8001a34:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f004 ffbe 	bl	80069be <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	e03e      	b.n	8001ac6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	440b      	add	r3, r1
 8001a56:	3311      	adds	r3, #17
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a5c:	7bfa      	ldrb	r2, [r7, #15]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	3310      	adds	r3, #16
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a70:	7bfa      	ldrb	r2, [r7, #15]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3313      	adds	r3, #19
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	3320      	adds	r3, #32
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3324      	adds	r3, #36	; 0x24
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	440b      	add	r3, r1
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	791b      	ldrb	r3, [r3, #4]
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3bb      	bcc.n	8001a48 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e044      	b.n	8001b60 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	440b      	add	r3, r1
 8001afa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001afe:	7bfa      	ldrb	r2, [r7, #15]
 8001b00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	440b      	add	r3, r1
 8001b10:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	440b      	add	r3, r1
 8001b52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	791b      	ldrb	r3, [r3, #4]
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d3b5      	bcc.n	8001ad6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3304      	adds	r3, #4
 8001b72:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001b76:	f004 ff3d 	bl	80069f4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7a9b      	ldrb	r3, [r3, #10]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d102      	bne.n	8001b96 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f001 fc41 	bl	8003418 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_PCD_Start+0x16>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e012      	b.n	8001bdc <HAL_PCD_Start+0x3c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f004 fee4 	bl	8006990 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f007 f9a4 	bl	8008f1a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f007 f9a9 	bl	8008f48 <USB_ReadInterrupts>
 8001bf6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fb04 	bl	8002210 <PCD_EP_ISR_Handler>

    return;
 8001c08:	e110      	b.n	8001e2c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c26:	b292      	uxth	r2, r2
 8001c28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f009 f954 	bl	800aeda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c32:	2100      	movs	r1, #0
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f8fc 	bl	8001e32 <HAL_PCD_SetAddress>

    return;
 8001c3a:	e0f7      	b.n	8001e2c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00c      	beq.n	8001c60 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c58:	b292      	uxth	r2, r2
 8001c5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c5e:	e0e5      	b.n	8001e2c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00c      	beq.n	8001c84 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c7c:	b292      	uxth	r2, r2
 8001c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c82:	e0d3      	b.n	8001e2c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d034      	beq.n	8001cf8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0204 	bic.w	r2, r2, #4
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0208 	bic.w	r2, r2, #8
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d107      	bne.n	8001cd8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f009 faf4 	bl	800b2c0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f009 f937 	bl	800af4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cf0:	b292      	uxth	r2, r2
 8001cf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001cf6:	e099      	b.n	8001e2c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d027      	beq.n	8001d52 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0208 	orr.w	r2, r2, #8
 8001d14:	b292      	uxth	r2, r2
 8001d16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d2c:	b292      	uxth	r2, r2
 8001d2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0204 	orr.w	r2, r2, #4
 8001d44:	b292      	uxth	r2, r2
 8001d46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f009 f8e4 	bl	800af18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001d50:	e06c      	b.n	8001e2c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d040      	beq.n	8001dde <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d12b      	bne.n	8001dd6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0204 	orr.w	r2, r2, #4
 8001d90:	b292      	uxth	r2, r2
 8001d92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0208 	orr.w	r2, r2, #8
 8001da8:	b292      	uxth	r2, r2
 8001daa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001dcc:	2101      	movs	r1, #1
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f009 fa76 	bl	800b2c0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001dd4:	e02a      	b.n	8001e2c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f009 f89e 	bl	800af18 <HAL_PCD_SuspendCallback>
    return;
 8001ddc:	e026      	b.n	8001e2c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00f      	beq.n	8001e08 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dfa:	b292      	uxth	r2, r2
 8001dfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f009 f85c 	bl	800aebe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001e06:	e011      	b.n	8001e2c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00c      	beq.n	8001e2c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e24:	b292      	uxth	r2, r2
 8001e26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e2a:	bf00      	nop
  }
}
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_PCD_SetAddress+0x1a>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e012      	b.n	8001e72 <HAL_PCD_SetAddress+0x40>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	78fa      	ldrb	r2, [r7, #3]
 8001e58:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	78fa      	ldrb	r2, [r7, #3]
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f007 f845 	bl	8008ef2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	4608      	mov	r0, r1
 8001e84:	4611      	mov	r1, r2
 8001e86:	461a      	mov	r2, r3
 8001e88:	4603      	mov	r3, r0
 8001e8a:	70fb      	strb	r3, [r7, #3]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	803b      	strh	r3, [r7, #0]
 8001e90:	4613      	mov	r3, r2
 8001e92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	da0e      	bge.n	8001ebe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	f003 0207 	and.w	r2, r3, #7
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	3310      	adds	r3, #16
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	705a      	strb	r2, [r3, #1]
 8001ebc:	e00e      	b.n	8001edc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 0207 	and.w	r2, r3, #7
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ee8:	883a      	ldrh	r2, [r7, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	78ba      	ldrb	r2, [r7, #2]
 8001ef2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ef4:	78bb      	ldrb	r3, [r7, #2]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d102      	bne.n	8001f00 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_PCD_EP_Open+0x94>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e00e      	b.n	8001f2c <HAL_PCD_EP_Open+0xb2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68f9      	ldr	r1, [r7, #12]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f004 fd87 	bl	8006a30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8001f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	da0e      	bge.n	8001f66 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	f003 0207 	and.w	r2, r3, #7
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	3310      	adds	r3, #16
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	705a      	strb	r2, [r3, #1]
 8001f64:	e00e      	b.n	8001f84 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 0207 	and.w	r2, r3, #7
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_PCD_EP_Close+0x6a>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e00e      	b.n	8001fbc <HAL_PCD_EP_Close+0x88>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68f9      	ldr	r1, [r7, #12]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f005 f903 	bl	80071b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	f003 0207 	and.w	r2, r3, #7
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4413      	add	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2200      	movs	r2, #0
 8002002:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	b2da      	uxtb	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6979      	ldr	r1, [r7, #20]
 8002016:	4618      	mov	r0, r3
 8002018:	f005 fabb 	bl	8007592 <USB_EPStartXfer>

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	f003 0207 	and.w	r2, r3, #7
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002048:	681b      	ldr	r3, [r3, #0]
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	460b      	mov	r3, r1
 8002064:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002066:	7afb      	ldrb	r3, [r7, #11]
 8002068:	f003 0207 	and.w	r2, r3, #7
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	3310      	adds	r3, #16
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4413      	add	r3, r2
 800207a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2200      	movs	r2, #0
 800209a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2201      	movs	r2, #1
 80020a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a2:	7afb      	ldrb	r3, [r7, #11]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6979      	ldr	r1, [r7, #20]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f005 fa6c 	bl	8007592 <USB_EPStartXfer>

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	7912      	ldrb	r2, [r2, #4]
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e03e      	b.n	8002160 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	da0e      	bge.n	8002108 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 0207 	and.w	r2, r3, #7
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	3310      	adds	r3, #16
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2201      	movs	r2, #1
 8002104:	705a      	strb	r2, [r3, #1]
 8002106:	e00c      	b.n	8002122 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	b2da      	uxtb	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_PCD_EP_SetStall+0x7e>
 800213e:	2302      	movs	r3, #2
 8002140:	e00e      	b.n	8002160 <HAL_PCD_EP_SetStall+0x9c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68f9      	ldr	r1, [r7, #12]
 8002150:	4618      	mov	r0, r3
 8002152:	f006 fdcf 	bl	8008cf4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	7912      	ldrb	r2, [r2, #4]
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e040      	b.n	8002208 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800218a:	2b00      	cmp	r3, #0
 800218c:	da0e      	bge.n	80021ac <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	f003 0207 	and.w	r2, r3, #7
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	3310      	adds	r3, #16
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	705a      	strb	r2, [r3, #1]
 80021aa:	e00e      	b.n	80021ca <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	f003 0207 	and.w	r2, r3, #7
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_PCD_EP_ClrStall+0x82>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e00e      	b.n	8002208 <HAL_PCD_EP_ClrStall+0xa0>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68f9      	ldr	r1, [r7, #12]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f006 fdcc 	bl	8008d96 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b096      	sub	sp, #88	; 0x58
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002218:	e3ae      	b.n	8002978 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002222:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002226:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002234:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002238:	2b00      	cmp	r3, #0
 800223a:	f040 8170 	bne.w	800251e <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800223e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	d14d      	bne.n	80022e6 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225a:	81fb      	strh	r3, [r7, #14]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	89fb      	ldrh	r3, [r7, #14]
 8002262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800226a:	b29b      	uxth	r3, r3
 800226c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3310      	adds	r3, #16
 8002272:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800227c:	b29b      	uxth	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	4413      	add	r3, r2
 800228e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800229a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800229c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	441a      	add	r2, r3
 80022a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022aa:	2100      	movs	r1, #0
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f008 fdec 	bl	800ae8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	7b1b      	ldrb	r3, [r3, #12]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 835d 	beq.w	8002978 <PCD_EP_ISR_Handler+0x768>
 80022be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 8358 	bne.w	8002978 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7b1b      	ldrb	r3, [r3, #12]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b292      	uxth	r2, r2
 80022da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	731a      	strb	r2, [r3, #12]
 80022e4:	e348      	b.n	8002978 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80022ec:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80022f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80022fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002300:	2b00      	cmp	r3, #0
 8002302:	d032      	beq.n	800236a <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	4413      	add	r3, r2
 800231e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800232a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8002336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002338:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800233a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800233e:	b29b      	uxth	r3, r3
 8002340:	f006 fe54 	bl	8008fec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b29a      	uxth	r2, r3
 800234c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002350:	4013      	ands	r3, r2
 8002352:	823b      	strh	r3, [r7, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	8a3a      	ldrh	r2, [r7, #16]
 800235a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800235e:	b292      	uxth	r2, r2
 8002360:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f008 fd64 	bl	800ae30 <HAL_PCD_SetupStageCallback>
 8002368:	e306      	b.n	8002978 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800236a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800236e:	2b00      	cmp	r3, #0
 8002370:	f280 8302 	bge.w	8002978 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	b29a      	uxth	r2, r3
 800237c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002380:	4013      	ands	r3, r2
 8002382:	83fb      	strh	r3, [r7, #30]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	8bfa      	ldrh	r2, [r7, #30]
 800238a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800238e:	b292      	uxth	r2, r2
 8002390:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	4413      	add	r3, r2
 80023ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d019      	beq.n	80023f6 <PCD_EP_ISR_Handler+0x1e6>
 80023c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d015      	beq.n	80023f6 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d0:	6959      	ldr	r1, [r3, #20]
 80023d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80023d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023da:	b29b      	uxth	r3, r3
 80023dc:	f006 fe06 	bl	8008fec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80023e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	441a      	add	r2, r3
 80023ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023ee:	2100      	movs	r1, #0
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f008 fd2f 	bl	800ae54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002400:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002408:	2b00      	cmp	r3, #0
 800240a:	f040 82b5 	bne.w	8002978 <PCD_EP_ISR_Handler+0x768>
 800240e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002412:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002416:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800241a:	f000 82ad 	beq.w	8002978 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242c:	b29b      	uxth	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4413      	add	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002448:	b29a      	uxth	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	801a      	strh	r2, [r3, #0]
 800244e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b3e      	cmp	r3, #62	; 0x3e
 8002454:	d91d      	bls.n	8002492 <PCD_EP_ISR_Handler+0x282>
 8002456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	647b      	str	r3, [r7, #68]	; 0x44
 800245e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	2b00      	cmp	r3, #0
 8002468:	d102      	bne.n	8002470 <PCD_EP_ISR_Handler+0x260>
 800246a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800246c:	3b01      	subs	r3, #1
 800246e:	647b      	str	r3, [r7, #68]	; 0x44
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b29a      	uxth	r2, r3
 8002476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002478:	b29b      	uxth	r3, r3
 800247a:	029b      	lsls	r3, r3, #10
 800247c:	b29b      	uxth	r3, r3
 800247e:	4313      	orrs	r3, r2
 8002480:	b29b      	uxth	r3, r3
 8002482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800248a:	b29a      	uxth	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	801a      	strh	r2, [r3, #0]
 8002490:	e026      	b.n	80024e0 <PCD_EP_ISR_Handler+0x2d0>
 8002492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <PCD_EP_ISR_Handler+0x2a0>
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	801a      	strh	r2, [r3, #0]
 80024ae:	e017      	b.n	80024e0 <PCD_EP_ISR_Handler+0x2d0>
 80024b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	647b      	str	r3, [r7, #68]	; 0x44
 80024b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <PCD_EP_ISR_Handler+0x2ba>
 80024c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c6:	3301      	adds	r3, #1
 80024c8:	647b      	str	r3, [r7, #68]	; 0x44
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	029b      	lsls	r3, r3, #10
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	4313      	orrs	r3, r2
 80024da:	b29a      	uxth	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f0:	827b      	strh	r3, [r7, #18]
 80024f2:	8a7b      	ldrh	r3, [r7, #18]
 80024f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80024f8:	827b      	strh	r3, [r7, #18]
 80024fa:	8a7b      	ldrh	r3, [r7, #18]
 80024fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002500:	827b      	strh	r3, [r7, #18]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	8a7b      	ldrh	r3, [r7, #18]
 8002508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800250c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002518:	b29b      	uxth	r3, r3
 800251a:	8013      	strh	r3, [r2, #0]
 800251c:	e22c      	b.n	8002978 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002532:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002536:	2b00      	cmp	r3, #0
 8002538:	f280 80f6 	bge.w	8002728 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29a      	uxth	r2, r3
 800254e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002552:	4013      	ands	r3, r2
 8002554:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800256a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800256e:	b292      	uxth	r2, r2
 8002570:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002572:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258a:	7b1b      	ldrb	r3, [r3, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d123      	bne.n	80025d8 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002598:	b29b      	uxth	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80025b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 808e 	beq.w	80026de <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c8:	6959      	ldr	r1, [r3, #20]
 80025ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025cc:	88da      	ldrh	r2, [r3, #6]
 80025ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80025d2:	f006 fd0b 	bl	8008fec <USB_ReadPMA>
 80025d6:	e082      	b.n	80026de <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80025d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025da:	78db      	ldrb	r3, [r3, #3]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d10a      	bne.n	80025f6 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025e4:	461a      	mov	r2, r3
 80025e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f9d3 	bl	8002994 <HAL_PCD_EP_DB_Receive>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80025f4:	e073      	b.n	80026de <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800260c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002610:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	441a      	add	r2, r3
 8002622:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800262a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800262e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002632:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002636:	b29b      	uxth	r3, r3
 8002638:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d022      	beq.n	800269a <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800265c:	b29b      	uxth	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4413      	add	r3, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	4413      	add	r3, r2
 800266e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002678:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800267c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002680:	2b00      	cmp	r3, #0
 8002682:	d02c      	beq.n	80026de <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268a:	6959      	ldr	r1, [r3, #20]
 800268c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268e:	891a      	ldrh	r2, [r3, #8]
 8002690:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002694:	f006 fcaa 	bl	8008fec <USB_ReadPMA>
 8002698:	e021      	b.n	80026de <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4413      	add	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026be:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80026c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d0:	6959      	ldr	r1, [r3, #20]
 80026d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d4:	895a      	ldrh	r2, [r3, #10]
 80026d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026da:	f006 fc87 	bl	8008fec <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e0:	69da      	ldr	r2, [r3, #28]
 80026e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026e6:	441a      	add	r2, r3
 80026e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80026ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026f4:	441a      	add	r2, r3
 80026f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80026fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <PCD_EP_ISR_Handler+0x4fe>
 8002702:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	429a      	cmp	r2, r3
 800270c:	d206      	bcs.n	800271c <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800270e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	4619      	mov	r1, r3
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f008 fb9d 	bl	800ae54 <HAL_PCD_DataOutStageCallback>
 800271a:	e005      	b.n	8002728 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002722:	4618      	mov	r0, r3
 8002724:	f004 ff35 	bl	8007592 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002728:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800272c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8121 	beq.w	8002978 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8002736:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	3310      	adds	r3, #16
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002764:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	441a      	add	r2, r3
 8002776:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800277a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800277e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002782:	b29b      	uxth	r3, r3
 8002784:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002788:	78db      	ldrb	r3, [r3, #3]
 800278a:	2b01      	cmp	r3, #1
 800278c:	f040 80a2 	bne.w	80028d4 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8002790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002792:	2200      	movs	r2, #0
 8002794:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002798:	7b1b      	ldrb	r3, [r3, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8093 	beq.w	80028c6 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d046      	beq.n	800283a <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ae:	785b      	ldrb	r3, [r3, #1]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d126      	bne.n	8002802 <PCD_EP_ISR_Handler+0x5f2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	4413      	add	r3, r2
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
 80027cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	00da      	lsls	r2, r3, #3
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	4413      	add	r3, r2
 80027d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027da:	623b      	str	r3, [r7, #32]
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	801a      	strh	r2, [r3, #0]
 8002800:	e061      	b.n	80028c6 <PCD_EP_ISR_Handler+0x6b6>
 8002802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002804:	785b      	ldrb	r3, [r3, #1]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d15d      	bne.n	80028c6 <PCD_EP_ISR_Handler+0x6b6>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002818:	b29b      	uxth	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281e:	4413      	add	r3, r2
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	00da      	lsls	r2, r3, #3
 8002828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282a:	4413      	add	r3, r2
 800282c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
 8002832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002834:	2200      	movs	r2, #0
 8002836:	801a      	strh	r2, [r3, #0]
 8002838:	e045      	b.n	80028c6 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002842:	785b      	ldrb	r3, [r3, #1]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d126      	bne.n	8002896 <PCD_EP_ISR_Handler+0x686>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002856:	b29b      	uxth	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285c:	4413      	add	r3, r2
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
 8002860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	00da      	lsls	r2, r3, #3
 8002866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002868:	4413      	add	r3, r2
 800286a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800286e:	633b      	str	r3, [r7, #48]	; 0x30
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287a:	b29a      	uxth	r2, r3
 800287c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287e:	801a      	strh	r2, [r3, #0]
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29b      	uxth	r3, r3
 8002886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800288a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800288e:	b29a      	uxth	r2, r3
 8002890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002892:	801a      	strh	r2, [r3, #0]
 8002894:	e017      	b.n	80028c6 <PCD_EP_ISR_Handler+0x6b6>
 8002896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002898:	785b      	ldrb	r3, [r3, #1]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d113      	bne.n	80028c6 <PCD_EP_ISR_Handler+0x6b6>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ac:	4413      	add	r3, r2
 80028ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	00da      	lsls	r2, r3, #3
 80028b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b8:	4413      	add	r3, r2
 80028ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028be:	63bb      	str	r3, [r7, #56]	; 0x38
 80028c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c2:	2200      	movs	r2, #0
 80028c4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	4619      	mov	r1, r3
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f008 fadc 	bl	800ae8a <HAL_PCD_DataInStageCallback>
 80028d2:	e051      	b.n	8002978 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80028d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d144      	bne.n	800296a <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002904:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290a:	699a      	ldr	r2, [r3, #24]
 800290c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002910:	429a      	cmp	r2, r3
 8002912:	d907      	bls.n	8002924 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8002914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002916:	699a      	ldr	r2, [r3, #24]
 8002918:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800291c:	1ad2      	subs	r2, r2, r3
 800291e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002920:	619a      	str	r2, [r3, #24]
 8002922:	e002      	b.n	800292a <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800292a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	4619      	mov	r1, r3
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f008 faa6 	bl	800ae8a <HAL_PCD_DataInStageCallback>
 800293e:	e01b      	b.n	8002978 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002948:	441a      	add	r2, r3
 800294a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800294e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002950:	69da      	ldr	r2, [r3, #28]
 8002952:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002956:	441a      	add	r2, r3
 8002958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002962:	4618      	mov	r0, r3
 8002964:	f004 fe15 	bl	8007592 <USB_EPStartXfer>
 8002968:	e006      	b.n	8002978 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800296a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800296e:	461a      	mov	r2, r3
 8002970:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f917 	bl	8002ba6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002980:	b29b      	uxth	r3, r3
 8002982:	b21b      	sxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	f6ff ac48 	blt.w	800221a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3758      	adds	r7, #88	; 0x58
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d07c      	beq.n	8002aa6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	4413      	add	r3, r2
 80029c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	8b7b      	ldrh	r3, [r7, #26]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d306      	bcc.n	80029ea <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	8b7b      	ldrh	r3, [r7, #26]
 80029e2:	1ad2      	subs	r2, r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	619a      	str	r2, [r3, #24]
 80029e8:	e002      	b.n	80029f0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d123      	bne.n	8002a40 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	833b      	strh	r3, [r7, #24]
 8002a14:	8b3b      	ldrh	r3, [r7, #24]
 8002a16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a1a:	833b      	strh	r3, [r7, #24]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	441a      	add	r2, r3
 8002a2a:	8b3b      	ldrh	r3, [r7, #24]
 8002a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d01f      	beq.n	8002a8a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a64:	82fb      	strh	r3, [r7, #22]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	441a      	add	r2, r3
 8002a74:	8afb      	ldrh	r3, [r7, #22]
 8002a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a8a:	8b7b      	ldrh	r3, [r7, #26]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8085 	beq.w	8002b9c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	6959      	ldr	r1, [r3, #20]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	891a      	ldrh	r2, [r3, #8]
 8002a9e:	8b7b      	ldrh	r3, [r7, #26]
 8002aa0:	f006 faa4 	bl	8008fec <USB_ReadPMA>
 8002aa4:	e07a      	b.n	8002b9c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	699a      	ldr	r2, [r3, #24]
 8002ad0:	8b7b      	ldrh	r3, [r7, #26]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d306      	bcc.n	8002ae4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	8b7b      	ldrh	r3, [r7, #26]
 8002adc:	1ad2      	subs	r2, r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	619a      	str	r2, [r3, #24]
 8002ae2:	e002      	b.n	8002aea <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d123      	bne.n	8002b3a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0c:	83fb      	strh	r3, [r7, #30]
 8002b0e:	8bfb      	ldrh	r3, [r7, #30]
 8002b10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b14:	83fb      	strh	r3, [r7, #30]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	441a      	add	r2, r3
 8002b24:	8bfb      	ldrh	r3, [r7, #30]
 8002b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d11f      	bne.n	8002b84 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5e:	83bb      	strh	r3, [r7, #28]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	441a      	add	r2, r3
 8002b6e:	8bbb      	ldrh	r3, [r7, #28]
 8002b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b84:	8b7b      	ldrh	r3, [r7, #26]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	6959      	ldr	r1, [r3, #20]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	895a      	ldrh	r2, [r3, #10]
 8002b96:	8b7b      	ldrh	r3, [r7, #26]
 8002b98:	f006 fa28 	bl	8008fec <USB_ReadPMA>
    }
  }

  return count;
 8002b9c:	8b7b      	ldrh	r3, [r7, #26]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b0a4      	sub	sp, #144	; 0x90
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 81db 	beq.w	8002f76 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d907      	bls.n	8002c04 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002bfc:	1ad2      	subs	r2, r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	619a      	str	r2, [r3, #24]
 8002c02:	e002      	b.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2200      	movs	r2, #0
 8002c08:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 80b9 	bne.w	8002d86 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	785b      	ldrb	r3, [r3, #1]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d126      	bne.n	8002c6a <HAL_PCD_EP_DB_Transmit+0xc4>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	4413      	add	r3, r2
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	00da      	lsls	r2, r3, #3
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	801a      	strh	r2, [r3, #0]
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	801a      	strh	r2, [r3, #0]
 8002c68:	e01a      	b.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	785b      	ldrb	r3, [r3, #1]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d116      	bne.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	637b      	str	r3, [r7, #52]	; 0x34
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c86:	4413      	add	r3, r2
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	00da      	lsls	r2, r3, #3
 8002c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c92:	4413      	add	r3, r2
 8002c94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c98:	633b      	str	r3, [r7, #48]	; 0x30
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	785b      	ldrb	r3, [r3, #1]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d126      	bne.n	8002cfc <HAL_PCD_EP_DB_Transmit+0x156>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	00da      	lsls	r2, r3, #3
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	801a      	strh	r2, [r3, #0]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	801a      	strh	r2, [r3, #0]
 8002cfa:	e017      	b.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x186>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	785b      	ldrb	r3, [r3, #1]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d113      	bne.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x186>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	4413      	add	r3, r2
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	00da      	lsls	r2, r3, #3
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	4413      	add	r3, r2
 8002d20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d24:	623b      	str	r3, [r7, #32]
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f008 f8a9 	bl	800ae8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 82fa 	beq.w	8003338 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5e:	82fb      	strh	r3, [r7, #22]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	441a      	add	r2, r3
 8002d6e:	8afb      	ldrh	r3, [r7, #22]
 8002d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	8013      	strh	r3, [r2, #0]
 8002d84:	e2d8      	b.n	8003338 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d021      	beq.n	8002dd4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002daa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	441a      	add	r2, r3
 8002dbc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	f040 82ac 	bne.w	8003338 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002de8:	441a      	add	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	69da      	ldr	r2, [r3, #28]
 8002df2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002df6:	441a      	add	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	6a1a      	ldr	r2, [r3, #32]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d30b      	bcc.n	8002e20 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6a1a      	ldr	r2, [r3, #32]
 8002e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e18:	1ad2      	subs	r2, r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	621a      	str	r2, [r3, #32]
 8002e1e:	e017      	b.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d108      	bne.n	8002e3a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002e28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e38:	e00a      	b.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	785b      	ldrb	r3, [r3, #1]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d165      	bne.n	8002f24 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e6c:	4413      	add	r3, r2
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	00da      	lsls	r2, r3, #3
 8002e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e78:	4413      	add	r3, r2
 8002e7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8e:	801a      	strh	r2, [r3, #0]
 8002e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e94:	2b3e      	cmp	r3, #62	; 0x3e
 8002e96:	d91d      	bls.n	8002ed4 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	029b      	lsls	r3, r3, #10
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed0:	801a      	strh	r2, [r3, #0]
 8002ed2:	e044      	b.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <HAL_PCD_EP_DB_Transmit+0x34c>
 8002edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	801a      	strh	r2, [r3, #0]
 8002ef0:	e035      	b.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_PCD_EP_DB_Transmit+0x366>
 8002f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f08:	3301      	adds	r3, #1
 8002f0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	029b      	lsls	r3, r3, #10
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	801a      	strh	r2, [r3, #0]
 8002f22:	e01c      	b.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d118      	bne.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	647b      	str	r3, [r7, #68]	; 0x44
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f40:	4413      	add	r3, r2
 8002f42:	647b      	str	r3, [r7, #68]	; 0x44
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	00da      	lsls	r2, r3, #3
 8002f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f52:	643b      	str	r3, [r7, #64]	; 0x40
 8002f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f5c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	6959      	ldr	r1, [r3, #20]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	891a      	ldrh	r2, [r3, #8]
 8002f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	f005 fffa 	bl	8008f68 <USB_WritePMA>
 8002f74:	e1e0      	b.n	8003338 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4413      	add	r3, r2
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f9a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d307      	bcc.n	8002fba <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002fb2:	1ad2      	subs	r2, r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	619a      	str	r2, [r3, #24]
 8002fb8:	e002      	b.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f040 80c0 	bne.w	800314a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d126      	bne.n	8003020 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fe6:	4413      	add	r3, r2
 8002fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	00da      	lsls	r2, r3, #3
 8002ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ff8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003004:	b29a      	uxth	r2, r3
 8003006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003008:	801a      	strh	r2, [r3, #0]
 800300a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003018:	b29a      	uxth	r2, r3
 800301a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800301c:	801a      	strh	r2, [r3, #0]
 800301e:	e01a      	b.n	8003056 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	785b      	ldrb	r3, [r3, #1]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d116      	bne.n	8003056 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	667b      	str	r3, [r7, #100]	; 0x64
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003036:	b29b      	uxth	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800303c:	4413      	add	r3, r2
 800303e:	667b      	str	r3, [r7, #100]	; 0x64
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	00da      	lsls	r2, r3, #3
 8003046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003048:	4413      	add	r3, r2
 800304a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800304e:	663b      	str	r3, [r7, #96]	; 0x60
 8003050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003052:	2200      	movs	r2, #0
 8003054:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	677b      	str	r3, [r7, #116]	; 0x74
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	785b      	ldrb	r3, [r3, #1]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d12b      	bne.n	80030bc <HAL_PCD_EP_DB_Transmit+0x516>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	66fb      	str	r3, [r7, #108]	; 0x6c
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003072:	b29b      	uxth	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003078:	4413      	add	r3, r2
 800307a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	00da      	lsls	r2, r3, #3
 8003082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003084:	4413      	add	r3, r2
 8003086:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800308a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800308e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800309a:	b29a      	uxth	r2, r3
 800309c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030a0:	801a      	strh	r2, [r3, #0]
 80030a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030b8:	801a      	strh	r2, [r3, #0]
 80030ba:	e017      	b.n	80030ec <HAL_PCD_EP_DB_Transmit+0x546>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	785b      	ldrb	r3, [r3, #1]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d113      	bne.n	80030ec <HAL_PCD_EP_DB_Transmit+0x546>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d2:	4413      	add	r3, r2
 80030d4:	677b      	str	r3, [r7, #116]	; 0x74
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	00da      	lsls	r2, r3, #3
 80030dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030de:	4413      	add	r3, r2
 80030e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030e4:	673b      	str	r3, [r7, #112]	; 0x70
 80030e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e8:	2200      	movs	r2, #0
 80030ea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	4619      	mov	r1, r3
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f007 fec9 	bl	800ae8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f040 811a 	bne.w	8003338 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	b29b      	uxth	r3, r3
 8003116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	441a      	add	r2, r3
 8003130:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800313c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003144:	b29b      	uxth	r3, r3
 8003146:	8013      	strh	r3, [r2, #0]
 8003148:	e0f6      	b.n	8003338 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d121      	bne.n	8003198 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	b29b      	uxth	r3, r3
 8003166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800316a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	441a      	add	r2, r3
 8003180:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800318c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003194:	b29b      	uxth	r3, r3
 8003196:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800319e:	2b01      	cmp	r3, #1
 80031a0:	f040 80ca 	bne.w	8003338 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031ac:	441a      	add	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031ba:	441a      	add	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	6a1a      	ldr	r2, [r3, #32]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d30b      	bcc.n	80031e4 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	6a1a      	ldr	r2, [r3, #32]
 80031d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031dc:	1ad2      	subs	r2, r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	621a      	str	r2, [r3, #32]
 80031e2:	e017      	b.n	8003214 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d108      	bne.n	80031fe <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80031ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031fc:	e00a      	b.n	8003214 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2200      	movs	r2, #0
 800320a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	657b      	str	r3, [r7, #84]	; 0x54
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	785b      	ldrb	r3, [r3, #1]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d165      	bne.n	80032ee <HAL_PCD_EP_DB_Transmit+0x748>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003230:	b29b      	uxth	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003236:	4413      	add	r3, r2
 8003238:	65fb      	str	r3, [r7, #92]	; 0x5c
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	00da      	lsls	r2, r3, #3
 8003240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003242:	4413      	add	r3, r2
 8003244:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003248:	65bb      	str	r3, [r7, #88]	; 0x58
 800324a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	b29b      	uxth	r3, r3
 8003250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003254:	b29a      	uxth	r2, r3
 8003256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003258:	801a      	strh	r2, [r3, #0]
 800325a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800325e:	2b3e      	cmp	r3, #62	; 0x3e
 8003260:	d91d      	bls.n	800329e <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	66bb      	str	r3, [r7, #104]	; 0x68
 800326a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003276:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003278:	3b01      	subs	r3, #1
 800327a:	66bb      	str	r3, [r7, #104]	; 0x68
 800327c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	b29a      	uxth	r2, r3
 8003282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003284:	b29b      	uxth	r3, r3
 8003286:	029b      	lsls	r3, r3, #10
 8003288:	b29b      	uxth	r3, r3
 800328a:	4313      	orrs	r3, r2
 800328c:	b29b      	uxth	r3, r3
 800328e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003296:	b29a      	uxth	r2, r3
 8003298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800329a:	801a      	strh	r2, [r3, #0]
 800329c:	e041      	b.n	8003322 <HAL_PCD_EP_DB_Transmit+0x77c>
 800329e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <HAL_PCD_EP_DB_Transmit+0x716>
 80032a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b8:	801a      	strh	r2, [r3, #0]
 80032ba:	e032      	b.n	8003322 <HAL_PCD_EP_DB_Transmit+0x77c>
 80032bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032c0:	085b      	lsrs	r3, r3, #1
 80032c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80032c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_PCD_EP_DB_Transmit+0x730>
 80032d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032d2:	3301      	adds	r3, #1
 80032d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80032d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29a      	uxth	r2, r3
 80032dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032de:	b29b      	uxth	r3, r3
 80032e0:	029b      	lsls	r3, r3, #10
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	4313      	orrs	r3, r2
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ea:	801a      	strh	r2, [r3, #0]
 80032ec:	e019      	b.n	8003322 <HAL_PCD_EP_DB_Transmit+0x77c>
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	785b      	ldrb	r3, [r3, #1]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d115      	bne.n	8003322 <HAL_PCD_EP_DB_Transmit+0x77c>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fe:	b29b      	uxth	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003304:	4413      	add	r3, r2
 8003306:	657b      	str	r3, [r7, #84]	; 0x54
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	00da      	lsls	r2, r3, #3
 800330e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003310:	4413      	add	r3, r2
 8003312:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003316:	653b      	str	r3, [r7, #80]	; 0x50
 8003318:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800331c:	b29a      	uxth	r2, r3
 800331e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003320:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	6959      	ldr	r1, [r3, #20]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	895a      	ldrh	r2, [r3, #10]
 800332e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003332:	b29b      	uxth	r3, r3
 8003334:	f005 fe18 	bl	8008f68 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800334e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003352:	82bb      	strh	r3, [r7, #20]
 8003354:	8abb      	ldrh	r3, [r7, #20]
 8003356:	f083 0310 	eor.w	r3, r3, #16
 800335a:	82bb      	strh	r3, [r7, #20]
 800335c:	8abb      	ldrh	r3, [r7, #20]
 800335e:	f083 0320 	eor.w	r3, r3, #32
 8003362:	82bb      	strh	r3, [r7, #20]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	441a      	add	r2, r3
 8003372:	8abb      	ldrh	r3, [r7, #20]
 8003374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800337c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003384:	b29b      	uxth	r3, r3
 8003386:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3790      	adds	r7, #144	; 0x90
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003392:	b480      	push	{r7}
 8003394:	b087      	sub	sp, #28
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	607b      	str	r3, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	817b      	strh	r3, [r7, #10]
 80033a0:	4613      	mov	r3, r2
 80033a2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80033a4:	897b      	ldrh	r3, [r7, #10]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00b      	beq.n	80033c8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033b0:	897b      	ldrh	r3, [r7, #10]
 80033b2:	f003 0207 	and.w	r2, r3, #7
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	3310      	adds	r3, #16
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	e009      	b.n	80033dc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033c8:	897a      	ldrh	r2, [r7, #10]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4413      	add	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80033dc:	893b      	ldrh	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d107      	bne.n	80033f2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2200      	movs	r2, #0
 80033e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	80da      	strh	r2, [r3, #6]
 80033f0:	e00b      	b.n	800340a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2201      	movs	r2, #1
 80033f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	0c1b      	lsrs	r3, r3, #16
 8003404:	b29a      	uxth	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800343c:	b29b      	uxth	r3, r3
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003450:	b29b      	uxth	r3, r3
 8003452:	f043 0302 	orr.w	r3, r3, #2
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d141      	bne.n	80034fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800347a:	4b4b      	ldr	r3, [pc, #300]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003486:	d131      	bne.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003488:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800348e:	4a46      	ldr	r2, [pc, #280]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003494:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003498:	4b43      	ldr	r3, [pc, #268]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034a0:	4a41      	ldr	r2, [pc, #260]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034a8:	4b40      	ldr	r3, [pc, #256]	; (80035ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2232      	movs	r2, #50	; 0x32
 80034ae:	fb02 f303 	mul.w	r3, r2, r3
 80034b2:	4a3f      	ldr	r2, [pc, #252]	; (80035b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	0c9b      	lsrs	r3, r3, #18
 80034ba:	3301      	adds	r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034be:	e002      	b.n	80034c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c6:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d2:	d102      	bne.n	80034da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f2      	bne.n	80034c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034da:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e6:	d158      	bne.n	800359a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e057      	b.n	800359c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034ec:	4b2e      	ldr	r3, [pc, #184]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f2:	4a2d      	ldr	r2, [pc, #180]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034fc:	e04d      	b.n	800359a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003504:	d141      	bne.n	800358a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003506:	4b28      	ldr	r3, [pc, #160]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800350e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003512:	d131      	bne.n	8003578 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003514:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800351a:	4a23      	ldr	r2, [pc, #140]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003520:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003524:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800352c:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800352e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003532:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003534:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2232      	movs	r2, #50	; 0x32
 800353a:	fb02 f303 	mul.w	r3, r2, r3
 800353e:	4a1c      	ldr	r2, [pc, #112]	; (80035b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003540:	fba2 2303 	umull	r2, r3, r2, r3
 8003544:	0c9b      	lsrs	r3, r3, #18
 8003546:	3301      	adds	r3, #1
 8003548:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800354a:	e002      	b.n	8003552 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3b01      	subs	r3, #1
 8003550:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003552:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355e:	d102      	bne.n	8003566 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f2      	bne.n	800354c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003572:	d112      	bne.n	800359a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e011      	b.n	800359c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800357a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800357e:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003584:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003588:	e007      	b.n	800359a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800358a:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003592:	4a05      	ldr	r2, [pc, #20]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003594:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003598:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40007000 	.word	0x40007000
 80035ac:	20000000 	.word	0x20000000
 80035b0:	431bde83 	.word	0x431bde83

080035b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	4a04      	ldr	r2, [pc, #16]	; (80035d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c2:	6093      	str	r3, [r2, #8]
}
 80035c4:	bf00      	nop
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40007000 	.word	0x40007000

080035d4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035da:	f7fd fe7b 	bl	80012d4 <HAL_GetTick>
 80035de:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80035e0:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <HAL_RCC_DeInit+0xf4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a38      	ldr	r2, [pc, #224]	; (80036c8 <HAL_RCC_DeInit+0xf4>)
 80035e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ea:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ee:	f7fd fe71 	bl	80012d4 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e05f      	b.n	80036c0 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003600:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <HAL_RCC_DeInit+0xf4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 800360c:	4b2e      	ldr	r3, [pc, #184]	; (80036c8 <HAL_RCC_DeInit+0xf4>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a2d      	ldr	r2, [pc, #180]	; (80036c8 <HAL_RCC_DeInit+0xf4>)
 8003612:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003616:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003618:	f7fd fe5c 	bl	80012d4 <HAL_GetTick>
 800361c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 800361e:	4b2a      	ldr	r3, [pc, #168]	; (80036c8 <HAL_RCC_DeInit+0xf4>)
 8003620:	2201      	movs	r2, #1
 8003622:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003624:	e00a      	b.n	800363c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003626:	f7fd fe55 	bl	80012d4 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f241 3288 	movw	r2, #5000	; 0x1388
 8003634:	4293      	cmp	r3, r2
 8003636:	d901      	bls.n	800363c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e041      	b.n	80036c0 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_RCC_DeInit+0xf4>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 030c 	and.w	r3, r3, #12
 8003644:	2b04      	cmp	r3, #4
 8003646:	d1ee      	bne.n	8003626 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003648:	4b20      	ldr	r3, [pc, #128]	; (80036cc <HAL_RCC_DeInit+0xf8>)
 800364a:	4a21      	ldr	r2, [pc, #132]	; (80036d0 <HAL_RCC_DeInit+0xfc>)
 800364c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800364e:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <HAL_RCC_DeInit+0x100>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd fdf2 	bl	800123c <HAL_InitTick>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e02e      	b.n	80036c0 <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_RCC_DeInit+0xf4>)
 8003664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003668:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 800366a:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <HAL_RCC_DeInit+0xf4>)
 800366c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003670:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003672:	f7fd fe2f 	bl	80012d4 <HAL_GetTick>
 8003676:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003678:	e008      	b.n	800368c <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7fd fe2b 	bl	80012d4 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e019      	b.n	80036c0 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800368c:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <HAL_RCC_DeInit+0xf4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f0      	bne.n	800367a <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_DeInit+0xf4>)
 800369a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800369e:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCC_DeInit+0xf4>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <HAL_RCC_DeInit+0xf4>)
 80036a8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ac:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCC_DeInit+0xf4>)
 80036b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b4:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <HAL_RCC_DeInit+0xf4>)
 80036b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	20000000 	.word	0x20000000
 80036d0:	00f42400 	.word	0x00f42400
 80036d4:	20000004 	.word	0x20000004

080036d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e2fe      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d075      	beq.n	80037e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f6:	4b97      	ldr	r3, [pc, #604]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003700:	4b94      	ldr	r3, [pc, #592]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b0c      	cmp	r3, #12
 800370e:	d102      	bne.n	8003716 <HAL_RCC_OscConfig+0x3e>
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d002      	beq.n	800371c <HAL_RCC_OscConfig+0x44>
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d10b      	bne.n	8003734 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371c:	4b8d      	ldr	r3, [pc, #564]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d05b      	beq.n	80037e0 <HAL_RCC_OscConfig+0x108>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d157      	bne.n	80037e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e2d9      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373c:	d106      	bne.n	800374c <HAL_RCC_OscConfig+0x74>
 800373e:	4b85      	ldr	r3, [pc, #532]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a84      	ldr	r2, [pc, #528]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e01d      	b.n	8003788 <HAL_RCC_OscConfig+0xb0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003754:	d10c      	bne.n	8003770 <HAL_RCC_OscConfig+0x98>
 8003756:	4b7f      	ldr	r3, [pc, #508]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a7e      	ldr	r2, [pc, #504]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 800375c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	4b7c      	ldr	r3, [pc, #496]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a7b      	ldr	r2, [pc, #492]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e00b      	b.n	8003788 <HAL_RCC_OscConfig+0xb0>
 8003770:	4b78      	ldr	r3, [pc, #480]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a77      	ldr	r2, [pc, #476]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	4b75      	ldr	r3, [pc, #468]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a74      	ldr	r2, [pc, #464]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d013      	beq.n	80037b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fd fda0 	bl	80012d4 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003798:	f7fd fd9c 	bl	80012d4 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e29e      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037aa:	4b6a      	ldr	r3, [pc, #424]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0xc0>
 80037b6:	e014      	b.n	80037e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fd fd8c 	bl	80012d4 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c0:	f7fd fd88 	bl	80012d4 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e28a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037d2:	4b60      	ldr	r3, [pc, #384]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0xe8>
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d075      	beq.n	80038da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ee:	4b59      	ldr	r3, [pc, #356]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f8:	4b56      	ldr	r3, [pc, #344]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2b0c      	cmp	r3, #12
 8003806:	d102      	bne.n	800380e <HAL_RCC_OscConfig+0x136>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d002      	beq.n	8003814 <HAL_RCC_OscConfig+0x13c>
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b04      	cmp	r3, #4
 8003812:	d11f      	bne.n	8003854 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003814:	4b4f      	ldr	r3, [pc, #316]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_OscConfig+0x154>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e25d      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382c:	4b49      	ldr	r3, [pc, #292]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	061b      	lsls	r3, r3, #24
 800383a:	4946      	ldr	r1, [pc, #280]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 800383c:	4313      	orrs	r3, r2
 800383e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003840:	4b45      	ldr	r3, [pc, #276]	; (8003958 <HAL_RCC_OscConfig+0x280>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd fcf9 	bl	800123c <HAL_InitTick>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d043      	beq.n	80038d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e249      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d023      	beq.n	80038a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800385c:	4b3d      	ldr	r3, [pc, #244]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3c      	ldr	r2, [pc, #240]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fd fd34 	bl	80012d4 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003870:	f7fd fd30 	bl	80012d4 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e232      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003882:	4b34      	ldr	r3, [pc, #208]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388e:	4b31      	ldr	r3, [pc, #196]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	061b      	lsls	r3, r3, #24
 800389c:	492d      	ldr	r1, [pc, #180]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
 80038a2:	e01a      	b.n	80038da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a4:	4b2b      	ldr	r3, [pc, #172]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2a      	ldr	r2, [pc, #168]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 80038aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fd fd10 	bl	80012d4 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b8:	f7fd fd0c 	bl	80012d4 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e20e      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ca:	4b22      	ldr	r3, [pc, #136]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x1e0>
 80038d6:	e000      	b.n	80038da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d041      	beq.n	800396a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d01c      	beq.n	8003928 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ee:	4b19      	ldr	r3, [pc, #100]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 80038f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f4:	4a17      	ldr	r2, [pc, #92]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fe:	f7fd fce9 	bl	80012d4 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003906:	f7fd fce5 	bl	80012d4 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e1e7      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003918:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 800391a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0ef      	beq.n	8003906 <HAL_RCC_OscConfig+0x22e>
 8003926:	e020      	b.n	800396a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 800392a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003938:	f7fd fccc 	bl	80012d4 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800393e:	e00d      	b.n	800395c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003940:	f7fd fcc8 	bl	80012d4 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d906      	bls.n	800395c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e1ca      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
 8003958:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800395c:	4b8c      	ldr	r3, [pc, #560]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 800395e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1ea      	bne.n	8003940 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80a6 	beq.w	8003ac4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003978:	2300      	movs	r3, #0
 800397a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800397c:	4b84      	ldr	r3, [pc, #528]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_OscConfig+0x2b4>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_RCC_OscConfig+0x2b6>
 800398c:	2300      	movs	r3, #0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00d      	beq.n	80039ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003992:	4b7f      	ldr	r3, [pc, #508]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	4a7e      	ldr	r2, [pc, #504]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399c:	6593      	str	r3, [r2, #88]	; 0x58
 800399e:	4b7c      	ldr	r3, [pc, #496]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039aa:	2301      	movs	r3, #1
 80039ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ae:	4b79      	ldr	r3, [pc, #484]	; (8003b94 <HAL_RCC_OscConfig+0x4bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d118      	bne.n	80039ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ba:	4b76      	ldr	r3, [pc, #472]	; (8003b94 <HAL_RCC_OscConfig+0x4bc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a75      	ldr	r2, [pc, #468]	; (8003b94 <HAL_RCC_OscConfig+0x4bc>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c6:	f7fd fc85 	bl	80012d4 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ce:	f7fd fc81 	bl	80012d4 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e183      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e0:	4b6c      	ldr	r3, [pc, #432]	; (8003b94 <HAL_RCC_OscConfig+0x4bc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d108      	bne.n	8003a06 <HAL_RCC_OscConfig+0x32e>
 80039f4:	4b66      	ldr	r3, [pc, #408]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 80039f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fa:	4a65      	ldr	r2, [pc, #404]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a04:	e024      	b.n	8003a50 <HAL_RCC_OscConfig+0x378>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b05      	cmp	r3, #5
 8003a0c:	d110      	bne.n	8003a30 <HAL_RCC_OscConfig+0x358>
 8003a0e:	4b60      	ldr	r3, [pc, #384]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a14:	4a5e      	ldr	r2, [pc, #376]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a16:	f043 0304 	orr.w	r3, r3, #4
 8003a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a1e:	4b5c      	ldr	r3, [pc, #368]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a24:	4a5a      	ldr	r2, [pc, #360]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a2e:	e00f      	b.n	8003a50 <HAL_RCC_OscConfig+0x378>
 8003a30:	4b57      	ldr	r3, [pc, #348]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	4a56      	ldr	r2, [pc, #344]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a40:	4b53      	ldr	r3, [pc, #332]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a46:	4a52      	ldr	r2, [pc, #328]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a48:	f023 0304 	bic.w	r3, r3, #4
 8003a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d016      	beq.n	8003a86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fd fc3c 	bl	80012d4 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fd fc38 	bl	80012d4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e138      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a76:	4b46      	ldr	r3, [pc, #280]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ed      	beq.n	8003a60 <HAL_RCC_OscConfig+0x388>
 8003a84:	e015      	b.n	8003ab2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a86:	f7fd fc25 	bl	80012d4 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fd fc21 	bl	80012d4 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e121      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aa4:	4b3a      	ldr	r3, [pc, #232]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1ed      	bne.n	8003a8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ab2:	7ffb      	ldrb	r3, [r7, #31]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d105      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab8:	4b35      	ldr	r3, [pc, #212]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	4a34      	ldr	r2, [pc, #208]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d03c      	beq.n	8003b4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01c      	beq.n	8003b12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ad8:	4b2d      	ldr	r3, [pc, #180]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ade:	4a2c      	ldr	r2, [pc, #176]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd fbf4 	bl	80012d4 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003af0:	f7fd fbf0 	bl	80012d4 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e0f2      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b02:	4b23      	ldr	r3, [pc, #140]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ef      	beq.n	8003af0 <HAL_RCC_OscConfig+0x418>
 8003b10:	e01b      	b.n	8003b4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b12:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b18:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b22:	f7fd fbd7 	bl	80012d4 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b2a:	f7fd fbd3 	bl	80012d4 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e0d5      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b3c:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1ef      	bne.n	8003b2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80c9 	beq.w	8003ce6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b54:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 030c 	and.w	r3, r3, #12
 8003b5c:	2b0c      	cmp	r3, #12
 8003b5e:	f000 8083 	beq.w	8003c68 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d15e      	bne.n	8003c28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a08      	ldr	r2, [pc, #32]	; (8003b90 <HAL_RCC_OscConfig+0x4b8>)
 8003b70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b76:	f7fd fbad 	bl	80012d4 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7c:	e00c      	b.n	8003b98 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fd fba9 	bl	80012d4 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d905      	bls.n	8003b98 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e0ab      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b98:	4b55      	ldr	r3, [pc, #340]	; (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1ec      	bne.n	8003b7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba4:	4b52      	ldr	r3, [pc, #328]	; (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	4b52      	ldr	r3, [pc, #328]	; (8003cf4 <HAL_RCC_OscConfig+0x61c>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6a11      	ldr	r1, [r2, #32]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bb4:	3a01      	subs	r2, #1
 8003bb6:	0112      	lsls	r2, r2, #4
 8003bb8:	4311      	orrs	r1, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003bbe:	0212      	lsls	r2, r2, #8
 8003bc0:	4311      	orrs	r1, r2
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bc6:	0852      	lsrs	r2, r2, #1
 8003bc8:	3a01      	subs	r2, #1
 8003bca:	0552      	lsls	r2, r2, #21
 8003bcc:	4311      	orrs	r1, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bd2:	0852      	lsrs	r2, r2, #1
 8003bd4:	3a01      	subs	r2, #1
 8003bd6:	0652      	lsls	r2, r2, #25
 8003bd8:	4311      	orrs	r1, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003bde:	06d2      	lsls	r2, r2, #27
 8003be0:	430a      	orrs	r2, r1
 8003be2:	4943      	ldr	r1, [pc, #268]	; (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be8:	4b41      	ldr	r3, [pc, #260]	; (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a40      	ldr	r2, [pc, #256]	; (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bf4:	4b3e      	ldr	r3, [pc, #248]	; (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a3d      	ldr	r2, [pc, #244]	; (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fd fb68 	bl	80012d4 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fd fb64 	bl	80012d4 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e066      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1a:	4b35      	ldr	r3, [pc, #212]	; (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x530>
 8003c26:	e05e      	b.n	8003ce6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c28:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a30      	ldr	r2, [pc, #192]	; (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fd fb4e 	bl	80012d4 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fd fb4a 	bl	80012d4 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e04c      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c4e:	4b28      	ldr	r3, [pc, #160]	; (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c5a:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	4924      	ldr	r1, [pc, #144]	; (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003c60:	4b25      	ldr	r3, [pc, #148]	; (8003cf8 <HAL_RCC_OscConfig+0x620>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	60cb      	str	r3, [r1, #12]
 8003c66:	e03e      	b.n	8003ce6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e039      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003c74:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <HAL_RCC_OscConfig+0x618>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f003 0203 	and.w	r2, r3, #3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d12c      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	3b01      	subs	r3, #1
 8003c94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d123      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d11b      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d113      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d109      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3720      	adds	r7, #32
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	019f800c 	.word	0x019f800c
 8003cf8:	feeefffc 	.word	0xfeeefffc

08003cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e11e      	b.n	8003f52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d14:	4b91      	ldr	r3, [pc, #580]	; (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d910      	bls.n	8003d44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d22:	4b8e      	ldr	r3, [pc, #568]	; (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 020f 	bic.w	r2, r3, #15
 8003d2a:	498c      	ldr	r1, [pc, #560]	; (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d32:	4b8a      	ldr	r3, [pc, #552]	; (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e106      	b.n	8003f52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d073      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d129      	bne.n	8003dac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d58:	4b81      	ldr	r3, [pc, #516]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0f4      	b.n	8003f52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003d68:	f000 f99e 	bl	80040a8 <RCC_GetSysClockFreqFromPLLSource>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4a7c      	ldr	r2, [pc, #496]	; (8003f64 <HAL_RCC_ClockConfig+0x268>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d93f      	bls.n	8003df6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d76:	4b7a      	ldr	r3, [pc, #488]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d033      	beq.n	8003df6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d12f      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d96:	4b72      	ldr	r3, [pc, #456]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d9e:	4a70      	ldr	r2, [pc, #448]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003da6:	2380      	movs	r3, #128	; 0x80
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	e024      	b.n	8003df6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d107      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db4:	4b6a      	ldr	r3, [pc, #424]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d109      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0c6      	b.n	8003f52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dc4:	4b66      	ldr	r3, [pc, #408]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0be      	b.n	8003f52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003dd4:	f000 f8ce 	bl	8003f74 <HAL_RCC_GetSysClockFreq>
 8003dd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4a61      	ldr	r2, [pc, #388]	; (8003f64 <HAL_RCC_ClockConfig+0x268>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d909      	bls.n	8003df6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003de2:	4b5f      	ldr	r3, [pc, #380]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dea:	4a5d      	ldr	r2, [pc, #372]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003df2:	2380      	movs	r3, #128	; 0x80
 8003df4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003df6:	4b5a      	ldr	r3, [pc, #360]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f023 0203 	bic.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4957      	ldr	r1, [pc, #348]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e08:	f7fd fa64 	bl	80012d4 <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e10:	f7fd fa60 	bl	80012d4 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e095      	b.n	8003f52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	4b4e      	ldr	r3, [pc, #312]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 020c 	and.w	r2, r3, #12
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d1eb      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d023      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e50:	4b43      	ldr	r3, [pc, #268]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a42      	ldr	r2, [pc, #264]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003e68:	4b3d      	ldr	r3, [pc, #244]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e70:	4a3b      	ldr	r2, [pc, #236]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e78:	4b39      	ldr	r3, [pc, #228]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4936      	ldr	r1, [pc, #216]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b80      	cmp	r3, #128	; 0x80
 8003e90:	d105      	bne.n	8003e9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e92:	4b33      	ldr	r3, [pc, #204]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	4a32      	ldr	r2, [pc, #200]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e9e:	4b2f      	ldr	r3, [pc, #188]	; (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d21d      	bcs.n	8003ee8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eac:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 020f 	bic.w	r2, r3, #15
 8003eb4:	4929      	ldr	r1, [pc, #164]	; (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ebc:	f7fd fa0a 	bl	80012d4 <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec4:	f7fd fa06 	bl	80012d4 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e03b      	b.n	8003f52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <HAL_RCC_ClockConfig+0x260>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d1ed      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4917      	ldr	r1, [pc, #92]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d009      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f12:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	490f      	ldr	r1, [pc, #60]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f26:	f000 f825 	bl	8003f74 <HAL_RCC_GetSysClockFreq>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <HAL_RCC_ClockConfig+0x264>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	490c      	ldr	r1, [pc, #48]	; (8003f68 <HAL_RCC_ClockConfig+0x26c>)
 8003f38:	5ccb      	ldrb	r3, [r1, r3]
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f42:	4a0a      	ldr	r2, [pc, #40]	; (8003f6c <HAL_RCC_ClockConfig+0x270>)
 8003f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <HAL_RCC_ClockConfig+0x274>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fd f976 	bl	800123c <HAL_InitTick>
 8003f50:	4603      	mov	r3, r0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40022000 	.word	0x40022000
 8003f60:	40021000 	.word	0x40021000
 8003f64:	04c4b400 	.word	0x04c4b400
 8003f68:	0800b490 	.word	0x0800b490
 8003f6c:	20000000 	.word	0x20000000
 8003f70:	20000004 	.word	0x20000004

08003f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f7a:	4b2c      	ldr	r3, [pc, #176]	; (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d102      	bne.n	8003f8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f86:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	e047      	b.n	800401c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f8c:	4b27      	ldr	r3, [pc, #156]	; (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d102      	bne.n	8003f9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f98:	4b26      	ldr	r3, [pc, #152]	; (8004034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	e03e      	b.n	800401c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f9e:	4b23      	ldr	r3, [pc, #140]	; (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b0c      	cmp	r3, #12
 8003fa8:	d136      	bne.n	8004018 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003faa:	4b20      	ldr	r3, [pc, #128]	; (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fb4:	4b1d      	ldr	r3, [pc, #116]	; (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d10c      	bne.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fc8:	4a1a      	ldr	r2, [pc, #104]	; (8004034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd0:	4a16      	ldr	r2, [pc, #88]	; (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fd2:	68d2      	ldr	r2, [r2, #12]
 8003fd4:	0a12      	lsrs	r2, r2, #8
 8003fd6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fda:	fb02 f303 	mul.w	r3, r2, r3
 8003fde:	617b      	str	r3, [r7, #20]
      break;
 8003fe0:	e00c      	b.n	8003ffc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fe2:	4a13      	ldr	r2, [pc, #76]	; (8004030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fea:	4a10      	ldr	r2, [pc, #64]	; (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fec:	68d2      	ldr	r2, [r2, #12]
 8003fee:	0a12      	lsrs	r2, r2, #8
 8003ff0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	617b      	str	r3, [r7, #20]
      break;
 8003ffa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	0e5b      	lsrs	r3, r3, #25
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	3301      	adds	r3, #1
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	fbb2 f3f3 	udiv	r3, r2, r3
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	e001      	b.n	800401c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800401c:	693b      	ldr	r3, [r7, #16]
}
 800401e:	4618      	mov	r0, r3
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000
 8004030:	00f42400 	.word	0x00f42400
 8004034:	016e3600 	.word	0x016e3600

08004038 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800403c:	4b03      	ldr	r3, [pc, #12]	; (800404c <HAL_RCC_GetHCLKFreq+0x14>)
 800403e:	681b      	ldr	r3, [r3, #0]
}
 8004040:	4618      	mov	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000000 	.word	0x20000000

08004050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004054:	f7ff fff0 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 8004058:	4602      	mov	r2, r0
 800405a:	4b06      	ldr	r3, [pc, #24]	; (8004074 <HAL_RCC_GetPCLK1Freq+0x24>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	4904      	ldr	r1, [pc, #16]	; (8004078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004066:	5ccb      	ldrb	r3, [r1, r3]
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004070:	4618      	mov	r0, r3
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40021000 	.word	0x40021000
 8004078:	0800b4a0 	.word	0x0800b4a0

0800407c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004080:	f7ff ffda 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	0adb      	lsrs	r3, r3, #11
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	4904      	ldr	r1, [pc, #16]	; (80040a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40021000 	.word	0x40021000
 80040a4:	0800b4a0 	.word	0x0800b4a0

080040a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040ae:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040b8:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d10c      	bne.n	80040e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040cc:	4a17      	ldr	r2, [pc, #92]	; (800412c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d4:	4a14      	ldr	r2, [pc, #80]	; (8004128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040d6:	68d2      	ldr	r2, [r2, #12]
 80040d8:	0a12      	lsrs	r2, r2, #8
 80040da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040de:	fb02 f303 	mul.w	r3, r2, r3
 80040e2:	617b      	str	r3, [r7, #20]
    break;
 80040e4:	e00c      	b.n	8004100 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040e6:	4a12      	ldr	r2, [pc, #72]	; (8004130 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	4a0e      	ldr	r2, [pc, #56]	; (8004128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040f0:	68d2      	ldr	r2, [r2, #12]
 80040f2:	0a12      	lsrs	r2, r2, #8
 80040f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040f8:	fb02 f303 	mul.w	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]
    break;
 80040fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	0e5b      	lsrs	r3, r3, #25
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	3301      	adds	r3, #1
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	fbb2 f3f3 	udiv	r3, r2, r3
 8004118:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800411a:	687b      	ldr	r3, [r7, #4]
}
 800411c:	4618      	mov	r0, r3
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	40021000 	.word	0x40021000
 800412c:	016e3600 	.word	0x016e3600
 8004130:	00f42400 	.word	0x00f42400

08004134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800413c:	2300      	movs	r3, #0
 800413e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004140:	2300      	movs	r3, #0
 8004142:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 8098 	beq.w	8004282 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004152:	2300      	movs	r3, #0
 8004154:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004156:	4b43      	ldr	r3, [pc, #268]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10d      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004162:	4b40      	ldr	r3, [pc, #256]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	4a3f      	ldr	r2, [pc, #252]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416c:	6593      	str	r3, [r2, #88]	; 0x58
 800416e:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	60bb      	str	r3, [r7, #8]
 8004178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800417a:	2301      	movs	r3, #1
 800417c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800417e:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a39      	ldr	r2, [pc, #228]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004188:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800418a:	f7fd f8a3 	bl	80012d4 <HAL_GetTick>
 800418e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004190:	e009      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004192:	f7fd f89f 	bl	80012d4 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d902      	bls.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	74fb      	strb	r3, [r7, #19]
        break;
 80041a4:	e005      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041a6:	4b30      	ldr	r3, [pc, #192]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0ef      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d159      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041b8:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01e      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d019      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041d4:	4b23      	ldr	r3, [pc, #140]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041e0:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	4a1f      	ldr	r2, [pc, #124]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041f0:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f6:	4a1b      	ldr	r2, [pc, #108]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004200:	4a18      	ldr	r2, [pc, #96]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004212:	f7fd f85f 	bl	80012d4 <HAL_GetTick>
 8004216:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004218:	e00b      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421a:	f7fd f85b 	bl	80012d4 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	f241 3288 	movw	r2, #5000	; 0x1388
 8004228:	4293      	cmp	r3, r2
 800422a:	d902      	bls.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	74fb      	strb	r3, [r7, #19]
            break;
 8004230:	e006      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ec      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10b      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004246:	4b07      	ldr	r3, [pc, #28]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004254:	4903      	ldr	r1, [pc, #12]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800425c:	e008      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800425e:	7cfb      	ldrb	r3, [r7, #19]
 8004260:	74bb      	strb	r3, [r7, #18]
 8004262:	e005      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004264:	40021000 	.word	0x40021000
 8004268:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	7cfb      	ldrb	r3, [r7, #19]
 800426e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004270:	7c7b      	ldrb	r3, [r7, #17]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d105      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004276:	4ba7      	ldr	r3, [pc, #668]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	4aa6      	ldr	r2, [pc, #664]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004280:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800428e:	4ba1      	ldr	r3, [pc, #644]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004294:	f023 0203 	bic.w	r2, r3, #3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	499d      	ldr	r1, [pc, #628]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042b0:	4b98      	ldr	r3, [pc, #608]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b6:	f023 020c 	bic.w	r2, r3, #12
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	4995      	ldr	r1, [pc, #596]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042d2:	4b90      	ldr	r3, [pc, #576]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	498c      	ldr	r1, [pc, #560]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042f4:	4b87      	ldr	r3, [pc, #540]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	4984      	ldr	r1, [pc, #528]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004316:	4b7f      	ldr	r3, [pc, #508]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	497b      	ldr	r1, [pc, #492]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004338:	4b76      	ldr	r3, [pc, #472]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	4973      	ldr	r1, [pc, #460]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800435a:	4b6e      	ldr	r3, [pc, #440]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004360:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	496a      	ldr	r1, [pc, #424]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800437c:	4b65      	ldr	r3, [pc, #404]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	4962      	ldr	r1, [pc, #392]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800439e:	4b5d      	ldr	r3, [pc, #372]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	4959      	ldr	r1, [pc, #356]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043c0:	4b54      	ldr	r3, [pc, #336]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043c6:	f023 0203 	bic.w	r2, r3, #3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	4951      	ldr	r1, [pc, #324]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043e2:	4b4c      	ldr	r3, [pc, #304]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	4948      	ldr	r1, [pc, #288]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004400:	2b00      	cmp	r3, #0
 8004402:	d015      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004404:	4b43      	ldr	r3, [pc, #268]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	4940      	ldr	r1, [pc, #256]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004422:	d105      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004424:	4b3b      	ldr	r3, [pc, #236]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4a3a      	ldr	r2, [pc, #232]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800442a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800442e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004438:	2b00      	cmp	r3, #0
 800443a:	d015      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800443c:	4b35      	ldr	r3, [pc, #212]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004442:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444a:	4932      	ldr	r1, [pc, #200]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800445a:	d105      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800445c:	4b2d      	ldr	r3, [pc, #180]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4a2c      	ldr	r2, [pc, #176]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004466:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d015      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004474:	4b27      	ldr	r3, [pc, #156]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	4924      	ldr	r1, [pc, #144]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004492:	d105      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004494:	4b1f      	ldr	r3, [pc, #124]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800449a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800449e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d015      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044ac:	4b19      	ldr	r3, [pc, #100]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	4916      	ldr	r1, [pc, #88]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ca:	d105      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044cc:	4b11      	ldr	r3, [pc, #68]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4a10      	ldr	r2, [pc, #64]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d019      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	4908      	ldr	r1, [pc, #32]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004502:	d109      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4a02      	ldr	r2, [pc, #8]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800450e:	60d3      	str	r3, [r2, #12]
 8004510:	e002      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004512:	bf00      	nop
 8004514:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d015      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004524:	4b29      	ldr	r3, [pc, #164]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	4926      	ldr	r1, [pc, #152]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004542:	d105      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004544:	4b21      	ldr	r3, [pc, #132]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a20      	ldr	r2, [pc, #128]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800454a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d015      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800455c:	4b1b      	ldr	r3, [pc, #108]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456a:	4918      	ldr	r1, [pc, #96]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457a:	d105      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800457c:	4b13      	ldr	r3, [pc, #76]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a12      	ldr	r2, [pc, #72]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004586:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d015      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004594:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004596:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800459a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a2:	490a      	ldr	r1, [pc, #40]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045b2:	d105      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a04      	ldr	r2, [pc, #16]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80045c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000

080045d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d070      	beq.n	80046c4 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fc fbc6 	bl	8000d88 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	2b10      	cmp	r3, #16
 8004610:	d04f      	beq.n	80046b2 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	22ca      	movs	r2, #202	; 0xca
 8004618:	625a      	str	r2, [r3, #36]	; 0x24
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2253      	movs	r2, #83	; 0x53
 8004620:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f878 	bl	8004718 <RTC_EnterInitMode>
 8004628:	4603      	mov	r3, r0
 800462a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d126      	bne.n	8004680 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004644:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6999      	ldr	r1, [r3, #24]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68d9      	ldr	r1, [r3, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	041a      	lsls	r2, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f884 	bl	8004784 <RTC_ExitInitMode>
 800467c:	4603      	mov	r3, r0
 800467e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d110      	bne.n	80046a8 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1a      	ldr	r2, [r3, #32]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	22ff      	movs	r2, #255	; 0xff
 80046ae:	625a      	str	r2, [r3, #36]	; 0x24
 80046b0:	e001      	b.n	80046b6 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d103      	bne.n	80046c4 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a0d      	ldr	r2, [pc, #52]	; (8004714 <HAL_RTC_WaitForSynchro+0x44>)
 80046de:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80046e0:	f7fc fdf8 	bl	80012d4 <HAL_GetTick>
 80046e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80046e6:	e009      	b.n	80046fc <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046e8:	f7fc fdf4 	bl	80012d4 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046f6:	d901      	bls.n	80046fc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e007      	b.n	800470c <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0ee      	beq.n	80046e8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	0001005f 	.word	0x0001005f

08004718 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d123      	bne.n	800477a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004740:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004742:	f7fc fdc7 	bl	80012d4 <HAL_GetTick>
 8004746:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004748:	e00d      	b.n	8004766 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800474a:	f7fc fdc3 	bl	80012d4 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004758:	d905      	bls.n	8004766 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2203      	movs	r2, #3
 8004762:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <RTC_EnterInitMode+0x62>
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b03      	cmp	r3, #3
 8004778:	d1e7      	bne.n	800474a <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800479e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10c      	bne.n	80047c8 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff ff8e 	bl	80046d0 <HAL_RTC_WaitForSynchro>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d022      	beq.n	8004800 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2203      	movs	r2, #3
 80047be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	73fb      	strb	r3, [r7, #15]
 80047c6:	e01b      	b.n	8004800 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0220 	bic.w	r2, r2, #32
 80047d6:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff ff79 	bl	80046d0 <HAL_RTC_WaitForSynchro>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2203      	movs	r2, #3
 80047e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0220 	orr.w	r2, r2, #32
 80047fe:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004800:	7bfb      	ldrb	r3, [r7, #15]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified TAMP Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 8004818:	4b07      	ldr	r3, [pc, #28]	; (8004838 <HAL_RTCEx_BKUPWrite+0x2c>)
 800481a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4413      	add	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	601a      	str	r2, [r3, #0]
}
 800482c:	bf00      	nop
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	40002500 	.word	0x40002500

0800483c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB to
  *          specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 8004846:	4b07      	ldr	r3, [pc, #28]	; (8004864 <HAL_RTCEx_BKUPRead+0x28>)
 8004848:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4413      	add	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	40002500 	.word	0x40002500

08004868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e042      	b.n	8004900 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004880:	2b00      	cmp	r3, #0
 8004882:	d106      	bne.n	8004892 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7fc fb8f 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2224      	movs	r2, #36	; 0x24
 8004896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0201 	bic.w	r2, r2, #1
 80048a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 feaa 	bl	800560c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fbab 	bl	8005014 <UART_SetConfig>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e01b      	b.n	8004900 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 ff29 	bl	8005750 <UART_CheckIdleState>
 80048fe:	4603      	mov	r3, r0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	; 0x28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	4613      	mov	r3, r2
 8004914:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800491c:	2b20      	cmp	r3, #32
 800491e:	d137      	bne.n	8004990 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <HAL_UART_Receive_IT+0x24>
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e030      	b.n	8004992 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a18      	ldr	r2, [pc, #96]	; (800499c <HAL_UART_Receive_IT+0x94>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d01f      	beq.n	8004980 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d018      	beq.n	8004980 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	613b      	str	r3, [r7, #16]
   return(result);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	623b      	str	r3, [r7, #32]
 800496e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	69f9      	ldr	r1, [r7, #28]
 8004972:	6a3a      	ldr	r2, [r7, #32]
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	61bb      	str	r3, [r7, #24]
   return(result);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e6      	bne.n	800494e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	461a      	mov	r2, r3
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 fffa 	bl	8005980 <UART_Start_Receive_IT>
 800498c:	4603      	mov	r3, r0
 800498e:	e000      	b.n	8004992 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004990:	2302      	movs	r3, #2
  }
}
 8004992:	4618      	mov	r0, r3
 8004994:	3728      	adds	r7, #40	; 0x28
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40008000 	.word	0x40008000

080049a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b0ba      	sub	sp, #232	; 0xe8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80049ce:	4013      	ands	r3, r2
 80049d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80049d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d11b      	bne.n	8004a14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d015      	beq.n	8004a14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ec:	f003 0320 	and.w	r3, r3, #32
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d105      	bne.n	8004a00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d009      	beq.n	8004a14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 82e3 	beq.w	8004fd0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	4798      	blx	r3
      }
      return;
 8004a12:	e2dd      	b.n	8004fd0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8123 	beq.w	8004c64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004a22:	4b8d      	ldr	r3, [pc, #564]	; (8004c58 <HAL_UART_IRQHandler+0x2b8>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a2e:	4b8b      	ldr	r3, [pc, #556]	; (8004c5c <HAL_UART_IRQHandler+0x2bc>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 8116 	beq.w	8004c64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d011      	beq.n	8004a68 <HAL_UART_IRQHandler+0xc8>
 8004a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00b      	beq.n	8004a68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2201      	movs	r2, #1
 8004a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5e:	f043 0201 	orr.w	r2, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d011      	beq.n	8004a98 <HAL_UART_IRQHandler+0xf8>
 8004a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00b      	beq.n	8004a98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2202      	movs	r2, #2
 8004a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8e:	f043 0204 	orr.w	r2, r3, #4
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d011      	beq.n	8004ac8 <HAL_UART_IRQHandler+0x128>
 8004aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00b      	beq.n	8004ac8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	f043 0202 	orr.w	r2, r3, #2
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d017      	beq.n	8004b04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ae0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004ae4:	4b5c      	ldr	r3, [pc, #368]	; (8004c58 <HAL_UART_IRQHandler+0x2b8>)
 8004ae6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00b      	beq.n	8004b04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2208      	movs	r2, #8
 8004af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afa:	f043 0208 	orr.w	r2, r3, #8
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d012      	beq.n	8004b36 <HAL_UART_IRQHandler+0x196>
 8004b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00c      	beq.n	8004b36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2c:	f043 0220 	orr.w	r2, r3, #32
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 8249 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d013      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d105      	bne.n	8004b66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8a:	2b40      	cmp	r3, #64	; 0x40
 8004b8c:	d005      	beq.n	8004b9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d054      	beq.n	8004c44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f001 f812 	bl	8005bc4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b40      	cmp	r3, #64	; 0x40
 8004bac:	d146      	bne.n	8004c3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004be6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1d9      	bne.n	8004bae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d017      	beq.n	8004c34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c0a:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <HAL_UART_IRQHandler+0x2c0>)
 8004c0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fc fcf3 	bl	8001600 <HAL_DMA_Abort_IT>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d019      	beq.n	8004c54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004c2e:	4610      	mov	r0, r2
 8004c30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c32:	e00f      	b.n	8004c54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7fc f991 	bl	8000f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3a:	e00b      	b.n	8004c54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7fc f98d 	bl	8000f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c42:	e007      	b.n	8004c54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7fc f989 	bl	8000f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004c52:	e1bf      	b.n	8004fd4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	bf00      	nop
    return;
 8004c56:	e1bd      	b.n	8004fd4 <HAL_UART_IRQHandler+0x634>
 8004c58:	10000001 	.word	0x10000001
 8004c5c:	04000120 	.word	0x04000120
 8004c60:	08005c91 	.word	0x08005c91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	f040 8153 	bne.w	8004f14 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 814c 	beq.w	8004f14 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8145 	beq.w	8004f14 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2210      	movs	r2, #16
 8004c90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9c:	2b40      	cmp	r3, #64	; 0x40
 8004c9e:	f040 80bb 	bne.w	8004e18 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 818f 	beq.w	8004fd8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	f080 8187 	bcs.w	8004fd8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f040 8087 	bne.w	8004df6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cf4:	e853 3f00 	ldrex	r3, [r3]
 8004cf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1da      	bne.n	8004ce8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3308      	adds	r3, #8
 8004d38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3308      	adds	r3, #8
 8004d52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d62:	e841 2300 	strex	r3, r2, [r1]
 8004d66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1e1      	bne.n	8004d32 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3308      	adds	r3, #8
 8004d74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e3      	bne.n	8004d6e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc4:	f023 0310 	bic.w	r3, r3, #16
 8004dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dd8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e4      	bne.n	8004db4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fc fbac 	bl	800154e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f8f3 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e16:	e0df      	b.n	8004fd8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80d1 	beq.w	8004fdc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004e3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 80cc 	beq.w	8004fdc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e66:	647b      	str	r3, [r7, #68]	; 0x44
 8004e68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e4      	bne.n	8004e44 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3308      	adds	r3, #8
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	623b      	str	r3, [r7, #32]
   return(result);
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ea2:	633a      	str	r2, [r7, #48]	; 0x30
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e1      	bne.n	8004e7a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0310 	bic.w	r3, r3, #16
 8004ede:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	69b9      	ldr	r1, [r7, #24]
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	e841 2300 	strex	r3, r2, [r1]
 8004ef8:	617b      	str	r3, [r7, #20]
   return(result);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1e4      	bne.n	8004eca <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f875 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f12:	e063      	b.n	8004fdc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00e      	beq.n	8004f3e <HAL_UART_IRQHandler+0x59e>
 8004f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f001 fc08 	bl	800674c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f3c:	e051      	b.n	8004fe2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d014      	beq.n	8004f74 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d105      	bne.n	8004f62 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d008      	beq.n	8004f74 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d03a      	beq.n	8004fe0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	4798      	blx	r3
    }
    return;
 8004f72:	e035      	b.n	8004fe0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d009      	beq.n	8004f94 <HAL_UART_IRQHandler+0x5f4>
 8004f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fe95 	bl	8005cbc <UART_EndTransmit_IT>
    return;
 8004f92:	e026      	b.n	8004fe2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d009      	beq.n	8004fb4 <HAL_UART_IRQHandler+0x614>
 8004fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f001 fbe1 	bl	8006774 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fb2:	e016      	b.n	8004fe2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d010      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x642>
 8004fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	da0c      	bge.n	8004fe2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f001 fbc9 	bl	8006760 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fce:	e008      	b.n	8004fe2 <HAL_UART_IRQHandler+0x642>
      return;
 8004fd0:	bf00      	nop
 8004fd2:	e006      	b.n	8004fe2 <HAL_UART_IRQHandler+0x642>
    return;
 8004fd4:	bf00      	nop
 8004fd6:	e004      	b.n	8004fe2 <HAL_UART_IRQHandler+0x642>
      return;
 8004fd8:	bf00      	nop
 8004fda:	e002      	b.n	8004fe2 <HAL_UART_IRQHandler+0x642>
      return;
 8004fdc:	bf00      	nop
 8004fde:	e000      	b.n	8004fe2 <HAL_UART_IRQHandler+0x642>
    return;
 8004fe0:	bf00      	nop
  }
}
 8004fe2:	37e8      	adds	r7, #232	; 0xe8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005018:	b08c      	sub	sp, #48	; 0x30
 800501a:	af00      	add	r7, sp, #0
 800501c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	431a      	orrs	r2, r3
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	431a      	orrs	r2, r3
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	4313      	orrs	r3, r2
 800503a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	4baa      	ldr	r3, [pc, #680]	; (80052ec <UART_SetConfig+0x2d8>)
 8005044:	4013      	ands	r3, r2
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800504c:	430b      	orrs	r3, r1
 800504e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a9f      	ldr	r2, [pc, #636]	; (80052f0 <UART_SetConfig+0x2dc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800507c:	4313      	orrs	r3, r2
 800507e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800508a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	6812      	ldr	r2, [r2, #0]
 8005092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005094:	430b      	orrs	r3, r1
 8005096:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509e:	f023 010f 	bic.w	r1, r3, #15
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a90      	ldr	r2, [pc, #576]	; (80052f4 <UART_SetConfig+0x2e0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d125      	bne.n	8005104 <UART_SetConfig+0xf0>
 80050b8:	4b8f      	ldr	r3, [pc, #572]	; (80052f8 <UART_SetConfig+0x2e4>)
 80050ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d81a      	bhi.n	80050fc <UART_SetConfig+0xe8>
 80050c6:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <UART_SetConfig+0xb8>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	080050dd 	.word	0x080050dd
 80050d0:	080050ed 	.word	0x080050ed
 80050d4:	080050e5 	.word	0x080050e5
 80050d8:	080050f5 	.word	0x080050f5
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e2:	e116      	b.n	8005312 <UART_SetConfig+0x2fe>
 80050e4:	2302      	movs	r3, #2
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ea:	e112      	b.n	8005312 <UART_SetConfig+0x2fe>
 80050ec:	2304      	movs	r3, #4
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050f2:	e10e      	b.n	8005312 <UART_SetConfig+0x2fe>
 80050f4:	2308      	movs	r3, #8
 80050f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050fa:	e10a      	b.n	8005312 <UART_SetConfig+0x2fe>
 80050fc:	2310      	movs	r3, #16
 80050fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005102:	e106      	b.n	8005312 <UART_SetConfig+0x2fe>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a7c      	ldr	r2, [pc, #496]	; (80052fc <UART_SetConfig+0x2e8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d138      	bne.n	8005180 <UART_SetConfig+0x16c>
 800510e:	4b7a      	ldr	r3, [pc, #488]	; (80052f8 <UART_SetConfig+0x2e4>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	f003 030c 	and.w	r3, r3, #12
 8005118:	2b0c      	cmp	r3, #12
 800511a:	d82d      	bhi.n	8005178 <UART_SetConfig+0x164>
 800511c:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <UART_SetConfig+0x110>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	08005159 	.word	0x08005159
 8005128:	08005179 	.word	0x08005179
 800512c:	08005179 	.word	0x08005179
 8005130:	08005179 	.word	0x08005179
 8005134:	08005169 	.word	0x08005169
 8005138:	08005179 	.word	0x08005179
 800513c:	08005179 	.word	0x08005179
 8005140:	08005179 	.word	0x08005179
 8005144:	08005161 	.word	0x08005161
 8005148:	08005179 	.word	0x08005179
 800514c:	08005179 	.word	0x08005179
 8005150:	08005179 	.word	0x08005179
 8005154:	08005171 	.word	0x08005171
 8005158:	2300      	movs	r3, #0
 800515a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800515e:	e0d8      	b.n	8005312 <UART_SetConfig+0x2fe>
 8005160:	2302      	movs	r3, #2
 8005162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005166:	e0d4      	b.n	8005312 <UART_SetConfig+0x2fe>
 8005168:	2304      	movs	r3, #4
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800516e:	e0d0      	b.n	8005312 <UART_SetConfig+0x2fe>
 8005170:	2308      	movs	r3, #8
 8005172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005176:	e0cc      	b.n	8005312 <UART_SetConfig+0x2fe>
 8005178:	2310      	movs	r3, #16
 800517a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800517e:	e0c8      	b.n	8005312 <UART_SetConfig+0x2fe>
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a5e      	ldr	r2, [pc, #376]	; (8005300 <UART_SetConfig+0x2ec>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d125      	bne.n	80051d6 <UART_SetConfig+0x1c2>
 800518a:	4b5b      	ldr	r3, [pc, #364]	; (80052f8 <UART_SetConfig+0x2e4>)
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005190:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005194:	2b30      	cmp	r3, #48	; 0x30
 8005196:	d016      	beq.n	80051c6 <UART_SetConfig+0x1b2>
 8005198:	2b30      	cmp	r3, #48	; 0x30
 800519a:	d818      	bhi.n	80051ce <UART_SetConfig+0x1ba>
 800519c:	2b20      	cmp	r3, #32
 800519e:	d00a      	beq.n	80051b6 <UART_SetConfig+0x1a2>
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d814      	bhi.n	80051ce <UART_SetConfig+0x1ba>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <UART_SetConfig+0x19a>
 80051a8:	2b10      	cmp	r3, #16
 80051aa:	d008      	beq.n	80051be <UART_SetConfig+0x1aa>
 80051ac:	e00f      	b.n	80051ce <UART_SetConfig+0x1ba>
 80051ae:	2300      	movs	r3, #0
 80051b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b4:	e0ad      	b.n	8005312 <UART_SetConfig+0x2fe>
 80051b6:	2302      	movs	r3, #2
 80051b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051bc:	e0a9      	b.n	8005312 <UART_SetConfig+0x2fe>
 80051be:	2304      	movs	r3, #4
 80051c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051c4:	e0a5      	b.n	8005312 <UART_SetConfig+0x2fe>
 80051c6:	2308      	movs	r3, #8
 80051c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051cc:	e0a1      	b.n	8005312 <UART_SetConfig+0x2fe>
 80051ce:	2310      	movs	r3, #16
 80051d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051d4:	e09d      	b.n	8005312 <UART_SetConfig+0x2fe>
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a4a      	ldr	r2, [pc, #296]	; (8005304 <UART_SetConfig+0x2f0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d125      	bne.n	800522c <UART_SetConfig+0x218>
 80051e0:	4b45      	ldr	r3, [pc, #276]	; (80052f8 <UART_SetConfig+0x2e4>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051ea:	2bc0      	cmp	r3, #192	; 0xc0
 80051ec:	d016      	beq.n	800521c <UART_SetConfig+0x208>
 80051ee:	2bc0      	cmp	r3, #192	; 0xc0
 80051f0:	d818      	bhi.n	8005224 <UART_SetConfig+0x210>
 80051f2:	2b80      	cmp	r3, #128	; 0x80
 80051f4:	d00a      	beq.n	800520c <UART_SetConfig+0x1f8>
 80051f6:	2b80      	cmp	r3, #128	; 0x80
 80051f8:	d814      	bhi.n	8005224 <UART_SetConfig+0x210>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <UART_SetConfig+0x1f0>
 80051fe:	2b40      	cmp	r3, #64	; 0x40
 8005200:	d008      	beq.n	8005214 <UART_SetConfig+0x200>
 8005202:	e00f      	b.n	8005224 <UART_SetConfig+0x210>
 8005204:	2300      	movs	r3, #0
 8005206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800520a:	e082      	b.n	8005312 <UART_SetConfig+0x2fe>
 800520c:	2302      	movs	r3, #2
 800520e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005212:	e07e      	b.n	8005312 <UART_SetConfig+0x2fe>
 8005214:	2304      	movs	r3, #4
 8005216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800521a:	e07a      	b.n	8005312 <UART_SetConfig+0x2fe>
 800521c:	2308      	movs	r3, #8
 800521e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005222:	e076      	b.n	8005312 <UART_SetConfig+0x2fe>
 8005224:	2310      	movs	r3, #16
 8005226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800522a:	e072      	b.n	8005312 <UART_SetConfig+0x2fe>
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a35      	ldr	r2, [pc, #212]	; (8005308 <UART_SetConfig+0x2f4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d12a      	bne.n	800528c <UART_SetConfig+0x278>
 8005236:	4b30      	ldr	r3, [pc, #192]	; (80052f8 <UART_SetConfig+0x2e4>)
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005244:	d01a      	beq.n	800527c <UART_SetConfig+0x268>
 8005246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800524a:	d81b      	bhi.n	8005284 <UART_SetConfig+0x270>
 800524c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005250:	d00c      	beq.n	800526c <UART_SetConfig+0x258>
 8005252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005256:	d815      	bhi.n	8005284 <UART_SetConfig+0x270>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <UART_SetConfig+0x250>
 800525c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005260:	d008      	beq.n	8005274 <UART_SetConfig+0x260>
 8005262:	e00f      	b.n	8005284 <UART_SetConfig+0x270>
 8005264:	2300      	movs	r3, #0
 8005266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800526a:	e052      	b.n	8005312 <UART_SetConfig+0x2fe>
 800526c:	2302      	movs	r3, #2
 800526e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005272:	e04e      	b.n	8005312 <UART_SetConfig+0x2fe>
 8005274:	2304      	movs	r3, #4
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800527a:	e04a      	b.n	8005312 <UART_SetConfig+0x2fe>
 800527c:	2308      	movs	r3, #8
 800527e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005282:	e046      	b.n	8005312 <UART_SetConfig+0x2fe>
 8005284:	2310      	movs	r3, #16
 8005286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800528a:	e042      	b.n	8005312 <UART_SetConfig+0x2fe>
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a17      	ldr	r2, [pc, #92]	; (80052f0 <UART_SetConfig+0x2dc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d13a      	bne.n	800530c <UART_SetConfig+0x2f8>
 8005296:	4b18      	ldr	r3, [pc, #96]	; (80052f8 <UART_SetConfig+0x2e4>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052a4:	d01a      	beq.n	80052dc <UART_SetConfig+0x2c8>
 80052a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052aa:	d81b      	bhi.n	80052e4 <UART_SetConfig+0x2d0>
 80052ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b0:	d00c      	beq.n	80052cc <UART_SetConfig+0x2b8>
 80052b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b6:	d815      	bhi.n	80052e4 <UART_SetConfig+0x2d0>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <UART_SetConfig+0x2b0>
 80052bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c0:	d008      	beq.n	80052d4 <UART_SetConfig+0x2c0>
 80052c2:	e00f      	b.n	80052e4 <UART_SetConfig+0x2d0>
 80052c4:	2300      	movs	r3, #0
 80052c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ca:	e022      	b.n	8005312 <UART_SetConfig+0x2fe>
 80052cc:	2302      	movs	r3, #2
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052d2:	e01e      	b.n	8005312 <UART_SetConfig+0x2fe>
 80052d4:	2304      	movs	r3, #4
 80052d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052da:	e01a      	b.n	8005312 <UART_SetConfig+0x2fe>
 80052dc:	2308      	movs	r3, #8
 80052de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052e2:	e016      	b.n	8005312 <UART_SetConfig+0x2fe>
 80052e4:	2310      	movs	r3, #16
 80052e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ea:	e012      	b.n	8005312 <UART_SetConfig+0x2fe>
 80052ec:	cfff69f3 	.word	0xcfff69f3
 80052f0:	40008000 	.word	0x40008000
 80052f4:	40013800 	.word	0x40013800
 80052f8:	40021000 	.word	0x40021000
 80052fc:	40004400 	.word	0x40004400
 8005300:	40004800 	.word	0x40004800
 8005304:	40004c00 	.word	0x40004c00
 8005308:	40005000 	.word	0x40005000
 800530c:	2310      	movs	r3, #16
 800530e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4aae      	ldr	r2, [pc, #696]	; (80055d0 <UART_SetConfig+0x5bc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	f040 8097 	bne.w	800544c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800531e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005322:	2b08      	cmp	r3, #8
 8005324:	d823      	bhi.n	800536e <UART_SetConfig+0x35a>
 8005326:	a201      	add	r2, pc, #4	; (adr r2, 800532c <UART_SetConfig+0x318>)
 8005328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532c:	08005351 	.word	0x08005351
 8005330:	0800536f 	.word	0x0800536f
 8005334:	08005359 	.word	0x08005359
 8005338:	0800536f 	.word	0x0800536f
 800533c:	0800535f 	.word	0x0800535f
 8005340:	0800536f 	.word	0x0800536f
 8005344:	0800536f 	.word	0x0800536f
 8005348:	0800536f 	.word	0x0800536f
 800534c:	08005367 	.word	0x08005367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005350:	f7fe fe7e 	bl	8004050 <HAL_RCC_GetPCLK1Freq>
 8005354:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005356:	e010      	b.n	800537a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005358:	4b9e      	ldr	r3, [pc, #632]	; (80055d4 <UART_SetConfig+0x5c0>)
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800535c:	e00d      	b.n	800537a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535e:	f7fe fe09 	bl	8003f74 <HAL_RCC_GetSysClockFreq>
 8005362:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005364:	e009      	b.n	800537a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800536c:	e005      	b.n	800537a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005378:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 8130 	beq.w	80055e2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	4a94      	ldr	r2, [pc, #592]	; (80055d8 <UART_SetConfig+0x5c4>)
 8005388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800538c:	461a      	mov	r2, r3
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	fbb3 f3f2 	udiv	r3, r3, r2
 8005394:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	4413      	add	r3, r2
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d305      	bcc.n	80053b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d903      	bls.n	80053ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053b8:	e113      	b.n	80055e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	2200      	movs	r2, #0
 80053be:	60bb      	str	r3, [r7, #8]
 80053c0:	60fa      	str	r2, [r7, #12]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	4a84      	ldr	r2, [pc, #528]	; (80055d8 <UART_SetConfig+0x5c4>)
 80053c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2200      	movs	r2, #0
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053dc:	f7fa ff1c 	bl	8000218 <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4610      	mov	r0, r2
 80053e6:	4619      	mov	r1, r3
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	020b      	lsls	r3, r1, #8
 80053f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053f6:	0202      	lsls	r2, r0, #8
 80053f8:	6979      	ldr	r1, [r7, #20]
 80053fa:	6849      	ldr	r1, [r1, #4]
 80053fc:	0849      	lsrs	r1, r1, #1
 80053fe:	2000      	movs	r0, #0
 8005400:	460c      	mov	r4, r1
 8005402:	4605      	mov	r5, r0
 8005404:	eb12 0804 	adds.w	r8, r2, r4
 8005408:	eb43 0905 	adc.w	r9, r3, r5
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	469a      	mov	sl, r3
 8005414:	4693      	mov	fp, r2
 8005416:	4652      	mov	r2, sl
 8005418:	465b      	mov	r3, fp
 800541a:	4640      	mov	r0, r8
 800541c:	4649      	mov	r1, r9
 800541e:	f7fa fefb 	bl	8000218 <__aeabi_uldivmod>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4613      	mov	r3, r2
 8005428:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005430:	d308      	bcc.n	8005444 <UART_SetConfig+0x430>
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005438:	d204      	bcs.n	8005444 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6a3a      	ldr	r2, [r7, #32]
 8005440:	60da      	str	r2, [r3, #12]
 8005442:	e0ce      	b.n	80055e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800544a:	e0ca      	b.n	80055e2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005454:	d166      	bne.n	8005524 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005456:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800545a:	2b08      	cmp	r3, #8
 800545c:	d827      	bhi.n	80054ae <UART_SetConfig+0x49a>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <UART_SetConfig+0x450>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	08005489 	.word	0x08005489
 8005468:	08005491 	.word	0x08005491
 800546c:	08005499 	.word	0x08005499
 8005470:	080054af 	.word	0x080054af
 8005474:	0800549f 	.word	0x0800549f
 8005478:	080054af 	.word	0x080054af
 800547c:	080054af 	.word	0x080054af
 8005480:	080054af 	.word	0x080054af
 8005484:	080054a7 	.word	0x080054a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005488:	f7fe fde2 	bl	8004050 <HAL_RCC_GetPCLK1Freq>
 800548c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800548e:	e014      	b.n	80054ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005490:	f7fe fdf4 	bl	800407c <HAL_RCC_GetPCLK2Freq>
 8005494:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005496:	e010      	b.n	80054ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005498:	4b4e      	ldr	r3, [pc, #312]	; (80055d4 <UART_SetConfig+0x5c0>)
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800549c:	e00d      	b.n	80054ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800549e:	f7fe fd69 	bl	8003f74 <HAL_RCC_GetSysClockFreq>
 80054a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054a4:	e009      	b.n	80054ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054ac:	e005      	b.n	80054ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80054b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8090 	beq.w	80055e2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	4a44      	ldr	r2, [pc, #272]	; (80055d8 <UART_SetConfig+0x5c4>)
 80054c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054cc:	461a      	mov	r2, r3
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80054d4:	005a      	lsls	r2, r3, #1
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	441a      	add	r2, r3
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	2b0f      	cmp	r3, #15
 80054ec:	d916      	bls.n	800551c <UART_SetConfig+0x508>
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f4:	d212      	bcs.n	800551c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f023 030f 	bic.w	r3, r3, #15
 80054fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	085b      	lsrs	r3, r3, #1
 8005504:	b29b      	uxth	r3, r3
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	b29a      	uxth	r2, r3
 800550c:	8bfb      	ldrh	r3, [r7, #30]
 800550e:	4313      	orrs	r3, r2
 8005510:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	8bfa      	ldrh	r2, [r7, #30]
 8005518:	60da      	str	r2, [r3, #12]
 800551a:	e062      	b.n	80055e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005522:	e05e      	b.n	80055e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005524:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005528:	2b08      	cmp	r3, #8
 800552a:	d828      	bhi.n	800557e <UART_SetConfig+0x56a>
 800552c:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <UART_SetConfig+0x520>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	08005559 	.word	0x08005559
 8005538:	08005561 	.word	0x08005561
 800553c:	08005569 	.word	0x08005569
 8005540:	0800557f 	.word	0x0800557f
 8005544:	0800556f 	.word	0x0800556f
 8005548:	0800557f 	.word	0x0800557f
 800554c:	0800557f 	.word	0x0800557f
 8005550:	0800557f 	.word	0x0800557f
 8005554:	08005577 	.word	0x08005577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005558:	f7fe fd7a 	bl	8004050 <HAL_RCC_GetPCLK1Freq>
 800555c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800555e:	e014      	b.n	800558a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005560:	f7fe fd8c 	bl	800407c <HAL_RCC_GetPCLK2Freq>
 8005564:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005566:	e010      	b.n	800558a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005568:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <UART_SetConfig+0x5c0>)
 800556a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800556c:	e00d      	b.n	800558a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800556e:	f7fe fd01 	bl	8003f74 <HAL_RCC_GetSysClockFreq>
 8005572:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005574:	e009      	b.n	800558a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800557c:	e005      	b.n	800558a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005588:	bf00      	nop
    }

    if (pclk != 0U)
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	2b00      	cmp	r3, #0
 800558e:	d028      	beq.n	80055e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	4a10      	ldr	r2, [pc, #64]	; (80055d8 <UART_SetConfig+0x5c4>)
 8005596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800559a:	461a      	mov	r2, r3
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	fbb3 f2f2 	udiv	r2, r3, r2
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	441a      	add	r2, r3
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2b0f      	cmp	r3, #15
 80055b8:	d910      	bls.n	80055dc <UART_SetConfig+0x5c8>
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c0:	d20c      	bcs.n	80055dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60da      	str	r2, [r3, #12]
 80055cc:	e009      	b.n	80055e2 <UART_SetConfig+0x5ce>
 80055ce:	bf00      	nop
 80055d0:	40008000 	.word	0x40008000
 80055d4:	00f42400 	.word	0x00f42400
 80055d8:	0800b4bc 	.word	0x0800b4bc
      }
      else
      {
        ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2200      	movs	r2, #0
 80055f6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2200      	movs	r2, #0
 80055fc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80055fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005602:	4618      	mov	r0, r3
 8005604:	3730      	adds	r7, #48	; 0x30
 8005606:	46bd      	mov	sp, r7
 8005608:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800560c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01a      	beq.n	8005722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800570a:	d10a      	bne.n	8005722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	605a      	str	r2, [r3, #4]
  }
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b098      	sub	sp, #96	; 0x60
 8005754:	af02      	add	r7, sp, #8
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005760:	f7fb fdb8 	bl	80012d4 <HAL_GetTick>
 8005764:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b08      	cmp	r3, #8
 8005772:	d12f      	bne.n	80057d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800577c:	2200      	movs	r2, #0
 800577e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f88e 	bl	80058a4 <UART_WaitOnFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d022      	beq.n	80057d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800579c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057a2:	653b      	str	r3, [r7, #80]	; 0x50
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	461a      	mov	r2, r3
 80057aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ac:	647b      	str	r3, [r7, #68]	; 0x44
 80057ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e6      	bne.n	800578e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e063      	b.n	800589c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d149      	bne.n	8005876 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ea:	2200      	movs	r2, #0
 80057ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f857 	bl	80058a4 <UART_WaitOnFlagUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d03c      	beq.n	8005876 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	623b      	str	r3, [r7, #32]
   return(result);
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005810:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581a:	633b      	str	r3, [r7, #48]	; 0x30
 800581c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e6      	bne.n	80057fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3308      	adds	r3, #8
 8005834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	60fb      	str	r3, [r7, #12]
   return(result);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	64bb      	str	r3, [r7, #72]	; 0x48
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3308      	adds	r3, #8
 800584c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800584e:	61fa      	str	r2, [r7, #28]
 8005850:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	69b9      	ldr	r1, [r7, #24]
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	617b      	str	r3, [r7, #20]
   return(result);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e5      	bne.n	800582e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e012      	b.n	800589c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2220      	movs	r2, #32
 8005882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3758      	adds	r7, #88	; 0x58
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	4613      	mov	r3, r2
 80058b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b4:	e04f      	b.n	8005956 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058bc:	d04b      	beq.n	8005956 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058be:	f7fb fd09 	bl	80012d4 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d302      	bcc.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e04e      	b.n	8005976 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0304 	and.w	r3, r3, #4
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d037      	beq.n	8005956 <UART_WaitOnFlagUntilTimeout+0xb2>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b80      	cmp	r3, #128	; 0x80
 80058ea:	d034      	beq.n	8005956 <UART_WaitOnFlagUntilTimeout+0xb2>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b40      	cmp	r3, #64	; 0x40
 80058f0:	d031      	beq.n	8005956 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d110      	bne.n	8005922 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2208      	movs	r2, #8
 8005906:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f95b 	bl	8005bc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2208      	movs	r2, #8
 8005912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e029      	b.n	8005976 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800592c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005930:	d111      	bne.n	8005956 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800593a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f941 	bl	8005bc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e00f      	b.n	8005976 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69da      	ldr	r2, [r3, #28]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	4013      	ands	r3, r2
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	429a      	cmp	r2, r3
 8005964:	bf0c      	ite	eq
 8005966:	2301      	moveq	r3, #1
 8005968:	2300      	movne	r3, #0
 800596a:	b2db      	uxtb	r3, r3
 800596c:	461a      	mov	r2, r3
 800596e:	79fb      	ldrb	r3, [r7, #7]
 8005970:	429a      	cmp	r2, r3
 8005972:	d0a0      	beq.n	80058b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005980:	b480      	push	{r7}
 8005982:	b0a3      	sub	sp, #140	; 0x8c
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	4613      	mov	r3, r2
 800598c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	88fa      	ldrh	r2, [r7, #6]
 8005998:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	88fa      	ldrh	r2, [r7, #6]
 80059a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b2:	d10e      	bne.n	80059d2 <UART_Start_Receive_IT+0x52>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d105      	bne.n	80059c8 <UART_Start_Receive_IT+0x48>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80059c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059c6:	e02d      	b.n	8005a24 <UART_Start_Receive_IT+0xa4>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	22ff      	movs	r2, #255	; 0xff
 80059cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059d0:	e028      	b.n	8005a24 <UART_Start_Receive_IT+0xa4>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10d      	bne.n	80059f6 <UART_Start_Receive_IT+0x76>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d104      	bne.n	80059ec <UART_Start_Receive_IT+0x6c>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	22ff      	movs	r2, #255	; 0xff
 80059e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059ea:	e01b      	b.n	8005a24 <UART_Start_Receive_IT+0xa4>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	227f      	movs	r2, #127	; 0x7f
 80059f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059f4:	e016      	b.n	8005a24 <UART_Start_Receive_IT+0xa4>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059fe:	d10d      	bne.n	8005a1c <UART_Start_Receive_IT+0x9c>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <UART_Start_Receive_IT+0x92>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	227f      	movs	r2, #127	; 0x7f
 8005a0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a10:	e008      	b.n	8005a24 <UART_Start_Receive_IT+0xa4>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	223f      	movs	r2, #63	; 0x3f
 8005a16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a1a:	e003      	b.n	8005a24 <UART_Start_Receive_IT+0xa4>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2222      	movs	r2, #34	; 0x22
 8005a30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3308      	adds	r3, #8
 8005a3a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005a44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3308      	adds	r3, #8
 8005a54:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005a58:	673a      	str	r2, [r7, #112]	; 0x70
 8005a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005a5e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005a66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e3      	bne.n	8005a34 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a74:	d14f      	bne.n	8005b16 <UART_Start_Receive_IT+0x196>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a7c:	88fa      	ldrh	r2, [r7, #6]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d349      	bcc.n	8005b16 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8a:	d107      	bne.n	8005a9c <UART_Start_Receive_IT+0x11c>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d103      	bne.n	8005a9c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4a47      	ldr	r2, [pc, #284]	; (8005bb4 <UART_Start_Receive_IT+0x234>)
 8005a98:	675a      	str	r2, [r3, #116]	; 0x74
 8005a9a:	e002      	b.n	8005aa2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4a46      	ldr	r2, [pc, #280]	; (8005bb8 <UART_Start_Receive_IT+0x238>)
 8005aa0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d01a      	beq.n	8005ae0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005abe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005acc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ace:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ad2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e4      	bne.n	8005aaa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3308      	adds	r3, #8
 8005afe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005b00:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b02:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e5      	bne.n	8005ae0 <UART_Start_Receive_IT+0x160>
 8005b14:	e046      	b.n	8005ba4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1e:	d107      	bne.n	8005b30 <UART_Start_Receive_IT+0x1b0>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d103      	bne.n	8005b30 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4a24      	ldr	r2, [pc, #144]	; (8005bbc <UART_Start_Receive_IT+0x23c>)
 8005b2c:	675a      	str	r2, [r3, #116]	; 0x74
 8005b2e:	e002      	b.n	8005b36 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4a23      	ldr	r2, [pc, #140]	; (8005bc0 <UART_Start_Receive_IT+0x240>)
 8005b34:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d019      	beq.n	8005b72 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005b52:	677b      	str	r3, [r7, #116]	; 0x74
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e6      	bne.n	8005b3e <UART_Start_Receive_IT+0x1be>
 8005b70:	e018      	b.n	8005ba4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f043 0320 	orr.w	r3, r3, #32
 8005b86:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b90:	623b      	str	r3, [r7, #32]
 8005b92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	69f9      	ldr	r1, [r7, #28]
 8005b96:	6a3a      	ldr	r2, [r7, #32]
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e6      	bne.n	8005b72 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	378c      	adds	r7, #140	; 0x8c
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	080063e5 	.word	0x080063e5
 8005bb8:	08006085 	.word	0x08006085
 8005bbc:	08005ecd 	.word	0x08005ecd
 8005bc0:	08005d15 	.word	0x08005d15

08005bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b095      	sub	sp, #84	; 0x54
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005be0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bea:	643b      	str	r3, [r7, #64]	; 0x40
 8005bec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e6      	bne.n	8005bcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3308      	adds	r3, #8
 8005c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c14:	f023 0301 	bic.w	r3, r3, #1
 8005c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e3      	bne.n	8005bfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d118      	bne.n	8005c70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f023 0310 	bic.w	r3, r3, #16
 8005c52:	647b      	str	r3, [r7, #68]	; 0x44
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6979      	ldr	r1, [r7, #20]
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	613b      	str	r3, [r7, #16]
   return(result);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e6      	bne.n	8005c3e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005c84:	bf00      	nop
 8005c86:	3754      	adds	r7, #84	; 0x54
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7fb f954 	bl	8000f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cb4:	bf00      	nop
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd8:	61fb      	str	r3, [r7, #28]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	61bb      	str	r3, [r7, #24]
 8005ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6979      	ldr	r1, [r7, #20]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e6      	bne.n	8005cc4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff f96f 	bl	8004fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d0a:	bf00      	nop
 8005d0c:	3720      	adds	r7, #32
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b09c      	sub	sp, #112	; 0x70
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d2c:	2b22      	cmp	r3, #34	; 0x22
 8005d2e:	f040 80be 	bne.w	8005eae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005d40:	b2d9      	uxtb	r1, r3
 8005d42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4c:	400a      	ands	r2, r1
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f040 80a1 	bne.w	8005ebe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d90:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005da0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e6      	bne.n	8005d7c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3308      	adds	r3, #8
 8005db4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	667b      	str	r3, [r7, #100]	; 0x64
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3308      	adds	r3, #8
 8005dcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005dce:	647a      	str	r2, [r7, #68]	; 0x44
 8005dd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e5      	bne.n	8005dae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a33      	ldr	r2, [pc, #204]	; (8005ec8 <UART_RxISR_8BIT+0x1b4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d01f      	beq.n	8005e40 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d018      	beq.n	8005e40 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e22:	663b      	str	r3, [r7, #96]	; 0x60
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e6      	bne.n	8005e0e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d12e      	bne.n	8005ea6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0310 	bic.w	r3, r3, #16
 8005e62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e6c:	61fb      	str	r3, [r7, #28]
 8005e6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	69b9      	ldr	r1, [r7, #24]
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	617b      	str	r3, [r7, #20]
   return(result);
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e6      	bne.n	8005e4e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	2b10      	cmp	r3, #16
 8005e8c:	d103      	bne.n	8005e96 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2210      	movs	r2, #16
 8005e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff f8ac 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ea4:	e00b      	b.n	8005ebe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fb f862 	bl	8000f70 <HAL_UART_RxCpltCallback>
}
 8005eac:	e007      	b.n	8005ebe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0208 	orr.w	r2, r2, #8
 8005ebc:	619a      	str	r2, [r3, #24]
}
 8005ebe:	bf00      	nop
 8005ec0:	3770      	adds	r7, #112	; 0x70
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	40008000 	.word	0x40008000

08005ecc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b09c      	sub	sp, #112	; 0x70
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005eda:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ee4:	2b22      	cmp	r3, #34	; 0x22
 8005ee6:	f040 80be 	bne.w	8006066 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005efa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005efe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005f02:	4013      	ands	r3, r2
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0e:	1c9a      	adds	r2, r3, #2
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f040 80a1 	bne.w	8006076 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f48:	667b      	str	r3, [r7, #100]	; 0x64
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f52:	657b      	str	r3, [r7, #84]	; 0x54
 8005f54:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1e6      	bne.n	8005f34 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	f023 0301 	bic.w	r3, r3, #1
 8005f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3308      	adds	r3, #8
 8005f84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f86:	643a      	str	r2, [r7, #64]	; 0x40
 8005f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e5      	bne.n	8005f66 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a33      	ldr	r2, [pc, #204]	; (8006080 <UART_RxISR_16BIT+0x1b4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d01f      	beq.n	8005ff8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d018      	beq.n	8005ff8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fec:	e841 2300 	strex	r3, r2, [r1]
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e6      	bne.n	8005fc6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d12e      	bne.n	800605e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	60bb      	str	r3, [r7, #8]
   return(result);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f023 0310 	bic.w	r3, r3, #16
 800601a:	65bb      	str	r3, [r7, #88]	; 0x58
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	6979      	ldr	r1, [r7, #20]
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	e841 2300 	strex	r3, r2, [r1]
 8006030:	613b      	str	r3, [r7, #16]
   return(result);
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e6      	bne.n	8006006 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	f003 0310 	and.w	r3, r3, #16
 8006042:	2b10      	cmp	r3, #16
 8006044:	d103      	bne.n	800604e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2210      	movs	r2, #16
 800604c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fe ffd0 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800605c:	e00b      	b.n	8006076 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7fa ff86 	bl	8000f70 <HAL_UART_RxCpltCallback>
}
 8006064:	e007      	b.n	8006076 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699a      	ldr	r2, [r3, #24]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0208 	orr.w	r2, r2, #8
 8006074:	619a      	str	r2, [r3, #24]
}
 8006076:	bf00      	nop
 8006078:	3770      	adds	r7, #112	; 0x70
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40008000 	.word	0x40008000

08006084 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b0ac      	sub	sp, #176	; 0xb0
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006092:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ba:	2b22      	cmp	r3, #34	; 0x22
 80060bc:	f040 8182 	bne.w	80063c4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80060c6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060ca:	e125      	b.n	8006318 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80060da:	b2d9      	uxtb	r1, r3
 80060dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e6:	400a      	ands	r2, r1
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	2b00      	cmp	r3, #0
 800611c:	d053      	beq.n	80061c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800611e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d011      	beq.n	800614e <UART_RxISR_8BIT_FIFOEN+0xca>
 800612a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800612e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2201      	movs	r2, #1
 800613c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006144:	f043 0201 	orr.w	r2, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800614e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d011      	beq.n	800617e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800615a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00b      	beq.n	800617e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2202      	movs	r2, #2
 800616c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006174:	f043 0204 	orr.w	r2, r3, #4
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800617e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	d011      	beq.n	80061ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800618a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00b      	beq.n	80061ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2204      	movs	r2, #4
 800619c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a4:	f043 0202 	orr.w	r2, r3, #2
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d006      	beq.n	80061c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7fa fecf 	bl	8000f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f040 80a2 	bne.w	8006318 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80061e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061f8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80061fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e4      	bne.n	80061d4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800621a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800621c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006220:	f023 0301 	bic.w	r3, r3, #1
 8006224:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3308      	adds	r3, #8
 800622e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006232:	66ba      	str	r2, [r7, #104]	; 0x68
 8006234:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006236:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006238:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800623a:	e841 2300 	strex	r3, r2, [r1]
 800623e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006240:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1e1      	bne.n	800620a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2220      	movs	r2, #32
 800624a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a5f      	ldr	r2, [pc, #380]	; (80063dc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d021      	beq.n	80062a8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d01a      	beq.n	80062a8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006282:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006294:	657b      	str	r3, [r7, #84]	; 0x54
 8006296:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800629a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e4      	bne.n	8006272 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d130      	bne.n	8006312 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	f023 0310 	bic.w	r3, r3, #16
 80062ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062d8:	643b      	str	r3, [r7, #64]	; 0x40
 80062da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e4      	bne.n	80062b6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f003 0310 	and.w	r3, r3, #16
 80062f6:	2b10      	cmp	r3, #16
 80062f8:	d103      	bne.n	8006302 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2210      	movs	r2, #16
 8006300:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006308:	4619      	mov	r1, r3
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fe fe76 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
 8006310:	e002      	b.n	8006318 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fa fe2c 	bl	8000f70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006318:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800631c:	2b00      	cmp	r3, #0
 800631e:	d006      	beq.n	800632e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b00      	cmp	r3, #0
 800632a:	f47f aecf 	bne.w	80060cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006334:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006338:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800633c:	2b00      	cmp	r3, #0
 800633e:	d049      	beq.n	80063d4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006346:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800634a:	429a      	cmp	r2, r3
 800634c:	d242      	bcs.n	80063d4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3308      	adds	r3, #8
 8006354:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	e853 3f00 	ldrex	r3, [r3]
 800635c:	61fb      	str	r3, [r7, #28]
   return(result);
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3308      	adds	r3, #8
 800636e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006372:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006374:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e3      	bne.n	800634e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a15      	ldr	r2, [pc, #84]	; (80063e0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800638a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	60bb      	str	r3, [r7, #8]
   return(result);
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f043 0320 	orr.w	r3, r3, #32
 80063a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063ae:	61bb      	str	r3, [r7, #24]
 80063b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6979      	ldr	r1, [r7, #20]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	613b      	str	r3, [r7, #16]
   return(result);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e4      	bne.n	800638c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063c2:	e007      	b.n	80063d4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0208 	orr.w	r2, r2, #8
 80063d2:	619a      	str	r2, [r3, #24]
}
 80063d4:	bf00      	nop
 80063d6:	37b0      	adds	r7, #176	; 0xb0
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40008000 	.word	0x40008000
 80063e0:	08005d15 	.word	0x08005d15

080063e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b0ae      	sub	sp, #184	; 0xb8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80063f2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800641a:	2b22      	cmp	r3, #34	; 0x22
 800641c:	f040 8186 	bne.w	800672c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006426:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800642a:	e129      	b.n	8006680 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800643e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006442:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006446:	4013      	ands	r3, r2
 8006448:	b29a      	uxth	r2, r3
 800644a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800644e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006454:	1c9a      	adds	r2, r3, #2
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006460:	b29b      	uxth	r3, r3
 8006462:	3b01      	subs	r3, #1
 8006464:	b29a      	uxth	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006476:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	2b00      	cmp	r3, #0
 8006480:	d053      	beq.n	800652a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006482:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d011      	beq.n	80064b2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800648e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00b      	beq.n	80064b2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2201      	movs	r2, #1
 80064a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a8:	f043 0201 	orr.w	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d011      	beq.n	80064e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80064be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00b      	beq.n	80064e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2202      	movs	r2, #2
 80064d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d8:	f043 0204 	orr.w	r2, r3, #4
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d011      	beq.n	8006512 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80064ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00b      	beq.n	8006512 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2204      	movs	r2, #4
 8006500:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006508:	f043 0202 	orr.w	r2, r3, #2
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006518:	2b00      	cmp	r3, #0
 800651a:	d006      	beq.n	800652a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7fa fd1d 	bl	8000f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006530:	b29b      	uxth	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 80a4 	bne.w	8006680 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006546:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800654c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	461a      	mov	r2, r3
 8006556:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800655a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800655e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006560:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006562:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800656c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e2      	bne.n	8006538 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3308      	adds	r3, #8
 8006578:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3308      	adds	r3, #8
 8006596:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800659a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800659c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e1      	bne.n	8006572 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a5f      	ldr	r2, [pc, #380]	; (8006744 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d021      	beq.n	8006610 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d01a      	beq.n	8006610 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80065fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80065fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006602:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006604:	e841 2300 	strex	r3, r2, [r1]
 8006608:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800660a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e4      	bne.n	80065da <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006614:	2b01      	cmp	r3, #1
 8006616:	d130      	bne.n	800667a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800662c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662e:	f023 0310 	bic.w	r3, r3, #16
 8006632:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006640:	647b      	str	r3, [r7, #68]	; 0x44
 8006642:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800664e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e4      	bne.n	800661e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	f003 0310 	and.w	r3, r3, #16
 800665e:	2b10      	cmp	r3, #16
 8006660:	d103      	bne.n	800666a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2210      	movs	r2, #16
 8006668:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fe fcc2 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
 8006678:	e002      	b.n	8006680 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fa fc78 	bl	8000f70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006680:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006684:	2b00      	cmp	r3, #0
 8006686:	d006      	beq.n	8006696 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006688:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b00      	cmp	r3, #0
 8006692:	f47f aecb 	bne.w	800642c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800669c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80066a0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d049      	beq.n	800673c <UART_RxISR_16BIT_FIFOEN+0x358>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80066ae:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d242      	bcs.n	800673c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3308      	adds	r3, #8
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	623b      	str	r3, [r7, #32]
   return(result);
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3308      	adds	r3, #8
 80066d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80066da:	633a      	str	r2, [r7, #48]	; 0x30
 80066dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e3      	bne.n	80066b6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a15      	ldr	r2, [pc, #84]	; (8006748 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80066f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	60fb      	str	r3, [r7, #12]
   return(result);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f043 0320 	orr.w	r3, r3, #32
 8006708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	461a      	mov	r2, r3
 8006712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006716:	61fb      	str	r3, [r7, #28]
 8006718:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671a:	69b9      	ldr	r1, [r7, #24]
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	e841 2300 	strex	r3, r2, [r1]
 8006722:	617b      	str	r3, [r7, #20]
   return(result);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1e4      	bne.n	80066f4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800672a:	e007      	b.n	800673c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0208 	orr.w	r2, r2, #8
 800673a:	619a      	str	r2, [r3, #24]
}
 800673c:	bf00      	nop
 800673e:	37b8      	adds	r7, #184	; 0xb8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40008000 	.word	0x40008000
 8006748:	08005ecd 	.word	0x08005ecd

0800674c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <HAL_UARTEx_DisableFifoMode+0x16>
 800679a:	2302      	movs	r3, #2
 800679c:	e027      	b.n	80067ee <HAL_UARTEx_DisableFifoMode+0x66>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2224      	movs	r2, #36	; 0x24
 80067aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0201 	bic.w	r2, r2, #1
 80067c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800680e:	2302      	movs	r3, #2
 8006810:	e02d      	b.n	800686e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2224      	movs	r2, #36	; 0x24
 800681e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0201 	bic.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f850 	bl	80068f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2220      	movs	r2, #32
 8006860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800688a:	2302      	movs	r3, #2
 800688c:	e02d      	b.n	80068ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2224      	movs	r2, #36	; 0x24
 800689a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0201 	bic.w	r2, r2, #1
 80068b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f812 	bl	80068f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006900:	2b00      	cmp	r3, #0
 8006902:	d108      	bne.n	8006916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006914:	e031      	b.n	800697a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006916:	2308      	movs	r3, #8
 8006918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800691a:	2308      	movs	r3, #8
 800691c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	0e5b      	lsrs	r3, r3, #25
 8006926:	b2db      	uxtb	r3, r3
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	0f5b      	lsrs	r3, r3, #29
 8006936:	b2db      	uxtb	r3, r3
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	7b3a      	ldrb	r2, [r7, #12]
 8006942:	4911      	ldr	r1, [pc, #68]	; (8006988 <UARTEx_SetNbDataToProcess+0x94>)
 8006944:	5c8a      	ldrb	r2, [r1, r2]
 8006946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800694a:	7b3a      	ldrb	r2, [r7, #12]
 800694c:	490f      	ldr	r1, [pc, #60]	; (800698c <UARTEx_SetNbDataToProcess+0x98>)
 800694e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006950:	fb93 f3f2 	sdiv	r3, r3, r2
 8006954:	b29a      	uxth	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	7b7a      	ldrb	r2, [r7, #13]
 8006960:	4909      	ldr	r1, [pc, #36]	; (8006988 <UARTEx_SetNbDataToProcess+0x94>)
 8006962:	5c8a      	ldrb	r2, [r1, r2]
 8006964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006968:	7b7a      	ldrb	r2, [r7, #13]
 800696a:	4908      	ldr	r1, [pc, #32]	; (800698c <UARTEx_SetNbDataToProcess+0x98>)
 800696c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800696e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006972:	b29a      	uxth	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	0800b4d4 	.word	0x0800b4d4
 800698c:	0800b4dc 	.word	0x0800b4dc

08006990 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80069a0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80069a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80069c6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80069ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	43db      	mvns	r3, r3
 80069da:	b29b      	uxth	r3, r3
 80069dc:	4013      	ands	r3, r2
 80069de:	b29a      	uxth	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	1d3b      	adds	r3, r7, #4
 80069fe:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b09d      	sub	sp, #116	; 0x74
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a56:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	78db      	ldrb	r3, [r3, #3]
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d81f      	bhi.n	8006aa2 <USB_ActivateEndpoint+0x72>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <USB_ActivateEndpoint+0x38>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a79 	.word	0x08006a79
 8006a6c:	08006a95 	.word	0x08006a95
 8006a70:	08006aab 	.word	0x08006aab
 8006a74:	08006a87 	.word	0x08006a87
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006a78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006a84:	e012      	b.n	8006aac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006a86:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a8a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006a8e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006a92:	e00b      	b.n	8006aac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006a94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006aa0:	e004      	b.n	8006aac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006aa8:	e000      	b.n	8006aac <USB_ActivateEndpoint+0x7c>
      break;
 8006aaa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	441a      	add	r2, r3
 8006ab6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	b21b      	sxth	r3, r3
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae6:	b21a      	sxth	r2, r3
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	b21b      	sxth	r3, r3
 8006aee:	4313      	orrs	r3, r2
 8006af0:	b21b      	sxth	r3, r3
 8006af2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	441a      	add	r2, r3
 8006b00:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	7b1b      	ldrb	r3, [r3, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 8178 	bne.w	8006e12 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	785b      	ldrb	r3, [r3, #1]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 8084 	beq.w	8006c34 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	61bb      	str	r3, [r7, #24]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	00da      	lsls	r2, r3, #3
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	88db      	ldrh	r3, [r3, #6]
 8006b54:	085b      	lsrs	r3, r3, #1
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	827b      	strh	r3, [r7, #18]
 8006b6e:	8a7b      	ldrh	r3, [r7, #18]
 8006b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d01b      	beq.n	8006bb0 <USB_ActivateEndpoint+0x180>
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8e:	823b      	strh	r3, [r7, #16]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	441a      	add	r2, r3
 8006b9a:	8a3b      	ldrh	r3, [r7, #16]
 8006b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	78db      	ldrb	r3, [r3, #3]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d020      	beq.n	8006bfa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bce:	81bb      	strh	r3, [r7, #12]
 8006bd0:	89bb      	ldrh	r3, [r7, #12]
 8006bd2:	f083 0320 	eor.w	r3, r3, #32
 8006bd6:	81bb      	strh	r3, [r7, #12]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	441a      	add	r2, r3
 8006be2:	89bb      	ldrh	r3, [r7, #12]
 8006be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	8013      	strh	r3, [r2, #0]
 8006bf8:	e2d5      	b.n	80071a6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c10:	81fb      	strh	r3, [r7, #14]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	441a      	add	r2, r3
 8006c1c:	89fb      	ldrh	r3, [r7, #14]
 8006c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	8013      	strh	r3, [r2, #0]
 8006c32:	e2b8      	b.n	80071a6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	633b      	str	r3, [r7, #48]	; 0x30
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	461a      	mov	r2, r3
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	4413      	add	r3, r2
 8006c46:	633b      	str	r3, [r7, #48]	; 0x30
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	00da      	lsls	r2, r3, #3
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	4413      	add	r3, r2
 8006c52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	88db      	ldrh	r3, [r3, #6]
 8006c5c:	085b      	lsrs	r3, r3, #1
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c66:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	461a      	mov	r2, r3
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	4413      	add	r3, r2
 8006c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	00da      	lsls	r2, r3, #3
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	4413      	add	r3, r2
 8006c86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	801a      	strh	r2, [r3, #0]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ca2:	d91d      	bls.n	8006ce0 <USB_ActivateEndpoint+0x2b0>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f003 031f 	and.w	r3, r3, #31
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d102      	bne.n	8006cbe <USB_ActivateEndpoint+0x28e>
 8006cb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	029b      	lsls	r3, r3, #10
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	801a      	strh	r2, [r3, #0]
 8006cde:	e026      	b.n	8006d2e <USB_ActivateEndpoint+0x2fe>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10a      	bne.n	8006cfe <USB_ActivateEndpoint+0x2ce>
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	801a      	strh	r2, [r3, #0]
 8006cfc:	e017      	b.n	8006d2e <USB_ActivateEndpoint+0x2fe>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d002      	beq.n	8006d18 <USB_ActivateEndpoint+0x2e8>
 8006d12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d14:	3301      	adds	r3, #1
 8006d16:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	029b      	lsls	r3, r3, #10
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	4313      	orrs	r3, r2
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006d3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d01b      	beq.n	8006d7e <USB_ActivateEndpoint+0x34e>
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5c:	843b      	strh	r3, [r7, #32]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	441a      	add	r2, r3
 8006d68:	8c3b      	ldrh	r3, [r7, #32]
 8006d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d124      	bne.n	8006dd0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9c:	83bb      	strh	r3, [r7, #28]
 8006d9e:	8bbb      	ldrh	r3, [r7, #28]
 8006da0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006da4:	83bb      	strh	r3, [r7, #28]
 8006da6:	8bbb      	ldrh	r3, [r7, #28]
 8006da8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006dac:	83bb      	strh	r3, [r7, #28]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	441a      	add	r2, r3
 8006db8:	8bbb      	ldrh	r3, [r7, #28]
 8006dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	8013      	strh	r3, [r2, #0]
 8006dce:	e1ea      	b.n	80071a6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de6:	83fb      	strh	r3, [r7, #30]
 8006de8:	8bfb      	ldrh	r3, [r7, #30]
 8006dea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006dee:	83fb      	strh	r3, [r7, #30]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	441a      	add	r2, r3
 8006dfa:	8bfb      	ldrh	r3, [r7, #30]
 8006dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	8013      	strh	r3, [r2, #0]
 8006e10:	e1c9      	b.n	80071a6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	78db      	ldrb	r3, [r3, #3]
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d11e      	bne.n	8006e58 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	441a      	add	r2, r3
 8006e3e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e4a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	8013      	strh	r3, [r2, #0]
 8006e56:	e01d      	b.n	8006e94 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	441a      	add	r2, r3
 8006e7c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ea4:	4413      	add	r3, r2
 8006ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	00da      	lsls	r2, r3, #3
 8006eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	891b      	ldrh	r3, [r3, #8]
 8006ebc:	085b      	lsrs	r3, r3, #1
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ec6:	801a      	strh	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	657b      	str	r3, [r7, #84]	; 0x54
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ed8:	4413      	add	r3, r2
 8006eda:	657b      	str	r3, [r7, #84]	; 0x54
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	00da      	lsls	r2, r3, #3
 8006ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006eea:	653b      	str	r3, [r7, #80]	; 0x50
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	895b      	ldrh	r3, [r3, #10]
 8006ef0:	085b      	lsrs	r3, r3, #1
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006efa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	785b      	ldrb	r3, [r3, #1]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f040 8093 	bne.w	800702c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006f16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d01b      	beq.n	8006f5a <USB_ActivateEndpoint+0x52a>
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f38:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	441a      	add	r2, r3
 8006f44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006f68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d01b      	beq.n	8006faa <USB_ActivateEndpoint+0x57a>
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f88:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	441a      	add	r2, r3
 8006f94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc0:	873b      	strh	r3, [r7, #56]	; 0x38
 8006fc2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006fc4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fc8:	873b      	strh	r3, [r7, #56]	; 0x38
 8006fca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006fcc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fd0:	873b      	strh	r3, [r7, #56]	; 0x38
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	441a      	add	r2, r3
 8006fdc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007008:	86fb      	strh	r3, [r7, #54]	; 0x36
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	441a      	add	r2, r3
 8007014:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800701a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800701e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007026:	b29b      	uxth	r3, r3
 8007028:	8013      	strh	r3, [r2, #0]
 800702a:	e0bc      	b.n	80071a6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800703c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01d      	beq.n	8007084 <USB_ActivateEndpoint+0x654>
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800705a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	441a      	add	r2, r3
 800706c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800707c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007080:	b29b      	uxth	r3, r3
 8007082:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007094:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01d      	beq.n	80070dc <USB_ActivateEndpoint+0x6ac>
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	441a      	add	r2, r3
 80070c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80070c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070d8:	b29b      	uxth	r3, r3
 80070da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	78db      	ldrb	r3, [r3, #3]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d024      	beq.n	800712e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80070fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007102:	f083 0320 	eor.w	r3, r3, #32
 8007106:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	441a      	add	r2, r3
 8007114:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800711c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007128:	b29b      	uxth	r3, r3
 800712a:	8013      	strh	r3, [r2, #0]
 800712c:	e01d      	b.n	800716a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007144:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	441a      	add	r2, r3
 8007152:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800715e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007166:	b29b      	uxth	r3, r3
 8007168:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	b29b      	uxth	r3, r3
 8007178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800717c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007180:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	441a      	add	r2, r3
 800718e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800719a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800719e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80071a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3774      	adds	r7, #116	; 0x74
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop

080071b8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b08d      	sub	sp, #52	; 0x34
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	7b1b      	ldrb	r3, [r3, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f040 808e 	bne.w	80072e8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	785b      	ldrb	r3, [r3, #1]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d044      	beq.n	800725e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	81bb      	strh	r3, [r7, #12]
 80071e2:	89bb      	ldrh	r3, [r7, #12]
 80071e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01b      	beq.n	8007224 <USB_DeactivateEndpoint+0x6c>
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007202:	817b      	strh	r3, [r7, #10]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	441a      	add	r2, r3
 800720e:	897b      	ldrh	r3, [r7, #10]
 8007210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800721c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007220:	b29b      	uxth	r3, r3
 8007222:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	b29b      	uxth	r3, r3
 8007232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800723a:	813b      	strh	r3, [r7, #8]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	441a      	add	r2, r3
 8007246:	893b      	ldrh	r3, [r7, #8]
 8007248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800724c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007258:	b29b      	uxth	r3, r3
 800725a:	8013      	strh	r3, [r2, #0]
 800725c:	e192      	b.n	8007584 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	827b      	strh	r3, [r7, #18]
 800726c:	8a7b      	ldrh	r3, [r7, #18]
 800726e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d01b      	beq.n	80072ae <USB_DeactivateEndpoint+0xf6>
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	b29b      	uxth	r3, r3
 8007284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728c:	823b      	strh	r3, [r7, #16]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	441a      	add	r2, r3
 8007298:	8a3b      	ldrh	r3, [r7, #16]
 800729a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800729e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c4:	81fb      	strh	r3, [r7, #14]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	441a      	add	r2, r3
 80072d0:	89fb      	ldrh	r3, [r7, #14]
 80072d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	8013      	strh	r3, [r2, #0]
 80072e6:	e14d      	b.n	8007584 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	785b      	ldrb	r3, [r3, #1]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f040 80a5 	bne.w	800743c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	843b      	strh	r3, [r7, #32]
 8007300:	8c3b      	ldrh	r3, [r7, #32]
 8007302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d01b      	beq.n	8007342 <USB_DeactivateEndpoint+0x18a>
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800731c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007320:	83fb      	strh	r3, [r7, #30]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	441a      	add	r2, r3
 800732c:	8bfb      	ldrh	r3, [r7, #30]
 800732e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007336:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800733a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733e:	b29b      	uxth	r3, r3
 8007340:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	83bb      	strh	r3, [r7, #28]
 8007350:	8bbb      	ldrh	r3, [r7, #28]
 8007352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007356:	2b00      	cmp	r3, #0
 8007358:	d01b      	beq.n	8007392 <USB_DeactivateEndpoint+0x1da>
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800736c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007370:	837b      	strh	r3, [r7, #26]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	441a      	add	r2, r3
 800737c:	8b7b      	ldrh	r3, [r7, #26]
 800737e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800738a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800738e:	b29b      	uxth	r3, r3
 8007390:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a8:	833b      	strh	r3, [r7, #24]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	441a      	add	r2, r3
 80073b4:	8b3b      	ldrh	r3, [r7, #24]
 80073b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e0:	82fb      	strh	r3, [r7, #22]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	441a      	add	r2, r3
 80073ec:	8afb      	ldrh	r3, [r7, #22]
 80073ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073fe:	b29b      	uxth	r3, r3
 8007400:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b29b      	uxth	r3, r3
 8007410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007418:	82bb      	strh	r3, [r7, #20]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	441a      	add	r2, r3
 8007424:	8abb      	ldrh	r3, [r7, #20]
 8007426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800742a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800742e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007436:	b29b      	uxth	r3, r3
 8007438:	8013      	strh	r3, [r2, #0]
 800743a:	e0a3      	b.n	8007584 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800744a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800744c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01b      	beq.n	800748c <USB_DeactivateEndpoint+0x2d4>
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	b29b      	uxth	r3, r3
 8007462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	441a      	add	r2, r3
 8007476:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800747c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007480:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007488:	b29b      	uxth	r3, r3
 800748a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	857b      	strh	r3, [r7, #42]	; 0x2a
 800749a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800749c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01b      	beq.n	80074dc <USB_DeactivateEndpoint+0x324>
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ba:	853b      	strh	r3, [r7, #40]	; 0x28
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	441a      	add	r2, r3
 80074c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80074c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074d8:	b29b      	uxth	r3, r3
 80074da:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	441a      	add	r2, r3
 80074fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800750c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007510:	b29b      	uxth	r3, r3
 8007512:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800752a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	441a      	add	r2, r3
 8007536:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800753c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007548:	b29b      	uxth	r3, r3
 800754a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	b29b      	uxth	r3, r3
 800755a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800755e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007562:	847b      	strh	r3, [r7, #34]	; 0x22
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	441a      	add	r2, r3
 800756e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800757c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007580:	b29b      	uxth	r3, r3
 8007582:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3734      	adds	r7, #52	; 0x34
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b0c2      	sub	sp, #264	; 0x108
 8007596:	af00      	add	r7, sp, #0
 8007598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800759c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075a0:	6018      	str	r0, [r3, #0]
 80075a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075aa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	785b      	ldrb	r3, [r3, #1]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	f040 86b7 	bne.w	800832c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80075be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d908      	bls.n	80075ec <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80075da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80075ea:	e007      	b.n	80075fc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80075ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80075fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	7b1b      	ldrb	r3, [r3, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d13a      	bne.n	8007682 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800760c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6959      	ldr	r1, [r3, #20]
 8007618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800761c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	88da      	ldrh	r2, [r3, #6]
 8007624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007628:	b29b      	uxth	r3, r3
 800762a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800762e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007632:	6800      	ldr	r0, [r0, #0]
 8007634:	f001 fc98 	bl	8008f68 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007652:	b29b      	uxth	r3, r3
 8007654:	461a      	mov	r2, r3
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	4413      	add	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
 800765c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	00da      	lsls	r2, r3, #3
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	4413      	add	r3, r2
 800766e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	f000 be1f 	b.w	80082c0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	78db      	ldrb	r3, [r3, #3]
 800768e:	2b02      	cmp	r3, #2
 8007690:	f040 8462 	bne.w	8007f58 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6a1a      	ldr	r2, [r3, #32]
 80076a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	f240 83df 	bls.w	8007e70 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80076b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80076dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	441a      	add	r2, r3
 80076f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80076fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007702:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800770a:	b29b      	uxth	r3, r3
 800770c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800770e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6a1a      	ldr	r2, [r3, #32]
 800771a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800771e:	1ad2      	subs	r2, r2, r3
 8007720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800772c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	b29b      	uxth	r3, r3
 800774a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 81c7 	beq.w	8007ae2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007758:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	633b      	str	r3, [r7, #48]	; 0x30
 8007760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	785b      	ldrb	r3, [r3, #1]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d177      	bne.n	8007860 <USB_EPStartXfer+0x2ce>
 8007770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	62bb      	str	r3, [r7, #40]	; 0x28
 800777c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007780:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800778a:	b29b      	uxth	r3, r3
 800778c:	461a      	mov	r2, r3
 800778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007790:	4413      	add	r3, r2
 8007792:	62bb      	str	r3, [r7, #40]	; 0x28
 8007794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	00da      	lsls	r2, r3, #3
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	4413      	add	r3, r2
 80077a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	801a      	strh	r2, [r3, #0]
 80077bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c0:	2b3e      	cmp	r3, #62	; 0x3e
 80077c2:	d921      	bls.n	8007808 <USB_EPStartXfer+0x276>
 80077c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c8:	095b      	lsrs	r3, r3, #5
 80077ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d104      	bne.n	80077e4 <USB_EPStartXfer+0x252>
 80077da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077de:	3b01      	subs	r3, #1
 80077e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	029b      	lsls	r3, r3, #10
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	4313      	orrs	r3, r2
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007800:	b29a      	uxth	r2, r3
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	801a      	strh	r2, [r3, #0]
 8007806:	e050      	b.n	80078aa <USB_EPStartXfer+0x318>
 8007808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <USB_EPStartXfer+0x294>
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800781a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800781e:	b29a      	uxth	r2, r3
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	801a      	strh	r2, [r3, #0]
 8007824:	e041      	b.n	80078aa <USB_EPStartXfer+0x318>
 8007826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800782a:	085b      	lsrs	r3, r3, #1
 800782c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d004      	beq.n	8007846 <USB_EPStartXfer+0x2b4>
 800783c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007840:	3301      	adds	r3, #1
 8007842:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	b29a      	uxth	r2, r3
 800784c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007850:	b29b      	uxth	r3, r3
 8007852:	029b      	lsls	r3, r3, #10
 8007854:	b29b      	uxth	r3, r3
 8007856:	4313      	orrs	r3, r2
 8007858:	b29a      	uxth	r2, r3
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	801a      	strh	r2, [r3, #0]
 800785e:	e024      	b.n	80078aa <USB_EPStartXfer+0x318>
 8007860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d11c      	bne.n	80078aa <USB_EPStartXfer+0x318>
 8007870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800787e:	b29b      	uxth	r3, r3
 8007880:	461a      	mov	r2, r3
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	4413      	add	r3, r2
 8007886:	633b      	str	r3, [r7, #48]	; 0x30
 8007888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	00da      	lsls	r2, r3, #3
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	4413      	add	r3, r2
 800789a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800789e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	895b      	ldrh	r3, [r3, #10]
 80078b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6959      	ldr	r1, [r3, #20]
 80078c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80078d0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80078d4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80078d8:	6800      	ldr	r0, [r0, #0]
 80078da:	f001 fb45 	bl	8008f68 <USB_WritePMA>
            ep->xfer_buff += len;
 80078de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	695a      	ldr	r2, [r3, #20]
 80078ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ee:	441a      	add	r2, r3
 80078f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80078fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6a1a      	ldr	r2, [r3, #32]
 8007908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	429a      	cmp	r2, r3
 8007916:	d90f      	bls.n	8007938 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6a1a      	ldr	r2, [r3, #32]
 8007924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007928:	1ad2      	subs	r2, r2, r3
 800792a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	621a      	str	r2, [r3, #32]
 8007936:	e00e      	b.n	8007956 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800794c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2200      	movs	r2, #0
 8007954:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800795a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	785b      	ldrb	r3, [r3, #1]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d177      	bne.n	8007a56 <USB_EPStartXfer+0x4c4>
 8007966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800796a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	61bb      	str	r3, [r7, #24]
 8007972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007980:	b29b      	uxth	r3, r3
 8007982:	461a      	mov	r2, r3
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	4413      	add	r3, r2
 8007988:	61bb      	str	r3, [r7, #24]
 800798a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	00da      	lsls	r2, r3, #3
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	4413      	add	r3, r2
 800799c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079a0:	617b      	str	r3, [r7, #20]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	801a      	strh	r2, [r3, #0]
 80079b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079b6:	2b3e      	cmp	r3, #62	; 0x3e
 80079b8:	d921      	bls.n	80079fe <USB_EPStartXfer+0x46c>
 80079ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c8:	f003 031f 	and.w	r3, r3, #31
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d104      	bne.n	80079da <USB_EPStartXfer+0x448>
 80079d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079d4:	3b01      	subs	r3, #1
 80079d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	b29a      	uxth	r2, r3
 80079e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	029b      	lsls	r3, r3, #10
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	4313      	orrs	r3, r2
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	801a      	strh	r2, [r3, #0]
 80079fc:	e056      	b.n	8007aac <USB_EPStartXfer+0x51a>
 80079fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10a      	bne.n	8007a1c <USB_EPStartXfer+0x48a>
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	801a      	strh	r2, [r3, #0]
 8007a1a:	e047      	b.n	8007aac <USB_EPStartXfer+0x51a>
 8007a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a20:	085b      	lsrs	r3, r3, #1
 8007a22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d004      	beq.n	8007a3c <USB_EPStartXfer+0x4aa>
 8007a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a36:	3301      	adds	r3, #1
 8007a38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	029b      	lsls	r3, r3, #10
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	801a      	strh	r2, [r3, #0]
 8007a54:	e02a      	b.n	8007aac <USB_EPStartXfer+0x51a>
 8007a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	785b      	ldrb	r3, [r3, #1]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d122      	bne.n	8007aac <USB_EPStartXfer+0x51a>
 8007a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	623b      	str	r3, [r7, #32]
 8007a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	461a      	mov	r2, r3
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	4413      	add	r3, r2
 8007a88:	623b      	str	r3, [r7, #32]
 8007a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	00da      	lsls	r2, r3, #3
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007aa0:	61fb      	str	r3, [r7, #28]
 8007aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	891b      	ldrh	r3, [r3, #8]
 8007ab8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6959      	ldr	r1, [r3, #20]
 8007ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007ad2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007ad6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007ada:	6800      	ldr	r0, [r0, #0]
 8007adc:	f001 fa44 	bl	8008f68 <USB_WritePMA>
 8007ae0:	e3ee      	b.n	80082c0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	785b      	ldrb	r3, [r3, #1]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d177      	bne.n	8007be2 <USB_EPStartXfer+0x650>
 8007af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	461a      	mov	r2, r3
 8007b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b12:	4413      	add	r3, r2
 8007b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	00da      	lsls	r2, r3, #3
 8007b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b26:	4413      	add	r3, r2
 8007b28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8007b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b3c:	801a      	strh	r2, [r3, #0]
 8007b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b42:	2b3e      	cmp	r3, #62	; 0x3e
 8007b44:	d921      	bls.n	8007b8a <USB_EPStartXfer+0x5f8>
 8007b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b4a:	095b      	lsrs	r3, r3, #5
 8007b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b54:	f003 031f 	and.w	r3, r3, #31
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d104      	bne.n	8007b66 <USB_EPStartXfer+0x5d4>
 8007b5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b60:	3b01      	subs	r3, #1
 8007b62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	029b      	lsls	r3, r3, #10
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	4313      	orrs	r3, r2
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b86:	801a      	strh	r2, [r3, #0]
 8007b88:	e056      	b.n	8007c38 <USB_EPStartXfer+0x6a6>
 8007b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10a      	bne.n	8007ba8 <USB_EPStartXfer+0x616>
 8007b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ba4:	801a      	strh	r2, [r3, #0]
 8007ba6:	e047      	b.n	8007c38 <USB_EPStartXfer+0x6a6>
 8007ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bac:	085b      	lsrs	r3, r3, #1
 8007bae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d004      	beq.n	8007bc8 <USB_EPStartXfer+0x636>
 8007bbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	029b      	lsls	r3, r3, #10
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bde:	801a      	strh	r2, [r3, #0]
 8007be0:	e02a      	b.n	8007c38 <USB_EPStartXfer+0x6a6>
 8007be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	785b      	ldrb	r3, [r3, #1]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d122      	bne.n	8007c38 <USB_EPStartXfer+0x6a6>
 8007bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	653b      	str	r3, [r7, #80]	; 0x50
 8007bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	461a      	mov	r2, r3
 8007c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c12:	4413      	add	r3, r2
 8007c14:	653b      	str	r3, [r7, #80]	; 0x50
 8007c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	00da      	lsls	r2, r3, #3
 8007c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c26:	4413      	add	r3, r2
 8007c28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	891b      	ldrh	r3, [r3, #8]
 8007c44:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6959      	ldr	r1, [r3, #20]
 8007c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c5e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007c62:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007c66:	6800      	ldr	r0, [r0, #0]
 8007c68:	f001 f97e 	bl	8008f68 <USB_WritePMA>
            ep->xfer_buff += len;
 8007c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	695a      	ldr	r2, [r3, #20]
 8007c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c7c:	441a      	add	r2, r3
 8007c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6a1a      	ldr	r2, [r3, #32]
 8007c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d90f      	bls.n	8007cc6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6a1a      	ldr	r2, [r3, #32]
 8007cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb6:	1ad2      	subs	r2, r2, r3
 8007cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	621a      	str	r2, [r3, #32]
 8007cc4:	e00e      	b.n	8007ce4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	643b      	str	r3, [r7, #64]	; 0x40
 8007cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	785b      	ldrb	r3, [r3, #1]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d177      	bne.n	8007df0 <USB_EPStartXfer+0x85e>
 8007d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d20:	4413      	add	r3, r2
 8007d22:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	00da      	lsls	r2, r3, #3
 8007d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d34:	4413      	add	r3, r2
 8007d36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4a:	801a      	strh	r2, [r3, #0]
 8007d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d50:	2b3e      	cmp	r3, #62	; 0x3e
 8007d52:	d921      	bls.n	8007d98 <USB_EPStartXfer+0x806>
 8007d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d58:	095b      	lsrs	r3, r3, #5
 8007d5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d62:	f003 031f 	and.w	r3, r3, #31
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d104      	bne.n	8007d74 <USB_EPStartXfer+0x7e2>
 8007d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	029b      	lsls	r3, r3, #10
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	4313      	orrs	r3, r2
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d94:	801a      	strh	r2, [r3, #0]
 8007d96:	e050      	b.n	8007e3a <USB_EPStartXfer+0x8a8>
 8007d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <USB_EPStartXfer+0x824>
 8007da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db2:	801a      	strh	r2, [r3, #0]
 8007db4:	e041      	b.n	8007e3a <USB_EPStartXfer+0x8a8>
 8007db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dba:	085b      	lsrs	r3, r3, #1
 8007dbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d004      	beq.n	8007dd6 <USB_EPStartXfer+0x844>
 8007dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	029b      	lsls	r3, r3, #10
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	4313      	orrs	r3, r2
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dec:	801a      	strh	r2, [r3, #0]
 8007dee:	e024      	b.n	8007e3a <USB_EPStartXfer+0x8a8>
 8007df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	785b      	ldrb	r3, [r3, #1]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d11c      	bne.n	8007e3a <USB_EPStartXfer+0x8a8>
 8007e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	461a      	mov	r2, r3
 8007e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e14:	4413      	add	r3, r2
 8007e16:	643b      	str	r3, [r7, #64]	; 0x40
 8007e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	00da      	lsls	r2, r3, #3
 8007e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e28:	4413      	add	r3, r2
 8007e2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	895b      	ldrh	r3, [r3, #10]
 8007e46:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6959      	ldr	r1, [r3, #20]
 8007e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e60:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007e64:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007e68:	6800      	ldr	r0, [r0, #0]
 8007e6a:	f001 f87d 	bl	8008f68 <USB_WritePMA>
 8007e6e:	e227      	b.n	80082c0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	441a      	add	r2, r3
 8007ec4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	461a      	mov	r2, r3
 8007efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007efc:	4413      	add	r3, r2
 8007efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	00da      	lsls	r2, r3, #3
 8007f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f10:	4413      	add	r3, r2
 8007f12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f16:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f20:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	891b      	ldrh	r3, [r3, #8]
 8007f2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6959      	ldr	r1, [r3, #20]
 8007f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f48:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f4c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007f50:	6800      	ldr	r0, [r0, #0]
 8007f52:	f001 f809 	bl	8008f68 <USB_WritePMA>
 8007f56:	e1b3      	b.n	80082c0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6a1a      	ldr	r2, [r3, #32]
 8007f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f68:	1ad2      	subs	r2, r2, r3
 8007f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 80c6 	beq.w	800812a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	673b      	str	r3, [r7, #112]	; 0x70
 8007faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	785b      	ldrb	r3, [r3, #1]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d177      	bne.n	80080aa <USB_EPStartXfer+0xb18>
 8007fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fda:	4413      	add	r3, r2
 8007fdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	00da      	lsls	r2, r3, #3
 8007fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fee:	4413      	add	r3, r2
 8007ff0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ff4:	667b      	str	r3, [r7, #100]	; 0x64
 8007ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008000:	b29a      	uxth	r2, r3
 8008002:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800800a:	2b3e      	cmp	r3, #62	; 0x3e
 800800c:	d921      	bls.n	8008052 <USB_EPStartXfer+0xac0>
 800800e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008012:	095b      	lsrs	r3, r3, #5
 8008014:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800801c:	f003 031f 	and.w	r3, r3, #31
 8008020:	2b00      	cmp	r3, #0
 8008022:	d104      	bne.n	800802e <USB_EPStartXfer+0xa9c>
 8008024:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008028:	3b01      	subs	r3, #1
 800802a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800802e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	b29a      	uxth	r2, r3
 8008034:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008038:	b29b      	uxth	r3, r3
 800803a:	029b      	lsls	r3, r3, #10
 800803c:	b29b      	uxth	r3, r3
 800803e:	4313      	orrs	r3, r2
 8008040:	b29b      	uxth	r3, r3
 8008042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800804a:	b29a      	uxth	r2, r3
 800804c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800804e:	801a      	strh	r2, [r3, #0]
 8008050:	e050      	b.n	80080f4 <USB_EPStartXfer+0xb62>
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10a      	bne.n	8008070 <USB_EPStartXfer+0xade>
 800805a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008068:	b29a      	uxth	r2, r3
 800806a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800806c:	801a      	strh	r2, [r3, #0]
 800806e:	e041      	b.n	80080f4 <USB_EPStartXfer+0xb62>
 8008070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008074:	085b      	lsrs	r3, r3, #1
 8008076:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800807a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d004      	beq.n	8008090 <USB_EPStartXfer+0xafe>
 8008086:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800808a:	3301      	adds	r3, #1
 800808c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	b29a      	uxth	r2, r3
 8008096:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800809a:	b29b      	uxth	r3, r3
 800809c:	029b      	lsls	r3, r3, #10
 800809e:	b29b      	uxth	r3, r3
 80080a0:	4313      	orrs	r3, r2
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080a6:	801a      	strh	r2, [r3, #0]
 80080a8:	e024      	b.n	80080f4 <USB_EPStartXfer+0xb62>
 80080aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	785b      	ldrb	r3, [r3, #1]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d11c      	bne.n	80080f4 <USB_EPStartXfer+0xb62>
 80080ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	461a      	mov	r2, r3
 80080cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080ce:	4413      	add	r3, r2
 80080d0:	673b      	str	r3, [r7, #112]	; 0x70
 80080d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	00da      	lsls	r2, r3, #3
 80080e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080e2:	4413      	add	r3, r2
 80080e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80080f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	895b      	ldrh	r3, [r3, #10]
 8008100:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6959      	ldr	r1, [r3, #20]
 8008110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008114:	b29b      	uxth	r3, r3
 8008116:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800811a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800811e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008122:	6800      	ldr	r0, [r0, #0]
 8008124:	f000 ff20 	bl	8008f68 <USB_WritePMA>
 8008128:	e0ca      	b.n	80082c0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800812a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800812e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	785b      	ldrb	r3, [r3, #1]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d177      	bne.n	800822a <USB_EPStartXfer+0xc98>
 800813a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008154:	b29b      	uxth	r3, r3
 8008156:	461a      	mov	r2, r3
 8008158:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800815a:	4413      	add	r3, r2
 800815c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800815e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	00da      	lsls	r2, r3, #3
 800816c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800816e:	4413      	add	r3, r2
 8008170:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008174:	67bb      	str	r3, [r7, #120]	; 0x78
 8008176:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	b29b      	uxth	r3, r3
 800817c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008180:	b29a      	uxth	r2, r3
 8008182:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008184:	801a      	strh	r2, [r3, #0]
 8008186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800818a:	2b3e      	cmp	r3, #62	; 0x3e
 800818c:	d921      	bls.n	80081d2 <USB_EPStartXfer+0xc40>
 800818e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008192:	095b      	lsrs	r3, r3, #5
 8008194:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800819c:	f003 031f 	and.w	r3, r3, #31
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d104      	bne.n	80081ae <USB_EPStartXfer+0xc1c>
 80081a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081a8:	3b01      	subs	r3, #1
 80081aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80081ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	029b      	lsls	r3, r3, #10
 80081bc:	b29b      	uxth	r3, r3
 80081be:	4313      	orrs	r3, r2
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ce:	801a      	strh	r2, [r3, #0]
 80081d0:	e05c      	b.n	800828c <USB_EPStartXfer+0xcfa>
 80081d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10a      	bne.n	80081f0 <USB_EPStartXfer+0xc5e>
 80081da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ec:	801a      	strh	r2, [r3, #0]
 80081ee:	e04d      	b.n	800828c <USB_EPStartXfer+0xcfa>
 80081f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f4:	085b      	lsrs	r3, r3, #1
 80081f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80081fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d004      	beq.n	8008210 <USB_EPStartXfer+0xc7e>
 8008206:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800820a:	3301      	adds	r3, #1
 800820c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	b29a      	uxth	r2, r3
 8008216:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800821a:	b29b      	uxth	r3, r3
 800821c:	029b      	lsls	r3, r3, #10
 800821e:	b29b      	uxth	r3, r3
 8008220:	4313      	orrs	r3, r2
 8008222:	b29a      	uxth	r2, r3
 8008224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008226:	801a      	strh	r2, [r3, #0]
 8008228:	e030      	b.n	800828c <USB_EPStartXfer+0xcfa>
 800822a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800822e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	785b      	ldrb	r3, [r3, #1]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d128      	bne.n	800828c <USB_EPStartXfer+0xcfa>
 800823a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800823e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008256:	b29b      	uxth	r3, r3
 8008258:	461a      	mov	r2, r3
 800825a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800825e:	4413      	add	r3, r2
 8008260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	00da      	lsls	r2, r3, #3
 8008272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008276:	4413      	add	r3, r2
 8008278:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800827c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008284:	b29a      	uxth	r2, r3
 8008286:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800828a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800828c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	891b      	ldrh	r3, [r3, #8]
 8008298:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800829c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6959      	ldr	r1, [r3, #20]
 80082a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80082b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80082b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80082ba:	6800      	ldr	r0, [r0, #0]
 80082bc:	f000 fe54 	bl	8008f68 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80082c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082e6:	817b      	strh	r3, [r7, #10]
 80082e8:	897b      	ldrh	r3, [r7, #10]
 80082ea:	f083 0310 	eor.w	r3, r3, #16
 80082ee:	817b      	strh	r3, [r7, #10]
 80082f0:	897b      	ldrh	r3, [r7, #10]
 80082f2:	f083 0320 	eor.w	r3, r3, #32
 80082f6:	817b      	strh	r3, [r7, #10]
 80082f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	441a      	add	r2, r3
 8008312:	897b      	ldrh	r3, [r7, #10]
 8008314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800831c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008324:	b29b      	uxth	r3, r3
 8008326:	8013      	strh	r3, [r2, #0]
 8008328:	f000 bcde 	b.w	8008ce8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800832c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	7b1b      	ldrb	r3, [r3, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	f040 80bb 	bne.w	80084b4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800833e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800834e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	429a      	cmp	r2, r3
 8008358:	d917      	bls.n	800838a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800835a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800835e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800836a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	699a      	ldr	r2, [r3, #24]
 8008376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800837a:	1ad2      	subs	r2, r2, r3
 800837c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	619a      	str	r2, [r3, #24]
 8008388:	e00e      	b.n	80083a8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800838a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800839a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800839e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2200      	movs	r2, #0
 80083a6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80083a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	461a      	mov	r2, r3
 80083c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083cc:	4413      	add	r3, r2
 80083ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	00da      	lsls	r2, r3, #3
 80083e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083e4:	4413      	add	r3, r2
 80083e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80083ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083f2:	881b      	ldrh	r3, [r3, #0]
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008400:	801a      	strh	r2, [r3, #0]
 8008402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008406:	2b3e      	cmp	r3, #62	; 0x3e
 8008408:	d924      	bls.n	8008454 <USB_EPStartXfer+0xec2>
 800840a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800840e:	095b      	lsrs	r3, r3, #5
 8008410:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008418:	f003 031f 	and.w	r3, r3, #31
 800841c:	2b00      	cmp	r3, #0
 800841e:	d104      	bne.n	800842a <USB_EPStartXfer+0xe98>
 8008420:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008424:	3b01      	subs	r3, #1
 8008426:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800842a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	b29a      	uxth	r2, r3
 8008432:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008436:	b29b      	uxth	r3, r3
 8008438:	029b      	lsls	r3, r3, #10
 800843a:	b29b      	uxth	r3, r3
 800843c:	4313      	orrs	r3, r2
 800843e:	b29b      	uxth	r3, r3
 8008440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008448:	b29a      	uxth	r2, r3
 800844a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800844e:	801a      	strh	r2, [r3, #0]
 8008450:	f000 bc10 	b.w	8008c74 <USB_EPStartXfer+0x16e2>
 8008454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10c      	bne.n	8008476 <USB_EPStartXfer+0xee4>
 800845c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b29b      	uxth	r3, r3
 8008464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800846c:	b29a      	uxth	r2, r3
 800846e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008472:	801a      	strh	r2, [r3, #0]
 8008474:	e3fe      	b.n	8008c74 <USB_EPStartXfer+0x16e2>
 8008476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800847a:	085b      	lsrs	r3, r3, #1
 800847c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	2b00      	cmp	r3, #0
 800848a:	d004      	beq.n	8008496 <USB_EPStartXfer+0xf04>
 800848c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008490:	3301      	adds	r3, #1
 8008492:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	b29a      	uxth	r2, r3
 800849e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	029b      	lsls	r3, r3, #10
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	4313      	orrs	r3, r2
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084b0:	801a      	strh	r2, [r3, #0]
 80084b2:	e3df      	b.n	8008c74 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80084b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	78db      	ldrb	r3, [r3, #3]
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	f040 8218 	bne.w	80088f6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80084c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	785b      	ldrb	r3, [r3, #1]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f040 809d 	bne.w	8008612 <USB_EPStartXfer+0x1080>
 80084d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	461a      	mov	r2, r3
 80084f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084fc:	4413      	add	r3, r2
 80084fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	00da      	lsls	r2, r3, #3
 8008510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008514:	4413      	add	r3, r2
 8008516:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800851a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800851e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	b29b      	uxth	r3, r3
 8008526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800852a:	b29a      	uxth	r2, r3
 800852c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008530:	801a      	strh	r2, [r3, #0]
 8008532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	2b3e      	cmp	r3, #62	; 0x3e
 8008540:	d92b      	bls.n	800859a <USB_EPStartXfer+0x1008>
 8008542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	095b      	lsrs	r3, r3, #5
 8008550:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	f003 031f 	and.w	r3, r3, #31
 8008564:	2b00      	cmp	r3, #0
 8008566:	d104      	bne.n	8008572 <USB_EPStartXfer+0xfe0>
 8008568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800856c:	3b01      	subs	r3, #1
 800856e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008572:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	b29a      	uxth	r2, r3
 800857a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800857e:	b29b      	uxth	r3, r3
 8008580:	029b      	lsls	r3, r3, #10
 8008582:	b29b      	uxth	r3, r3
 8008584:	4313      	orrs	r3, r2
 8008586:	b29b      	uxth	r3, r3
 8008588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800858c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008590:	b29a      	uxth	r2, r3
 8008592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008596:	801a      	strh	r2, [r3, #0]
 8008598:	e070      	b.n	800867c <USB_EPStartXfer+0x10ea>
 800859a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800859e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10c      	bne.n	80085c4 <USB_EPStartXfer+0x1032>
 80085aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085c0:	801a      	strh	r2, [r3, #0]
 80085c2:	e05b      	b.n	800867c <USB_EPStartXfer+0x10ea>
 80085c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	085b      	lsrs	r3, r3, #1
 80085d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d004      	beq.n	80085f4 <USB_EPStartXfer+0x1062>
 80085ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ee:	3301      	adds	r3, #1
 80085f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008600:	b29b      	uxth	r3, r3
 8008602:	029b      	lsls	r3, r3, #10
 8008604:	b29b      	uxth	r3, r3
 8008606:	4313      	orrs	r3, r2
 8008608:	b29a      	uxth	r2, r3
 800860a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800860e:	801a      	strh	r2, [r3, #0]
 8008610:	e034      	b.n	800867c <USB_EPStartXfer+0x10ea>
 8008612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	785b      	ldrb	r3, [r3, #1]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d12c      	bne.n	800867c <USB_EPStartXfer+0x10ea>
 8008622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800863e:	b29b      	uxth	r3, r3
 8008640:	461a      	mov	r2, r3
 8008642:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008646:	4413      	add	r3, r2
 8008648:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800864c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	00da      	lsls	r2, r3, #3
 800865a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800865e:	4413      	add	r3, r2
 8008660:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	b29a      	uxth	r2, r3
 8008676:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800867a:	801a      	strh	r2, [r3, #0]
 800867c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800868a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	785b      	ldrb	r3, [r3, #1]
 8008696:	2b00      	cmp	r3, #0
 8008698:	f040 809d 	bne.w	80087d6 <USB_EPStartXfer+0x1244>
 800869c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	461a      	mov	r2, r3
 80086bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086c0:	4413      	add	r3, r2
 80086c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	00da      	lsls	r2, r3, #3
 80086d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086d8:	4413      	add	r3, r2
 80086da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80086de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086f4:	801a      	strh	r2, [r3, #0]
 80086f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	2b3e      	cmp	r3, #62	; 0x3e
 8008704:	d92b      	bls.n	800875e <USB_EPStartXfer+0x11cc>
 8008706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800870a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	095b      	lsrs	r3, r3, #5
 8008714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800871c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	f003 031f 	and.w	r3, r3, #31
 8008728:	2b00      	cmp	r3, #0
 800872a:	d104      	bne.n	8008736 <USB_EPStartXfer+0x11a4>
 800872c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008730:	3b01      	subs	r3, #1
 8008732:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008736:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	b29a      	uxth	r2, r3
 800873e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008742:	b29b      	uxth	r3, r3
 8008744:	029b      	lsls	r3, r3, #10
 8008746:	b29b      	uxth	r3, r3
 8008748:	4313      	orrs	r3, r2
 800874a:	b29b      	uxth	r3, r3
 800874c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008754:	b29a      	uxth	r2, r3
 8008756:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800875a:	801a      	strh	r2, [r3, #0]
 800875c:	e069      	b.n	8008832 <USB_EPStartXfer+0x12a0>
 800875e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10c      	bne.n	8008788 <USB_EPStartXfer+0x11f6>
 800876e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008772:	881b      	ldrh	r3, [r3, #0]
 8008774:	b29b      	uxth	r3, r3
 8008776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800877a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800877e:	b29a      	uxth	r2, r3
 8008780:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008784:	801a      	strh	r2, [r3, #0]
 8008786:	e054      	b.n	8008832 <USB_EPStartXfer+0x12a0>
 8008788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800878c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	085b      	lsrs	r3, r3, #1
 8008796:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800879a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d004      	beq.n	80087b8 <USB_EPStartXfer+0x1226>
 80087ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087b2:	3301      	adds	r3, #1
 80087b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80087b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	b29a      	uxth	r2, r3
 80087c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	029b      	lsls	r3, r3, #10
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	4313      	orrs	r3, r2
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087d2:	801a      	strh	r2, [r3, #0]
 80087d4:	e02d      	b.n	8008832 <USB_EPStartXfer+0x12a0>
 80087d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	785b      	ldrb	r3, [r3, #1]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d125      	bne.n	8008832 <USB_EPStartXfer+0x12a0>
 80087e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	461a      	mov	r2, r3
 80087f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80087fc:	4413      	add	r3, r2
 80087fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	00da      	lsls	r2, r3, #3
 8008810:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008814:	4413      	add	r3, r2
 8008816:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800881a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800881e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	b29a      	uxth	r2, r3
 800882c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008830:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	2b00      	cmp	r3, #0
 8008840:	f000 8218 	beq.w	8008c74 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008848:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008864:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d005      	beq.n	800887c <USB_EPStartXfer+0x12ea>
 8008870:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10d      	bne.n	8008898 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800887c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008884:	2b00      	cmp	r3, #0
 8008886:	f040 81f5 	bne.w	8008c74 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800888a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800888e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008892:	2b00      	cmp	r3, #0
 8008894:	f040 81ee 	bne.w	8008c74 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800889c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088be:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80088c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	441a      	add	r2, r3
 80088dc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80088e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	8013      	strh	r3, [r2, #0]
 80088f4:	e1be      	b.n	8008c74 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80088f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	78db      	ldrb	r3, [r3, #3]
 8008902:	2b01      	cmp	r3, #1
 8008904:	f040 81b4 	bne.w	8008c70 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	699a      	ldr	r2, [r3, #24]
 8008914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	429a      	cmp	r2, r3
 8008922:	d917      	bls.n	8008954 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	699a      	ldr	r2, [r3, #24]
 8008940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008944:	1ad2      	subs	r2, r2, r3
 8008946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	619a      	str	r2, [r3, #24]
 8008952:	e00e      	b.n	8008972 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2200      	movs	r2, #0
 8008970:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	785b      	ldrb	r3, [r3, #1]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f040 8085 	bne.w	8008a8e <USB_EPStartXfer+0x14fc>
 8008984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008988:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008996:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	461a      	mov	r2, r3
 80089a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80089a8:	4413      	add	r3, r2
 80089aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80089ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	00da      	lsls	r2, r3, #3
 80089bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80089c0:	4413      	add	r3, r2
 80089c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80089c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089dc:	801a      	strh	r2, [r3, #0]
 80089de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089e2:	2b3e      	cmp	r3, #62	; 0x3e
 80089e4:	d923      	bls.n	8008a2e <USB_EPStartXfer+0x149c>
 80089e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089ea:	095b      	lsrs	r3, r3, #5
 80089ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f4:	f003 031f 	and.w	r3, r3, #31
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d104      	bne.n	8008a06 <USB_EPStartXfer+0x1474>
 80089fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a00:	3b01      	subs	r3, #1
 8008a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a0a:	881b      	ldrh	r3, [r3, #0]
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	029b      	lsls	r3, r3, #10
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a2a:	801a      	strh	r2, [r3, #0]
 8008a2c:	e060      	b.n	8008af0 <USB_EPStartXfer+0x155e>
 8008a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10c      	bne.n	8008a50 <USB_EPStartXfer+0x14be>
 8008a36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a4c:	801a      	strh	r2, [r3, #0]
 8008a4e:	e04f      	b.n	8008af0 <USB_EPStartXfer+0x155e>
 8008a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a54:	085b      	lsrs	r3, r3, #1
 8008a56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d004      	beq.n	8008a70 <USB_EPStartXfer+0x14de>
 8008a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	029b      	lsls	r3, r3, #10
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	4313      	orrs	r3, r2
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a8a:	801a      	strh	r2, [r3, #0]
 8008a8c:	e030      	b.n	8008af0 <USB_EPStartXfer+0x155e>
 8008a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	785b      	ldrb	r3, [r3, #1]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d128      	bne.n	8008af0 <USB_EPStartXfer+0x155e>
 8008a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	461a      	mov	r2, r3
 8008abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	00da      	lsls	r2, r3, #3
 8008ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ada:	4413      	add	r3, r2
 8008adc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008aee:	801a      	strh	r2, [r3, #0]
 8008af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	785b      	ldrb	r3, [r3, #1]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f040 8085 	bne.w	8008c1a <USB_EPStartXfer+0x1688>
 8008b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b34:	4413      	add	r3, r2
 8008b36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	00da      	lsls	r2, r3, #3
 8008b48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b68:	801a      	strh	r2, [r3, #0]
 8008b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b6e:	2b3e      	cmp	r3, #62	; 0x3e
 8008b70:	d923      	bls.n	8008bba <USB_EPStartXfer+0x1628>
 8008b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b76:	095b      	lsrs	r3, r3, #5
 8008b78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b80:	f003 031f 	and.w	r3, r3, #31
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d104      	bne.n	8008b92 <USB_EPStartXfer+0x1600>
 8008b88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	029b      	lsls	r3, r3, #10
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008bb6:	801a      	strh	r2, [r3, #0]
 8008bb8:	e05c      	b.n	8008c74 <USB_EPStartXfer+0x16e2>
 8008bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10c      	bne.n	8008bdc <USB_EPStartXfer+0x164a>
 8008bc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008bd8:	801a      	strh	r2, [r3, #0]
 8008bda:	e04b      	b.n	8008c74 <USB_EPStartXfer+0x16e2>
 8008bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008be0:	085b      	lsrs	r3, r3, #1
 8008be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d004      	beq.n	8008bfc <USB_EPStartXfer+0x166a>
 8008bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	029b      	lsls	r3, r3, #10
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c16:	801a      	strh	r2, [r3, #0]
 8008c18:	e02c      	b.n	8008c74 <USB_EPStartXfer+0x16e2>
 8008c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	785b      	ldrb	r3, [r3, #1]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d124      	bne.n	8008c74 <USB_EPStartXfer+0x16e2>
 8008c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c40:	4413      	add	r3, r2
 8008c42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	00da      	lsls	r2, r3, #3
 8008c54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c58:	4413      	add	r3, r2
 8008c5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c6c:	801a      	strh	r2, [r3, #0]
 8008c6e:	e001      	b.n	8008c74 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e03a      	b.n	8008cea <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008c9e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008ca2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ca6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008caa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008cae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008cb2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	441a      	add	r2, r3
 8008cd0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	785b      	ldrb	r3, [r3, #1]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d020      	beq.n	8008d48 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d1c:	81bb      	strh	r3, [r7, #12]
 8008d1e:	89bb      	ldrh	r3, [r7, #12]
 8008d20:	f083 0310 	eor.w	r3, r3, #16
 8008d24:	81bb      	strh	r3, [r7, #12]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	441a      	add	r2, r3
 8008d30:	89bb      	ldrh	r3, [r7, #12]
 8008d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	8013      	strh	r3, [r2, #0]
 8008d46:	e01f      	b.n	8008d88 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d5e:	81fb      	strh	r3, [r7, #14]
 8008d60:	89fb      	ldrh	r3, [r7, #14]
 8008d62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d66:	81fb      	strh	r3, [r7, #14]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	441a      	add	r2, r3
 8008d72:	89fb      	ldrh	r3, [r7, #14]
 8008d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b087      	sub	sp, #28
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	7b1b      	ldrb	r3, [r3, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f040 809d 	bne.w	8008ee4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	785b      	ldrb	r3, [r3, #1]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d04c      	beq.n	8008e4c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4413      	add	r3, r2
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	823b      	strh	r3, [r7, #16]
 8008dc0:	8a3b      	ldrh	r3, [r7, #16]
 8008dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d01b      	beq.n	8008e02 <USB_EPClearStall+0x6c>
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de0:	81fb      	strh	r3, [r7, #14]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	441a      	add	r2, r3
 8008dec:	89fb      	ldrh	r3, [r7, #14]
 8008dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	78db      	ldrb	r3, [r3, #3]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d06c      	beq.n	8008ee4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e20:	81bb      	strh	r3, [r7, #12]
 8008e22:	89bb      	ldrh	r3, [r7, #12]
 8008e24:	f083 0320 	eor.w	r3, r3, #32
 8008e28:	81bb      	strh	r3, [r7, #12]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	441a      	add	r2, r3
 8008e34:	89bb      	ldrh	r3, [r7, #12]
 8008e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	8013      	strh	r3, [r2, #0]
 8008e4a:	e04b      	b.n	8008ee4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	82fb      	strh	r3, [r7, #22]
 8008e5a:	8afb      	ldrh	r3, [r7, #22]
 8008e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d01b      	beq.n	8008e9c <USB_EPClearStall+0x106>
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e7a:	82bb      	strh	r3, [r7, #20]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	441a      	add	r2, r3
 8008e86:	8abb      	ldrh	r3, [r7, #20]
 8008e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb2:	827b      	strh	r3, [r7, #18]
 8008eb4:	8a7b      	ldrh	r3, [r7, #18]
 8008eb6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008eba:	827b      	strh	r3, [r7, #18]
 8008ebc:	8a7b      	ldrh	r3, [r7, #18]
 8008ebe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ec2:	827b      	strh	r3, [r7, #18]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	441a      	add	r2, r3
 8008ece:	8a7b      	ldrh	r3, [r7, #18]
 8008ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	460b      	mov	r3, r1
 8008efc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008efe:	78fb      	ldrb	r3, [r7, #3]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d103      	bne.n	8008f0c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2280      	movs	r2, #128	; 0x80
 8008f08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b083      	sub	sp, #12
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b08b      	sub	sp, #44	; 0x2c
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	4611      	mov	r1, r2
 8008f74:	461a      	mov	r2, r3
 8008f76:	460b      	mov	r3, r1
 8008f78:	80fb      	strh	r3, [r7, #6]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f7e:	88bb      	ldrh	r3, [r7, #4]
 8008f80:	3301      	adds	r3, #1
 8008f82:	085b      	lsrs	r3, r3, #1
 8008f84:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f8e:	88fa      	ldrh	r2, [r7, #6]
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	4413      	add	r3, r2
 8008f94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f98:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f9e:	e01b      	b.n	8008fd8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	021b      	lsls	r3, r3, #8
 8008fae:	b21a      	sxth	r2, r3
 8008fb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	b21b      	sxth	r3, r3
 8008fb8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	8a7a      	ldrh	r2, [r7, #18]
 8008fbe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	3302      	adds	r3, #2
 8008fc4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1e0      	bne.n	8008fa0 <USB_WritePMA+0x38>
  }
}
 8008fde:	bf00      	nop
 8008fe0:	bf00      	nop
 8008fe2:	372c      	adds	r7, #44	; 0x2c
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b08b      	sub	sp, #44	; 0x2c
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	80fb      	strh	r3, [r7, #6]
 8008ffe:	4613      	mov	r3, r2
 8009000:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009002:	88bb      	ldrh	r3, [r7, #4]
 8009004:	085b      	lsrs	r3, r3, #1
 8009006:	b29b      	uxth	r3, r3
 8009008:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009012:	88fa      	ldrh	r2, [r7, #6]
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	4413      	add	r3, r2
 8009018:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800901c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	627b      	str	r3, [r7, #36]	; 0x24
 8009022:	e018      	b.n	8009056 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009024:	6a3b      	ldr	r3, [r7, #32]
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	b29b      	uxth	r3, r3
 800902a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	3302      	adds	r3, #2
 8009030:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	b2da      	uxtb	r2, r3
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	3301      	adds	r3, #1
 800903e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	0a1b      	lsrs	r3, r3, #8
 8009044:	b2da      	uxtb	r2, r3
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	3301      	adds	r3, #1
 800904e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	3b01      	subs	r3, #1
 8009054:	627b      	str	r3, [r7, #36]	; 0x24
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e3      	bne.n	8009024 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800905c:	88bb      	ldrh	r3, [r7, #4]
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	b29b      	uxth	r3, r3
 8009064:	2b00      	cmp	r3, #0
 8009066:	d007      	beq.n	8009078 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	881b      	ldrh	r3, [r3, #0]
 800906c:	b29b      	uxth	r3, r3
 800906e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	b2da      	uxtb	r2, r3
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	701a      	strb	r2, [r3, #0]
  }
}
 8009078:	bf00      	nop
 800907a:	372c      	adds	r7, #44	; 0x2c
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009090:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009094:	f002 f94a 	bl	800b32c <USBD_static_malloc>
 8009098:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d105      	bne.n	80090ac <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80090a8:	2302      	movs	r3, #2
 80090aa:	e066      	b.n	800917a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	7c1b      	ldrb	r3, [r3, #16]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d119      	bne.n	80090f0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090c0:	2202      	movs	r2, #2
 80090c2:	2181      	movs	r1, #129	; 0x81
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f001 ffd8 	bl	800b07a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090d4:	2202      	movs	r2, #2
 80090d6:	2101      	movs	r1, #1
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 ffce 	bl	800b07a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2210      	movs	r2, #16
 80090ea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80090ee:	e016      	b.n	800911e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090f0:	2340      	movs	r3, #64	; 0x40
 80090f2:	2202      	movs	r2, #2
 80090f4:	2181      	movs	r1, #129	; 0x81
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f001 ffbf 	bl	800b07a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009102:	2340      	movs	r3, #64	; 0x40
 8009104:	2202      	movs	r2, #2
 8009106:	2101      	movs	r1, #1
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f001 ffb6 	bl	800b07a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2210      	movs	r2, #16
 800911a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800911e:	2308      	movs	r3, #8
 8009120:	2203      	movs	r2, #3
 8009122:	2182      	movs	r1, #130	; 0x82
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 ffa8 	bl	800b07a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2200      	movs	r2, #0
 8009148:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	7c1b      	ldrb	r3, [r3, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d109      	bne.n	8009168 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800915a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800915e:	2101      	movs	r1, #1
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f002 f879 	bl	800b258 <USBD_LL_PrepareReceive>
 8009166:	e007      	b.n	8009178 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800916e:	2340      	movs	r3, #64	; 0x40
 8009170:	2101      	movs	r1, #1
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f002 f870 	bl	800b258 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b082      	sub	sp, #8
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	460b      	mov	r3, r1
 800918c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800918e:	2181      	movs	r1, #129	; 0x81
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f001 ff98 	bl	800b0c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800919c:	2101      	movs	r1, #1
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f001 ff91 	bl	800b0c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80091ac:	2182      	movs	r1, #130	; 0x82
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f001 ff89 	bl	800b0c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00e      	beq.n	80091ec <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091de:	4618      	mov	r0, r3
 80091e0:	f002 f8b2 	bl	800b348 <USBD_static_free>
    pdev->pClassData = NULL;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
	...

080091f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009208:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800920a:	2300      	movs	r3, #0
 800920c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800921c:	2303      	movs	r3, #3
 800921e:	e0af      	b.n	8009380 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009228:	2b00      	cmp	r3, #0
 800922a:	d03f      	beq.n	80092ac <USBD_CDC_Setup+0xb4>
 800922c:	2b20      	cmp	r3, #32
 800922e:	f040 809f 	bne.w	8009370 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	88db      	ldrh	r3, [r3, #6]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d02e      	beq.n	8009298 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	b25b      	sxtb	r3, r3
 8009240:	2b00      	cmp	r3, #0
 8009242:	da16      	bge.n	8009272 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009250:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	88d2      	ldrh	r2, [r2, #6]
 8009256:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	88db      	ldrh	r3, [r3, #6]
 800925c:	2b07      	cmp	r3, #7
 800925e:	bf28      	it	cs
 8009260:	2307      	movcs	r3, #7
 8009262:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	89fa      	ldrh	r2, [r7, #14]
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f001 fa9f 	bl	800a7ae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009270:	e085      	b.n	800937e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	785a      	ldrb	r2, [r3, #1]
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	88db      	ldrh	r3, [r3, #6]
 8009280:	b2da      	uxtb	r2, r3
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009288:	6939      	ldr	r1, [r7, #16]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	88db      	ldrh	r3, [r3, #6]
 800928e:	461a      	mov	r2, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f001 fab8 	bl	800a806 <USBD_CtlPrepareRx>
      break;
 8009296:	e072      	b.n	800937e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	7850      	ldrb	r0, [r2, #1]
 80092a4:	2200      	movs	r2, #0
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	4798      	blx	r3
      break;
 80092aa:	e068      	b.n	800937e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	785b      	ldrb	r3, [r3, #1]
 80092b0:	2b0b      	cmp	r3, #11
 80092b2:	d852      	bhi.n	800935a <USBD_CDC_Setup+0x162>
 80092b4:	a201      	add	r2, pc, #4	; (adr r2, 80092bc <USBD_CDC_Setup+0xc4>)
 80092b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ba:	bf00      	nop
 80092bc:	080092ed 	.word	0x080092ed
 80092c0:	08009369 	.word	0x08009369
 80092c4:	0800935b 	.word	0x0800935b
 80092c8:	0800935b 	.word	0x0800935b
 80092cc:	0800935b 	.word	0x0800935b
 80092d0:	0800935b 	.word	0x0800935b
 80092d4:	0800935b 	.word	0x0800935b
 80092d8:	0800935b 	.word	0x0800935b
 80092dc:	0800935b 	.word	0x0800935b
 80092e0:	0800935b 	.word	0x0800935b
 80092e4:	08009317 	.word	0x08009317
 80092e8:	08009341 	.word	0x08009341
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b03      	cmp	r3, #3
 80092f6:	d107      	bne.n	8009308 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80092f8:	f107 030a 	add.w	r3, r7, #10
 80092fc:	2202      	movs	r2, #2
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f001 fa54 	bl	800a7ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009306:	e032      	b.n	800936e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f001 f9de 	bl	800a6cc <USBD_CtlError>
            ret = USBD_FAIL;
 8009310:	2303      	movs	r3, #3
 8009312:	75fb      	strb	r3, [r7, #23]
          break;
 8009314:	e02b      	b.n	800936e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800931c:	b2db      	uxtb	r3, r3
 800931e:	2b03      	cmp	r3, #3
 8009320:	d107      	bne.n	8009332 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009322:	f107 030d 	add.w	r3, r7, #13
 8009326:	2201      	movs	r2, #1
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 fa3f 	bl	800a7ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009330:	e01d      	b.n	800936e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f001 f9c9 	bl	800a6cc <USBD_CtlError>
            ret = USBD_FAIL;
 800933a:	2303      	movs	r3, #3
 800933c:	75fb      	strb	r3, [r7, #23]
          break;
 800933e:	e016      	b.n	800936e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b03      	cmp	r3, #3
 800934a:	d00f      	beq.n	800936c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f001 f9bc 	bl	800a6cc <USBD_CtlError>
            ret = USBD_FAIL;
 8009354:	2303      	movs	r3, #3
 8009356:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009358:	e008      	b.n	800936c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 f9b5 	bl	800a6cc <USBD_CtlError>
          ret = USBD_FAIL;
 8009362:	2303      	movs	r3, #3
 8009364:	75fb      	strb	r3, [r7, #23]
          break;
 8009366:	e002      	b.n	800936e <USBD_CDC_Setup+0x176>
          break;
 8009368:	bf00      	nop
 800936a:	e008      	b.n	800937e <USBD_CDC_Setup+0x186>
          break;
 800936c:	bf00      	nop
      }
      break;
 800936e:	e006      	b.n	800937e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f001 f9aa 	bl	800a6cc <USBD_CtlError>
      ret = USBD_FAIL;
 8009378:	2303      	movs	r3, #3
 800937a:	75fb      	strb	r3, [r7, #23]
      break;
 800937c:	bf00      	nop
  }

  return (uint8_t)ret;
 800937e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800939a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e04f      	b.n	800944a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80093b2:	78fa      	ldrb	r2, [r7, #3]
 80093b4:	6879      	ldr	r1, [r7, #4]
 80093b6:	4613      	mov	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	440b      	add	r3, r1
 80093c0:	3318      	adds	r3, #24
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d029      	beq.n	800941c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80093c8:	78fa      	ldrb	r2, [r7, #3]
 80093ca:	6879      	ldr	r1, [r7, #4]
 80093cc:	4613      	mov	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4413      	add	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	440b      	add	r3, r1
 80093d6:	3318      	adds	r3, #24
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	78f9      	ldrb	r1, [r7, #3]
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	460b      	mov	r3, r1
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	440b      	add	r3, r1
 80093e4:	00db      	lsls	r3, r3, #3
 80093e6:	4403      	add	r3, r0
 80093e8:	3320      	adds	r3, #32
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80093f0:	fb01 f303 	mul.w	r3, r1, r3
 80093f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d110      	bne.n	800941c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80093fa:	78fa      	ldrb	r2, [r7, #3]
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	4613      	mov	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	440b      	add	r3, r1
 8009408:	3318      	adds	r3, #24
 800940a:	2200      	movs	r2, #0
 800940c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800940e:	78f9      	ldrb	r1, [r7, #3]
 8009410:	2300      	movs	r3, #0
 8009412:	2200      	movs	r2, #0
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 fefe 	bl	800b216 <USBD_LL_Transmit>
 800941a:	e015      	b.n	8009448 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2200      	movs	r2, #0
 8009420:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00b      	beq.n	8009448 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009444:	78fa      	ldrb	r2, [r7, #3]
 8009446:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b084      	sub	sp, #16
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	460b      	mov	r3, r1
 800945c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009464:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800946c:	2b00      	cmp	r3, #0
 800946e:	d101      	bne.n	8009474 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009470:	2303      	movs	r3, #3
 8009472:	e015      	b.n	80094a0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	4619      	mov	r1, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 ff0e 	bl	800b29a <USBD_LL_GetRxDataSize>
 800947e:	4602      	mov	r2, r0
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800949a:	4611      	mov	r1, r2
 800949c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80094be:	2303      	movs	r3, #3
 80094c0:	e01b      	b.n	80094fa <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d015      	beq.n	80094f8 <USBD_CDC_EP0_RxReady+0x50>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80094d2:	2bff      	cmp	r3, #255	; 0xff
 80094d4:	d010      	beq.n	80094f8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80094e4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80094ec:	b292      	uxth	r2, r2
 80094ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	22ff      	movs	r2, #255	; 0xff
 80094f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
	...

08009504 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2243      	movs	r2, #67	; 0x43
 8009510:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009512:	4b03      	ldr	r3, [pc, #12]	; (8009520 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009514:	4618      	mov	r0, r3
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	20000094 	.word	0x20000094

08009524 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2243      	movs	r2, #67	; 0x43
 8009530:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009532:	4b03      	ldr	r3, [pc, #12]	; (8009540 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009534:	4618      	mov	r0, r3
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	20000050 	.word	0x20000050

08009544 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2243      	movs	r2, #67	; 0x43
 8009550:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009552:	4b03      	ldr	r3, [pc, #12]	; (8009560 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	200000d8 	.word	0x200000d8

08009564 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	220a      	movs	r2, #10
 8009570:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009572:	4b03      	ldr	r3, [pc, #12]	; (8009580 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009574:	4618      	mov	r0, r3
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	2000000c 	.word	0x2000000c

08009584 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009594:	2303      	movs	r3, #3
 8009596:	e004      	b.n	80095a2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b087      	sub	sp, #28
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	60f8      	str	r0, [r7, #12]
 80095b6:	60b9      	str	r1, [r7, #8]
 80095b8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095c0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e008      	b.n	80095de <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	371c      	adds	r7, #28
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b085      	sub	sp, #20
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d101      	bne.n	8009606 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009602:	2303      	movs	r3, #3
 8009604:	e004      	b.n	8009610 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	683a      	ldr	r2, [r7, #0]
 800960a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800962a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009636:	2303      	movs	r3, #3
 8009638:	e016      	b.n	8009668 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	7c1b      	ldrb	r3, [r3, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d109      	bne.n	8009656 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800964c:	2101      	movs	r1, #1
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f001 fe02 	bl	800b258 <USBD_LL_PrepareReceive>
 8009654:	e007      	b.n	8009666 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800965c:	2340      	movs	r3, #64	; 0x40
 800965e:	2101      	movs	r1, #1
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f001 fdf9 	bl	800b258 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	4613      	mov	r3, r2
 800967c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009684:	2303      	movs	r3, #3
 8009686:	e01f      	b.n	80096c8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	79fa      	ldrb	r2, [r7, #7]
 80096ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f001 fc61 	bl	800af84 <USBD_LL_Init>
 80096c2:	4603      	mov	r3, r0
 80096c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e016      	b.n	8009716 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00b      	beq.n	8009714 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	f107 020e 	add.w	r2, r7, #14
 8009708:	4610      	mov	r0, r2
 800970a:	4798      	blx	r3
 800970c:	4602      	mov	r2, r0
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 fc8c 	bl	800b044 <USBD_LL_Start>
 800972c:	4603      	mov	r3, r0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009736:	b480      	push	{r7}
 8009738:	b083      	sub	sp, #12
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009758:	2303      	movs	r3, #3
 800975a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009762:	2b00      	cmp	r3, #0
 8009764:	d009      	beq.n	800977a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	78fa      	ldrb	r2, [r7, #3]
 8009770:	4611      	mov	r1, r2
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	4798      	blx	r3
 8009776:	4603      	mov	r3, r0
 8009778:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800977a:	7bfb      	ldrb	r3, [r7, #15]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009796:	2b00      	cmp	r3, #0
 8009798:	d007      	beq.n	80097aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	78fa      	ldrb	r2, [r7, #3]
 80097a4:	4611      	mov	r1, r2
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	4798      	blx	r3
  }

  return USBD_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 ff46 	bl	800a658 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80097da:	461a      	mov	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80097e8:	f003 031f 	and.w	r3, r3, #31
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d01a      	beq.n	8009826 <USBD_LL_SetupStage+0x72>
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d822      	bhi.n	800983a <USBD_LL_SetupStage+0x86>
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d002      	beq.n	80097fe <USBD_LL_SetupStage+0x4a>
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d00a      	beq.n	8009812 <USBD_LL_SetupStage+0x5e>
 80097fc:	e01d      	b.n	800983a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f9ee 	bl	8009be8 <USBD_StdDevReq>
 800980c:	4603      	mov	r3, r0
 800980e:	73fb      	strb	r3, [r7, #15]
      break;
 8009810:	e020      	b.n	8009854 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fa52 	bl	8009cc4 <USBD_StdItfReq>
 8009820:	4603      	mov	r3, r0
 8009822:	73fb      	strb	r3, [r7, #15]
      break;
 8009824:	e016      	b.n	8009854 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fa91 	bl	8009d56 <USBD_StdEPReq>
 8009834:	4603      	mov	r3, r0
 8009836:	73fb      	strb	r3, [r7, #15]
      break;
 8009838:	e00c      	b.n	8009854 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009840:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009844:	b2db      	uxtb	r3, r3
 8009846:	4619      	mov	r1, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f001 fc5b 	bl	800b104 <USBD_LL_StallEP>
 800984e:	4603      	mov	r3, r0
 8009850:	73fb      	strb	r3, [r7, #15]
      break;
 8009852:	bf00      	nop
  }

  return ret;
 8009854:	7bfb      	ldrb	r3, [r7, #15]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b086      	sub	sp, #24
 8009862:	af00      	add	r7, sp, #0
 8009864:	60f8      	str	r0, [r7, #12]
 8009866:	460b      	mov	r3, r1
 8009868:	607a      	str	r2, [r7, #4]
 800986a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800986c:	7afb      	ldrb	r3, [r7, #11]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d138      	bne.n	80098e4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009878:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009880:	2b03      	cmp	r3, #3
 8009882:	d14a      	bne.n	800991a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	689a      	ldr	r2, [r3, #8]
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	429a      	cmp	r2, r3
 800988e:	d913      	bls.n	80098b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	689a      	ldr	r2, [r3, #8]
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	1ad2      	subs	r2, r2, r3
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	68da      	ldr	r2, [r3, #12]
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	4293      	cmp	r3, r2
 80098a8:	bf28      	it	cs
 80098aa:	4613      	movcs	r3, r2
 80098ac:	461a      	mov	r2, r3
 80098ae:	6879      	ldr	r1, [r7, #4]
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 ffc5 	bl	800a840 <USBD_CtlContinueRx>
 80098b6:	e030      	b.n	800991a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	d10b      	bne.n	80098dc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d005      	beq.n	80098dc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 ffc0 	bl	800a862 <USBD_CtlSendStatus>
 80098e2:	e01a      	b.n	800991a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d114      	bne.n	800991a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00e      	beq.n	800991a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	7afa      	ldrb	r2, [r7, #11]
 8009906:	4611      	mov	r1, r2
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	4798      	blx	r3
 800990c:	4603      	mov	r3, r0
 800990e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009910:	7dfb      	ldrb	r3, [r7, #23]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009916:	7dfb      	ldrb	r3, [r7, #23]
 8009918:	e000      	b.n	800991c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	460b      	mov	r3, r1
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009932:	7afb      	ldrb	r3, [r7, #11]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d16b      	bne.n	8009a10 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3314      	adds	r3, #20
 800993c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009944:	2b02      	cmp	r3, #2
 8009946:	d156      	bne.n	80099f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	429a      	cmp	r2, r3
 8009952:	d914      	bls.n	800997e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	689a      	ldr	r2, [r3, #8]
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	1ad2      	subs	r2, r2, r3
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	461a      	mov	r2, r3
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 ff3a 	bl	800a7e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009970:	2300      	movs	r3, #0
 8009972:	2200      	movs	r2, #0
 8009974:	2100      	movs	r1, #0
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f001 fc6e 	bl	800b258 <USBD_LL_PrepareReceive>
 800997c:	e03b      	b.n	80099f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	68da      	ldr	r2, [r3, #12]
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	429a      	cmp	r2, r3
 8009988:	d11c      	bne.n	80099c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009992:	429a      	cmp	r2, r3
 8009994:	d316      	bcc.n	80099c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d20f      	bcs.n	80099c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80099a4:	2200      	movs	r2, #0
 80099a6:	2100      	movs	r1, #0
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f000 ff1b 	bl	800a7e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099b6:	2300      	movs	r3, #0
 80099b8:	2200      	movs	r2, #0
 80099ba:	2100      	movs	r1, #0
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f001 fc4b 	bl	800b258 <USBD_LL_PrepareReceive>
 80099c2:	e018      	b.n	80099f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d10b      	bne.n	80099e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d005      	beq.n	80099e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80099e8:	2180      	movs	r1, #128	; 0x80
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f001 fb8a 	bl	800b104 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 ff49 	bl	800a888 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d122      	bne.n	8009a46 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f7ff fe98 	bl	8009736 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009a0e:	e01a      	b.n	8009a46 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b03      	cmp	r3, #3
 8009a1a:	d114      	bne.n	8009a46 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00e      	beq.n	8009a46 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	7afa      	ldrb	r2, [r7, #11]
 8009a32:	4611      	mov	r1, r2
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	4798      	blx	r3
 8009a38:	4603      	mov	r3, r0
 8009a3a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009a3c:	7dfb      	ldrb	r3, [r7, #23]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
 8009a44:	e000      	b.n	8009a48 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3718      	adds	r7, #24
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e02f      	b.n	8009ae4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00f      	beq.n	8009aae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d009      	beq.n	8009aae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	6852      	ldr	r2, [r2, #4]
 8009aa6:	b2d2      	uxtb	r2, r2
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009aae:	2340      	movs	r3, #64	; 0x40
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f001 fae0 	bl	800b07a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2240      	movs	r2, #64	; 0x40
 8009ac6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009aca:	2340      	movs	r3, #64	; 0x40
 8009acc:	2200      	movs	r2, #0
 8009ace:	2180      	movs	r1, #128	; 0x80
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f001 fad2 	bl	800b07a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2240      	movs	r2, #64	; 0x40
 8009ae0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	78fa      	ldrb	r2, [r7, #3]
 8009afc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2204      	movs	r2, #4
 8009b26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	2b04      	cmp	r3, #4
 8009b4a:	d106      	bne.n	8009b5a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e012      	b.n	8009ba4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d10b      	bne.n	8009ba2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d005      	beq.n	8009ba2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b9c:	69db      	ldr	r3, [r3, #28]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009bca:	8a3b      	ldrh	r3, [r7, #16]
 8009bcc:	021b      	lsls	r3, r3, #8
 8009bce:	b21a      	sxth	r2, r3
 8009bd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	b21b      	sxth	r3, r3
 8009bd8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009bda:	89fb      	ldrh	r3, [r7, #14]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	371c      	adds	r7, #28
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bfe:	2b40      	cmp	r3, #64	; 0x40
 8009c00:	d005      	beq.n	8009c0e <USBD_StdDevReq+0x26>
 8009c02:	2b40      	cmp	r3, #64	; 0x40
 8009c04:	d853      	bhi.n	8009cae <USBD_StdDevReq+0xc6>
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00b      	beq.n	8009c22 <USBD_StdDevReq+0x3a>
 8009c0a:	2b20      	cmp	r3, #32
 8009c0c:	d14f      	bne.n	8009cae <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	4798      	blx	r3
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c20:	e04a      	b.n	8009cb8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	785b      	ldrb	r3, [r3, #1]
 8009c26:	2b09      	cmp	r3, #9
 8009c28:	d83b      	bhi.n	8009ca2 <USBD_StdDevReq+0xba>
 8009c2a:	a201      	add	r2, pc, #4	; (adr r2, 8009c30 <USBD_StdDevReq+0x48>)
 8009c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c30:	08009c85 	.word	0x08009c85
 8009c34:	08009c99 	.word	0x08009c99
 8009c38:	08009ca3 	.word	0x08009ca3
 8009c3c:	08009c8f 	.word	0x08009c8f
 8009c40:	08009ca3 	.word	0x08009ca3
 8009c44:	08009c63 	.word	0x08009c63
 8009c48:	08009c59 	.word	0x08009c59
 8009c4c:	08009ca3 	.word	0x08009ca3
 8009c50:	08009c7b 	.word	0x08009c7b
 8009c54:	08009c6d 	.word	0x08009c6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f9de 	bl	800a01c <USBD_GetDescriptor>
          break;
 8009c60:	e024      	b.n	8009cac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fb6d 	bl	800a344 <USBD_SetAddress>
          break;
 8009c6a:	e01f      	b.n	8009cac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fbac 	bl	800a3cc <USBD_SetConfig>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]
          break;
 8009c78:	e018      	b.n	8009cac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fc4b 	bl	800a518 <USBD_GetConfig>
          break;
 8009c82:	e013      	b.n	8009cac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fc7c 	bl	800a584 <USBD_GetStatus>
          break;
 8009c8c:	e00e      	b.n	8009cac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fcab 	bl	800a5ec <USBD_SetFeature>
          break;
 8009c96:	e009      	b.n	8009cac <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fcba 	bl	800a614 <USBD_ClrFeature>
          break;
 8009ca0:	e004      	b.n	8009cac <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 fd11 	bl	800a6cc <USBD_CtlError>
          break;
 8009caa:	bf00      	nop
      }
      break;
 8009cac:	e004      	b.n	8009cb8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fd0b 	bl	800a6cc <USBD_CtlError>
      break;
 8009cb6:	bf00      	nop
  }

  return ret;
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop

08009cc4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cda:	2b40      	cmp	r3, #64	; 0x40
 8009cdc:	d005      	beq.n	8009cea <USBD_StdItfReq+0x26>
 8009cde:	2b40      	cmp	r3, #64	; 0x40
 8009ce0:	d82f      	bhi.n	8009d42 <USBD_StdItfReq+0x7e>
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <USBD_StdItfReq+0x26>
 8009ce6:	2b20      	cmp	r3, #32
 8009ce8:	d12b      	bne.n	8009d42 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d81d      	bhi.n	8009d34 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	889b      	ldrh	r3, [r3, #4]
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d813      	bhi.n	8009d2a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	4798      	blx	r3
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	88db      	ldrh	r3, [r3, #6]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d110      	bne.n	8009d3e <USBD_StdItfReq+0x7a>
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10d      	bne.n	8009d3e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fd9d 	bl	800a862 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d28:	e009      	b.n	8009d3e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fccd 	bl	800a6cc <USBD_CtlError>
          break;
 8009d32:	e004      	b.n	8009d3e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fcc8 	bl	800a6cc <USBD_CtlError>
          break;
 8009d3c:	e000      	b.n	8009d40 <USBD_StdItfReq+0x7c>
          break;
 8009d3e:	bf00      	nop
      }
      break;
 8009d40:	e004      	b.n	8009d4c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009d42:	6839      	ldr	r1, [r7, #0]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fcc1 	bl	800a6cc <USBD_CtlError>
      break;
 8009d4a:	bf00      	nop
  }

  return ret;
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b084      	sub	sp, #16
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	889b      	ldrh	r3, [r3, #4]
 8009d68:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d72:	2b40      	cmp	r3, #64	; 0x40
 8009d74:	d007      	beq.n	8009d86 <USBD_StdEPReq+0x30>
 8009d76:	2b40      	cmp	r3, #64	; 0x40
 8009d78:	f200 8145 	bhi.w	800a006 <USBD_StdEPReq+0x2b0>
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00c      	beq.n	8009d9a <USBD_StdEPReq+0x44>
 8009d80:	2b20      	cmp	r3, #32
 8009d82:	f040 8140 	bne.w	800a006 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	4798      	blx	r3
 8009d94:	4603      	mov	r3, r0
 8009d96:	73fb      	strb	r3, [r7, #15]
      break;
 8009d98:	e13a      	b.n	800a010 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	785b      	ldrb	r3, [r3, #1]
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	d007      	beq.n	8009db2 <USBD_StdEPReq+0x5c>
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	f300 8129 	bgt.w	8009ffa <USBD_StdEPReq+0x2a4>
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d07f      	beq.n	8009eac <USBD_StdEPReq+0x156>
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d03c      	beq.n	8009e2a <USBD_StdEPReq+0xd4>
 8009db0:	e123      	b.n	8009ffa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d002      	beq.n	8009dc4 <USBD_StdEPReq+0x6e>
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d016      	beq.n	8009df0 <USBD_StdEPReq+0x9a>
 8009dc2:	e02c      	b.n	8009e1e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dc4:	7bbb      	ldrb	r3, [r7, #14]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00d      	beq.n	8009de6 <USBD_StdEPReq+0x90>
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
 8009dcc:	2b80      	cmp	r3, #128	; 0x80
 8009dce:	d00a      	beq.n	8009de6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f001 f995 	bl	800b104 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dda:	2180      	movs	r1, #128	; 0x80
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f001 f991 	bl	800b104 <USBD_LL_StallEP>
 8009de2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009de4:	e020      	b.n	8009e28 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009de6:	6839      	ldr	r1, [r7, #0]
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fc6f 	bl	800a6cc <USBD_CtlError>
              break;
 8009dee:	e01b      	b.n	8009e28 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	885b      	ldrh	r3, [r3, #2]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10e      	bne.n	8009e16 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00b      	beq.n	8009e16 <USBD_StdEPReq+0xc0>
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	2b80      	cmp	r3, #128	; 0x80
 8009e02:	d008      	beq.n	8009e16 <USBD_StdEPReq+0xc0>
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	88db      	ldrh	r3, [r3, #6]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d104      	bne.n	8009e16 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 f977 	bl	800b104 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fd23 	bl	800a862 <USBD_CtlSendStatus>

              break;
 8009e1c:	e004      	b.n	8009e28 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fc53 	bl	800a6cc <USBD_CtlError>
              break;
 8009e26:	bf00      	nop
          }
          break;
 8009e28:	e0ec      	b.n	800a004 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d002      	beq.n	8009e3c <USBD_StdEPReq+0xe6>
 8009e36:	2b03      	cmp	r3, #3
 8009e38:	d016      	beq.n	8009e68 <USBD_StdEPReq+0x112>
 8009e3a:	e030      	b.n	8009e9e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e3c:	7bbb      	ldrb	r3, [r7, #14]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00d      	beq.n	8009e5e <USBD_StdEPReq+0x108>
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	2b80      	cmp	r3, #128	; 0x80
 8009e46:	d00a      	beq.n	8009e5e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e48:	7bbb      	ldrb	r3, [r7, #14]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f001 f959 	bl	800b104 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e52:	2180      	movs	r1, #128	; 0x80
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f001 f955 	bl	800b104 <USBD_LL_StallEP>
 8009e5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e5c:	e025      	b.n	8009eaa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009e5e:	6839      	ldr	r1, [r7, #0]
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 fc33 	bl	800a6cc <USBD_CtlError>
              break;
 8009e66:	e020      	b.n	8009eaa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	885b      	ldrh	r3, [r3, #2]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d11b      	bne.n	8009ea8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
 8009e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d004      	beq.n	8009e84 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e7a:	7bbb      	ldrb	r3, [r7, #14]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f001 f95f 	bl	800b142 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fcec 	bl	800a862 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	4798      	blx	r3
 8009e98:	4603      	mov	r3, r0
 8009e9a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009e9c:	e004      	b.n	8009ea8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009e9e:	6839      	ldr	r1, [r7, #0]
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 fc13 	bl	800a6cc <USBD_CtlError>
              break;
 8009ea6:	e000      	b.n	8009eaa <USBD_StdEPReq+0x154>
              break;
 8009ea8:	bf00      	nop
          }
          break;
 8009eaa:	e0ab      	b.n	800a004 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d002      	beq.n	8009ebe <USBD_StdEPReq+0x168>
 8009eb8:	2b03      	cmp	r3, #3
 8009eba:	d032      	beq.n	8009f22 <USBD_StdEPReq+0x1cc>
 8009ebc:	e097      	b.n	8009fee <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d007      	beq.n	8009ed4 <USBD_StdEPReq+0x17e>
 8009ec4:	7bbb      	ldrb	r3, [r7, #14]
 8009ec6:	2b80      	cmp	r3, #128	; 0x80
 8009ec8:	d004      	beq.n	8009ed4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fbfd 	bl	800a6cc <USBD_CtlError>
                break;
 8009ed2:	e091      	b.n	8009ff8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	da0b      	bge.n	8009ef4 <USBD_StdEPReq+0x19e>
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
 8009ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4413      	add	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	3310      	adds	r3, #16
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	4413      	add	r3, r2
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	e00b      	b.n	8009f0c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009efa:	4613      	mov	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4413      	add	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	4413      	add	r3, r2
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	2200      	movs	r2, #0
 8009f12:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2202      	movs	r2, #2
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fc47 	bl	800a7ae <USBD_CtlSendData>
              break;
 8009f20:	e06a      	b.n	8009ff8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	da11      	bge.n	8009f4e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	f003 020f 	and.w	r2, r3, #15
 8009f30:	6879      	ldr	r1, [r7, #4]
 8009f32:	4613      	mov	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4413      	add	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	440b      	add	r3, r1
 8009f3c:	3324      	adds	r3, #36	; 0x24
 8009f3e:	881b      	ldrh	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d117      	bne.n	8009f74 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fbc0 	bl	800a6cc <USBD_CtlError>
                  break;
 8009f4c:	e054      	b.n	8009ff8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
 8009f50:	f003 020f 	and.w	r2, r3, #15
 8009f54:	6879      	ldr	r1, [r7, #4]
 8009f56:	4613      	mov	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4413      	add	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	440b      	add	r3, r1
 8009f60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f64:	881b      	ldrh	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d104      	bne.n	8009f74 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fbad 	bl	800a6cc <USBD_CtlError>
                  break;
 8009f72:	e041      	b.n	8009ff8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	da0b      	bge.n	8009f94 <USBD_StdEPReq+0x23e>
 8009f7c:	7bbb      	ldrb	r3, [r7, #14]
 8009f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f82:	4613      	mov	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4413      	add	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	3310      	adds	r3, #16
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	4413      	add	r3, r2
 8009f90:	3304      	adds	r3, #4
 8009f92:	e00b      	b.n	8009fac <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	4413      	add	r3, r2
 8009faa:	3304      	adds	r3, #4
 8009fac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009fae:	7bbb      	ldrb	r3, [r7, #14]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <USBD_StdEPReq+0x264>
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
 8009fb6:	2b80      	cmp	r3, #128	; 0x80
 8009fb8:	d103      	bne.n	8009fc2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]
 8009fc0:	e00e      	b.n	8009fe0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f001 f8da 	bl	800b180 <USBD_LL_IsStallEP>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	601a      	str	r2, [r3, #0]
 8009fd8:	e002      	b.n	8009fe0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fbe1 	bl	800a7ae <USBD_CtlSendData>
              break;
 8009fec:	e004      	b.n	8009ff8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fb6b 	bl	800a6cc <USBD_CtlError>
              break;
 8009ff6:	bf00      	nop
          }
          break;
 8009ff8:	e004      	b.n	800a004 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009ffa:	6839      	ldr	r1, [r7, #0]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fb65 	bl	800a6cc <USBD_CtlError>
          break;
 800a002:	bf00      	nop
      }
      break;
 800a004:	e004      	b.n	800a010 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a006:	6839      	ldr	r1, [r7, #0]
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fb5f 	bl	800a6cc <USBD_CtlError>
      break;
 800a00e:	bf00      	nop
  }

  return ret;
 800a010:	7bfb      	ldrb	r3, [r7, #15]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
	...

0800a01c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a026:	2300      	movs	r3, #0
 800a028:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a02a:	2300      	movs	r3, #0
 800a02c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a02e:	2300      	movs	r3, #0
 800a030:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	885b      	ldrh	r3, [r3, #2]
 800a036:	0a1b      	lsrs	r3, r3, #8
 800a038:	b29b      	uxth	r3, r3
 800a03a:	3b01      	subs	r3, #1
 800a03c:	2b0e      	cmp	r3, #14
 800a03e:	f200 8152 	bhi.w	800a2e6 <USBD_GetDescriptor+0x2ca>
 800a042:	a201      	add	r2, pc, #4	; (adr r2, 800a048 <USBD_GetDescriptor+0x2c>)
 800a044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a048:	0800a0b9 	.word	0x0800a0b9
 800a04c:	0800a0d1 	.word	0x0800a0d1
 800a050:	0800a111 	.word	0x0800a111
 800a054:	0800a2e7 	.word	0x0800a2e7
 800a058:	0800a2e7 	.word	0x0800a2e7
 800a05c:	0800a287 	.word	0x0800a287
 800a060:	0800a2b3 	.word	0x0800a2b3
 800a064:	0800a2e7 	.word	0x0800a2e7
 800a068:	0800a2e7 	.word	0x0800a2e7
 800a06c:	0800a2e7 	.word	0x0800a2e7
 800a070:	0800a2e7 	.word	0x0800a2e7
 800a074:	0800a2e7 	.word	0x0800a2e7
 800a078:	0800a2e7 	.word	0x0800a2e7
 800a07c:	0800a2e7 	.word	0x0800a2e7
 800a080:	0800a085 	.word	0x0800a085
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a08a:	69db      	ldr	r3, [r3, #28]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00b      	beq.n	800a0a8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a096:	69db      	ldr	r3, [r3, #28]
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	7c12      	ldrb	r2, [r2, #16]
 800a09c:	f107 0108 	add.w	r1, r7, #8
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	4798      	blx	r3
 800a0a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0a6:	e126      	b.n	800a2f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a0a8:	6839      	ldr	r1, [r7, #0]
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fb0e 	bl	800a6cc <USBD_CtlError>
        err++;
 800a0b0:	7afb      	ldrb	r3, [r7, #11]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	72fb      	strb	r3, [r7, #11]
      break;
 800a0b6:	e11e      	b.n	800a2f6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	7c12      	ldrb	r2, [r2, #16]
 800a0c4:	f107 0108 	add.w	r1, r7, #8
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	4798      	blx	r3
 800a0cc:	60f8      	str	r0, [r7, #12]
      break;
 800a0ce:	e112      	b.n	800a2f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	7c1b      	ldrb	r3, [r3, #16]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d10d      	bne.n	800a0f4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e0:	f107 0208 	add.w	r2, r7, #8
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	4798      	blx	r3
 800a0e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a0f2:	e100      	b.n	800a2f6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fc:	f107 0208 	add.w	r2, r7, #8
 800a100:	4610      	mov	r0, r2
 800a102:	4798      	blx	r3
 800a104:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3301      	adds	r3, #1
 800a10a:	2202      	movs	r2, #2
 800a10c:	701a      	strb	r2, [r3, #0]
      break;
 800a10e:	e0f2      	b.n	800a2f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	885b      	ldrh	r3, [r3, #2]
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b05      	cmp	r3, #5
 800a118:	f200 80ac 	bhi.w	800a274 <USBD_GetDescriptor+0x258>
 800a11c:	a201      	add	r2, pc, #4	; (adr r2, 800a124 <USBD_GetDescriptor+0x108>)
 800a11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a122:	bf00      	nop
 800a124:	0800a13d 	.word	0x0800a13d
 800a128:	0800a171 	.word	0x0800a171
 800a12c:	0800a1a5 	.word	0x0800a1a5
 800a130:	0800a1d9 	.word	0x0800a1d9
 800a134:	0800a20d 	.word	0x0800a20d
 800a138:	0800a241 	.word	0x0800a241
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00b      	beq.n	800a160 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	7c12      	ldrb	r2, [r2, #16]
 800a154:	f107 0108 	add.w	r1, r7, #8
 800a158:	4610      	mov	r0, r2
 800a15a:	4798      	blx	r3
 800a15c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a15e:	e091      	b.n	800a284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fab2 	bl	800a6cc <USBD_CtlError>
            err++;
 800a168:	7afb      	ldrb	r3, [r7, #11]
 800a16a:	3301      	adds	r3, #1
 800a16c:	72fb      	strb	r3, [r7, #11]
          break;
 800a16e:	e089      	b.n	800a284 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00b      	beq.n	800a194 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	7c12      	ldrb	r2, [r2, #16]
 800a188:	f107 0108 	add.w	r1, r7, #8
 800a18c:	4610      	mov	r0, r2
 800a18e:	4798      	blx	r3
 800a190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a192:	e077      	b.n	800a284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a194:	6839      	ldr	r1, [r7, #0]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fa98 	bl	800a6cc <USBD_CtlError>
            err++;
 800a19c:	7afb      	ldrb	r3, [r7, #11]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1a2:	e06f      	b.n	800a284 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00b      	beq.n	800a1c8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	7c12      	ldrb	r2, [r2, #16]
 800a1bc:	f107 0108 	add.w	r1, r7, #8
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	4798      	blx	r3
 800a1c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1c6:	e05d      	b.n	800a284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fa7e 	bl	800a6cc <USBD_CtlError>
            err++;
 800a1d0:	7afb      	ldrb	r3, [r7, #11]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1d6:	e055      	b.n	800a284 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00b      	beq.n	800a1fc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	7c12      	ldrb	r2, [r2, #16]
 800a1f0:	f107 0108 	add.w	r1, r7, #8
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	4798      	blx	r3
 800a1f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1fa:	e043      	b.n	800a284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fa64 	bl	800a6cc <USBD_CtlError>
            err++;
 800a204:	7afb      	ldrb	r3, [r7, #11]
 800a206:	3301      	adds	r3, #1
 800a208:	72fb      	strb	r3, [r7, #11]
          break;
 800a20a:	e03b      	b.n	800a284 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00b      	beq.n	800a230 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a21e:	695b      	ldr	r3, [r3, #20]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	7c12      	ldrb	r2, [r2, #16]
 800a224:	f107 0108 	add.w	r1, r7, #8
 800a228:	4610      	mov	r0, r2
 800a22a:	4798      	blx	r3
 800a22c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a22e:	e029      	b.n	800a284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fa4a 	bl	800a6cc <USBD_CtlError>
            err++;
 800a238:	7afb      	ldrb	r3, [r7, #11]
 800a23a:	3301      	adds	r3, #1
 800a23c:	72fb      	strb	r3, [r7, #11]
          break;
 800a23e:	e021      	b.n	800a284 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00b      	beq.n	800a264 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	7c12      	ldrb	r2, [r2, #16]
 800a258:	f107 0108 	add.w	r1, r7, #8
 800a25c:	4610      	mov	r0, r2
 800a25e:	4798      	blx	r3
 800a260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a262:	e00f      	b.n	800a284 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fa30 	bl	800a6cc <USBD_CtlError>
            err++;
 800a26c:	7afb      	ldrb	r3, [r7, #11]
 800a26e:	3301      	adds	r3, #1
 800a270:	72fb      	strb	r3, [r7, #11]
          break;
 800a272:	e007      	b.n	800a284 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fa28 	bl	800a6cc <USBD_CtlError>
          err++;
 800a27c:	7afb      	ldrb	r3, [r7, #11]
 800a27e:	3301      	adds	r3, #1
 800a280:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a282:	bf00      	nop
      }
      break;
 800a284:	e037      	b.n	800a2f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7c1b      	ldrb	r3, [r3, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d109      	bne.n	800a2a2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a296:	f107 0208 	add.w	r2, r7, #8
 800a29a:	4610      	mov	r0, r2
 800a29c:	4798      	blx	r3
 800a29e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2a0:	e029      	b.n	800a2f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fa11 	bl	800a6cc <USBD_CtlError>
        err++;
 800a2aa:	7afb      	ldrb	r3, [r7, #11]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a2b0:	e021      	b.n	800a2f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	7c1b      	ldrb	r3, [r3, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10d      	bne.n	800a2d6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c2:	f107 0208 	add.w	r2, r7, #8
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	4798      	blx	r3
 800a2ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	2207      	movs	r2, #7
 800a2d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2d4:	e00f      	b.n	800a2f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f9f7 	bl	800a6cc <USBD_CtlError>
        err++;
 800a2de:	7afb      	ldrb	r3, [r7, #11]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	72fb      	strb	r3, [r7, #11]
      break;
 800a2e4:	e007      	b.n	800a2f6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a2e6:	6839      	ldr	r1, [r7, #0]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 f9ef 	bl	800a6cc <USBD_CtlError>
      err++;
 800a2ee:	7afb      	ldrb	r3, [r7, #11]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a2f4:	bf00      	nop
  }

  if (err != 0U)
 800a2f6:	7afb      	ldrb	r3, [r7, #11]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d11e      	bne.n	800a33a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	88db      	ldrh	r3, [r3, #6]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d016      	beq.n	800a332 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a304:	893b      	ldrh	r3, [r7, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00e      	beq.n	800a328 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	88da      	ldrh	r2, [r3, #6]
 800a30e:	893b      	ldrh	r3, [r7, #8]
 800a310:	4293      	cmp	r3, r2
 800a312:	bf28      	it	cs
 800a314:	4613      	movcs	r3, r2
 800a316:	b29b      	uxth	r3, r3
 800a318:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a31a:	893b      	ldrh	r3, [r7, #8]
 800a31c:	461a      	mov	r2, r3
 800a31e:	68f9      	ldr	r1, [r7, #12]
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 fa44 	bl	800a7ae <USBD_CtlSendData>
 800a326:	e009      	b.n	800a33c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a328:	6839      	ldr	r1, [r7, #0]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f9ce 	bl	800a6cc <USBD_CtlError>
 800a330:	e004      	b.n	800a33c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fa95 	bl	800a862 <USBD_CtlSendStatus>
 800a338:	e000      	b.n	800a33c <USBD_GetDescriptor+0x320>
    return;
 800a33a:	bf00      	nop
  }
}
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop

0800a344 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	889b      	ldrh	r3, [r3, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d131      	bne.n	800a3ba <USBD_SetAddress+0x76>
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	88db      	ldrh	r3, [r3, #6]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d12d      	bne.n	800a3ba <USBD_SetAddress+0x76>
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	885b      	ldrh	r3, [r3, #2]
 800a362:	2b7f      	cmp	r3, #127	; 0x7f
 800a364:	d829      	bhi.n	800a3ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	885b      	ldrh	r3, [r3, #2]
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a370:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	d104      	bne.n	800a388 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f9a3 	bl	800a6cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a386:	e01d      	b.n	800a3c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	7bfa      	ldrb	r2, [r7, #15]
 800a38c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a390:	7bfb      	ldrb	r3, [r7, #15]
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 ff1f 	bl	800b1d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fa61 	bl	800a862 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d004      	beq.n	800a3b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2202      	movs	r2, #2
 800a3aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ae:	e009      	b.n	800a3c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b8:	e004      	b.n	800a3c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a3ba:	6839      	ldr	r1, [r7, #0]
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f985 	bl	800a6cc <USBD_CtlError>
  }
}
 800a3c2:	bf00      	nop
 800a3c4:	bf00      	nop
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	885b      	ldrh	r3, [r3, #2]
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	4b4c      	ldr	r3, [pc, #304]	; (800a514 <USBD_SetConfig+0x148>)
 800a3e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a3e4:	4b4b      	ldr	r3, [pc, #300]	; (800a514 <USBD_SetConfig+0x148>)
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d905      	bls.n	800a3f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a3ec:	6839      	ldr	r1, [r7, #0]
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f96c 	bl	800a6cc <USBD_CtlError>
    return USBD_FAIL;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	e088      	b.n	800a50a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	2b02      	cmp	r3, #2
 800a402:	d002      	beq.n	800a40a <USBD_SetConfig+0x3e>
 800a404:	2b03      	cmp	r3, #3
 800a406:	d025      	beq.n	800a454 <USBD_SetConfig+0x88>
 800a408:	e071      	b.n	800a4ee <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a40a:	4b42      	ldr	r3, [pc, #264]	; (800a514 <USBD_SetConfig+0x148>)
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d01c      	beq.n	800a44c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a412:	4b40      	ldr	r3, [pc, #256]	; (800a514 <USBD_SetConfig+0x148>)
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	461a      	mov	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a41c:	4b3d      	ldr	r3, [pc, #244]	; (800a514 <USBD_SetConfig+0x148>)
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	4619      	mov	r1, r3
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7ff f992 	bl	800974c <USBD_SetClassConfig>
 800a428:	4603      	mov	r3, r0
 800a42a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a42c:	7bfb      	ldrb	r3, [r7, #15]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d004      	beq.n	800a43c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f949 	bl	800a6cc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a43a:	e065      	b.n	800a508 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 fa10 	bl	800a862 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2203      	movs	r2, #3
 800a446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a44a:	e05d      	b.n	800a508 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fa08 	bl	800a862 <USBD_CtlSendStatus>
      break;
 800a452:	e059      	b.n	800a508 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a454:	4b2f      	ldr	r3, [pc, #188]	; (800a514 <USBD_SetConfig+0x148>)
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d112      	bne.n	800a482 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2202      	movs	r2, #2
 800a460:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a464:	4b2b      	ldr	r3, [pc, #172]	; (800a514 <USBD_SetConfig+0x148>)
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	461a      	mov	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a46e:	4b29      	ldr	r3, [pc, #164]	; (800a514 <USBD_SetConfig+0x148>)
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7ff f985 	bl	8009784 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f9f1 	bl	800a862 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a480:	e042      	b.n	800a508 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a482:	4b24      	ldr	r3, [pc, #144]	; (800a514 <USBD_SetConfig+0x148>)
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	461a      	mov	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d02a      	beq.n	800a4e6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	b2db      	uxtb	r3, r3
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7ff f973 	bl	8009784 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a49e:	4b1d      	ldr	r3, [pc, #116]	; (800a514 <USBD_SetConfig+0x148>)
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4a8:	4b1a      	ldr	r3, [pc, #104]	; (800a514 <USBD_SetConfig+0x148>)
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f7ff f94c 	bl	800974c <USBD_SetClassConfig>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00f      	beq.n	800a4de <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a4be:	6839      	ldr	r1, [r7, #0]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f903 	bl	800a6cc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7ff f958 	bl	8009784 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a4dc:	e014      	b.n	800a508 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f9bf 	bl	800a862 <USBD_CtlSendStatus>
      break;
 800a4e4:	e010      	b.n	800a508 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f9bb 	bl	800a862 <USBD_CtlSendStatus>
      break;
 800a4ec:	e00c      	b.n	800a508 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f8eb 	bl	800a6cc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4f6:	4b07      	ldr	r3, [pc, #28]	; (800a514 <USBD_SetConfig+0x148>)
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7ff f941 	bl	8009784 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a502:	2303      	movs	r3, #3
 800a504:	73fb      	strb	r3, [r7, #15]
      break;
 800a506:	bf00      	nop
  }

  return ret;
 800a508:	7bfb      	ldrb	r3, [r7, #15]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	200003dc 	.word	0x200003dc

0800a518 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	88db      	ldrh	r3, [r3, #6]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d004      	beq.n	800a534 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a52a:	6839      	ldr	r1, [r7, #0]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 f8cd 	bl	800a6cc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a532:	e023      	b.n	800a57c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	dc02      	bgt.n	800a546 <USBD_GetConfig+0x2e>
 800a540:	2b00      	cmp	r3, #0
 800a542:	dc03      	bgt.n	800a54c <USBD_GetConfig+0x34>
 800a544:	e015      	b.n	800a572 <USBD_GetConfig+0x5a>
 800a546:	2b03      	cmp	r3, #3
 800a548:	d00b      	beq.n	800a562 <USBD_GetConfig+0x4a>
 800a54a:	e012      	b.n	800a572 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	3308      	adds	r3, #8
 800a556:	2201      	movs	r2, #1
 800a558:	4619      	mov	r1, r3
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f927 	bl	800a7ae <USBD_CtlSendData>
        break;
 800a560:	e00c      	b.n	800a57c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	3304      	adds	r3, #4
 800a566:	2201      	movs	r2, #1
 800a568:	4619      	mov	r1, r3
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f91f 	bl	800a7ae <USBD_CtlSendData>
        break;
 800a570:	e004      	b.n	800a57c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a572:	6839      	ldr	r1, [r7, #0]
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f8a9 	bl	800a6cc <USBD_CtlError>
        break;
 800a57a:	bf00      	nop
}
 800a57c:	bf00      	nop
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a594:	b2db      	uxtb	r3, r3
 800a596:	3b01      	subs	r3, #1
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d81e      	bhi.n	800a5da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	88db      	ldrh	r3, [r3, #6]
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d004      	beq.n	800a5ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a5a4:	6839      	ldr	r1, [r7, #0]
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f890 	bl	800a6cc <USBD_CtlError>
        break;
 800a5ac:	e01a      	b.n	800a5e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d005      	beq.n	800a5ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	f043 0202 	orr.w	r2, r3, #2
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	330c      	adds	r3, #12
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f8eb 	bl	800a7ae <USBD_CtlSendData>
      break;
 800a5d8:	e004      	b.n	800a5e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a5da:	6839      	ldr	r1, [r7, #0]
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 f875 	bl	800a6cc <USBD_CtlError>
      break;
 800a5e2:	bf00      	nop
  }
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	885b      	ldrh	r3, [r3, #2]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d106      	bne.n	800a60c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2201      	movs	r2, #1
 800a602:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f92b 	bl	800a862 <USBD_CtlSendStatus>
  }
}
 800a60c:	bf00      	nop
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a624:	b2db      	uxtb	r3, r3
 800a626:	3b01      	subs	r3, #1
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d80b      	bhi.n	800a644 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	885b      	ldrh	r3, [r3, #2]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d10c      	bne.n	800a64e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 f910 	bl	800a862 <USBD_CtlSendStatus>
      }
      break;
 800a642:	e004      	b.n	800a64e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f840 	bl	800a6cc <USBD_CtlError>
      break;
 800a64c:	e000      	b.n	800a650 <USBD_ClrFeature+0x3c>
      break;
 800a64e:	bf00      	nop
  }
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	781a      	ldrb	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3301      	adds	r3, #1
 800a672:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	781a      	ldrb	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	3301      	adds	r3, #1
 800a680:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f7ff fa92 	bl	8009bac <SWAPBYTE>
 800a688:	4603      	mov	r3, r0
 800a68a:	461a      	mov	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	3301      	adds	r3, #1
 800a694:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3301      	adds	r3, #1
 800a69a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f7ff fa85 	bl	8009bac <SWAPBYTE>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f7ff fa78 	bl	8009bac <SWAPBYTE>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	461a      	mov	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	80da      	strh	r2, [r3, #6]
}
 800a6c4:	bf00      	nop
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6d6:	2180      	movs	r1, #128	; 0x80
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fd13 	bl	800b104 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a6de:	2100      	movs	r1, #0
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fd0f 	bl	800b104 <USBD_LL_StallEP>
}
 800a6e6:	bf00      	nop
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b086      	sub	sp, #24
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	60f8      	str	r0, [r7, #12]
 800a6f6:	60b9      	str	r1, [r7, #8]
 800a6f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d036      	beq.n	800a772 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a708:	6938      	ldr	r0, [r7, #16]
 800a70a:	f000 f836 	bl	800a77a <USBD_GetLen>
 800a70e:	4603      	mov	r3, r0
 800a710:	3301      	adds	r3, #1
 800a712:	b29b      	uxth	r3, r3
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	b29a      	uxth	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a71c:	7dfb      	ldrb	r3, [r7, #23]
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	4413      	add	r3, r2
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	7812      	ldrb	r2, [r2, #0]
 800a726:	701a      	strb	r2, [r3, #0]
  idx++;
 800a728:	7dfb      	ldrb	r3, [r7, #23]
 800a72a:	3301      	adds	r3, #1
 800a72c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a72e:	7dfb      	ldrb	r3, [r7, #23]
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	4413      	add	r3, r2
 800a734:	2203      	movs	r2, #3
 800a736:	701a      	strb	r2, [r3, #0]
  idx++;
 800a738:	7dfb      	ldrb	r3, [r7, #23]
 800a73a:	3301      	adds	r3, #1
 800a73c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a73e:	e013      	b.n	800a768 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a740:	7dfb      	ldrb	r3, [r7, #23]
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	4413      	add	r3, r2
 800a746:	693a      	ldr	r2, [r7, #16]
 800a748:	7812      	ldrb	r2, [r2, #0]
 800a74a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	3301      	adds	r3, #1
 800a750:	613b      	str	r3, [r7, #16]
    idx++;
 800a752:	7dfb      	ldrb	r3, [r7, #23]
 800a754:	3301      	adds	r3, #1
 800a756:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a758:	7dfb      	ldrb	r3, [r7, #23]
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	4413      	add	r3, r2
 800a75e:	2200      	movs	r2, #0
 800a760:	701a      	strb	r2, [r3, #0]
    idx++;
 800a762:	7dfb      	ldrb	r3, [r7, #23]
 800a764:	3301      	adds	r3, #1
 800a766:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1e7      	bne.n	800a740 <USBD_GetString+0x52>
 800a770:	e000      	b.n	800a774 <USBD_GetString+0x86>
    return;
 800a772:	bf00      	nop
  }
}
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b085      	sub	sp, #20
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a782:	2300      	movs	r3, #0
 800a784:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a78a:	e005      	b.n	800a798 <USBD_GetLen+0x1e>
  {
    len++;
 800a78c:	7bfb      	ldrb	r3, [r7, #15]
 800a78e:	3301      	adds	r3, #1
 800a790:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	3301      	adds	r3, #1
 800a796:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1f5      	bne.n	800a78c <USBD_GetLen+0x12>
  }

  return len;
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3714      	adds	r7, #20
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b084      	sub	sp, #16
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	60b9      	str	r1, [r7, #8]
 800a7b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2202      	movs	r2, #2
 800a7be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f000 fd1e 	bl	800b216 <USBD_LL_Transmit>

  return USBD_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f000 fd0d 	bl	800b216 <USBD_LL_Transmit>

  return USBD_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b084      	sub	sp, #16
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	60f8      	str	r0, [r7, #12]
 800a80e:	60b9      	str	r1, [r7, #8]
 800a810:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2203      	movs	r2, #3
 800a816:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	2100      	movs	r1, #0
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f000 fd11 	bl	800b258 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	2100      	movs	r1, #0
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f000 fd00 	bl	800b258 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b082      	sub	sp, #8
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2204      	movs	r2, #4
 800a86e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a872:	2300      	movs	r3, #0
 800a874:	2200      	movs	r2, #0
 800a876:	2100      	movs	r1, #0
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fccc 	bl	800b216 <USBD_LL_Transmit>

  return USBD_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2205      	movs	r2, #5
 800a894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a898:	2300      	movs	r3, #0
 800a89a:	2200      	movs	r2, #0
 800a89c:	2100      	movs	r1, #0
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fcda 	bl	800b258 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
	...

0800a8b0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	4912      	ldr	r1, [pc, #72]	; (800a900 <MX_USB_Device_Init+0x50>)
 800a8b8:	4812      	ldr	r0, [pc, #72]	; (800a904 <MX_USB_Device_Init+0x54>)
 800a8ba:	f7fe fed9 	bl	8009670 <USBD_Init>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a8c4:	f7f5 ff1a 	bl	80006fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a8c8:	490f      	ldr	r1, [pc, #60]	; (800a908 <MX_USB_Device_Init+0x58>)
 800a8ca:	480e      	ldr	r0, [pc, #56]	; (800a904 <MX_USB_Device_Init+0x54>)
 800a8cc:	f7fe ff00 	bl	80096d0 <USBD_RegisterClass>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a8d6:	f7f5 ff11 	bl	80006fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a8da:	490c      	ldr	r1, [pc, #48]	; (800a90c <MX_USB_Device_Init+0x5c>)
 800a8dc:	4809      	ldr	r0, [pc, #36]	; (800a904 <MX_USB_Device_Init+0x54>)
 800a8de:	f7fe fe51 	bl	8009584 <USBD_CDC_RegisterInterface>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d001      	beq.n	800a8ec <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a8e8:	f7f5 ff08 	bl	80006fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a8ec:	4805      	ldr	r0, [pc, #20]	; (800a904 <MX_USB_Device_Init+0x54>)
 800a8ee:	f7fe ff16 	bl	800971e <USBD_Start>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d001      	beq.n	800a8fc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a8f8:	f7f5 ff00 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a8fc:	bf00      	nop
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	20000138 	.word	0x20000138
 800a904:	200003e0 	.word	0x200003e0
 800a908:	20000018 	.word	0x20000018
 800a90c:	20000124 	.word	0x20000124

0800a910 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a914:	2200      	movs	r2, #0
 800a916:	4905      	ldr	r1, [pc, #20]	; (800a92c <CDC_Init_FS+0x1c>)
 800a918:	4805      	ldr	r0, [pc, #20]	; (800a930 <CDC_Init_FS+0x20>)
 800a91a:	f7fe fe48 	bl	80095ae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a91e:	4905      	ldr	r1, [pc, #20]	; (800a934 <CDC_Init_FS+0x24>)
 800a920:	4803      	ldr	r0, [pc, #12]	; (800a930 <CDC_Init_FS+0x20>)
 800a922:	f7fe fe62 	bl	80095ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a926:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a928:	4618      	mov	r0, r3
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	20001edc 	.word	0x20001edc
 800a930:	200003e0 	.word	0x200003e0
 800a934:	200016dc 	.word	0x200016dc

0800a938 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a938:	b480      	push	{r7}
 800a93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a93c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a93e:	4618      	mov	r0, r3
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	4603      	mov	r3, r0
 800a950:	6039      	str	r1, [r7, #0]
 800a952:	71fb      	strb	r3, [r7, #7]
 800a954:	4613      	mov	r3, r2
 800a956:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	60fb      	str	r3, [r7, #12]

  switch(cmd)
 800a95c:	79fb      	ldrb	r3, [r7, #7]
 800a95e:	2b23      	cmp	r3, #35	; 0x23
 800a960:	f200 80af 	bhi.w	800aac2 <CDC_Control_FS+0x17a>
 800a964:	a201      	add	r2, pc, #4	; (adr r2, 800a96c <CDC_Control_FS+0x24>)
 800a966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96a:	bf00      	nop
 800a96c:	0800aac3 	.word	0x0800aac3
 800a970:	0800aac3 	.word	0x0800aac3
 800a974:	0800aac3 	.word	0x0800aac3
 800a978:	0800aac3 	.word	0x0800aac3
 800a97c:	0800aac3 	.word	0x0800aac3
 800a980:	0800aac3 	.word	0x0800aac3
 800a984:	0800aac3 	.word	0x0800aac3
 800a988:	0800aac3 	.word	0x0800aac3
 800a98c:	0800aac3 	.word	0x0800aac3
 800a990:	0800aac3 	.word	0x0800aac3
 800a994:	0800aac3 	.word	0x0800aac3
 800a998:	0800aac3 	.word	0x0800aac3
 800a99c:	0800aac3 	.word	0x0800aac3
 800a9a0:	0800aac3 	.word	0x0800aac3
 800a9a4:	0800aac3 	.word	0x0800aac3
 800a9a8:	0800aac3 	.word	0x0800aac3
 800a9ac:	0800aac3 	.word	0x0800aac3
 800a9b0:	0800aac3 	.word	0x0800aac3
 800a9b4:	0800aac3 	.word	0x0800aac3
 800a9b8:	0800aac3 	.word	0x0800aac3
 800a9bc:	0800aac3 	.word	0x0800aac3
 800a9c0:	0800aac3 	.word	0x0800aac3
 800a9c4:	0800aac3 	.word	0x0800aac3
 800a9c8:	0800aac3 	.word	0x0800aac3
 800a9cc:	0800aac3 	.word	0x0800aac3
 800a9d0:	0800aac3 	.word	0x0800aac3
 800a9d4:	0800aac3 	.word	0x0800aac3
 800a9d8:	0800aac3 	.word	0x0800aac3
 800a9dc:	0800aac3 	.word	0x0800aac3
 800a9e0:	0800aac3 	.word	0x0800aac3
 800a9e4:	0800aac3 	.word	0x0800aac3
 800a9e8:	0800aac3 	.word	0x0800aac3
 800a9ec:	0800a9fd 	.word	0x0800a9fd
 800a9f0:	0800aa57 	.word	0x0800aa57
 800a9f4:	0800aaab 	.word	0x0800aaab
 800a9f8:	0800aac3 	.word	0x0800aac3
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	461a      	mov	r2, r3
 800aa02:	4b34      	ldr	r3, [pc, #208]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa04:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 800aa06:	4b33      	ldr	r3, [pc, #204]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	3201      	adds	r2, #1
 800aa0e:	7812      	ldrb	r2, [r2, #0]
 800aa10:	0212      	lsls	r2, r2, #8
 800aa12:	4313      	orrs	r3, r2
 800aa14:	4a2f      	ldr	r2, [pc, #188]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa16:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 800aa18:	4b2e      	ldr	r3, [pc, #184]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	683a      	ldr	r2, [r7, #0]
 800aa1e:	3202      	adds	r2, #2
 800aa20:	7812      	ldrb	r2, [r2, #0]
 800aa22:	0412      	lsls	r2, r2, #16
 800aa24:	4313      	orrs	r3, r2
 800aa26:	4a2b      	ldr	r2, [pc, #172]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa28:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 800aa2a:	4b2a      	ldr	r3, [pc, #168]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	3203      	adds	r2, #3
 800aa32:	7812      	ldrb	r2, [r2, #0]
 800aa34:	0612      	lsls	r2, r2, #24
 800aa36:	4313      	orrs	r3, r2
 800aa38:	4a26      	ldr	r2, [pc, #152]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa3a:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	791a      	ldrb	r2, [r3, #4]
 800aa40:	4b24      	ldr	r3, [pc, #144]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa42:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	795a      	ldrb	r2, [r3, #5]
 800aa48:	4b22      	ldr	r3, [pc, #136]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa4a:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	799a      	ldrb	r2, [r3, #6]
 800aa50:	4b20      	ldr	r3, [pc, #128]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa52:	719a      	strb	r2, [r3, #6]

    break;
 800aa54:	e036      	b.n	800aac4 <CDC_Control_FS+0x17c>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800aa56:	4b1f      	ldr	r3, [pc, #124]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	b2da      	uxtb	r2, r3
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 800aa60:	4b1c      	ldr	r3, [pc, #112]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	0a1a      	lsrs	r2, r3, #8
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	b2d2      	uxtb	r2, r2
 800aa6c:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 800aa6e:	4b19      	ldr	r3, [pc, #100]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	0c1a      	lsrs	r2, r3, #16
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	3302      	adds	r3, #2
 800aa78:	b2d2      	uxtb	r2, r2
 800aa7a:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 800aa7c:	4b15      	ldr	r3, [pc, #84]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	0e1a      	lsrs	r2, r3, #24
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	3303      	adds	r3, #3
 800aa86:	b2d2      	uxtb	r2, r2
 800aa88:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	4a11      	ldr	r2, [pc, #68]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa90:	7912      	ldrb	r2, [r2, #4]
 800aa92:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	3305      	adds	r3, #5
 800aa98:	4a0e      	ldr	r2, [pc, #56]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aa9a:	7952      	ldrb	r2, [r2, #5]
 800aa9c:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	3306      	adds	r3, #6
 800aaa2:	4a0c      	ldr	r2, [pc, #48]	; (800aad4 <CDC_Control_FS+0x18c>)
 800aaa4:	7992      	ldrb	r2, [r2, #6]
 800aaa6:	701a      	strb	r2, [r3, #0]

    break;
 800aaa8:	e00c      	b.n	800aac4 <CDC_Control_FS+0x17c>

    case CDC_SET_CONTROL_LINE_STATE:
      is_opened = req->wValue & 0x01;   // 0 bit: DTR, 1 bit: RTS
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	885b      	ldrh	r3, [r3, #2]
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	bf14      	ite	ne
 800aab6:	2301      	movne	r3, #1
 800aab8:	2300      	moveq	r3, #0
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	4b06      	ldr	r3, [pc, #24]	; (800aad8 <CDC_Control_FS+0x190>)
 800aabe:	701a      	strb	r2, [r3, #0]

    break;
 800aac0:	e000      	b.n	800aac4 <CDC_Control_FS+0x17c>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aac2:	bf00      	nop
  }

  return (USBD_OK);
 800aac4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	2000011c 	.word	0x2000011c
 800aad8:	200016d8 	.word	0x200016d8

0800aadc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aadc:	b590      	push	{r4, r7, lr}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  qbufferWrite(&q_rx, Buf, *Len);
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	461a      	mov	r2, r3
 800aaec:	6879      	ldr	r1, [r7, #4]
 800aaee:	480f      	ldr	r0, [pc, #60]	; (800ab2c <CDC_Receive_FS+0x50>)
 800aaf0:	f7f5 fec7 	bl	8000882 <qbufferWrite>


  uint32_t buf_len;

  buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 800aaf4:	4b0d      	ldr	r3, [pc, #52]	; (800ab2c <CDC_Receive_FS+0x50>)
 800aaf6:	689c      	ldr	r4, [r3, #8]
 800aaf8:	480c      	ldr	r0, [pc, #48]	; (800ab2c <CDC_Receive_FS+0x50>)
 800aafa:	f7f5 ff1e 	bl	800093a <qbufferAvailable>
 800aafe:	4603      	mov	r3, r0
 800ab00:	1ae3      	subs	r3, r4, r3
 800ab02:	3b01      	subs	r3, #1
 800ab04:	60fb      	str	r3, [r7, #12]

  if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2b3f      	cmp	r3, #63	; 0x3f
 800ab0a:	d907      	bls.n	800ab1c <CDC_Receive_FS+0x40>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ab0c:	6879      	ldr	r1, [r7, #4]
 800ab0e:	4808      	ldr	r0, [pc, #32]	; (800ab30 <CDC_Receive_FS+0x54>)
 800ab10:	f7fe fd6b 	bl	80095ea <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ab14:	4806      	ldr	r0, [pc, #24]	; (800ab30 <CDC_Receive_FS+0x54>)
 800ab16:	f7fe fd81 	bl	800961c <USBD_CDC_ReceivePacket>
 800ab1a:	e002      	b.n	800ab22 <CDC_Receive_FS+0x46>
  }
  else
  {
    is_rx_full = true;
 800ab1c:	4b05      	ldr	r3, [pc, #20]	; (800ab34 <CDC_Receive_FS+0x58>)
 800ab1e:	2201      	movs	r2, #1
 800ab20:	701a      	strb	r2, [r3, #0]
  }

    return (USBD_OK);
 800ab22:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd90      	pop	{r4, r7, pc}
 800ab2c:	200006b0 	.word	0x200006b0
 800ab30:	200003e0 	.word	0x200003e0
 800ab34:	200016d9 	.word	0x200016d9

0800ab38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b087      	sub	sp, #28
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	4613      	mov	r3, r2
 800ab44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ab4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	371c      	adds	r7, #28
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
	...

0800ab5c <cdcIfInit>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool cdcIfInit(void)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	af00      	add	r7, sp, #0
  is_opened = false;
 800ab60:	4b08      	ldr	r3, [pc, #32]	; (800ab84 <cdcIfInit+0x28>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	701a      	strb	r2, [r3, #0]
  qbufferCreate(&q_rx, q_rx_buf, 2048);
 800ab66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab6a:	4907      	ldr	r1, [pc, #28]	; (800ab88 <cdcIfInit+0x2c>)
 800ab6c:	4807      	ldr	r0, [pc, #28]	; (800ab8c <cdcIfInit+0x30>)
 800ab6e:	f7f5 fe6a 	bl	8000846 <qbufferCreate>
  qbufferCreate(&q_tx, q_tx_buf, 2048);
 800ab72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab76:	4906      	ldr	r1, [pc, #24]	; (800ab90 <cdcIfInit+0x34>)
 800ab78:	4806      	ldr	r0, [pc, #24]	; (800ab94 <cdcIfInit+0x38>)
 800ab7a:	f7f5 fe64 	bl	8000846 <qbufferCreate>

  return true;
 800ab7e:	2301      	movs	r3, #1
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	200016d8 	.word	0x200016d8
 800ab88:	200006d8 	.word	0x200006d8
 800ab8c:	200006b0 	.word	0x200006b0
 800ab90:	20000ed8 	.word	0x20000ed8
 800ab94:	200006c4 	.word	0x200006c4

0800ab98 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	4603      	mov	r3, r0
 800aba0:	6039      	str	r1, [r7, #0]
 800aba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	2212      	movs	r2, #18
 800aba8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800abaa:	4b03      	ldr	r3, [pc, #12]	; (800abb8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800abac:	4618      	mov	r0, r3
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	20000158 	.word	0x20000158

0800abbc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	4603      	mov	r3, r0
 800abc4:	6039      	str	r1, [r7, #0]
 800abc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	2204      	movs	r2, #4
 800abcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800abce:	4b03      	ldr	r3, [pc, #12]	; (800abdc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr
 800abdc:	2000016c 	.word	0x2000016c

0800abe0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	4603      	mov	r3, r0
 800abe8:	6039      	str	r1, [r7, #0]
 800abea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abec:	79fb      	ldrb	r3, [r7, #7]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d105      	bne.n	800abfe <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800abf2:	683a      	ldr	r2, [r7, #0]
 800abf4:	4907      	ldr	r1, [pc, #28]	; (800ac14 <USBD_CDC_ProductStrDescriptor+0x34>)
 800abf6:	4808      	ldr	r0, [pc, #32]	; (800ac18 <USBD_CDC_ProductStrDescriptor+0x38>)
 800abf8:	f7ff fd79 	bl	800a6ee <USBD_GetString>
 800abfc:	e004      	b.n	800ac08 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800abfe:	683a      	ldr	r2, [r7, #0]
 800ac00:	4904      	ldr	r1, [pc, #16]	; (800ac14 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ac02:	4805      	ldr	r0, [pc, #20]	; (800ac18 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ac04:	f7ff fd73 	bl	800a6ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac08:	4b02      	ldr	r3, [pc, #8]	; (800ac14 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	200026dc 	.word	0x200026dc
 800ac18:	0800b448 	.word	0x0800b448

0800ac1c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	4603      	mov	r3, r0
 800ac24:	6039      	str	r1, [r7, #0]
 800ac26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac28:	683a      	ldr	r2, [r7, #0]
 800ac2a:	4904      	ldr	r1, [pc, #16]	; (800ac3c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ac2c:	4804      	ldr	r0, [pc, #16]	; (800ac40 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ac2e:	f7ff fd5e 	bl	800a6ee <USBD_GetString>
  return USBD_StrDesc;
 800ac32:	4b02      	ldr	r3, [pc, #8]	; (800ac3c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	200026dc 	.word	0x200026dc
 800ac40:	0800b460 	.word	0x0800b460

0800ac44 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	6039      	str	r1, [r7, #0]
 800ac4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	221a      	movs	r2, #26
 800ac54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac56:	f000 f843 	bl	800ace0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ac5a:	4b02      	ldr	r3, [pc, #8]	; (800ac64 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	20000170 	.word	0x20000170

0800ac68 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	4603      	mov	r3, r0
 800ac70:	6039      	str	r1, [r7, #0]
 800ac72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac74:	79fb      	ldrb	r3, [r7, #7]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d105      	bne.n	800ac86 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	4907      	ldr	r1, [pc, #28]	; (800ac9c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac7e:	4808      	ldr	r0, [pc, #32]	; (800aca0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac80:	f7ff fd35 	bl	800a6ee <USBD_GetString>
 800ac84:	e004      	b.n	800ac90 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	4904      	ldr	r1, [pc, #16]	; (800ac9c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac8a:	4805      	ldr	r0, [pc, #20]	; (800aca0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac8c:	f7ff fd2f 	bl	800a6ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac90:	4b02      	ldr	r3, [pc, #8]	; (800ac9c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	200026dc 	.word	0x200026dc
 800aca0:	0800b474 	.word	0x0800b474

0800aca4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	4603      	mov	r3, r0
 800acac:	6039      	str	r1, [r7, #0]
 800acae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800acb0:	79fb      	ldrb	r3, [r7, #7]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d105      	bne.n	800acc2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	4907      	ldr	r1, [pc, #28]	; (800acd8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800acba:	4808      	ldr	r0, [pc, #32]	; (800acdc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800acbc:	f7ff fd17 	bl	800a6ee <USBD_GetString>
 800acc0:	e004      	b.n	800accc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	4904      	ldr	r1, [pc, #16]	; (800acd8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800acc6:	4805      	ldr	r0, [pc, #20]	; (800acdc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800acc8:	f7ff fd11 	bl	800a6ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800accc:	4b02      	ldr	r3, [pc, #8]	; (800acd8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	200026dc 	.word	0x200026dc
 800acdc:	0800b480 	.word	0x0800b480

0800ace0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ace6:	4b0f      	ldr	r3, [pc, #60]	; (800ad24 <Get_SerialNum+0x44>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800acec:	4b0e      	ldr	r3, [pc, #56]	; (800ad28 <Get_SerialNum+0x48>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800acf2:	4b0e      	ldr	r3, [pc, #56]	; (800ad2c <Get_SerialNum+0x4c>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4413      	add	r3, r2
 800acfe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d009      	beq.n	800ad1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad06:	2208      	movs	r2, #8
 800ad08:	4909      	ldr	r1, [pc, #36]	; (800ad30 <Get_SerialNum+0x50>)
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	f000 f814 	bl	800ad38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad10:	2204      	movs	r2, #4
 800ad12:	4908      	ldr	r1, [pc, #32]	; (800ad34 <Get_SerialNum+0x54>)
 800ad14:	68b8      	ldr	r0, [r7, #8]
 800ad16:	f000 f80f 	bl	800ad38 <IntToUnicode>
  }
}
 800ad1a:	bf00      	nop
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	1fff7590 	.word	0x1fff7590
 800ad28:	1fff7594 	.word	0x1fff7594
 800ad2c:	1fff7598 	.word	0x1fff7598
 800ad30:	20000172 	.word	0x20000172
 800ad34:	20000182 	.word	0x20000182

0800ad38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b087      	sub	sp, #28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	4613      	mov	r3, r2
 800ad44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad46:	2300      	movs	r3, #0
 800ad48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	75fb      	strb	r3, [r7, #23]
 800ad4e:	e027      	b.n	800ada0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	0f1b      	lsrs	r3, r3, #28
 800ad54:	2b09      	cmp	r3, #9
 800ad56:	d80b      	bhi.n	800ad70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	0f1b      	lsrs	r3, r3, #28
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	7dfb      	ldrb	r3, [r7, #23]
 800ad60:	005b      	lsls	r3, r3, #1
 800ad62:	4619      	mov	r1, r3
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	440b      	add	r3, r1
 800ad68:	3230      	adds	r2, #48	; 0x30
 800ad6a:	b2d2      	uxtb	r2, r2
 800ad6c:	701a      	strb	r2, [r3, #0]
 800ad6e:	e00a      	b.n	800ad86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	0f1b      	lsrs	r3, r3, #28
 800ad74:	b2da      	uxtb	r2, r3
 800ad76:	7dfb      	ldrb	r3, [r7, #23]
 800ad78:	005b      	lsls	r3, r3, #1
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	440b      	add	r3, r1
 800ad80:	3237      	adds	r2, #55	; 0x37
 800ad82:	b2d2      	uxtb	r2, r2
 800ad84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	011b      	lsls	r3, r3, #4
 800ad8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad8c:	7dfb      	ldrb	r3, [r7, #23]
 800ad8e:	005b      	lsls	r3, r3, #1
 800ad90:	3301      	adds	r3, #1
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	4413      	add	r3, r2
 800ad96:	2200      	movs	r2, #0
 800ad98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad9a:	7dfb      	ldrb	r3, [r7, #23]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	75fb      	strb	r3, [r7, #23]
 800ada0:	7dfa      	ldrb	r2, [r7, #23]
 800ada2:	79fb      	ldrb	r3, [r7, #7]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d3d3      	bcc.n	800ad50 <IntToUnicode+0x18>
  }
}
 800ada8:	bf00      	nop
 800adaa:	bf00      	nop
 800adac:	371c      	adds	r7, #28
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
	...

0800adb8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b098      	sub	sp, #96	; 0x60
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800adc0:	f107 030c 	add.w	r3, r7, #12
 800adc4:	2254      	movs	r2, #84	; 0x54
 800adc6:	2100      	movs	r1, #0
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 fb04 	bl	800b3d6 <memset>
  if(pcdHandle->Instance==USB)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a15      	ldr	r2, [pc, #84]	; (800ae28 <HAL_PCD_MspInit+0x70>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d123      	bne.n	800ae20 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800add8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800addc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800adde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ade2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ade4:	f107 030c 	add.w	r3, r7, #12
 800ade8:	4618      	mov	r0, r3
 800adea:	f7f9 f9a3 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800adf4:	f7f5 fc82 	bl	80006fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800adf8:	4b0c      	ldr	r3, [pc, #48]	; (800ae2c <HAL_PCD_MspInit+0x74>)
 800adfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adfc:	4a0b      	ldr	r2, [pc, #44]	; (800ae2c <HAL_PCD_MspInit+0x74>)
 800adfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae02:	6593      	str	r3, [r2, #88]	; 0x58
 800ae04:	4b09      	ldr	r3, [pc, #36]	; (800ae2c <HAL_PCD_MspInit+0x74>)
 800ae06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae0c:	60bb      	str	r3, [r7, #8]
 800ae0e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ae10:	2200      	movs	r2, #0
 800ae12:	2100      	movs	r1, #0
 800ae14:	2014      	movs	r0, #20
 800ae16:	f7f6 fb66 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ae1a:	2014      	movs	r0, #20
 800ae1c:	f7f6 fb7d 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae20:	bf00      	nop
 800ae22:	3760      	adds	r7, #96	; 0x60
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	40005c00 	.word	0x40005c00
 800ae2c:	40021000 	.word	0x40021000

0800ae30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800ae44:	4619      	mov	r1, r3
 800ae46:	4610      	mov	r0, r2
 800ae48:	f7fe fcb4 	bl	80097b4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ae4c:	bf00      	nop
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800ae66:	78fa      	ldrb	r2, [r7, #3]
 800ae68:	6879      	ldr	r1, [r7, #4]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	00db      	lsls	r3, r3, #3
 800ae72:	440b      	add	r3, r1
 800ae74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	78fb      	ldrb	r3, [r7, #3]
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	f7fe fcee 	bl	800985e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ae82:	bf00      	nop
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b082      	sub	sp, #8
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	460b      	mov	r3, r1
 800ae94:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800ae9c:	78fa      	ldrb	r2, [r7, #3]
 800ae9e:	6879      	ldr	r1, [r7, #4]
 800aea0:	4613      	mov	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	00db      	lsls	r3, r3, #3
 800aea8:	440b      	add	r3, r1
 800aeaa:	3324      	adds	r3, #36	; 0x24
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	78fb      	ldrb	r3, [r7, #3]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	f7fe fd37 	bl	8009924 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800aeb6:	bf00      	nop
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fe fe4b 	bl	8009b68 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800aed2:	bf00      	nop
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b084      	sub	sp, #16
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aee2:	2301      	movs	r3, #1
 800aee4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	795b      	ldrb	r3, [r3, #5]
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d001      	beq.n	800aef2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aeee:	f7f5 fc05 	bl	80006fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aef8:	7bfa      	ldrb	r2, [r7, #15]
 800aefa:	4611      	mov	r1, r2
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fe fdf5 	bl	8009aec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fe fda1 	bl	8009a50 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800af0e:	bf00      	nop
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800af26:	4618      	mov	r0, r3
 800af28:	f7fe fdf0 	bl	8009b0c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	7a5b      	ldrb	r3, [r3, #9]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d005      	beq.n	800af40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af34:	4b04      	ldr	r3, [pc, #16]	; (800af48 <HAL_PCD_SuspendCallback+0x30>)
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	4a03      	ldr	r2, [pc, #12]	; (800af48 <HAL_PCD_SuspendCallback+0x30>)
 800af3a:	f043 0306 	orr.w	r3, r3, #6
 800af3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800af40:	bf00      	nop
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	e000ed00 	.word	0xe000ed00

0800af4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	7a5b      	ldrb	r3, [r3, #9]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d007      	beq.n	800af6c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af5c:	4b08      	ldr	r3, [pc, #32]	; (800af80 <HAL_PCD_ResumeCallback+0x34>)
 800af5e:	691b      	ldr	r3, [r3, #16]
 800af60:	4a07      	ldr	r2, [pc, #28]	; (800af80 <HAL_PCD_ResumeCallback+0x34>)
 800af62:	f023 0306 	bic.w	r3, r3, #6
 800af66:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800af68:	f000 f9f8 	bl	800b35c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800af72:	4618      	mov	r0, r3
 800af74:	f7fe fde0 	bl	8009b38 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800af78:	bf00      	nop
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	e000ed00 	.word	0xe000ed00

0800af84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800af8c:	4a2b      	ldr	r2, [pc, #172]	; (800b03c <USBD_LL_Init+0xb8>)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a29      	ldr	r2, [pc, #164]	; (800b03c <USBD_LL_Init+0xb8>)
 800af98:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800af9c:	4b27      	ldr	r3, [pc, #156]	; (800b03c <USBD_LL_Init+0xb8>)
 800af9e:	4a28      	ldr	r2, [pc, #160]	; (800b040 <USBD_LL_Init+0xbc>)
 800afa0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800afa2:	4b26      	ldr	r3, [pc, #152]	; (800b03c <USBD_LL_Init+0xb8>)
 800afa4:	2208      	movs	r2, #8
 800afa6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800afa8:	4b24      	ldr	r3, [pc, #144]	; (800b03c <USBD_LL_Init+0xb8>)
 800afaa:	2202      	movs	r2, #2
 800afac:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800afae:	4b23      	ldr	r3, [pc, #140]	; (800b03c <USBD_LL_Init+0xb8>)
 800afb0:	2202      	movs	r2, #2
 800afb2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800afb4:	4b21      	ldr	r3, [pc, #132]	; (800b03c <USBD_LL_Init+0xb8>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800afba:	4b20      	ldr	r3, [pc, #128]	; (800b03c <USBD_LL_Init+0xb8>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800afc0:	4b1e      	ldr	r3, [pc, #120]	; (800b03c <USBD_LL_Init+0xb8>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800afc6:	4b1d      	ldr	r3, [pc, #116]	; (800b03c <USBD_LL_Init+0xb8>)
 800afc8:	2200      	movs	r2, #0
 800afca:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800afcc:	481b      	ldr	r0, [pc, #108]	; (800b03c <USBD_LL_Init+0xb8>)
 800afce:	f7f6 fd19 	bl	8001a04 <HAL_PCD_Init>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d001      	beq.n	800afdc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800afd8:	f7f5 fb90 	bl	80006fc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800afe2:	2318      	movs	r3, #24
 800afe4:	2200      	movs	r2, #0
 800afe6:	2100      	movs	r1, #0
 800afe8:	f7f8 f9d3 	bl	8003392 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aff2:	2358      	movs	r3, #88	; 0x58
 800aff4:	2200      	movs	r2, #0
 800aff6:	2180      	movs	r1, #128	; 0x80
 800aff8:	f7f8 f9cb 	bl	8003392 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b002:	23c0      	movs	r3, #192	; 0xc0
 800b004:	2200      	movs	r2, #0
 800b006:	2181      	movs	r1, #129	; 0x81
 800b008:	f7f8 f9c3 	bl	8003392 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b012:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b016:	2200      	movs	r2, #0
 800b018:	2101      	movs	r1, #1
 800b01a:	f7f8 f9ba 	bl	8003392 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b024:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b028:	2200      	movs	r2, #0
 800b02a:	2182      	movs	r1, #130	; 0x82
 800b02c:	f7f8 f9b1 	bl	8003392 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	200028dc 	.word	0x200028dc
 800b040:	40005c00 	.word	0x40005c00

0800b044 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b050:	2300      	movs	r3, #0
 800b052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7f6 fda0 	bl	8001ba0 <HAL_PCD_Start>
 800b060:	4603      	mov	r3, r0
 800b062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b064:	7bfb      	ldrb	r3, [r7, #15]
 800b066:	4618      	mov	r0, r3
 800b068:	f000 f97e 	bl	800b368 <USBD_Get_USB_Status>
 800b06c:	4603      	mov	r3, r0
 800b06e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b070:	7bbb      	ldrb	r3, [r7, #14]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b084      	sub	sp, #16
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	4608      	mov	r0, r1
 800b084:	4611      	mov	r1, r2
 800b086:	461a      	mov	r2, r3
 800b088:	4603      	mov	r3, r0
 800b08a:	70fb      	strb	r3, [r7, #3]
 800b08c:	460b      	mov	r3, r1
 800b08e:	70bb      	strb	r3, [r7, #2]
 800b090:	4613      	mov	r3, r2
 800b092:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b094:	2300      	movs	r3, #0
 800b096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b098:	2300      	movs	r3, #0
 800b09a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b0a2:	78bb      	ldrb	r3, [r7, #2]
 800b0a4:	883a      	ldrh	r2, [r7, #0]
 800b0a6:	78f9      	ldrb	r1, [r7, #3]
 800b0a8:	f7f6 fee7 	bl	8001e7a <HAL_PCD_EP_Open>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f000 f958 	bl	800b368 <USBD_Get_USB_Status>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b084      	sub	sp, #16
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0e0:	78fa      	ldrb	r2, [r7, #3]
 800b0e2:	4611      	mov	r1, r2
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7f6 ff25 	bl	8001f34 <HAL_PCD_EP_Close>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0ee:	7bfb      	ldrb	r3, [r7, #15]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f000 f939 	bl	800b368 <USBD_Get_USB_Status>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	460b      	mov	r3, r1
 800b10e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b110:	2300      	movs	r3, #0
 800b112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b114:	2300      	movs	r3, #0
 800b116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b11e:	78fa      	ldrb	r2, [r7, #3]
 800b120:	4611      	mov	r1, r2
 800b122:	4618      	mov	r0, r3
 800b124:	f7f6 ffce 	bl	80020c4 <HAL_PCD_EP_SetStall>
 800b128:	4603      	mov	r3, r0
 800b12a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 f91a 	bl	800b368 <USBD_Get_USB_Status>
 800b134:	4603      	mov	r3, r0
 800b136:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b138:	7bbb      	ldrb	r3, [r7, #14]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b084      	sub	sp, #16
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	460b      	mov	r3, r1
 800b14c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b14e:	2300      	movs	r3, #0
 800b150:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b15c:	78fa      	ldrb	r2, [r7, #3]
 800b15e:	4611      	mov	r1, r2
 800b160:	4618      	mov	r0, r3
 800b162:	f7f7 f801 	bl	8002168 <HAL_PCD_EP_ClrStall>
 800b166:	4603      	mov	r3, r0
 800b168:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
 800b16c:	4618      	mov	r0, r3
 800b16e:	f000 f8fb 	bl	800b368 <USBD_Get_USB_Status>
 800b172:	4603      	mov	r3, r0
 800b174:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b176:	7bbb      	ldrb	r3, [r7, #14]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b192:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	da0b      	bge.n	800b1b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b19c:	78fb      	ldrb	r3, [r7, #3]
 800b19e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1a2:	68f9      	ldr	r1, [r7, #12]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	00db      	lsls	r3, r3, #3
 800b1ac:	440b      	add	r3, r1
 800b1ae:	3312      	adds	r3, #18
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	e00b      	b.n	800b1cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1b4:	78fb      	ldrb	r3, [r7, #3]
 800b1b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1ba:	68f9      	ldr	r1, [r7, #12]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	00db      	lsls	r3, r3, #3
 800b1c4:	440b      	add	r3, r1
 800b1c6:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800b1ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1f2:	78fa      	ldrb	r2, [r7, #3]
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7f6 fe1b 	bl	8001e32 <HAL_PCD_SetAddress>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b200:	7bfb      	ldrb	r3, [r7, #15]
 800b202:	4618      	mov	r0, r3
 800b204:	f000 f8b0 	bl	800b368 <USBD_Get_USB_Status>
 800b208:	4603      	mov	r3, r0
 800b20a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b20c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b086      	sub	sp, #24
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	60f8      	str	r0, [r7, #12]
 800b21e:	607a      	str	r2, [r7, #4]
 800b220:	603b      	str	r3, [r7, #0]
 800b222:	460b      	mov	r3, r1
 800b224:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b22a:	2300      	movs	r3, #0
 800b22c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b234:	7af9      	ldrb	r1, [r7, #11]
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	f7f6 ff0c 	bl	8002056 <HAL_PCD_EP_Transmit>
 800b23e:	4603      	mov	r3, r0
 800b240:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b242:	7dfb      	ldrb	r3, [r7, #23]
 800b244:	4618      	mov	r0, r3
 800b246:	f000 f88f 	bl	800b368 <USBD_Get_USB_Status>
 800b24a:	4603      	mov	r3, r0
 800b24c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b24e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3718      	adds	r7, #24
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	607a      	str	r2, [r7, #4]
 800b262:	603b      	str	r3, [r7, #0]
 800b264:	460b      	mov	r3, r1
 800b266:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b268:	2300      	movs	r3, #0
 800b26a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b276:	7af9      	ldrb	r1, [r7, #11]
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	f7f6 fea2 	bl	8001fc4 <HAL_PCD_EP_Receive>
 800b280:	4603      	mov	r3, r0
 800b282:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b284:	7dfb      	ldrb	r3, [r7, #23]
 800b286:	4618      	mov	r0, r3
 800b288:	f000 f86e 	bl	800b368 <USBD_Get_USB_Status>
 800b28c:	4603      	mov	r3, r0
 800b28e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b290:	7dbb      	ldrb	r3, [r7, #22]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3718      	adds	r7, #24
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b082      	sub	sp, #8
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2ac:	78fa      	ldrb	r2, [r7, #3]
 800b2ae:	4611      	mov	r1, r2
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7f6 feb8 	bl	8002026 <HAL_PCD_EP_GetRxCount>
 800b2b6:	4603      	mov	r3, r0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b2cc:	78fb      	ldrb	r3, [r7, #3]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d002      	beq.n	800b2d8 <HAL_PCDEx_LPM_Callback+0x18>
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d013      	beq.n	800b2fe <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b2d6:	e023      	b.n	800b320 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	7a5b      	ldrb	r3, [r3, #9]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d007      	beq.n	800b2f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b2e0:	f000 f83c 	bl	800b35c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2e4:	4b10      	ldr	r3, [pc, #64]	; (800b328 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	4a0f      	ldr	r2, [pc, #60]	; (800b328 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2ea:	f023 0306 	bic.w	r3, r3, #6
 800b2ee:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fe fc1e 	bl	8009b38 <USBD_LL_Resume>
    break;
 800b2fc:	e010      	b.n	800b320 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b304:	4618      	mov	r0, r3
 800b306:	f7fe fc01 	bl	8009b0c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	7a5b      	ldrb	r3, [r3, #9]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d005      	beq.n	800b31e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b312:	4b05      	ldr	r3, [pc, #20]	; (800b328 <HAL_PCDEx_LPM_Callback+0x68>)
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	4a04      	ldr	r2, [pc, #16]	; (800b328 <HAL_PCDEx_LPM_Callback+0x68>)
 800b318:	f043 0306 	orr.w	r3, r3, #6
 800b31c:	6113      	str	r3, [r2, #16]
    break;
 800b31e:	bf00      	nop
}
 800b320:	bf00      	nop
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	e000ed00 	.word	0xe000ed00

0800b32c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b334:	4b03      	ldr	r3, [pc, #12]	; (800b344 <USBD_static_malloc+0x18>)
}
 800b336:	4618      	mov	r0, r3
 800b338:	370c      	adds	r7, #12
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	20002bb8 	.word	0x20002bb8

0800b348 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]

}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b360:	f7f5 f972 	bl	8000648 <SystemClock_Config>
}
 800b364:	bf00      	nop
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	4603      	mov	r3, r0
 800b370:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b376:	79fb      	ldrb	r3, [r7, #7]
 800b378:	2b03      	cmp	r3, #3
 800b37a:	d817      	bhi.n	800b3ac <USBD_Get_USB_Status+0x44>
 800b37c:	a201      	add	r2, pc, #4	; (adr r2, 800b384 <USBD_Get_USB_Status+0x1c>)
 800b37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b382:	bf00      	nop
 800b384:	0800b395 	.word	0x0800b395
 800b388:	0800b39b 	.word	0x0800b39b
 800b38c:	0800b3a1 	.word	0x0800b3a1
 800b390:	0800b3a7 	.word	0x0800b3a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b394:	2300      	movs	r3, #0
 800b396:	73fb      	strb	r3, [r7, #15]
    break;
 800b398:	e00b      	b.n	800b3b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b39a:	2303      	movs	r3, #3
 800b39c:	73fb      	strb	r3, [r7, #15]
    break;
 800b39e:	e008      	b.n	800b3b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a4:	e005      	b.n	800b3b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	73fb      	strb	r3, [r7, #15]
    break;
 800b3aa:	e002      	b.n	800b3b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b0:	bf00      	nop
  }
  return usb_status;
 800b3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3714      	adds	r7, #20
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <main>:


#include "main.h"

int main(void)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	af00      	add	r7, sp, #0
  hwInit();
 800b3c4:	f7f5 feaa 	bl	800111c <hwInit>
  apInit();
 800b3c8:	f7f5 f8a4 	bl	8000514 <apInit>

  apMain();
 800b3cc:	f7f5 f8a9 	bl	8000522 <apMain>
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <memset>:
 800b3d6:	4402      	add	r2, r0
 800b3d8:	4603      	mov	r3, r0
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d100      	bne.n	800b3e0 <memset+0xa>
 800b3de:	4770      	bx	lr
 800b3e0:	f803 1b01 	strb.w	r1, [r3], #1
 800b3e4:	e7f9      	b.n	800b3da <memset+0x4>
	...

0800b3e8 <__libc_init_array>:
 800b3e8:	b570      	push	{r4, r5, r6, lr}
 800b3ea:	4d0d      	ldr	r5, [pc, #52]	; (800b420 <__libc_init_array+0x38>)
 800b3ec:	4c0d      	ldr	r4, [pc, #52]	; (800b424 <__libc_init_array+0x3c>)
 800b3ee:	1b64      	subs	r4, r4, r5
 800b3f0:	10a4      	asrs	r4, r4, #2
 800b3f2:	2600      	movs	r6, #0
 800b3f4:	42a6      	cmp	r6, r4
 800b3f6:	d109      	bne.n	800b40c <__libc_init_array+0x24>
 800b3f8:	4d0b      	ldr	r5, [pc, #44]	; (800b428 <__libc_init_array+0x40>)
 800b3fa:	4c0c      	ldr	r4, [pc, #48]	; (800b42c <__libc_init_array+0x44>)
 800b3fc:	f000 f818 	bl	800b430 <_init>
 800b400:	1b64      	subs	r4, r4, r5
 800b402:	10a4      	asrs	r4, r4, #2
 800b404:	2600      	movs	r6, #0
 800b406:	42a6      	cmp	r6, r4
 800b408:	d105      	bne.n	800b416 <__libc_init_array+0x2e>
 800b40a:	bd70      	pop	{r4, r5, r6, pc}
 800b40c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b410:	4798      	blx	r3
 800b412:	3601      	adds	r6, #1
 800b414:	e7ee      	b.n	800b3f4 <__libc_init_array+0xc>
 800b416:	f855 3b04 	ldr.w	r3, [r5], #4
 800b41a:	4798      	blx	r3
 800b41c:	3601      	adds	r6, #1
 800b41e:	e7f2      	b.n	800b406 <__libc_init_array+0x1e>
 800b420:	0800b4ec 	.word	0x0800b4ec
 800b424:	0800b4ec 	.word	0x0800b4ec
 800b428:	0800b4ec 	.word	0x0800b4ec
 800b42c:	0800b4f0 	.word	0x0800b4f0

0800b430 <_init>:
 800b430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b432:	bf00      	nop
 800b434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b436:	bc08      	pop	{r3}
 800b438:	469e      	mov	lr, r3
 800b43a:	4770      	bx	lr

0800b43c <_fini>:
 800b43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43e:	bf00      	nop
 800b440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b442:	bc08      	pop	{r3}
 800b444:	469e      	mov	lr, r3
 800b446:	4770      	bx	lr
