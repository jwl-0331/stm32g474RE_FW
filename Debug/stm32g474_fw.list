
stm32g474_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001620  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080017f8  080017f8  000117f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001810  08001810  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001810  08001810  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001810  08001810  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001810  08001810  00011810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001814  08001814  00011814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000024  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   00004de9  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001466  00000000  00000000  00024e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000640  00000000  00000000  000262d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000047e  00000000  00000000  00026918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002541c  00000000  00000000  00026d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000092bd  00000000  00000000  0004c1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e8452  00000000  00000000  0005546f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001600  00000000  00000000  0013d8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0013eec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080017e0 	.word	0x080017e0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	080017e0 	.word	0x080017e0

08000218 <apInit>:

static uint32_t g_LEDOnTime = 1000;
static uint32_t g_LEDOffTime = 200;
static uint32_t nextmill = 0;
void apInit(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0

}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
	...

08000228 <apMain>:

void apMain(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0

  uint32_t pre_time = millis();
 800022e:	f000 f86b 	bl	8000308 <millis>
 8000232:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
    }
    */

    /* LED On Off - by time*/
    bool blinkOn = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000234:	2120      	movs	r1, #32
 8000236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023a:	f000 fcbf 	bl	8000bbc <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	bf14      	ite	ne
 8000244:	2301      	movne	r3, #1
 8000246:	2300      	moveq	r3, #0
 8000248:	70fb      	strb	r3, [r7, #3]
    if(blinkOn && millis() > nextmill)
 800024a:	78fb      	ldrb	r3, [r7, #3]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d014      	beq.n	800027a <apMain+0x52>
 8000250:	f000 f85a 	bl	8000308 <millis>
 8000254:	4602      	mov	r2, r0
 8000256:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <apMain+0x88>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	429a      	cmp	r2, r3
 800025c:	d90d      	bls.n	800027a <apMain+0x52>
    {
      ledOff(_DEF_LED1);
 800025e:	2000      	movs	r0, #0
 8000260:	f000 f99a 	bl	8000598 <ledOff>
      blinkOn = false;
 8000264:	2300      	movs	r3, #0
 8000266:	70fb      	strb	r3, [r7, #3]
      nextmill = millis() + g_LEDOffTime;
 8000268:	f000 f84e 	bl	8000308 <millis>
 800026c:	4602      	mov	r2, r0
 800026e:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <apMain+0x8c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4413      	add	r3, r2
 8000274:	4a0e      	ldr	r2, [pc, #56]	; (80002b0 <apMain+0x88>)
 8000276:	6013      	str	r3, [r2, #0]
 8000278:	e019      	b.n	80002ae <apMain+0x86>
    }
    else if(!blinkOn && millis() > nextmill)
 800027a:	78fb      	ldrb	r3, [r7, #3]
 800027c:	f083 0301 	eor.w	r3, r3, #1
 8000280:	b2db      	uxtb	r3, r3
 8000282:	2b00      	cmp	r3, #0
 8000284:	d0d6      	beq.n	8000234 <apMain+0xc>
 8000286:	f000 f83f 	bl	8000308 <millis>
 800028a:	4602      	mov	r2, r0
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <apMain+0x88>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	429a      	cmp	r2, r3
 8000292:	d9cf      	bls.n	8000234 <apMain+0xc>
    {
      ledOn(_DEF_LED1);
 8000294:	2000      	movs	r0, #0
 8000296:	f000 f95f 	bl	8000558 <ledOn>
      blinkOn = true;
 800029a:	2301      	movs	r3, #1
 800029c:	70fb      	strb	r3, [r7, #3]
      nextmill = millis() + g_LEDOnTime;
 800029e:	f000 f833 	bl	8000308 <millis>
 80002a2:	4602      	mov	r2, r0
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <apMain+0x90>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4413      	add	r3, r2
 80002aa:	4a01      	ldr	r2, [pc, #4]	; (80002b0 <apMain+0x88>)
 80002ac:	6013      	str	r3, [r2, #0]
  {
 80002ae:	e7c1      	b.n	8000234 <apMain+0xc>
 80002b0:	20000030 	.word	0x20000030
 80002b4:	20000004 	.word	0x20000004
 80002b8:	20000000 	.word	0x20000000

080002bc <bspInit>:
 */
#include "bsp.h"
void SystemClock_Config(void);

bool bspInit(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
  HAL_Init();
 80002c2:	f000 f9a5 	bl	8000610 <HAL_Init>
  SystemClock_Config();
 80002c6:	f000 f826 	bl	8000316 <SystemClock_Config>

  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <bspInit+0x48>)
 80002cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ce:	4a0d      	ldr	r2, [pc, #52]	; (8000304 <bspInit+0x48>)
 80002d0:	f043 0320 	orr.w	r3, r3, #32
 80002d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002d6:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <bspInit+0x48>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002da:	f003 0320 	and.w	r3, r3, #32
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <bspInit+0x48>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	4a07      	ldr	r2, [pc, #28]	; (8000304 <bspInit+0x48>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ee:	4b05      	ldr	r3, [pc, #20]	; (8000304 <bspInit+0x48>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	603b      	str	r3, [r7, #0]
 80002f8:	683b      	ldr	r3, [r7, #0]

  return true;
 80002fa:	2301      	movs	r3, #1
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40021000 	.word	0x40021000

08000308 <millis>:
{
  HAL_Delay(time_ms);
}

uint32_t millis(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800030c:	f000 f9e4 	bl	80006d8 <HAL_GetTick>
 8000310:	4603      	mov	r3, r0
}
 8000312:	4618      	mov	r0, r3
 8000314:	bd80      	pop	{r7, pc}

08000316 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000316:	b580      	push	{r7, lr}
 8000318:	b094      	sub	sp, #80	; 0x50
 800031a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031c:	f107 0318 	add.w	r3, r7, #24
 8000320:	2238      	movs	r2, #56	; 0x38
 8000322:	2100      	movs	r1, #0
 8000324:	4618      	mov	r0, r3
 8000326:	f001 fa2e 	bl	8001786 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
 8000336:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000338:	f44f 7000 	mov.w	r0, #512	; 0x200
 800033c:	f000 fc6e 	bl	8000c1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000340:	2309      	movs	r3, #9
 8000342:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000348:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800034a:	2301      	movs	r3, #1
 800034c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034e:	2302      	movs	r3, #2
 8000350:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000352:	2303      	movs	r3, #3
 8000354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8000356:	2303      	movs	r3, #3
 8000358:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800035a:	2314      	movs	r3, #20
 800035c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800035e:	2302      	movs	r3, #2
 8000360:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000362:	2302      	movs	r3, #2
 8000364:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000366:	2302      	movs	r3, #2
 8000368:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036a:	f107 0318 	add.w	r3, r7, #24
 800036e:	4618      	mov	r0, r3
 8000370:	f000 fd08 	bl	8000d84 <HAL_RCC_OscConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x68>
  {
    Error_Handler();
 800037a:	f000 f818 	bl	80003ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037e:	230f      	movs	r3, #15
 8000380:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000382:	2303      	movs	r3, #3
 8000384:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2102      	movs	r1, #2
 8000396:	4618      	mov	r0, r3
 8000398:	f001 f806 	bl	80013a8 <HAL_RCC_ClockConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003a2:	f000 f804 	bl	80003ae <Error_Handler>
  }
}
 80003a6:	bf00      	nop
 80003a8:	3750      	adds	r7, #80	; 0x50
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <Error_Handler>:

void Error_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0

}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <HAL_MspInit+0x44>)
 80003c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003c6:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <HAL_MspInit+0x44>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6613      	str	r3, [r2, #96]	; 0x60
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <HAL_MspInit+0x44>)
 80003d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <HAL_MspInit+0x44>)
 80003dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003de:	4a08      	ldr	r2, [pc, #32]	; (8000400 <HAL_MspInit+0x44>)
 80003e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e4:	6593      	str	r3, [r2, #88]	; 0x58
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <HAL_MspInit+0x44>)
 80003e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ee:	603b      	str	r3, [r7, #0]
 80003f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80003f2:	f000 fcb7 	bl	8000d64 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000

08000404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000408:	e7fe      	b.n	8000408 <NMI_Handler+0x4>

0800040a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800040e:	e7fe      	b.n	800040e <HardFault_Handler+0x4>

08000410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000414:	e7fe      	b.n	8000414 <MemManage_Handler+0x4>

08000416 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800041a:	e7fe      	b.n	800041a <BusFault_Handler+0x4>

0800041c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <UsageFault_Handler+0x4>

08000422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000450:	f000 f930 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}

08000458 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <SystemInit+0x20>)
 800045e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000462:	4a05      	ldr	r2, [pc, #20]	; (8000478 <SystemInit+0x20>)
 8000464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800047c:	480d      	ldr	r0, [pc, #52]	; (80004b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000480:	f7ff ffea 	bl	8000458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000484:	480c      	ldr	r0, [pc, #48]	; (80004b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000486:	490d      	ldr	r1, [pc, #52]	; (80004bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000488:	4a0d      	ldr	r2, [pc, #52]	; (80004c0 <LoopForever+0xe>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800048c:	e002      	b.n	8000494 <LoopCopyDataInit>

0800048e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000492:	3304      	adds	r3, #4

08000494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000498:	d3f9      	bcc.n	800048e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049a:	4a0a      	ldr	r2, [pc, #40]	; (80004c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800049c:	4c0a      	ldr	r4, [pc, #40]	; (80004c8 <LoopForever+0x16>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a0:	e001      	b.n	80004a6 <LoopFillZerobss>

080004a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a4:	3204      	adds	r2, #4

080004a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a8:	d3fb      	bcc.n	80004a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004aa:	f001 f975 	bl	8001798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ae:	f001 f95f 	bl	8001770 <main>

080004b2 <LoopForever>:

LoopForever:
  b LoopForever
 80004b2:	e7fe      	b.n	80004b2 <LoopForever>
  ldr   r0, =_estack
 80004b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80004c0:	08001818 	.word	0x08001818
  ldr r2, =_sbss
 80004c4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80004c8:	20000038 	.word	0x20000038

080004cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC1_2_IRQHandler>
	...

080004d0 <ledInit>:




bool ledInit(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 80004d6:	f107 0308 	add.w	r3, r7, #8
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <ledInit+0x80>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	4a19      	ldr	r2, [pc, #100]	; (8000550 <ledInit+0x80>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <ledInit+0x80>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 800050a:	2300      	movs	r3, #0
 800050c:	61fb      	str	r3, [r7, #28]
 800050e:	e017      	b.n	8000540 <ledInit+0x70>
  {
    GPIO_InitStructure.Pin = led_tbl[i].pin;
 8000510:	4a10      	ldr	r2, [pc, #64]	; (8000554 <ledInit+0x84>)
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	00db      	lsls	r3, r3, #3
 8000516:	4413      	add	r3, r2
 8000518:	889b      	ldrh	r3, [r3, #4]
 800051a:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <ledInit+0x84>)
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000524:	f107 0208 	add.w	r2, r7, #8
 8000528:	4611      	mov	r1, r2
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f9c4 	bl	80008b8 <HAL_GPIO_Init>

    ledOff(i);
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f82f 	bl	8000598 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	3301      	adds	r3, #1
 800053e:	61fb      	str	r3, [r7, #28]
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	2b00      	cmp	r3, #0
 8000544:	dde4      	ble.n	8000510 <ledInit+0x40>
  }
  return true;
 8000546:	2301      	movs	r3, #1
}
 8000548:	4618      	mov	r0, r3
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40021000 	.word	0x40021000
 8000554:	08001808 	.word	0x08001808

08000558 <ledOn>:


void ledOn(uint8_t ch)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d111      	bne.n	800058c <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <ledOn+0x3c>)
 800056c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	4a08      	ldr	r2, [pc, #32]	; (8000594 <ledOn+0x3c>)
 8000574:	00db      	lsls	r3, r3, #3
 8000576:	4413      	add	r3, r2
 8000578:	8899      	ldrh	r1, [r3, #4]
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	4a05      	ldr	r2, [pc, #20]	; (8000594 <ledOn+0x3c>)
 800057e:	00db      	lsls	r3, r3, #3
 8000580:	4413      	add	r3, r2
 8000582:	799b      	ldrb	r3, [r3, #6]
 8000584:	461a      	mov	r2, r3
 8000586:	f000 fb31 	bl	8000bec <HAL_GPIO_WritePin>
 800058a:	e000      	b.n	800058e <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 800058c:	bf00      	nop
}
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	08001808 	.word	0x08001808

08000598 <ledOff>:

void ledOff(uint8_t ch)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d10d      	bne.n	80005c4 <ledOff+0x2c>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	4a08      	ldr	r2, [pc, #32]	; (80005cc <ledOff+0x34>)
 80005ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	4a06      	ldr	r2, [pc, #24]	; (80005cc <ledOff+0x34>)
 80005b4:	00db      	lsls	r3, r3, #3
 80005b6:	4413      	add	r3, r2
 80005b8:	889b      	ldrh	r3, [r3, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	4619      	mov	r1, r3
 80005be:	f000 fb15 	bl	8000bec <HAL_GPIO_WritePin>
 80005c2:	e000      	b.n	80005c6 <ledOff+0x2e>
  if (ch >= LED_MAX_CH) return;
 80005c4:	bf00      	nop
}
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	08001808 	.word	0x08001808

080005d0 <hwInit>:
 *      Author: mm940
 */
#include "hw.h"

bool hwInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  bool ret = true;
 80005d6:	2301      	movs	r3, #1
 80005d8:	71fb      	strb	r3, [r7, #7]

  ret &= bspInit();
 80005da:	f7ff fe6f 	bl	80002bc <bspInit>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	4013      	ands	r3, r2
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	bf14      	ite	ne
 80005ea:	2301      	movne	r3, #1
 80005ec:	2300      	moveq	r3, #0
 80005ee:	71fb      	strb	r3, [r7, #7]
  ret &= ledInit();
 80005f0:	f7ff ff6e 	bl	80004d0 <ledInit>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	4013      	ands	r3, r2
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf14      	ite	ne
 8000600:	2301      	movne	r3, #1
 8000602:	2300      	moveq	r3, #0
 8000604:	71fb      	strb	r3, [r7, #7]

  return ret;
 8000606:	79fb      	ldrb	r3, [r7, #7]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800061a:	2003      	movs	r0, #3
 800061c:	f000 f91a 	bl	8000854 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000620:	200f      	movs	r0, #15
 8000622:	f000 f80d 	bl	8000640 <HAL_InitTick>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	e001      	b.n	8000636 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000632:	f7ff fec3 	bl	80003bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000636:	79fb      	ldrb	r3, [r7, #7]

}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <HAL_InitTick+0x68>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d022      	beq.n	800069a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <HAL_InitTick+0x6c>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <HAL_InitTick+0x68>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000660:	fbb1 f3f3 	udiv	r3, r1, r3
 8000664:	fbb2 f3f3 	udiv	r3, r2, r3
 8000668:	4618      	mov	r0, r3
 800066a:	f000 f918 	bl	800089e <HAL_SYSTICK_Config>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d10f      	bne.n	8000694 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b0f      	cmp	r3, #15
 8000678:	d809      	bhi.n	800068e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800067a:	2200      	movs	r2, #0
 800067c:	6879      	ldr	r1, [r7, #4]
 800067e:	f04f 30ff 	mov.w	r0, #4294967295
 8000682:	f000 f8f2 	bl	800086a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <HAL_InitTick+0x70>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	e007      	b.n	800069e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	e004      	b.n	800069e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000694:	2301      	movs	r3, #1
 8000696:	73fb      	strb	r3, [r7, #15]
 8000698:	e001      	b.n	800069e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800069a:	2301      	movs	r3, #1
 800069c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800069e:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000010 	.word	0x20000010
 80006ac:	20000008 	.word	0x20000008
 80006b0:	2000000c 	.word	0x2000000c

080006b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_IncTick+0x1c>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_IncTick+0x20>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4413      	add	r3, r2
 80006c2:	4a03      	ldr	r2, [pc, #12]	; (80006d0 <HAL_IncTick+0x1c>)
 80006c4:	6013      	str	r3, [r2, #0]
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	20000034 	.word	0x20000034
 80006d4:	20000010 	.word	0x20000010

080006d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return uwTick;
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <HAL_GetTick+0x14>)
 80006de:	681b      	ldr	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000034 	.word	0x20000034

080006f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <__NVIC_SetPriorityGrouping+0x44>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800070c:	4013      	ands	r3, r2
 800070e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800071c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000722:	4a04      	ldr	r2, [pc, #16]	; (8000734 <__NVIC_SetPriorityGrouping+0x44>)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	60d3      	str	r3, [r2, #12]
}
 8000728:	bf00      	nop
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <__NVIC_GetPriorityGrouping+0x18>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	f003 0307 	and.w	r3, r3, #7
}
 8000746:	4618      	mov	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	6039      	str	r1, [r7, #0]
 800075e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000764:	2b00      	cmp	r3, #0
 8000766:	db0a      	blt.n	800077e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	b2da      	uxtb	r2, r3
 800076c:	490c      	ldr	r1, [pc, #48]	; (80007a0 <__NVIC_SetPriority+0x4c>)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	0112      	lsls	r2, r2, #4
 8000774:	b2d2      	uxtb	r2, r2
 8000776:	440b      	add	r3, r1
 8000778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800077c:	e00a      	b.n	8000794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4908      	ldr	r1, [pc, #32]	; (80007a4 <__NVIC_SetPriority+0x50>)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f003 030f 	and.w	r3, r3, #15
 800078a:	3b04      	subs	r3, #4
 800078c:	0112      	lsls	r2, r2, #4
 800078e:	b2d2      	uxtb	r2, r2
 8000790:	440b      	add	r3, r1
 8000792:	761a      	strb	r2, [r3, #24]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000e100 	.word	0xe000e100
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b089      	sub	sp, #36	; 0x24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	f1c3 0307 	rsb	r3, r3, #7
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	bf28      	it	cs
 80007c6:	2304      	movcs	r3, #4
 80007c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3304      	adds	r3, #4
 80007ce:	2b06      	cmp	r3, #6
 80007d0:	d902      	bls.n	80007d8 <NVIC_EncodePriority+0x30>
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	3b03      	subs	r3, #3
 80007d6:	e000      	b.n	80007da <NVIC_EncodePriority+0x32>
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	43da      	mvns	r2, r3
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	401a      	ands	r2, r3
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f0:	f04f 31ff 	mov.w	r1, #4294967295
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	43d9      	mvns	r1, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	4313      	orrs	r3, r2
         );
}
 8000802:	4618      	mov	r0, r3
 8000804:	3724      	adds	r7, #36	; 0x24
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
	...

08000810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000820:	d301      	bcc.n	8000826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000822:	2301      	movs	r3, #1
 8000824:	e00f      	b.n	8000846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <SysTick_Config+0x40>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082e:	210f      	movs	r1, #15
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f7ff ff8e 	bl	8000754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <SysTick_Config+0x40>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <SysTick_Config+0x40>)
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	e000e010 	.word	0xe000e010

08000854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff47 	bl	80006f0 <__NVIC_SetPriorityGrouping>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000878:	f7ff ff5e 	bl	8000738 <__NVIC_GetPriorityGrouping>
 800087c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	68b9      	ldr	r1, [r7, #8]
 8000882:	6978      	ldr	r0, [r7, #20]
 8000884:	f7ff ff90 	bl	80007a8 <NVIC_EncodePriority>
 8000888:	4602      	mov	r2, r0
 800088a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088e:	4611      	mov	r1, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff5f 	bl	8000754 <__NVIC_SetPriority>
}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ffb2 	bl	8000810 <SysTick_Config>
 80008ac:	4603      	mov	r3, r0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80008c6:	e15a      	b.n	8000b7e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	2101      	movs	r1, #1
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	4013      	ands	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 814c 	beq.w	8000b78 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f003 0303 	and.w	r3, r3, #3
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d005      	beq.n	80008f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d130      	bne.n	800095a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	2203      	movs	r2, #3
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	43db      	mvns	r3, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	68da      	ldr	r2, [r3, #12]
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4313      	orrs	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800092e:	2201      	movs	r2, #1
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	4013      	ands	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	091b      	lsrs	r3, r3, #4
 8000944:	f003 0201 	and.w	r2, r3, #1
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4313      	orrs	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f003 0303 	and.w	r3, r3, #3
 8000962:	2b03      	cmp	r3, #3
 8000964:	d017      	beq.n	8000996 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	2203      	movs	r2, #3
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f003 0303 	and.w	r3, r3, #3
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d123      	bne.n	80009ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	08da      	lsrs	r2, r3, #3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3208      	adds	r2, #8
 80009aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	220f      	movs	r2, #15
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	691a      	ldr	r2, [r3, #16]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	f003 0307 	and.w	r3, r3, #7
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	08da      	lsrs	r2, r3, #3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3208      	adds	r2, #8
 80009e4:	6939      	ldr	r1, [r7, #16]
 80009e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	2203      	movs	r2, #3
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f003 0203 	and.w	r2, r3, #3
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f000 80a6 	beq.w	8000b78 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2c:	4b5b      	ldr	r3, [pc, #364]	; (8000b9c <HAL_GPIO_Init+0x2e4>)
 8000a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a30:	4a5a      	ldr	r2, [pc, #360]	; (8000b9c <HAL_GPIO_Init+0x2e4>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6613      	str	r3, [r2, #96]	; 0x60
 8000a38:	4b58      	ldr	r3, [pc, #352]	; (8000b9c <HAL_GPIO_Init+0x2e4>)
 8000a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a44:	4a56      	ldr	r2, [pc, #344]	; (8000ba0 <HAL_GPIO_Init+0x2e8>)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	089b      	lsrs	r3, r3, #2
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f003 0303 	and.w	r3, r3, #3
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	220f      	movs	r2, #15
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a6e:	d01f      	beq.n	8000ab0 <HAL_GPIO_Init+0x1f8>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a4c      	ldr	r2, [pc, #304]	; (8000ba4 <HAL_GPIO_Init+0x2ec>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d019      	beq.n	8000aac <HAL_GPIO_Init+0x1f4>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a4b      	ldr	r2, [pc, #300]	; (8000ba8 <HAL_GPIO_Init+0x2f0>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d013      	beq.n	8000aa8 <HAL_GPIO_Init+0x1f0>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a4a      	ldr	r2, [pc, #296]	; (8000bac <HAL_GPIO_Init+0x2f4>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d00d      	beq.n	8000aa4 <HAL_GPIO_Init+0x1ec>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a49      	ldr	r2, [pc, #292]	; (8000bb0 <HAL_GPIO_Init+0x2f8>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d007      	beq.n	8000aa0 <HAL_GPIO_Init+0x1e8>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a48      	ldr	r2, [pc, #288]	; (8000bb4 <HAL_GPIO_Init+0x2fc>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d101      	bne.n	8000a9c <HAL_GPIO_Init+0x1e4>
 8000a98:	2305      	movs	r3, #5
 8000a9a:	e00a      	b.n	8000ab2 <HAL_GPIO_Init+0x1fa>
 8000a9c:	2306      	movs	r3, #6
 8000a9e:	e008      	b.n	8000ab2 <HAL_GPIO_Init+0x1fa>
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	e006      	b.n	8000ab2 <HAL_GPIO_Init+0x1fa>
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	e004      	b.n	8000ab2 <HAL_GPIO_Init+0x1fa>
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	e002      	b.n	8000ab2 <HAL_GPIO_Init+0x1fa>
 8000aac:	2301      	movs	r3, #1
 8000aae:	e000      	b.n	8000ab2 <HAL_GPIO_Init+0x1fa>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	f002 0203 	and.w	r2, r2, #3
 8000ab8:	0092      	lsls	r2, r2, #2
 8000aba:	4093      	lsls	r3, r2
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ac2:	4937      	ldr	r1, [pc, #220]	; (8000ba0 <HAL_GPIO_Init+0x2e8>)
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	3302      	adds	r3, #2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ad0:	4b39      	ldr	r3, [pc, #228]	; (8000bb8 <HAL_GPIO_Init+0x300>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000af4:	4a30      	ldr	r2, [pc, #192]	; (8000bb8 <HAL_GPIO_Init+0x300>)
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000afa:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <HAL_GPIO_Init+0x300>)
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b1e:	4a26      	ldr	r2, [pc, #152]	; (8000bb8 <HAL_GPIO_Init+0x300>)
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <HAL_GPIO_Init+0x300>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d003      	beq.n	8000b48 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b48:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <HAL_GPIO_Init+0x300>)
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <HAL_GPIO_Init+0x300>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b72:	4a11      	ldr	r2, [pc, #68]	; (8000bb8 <HAL_GPIO_Init+0x300>)
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	fa22 f303 	lsr.w	r3, r2, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f47f ae9d 	bne.w	80008c8 <HAL_GPIO_Init+0x10>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	bf00      	nop
 8000b92:	371c      	adds	r7, #28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010000 	.word	0x40010000
 8000ba4:	48000400 	.word	0x48000400
 8000ba8:	48000800 	.word	0x48000800
 8000bac:	48000c00 	.word	0x48000c00
 8000bb0:	48001000 	.word	0x48001000
 8000bb4:	48001400 	.word	0x48001400
 8000bb8:	40010400 	.word	0x40010400

08000bbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	691a      	ldr	r2, [r3, #16]
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	e001      	b.n	8000bde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bfc:	787b      	ldrb	r3, [r7, #1]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c02:	887a      	ldrh	r2, [r7, #2]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c08:	e002      	b.n	8000c10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c0a:	887a      	ldrh	r2, [r7, #2]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d141      	bne.n	8000cae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c2a:	4b4b      	ldr	r3, [pc, #300]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c36:	d131      	bne.n	8000c9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c38:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c3e:	4a46      	ldr	r2, [pc, #280]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c48:	4b43      	ldr	r3, [pc, #268]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c50:	4a41      	ldr	r2, [pc, #260]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c58:	4b40      	ldr	r3, [pc, #256]	; (8000d5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2232      	movs	r2, #50	; 0x32
 8000c5e:	fb02 f303 	mul.w	r3, r2, r3
 8000c62:	4a3f      	ldr	r2, [pc, #252]	; (8000d60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c64:	fba2 2303 	umull	r2, r3, r2, r3
 8000c68:	0c9b      	lsrs	r3, r3, #18
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c6e:	e002      	b.n	8000c76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c76:	4b38      	ldr	r3, [pc, #224]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c82:	d102      	bne.n	8000c8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1f2      	bne.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c8a:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c96:	d158      	bne.n	8000d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e057      	b.n	8000d4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c9c:	4b2e      	ldr	r3, [pc, #184]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ca2:	4a2d      	ldr	r2, [pc, #180]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ca8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000cac:	e04d      	b.n	8000d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cb4:	d141      	bne.n	8000d3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cb6:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cc2:	d131      	bne.n	8000d28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cc4:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cca:	4a23      	ldr	r2, [pc, #140]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd4:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cdc:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2232      	movs	r2, #50	; 0x32
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	4a1c      	ldr	r2, [pc, #112]	; (8000d60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	0c9b      	lsrs	r3, r3, #18
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cfa:	e002      	b.n	8000d02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d0e:	d102      	bne.n	8000d16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1f2      	bne.n	8000cfc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d22:	d112      	bne.n	8000d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e011      	b.n	8000d4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000d38:	e007      	b.n	8000d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d48:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	40007000 	.word	0x40007000
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	431bde83 	.word	0x431bde83

08000d64 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d72:	6093      	str	r3, [r2, #8]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40007000 	.word	0x40007000

08000d84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e2fe      	b.n	8001394 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d075      	beq.n	8000e8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000da2:	4b97      	ldr	r3, [pc, #604]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f003 030c 	and.w	r3, r3, #12
 8000daa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dac:	4b94      	ldr	r3, [pc, #592]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	2b0c      	cmp	r3, #12
 8000dba:	d102      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x3e>
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d002      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x44>
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d10b      	bne.n	8000de0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc8:	4b8d      	ldr	r3, [pc, #564]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d05b      	beq.n	8000e8c <HAL_RCC_OscConfig+0x108>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d157      	bne.n	8000e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e2d9      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de8:	d106      	bne.n	8000df8 <HAL_RCC_OscConfig+0x74>
 8000dea:	4b85      	ldr	r3, [pc, #532]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a84      	ldr	r2, [pc, #528]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	e01d      	b.n	8000e34 <HAL_RCC_OscConfig+0xb0>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e00:	d10c      	bne.n	8000e1c <HAL_RCC_OscConfig+0x98>
 8000e02:	4b7f      	ldr	r3, [pc, #508]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a7e      	ldr	r2, [pc, #504]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	4b7c      	ldr	r3, [pc, #496]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a7b      	ldr	r2, [pc, #492]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e00b      	b.n	8000e34 <HAL_RCC_OscConfig+0xb0>
 8000e1c:	4b78      	ldr	r3, [pc, #480]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a77      	ldr	r2, [pc, #476]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b75      	ldr	r3, [pc, #468]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a74      	ldr	r2, [pc, #464]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d013      	beq.n	8000e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fc4c 	bl	80006d8 <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e44:	f7ff fc48 	bl	80006d8 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b64      	cmp	r3, #100	; 0x64
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e29e      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e56:	4b6a      	ldr	r3, [pc, #424]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0f0      	beq.n	8000e44 <HAL_RCC_OscConfig+0xc0>
 8000e62:	e014      	b.n	8000e8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e64:	f7ff fc38 	bl	80006d8 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e6c:	f7ff fc34 	bl	80006d8 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b64      	cmp	r3, #100	; 0x64
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e28a      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e7e:	4b60      	ldr	r3, [pc, #384]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f0      	bne.n	8000e6c <HAL_RCC_OscConfig+0xe8>
 8000e8a:	e000      	b.n	8000e8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d075      	beq.n	8000f86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e9a:	4b59      	ldr	r3, [pc, #356]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f003 030c 	and.w	r3, r3, #12
 8000ea2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ea4:	4b56      	ldr	r3, [pc, #344]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	2b0c      	cmp	r3, #12
 8000eb2:	d102      	bne.n	8000eba <HAL_RCC_OscConfig+0x136>
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d002      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x13c>
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d11f      	bne.n	8000f00 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ec0:	4b4f      	ldr	r3, [pc, #316]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d005      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x154>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e25d      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed8:	4b49      	ldr	r3, [pc, #292]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	061b      	lsls	r3, r3, #24
 8000ee6:	4946      	ldr	r1, [pc, #280]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000eec:	4b45      	ldr	r3, [pc, #276]	; (8001004 <HAL_RCC_OscConfig+0x280>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fba5 	bl	8000640 <HAL_InitTick>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d043      	beq.n	8000f84 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e249      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d023      	beq.n	8000f50 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f08:	4b3d      	ldr	r3, [pc, #244]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a3c      	ldr	r2, [pc, #240]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f14:	f7ff fbe0 	bl	80006d8 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fbdc 	bl	80006d8 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e232      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f2e:	4b34      	ldr	r3, [pc, #208]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d0f0      	beq.n	8000f1c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3a:	4b31      	ldr	r3, [pc, #196]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	061b      	lsls	r3, r3, #24
 8000f48:	492d      	ldr	r1, [pc, #180]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	604b      	str	r3, [r1, #4]
 8000f4e:	e01a      	b.n	8000f86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f50:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a2a      	ldr	r2, [pc, #168]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fbbc 	bl	80006d8 <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f64:	f7ff fbb8 	bl	80006d8 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e20e      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f0      	bne.n	8000f64 <HAL_RCC_OscConfig+0x1e0>
 8000f82:	e000      	b.n	8000f86 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d041      	beq.n	8001016 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d01c      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fa0:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000faa:	f7ff fb95 	bl	80006d8 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb2:	f7ff fb91 	bl	80006d8 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e1e7      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0ef      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x22e>
 8000fd2:	e020      	b.n	8001016 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fda:	4a09      	ldr	r2, [pc, #36]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000fdc:	f023 0301 	bic.w	r3, r3, #1
 8000fe0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fe4:	f7ff fb78 	bl	80006d8 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fea:	e00d      	b.n	8001008 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fec:	f7ff fb74 	bl	80006d8 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d906      	bls.n	8001008 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e1ca      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001008:	4b8c      	ldr	r3, [pc, #560]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 800100a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1ea      	bne.n	8000fec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 80a6 	beq.w	8001170 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001028:	4b84      	ldr	r3, [pc, #528]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 800102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <HAL_RCC_OscConfig+0x2b4>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <HAL_RCC_OscConfig+0x2b6>
 8001038:	2300      	movs	r3, #0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00d      	beq.n	800105a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b7f      	ldr	r3, [pc, #508]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	4a7e      	ldr	r2, [pc, #504]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	6593      	str	r3, [r2, #88]	; 0x58
 800104a:	4b7c      	ldr	r3, [pc, #496]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001056:	2301      	movs	r3, #1
 8001058:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800105a:	4b79      	ldr	r3, [pc, #484]	; (8001240 <HAL_RCC_OscConfig+0x4bc>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001062:	2b00      	cmp	r3, #0
 8001064:	d118      	bne.n	8001098 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001066:	4b76      	ldr	r3, [pc, #472]	; (8001240 <HAL_RCC_OscConfig+0x4bc>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a75      	ldr	r2, [pc, #468]	; (8001240 <HAL_RCC_OscConfig+0x4bc>)
 800106c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001072:	f7ff fb31 	bl	80006d8 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800107a:	f7ff fb2d 	bl	80006d8 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e183      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800108c:	4b6c      	ldr	r3, [pc, #432]	; (8001240 <HAL_RCC_OscConfig+0x4bc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f0      	beq.n	800107a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d108      	bne.n	80010b2 <HAL_RCC_OscConfig+0x32e>
 80010a0:	4b66      	ldr	r3, [pc, #408]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80010a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010a6:	4a65      	ldr	r2, [pc, #404]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010b0:	e024      	b.n	80010fc <HAL_RCC_OscConfig+0x378>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	d110      	bne.n	80010dc <HAL_RCC_OscConfig+0x358>
 80010ba:	4b60      	ldr	r3, [pc, #384]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80010bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010c0:	4a5e      	ldr	r2, [pc, #376]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010ca:	4b5c      	ldr	r3, [pc, #368]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80010cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010d0:	4a5a      	ldr	r2, [pc, #360]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010da:	e00f      	b.n	80010fc <HAL_RCC_OscConfig+0x378>
 80010dc:	4b57      	ldr	r3, [pc, #348]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80010de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010e2:	4a56      	ldr	r2, [pc, #344]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80010e4:	f023 0301 	bic.w	r3, r3, #1
 80010e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010ec:	4b53      	ldr	r3, [pc, #332]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80010ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f2:	4a52      	ldr	r2, [pc, #328]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80010f4:	f023 0304 	bic.w	r3, r3, #4
 80010f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d016      	beq.n	8001132 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001104:	f7ff fae8 	bl	80006d8 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800110a:	e00a      	b.n	8001122 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800110c:	f7ff fae4 	bl	80006d8 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	f241 3288 	movw	r2, #5000	; 0x1388
 800111a:	4293      	cmp	r3, r2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e138      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001122:	4b46      	ldr	r3, [pc, #280]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0ed      	beq.n	800110c <HAL_RCC_OscConfig+0x388>
 8001130:	e015      	b.n	800115e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001132:	f7ff fad1 	bl	80006d8 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001138:	e00a      	b.n	8001150 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113a:	f7ff facd 	bl	80006d8 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f241 3288 	movw	r2, #5000	; 0x1388
 8001148:	4293      	cmp	r3, r2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e121      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001150:	4b3a      	ldr	r3, [pc, #232]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1ed      	bne.n	800113a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800115e:	7ffb      	ldrb	r3, [r7, #31]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d105      	bne.n	8001170 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001164:	4b35      	ldr	r3, [pc, #212]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001168:	4a34      	ldr	r2, [pc, #208]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 800116a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800116e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	2b00      	cmp	r3, #0
 800117a:	d03c      	beq.n	80011f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d01c      	beq.n	80011be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800118a:	4a2c      	ldr	r2, [pc, #176]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001194:	f7ff faa0 	bl	80006d8 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800119c:	f7ff fa9c 	bl	80006d8 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e0f2      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80011b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0ef      	beq.n	800119c <HAL_RCC_OscConfig+0x418>
 80011bc:	e01b      	b.n	80011f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80011c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011c4:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ce:	f7ff fa83 	bl	80006d8 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011d6:	f7ff fa7f 	bl	80006d8 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e0d5      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 80011ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1ef      	bne.n	80011d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 80c9 	beq.w	8001392 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 030c 	and.w	r3, r3, #12
 8001208:	2b0c      	cmp	r3, #12
 800120a:	f000 8083 	beq.w	8001314 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d15e      	bne.n	80012d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a08      	ldr	r2, [pc, #32]	; (800123c <HAL_RCC_OscConfig+0x4b8>)
 800121c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001222:	f7ff fa59 	bl	80006d8 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001228:	e00c      	b.n	8001244 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800122a:	f7ff fa55 	bl	80006d8 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d905      	bls.n	8001244 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e0ab      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
 800123c:	40021000 	.word	0x40021000
 8001240:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001244:	4b55      	ldr	r3, [pc, #340]	; (800139c <HAL_RCC_OscConfig+0x618>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1ec      	bne.n	800122a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001250:	4b52      	ldr	r3, [pc, #328]	; (800139c <HAL_RCC_OscConfig+0x618>)
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	4b52      	ldr	r3, [pc, #328]	; (80013a0 <HAL_RCC_OscConfig+0x61c>)
 8001256:	4013      	ands	r3, r2
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	6a11      	ldr	r1, [r2, #32]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001260:	3a01      	subs	r2, #1
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	4311      	orrs	r1, r2
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800126a:	0212      	lsls	r2, r2, #8
 800126c:	4311      	orrs	r1, r2
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001272:	0852      	lsrs	r2, r2, #1
 8001274:	3a01      	subs	r2, #1
 8001276:	0552      	lsls	r2, r2, #21
 8001278:	4311      	orrs	r1, r2
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800127e:	0852      	lsrs	r2, r2, #1
 8001280:	3a01      	subs	r2, #1
 8001282:	0652      	lsls	r2, r2, #25
 8001284:	4311      	orrs	r1, r2
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800128a:	06d2      	lsls	r2, r2, #27
 800128c:	430a      	orrs	r2, r1
 800128e:	4943      	ldr	r1, [pc, #268]	; (800139c <HAL_RCC_OscConfig+0x618>)
 8001290:	4313      	orrs	r3, r2
 8001292:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001294:	4b41      	ldr	r3, [pc, #260]	; (800139c <HAL_RCC_OscConfig+0x618>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a40      	ldr	r2, [pc, #256]	; (800139c <HAL_RCC_OscConfig+0x618>)
 800129a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800129e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012a0:	4b3e      	ldr	r3, [pc, #248]	; (800139c <HAL_RCC_OscConfig+0x618>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	4a3d      	ldr	r2, [pc, #244]	; (800139c <HAL_RCC_OscConfig+0x618>)
 80012a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fa14 	bl	80006d8 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b4:	f7ff fa10 	bl	80006d8 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e066      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <HAL_RCC_OscConfig+0x618>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x530>
 80012d2:	e05e      	b.n	8001392 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d4:	4b31      	ldr	r3, [pc, #196]	; (800139c <HAL_RCC_OscConfig+0x618>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a30      	ldr	r2, [pc, #192]	; (800139c <HAL_RCC_OscConfig+0x618>)
 80012da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff f9fa 	bl	80006d8 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e8:	f7ff f9f6 	bl	80006d8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e04c      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <HAL_RCC_OscConfig+0x618>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <HAL_RCC_OscConfig+0x618>)
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	4924      	ldr	r1, [pc, #144]	; (800139c <HAL_RCC_OscConfig+0x618>)
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <HAL_RCC_OscConfig+0x620>)
 800130e:	4013      	ands	r3, r2
 8001310:	60cb      	str	r3, [r1, #12]
 8001312:	e03e      	b.n	8001392 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e039      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <HAL_RCC_OscConfig+0x618>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f003 0203 	and.w	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	429a      	cmp	r2, r3
 8001332:	d12c      	bne.n	800138e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	3b01      	subs	r3, #1
 8001340:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001342:	429a      	cmp	r2, r3
 8001344:	d123      	bne.n	800138e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001352:	429a      	cmp	r2, r3
 8001354:	d11b      	bne.n	800138e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001362:	429a      	cmp	r2, r3
 8001364:	d113      	bne.n	800138e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	085b      	lsrs	r3, r3, #1
 8001372:	3b01      	subs	r3, #1
 8001374:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001376:	429a      	cmp	r2, r3
 8001378:	d109      	bne.n	800138e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001384:	085b      	lsrs	r3, r3, #1
 8001386:	3b01      	subs	r3, #1
 8001388:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800138a:	429a      	cmp	r2, r3
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000
 80013a0:	019f800c 	.word	0x019f800c
 80013a4:	feeefffc 	.word	0xfeeefffc

080013a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e11e      	b.n	80015fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013c0:	4b91      	ldr	r3, [pc, #580]	; (8001608 <HAL_RCC_ClockConfig+0x260>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d910      	bls.n	80013f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	4b8e      	ldr	r3, [pc, #568]	; (8001608 <HAL_RCC_ClockConfig+0x260>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 020f 	bic.w	r2, r3, #15
 80013d6:	498c      	ldr	r1, [pc, #560]	; (8001608 <HAL_RCC_ClockConfig+0x260>)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013de:	4b8a      	ldr	r3, [pc, #552]	; (8001608 <HAL_RCC_ClockConfig+0x260>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d001      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e106      	b.n	80015fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d073      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d129      	bne.n	8001458 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001404:	4b81      	ldr	r3, [pc, #516]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0f4      	b.n	80015fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001414:	f000 f966 	bl	80016e4 <RCC_GetSysClockFreqFromPLLSource>
 8001418:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4a7c      	ldr	r2, [pc, #496]	; (8001610 <HAL_RCC_ClockConfig+0x268>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d93f      	bls.n	80014a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001422:	4b7a      	ldr	r3, [pc, #488]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001436:	2b00      	cmp	r3, #0
 8001438:	d033      	beq.n	80014a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800143e:	2b00      	cmp	r3, #0
 8001440:	d12f      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001442:	4b72      	ldr	r3, [pc, #456]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800144a:	4a70      	ldr	r2, [pc, #448]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	e024      	b.n	80014a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d107      	bne.n	8001470 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001460:	4b6a      	ldr	r3, [pc, #424]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d109      	bne.n	8001480 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0c6      	b.n	80015fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001470:	4b66      	ldr	r3, [pc, #408]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0be      	b.n	80015fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001480:	f000 f8ce 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 8001484:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4a61      	ldr	r2, [pc, #388]	; (8001610 <HAL_RCC_ClockConfig+0x268>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d909      	bls.n	80014a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800148e:	4b5f      	ldr	r3, [pc, #380]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001496:	4a5d      	ldr	r2, [pc, #372]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014a2:	4b5a      	ldr	r3, [pc, #360]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f023 0203 	bic.w	r2, r3, #3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	4957      	ldr	r1, [pc, #348]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014b4:	f7ff f910 	bl	80006d8 <HAL_GetTick>
 80014b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ba:	e00a      	b.n	80014d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014bc:	f7ff f90c 	bl	80006d8 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e095      	b.n	80015fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d2:	4b4e      	ldr	r3, [pc, #312]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 020c 	and.w	r2, r3, #12
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d1eb      	bne.n	80014bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d023      	beq.n	8001538 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014fc:	4b43      	ldr	r3, [pc, #268]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a42      	ldr	r2, [pc, #264]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 8001502:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001506:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b00      	cmp	r3, #0
 8001512:	d007      	beq.n	8001524 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001514:	4b3d      	ldr	r3, [pc, #244]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800151c:	4a3b      	ldr	r2, [pc, #236]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 800151e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001522:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001524:	4b39      	ldr	r3, [pc, #228]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	4936      	ldr	r1, [pc, #216]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 8001532:	4313      	orrs	r3, r2
 8001534:	608b      	str	r3, [r1, #8]
 8001536:	e008      	b.n	800154a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b80      	cmp	r3, #128	; 0x80
 800153c:	d105      	bne.n	800154a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800153e:	4b33      	ldr	r3, [pc, #204]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	4a32      	ldr	r2, [pc, #200]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 8001544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001548:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <HAL_RCC_ClockConfig+0x260>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d21d      	bcs.n	8001594 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001558:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <HAL_RCC_ClockConfig+0x260>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 020f 	bic.w	r2, r3, #15
 8001560:	4929      	ldr	r1, [pc, #164]	; (8001608 <HAL_RCC_ClockConfig+0x260>)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	4313      	orrs	r3, r2
 8001566:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001568:	f7ff f8b6 	bl	80006d8 <HAL_GetTick>
 800156c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	e00a      	b.n	8001586 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001570:	f7ff f8b2 	bl	80006d8 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e03b      	b.n	80015fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_RCC_ClockConfig+0x260>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d1ed      	bne.n	8001570 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4917      	ldr	r1, [pc, #92]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d009      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	490f      	ldr	r1, [pc, #60]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015d2:	f000 f825 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 80015d6:	4602      	mov	r2, r0
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_RCC_ClockConfig+0x264>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	490c      	ldr	r1, [pc, #48]	; (8001614 <HAL_RCC_ClockConfig+0x26c>)
 80015e4:	5ccb      	ldrb	r3, [r1, r3]
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	fa22 f303 	lsr.w	r3, r2, r3
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <HAL_RCC_ClockConfig+0x270>)
 80015f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_RCC_ClockConfig+0x274>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff f822 	bl	8000640 <HAL_InitTick>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000
 800160c:	40021000 	.word	0x40021000
 8001610:	04c4b400 	.word	0x04c4b400
 8001614:	080017f8 	.word	0x080017f8
 8001618:	20000008 	.word	0x20000008
 800161c:	2000000c 	.word	0x2000000c

08001620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001626:	4b2c      	ldr	r3, [pc, #176]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b04      	cmp	r3, #4
 8001630:	d102      	bne.n	8001638 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001632:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	e047      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	d102      	bne.n	800164a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001644:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	e03e      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800164a:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b0c      	cmp	r3, #12
 8001654:	d136      	bne.n	80016c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3301      	adds	r3, #1
 800166c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d10c      	bne.n	800168e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001674:	4a1a      	ldr	r2, [pc, #104]	; (80016e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	fbb2 f3f3 	udiv	r3, r2, r3
 800167c:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800167e:	68d2      	ldr	r2, [r2, #12]
 8001680:	0a12      	lsrs	r2, r2, #8
 8001682:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001686:	fb02 f303 	mul.w	r3, r2, r3
 800168a:	617b      	str	r3, [r7, #20]
      break;
 800168c:	e00c      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800168e:	4a13      	ldr	r2, [pc, #76]	; (80016dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001698:	68d2      	ldr	r2, [r2, #12]
 800169a:	0a12      	lsrs	r2, r2, #8
 800169c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016a0:	fb02 f303 	mul.w	r3, r2, r3
 80016a4:	617b      	str	r3, [r7, #20]
      break;
 80016a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0e5b      	lsrs	r3, r3, #25
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	3301      	adds	r3, #1
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	e001      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80016c8:	693b      	ldr	r3, [r7, #16]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	00f42400 	.word	0x00f42400
 80016e0:	016e3600 	.word	0x016e3600

080016e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3301      	adds	r3, #1
 8001700:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	2b03      	cmp	r3, #3
 8001706:	d10c      	bne.n	8001722 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001708:	4a17      	ldr	r2, [pc, #92]	; (8001768 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001712:	68d2      	ldr	r2, [r2, #12]
 8001714:	0a12      	lsrs	r2, r2, #8
 8001716:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	617b      	str	r3, [r7, #20]
    break;
 8001720:	e00c      	b.n	800173c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	4a0e      	ldr	r2, [pc, #56]	; (8001764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800172c:	68d2      	ldr	r2, [r2, #12]
 800172e:	0a12      	lsrs	r2, r2, #8
 8001730:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001734:	fb02 f303 	mul.w	r3, r2, r3
 8001738:	617b      	str	r3, [r7, #20]
    break;
 800173a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0e5b      	lsrs	r3, r3, #25
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	3301      	adds	r3, #1
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	fbb2 f3f3 	udiv	r3, r2, r3
 8001754:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001756:	687b      	ldr	r3, [r7, #4]
}
 8001758:	4618      	mov	r0, r3
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40021000 	.word	0x40021000
 8001768:	016e3600 	.word	0x016e3600
 800176c:	00f42400 	.word	0x00f42400

08001770 <main>:


#include "main.h"

int main(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  hwInit();
 8001774:	f7fe ff2c 	bl	80005d0 <hwInit>
  apInit();
 8001778:	f7fe fd4e 	bl	8000218 <apInit>

  apMain();
 800177c:	f7fe fd54 	bl	8000228 <apMain>
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	bd80      	pop	{r7, pc}

08001786 <memset>:
 8001786:	4402      	add	r2, r0
 8001788:	4603      	mov	r3, r0
 800178a:	4293      	cmp	r3, r2
 800178c:	d100      	bne.n	8001790 <memset+0xa>
 800178e:	4770      	bx	lr
 8001790:	f803 1b01 	strb.w	r1, [r3], #1
 8001794:	e7f9      	b.n	800178a <memset+0x4>
	...

08001798 <__libc_init_array>:
 8001798:	b570      	push	{r4, r5, r6, lr}
 800179a:	4d0d      	ldr	r5, [pc, #52]	; (80017d0 <__libc_init_array+0x38>)
 800179c:	4c0d      	ldr	r4, [pc, #52]	; (80017d4 <__libc_init_array+0x3c>)
 800179e:	1b64      	subs	r4, r4, r5
 80017a0:	10a4      	asrs	r4, r4, #2
 80017a2:	2600      	movs	r6, #0
 80017a4:	42a6      	cmp	r6, r4
 80017a6:	d109      	bne.n	80017bc <__libc_init_array+0x24>
 80017a8:	4d0b      	ldr	r5, [pc, #44]	; (80017d8 <__libc_init_array+0x40>)
 80017aa:	4c0c      	ldr	r4, [pc, #48]	; (80017dc <__libc_init_array+0x44>)
 80017ac:	f000 f818 	bl	80017e0 <_init>
 80017b0:	1b64      	subs	r4, r4, r5
 80017b2:	10a4      	asrs	r4, r4, #2
 80017b4:	2600      	movs	r6, #0
 80017b6:	42a6      	cmp	r6, r4
 80017b8:	d105      	bne.n	80017c6 <__libc_init_array+0x2e>
 80017ba:	bd70      	pop	{r4, r5, r6, pc}
 80017bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80017c0:	4798      	blx	r3
 80017c2:	3601      	adds	r6, #1
 80017c4:	e7ee      	b.n	80017a4 <__libc_init_array+0xc>
 80017c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ca:	4798      	blx	r3
 80017cc:	3601      	adds	r6, #1
 80017ce:	e7f2      	b.n	80017b6 <__libc_init_array+0x1e>
 80017d0:	08001810 	.word	0x08001810
 80017d4:	08001810 	.word	0x08001810
 80017d8:	08001810 	.word	0x08001810
 80017dc:	08001814 	.word	0x08001814

080017e0 <_init>:
 80017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e2:	bf00      	nop
 80017e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017e6:	bc08      	pop	{r3}
 80017e8:	469e      	mov	lr, r3
 80017ea:	4770      	bx	lr

080017ec <_fini>:
 80017ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ee:	bf00      	nop
 80017f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017f2:	bc08      	pop	{r3}
 80017f4:	469e      	mov	lr, r3
 80017f6:	4770      	bx	lr
