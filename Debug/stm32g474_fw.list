
stm32g474_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd48  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800bf28  0800bf28  0001bf28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c008  0800c008  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c008  0800c008  0001c008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c010  0800c010  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c010  0800c010  0001c010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c014  0800c014  0001c014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00002d4c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002f28  20002f28  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b625  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004b2e  00000000  00000000  0003b874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015c0  00000000  00000000  000403a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001050  00000000  00000000  00041968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b1b7  00000000  00000000  000429b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000223e0  00000000  00000000  0006db6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f5db5  00000000  00000000  0008ff4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b14  00000000  00000000  00185d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0018b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bf10 	.word	0x0800bf10

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800bf10 	.word	0x0800bf10

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <apInit>:
static uint32_t g_LEDOffTime = 200;
static uint32_t nextmill = 0;
*/

void apInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <apMain>:

void apMain(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
  uint32_t pre_time1 = millis();
 80005d0:	f000 f887 	bl	80006e2 <millis>
 80005d4:	6078      	str	r0, [r7, #4]
  uint32_t pre_time2 = millis();
 80005d6:	f000 f884 	bl	80006e2 <millis>
 80005da:	6038      	str	r0, [r7, #0]
  while(1)
  {
    /* LED Non blocking toggle*/
    /* Using Reg to toggle */
    if(millis()-pre_time1 >= 500)
 80005dc:	f000 f881 	bl	80006e2 <millis>
 80005e0:	4602      	mov	r2, r0
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ea:	d3f7      	bcc.n	80005dc <apMain+0x12>
    {
      pre_time1 = millis();
 80005ec:	f000 f879 	bl	80006e2 <millis>
 80005f0:	6078      	str	r0, [r7, #4]
      //ledToggle(_DEF_LED1);
      gpio_out_toggle(GPIOA, GPIO_PIN_5);
 80005f2:	2120      	movs	r1, #32
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f8:	f000 faba 	bl	8000b70 <gpio_out_toggle>
    if(millis()-pre_time1 >= 500)
 80005fc:	e7ee      	b.n	80005dc <apMain+0x12>
	...

08000600 <bspInit>:
#include "usb_device.h"

void SystemClock_Config(void);

bool bspInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <bspInit+0xc8>)
 8000608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800060a:	4a2f      	ldr	r2, [pc, #188]	; (80006c8 <bspInit+0xc8>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6613      	str	r3, [r2, #96]	; 0x60
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <bspInit+0xc8>)
 8000614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]


  HAL_Init();
 800061e:	f000 fe47 	bl	80012b0 <HAL_Init>
  SystemClock_Config();
 8000622:	f000 f865 	bl	80006f0 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000626:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <bspInit+0xc8>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <bspInit+0xc8>)
 800062c:	f043 0320 	orr.w	r3, r3, #32
 8000630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000632:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <bspInit+0xc8>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	f003 0320 	and.w	r3, r3, #32
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <bspInit+0xc8>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <bspInit+0xc8>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <bspInit+0xc8>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]

  /* USB - RESET 시 장치관리자 해제 연결 안될 시 */

  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
  // PA12(USB_DP) 출력 설정
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 8000666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800066c:	2311      	movs	r3, #17
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4619      	mov	r1, r3
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f001 f877 	bl	8001774 <HAL_GPIO_Init>

  //회로에 PULL UP 이 걸려있다면 - 내리고
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f001 f9f2 	bl	8001a78 <HAL_GPIO_WritePin>
  delay(100);
 8000694:	2064      	movs	r0, #100	; 0x64
 8000696:	f000 f819 	bl	80006cc <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f001 f9e8 	bl	8001a78 <HAL_GPIO_WritePin>

  // INPUT 으로 다시 변경
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	4619      	mov	r1, r3
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b6:	f001 f85d 	bl	8001774 <HAL_GPIO_Init>

  MX_USB_Device_Init();
 80006ba:	f00a f9d9 	bl	800aa70 <MX_USB_Device_Init>

  return true;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3720      	adds	r7, #32
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000

080006cc <delay>:

void delay(uint32_t time_ms)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(time_ms);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 fe5b 	bl	8001390 <HAL_Delay>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <millis>:

uint32_t millis(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80006e6:	f000 fe47 	bl	8001378 <HAL_GetTick>
 80006ea:	4603      	mov	r3, r0
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	; 0x50
 80006f4:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <SystemClock_Config+0xb0>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a29      	ldr	r2, [pc, #164]	; (80007a0 <SystemClock_Config+0xb0>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <SystemClock_Config+0xb0>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	2238      	movs	r2, #56	; 0x38
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f00a ff76 	bl	800b608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800072e:	f002 feef 	bl	8003510 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000732:	2309      	movs	r3, #9
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000744:	2303      	movs	r3, #3
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800074c:	2308      	movs	r3, #8
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0318 	add.w	r3, r7, #24
 8000760:	4618      	mov	r0, r3
 8000762:	f003 f80b 	bl	800377c <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800076c:	f000 f81a 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2303      	movs	r3, #3
 8000776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2101      	movs	r1, #1
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fb09 	bl	8003da0 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000794:	f000 f806 	bl	80007a4 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	; 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000

080007a4 <Error_Handler>:


void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_MspInit+0x44>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <HAL_MspInit+0x44>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6613      	str	r3, [r2, #96]	; 0x60
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_MspInit+0x44>)
 80007c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_MspInit+0x44>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <HAL_MspInit+0x44>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	6593      	str	r3, [r2, #88]	; 0x58
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_MspInit+0x44>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007ea:	f002 ff35 	bl	8003658 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000800:	e7fe      	b.n	8000800 <NMI_Handler+0x4>

08000802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <HardFault_Handler+0x4>

08000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <MemManage_Handler+0x4>

0800080e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <BusFault_Handler+0x4>

08000814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <UsageFault_Handler+0x4>

0800081a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000848:	f000 fd84 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <USB_LP_IRQHandler+0x10>)
 8000856:	f001 fa17 	bl	8001c88 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200028e4 	.word	0x200028e4

08000864 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <USART1_IRQHandler+0x10>)
 800086a:	f004 f979 	bl	8004b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000348 	.word	0x20000348

08000878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <_sbrk+0x5c>)
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <_sbrk+0x60>)
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <_sbrk+0x64>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <_sbrk+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d207      	bcs.n	80008b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a8:	f00a feb6 	bl	800b618 <__errno>
 80008ac:	4603      	mov	r3, r0
 80008ae:	220c      	movs	r2, #12
 80008b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	e009      	b.n	80008cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <_sbrk+0x64>)
 80008c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20020000 	.word	0x20020000
 80008d8:	00000400 	.word	0x00000400
 80008dc:	200001f8 	.word	0x200001f8
 80008e0:	20002f28 	.word	0x20002f28

080008e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <SystemInit+0x20>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a05      	ldr	r2, [pc, #20]	; (8000904 <SystemInit+0x20>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800090a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800090c:	f7ff ffea 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <LoopForever+0x6>)
  ldr r1, =_edata
 8000912:	490d      	ldr	r1, [pc, #52]	; (8000948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <LoopForever+0xe>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000928:	4c0a      	ldr	r4, [pc, #40]	; (8000954 <LoopForever+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000936:	f00a fe75 	bl	800b624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093a:	f00a fe21 	bl	800b580 <main>

0800093e <LoopForever>:

LoopForever:
  b LoopForever
 800093e:	e7fe      	b.n	800093e <LoopForever>
  ldr   r0, =_estack
 8000940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800094c:	0800c018 	.word	0x0800c018
  ldr r2, =_sbss
 8000950:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000954:	20002f28 	.word	0x20002f28

08000958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC1_2_IRQHandler>

0800095a <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800095a:	b480      	push	{r7}
 800095c:	b087      	sub	sp, #28
 800095e:	af00      	add	r7, sp, #0
 8000960:	60f8      	str	r0, [r7, #12]
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000966:	2301      	movs	r3, #1
 8000968:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2201      	movs	r2, #1
 8000980:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	68ba      	ldr	r2, [r7, #8]
 8000986:	611a      	str	r2, [r3, #16]

  return ret;
 8000988:	7dfb      	ldrb	r3, [r7, #23]
}
 800098a:	4618      	mov	r0, r3
 800098c:	371c      	adds	r7, #28
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <qbufferWrite>:

  return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000996:	b480      	push	{r7}
 8000998:	b08b      	sub	sp, #44	; 0x2c
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80009a2:	2301      	movs	r3, #1
 80009a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t next_in;


  for (int i=0; i<length; i++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
 80009ac:	e043      	b.n	8000a36 <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	6892      	ldr	r2, [r2, #8]
 80009b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80009bc:	fb01 f202 	mul.w	r2, r1, r2
 80009c0:	1a9b      	subs	r3, r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d02c      	beq.n	8000a28 <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	691b      	ldr	r3, [r3, #16]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d024      	beq.n	8000a20 <qbufferWrite+0x8a>
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d021      	beq.n	8000a20 <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	691a      	ldr	r2, [r3, #16]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	68f9      	ldr	r1, [r7, #12]
 80009e6:	68c9      	ldr	r1, [r1, #12]
 80009e8:	fb01 f303 	mul.w	r3, r1, r3
 80009ec:	4413      	add	r3, r2
 80009ee:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
 80009f4:	e00a      	b.n	8000a0c <qbufferWrite+0x76>
        {
          p_buf[i] = p_data[i];
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	68ba      	ldr	r2, [r7, #8]
 80009fa:	441a      	add	r2, r3
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	6979      	ldr	r1, [r7, #20]
 8000a00:	440b      	add	r3, r1
 8000a02:	7812      	ldrb	r2, [r2, #0]
 8000a04:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	61fb      	str	r3, [r7, #28]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d8ef      	bhi.n	80009f6 <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	69ba      	ldr	r2, [r7, #24]
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	e003      	b.n	8000a30 <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a2e:	e006      	b.n	8000a3e <qbufferWrite+0xa8>
  for (int i=0; i<length; i++)
 8000a30:	6a3b      	ldr	r3, [r7, #32]
 8000a32:	3301      	adds	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d8b7      	bhi.n	80009ae <qbufferWrite+0x18>
    }
  }

  return ret;
 8000a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	372c      	adds	r7, #44	; 0x2c
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b085      	sub	sp, #20
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	6892      	ldr	r2, [r2, #8]
 8000a64:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a68:	fb01 f202 	mul.w	r2, r1, r2
 8000a6c:	1a9b      	subs	r3, r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]

  return ret;
 8000a70:	68fb      	ldr	r3, [r7, #12]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <cdcInit>:


static bool is_init = false;

bool cdcInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  bool ret = true;
 8000a86:	2301      	movs	r3, #1
 8000a88:	71fb      	strb	r3, [r7, #7]


  ret = cdcIfInit();
 8000a8a:	f00a f947 	bl	800ad1c <cdcIfInit>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	bf14      	ite	ne
 8000a94:	2301      	movne	r3, #1
 8000a96:	2300      	moveq	r3, #0
 8000a98:	71fb      	strb	r3, [r7, #7]

  is_init = ret;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	; (8000aac <cdcInit+0x2c>)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	7013      	strb	r3, [r2, #0]

  return ret;
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200001fc 	.word	0x200001fc

08000ab0 <ledInit>:




bool ledInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <ledInit+0x80>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <ledInit+0x80>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <ledInit+0x80>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
 8000aee:	e017      	b.n	8000b20 <ledInit+0x70>
  {
    GPIO_InitStructure.Pin = led_tbl[i].pin;
 8000af0:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <ledInit+0x84>)
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	4413      	add	r3, r2
 8000af8:	889b      	ldrh	r3, [r3, #4]
 8000afa:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 8000afc:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <ledInit+0x84>)
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b04:	f107 0208 	add.w	r2, r7, #8
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 fe32 	bl	8001774 <HAL_GPIO_Init>

    ledOff(i);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 f80f 	bl	8000b38 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	dde4      	ble.n	8000af0 <ledInit+0x40>
  }
  return true;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3720      	adds	r7, #32
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40021000 	.word	0x40021000
 8000b34:	0800bfa4 	.word	0x0800bfa4

08000b38 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10d      	bne.n	8000b64 <ledOff+0x2c>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <ledOff+0x34>)
 8000b4c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <ledOff+0x34>)
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	4413      	add	r3, r2
 8000b58:	889b      	ldrh	r3, [r3, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f000 ff8b 	bl	8001a78 <HAL_GPIO_WritePin>
 8000b62:	e000      	b.n	8000b66 <ledOff+0x2e>
  if (ch >= LED_MAX_CH) return;
 8000b64:	bf00      	nop
}
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	0800bfa4 	.word	0x0800bfa4

08000b70 <gpio_out_toggle>:
  gpio->ODR &= ~(GPIO_Pin);
}

//
void gpio_out_toggle(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
  GPIO_TypeDef *gpio = (void*)GPIOA_BASE;
 8000b7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b80:	60fb      	str	r3, [r7, #12]
  gpio->ODR ^= GPIO_Pin;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	695a      	ldr	r2, [r3, #20]
 8000b86:	887b      	ldrh	r3, [r7, #2]
 8000b88:	405a      	eors	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	615a      	str	r2, [r3, #20]
}
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <resetInit>:
  }
}


bool resetInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  bool ret = true;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	71bb      	strb	r3, [r7, #6]
  bool is_debug = false;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	71fb      	strb	r3, [r7, #7]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <resetInit+0x80>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <resetInit+0x1e>
  {
    is_debug = true;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	71fb      	strb	r3, [r7, #7]
  }

  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if (RCC->CSR & (1<<26) && is_debug != true)
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <resetInit+0x84>)
 8000bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d01f      	beq.n	8000c08 <resetInit+0x6c>
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f083 0301 	eor.w	r3, r3, #1
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d019      	beq.n	8000c08 <resetInit+0x6c>
  if(RCC->CSR & (1<<26))
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <resetInit+0x84>)
 8000bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d012      	beq.n	8000c08 <resetInit+0x6c>
  {
    rtcBackupRegWrite(RESET_REG_COUNT, rtcBackupRegRead(RESET_REG_COUNT) + 1);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f000 f8a2 	bl	8000d2c <rtcBackupRegRead>
 8000be8:	4603      	mov	r3, r0
 8000bea:	3301      	adds	r3, #1
 8000bec:	4619      	mov	r1, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f000 f8ac 	bl	8000d4c <rtcBackupRegWrite>
    delay(500);
 8000bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bf8:	f7ff fd68 	bl	80006cc <delay>
    reset_count = rtcBackupRegRead(RESET_REG_COUNT);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f000 f895 	bl	8000d2c <rtcBackupRegRead>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <resetInit+0x88>)
 8000c06:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  rtcBackupRegWrite(RESET_REG_COUNT, 0);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f000 f89e 	bl	8000d4c <rtcBackupRegWrite>

  return ret;
 8000c10:	79bb      	ldrb	r3, [r7, #6]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e000edf0 	.word	0xe000edf0
 8000c20:	40021000 	.word	0x40021000
 8000c24:	20000200 	.word	0x20000200

08000c28 <resetGetCount>:

uint32_t resetGetCount(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return reset_count;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <resetGetCount+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000200 	.word	0x20000200

08000c40 <resetToSystemBoot>:
    run_timeout_count = timeout;
  }
}

void resetToSystemBoot(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
  void (*SysMemBootJump)(void);
  volatile uint32_t addr = 0x1FFF0000; // System Boot Loader 주소
 8000c46:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <resetToSystemBoot+0x7c>)
 8000c48:	603b      	str	r3, [r7, #0]


  HAL_RCC_DeInit();
 8000c4a:	f002 fd15 	bl	8003678 <HAL_RCC_DeInit>

  SysTick->CTRL = 0;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <resetToSystemBoot+0x80>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <resetToSystemBoot+0x80>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
  SysTick->VAL  = 0;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <resetToSystemBoot+0x80>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]

  // 인터럽트
  for (int i=0;i<8;i++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e016      	b.n	8000c94 <resetToSystemBoot+0x54>
  {
    NVIC->ICER[i]=0xFFFFFFFF;
 8000c66:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <resetToSystemBoot+0x84>)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3320      	adds	r3, #32
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NVIC->ICPR[i]=0xFFFFFFFF;
 8000c74:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <resetToSystemBoot+0x84>)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3360      	adds	r3, #96	; 0x60
 8000c7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c82:	f3bf 8f4f 	dsb	sy
}
 8000c86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c88:	f3bf 8f6f 	isb	sy
}
 8000c8c:	bf00      	nop
  for (int i=0;i<8;i++)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	3301      	adds	r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2b07      	cmp	r3, #7
 8000c98:	dde5      	ble.n	8000c66 <resetToSystemBoot+0x26>
    __DSB();
    __ISB();
  }

  SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	60bb      	str	r3, [r7, #8]

  // Main Stack 주소 셋팅
  __set_MSP(*(uint32_t *)addr);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f383 8808 	msr	MSP, r3
}
 8000cae:	bf00      	nop
  // Jump
  SysMemBootJump();
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4798      	blx	r3
}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	1fff0000 	.word	0x1fff0000
 8000cc0:	e000e010 	.word	0xe000e010
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  bool ret = true;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	71fb      	strb	r3, [r7, #7]


  hrtc.Instance = RTC;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <rtcInit+0x5c>)
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <rtcInit+0x60>)
 8000cd6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <rtcInit+0x5c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <rtcInit+0x5c>)
 8000ce0:	227f      	movs	r2, #127	; 0x7f
 8000ce2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <rtcInit+0x5c>)
 8000ce6:	22ff      	movs	r2, #255	; 0xff
 8000ce8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <rtcInit+0x5c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <rtcInit+0x5c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <rtcInit+0x5c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <rtcInit+0x5c>)
 8000cfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d02:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <rtcInit+0x5c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <rtcInit+0x5c>)
 8000d0c:	f003 fcb2 	bl	8004674 <HAL_RTC_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <rtcInit+0x52>
  {
    return false;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <rtcInit+0x54>
  }

  return ret;
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000204 	.word	0x20000204
 8000d28:	40002800 	.word	0x40002800

08000d2c <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000d34:	6879      	ldr	r1, [r7, #4]
 8000d36:	4804      	ldr	r0, [pc, #16]	; (8000d48 <rtcBackupRegRead+0x1c>)
 8000d38:	f003 fdd2 	bl	80048e0 <HAL_RTCEx_BKUPRead>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000204 	.word	0x20000204

08000d4c <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	4803      	ldr	r0, [pc, #12]	; (8000d68 <rtcBackupRegWrite+0x1c>)
 8000d5c:	f003 fda8 	bl	80048b0 <HAL_RTCEx_BKUPWrite>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000204 	.word	0x20000204

08000d6c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b098      	sub	sp, #96	; 0x60
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2254      	movs	r2, #84	; 0x54
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f00a fc43 	bl	800b608 <memset>
  if(rtcHandle->Instance==RTC)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <HAL_RTC_MspInit+0x70>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d123      	bne.n	8000dd4 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d90:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d96:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 fa1b 	bl	80041d8 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000da8:	f7ff fcfc 	bl	80007a4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_RTC_MspInit+0x74>)
 8000dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <HAL_RTC_MspInit+0x74>)
 8000db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_RTC_MspInit+0x74>)
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_RTC_MspInit+0x74>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_RTC_MspInit+0x74>)
 8000dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3760      	adds	r7, #96	; 0x60
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40002800 	.word	0x40002800
 8000de0:	40021000 	.word	0x40021000

08000de4 <uartInit>:
UART_HandleTypeDef huart1;



bool uartInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
  for(int i = 0; i <UART_MAX_CH; i++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	e007      	b.n	8000e00 <uartInit+0x1c>
  {
    is_open[i] = false;
 8000df0:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <uartInit+0x30>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i <UART_MAX_CH; i++)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	ddf4      	ble.n	8000df0 <uartInit+0xc>
  }

  return true;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	2000022c 	.word	0x2000022c

08000e18 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  bool ret =false;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d176      	bne.n	8000f1c <uartOpen+0x104>
  {
    case _DEF_UART1:
      huart1.Instance = USART1;
 8000e2e:	4b3e      	ldr	r3, [pc, #248]	; (8000f28 <uartOpen+0x110>)
 8000e30:	4a3e      	ldr	r2, [pc, #248]	; (8000f2c <uartOpen+0x114>)
 8000e32:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 8000e34:	4a3c      	ldr	r2, [pc, #240]	; (8000f28 <uartOpen+0x110>)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	6053      	str	r3, [r2, #4]
      huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e3a:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <uartOpen+0x110>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	; 0x24
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e40:	4b39      	ldr	r3, [pc, #228]	; (8000f28 <uartOpen+0x110>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8000e46:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <uartOpen+0x110>)
 8000e48:	220c      	movs	r2, #12
 8000e4a:	615a      	str	r2, [r3, #20]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <uartOpen+0x110>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
      huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <uartOpen+0x110>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
      huart1.Init.Parity = UART_PARITY_NONE;
 8000e58:	4b33      	ldr	r3, [pc, #204]	; (8000f28 <uartOpen+0x110>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8000e5e:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <uartOpen+0x110>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e64:	4b30      	ldr	r3, [pc, #192]	; (8000f28 <uartOpen+0x110>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <uartOpen+0x110>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
      qbufferCreate(&qbuffer[ch],&rx_buf[ch], 256); // 수신 버퍼 생성
 8000e70:	79fa      	ldrb	r2, [r7, #7]
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4a2d      	ldr	r2, [pc, #180]	; (8000f30 <uartOpen+0x118>)
 8000e7c:	1898      	adds	r0, r3, r2
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4a2c      	ldr	r2, [pc, #176]	; (8000f34 <uartOpen+0x11c>)
 8000e82:	4413      	add	r3, r2
 8000e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff fd66 	bl	800095a <qbufferCreate>
      if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e8e:	4826      	ldr	r0, [pc, #152]	; (8000f28 <uartOpen+0x110>)
 8000e90:	f003 fd3c 	bl	800490c <HAL_UART_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <uartOpen+0x88>
      {
        ret = false;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	e016      	b.n	8000ece <uartOpen+0xb6>
      }
      else
      {
        ret = true;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	4a24      	ldr	r2, [pc, #144]	; (8000f38 <uartOpen+0x120>)
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	54d1      	strb	r1, [r2, r3]
        // 수신용 데이터 버퍼 (rx_data)에 size 만큼 받아서 HAL_UART_RxCpltCallback 함수 호출
        if(HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[ch], 1) != HAL_OK)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	4a23      	ldr	r2, [pc, #140]	; (8000f3c <uartOpen+0x124>)
 8000eb0:	4413      	add	r3, r2
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	481c      	ldr	r0, [pc, #112]	; (8000f28 <uartOpen+0x110>)
 8000eb8:	f003 fe06 	bl	8004ac8 <HAL_UART_Receive_IT>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <uartOpen+0xb6>
        {
         ret = false;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]
         is_open[ch] = false;
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <uartOpen+0x120>)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	54d1      	strb	r1, [r2, r3]
        }
      }
      if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4815      	ldr	r0, [pc, #84]	; (8000f28 <uartOpen+0x110>)
 8000ed2:	f005 fd72 	bl	80069ba <HAL_UARTEx_SetTxFifoThreshold>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <uartOpen+0xd0>
      {
        ret = false;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <uartOpen+0x120>)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	480f      	ldr	r0, [pc, #60]	; (8000f28 <uartOpen+0x110>)
 8000eec:	f005 fda3 	bl	8006a36 <HAL_UARTEx_SetRxFifoThreshold>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d005      	beq.n	8000f02 <uartOpen+0xea>
      {
        ret = false;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <uartOpen+0x120>)
 8000efe:	2100      	movs	r1, #0
 8000f00:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f02:	4809      	ldr	r0, [pc, #36]	; (8000f28 <uartOpen+0x110>)
 8000f04:	f005 fd20 	bl	8006948 <HAL_UARTEx_DisableFifoMode>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d005      	beq.n	8000f1a <uartOpen+0x102>
      {
        ret = false;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <uartOpen+0x120>)
 8000f16:	2100      	movs	r1, #0
 8000f18:	54d1      	strb	r1, [r2, r3]
      }
      break;
 8000f1a:	bf00      	nop
  }


  return ret;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000348 	.word	0x20000348
 8000f2c:	40013800 	.word	0x40013800
 8000f30:	20000230 	.word	0x20000230
 8000f34:	20000244 	.word	0x20000244
 8000f38:	2000022c 	.word	0x2000022c
 8000f3c:	20000344 	.word	0x20000344

08000f40 <uartWrite>:

  return ret;
}

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;
  switch(ch)
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d10e      	bne.n	8000f76 <uartWrite+0x36>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	2364      	movs	r3, #100	; 0x64
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	4807      	ldr	r0, [pc, #28]	; (8000f80 <uartWrite+0x40>)
 8000f62:	f003 fd23 	bl	80049ac <HAL_UART_Transmit>
 8000f66:	4603      	mov	r3, r0
 8000f68:	74fb      	strb	r3, [r7, #19]
      if(status == HAL_OK)
 8000f6a:	7cfb      	ldrb	r3, [r7, #19]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <uartWrite+0x34>
      {
        ret = length;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	617b      	str	r3, [r7, #20]
      }
      break;
 8000f74:	bf00      	nop
  }

  return ret;
 8000f76:	697b      	ldr	r3, [r7, #20]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000348 	.word	0x20000348

08000f84 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8000f84:	b40e      	push	{r1, r2, r3}
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b0c7      	sub	sp, #284	; 0x11c
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f92:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000f96:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8000f98:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000f9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fa0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fa4:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8000fa6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000faa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fae:	f107 0010 	add.w	r0, r7, #16
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fbc:	f00a fb16 	bl	800b5ec <vsniprintf>
 8000fc0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8000fc4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000fc8:	f107 0110 	add.w	r1, r7, #16
 8000fcc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fd0:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ffb2 	bl	8000f40 <uartWrite>
 8000fdc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8000fe0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000fea:	46bd      	mov	sp, r7
 8000fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ff0:	b003      	add	sp, #12
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_UART_ErrorCallback>:

  return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
  {

  }
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_UART_RxCpltCallback+0x30>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d109      	bne.n	800102e <HAL_UART_RxCpltCallback+0x26>
  {
    // 빠르게 송신시 1 바이트 사용시 인터럽트가 많이 걸려서 처리가 늦어져 overrun (덮어쓰기 에러) , 데이터 손실 에러 발생 가능
    // 고속의 송수신 - DMA 방식을 사용
    qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
 800101a:	2201      	movs	r2, #1
 800101c:	4907      	ldr	r1, [pc, #28]	; (800103c <HAL_UART_RxCpltCallback+0x34>)
 800101e:	4808      	ldr	r0, [pc, #32]	; (8001040 <HAL_UART_RxCpltCallback+0x38>)
 8001020:	f7ff fcb9 	bl	8000996 <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[_DEF_UART1], 1);
 8001024:	2201      	movs	r2, #1
 8001026:	4905      	ldr	r1, [pc, #20]	; (800103c <HAL_UART_RxCpltCallback+0x34>)
 8001028:	4806      	ldr	r0, [pc, #24]	; (8001044 <HAL_UART_RxCpltCallback+0x3c>)
 800102a:	f003 fd4d 	bl	8004ac8 <HAL_UART_Receive_IT>
  }
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40013800 	.word	0x40013800
 800103c:	20000344 	.word	0x20000344
 8001040:	20000230 	.word	0x20000230
 8001044:	20000348 	.word	0x20000348

08001048 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b09e      	sub	sp, #120	; 0x78
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2254      	movs	r2, #84	; 0x54
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f00a facd 	bl	800b608 <memset>
  if(uartHandle->Instance==USART1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a22      	ldr	r2, [pc, #136]	; (80010fc <HAL_UART_MspInit+0xb4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d13d      	bne.n	80010f4 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001078:	2301      	movs	r3, #1
 800107a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	4618      	mov	r0, r3
 8001086:	f003 f8a7 	bl	80041d8 <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001090:	f7ff fb88 	bl	80007a4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001094:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <HAL_UART_MspInit+0xb8>)
 8001096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001098:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_UART_MspInit+0xb8>)
 800109a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109e:	6613      	str	r3, [r2, #96]	; 0x60
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_UART_MspInit+0xb8>)
 80010a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_UART_MspInit+0xb8>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	4a13      	ldr	r2, [pc, #76]	; (8001100 <HAL_UART_MspInit+0xb8>)
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_UART_MspInit+0xb8>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC4_USART1_TX_Pin|PC5_USART1_RX_Pin;
 80010c4:	2330      	movs	r3, #48	; 0x30
 80010c6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d4:	2307      	movs	r3, #7
 80010d6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010dc:	4619      	mov	r1, r3
 80010de:	4809      	ldr	r0, [pc, #36]	; (8001104 <HAL_UART_MspInit+0xbc>)
 80010e0:	f000 fb48 	bl	8001774 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2025      	movs	r0, #37	; 0x25
 80010ea:	f000 fa4e 	bl	800158a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010ee:	2025      	movs	r0, #37	; 0x25
 80010f0:	f000 fa65 	bl	80015be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010f4:	bf00      	nop
 80010f6:	3778      	adds	r7, #120	; 0x78
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40013800 	.word	0x40013800
 8001100:	40021000 	.word	0x40021000
 8001104:	48000800 	.word	0x48000800

08001108 <usbInit>:
#endif



bool usbInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
  bool ret = true;
 800110e:	2301      	movs	r3, #1
 8001110:	71fb      	strb	r3, [r7, #7]


#ifdef _USE_HW_CLI
  cliAdd("usb", cliCmd);
#endif
  return ret;
 8001112:	79fb      	ldrb	r3, [r7, #7]
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <usbBegin>:
{
  return is_usb_mode;
}

bool usbBegin(UsbMode usb_mode)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]


#if HW_USE_CDC == 1

  if (usb_mode == USB_CDC_MODE)
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d12a      	bne.n	800118a <usbBegin+0x6a>
  {
    if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 8001134:	2200      	movs	r2, #0
 8001136:	4919      	ldr	r1, [pc, #100]	; (800119c <usbBegin+0x7c>)
 8001138:	4819      	ldr	r0, [pc, #100]	; (80011a0 <usbBegin+0x80>)
 800113a:	f008 fb79 	bl	8009830 <USBD_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <usbBegin+0x28>
    {
      return false;
 8001144:	2300      	movs	r3, #0
 8001146:	e024      	b.n	8001192 <usbBegin+0x72>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001148:	4916      	ldr	r1, [pc, #88]	; (80011a4 <usbBegin+0x84>)
 800114a:	4815      	ldr	r0, [pc, #84]	; (80011a0 <usbBegin+0x80>)
 800114c:	f008 fba0 	bl	8009890 <USBD_RegisterClass>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <usbBegin+0x3a>
    {
      return false;
 8001156:	2300      	movs	r3, #0
 8001158:	e01b      	b.n	8001192 <usbBegin+0x72>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800115a:	4913      	ldr	r1, [pc, #76]	; (80011a8 <usbBegin+0x88>)
 800115c:	4810      	ldr	r0, [pc, #64]	; (80011a0 <usbBegin+0x80>)
 800115e:	f008 faf1 	bl	8009744 <USBD_CDC_RegisterInterface>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <usbBegin+0x4c>
    {
      return false;
 8001168:	2300      	movs	r3, #0
 800116a:	e012      	b.n	8001192 <usbBegin+0x72>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <usbBegin+0x80>)
 800116e:	f008 fbb6 	bl	80098de <USBD_Start>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <usbBegin+0x5c>
    {
      return false;
 8001178:	2300      	movs	r3, #0
 800117a:	e00a      	b.n	8001192 <usbBegin+0x72>
    }


    cdcInit();
 800117c:	f7ff fc80 	bl	8000a80 <cdcInit>

    is_usb_mode = USB_CDC_MODE;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <usbBegin+0x8c>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
    ret = true;
 8001186:	2301      	movs	r3, #1
 8001188:	73fb      	strb	r3, [r7, #15]
    ret = true;
  }
#endif


  is_init = ret;
 800118a:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <usbBegin+0x90>)
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	7013      	strb	r3, [r2, #0]

  return ret;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000138 	.word	0x20000138
 80011a0:	200003e8 	.word	0x200003e8
 80011a4:	20000018 	.word	0x20000018
 80011a8:	20000124 	.word	0x20000124
 80011ac:	200003dd 	.word	0x200003dd
 80011b0:	200003dc 	.word	0x200003dc

080011b4 <hwInit>:
 *      Author: mm940
 */
#include "hw.h"

bool hwInit(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
  bool ret = true;
 80011ba:	2301      	movs	r3, #1
 80011bc:	71fb      	strb	r3, [r7, #7]

  ret &= bspInit();
 80011be:	f7ff fa1f 	bl	8000600 <bspInit>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bf14      	ite	ne
 80011ce:	2301      	movne	r3, #1
 80011d0:	2300      	moveq	r3, #0
 80011d2:	71fb      	strb	r3, [r7, #7]
  ret &= rtcInit();
 80011d4:	f7ff fd78 	bl	8000cc8 <rtcInit>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4013      	ands	r3, r2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bf14      	ite	ne
 80011e4:	2301      	movne	r3, #1
 80011e6:	2300      	moveq	r3, #0
 80011e8:	71fb      	strb	r3, [r7, #7]
#ifdef _USE_HW_RESET
  ret &= resetInit();
 80011ea:	f7ff fcd7 	bl	8000b9c <resetInit>
 80011ee:	4603      	mov	r3, r0
 80011f0:	461a      	mov	r2, r3
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	bf14      	ite	ne
 80011fa:	2301      	movne	r3, #1
 80011fc:	2300      	moveq	r3, #0
 80011fe:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef _USE_HW_RESET
  if (resetGetCount() == 2)
 8001200:	f7ff fd12 	bl	8000c28 <resetGetCount>
 8001204:	4603      	mov	r3, r0
 8001206:	2b02      	cmp	r3, #2
 8001208:	d105      	bne.n	8001216 <hwInit+0x62>
  {
    uartPrintf(_DEF_UART1, "SysBoot");
 800120a:	4927      	ldr	r1, [pc, #156]	; (80012a8 <hwInit+0xf4>)
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff feb9 	bl	8000f84 <uartPrintf>
    // Jump To SystemBootloader
    resetToSystemBoot();
 8001212:	f7ff fd15 	bl	8000c40 <resetToSystemBoot>
  }
#endif
  ret &= ledInit();
 8001216:	f7ff fc4b 	bl	8000ab0 <ledInit>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4013      	ands	r3, r2
 8001222:	2b00      	cmp	r3, #0
 8001224:	bf14      	ite	ne
 8001226:	2301      	movne	r3, #1
 8001228:	2300      	moveq	r3, #0
 800122a:	71fb      	strb	r3, [r7, #7]
  ret &= usbInit();
 800122c:	f7ff ff6c 	bl	8001108 <usbInit>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf14      	ite	ne
 800123c:	2301      	movne	r3, #1
 800123e:	2300      	moveq	r3, #0
 8001240:	71fb      	strb	r3, [r7, #7]
  ret &= usbBegin(USB_CDC_MODE);
 8001242:	2001      	movs	r0, #1
 8001244:	f7ff ff6c 	bl	8001120 <usbBegin>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf14      	ite	ne
 8001254:	2301      	movne	r3, #1
 8001256:	2300      	moveq	r3, #0
 8001258:	71fb      	strb	r3, [r7, #7]
  ret &= uartInit();
 800125a:	f7ff fdc3 	bl	8000de4 <uartInit>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	4013      	ands	r3, r2
 8001266:	2b00      	cmp	r3, #0
 8001268:	bf14      	ite	ne
 800126a:	2301      	movne	r3, #1
 800126c:	2300      	moveq	r3, #0
 800126e:	71fb      	strb	r3, [r7, #7]
  ret &= uartOpen(_DEF_UART1, 115200);
 8001270:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fdcf 	bl	8000e18 <uartOpen>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	bf14      	ite	ne
 8001286:	2301      	movne	r3, #1
 8001288:	2300      	moveq	r3, #0
 800128a:	71fb      	strb	r3, [r7, #7]

  uartPrintf(_DEF_UART1, "Reset Count : %d\n", resetGetCount());
 800128c:	f7ff fccc 	bl	8000c28 <resetGetCount>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	4905      	ldr	r1, [pc, #20]	; (80012ac <hwInit+0xf8>)
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fe74 	bl	8000f84 <uartPrintf>
  return ret;
 800129c:	79fb      	ldrb	r3, [r7, #7]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	0800bf28 	.word	0x0800bf28
 80012ac:	0800bf30 	.word	0x0800bf30

080012b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ba:	2003      	movs	r0, #3
 80012bc:	f000 f95a 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c0:	200f      	movs	r0, #15
 80012c2:	f000 f80d 	bl	80012e0 <HAL_InitTick>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	e001      	b.n	80012d6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012d2:	f7ff fa6f 	bl	80007b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012d6:	79fb      	ldrb	r3, [r7, #7]

}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_InitTick+0x68>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d022      	beq.n	800133a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_InitTick+0x6c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_InitTick+0x68>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001300:	fbb1 f3f3 	udiv	r3, r1, r3
 8001304:	fbb2 f3f3 	udiv	r3, r2, r3
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f966 	bl	80015da <HAL_SYSTICK_Config>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10f      	bne.n	8001334 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b0f      	cmp	r3, #15
 8001318:	d809      	bhi.n	800132e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131a:	2200      	movs	r2, #0
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	f04f 30ff 	mov.w	r0, #4294967295
 8001322:	f000 f932 	bl	800158a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <HAL_InitTick+0x70>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e007      	b.n	800133e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	e004      	b.n	800133e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e001      	b.n	800133e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000008 	.word	0x20000008
 800134c:	20000000 	.word	0x20000000
 8001350:	20000004 	.word	0x20000004

08001354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_IncTick+0x1c>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_IncTick+0x20>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4413      	add	r3, r2
 8001362:	4a03      	ldr	r2, [pc, #12]	; (8001370 <HAL_IncTick+0x1c>)
 8001364:	6013      	str	r3, [r2, #0]
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	200003e0 	.word	0x200003e0
 8001374:	20000008 	.word	0x20000008

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	200003e0 	.word	0x200003e0

08001390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff ffee 	bl	8001378 <HAL_GetTick>
 800139c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d004      	beq.n	80013b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_Delay+0x40>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b4:	bf00      	nop
 80013b6:	f7ff ffdf 	bl	8001378 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d8f7      	bhi.n	80013b6 <HAL_Delay+0x26>
  {
  }
}
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000008 	.word	0x20000008

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4907      	ldr	r1, [pc, #28]	; (8001470 <__NVIC_EnableIRQ+0x38>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
         );
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001540:	d301      	bcc.n	8001546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001542:	2301      	movs	r3, #1
 8001544:	e00f      	b.n	8001566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <SysTick_Config+0x40>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154e:	210f      	movs	r1, #15
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f7ff ff8e 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <SysTick_Config+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SysTick_Config+0x40>)
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff29 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001598:	f7ff ff40 	bl	800141c <__NVIC_GetPriorityGrouping>
 800159c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f7ff ff90 	bl	80014c8 <NVIC_EncodePriority>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff5f 	bl	8001474 <__NVIC_SetPriority>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff33 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ffa4 	bl	8001530 <SysTick_Config>
 80015e8:	4603      	mov	r3, r0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d005      	beq.n	8001616 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2204      	movs	r2, #4
 800160e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e037      	b.n	8001686 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 020e 	bic.w	r2, r2, #14
 8001624:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001630:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001634:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0201 	bic.w	r2, r2, #1
 8001644:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f003 021f 	and.w	r2, r3, #31
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f202 	lsl.w	r2, r1, r2
 8001658:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001662:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00c      	beq.n	8001686 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001676:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800167a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001684:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d00d      	beq.n	80016d8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2204      	movs	r2, #4
 80016c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
 80016d6:	e047      	b.n	8001768 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 020e 	bic.w	r2, r2, #14
 80016e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0201 	bic.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001702:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001706:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	2101      	movs	r1, #1
 8001716:	fa01 f202 	lsl.w	r2, r1, r2
 800171a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001724:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00c      	beq.n	8001748 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800173c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001746:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4798      	blx	r3
    }
  }
  return status;
 8001768:	7bfb      	ldrb	r3, [r7, #15]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001782:	e15a      	b.n	8001a3a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2101      	movs	r1, #1
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	4013      	ands	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 814c 	beq.w	8001a34 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d005      	beq.n	80017b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d130      	bne.n	8001816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ea:	2201      	movs	r2, #1
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	f003 0201 	and.w	r2, r3, #1
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b03      	cmp	r3, #3
 8001820:	d017      	beq.n	8001852 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	2203      	movs	r2, #3
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d123      	bne.n	80018a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3208      	adds	r2, #8
 8001866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	220f      	movs	r2, #15
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	691a      	ldr	r2, [r3, #16]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	08da      	lsrs	r2, r3, #3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3208      	adds	r2, #8
 80018a0:	6939      	ldr	r1, [r7, #16]
 80018a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0203 	and.w	r2, r3, #3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80a6 	beq.w	8001a34 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e8:	4b5b      	ldr	r3, [pc, #364]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 80018ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ec:	4a5a      	ldr	r2, [pc, #360]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6613      	str	r3, [r2, #96]	; 0x60
 80018f4:	4b58      	ldr	r3, [pc, #352]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 80018f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001900:	4a56      	ldr	r2, [pc, #344]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	089b      	lsrs	r3, r3, #2
 8001906:	3302      	adds	r3, #2
 8001908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800192a:	d01f      	beq.n	800196c <HAL_GPIO_Init+0x1f8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a4c      	ldr	r2, [pc, #304]	; (8001a60 <HAL_GPIO_Init+0x2ec>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d019      	beq.n	8001968 <HAL_GPIO_Init+0x1f4>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a4b      	ldr	r2, [pc, #300]	; (8001a64 <HAL_GPIO_Init+0x2f0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d013      	beq.n	8001964 <HAL_GPIO_Init+0x1f0>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a4a      	ldr	r2, [pc, #296]	; (8001a68 <HAL_GPIO_Init+0x2f4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d00d      	beq.n	8001960 <HAL_GPIO_Init+0x1ec>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a49      	ldr	r2, [pc, #292]	; (8001a6c <HAL_GPIO_Init+0x2f8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d007      	beq.n	800195c <HAL_GPIO_Init+0x1e8>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a48      	ldr	r2, [pc, #288]	; (8001a70 <HAL_GPIO_Init+0x2fc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d101      	bne.n	8001958 <HAL_GPIO_Init+0x1e4>
 8001954:	2305      	movs	r3, #5
 8001956:	e00a      	b.n	800196e <HAL_GPIO_Init+0x1fa>
 8001958:	2306      	movs	r3, #6
 800195a:	e008      	b.n	800196e <HAL_GPIO_Init+0x1fa>
 800195c:	2304      	movs	r3, #4
 800195e:	e006      	b.n	800196e <HAL_GPIO_Init+0x1fa>
 8001960:	2303      	movs	r3, #3
 8001962:	e004      	b.n	800196e <HAL_GPIO_Init+0x1fa>
 8001964:	2302      	movs	r3, #2
 8001966:	e002      	b.n	800196e <HAL_GPIO_Init+0x1fa>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <HAL_GPIO_Init+0x1fa>
 800196c:	2300      	movs	r3, #0
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	f002 0203 	and.w	r2, r2, #3
 8001974:	0092      	lsls	r2, r2, #2
 8001976:	4093      	lsls	r3, r2
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800197e:	4937      	ldr	r1, [pc, #220]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800198c:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <HAL_GPIO_Init+0x300>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019b0:	4a30      	ldr	r2, [pc, #192]	; (8001a74 <HAL_GPIO_Init+0x300>)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019b6:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <HAL_GPIO_Init+0x300>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019da:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <HAL_GPIO_Init+0x300>)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_GPIO_Init+0x300>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_GPIO_Init+0x300>)
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <HAL_GPIO_Init+0x300>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a2e:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <HAL_GPIO_Init+0x300>)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	3301      	adds	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f47f ae9d 	bne.w	8001784 <HAL_GPIO_Init+0x10>
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	bf00      	nop
 8001a4e:	371c      	adds	r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	48000400 	.word	0x48000400
 8001a64:	48000800 	.word	0x48000800
 8001a68:	48000c00 	.word	0x48000c00
 8001a6c:	48001000 	.word	0x48001000
 8001a70:	48001400 	.word	0x48001400
 8001a74:	40010400 	.word	0x40010400

08001a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a88:	787b      	ldrb	r3, [r7, #1]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0c0      	b.n	8001c3c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f009 fa52 	bl	800af78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f005 f84c 	bl	8006b7e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
 8001aea:	e03e      	b.n	8001b6a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	440b      	add	r3, r1
 8001afa:	3311      	adds	r3, #17
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3310      	adds	r3, #16
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	3313      	adds	r3, #19
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	3320      	adds	r3, #32
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	3324      	adds	r3, #36	; 0x24
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	3301      	adds	r3, #1
 8001b68:	73fb      	strb	r3, [r7, #15]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	791b      	ldrb	r3, [r3, #4]
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d3bb      	bcc.n	8001aec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e044      	b.n	8001c04 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b7a:	7bfa      	ldrb	r2, [r7, #15]
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	440b      	add	r3, r1
 8001b88:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b90:	7bfa      	ldrb	r2, [r7, #15]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	440b      	add	r3, r1
 8001b9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bbc:	7bfa      	ldrb	r2, [r7, #15]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	440b      	add	r3, r1
 8001be0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	3301      	adds	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	791b      	ldrb	r3, [r3, #4]
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d3b5      	bcc.n	8001b7a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3304      	adds	r3, #4
 8001c16:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001c1a:	f004 ffcb 	bl	8006bb4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7a9b      	ldrb	r3, [r3, #10]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d102      	bne.n	8001c3a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f001 fc41 	bl	80034bc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_PCD_Start+0x16>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e012      	b.n	8001c80 <HAL_PCD_Start+0x3c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f004 ff72 	bl	8006b50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f007 fa32 	bl	80090da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f007 fa37 	bl	8009108 <USB_ReadInterrupts>
 8001c9a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fb04 	bl	80022b4 <PCD_EP_ISR_Handler>

    return;
 8001cac:	e110      	b.n	8001ed0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f009 f9e2 	bl	800b09a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f8fc 	bl	8001ed6 <HAL_PCD_SetAddress>

    return;
 8001cde:	e0f7      	b.n	8001ed0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00c      	beq.n	8001d04 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cfc:	b292      	uxth	r2, r2
 8001cfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001d02:	e0e5      	b.n	8001ed0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d20:	b292      	uxth	r2, r2
 8001d22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001d26:	e0d3      	b.n	8001ed0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d034      	beq.n	8001d9c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0204 	bic.w	r2, r2, #4
 8001d44:	b292      	uxth	r2, r2
 8001d46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0208 	bic.w	r2, r2, #8
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d107      	bne.n	8001d7c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d74:	2100      	movs	r1, #0
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f009 fb82 	bl	800b480 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f009 f9c5 	bl	800b10c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d94:	b292      	uxth	r2, r2
 8001d96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001d9a:	e099      	b.n	8001ed0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d027      	beq.n	8001df6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0208 	orr.w	r2, r2, #8
 8001db8:	b292      	uxth	r2, r2
 8001dba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dd0:	b292      	uxth	r2, r2
 8001dd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0204 	orr.w	r2, r2, #4
 8001de8:	b292      	uxth	r2, r2
 8001dea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f009 f972 	bl	800b0d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001df4:	e06c      	b.n	8001ed0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d040      	beq.n	8001e82 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e12:	b292      	uxth	r2, r2
 8001e14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d12b      	bne.n	8001e7a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 0204 	orr.w	r2, r2, #4
 8001e34:	b292      	uxth	r2, r2
 8001e36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0208 	orr.w	r2, r2, #8
 8001e4c:	b292      	uxth	r2, r2
 8001e4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001e70:	2101      	movs	r1, #1
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f009 fb04 	bl	800b480 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001e78:	e02a      	b.n	8001ed0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f009 f92c 	bl	800b0d8 <HAL_PCD_SuspendCallback>
    return;
 8001e80:	e026      	b.n	8001ed0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00f      	beq.n	8001eac <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e9e:	b292      	uxth	r2, r2
 8001ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f009 f8ea 	bl	800b07e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001eaa:	e011      	b.n	8001ed0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00c      	beq.n	8001ed0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ec8:	b292      	uxth	r2, r2
 8001eca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ece:	bf00      	nop
  }
}
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_PCD_SetAddress+0x1a>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e012      	b.n	8001f16 <HAL_PCD_SetAddress+0x40>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	78fa      	ldrb	r2, [r7, #3]
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f007 f8d3 	bl	80090b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	4608      	mov	r0, r1
 8001f28:	4611      	mov	r1, r2
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	70fb      	strb	r3, [r7, #3]
 8001f30:	460b      	mov	r3, r1
 8001f32:	803b      	strh	r3, [r7, #0]
 8001f34:	4613      	mov	r3, r2
 8001f36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	da0e      	bge.n	8001f62 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 0207 	and.w	r2, r3, #7
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	3310      	adds	r3, #16
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	705a      	strb	r2, [r3, #1]
 8001f60:	e00e      	b.n	8001f80 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 0207 	and.w	r2, r3, #7
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f8c:	883a      	ldrh	r2, [r7, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	78ba      	ldrb	r2, [r7, #2]
 8001f96:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f98:	78bb      	ldrb	r3, [r7, #2]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d102      	bne.n	8001fa4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_PCD_EP_Open+0x94>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e00e      	b.n	8001fd0 <HAL_PCD_EP_Open+0xb2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68f9      	ldr	r1, [r7, #12]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 fe15 	bl	8006bf0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8001fce:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	da0e      	bge.n	800200a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	f003 0207 	and.w	r2, r3, #7
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	3310      	adds	r3, #16
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	705a      	strb	r2, [r3, #1]
 8002008:	e00e      	b.n	8002028 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	f003 0207 	and.w	r2, r3, #7
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	b2da      	uxtb	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_PCD_EP_Close+0x6a>
 800203e:	2302      	movs	r3, #2
 8002040:	e00e      	b.n	8002060 <HAL_PCD_EP_Close+0x88>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68f9      	ldr	r1, [r7, #12]
 8002050:	4618      	mov	r0, r3
 8002052:	f005 f991 	bl	8007378 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	460b      	mov	r3, r1
 8002076:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002078:	7afb      	ldrb	r3, [r7, #11]
 800207a:	f003 0207 	and.w	r2, r3, #7
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4413      	add	r3, r2
 800208e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2200      	movs	r2, #0
 80020a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a8:	7afb      	ldrb	r3, [r7, #11]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6979      	ldr	r1, [r7, #20]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f005 fb49 	bl	8007752 <USB_EPStartXfer>

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	f003 0207 	and.w	r2, r3, #7
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80020ec:	681b      	ldr	r3, [r3, #0]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	460b      	mov	r3, r1
 8002108:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800210a:	7afb      	ldrb	r3, [r7, #11]
 800210c:	f003 0207 	and.w	r2, r3, #7
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	3310      	adds	r3, #16
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4413      	add	r3, r2
 800211e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2200      	movs	r2, #0
 800213e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2201      	movs	r2, #1
 8002144:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002146:	7afb      	ldrb	r3, [r7, #11]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	b2da      	uxtb	r2, r3
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6979      	ldr	r1, [r7, #20]
 8002158:	4618      	mov	r0, r3
 800215a:	f005 fafa 	bl	8007752 <USB_EPStartXfer>

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	7912      	ldrb	r2, [r2, #4]
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e03e      	b.n	8002204 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800218a:	2b00      	cmp	r3, #0
 800218c:	da0e      	bge.n	80021ac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	f003 0207 	and.w	r2, r3, #7
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	3310      	adds	r3, #16
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	705a      	strb	r2, [r3, #1]
 80021aa:	e00c      	b.n	80021c6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_PCD_EP_SetStall+0x7e>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e00e      	b.n	8002204 <HAL_PCD_EP_SetStall+0x9c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68f9      	ldr	r1, [r7, #12]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f006 fe5d 	bl	8008eb4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	7912      	ldrb	r2, [r2, #4]
 8002222:	4293      	cmp	r3, r2
 8002224:	d901      	bls.n	800222a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e040      	b.n	80022ac <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800222a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800222e:	2b00      	cmp	r3, #0
 8002230:	da0e      	bge.n	8002250 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	f003 0207 	and.w	r2, r3, #7
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	3310      	adds	r3, #16
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2201      	movs	r2, #1
 800224c:	705a      	strb	r2, [r3, #1]
 800224e:	e00e      	b.n	800226e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	f003 0207 	and.w	r2, r3, #7
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	b2da      	uxtb	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_PCD_EP_ClrStall+0x82>
 800228a:	2302      	movs	r3, #2
 800228c:	e00e      	b.n	80022ac <HAL_PCD_EP_ClrStall+0xa0>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68f9      	ldr	r1, [r7, #12]
 800229c:	4618      	mov	r0, r3
 800229e:	f006 fe5a 	bl	8008f56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b096      	sub	sp, #88	; 0x58
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022bc:	e3ae      	b.n	8002a1c <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80022ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80022d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f040 8170 	bne.w	80025c2 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80022e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d14d      	bne.n	800238a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fe:	81fb      	strh	r3, [r7, #14]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	89fb      	ldrh	r3, [r7, #14]
 8002306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800230a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800230e:	b29b      	uxth	r3, r3
 8002310:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3310      	adds	r3, #16
 8002316:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002320:	b29b      	uxth	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	4413      	add	r3, r2
 8002332:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800233c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	441a      	add	r2, r3
 800234a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800234c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800234e:	2100      	movs	r1, #0
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f008 fe7a 	bl	800b04a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	7b1b      	ldrb	r3, [r3, #12]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 835d 	beq.w	8002a1c <PCD_EP_ISR_Handler+0x768>
 8002362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 8358 	bne.w	8002a1c <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7b1b      	ldrb	r3, [r3, #12]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002376:	b2da      	uxtb	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	b292      	uxth	r2, r2
 800237e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	731a      	strb	r2, [r3, #12]
 8002388:	e348      	b.n	8002a1c <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002390:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800239c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d032      	beq.n	800240e <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	4413      	add	r3, r2
 80023c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ce:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80023da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023dc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80023de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f006 fee2 	bl	80091ac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023f4:	4013      	ands	r3, r2
 80023f6:	823b      	strh	r3, [r7, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	8a3a      	ldrh	r2, [r7, #16]
 80023fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002402:	b292      	uxth	r2, r2
 8002404:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f008 fdf2 	bl	800aff0 <HAL_PCD_SetupStageCallback>
 800240c:	e306      	b.n	8002a1c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800240e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002412:	2b00      	cmp	r3, #0
 8002414:	f280 8302 	bge.w	8002a1c <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29a      	uxth	r2, r3
 8002420:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002424:	4013      	ands	r3, r2
 8002426:	83fb      	strh	r3, [r7, #30]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	8bfa      	ldrh	r2, [r7, #30]
 800242e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002432:	b292      	uxth	r2, r2
 8002434:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243e:	b29b      	uxth	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	4413      	add	r3, r2
 8002450:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800245a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800245c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800245e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d019      	beq.n	800249a <PCD_EP_ISR_Handler+0x1e6>
 8002466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d015      	beq.n	800249a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002474:	6959      	ldr	r1, [r3, #20]
 8002476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002478:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800247a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800247c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800247e:	b29b      	uxth	r3, r3
 8002480:	f006 fe94 	bl	80091ac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	441a      	add	r2, r3
 800248e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002490:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002492:	2100      	movs	r1, #0
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f008 fdbd 	bl	800b014 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80024a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 82b5 	bne.w	8002a1c <PCD_EP_ISR_Handler+0x768>
 80024b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80024ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024be:	f000 82ad 	beq.w	8002a1c <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4413      	add	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	801a      	strh	r2, [r3, #0]
 80024f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b3e      	cmp	r3, #62	; 0x3e
 80024f8:	d91d      	bls.n	8002536 <PCD_EP_ISR_Handler+0x282>
 80024fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	647b      	str	r3, [r7, #68]	; 0x44
 8002502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2b00      	cmp	r3, #0
 800250c:	d102      	bne.n	8002514 <PCD_EP_ISR_Handler+0x260>
 800250e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002510:	3b01      	subs	r3, #1
 8002512:	647b      	str	r3, [r7, #68]	; 0x44
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	b29a      	uxth	r2, r3
 800251a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800251c:	b29b      	uxth	r3, r3
 800251e:	029b      	lsls	r3, r3, #10
 8002520:	b29b      	uxth	r3, r3
 8002522:	4313      	orrs	r3, r2
 8002524:	b29b      	uxth	r3, r3
 8002526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800252a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800252e:	b29a      	uxth	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	801a      	strh	r2, [r3, #0]
 8002534:	e026      	b.n	8002584 <PCD_EP_ISR_Handler+0x2d0>
 8002536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10a      	bne.n	8002554 <PCD_EP_ISR_Handler+0x2a0>
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800254c:	b29a      	uxth	r2, r3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	801a      	strh	r2, [r3, #0]
 8002552:	e017      	b.n	8002584 <PCD_EP_ISR_Handler+0x2d0>
 8002554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	647b      	str	r3, [r7, #68]	; 0x44
 800255c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <PCD_EP_ISR_Handler+0x2ba>
 8002568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256a:	3301      	adds	r3, #1
 800256c:	647b      	str	r3, [r7, #68]	; 0x44
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29a      	uxth	r2, r3
 8002574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002576:	b29b      	uxth	r3, r3
 8002578:	029b      	lsls	r3, r3, #10
 800257a:	b29b      	uxth	r3, r3
 800257c:	4313      	orrs	r3, r2
 800257e:	b29a      	uxth	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002594:	827b      	strh	r3, [r7, #18]
 8002596:	8a7b      	ldrh	r3, [r7, #18]
 8002598:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800259c:	827b      	strh	r3, [r7, #18]
 800259e:	8a7b      	ldrh	r3, [r7, #18]
 80025a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025a4:	827b      	strh	r3, [r7, #18]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	8a7b      	ldrh	r3, [r7, #18]
 80025ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025bc:	b29b      	uxth	r3, r3
 80025be:	8013      	strh	r3, [r2, #0]
 80025c0:	e22c      	b.n	8002a1c <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025d6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f280 80f6 	bge.w	80027cc <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025f6:	4013      	ands	r3, r2
 80025f8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800260e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002612:	b292      	uxth	r2, r2
 8002614:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002616:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800262c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262e:	7b1b      	ldrb	r3, [r3, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d123      	bne.n	800267c <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800263c:	b29b      	uxth	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	4413      	add	r3, r2
 800264e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002658:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800265c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 808e 	beq.w	8002782 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800266c:	6959      	ldr	r1, [r3, #20]
 800266e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002670:	88da      	ldrh	r2, [r3, #6]
 8002672:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002676:	f006 fd99 	bl	80091ac <USB_ReadPMA>
 800267a:	e082      	b.n	8002782 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800267c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800267e:	78db      	ldrb	r3, [r3, #3]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d10a      	bne.n	800269a <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002684:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002688:	461a      	mov	r2, r3
 800268a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f9d3 	bl	8002a38 <HAL_PCD_EP_DB_Receive>
 8002692:	4603      	mov	r3, r0
 8002694:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002698:	e073      	b.n	8002782 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	441a      	add	r2, r3
 80026c6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80026ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026da:	b29b      	uxth	r3, r3
 80026dc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d022      	beq.n	800273e <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	4413      	add	r3, r2
 8002712:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800271c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002720:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002724:	2b00      	cmp	r3, #0
 8002726:	d02c      	beq.n	8002782 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272e:	6959      	ldr	r1, [r3, #20]
 8002730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002732:	891a      	ldrh	r2, [r3, #8]
 8002734:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002738:	f006 fd38 	bl	80091ac <USB_ReadPMA>
 800273c:	e021      	b.n	8002782 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	4413      	add	r3, r2
 8002758:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002762:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002766:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002774:	6959      	ldr	r1, [r3, #20]
 8002776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002778:	895a      	ldrh	r2, [r3, #10]
 800277a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800277e:	f006 fd15 	bl	80091ac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800278a:	441a      	add	r2, r3
 800278c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002798:	441a      	add	r2, r3
 800279a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800279c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800279e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <PCD_EP_ISR_Handler+0x4fe>
 80027a6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80027aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d206      	bcs.n	80027c0 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80027b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	4619      	mov	r1, r3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f008 fc2b 	bl	800b014 <HAL_PCD_DataOutStageCallback>
 80027be:	e005      	b.n	80027cc <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027c6:	4618      	mov	r0, r3
 80027c8:	f004 ffc3 	bl	8007752 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80027cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8121 	beq.w	8002a1c <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80027da:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	3310      	adds	r3, #16
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002808:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	441a      	add	r2, r3
 800281a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800281e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002826:	b29b      	uxth	r3, r3
 8002828:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800282a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282c:	78db      	ldrb	r3, [r3, #3]
 800282e:	2b01      	cmp	r3, #1
 8002830:	f040 80a2 	bne.w	8002978 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8002834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002836:	2200      	movs	r2, #0
 8002838:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800283a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283c:	7b1b      	ldrb	r3, [r3, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 8093 	beq.w	800296a <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002844:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d046      	beq.n	80028de <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002852:	785b      	ldrb	r3, [r3, #1]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d126      	bne.n	80028a6 <PCD_EP_ISR_Handler+0x5f2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002866:	b29b      	uxth	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	4413      	add	r3, r2
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
 8002870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	00da      	lsls	r2, r3, #3
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	4413      	add	r3, r2
 800287a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800287e:	623b      	str	r3, [r7, #32]
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29b      	uxth	r3, r3
 8002886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800288a:	b29a      	uxth	r2, r3
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	801a      	strh	r2, [r3, #0]
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800289a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800289e:	b29a      	uxth	r2, r3
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	801a      	strh	r2, [r3, #0]
 80028a4:	e061      	b.n	800296a <PCD_EP_ISR_Handler+0x6b6>
 80028a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a8:	785b      	ldrb	r3, [r3, #1]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d15d      	bne.n	800296a <PCD_EP_ISR_Handler+0x6b6>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028bc:	b29b      	uxth	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c2:	4413      	add	r3, r2
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	00da      	lsls	r2, r3, #3
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	4413      	add	r3, r2
 80028d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	2200      	movs	r2, #0
 80028da:	801a      	strh	r2, [r3, #0]
 80028dc:	e045      	b.n	800296a <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d126      	bne.n	800293a <PCD_EP_ISR_Handler+0x686>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002900:	4413      	add	r3, r2
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
 8002904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	00da      	lsls	r2, r3, #3
 800290a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290c:	4413      	add	r3, r2
 800290e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
 8002914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800291e:	b29a      	uxth	r2, r3
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	801a      	strh	r2, [r3, #0]
 8002924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800292e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002932:	b29a      	uxth	r2, r3
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	801a      	strh	r2, [r3, #0]
 8002938:	e017      	b.n	800296a <PCD_EP_ISR_Handler+0x6b6>
 800293a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293c:	785b      	ldrb	r3, [r3, #1]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d113      	bne.n	800296a <PCD_EP_ISR_Handler+0x6b6>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294a:	b29b      	uxth	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002950:	4413      	add	r3, r2
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	00da      	lsls	r2, r3, #3
 800295a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295c:	4413      	add	r3, r2
 800295e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002962:	63bb      	str	r3, [r7, #56]	; 0x38
 8002964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002966:	2200      	movs	r2, #0
 8002968:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800296a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f008 fb6a 	bl	800b04a <HAL_PCD_DataInStageCallback>
 8002976:	e051      	b.n	8002a1c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002978:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d144      	bne.n	8002a0e <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800298c:	b29b      	uxth	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	4413      	add	r3, r2
 800299e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80029ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ae:	699a      	ldr	r2, [r3, #24]
 80029b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d907      	bls.n	80029c8 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80029b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ba:	699a      	ldr	r2, [r3, #24]
 80029bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029c0:	1ad2      	subs	r2, r2, r3
 80029c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c4:	619a      	str	r2, [r3, #24]
 80029c6:	e002      	b.n	80029ce <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80029c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ca:	2200      	movs	r2, #0
 80029cc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80029ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	4619      	mov	r1, r3
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f008 fb34 	bl	800b04a <HAL_PCD_DataInStageCallback>
 80029e2:	e01b      	b.n	8002a1c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80029e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029ec:	441a      	add	r2, r3
 80029ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80029f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f4:	69da      	ldr	r2, [r3, #28]
 80029f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029fa:	441a      	add	r2, r3
 80029fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fe:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a06:	4618      	mov	r0, r3
 8002a08:	f004 fea3 	bl	8007752 <USB_EPStartXfer>
 8002a0c:	e006      	b.n	8002a1c <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a12:	461a      	mov	r2, r3
 8002a14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f917 	bl	8002c4a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	b21b      	sxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f6ff ac48 	blt.w	80022be <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3758      	adds	r7, #88	; 0x58
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	4613      	mov	r3, r2
 8002a44:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d07c      	beq.n	8002b4a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4413      	add	r3, r2
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a74:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	8b7b      	ldrh	r3, [r7, #26]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d306      	bcc.n	8002a8e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	8b7b      	ldrh	r3, [r7, #26]
 8002a86:	1ad2      	subs	r2, r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	619a      	str	r2, [r3, #24]
 8002a8c:	e002      	b.n	8002a94 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2200      	movs	r2, #0
 8002a92:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d123      	bne.n	8002ae4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab6:	833b      	strh	r3, [r7, #24]
 8002ab8:	8b3b      	ldrh	r3, [r7, #24]
 8002aba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002abe:	833b      	strh	r3, [r7, #24]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	441a      	add	r2, r3
 8002ace:	8b3b      	ldrh	r3, [r7, #24]
 8002ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01f      	beq.n	8002b2e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b08:	82fb      	strh	r3, [r7, #22]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	441a      	add	r2, r3
 8002b18:	8afb      	ldrh	r3, [r7, #22]
 8002b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b2e:	8b7b      	ldrh	r3, [r7, #26]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 8085 	beq.w	8002c40 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	6959      	ldr	r1, [r3, #20]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	891a      	ldrh	r2, [r3, #8]
 8002b42:	8b7b      	ldrh	r3, [r7, #26]
 8002b44:	f006 fb32 	bl	80091ac <USB_ReadPMA>
 8002b48:	e07a      	b.n	8002c40 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b6e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	699a      	ldr	r2, [r3, #24]
 8002b74:	8b7b      	ldrh	r3, [r7, #26]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d306      	bcc.n	8002b88 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	8b7b      	ldrh	r3, [r7, #26]
 8002b80:	1ad2      	subs	r2, r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	619a      	str	r2, [r3, #24]
 8002b86:	e002      	b.n	8002b8e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d123      	bne.n	8002bde <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb0:	83fb      	strh	r3, [r7, #30]
 8002bb2:	8bfb      	ldrh	r3, [r7, #30]
 8002bb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bb8:	83fb      	strh	r3, [r7, #30]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	441a      	add	r2, r3
 8002bc8:	8bfb      	ldrh	r3, [r7, #30]
 8002bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d11f      	bne.n	8002c28 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	83bb      	strh	r3, [r7, #28]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	441a      	add	r2, r3
 8002c12:	8bbb      	ldrh	r3, [r7, #28]
 8002c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c28:	8b7b      	ldrh	r3, [r7, #26]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	6959      	ldr	r1, [r3, #20]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	895a      	ldrh	r2, [r3, #10]
 8002c3a:	8b7b      	ldrh	r3, [r7, #26]
 8002c3c:	f006 fab6 	bl	80091ac <USB_ReadPMA>
    }
  }

  return count;
 8002c40:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b0a4      	sub	sp, #144	; 0x90
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	4613      	mov	r3, r2
 8002c56:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 81db 	beq.w	800301a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c88:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d907      	bls.n	8002ca8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	699a      	ldr	r2, [r3, #24]
 8002c9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ca0:	1ad2      	subs	r2, r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	619a      	str	r2, [r3, #24]
 8002ca6:	e002      	b.n	8002cae <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 80b9 	bne.w	8002e2a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	785b      	ldrb	r3, [r3, #1]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d126      	bne.n	8002d0e <HAL_PCD_EP_DB_Transmit+0xc4>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd4:	4413      	add	r3, r2
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	00da      	lsls	r2, r3, #3
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	801a      	strh	r2, [r3, #0]
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	e01a      	b.n	8002d44 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	785b      	ldrb	r3, [r3, #1]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d116      	bne.n	8002d44 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2a:	4413      	add	r3, r2
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	00da      	lsls	r2, r3, #3
 8002d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d36:	4413      	add	r3, r2
 8002d38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	2200      	movs	r2, #0
 8002d42:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	785b      	ldrb	r3, [r3, #1]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d126      	bne.n	8002da0 <HAL_PCD_EP_DB_Transmit+0x156>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	4413      	add	r3, r2
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	00da      	lsls	r2, r3, #3
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	4413      	add	r3, r2
 8002d74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	801a      	strh	r2, [r3, #0]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	801a      	strh	r2, [r3, #0]
 8002d9e:	e017      	b.n	8002dd0 <HAL_PCD_EP_DB_Transmit+0x186>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	785b      	ldrb	r3, [r3, #1]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d113      	bne.n	8002dd0 <HAL_PCD_EP_DB_Transmit+0x186>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	4413      	add	r3, r2
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	00da      	lsls	r2, r3, #3
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dc8:	623b      	str	r3, [r7, #32]
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f008 f937 	bl	800b04a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 82fa 	beq.w	80033dc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e02:	82fb      	strh	r3, [r7, #22]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	441a      	add	r2, r3
 8002e12:	8afb      	ldrh	r3, [r7, #22]
 8002e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	8013      	strh	r3, [r2, #0]
 8002e28:	e2d8      	b.n	80033dc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d021      	beq.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	441a      	add	r2, r3
 8002e60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	f040 82ac 	bne.w	80033dc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	695a      	ldr	r2, [r3, #20]
 8002e88:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e8c:	441a      	add	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	69da      	ldr	r2, [r3, #28]
 8002e96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e9a:	441a      	add	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d30b      	bcc.n	8002ec4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ebc:	1ad2      	subs	r2, r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	621a      	str	r2, [r3, #32]
 8002ec2:	e017      	b.n	8002ef4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d108      	bne.n	8002ede <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002ecc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ed0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002edc:	e00a      	b.n	8002ef4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	785b      	ldrb	r3, [r3, #1]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d165      	bne.n	8002fc8 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f10:	4413      	add	r3, r2
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	00da      	lsls	r2, r3, #3
 8002f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f32:	801a      	strh	r2, [r3, #0]
 8002f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f38:	2b3e      	cmp	r3, #62	; 0x3e
 8002f3a:	d91d      	bls.n	8002f78 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f52:	3b01      	subs	r3, #1
 8002f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	029b      	lsls	r3, r3, #10
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	4313      	orrs	r3, r2
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f74:	801a      	strh	r2, [r3, #0]
 8002f76:	e044      	b.n	8003002 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10a      	bne.n	8002f96 <HAL_PCD_EP_DB_Transmit+0x34c>
 8002f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f92:	801a      	strh	r2, [r3, #0]
 8002f94:	e035      	b.n	8003002 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_PCD_EP_DB_Transmit+0x366>
 8002faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fac:	3301      	adds	r3, #1
 8002fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	029b      	lsls	r3, r3, #10
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc4:	801a      	strh	r2, [r3, #0]
 8002fc6:	e01c      	b.n	8003002 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	785b      	ldrb	r3, [r3, #1]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d118      	bne.n	8003002 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe4:	4413      	add	r3, r2
 8002fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	00da      	lsls	r2, r3, #3
 8002fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003000:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6959      	ldr	r1, [r3, #20]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	891a      	ldrh	r2, [r3, #8]
 800300e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003012:	b29b      	uxth	r3, r3
 8003014:	f006 f888 	bl	8009128 <USB_WritePMA>
 8003018:	e1e0      	b.n	80033dc <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003022:	b29b      	uxth	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	4413      	add	r3, r2
 8003034:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800303e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800304a:	429a      	cmp	r2, r3
 800304c:	d307      	bcc.n	800305e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003056:	1ad2      	subs	r2, r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	619a      	str	r2, [r3, #24]
 800305c:	e002      	b.n	8003064 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2200      	movs	r2, #0
 8003062:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	f040 80c0 	bne.w	80031ee <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	785b      	ldrb	r3, [r3, #1]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d126      	bne.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003084:	b29b      	uxth	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800308a:	4413      	add	r3, r2
 800308c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	00da      	lsls	r2, r3, #3
 8003094:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003096:	4413      	add	r3, r2
 8003098:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800309c:	67bb      	str	r3, [r7, #120]	; 0x78
 800309e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ac:	801a      	strh	r2, [r3, #0]
 80030ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030bc:	b29a      	uxth	r2, r3
 80030be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030c0:	801a      	strh	r2, [r3, #0]
 80030c2:	e01a      	b.n	80030fa <HAL_PCD_EP_DB_Transmit+0x4b0>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	785b      	ldrb	r3, [r3, #1]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d116      	bne.n	80030fa <HAL_PCD_EP_DB_Transmit+0x4b0>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	667b      	str	r3, [r7, #100]	; 0x64
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030da:	b29b      	uxth	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030e0:	4413      	add	r3, r2
 80030e2:	667b      	str	r3, [r7, #100]	; 0x64
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	00da      	lsls	r2, r3, #3
 80030ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ec:	4413      	add	r3, r2
 80030ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030f2:	663b      	str	r3, [r7, #96]	; 0x60
 80030f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030f6:	2200      	movs	r2, #0
 80030f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	677b      	str	r3, [r7, #116]	; 0x74
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	785b      	ldrb	r3, [r3, #1]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d12b      	bne.n	8003160 <HAL_PCD_EP_DB_Transmit+0x516>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003116:	b29b      	uxth	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311c:	4413      	add	r3, r2
 800311e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	00da      	lsls	r2, r3, #3
 8003126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003128:	4413      	add	r3, r2
 800312a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800312e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003132:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	b29b      	uxth	r3, r3
 800313a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800313e:	b29a      	uxth	r2, r3
 8003140:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003144:	801a      	strh	r2, [r3, #0]
 8003146:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	b29b      	uxth	r3, r3
 800314e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003156:	b29a      	uxth	r2, r3
 8003158:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800315c:	801a      	strh	r2, [r3, #0]
 800315e:	e017      	b.n	8003190 <HAL_PCD_EP_DB_Transmit+0x546>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	785b      	ldrb	r3, [r3, #1]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d113      	bne.n	8003190 <HAL_PCD_EP_DB_Transmit+0x546>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003170:	b29b      	uxth	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003176:	4413      	add	r3, r2
 8003178:	677b      	str	r3, [r7, #116]	; 0x74
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	00da      	lsls	r2, r3, #3
 8003180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003182:	4413      	add	r3, r2
 8003184:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003188:	673b      	str	r3, [r7, #112]	; 0x70
 800318a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800318c:	2200      	movs	r2, #0
 800318e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f007 ff57 	bl	800b04a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f040 811a 	bne.w	80033dc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	441a      	add	r2, r3
 80031d4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80031d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	8013      	strh	r3, [r2, #0]
 80031ec:	e0f6      	b.n	80033dc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031ee:	88fb      	ldrh	r3, [r7, #6]
 80031f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d121      	bne.n	800323c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800320e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003212:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	441a      	add	r2, r3
 8003224:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800322c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003238:	b29b      	uxth	r3, r3
 800323a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003242:	2b01      	cmp	r3, #1
 8003244:	f040 80ca 	bne.w	80033dc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003250:	441a      	add	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800325e:	441a      	add	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	6a1a      	ldr	r2, [r3, #32]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	429a      	cmp	r2, r3
 800326e:	d30b      	bcc.n	8003288 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	6a1a      	ldr	r2, [r3, #32]
 800327c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003280:	1ad2      	subs	r2, r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	621a      	str	r2, [r3, #32]
 8003286:	e017      	b.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d108      	bne.n	80032a2 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003290:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003294:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032a0:	e00a      	b.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2200      	movs	r2, #0
 80032ae:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	657b      	str	r3, [r7, #84]	; 0x54
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	785b      	ldrb	r3, [r3, #1]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d165      	bne.n	8003392 <HAL_PCD_EP_DB_Transmit+0x748>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032da:	4413      	add	r3, r2
 80032dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	00da      	lsls	r2, r3, #3
 80032e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e6:	4413      	add	r3, r2
 80032e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80032ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032fc:	801a      	strh	r2, [r3, #0]
 80032fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003302:	2b3e      	cmp	r3, #62	; 0x3e
 8003304:	d91d      	bls.n	8003342 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	66bb      	str	r3, [r7, #104]	; 0x68
 800330e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	2b00      	cmp	r3, #0
 8003318:	d102      	bne.n	8003320 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800331a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800331c:	3b01      	subs	r3, #1
 800331e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b29a      	uxth	r2, r3
 8003326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003328:	b29b      	uxth	r3, r3
 800332a:	029b      	lsls	r3, r3, #10
 800332c:	b29b      	uxth	r3, r3
 800332e:	4313      	orrs	r3, r2
 8003330:	b29b      	uxth	r3, r3
 8003332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333a:	b29a      	uxth	r2, r3
 800333c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800333e:	801a      	strh	r2, [r3, #0]
 8003340:	e041      	b.n	80033c6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <HAL_PCD_EP_DB_Transmit+0x716>
 800334a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003358:	b29a      	uxth	r2, r3
 800335a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800335c:	801a      	strh	r2, [r3, #0]
 800335e:	e032      	b.n	80033c6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003360:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	66bb      	str	r3, [r7, #104]	; 0x68
 8003368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_PCD_EP_DB_Transmit+0x730>
 8003374:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003376:	3301      	adds	r3, #1
 8003378:	66bb      	str	r3, [r7, #104]	; 0x68
 800337a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29a      	uxth	r2, r3
 8003380:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003382:	b29b      	uxth	r3, r3
 8003384:	029b      	lsls	r3, r3, #10
 8003386:	b29b      	uxth	r3, r3
 8003388:	4313      	orrs	r3, r2
 800338a:	b29a      	uxth	r2, r3
 800338c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800338e:	801a      	strh	r2, [r3, #0]
 8003390:	e019      	b.n	80033c6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	785b      	ldrb	r3, [r3, #1]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d115      	bne.n	80033c6 <HAL_PCD_EP_DB_Transmit+0x77c>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a8:	4413      	add	r3, r2
 80033aa:	657b      	str	r3, [r7, #84]	; 0x54
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	00da      	lsls	r2, r3, #3
 80033b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b4:	4413      	add	r3, r2
 80033b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033ba:	653b      	str	r3, [r7, #80]	; 0x50
 80033bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	6959      	ldr	r1, [r3, #20]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	895a      	ldrh	r2, [r3, #10]
 80033d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f005 fea6 	bl	8009128 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f6:	82bb      	strh	r3, [r7, #20]
 80033f8:	8abb      	ldrh	r3, [r7, #20]
 80033fa:	f083 0310 	eor.w	r3, r3, #16
 80033fe:	82bb      	strh	r3, [r7, #20]
 8003400:	8abb      	ldrh	r3, [r7, #20]
 8003402:	f083 0320 	eor.w	r3, r3, #32
 8003406:	82bb      	strh	r3, [r7, #20]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	441a      	add	r2, r3
 8003416:	8abb      	ldrh	r3, [r7, #20]
 8003418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800341c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003428:	b29b      	uxth	r3, r3
 800342a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3790      	adds	r7, #144	; 0x90
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003436:	b480      	push	{r7}
 8003438:	b087      	sub	sp, #28
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	607b      	str	r3, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	817b      	strh	r3, [r7, #10]
 8003444:	4613      	mov	r3, r2
 8003446:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003448:	897b      	ldrh	r3, [r7, #10]
 800344a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003454:	897b      	ldrh	r3, [r7, #10]
 8003456:	f003 0207 	and.w	r2, r3, #7
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	3310      	adds	r3, #16
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	e009      	b.n	8003480 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800346c:	897a      	ldrh	r2, [r7, #10]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4413      	add	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003480:	893b      	ldrh	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d107      	bne.n	8003496 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	b29a      	uxth	r2, r3
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	80da      	strh	r2, [r3, #6]
 8003494:	e00b      	b.n	80034ae <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2201      	movs	r2, #1
 800349a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	b29a      	uxth	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	0c1b      	lsrs	r3, r3, #16
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	371c      	adds	r7, #28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f043 0302 	orr.w	r3, r3, #2
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d141      	bne.n	80035a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800351e:	4b4b      	ldr	r3, [pc, #300]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352a:	d131      	bne.n	8003590 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800352c:	4b47      	ldr	r3, [pc, #284]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800352e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003532:	4a46      	ldr	r2, [pc, #280]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003538:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800353c:	4b43      	ldr	r3, [pc, #268]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003544:	4a41      	ldr	r2, [pc, #260]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800354a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800354c:	4b40      	ldr	r3, [pc, #256]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2232      	movs	r2, #50	; 0x32
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	4a3f      	ldr	r2, [pc, #252]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	0c9b      	lsrs	r3, r3, #18
 800355e:	3301      	adds	r3, #1
 8003560:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003562:	e002      	b.n	800356a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3b01      	subs	r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800356a:	4b38      	ldr	r3, [pc, #224]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003576:	d102      	bne.n	800357e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f2      	bne.n	8003564 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800357e:	4b33      	ldr	r3, [pc, #204]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358a:	d158      	bne.n	800363e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e057      	b.n	8003640 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003590:	4b2e      	ldr	r3, [pc, #184]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003596:	4a2d      	ldr	r2, [pc, #180]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800359c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80035a0:	e04d      	b.n	800363e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a8:	d141      	bne.n	800362e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035aa:	4b28      	ldr	r3, [pc, #160]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b6:	d131      	bne.n	800361c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035b8:	4b24      	ldr	r3, [pc, #144]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035be:	4a23      	ldr	r2, [pc, #140]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035c8:	4b20      	ldr	r3, [pc, #128]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035d0:	4a1e      	ldr	r2, [pc, #120]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035d8:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2232      	movs	r2, #50	; 0x32
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	0c9b      	lsrs	r3, r3, #18
 80035ea:	3301      	adds	r3, #1
 80035ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ee:	e002      	b.n	80035f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003602:	d102      	bne.n	800360a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f2      	bne.n	80035f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800360a:	4b10      	ldr	r3, [pc, #64]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003616:	d112      	bne.n	800363e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e011      	b.n	8003640 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003628:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800362c:	e007      	b.n	800363e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800362e:	4b07      	ldr	r3, [pc, #28]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003636:	4a05      	ldr	r2, [pc, #20]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800363c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	40007000 	.word	0x40007000
 8003650:	20000000 	.word	0x20000000
 8003654:	431bde83 	.word	0x431bde83

08003658 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a04      	ldr	r2, [pc, #16]	; (8003674 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003666:	6093      	str	r3, [r2, #8]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40007000 	.word	0x40007000

08003678 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800367e:	f7fd fe7b 	bl	8001378 <HAL_GetTick>
 8003682:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003684:	4b39      	ldr	r3, [pc, #228]	; (800376c <HAL_RCC_DeInit+0xf4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a38      	ldr	r2, [pc, #224]	; (800376c <HAL_RCC_DeInit+0xf4>)
 800368a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003692:	f7fd fe71 	bl	8001378 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e05f      	b.n	8003764 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a4:	4b31      	ldr	r3, [pc, #196]	; (800376c <HAL_RCC_DeInit+0xf4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 80036b0:	4b2e      	ldr	r3, [pc, #184]	; (800376c <HAL_RCC_DeInit+0xf4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	4a2d      	ldr	r2, [pc, #180]	; (800376c <HAL_RCC_DeInit+0xf4>)
 80036b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036ba:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036bc:	f7fd fe5c 	bl	8001378 <HAL_GetTick>
 80036c0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 80036c2:	4b2a      	ldr	r3, [pc, #168]	; (800376c <HAL_RCC_DeInit+0xf4>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ca:	f7fd fe55 	bl	8001378 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e041      	b.n	8003764 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80036e0:	4b22      	ldr	r3, [pc, #136]	; (800376c <HAL_RCC_DeInit+0xf4>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d1ee      	bne.n	80036ca <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80036ec:	4b20      	ldr	r3, [pc, #128]	; (8003770 <HAL_RCC_DeInit+0xf8>)
 80036ee:	4a21      	ldr	r2, [pc, #132]	; (8003774 <HAL_RCC_DeInit+0xfc>)
 80036f0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036f2:	4b21      	ldr	r3, [pc, #132]	; (8003778 <HAL_RCC_DeInit+0x100>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fdf2 	bl	80012e0 <HAL_InitTick>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e02e      	b.n	8003764 <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8003706:	4b19      	ldr	r3, [pc, #100]	; (800376c <HAL_RCC_DeInit+0xf4>)
 8003708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800370c:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 800370e:	4b17      	ldr	r3, [pc, #92]	; (800376c <HAL_RCC_DeInit+0xf4>)
 8003710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003714:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003716:	f7fd fe2f 	bl	8001378 <HAL_GetTick>
 800371a:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371e:	f7fd fe2b 	bl	8001378 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e019      	b.n	8003764 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003730:	4b0e      	ldr	r3, [pc, #56]	; (800376c <HAL_RCC_DeInit+0xf4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f0      	bne.n	800371e <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCC_DeInit+0xf4>)
 800373e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003742:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <HAL_RCC_DeInit+0xf4>)
 8003746:	2200      	movs	r2, #0
 8003748:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800374a:	4b08      	ldr	r3, [pc, #32]	; (800376c <HAL_RCC_DeInit+0xf4>)
 800374c:	f04f 32ff 	mov.w	r2, #4294967295
 8003750:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003752:	4b06      	ldr	r3, [pc, #24]	; (800376c <HAL_RCC_DeInit+0xf4>)
 8003754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003758:	4a04      	ldr	r2, [pc, #16]	; (800376c <HAL_RCC_DeInit+0xf4>)
 800375a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800375e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40021000 	.word	0x40021000
 8003770:	20000000 	.word	0x20000000
 8003774:	00f42400 	.word	0x00f42400
 8003778:	20000004 	.word	0x20000004

0800377c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e2fe      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d075      	beq.n	8003886 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800379a:	4b97      	ldr	r3, [pc, #604]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a4:	4b94      	ldr	r3, [pc, #592]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b0c      	cmp	r3, #12
 80037b2:	d102      	bne.n	80037ba <HAL_RCC_OscConfig+0x3e>
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d002      	beq.n	80037c0 <HAL_RCC_OscConfig+0x44>
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d10b      	bne.n	80037d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	4b8d      	ldr	r3, [pc, #564]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d05b      	beq.n	8003884 <HAL_RCC_OscConfig+0x108>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d157      	bne.n	8003884 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e2d9      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e0:	d106      	bne.n	80037f0 <HAL_RCC_OscConfig+0x74>
 80037e2:	4b85      	ldr	r3, [pc, #532]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a84      	ldr	r2, [pc, #528]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	e01d      	b.n	800382c <HAL_RCC_OscConfig+0xb0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0x98>
 80037fa:	4b7f      	ldr	r3, [pc, #508]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7e      	ldr	r2, [pc, #504]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b7c      	ldr	r3, [pc, #496]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a7b      	ldr	r2, [pc, #492]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e00b      	b.n	800382c <HAL_RCC_OscConfig+0xb0>
 8003814:	4b78      	ldr	r3, [pc, #480]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a77      	ldr	r2, [pc, #476]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800381a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b75      	ldr	r3, [pc, #468]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a74      	ldr	r2, [pc, #464]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fd fda0 	bl	8001378 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7fd fd9c 	bl	8001378 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e29e      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800384e:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0xc0>
 800385a:	e014      	b.n	8003886 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fd fd8c 	bl	8001378 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003864:	f7fd fd88 	bl	8001378 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	; 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e28a      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003876:	4b60      	ldr	r3, [pc, #384]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0xe8>
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d075      	beq.n	800397e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003892:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800389c:	4b56      	ldr	r3, [pc, #344]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b0c      	cmp	r3, #12
 80038aa:	d102      	bne.n	80038b2 <HAL_RCC_OscConfig+0x136>
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d002      	beq.n	80038b8 <HAL_RCC_OscConfig+0x13c>
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d11f      	bne.n	80038f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038b8:	4b4f      	ldr	r3, [pc, #316]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_OscConfig+0x154>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e25d      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d0:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	4946      	ldr	r1, [pc, #280]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038e4:	4b45      	ldr	r3, [pc, #276]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd fcf9 	bl	80012e0 <HAL_InitTick>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d043      	beq.n	800397c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e249      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d023      	beq.n	8003948 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003900:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a3c      	ldr	r2, [pc, #240]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fd fd34 	bl	8001378 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003914:	f7fd fd30 	bl	8001378 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e232      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003926:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	061b      	lsls	r3, r3, #24
 8003940:	492d      	ldr	r1, [pc, #180]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
 8003946:	e01a      	b.n	800397e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003948:	4b2b      	ldr	r3, [pc, #172]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800394e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fd fd10 	bl	8001378 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395c:	f7fd fd0c 	bl	8001378 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e20e      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800396e:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x1e0>
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800397c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d041      	beq.n	8003a0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d01c      	beq.n	80039cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003992:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003998:	4a17      	ldr	r2, [pc, #92]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a2:	f7fd fce9 	bl	8001378 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039aa:	f7fd fce5 	bl	8001378 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e1e7      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80039be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0ef      	beq.n	80039aa <HAL_RCC_OscConfig+0x22e>
 80039ca:	e020      	b.n	8003a0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d2:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fd fccc 	bl	8001378 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e2:	e00d      	b.n	8003a00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fd fcc8 	bl	8001378 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d906      	bls.n	8003a00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e1ca      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a00:	4b8c      	ldr	r3, [pc, #560]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ea      	bne.n	80039e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80a6 	beq.w	8003b68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a20:	4b84      	ldr	r3, [pc, #528]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_OscConfig+0x2b4>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <HAL_RCC_OscConfig+0x2b6>
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	4b7f      	ldr	r3, [pc, #508]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	4a7e      	ldr	r2, [pc, #504]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a40:	6593      	str	r3, [r2, #88]	; 0x58
 8003a42:	4b7c      	ldr	r3, [pc, #496]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a52:	4b79      	ldr	r3, [pc, #484]	; (8003c38 <HAL_RCC_OscConfig+0x4bc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d118      	bne.n	8003a90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a5e:	4b76      	ldr	r3, [pc, #472]	; (8003c38 <HAL_RCC_OscConfig+0x4bc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a75      	ldr	r2, [pc, #468]	; (8003c38 <HAL_RCC_OscConfig+0x4bc>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6a:	f7fd fc85 	bl	8001378 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a72:	f7fd fc81 	bl	8001378 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e183      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a84:	4b6c      	ldr	r3, [pc, #432]	; (8003c38 <HAL_RCC_OscConfig+0x4bc>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d108      	bne.n	8003aaa <HAL_RCC_OscConfig+0x32e>
 8003a98:	4b66      	ldr	r3, [pc, #408]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9e:	4a65      	ldr	r2, [pc, #404]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aa8:	e024      	b.n	8003af4 <HAL_RCC_OscConfig+0x378>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b05      	cmp	r3, #5
 8003ab0:	d110      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x358>
 8003ab2:	4b60      	ldr	r3, [pc, #384]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	4a5e      	ldr	r2, [pc, #376]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003aba:	f043 0304 	orr.w	r3, r3, #4
 8003abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac2:	4b5c      	ldr	r3, [pc, #368]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	4a5a      	ldr	r2, [pc, #360]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad2:	e00f      	b.n	8003af4 <HAL_RCC_OscConfig+0x378>
 8003ad4:	4b57      	ldr	r3, [pc, #348]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	4a56      	ldr	r2, [pc, #344]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ae4:	4b53      	ldr	r3, [pc, #332]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	4a52      	ldr	r2, [pc, #328]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003aec:	f023 0304 	bic.w	r3, r3, #4
 8003af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d016      	beq.n	8003b2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fd fc3c 	bl	8001378 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b04:	f7fd fc38 	bl	8001378 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e138      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1a:	4b46      	ldr	r3, [pc, #280]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ed      	beq.n	8003b04 <HAL_RCC_OscConfig+0x388>
 8003b28:	e015      	b.n	8003b56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2a:	f7fd fc25 	bl	8001378 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fd fc21 	bl	8001378 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e121      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b48:	4b3a      	ldr	r3, [pc, #232]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ed      	bne.n	8003b32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b56:	7ffb      	ldrb	r3, [r7, #31]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5c:	4b35      	ldr	r3, [pc, #212]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b60:	4a34      	ldr	r2, [pc, #208]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d03c      	beq.n	8003bee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01c      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b7c:	4b2d      	ldr	r3, [pc, #180]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b82:	4a2c      	ldr	r2, [pc, #176]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fd fbf4 	bl	8001378 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b94:	f7fd fbf0 	bl	8001378 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e0f2      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ba6:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ef      	beq.n	8003b94 <HAL_RCC_OscConfig+0x418>
 8003bb4:	e01b      	b.n	8003bee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bb6:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc6:	f7fd fbd7 	bl	8001378 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bce:	f7fd fbd3 	bl	8001378 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e0d5      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003be0:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1ef      	bne.n	8003bce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80c9 	beq.w	8003d8a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	f000 8083 	beq.w	8003d0c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d15e      	bne.n	8003ccc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003c14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1a:	f7fd fbad 	bl	8001378 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c20:	e00c      	b.n	8003c3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fd fba9 	bl	8001378 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d905      	bls.n	8003c3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0ab      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c3c:	4b55      	ldr	r3, [pc, #340]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1ec      	bne.n	8003c22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c48:	4b52      	ldr	r3, [pc, #328]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	4b52      	ldr	r3, [pc, #328]	; (8003d98 <HAL_RCC_OscConfig+0x61c>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6a11      	ldr	r1, [r2, #32]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c58:	3a01      	subs	r2, #1
 8003c5a:	0112      	lsls	r2, r2, #4
 8003c5c:	4311      	orrs	r1, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c62:	0212      	lsls	r2, r2, #8
 8003c64:	4311      	orrs	r1, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c6a:	0852      	lsrs	r2, r2, #1
 8003c6c:	3a01      	subs	r2, #1
 8003c6e:	0552      	lsls	r2, r2, #21
 8003c70:	4311      	orrs	r1, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c76:	0852      	lsrs	r2, r2, #1
 8003c78:	3a01      	subs	r2, #1
 8003c7a:	0652      	lsls	r2, r2, #25
 8003c7c:	4311      	orrs	r1, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c82:	06d2      	lsls	r2, r2, #27
 8003c84:	430a      	orrs	r2, r1
 8003c86:	4943      	ldr	r1, [pc, #268]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c8c:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a40      	ldr	r2, [pc, #256]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c98:	4b3e      	ldr	r3, [pc, #248]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4a3d      	ldr	r2, [pc, #244]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ca2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fd fb68 	bl	8001378 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fd fb64 	bl	8001378 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e066      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbe:	4b35      	ldr	r3, [pc, #212]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x530>
 8003cca:	e05e      	b.n	8003d8a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a30      	ldr	r2, [pc, #192]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fd fb4e 	bl	8001378 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fd fb4a 	bl	8001378 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e04c      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf2:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003cfe:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	4924      	ldr	r1, [pc, #144]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003d04:	4b25      	ldr	r3, [pc, #148]	; (8003d9c <HAL_RCC_OscConfig+0x620>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	60cb      	str	r3, [r1, #12]
 8003d0a:	e03e      	b.n	8003d8a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e039      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d18:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f003 0203 	and.w	r2, r3, #3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d12c      	bne.n	8003d86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	3b01      	subs	r3, #1
 8003d38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d123      	bne.n	8003d86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d11b      	bne.n	8003d86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d113      	bne.n	8003d86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d109      	bne.n	8003d86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	085b      	lsrs	r3, r3, #1
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d001      	beq.n	8003d8a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3720      	adds	r7, #32
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000
 8003d98:	019f800c 	.word	0x019f800c
 8003d9c:	feeefffc 	.word	0xfeeefffc

08003da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e11e      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b91      	ldr	r3, [pc, #580]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d910      	bls.n	8003de8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b8e      	ldr	r3, [pc, #568]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 020f 	bic.w	r2, r3, #15
 8003dce:	498c      	ldr	r1, [pc, #560]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b8a      	ldr	r3, [pc, #552]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e106      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d073      	beq.n	8003edc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d129      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfc:	4b81      	ldr	r3, [pc, #516]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0f4      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e0c:	f000 f99e 	bl	800414c <RCC_GetSysClockFreqFromPLLSource>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4a7c      	ldr	r2, [pc, #496]	; (8004008 <HAL_RCC_ClockConfig+0x268>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d93f      	bls.n	8003e9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e1a:	4b7a      	ldr	r3, [pc, #488]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d033      	beq.n	8003e9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d12f      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e3a:	4b72      	ldr	r3, [pc, #456]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e42:	4a70      	ldr	r2, [pc, #448]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e024      	b.n	8003e9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d107      	bne.n	8003e68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e58:	4b6a      	ldr	r3, [pc, #424]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0c6      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e68:	4b66      	ldr	r3, [pc, #408]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0be      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e78:	f000 f8ce 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8003e7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4a61      	ldr	r2, [pc, #388]	; (8004008 <HAL_RCC_ClockConfig+0x268>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d909      	bls.n	8003e9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e86:	4b5f      	ldr	r3, [pc, #380]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e8e:	4a5d      	ldr	r2, [pc, #372]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e9a:	4b5a      	ldr	r3, [pc, #360]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f023 0203 	bic.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4957      	ldr	r1, [pc, #348]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eac:	f7fd fa64 	bl	8001378 <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb4:	f7fd fa60 	bl	8001378 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e095      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	4b4e      	ldr	r3, [pc, #312]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 020c 	and.w	r2, r3, #12
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d1eb      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d023      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef4:	4b43      	ldr	r3, [pc, #268]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4a42      	ldr	r2, [pc, #264]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003efa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003efe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f0c:	4b3d      	ldr	r3, [pc, #244]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f14:	4a3b      	ldr	r2, [pc, #236]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1c:	4b39      	ldr	r3, [pc, #228]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4936      	ldr	r1, [pc, #216]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b80      	cmp	r3, #128	; 0x80
 8003f34:	d105      	bne.n	8003f42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f36:	4b33      	ldr	r3, [pc, #204]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	4a32      	ldr	r2, [pc, #200]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f42:	4b2f      	ldr	r3, [pc, #188]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d21d      	bcs.n	8003f8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f50:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 020f 	bic.w	r2, r3, #15
 8003f58:	4929      	ldr	r1, [pc, #164]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f60:	f7fd fa0a 	bl	8001378 <HAL_GetTick>
 8003f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f66:	e00a      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f68:	f7fd fa06 	bl	8001378 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e03b      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d1ed      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f98:	4b1a      	ldr	r3, [pc, #104]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4917      	ldr	r1, [pc, #92]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb6:	4b13      	ldr	r3, [pc, #76]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	490f      	ldr	r1, [pc, #60]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fca:	f000 f825 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	490c      	ldr	r1, [pc, #48]	; (800400c <HAL_RCC_ClockConfig+0x26c>)
 8003fdc:	5ccb      	ldrb	r3, [r1, r3]
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <HAL_RCC_ClockConfig+0x270>)
 8003fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <HAL_RCC_ClockConfig+0x274>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fd f976 	bl	80012e0 <HAL_InitTick>
 8003ff4:	4603      	mov	r3, r0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40022000 	.word	0x40022000
 8004004:	40021000 	.word	0x40021000
 8004008:	04c4b400 	.word	0x04c4b400
 800400c:	0800bf8c 	.word	0x0800bf8c
 8004010:	20000000 	.word	0x20000000
 8004014:	20000004 	.word	0x20000004

08004018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800401e:	4b2c      	ldr	r3, [pc, #176]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b04      	cmp	r3, #4
 8004028:	d102      	bne.n	8004030 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800402a:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	e047      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004030:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 030c 	and.w	r3, r3, #12
 8004038:	2b08      	cmp	r3, #8
 800403a:	d102      	bne.n	8004042 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800403c:	4b26      	ldr	r3, [pc, #152]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	e03e      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004042:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b0c      	cmp	r3, #12
 800404c:	d136      	bne.n	80040bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800404e:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004058:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	3301      	adds	r3, #1
 8004064:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d10c      	bne.n	8004086 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800406c:	4a1a      	ldr	r2, [pc, #104]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	fbb2 f3f3 	udiv	r3, r2, r3
 8004074:	4a16      	ldr	r2, [pc, #88]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004076:	68d2      	ldr	r2, [r2, #12]
 8004078:	0a12      	lsrs	r2, r2, #8
 800407a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	617b      	str	r3, [r7, #20]
      break;
 8004084:	e00c      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004086:	4a13      	ldr	r2, [pc, #76]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	fbb2 f3f3 	udiv	r3, r2, r3
 800408e:	4a10      	ldr	r2, [pc, #64]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004090:	68d2      	ldr	r2, [r2, #12]
 8004092:	0a12      	lsrs	r2, r2, #8
 8004094:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004098:	fb02 f303 	mul.w	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]
      break;
 800409e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	0e5b      	lsrs	r3, r3, #25
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	3301      	adds	r3, #1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	e001      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040c0:	693b      	ldr	r3, [r7, #16]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000
 80040d4:	00f42400 	.word	0x00f42400
 80040d8:	016e3600 	.word	0x016e3600

080040dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000000 	.word	0x20000000

080040f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040f8:	f7ff fff0 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	0a1b      	lsrs	r3, r3, #8
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	4904      	ldr	r1, [pc, #16]	; (800411c <HAL_RCC_GetPCLK1Freq+0x28>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	0800bf9c 	.word	0x0800bf9c

08004120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004124:	f7ff ffda 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 8004128:	4602      	mov	r2, r0
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_RCC_GetPCLK2Freq+0x24>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	0adb      	lsrs	r3, r3, #11
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	4904      	ldr	r1, [pc, #16]	; (8004148 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004136:	5ccb      	ldrb	r3, [r1, r3]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000
 8004148:	0800bf9c 	.word	0x0800bf9c

0800414c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004152:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800415c:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	3301      	adds	r3, #1
 8004168:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d10c      	bne.n	800418a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004170:	4a17      	ldr	r2, [pc, #92]	; (80041d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	4a14      	ldr	r2, [pc, #80]	; (80041cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800417a:	68d2      	ldr	r2, [r2, #12]
 800417c:	0a12      	lsrs	r2, r2, #8
 800417e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	617b      	str	r3, [r7, #20]
    break;
 8004188:	e00c      	b.n	80041a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800418a:	4a12      	ldr	r2, [pc, #72]	; (80041d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004192:	4a0e      	ldr	r2, [pc, #56]	; (80041cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004194:	68d2      	ldr	r2, [r2, #12]
 8004196:	0a12      	lsrs	r2, r2, #8
 8004198:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800419c:	fb02 f303 	mul.w	r3, r2, r3
 80041a0:	617b      	str	r3, [r7, #20]
    break;
 80041a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041a4:	4b09      	ldr	r3, [pc, #36]	; (80041cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	0e5b      	lsrs	r3, r3, #25
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	3301      	adds	r3, #1
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041be:	687b      	ldr	r3, [r7, #4]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40021000 	.word	0x40021000
 80041d0:	016e3600 	.word	0x016e3600
 80041d4:	00f42400 	.word	0x00f42400

080041d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041e0:	2300      	movs	r3, #0
 80041e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041e4:	2300      	movs	r3, #0
 80041e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 8098 	beq.w	8004326 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fa:	4b43      	ldr	r3, [pc, #268]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10d      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004206:	4b40      	ldr	r3, [pc, #256]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420a:	4a3f      	ldr	r2, [pc, #252]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800420c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004210:	6593      	str	r3, [r2, #88]	; 0x58
 8004212:	4b3d      	ldr	r3, [pc, #244]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	60bb      	str	r3, [r7, #8]
 800421c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421e:	2301      	movs	r3, #1
 8004220:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004222:	4b3a      	ldr	r3, [pc, #232]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a39      	ldr	r2, [pc, #228]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800422e:	f7fd f8a3 	bl	8001378 <HAL_GetTick>
 8004232:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004234:	e009      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004236:	f7fd f89f 	bl	8001378 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d902      	bls.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	74fb      	strb	r3, [r7, #19]
        break;
 8004248:	e005      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800424a:	4b30      	ldr	r3, [pc, #192]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0ef      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d159      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800425c:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01e      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	429a      	cmp	r2, r3
 8004276:	d019      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004278:	4b23      	ldr	r3, [pc, #140]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004282:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004284:	4b20      	ldr	r3, [pc, #128]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	4a1f      	ldr	r2, [pc, #124]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004294:	4b1c      	ldr	r3, [pc, #112]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	4a1b      	ldr	r2, [pc, #108]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800429c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042a4:	4a18      	ldr	r2, [pc, #96]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d016      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b6:	f7fd f85f 	bl	8001378 <HAL_GetTick>
 80042ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042bc:	e00b      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fd f85b 	bl	8001378 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d902      	bls.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	74fb      	strb	r3, [r7, #19]
            break;
 80042d4:	e006      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d6:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0ec      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042e4:	7cfb      	ldrb	r3, [r7, #19]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10b      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ea:	4b07      	ldr	r3, [pc, #28]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f8:	4903      	ldr	r1, [pc, #12]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004300:	e008      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	74bb      	strb	r3, [r7, #18]
 8004306:	e005      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004308:	40021000 	.word	0x40021000
 800430c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004314:	7c7b      	ldrb	r3, [r7, #17]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d105      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431a:	4ba7      	ldr	r3, [pc, #668]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	4aa6      	ldr	r2, [pc, #664]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004324:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004332:	4ba1      	ldr	r3, [pc, #644]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f023 0203 	bic.w	r2, r3, #3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	499d      	ldr	r1, [pc, #628]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004354:	4b98      	ldr	r3, [pc, #608]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f023 020c 	bic.w	r2, r3, #12
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	4995      	ldr	r1, [pc, #596]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004376:	4b90      	ldr	r3, [pc, #576]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	498c      	ldr	r1, [pc, #560]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004398:	4b87      	ldr	r3, [pc, #540]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	4984      	ldr	r1, [pc, #528]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043ba:	4b7f      	ldr	r3, [pc, #508]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	497b      	ldr	r1, [pc, #492]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043dc:	4b76      	ldr	r3, [pc, #472]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	4973      	ldr	r1, [pc, #460]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043fe:	4b6e      	ldr	r3, [pc, #440]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	496a      	ldr	r1, [pc, #424]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004420:	4b65      	ldr	r3, [pc, #404]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	4962      	ldr	r1, [pc, #392]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004442:	4b5d      	ldr	r3, [pc, #372]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	4959      	ldr	r1, [pc, #356]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004464:	4b54      	ldr	r3, [pc, #336]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004466:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800446a:	f023 0203 	bic.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	4951      	ldr	r1, [pc, #324]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004486:	4b4c      	ldr	r3, [pc, #304]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	4948      	ldr	r1, [pc, #288]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d015      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044a8:	4b43      	ldr	r3, [pc, #268]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	4940      	ldr	r1, [pc, #256]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c6:	d105      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c8:	4b3b      	ldr	r3, [pc, #236]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4a3a      	ldr	r2, [pc, #232]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d015      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044e0:	4b35      	ldr	r3, [pc, #212]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ee:	4932      	ldr	r1, [pc, #200]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044fe:	d105      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004500:	4b2d      	ldr	r3, [pc, #180]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	4a2c      	ldr	r2, [pc, #176]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800450a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d015      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004518:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	4924      	ldr	r1, [pc, #144]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004536:	d105      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004538:	4b1f      	ldr	r3, [pc, #124]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a1e      	ldr	r2, [pc, #120]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004542:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d015      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004550:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455e:	4916      	ldr	r1, [pc, #88]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800456e:	d105      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004570:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4a10      	ldr	r2, [pc, #64]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800457a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d019      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	4908      	ldr	r1, [pc, #32]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045a6:	d109      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4a02      	ldr	r2, [pc, #8]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045b2:	60d3      	str	r3, [r2, #12]
 80045b4:	e002      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d015      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045c8:	4b29      	ldr	r3, [pc, #164]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d6:	4926      	ldr	r1, [pc, #152]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045e6:	d105      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045e8:	4b21      	ldr	r3, [pc, #132]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4a20      	ldr	r2, [pc, #128]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d015      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460e:	4918      	ldr	r1, [pc, #96]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461e:	d105      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004620:	4b13      	ldr	r3, [pc, #76]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4a12      	ldr	r2, [pc, #72]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d015      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004638:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800463a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800463e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004646:	490a      	ldr	r1, [pc, #40]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004656:	d105      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	4a04      	ldr	r2, [pc, #16]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800465e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004662:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004664:	7cbb      	ldrb	r3, [r7, #18]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000

08004674 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d070      	beq.n	8004768 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fc fb66 	bl	8000d6c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	2b10      	cmp	r3, #16
 80046b4:	d04f      	beq.n	8004756 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	22ca      	movs	r2, #202	; 0xca
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2253      	movs	r2, #83	; 0x53
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f878 	bl	80047bc <RTC_EnterInitMode>
 80046cc:	4603      	mov	r3, r0
 80046ce:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d126      	bne.n	8004724 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80046e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e8:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6999      	ldr	r1, [r3, #24]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68d9      	ldr	r1, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	041a      	lsls	r2, r3, #16
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f884 	bl	8004828 <RTC_ExitInitMode>
 8004720:	4603      	mov	r3, r0
 8004722:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d110      	bne.n	800474c <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1a      	ldr	r2, [r3, #32]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	22ff      	movs	r2, #255	; 0xff
 8004752:	625a      	str	r2, [r3, #36]	; 0x24
 8004754:	e001      	b.n	800475a <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d103      	bne.n	8004768 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a0d      	ldr	r2, [pc, #52]	; (80047b8 <HAL_RTC_WaitForSynchro+0x44>)
 8004782:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004784:	f7fc fdf8 	bl	8001378 <HAL_GetTick>
 8004788:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800478a:	e009      	b.n	80047a0 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800478c:	f7fc fdf4 	bl	8001378 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800479a:	d901      	bls.n	80047a0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e007      	b.n	80047b0 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0ee      	beq.n	800478c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	0001005f 	.word	0x0001005f

080047bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d123      	bne.n	800481e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047e4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80047e6:	f7fc fdc7 	bl	8001378 <HAL_GetTick>
 80047ea:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80047ec:	e00d      	b.n	800480a <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80047ee:	f7fc fdc3 	bl	8001378 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047fc:	d905      	bls.n	800480a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2203      	movs	r2, #3
 8004806:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <RTC_EnterInitMode+0x62>
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	2b03      	cmp	r3, #3
 800481c:	d1e7      	bne.n	80047ee <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800481e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004842:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10c      	bne.n	800486c <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff ff8e 	bl	8004774 <HAL_RTC_WaitForSynchro>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d022      	beq.n	80048a4 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2203      	movs	r2, #3
 8004862:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	73fb      	strb	r3, [r7, #15]
 800486a:	e01b      	b.n	80048a4 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0220 	bic.w	r2, r2, #32
 800487a:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff ff79 	bl	8004774 <HAL_RTC_WaitForSynchro>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2203      	movs	r2, #3
 800488c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0220 	orr.w	r2, r2, #32
 80048a2:	619a      	str	r2, [r3, #24]
  }

  return status;
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified TAMP Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 80048bc:	4b07      	ldr	r3, [pc, #28]	; (80048dc <HAL_RTCEx_BKUPWrite+0x2c>)
 80048be:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4413      	add	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	601a      	str	r2, [r3, #0]
}
 80048d0:	bf00      	nop
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	40002500 	.word	0x40002500

080048e0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB to
  *          specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 80048ea:	4b07      	ldr	r3, [pc, #28]	; (8004908 <HAL_RTCEx_BKUPRead+0x28>)
 80048ec:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4413      	add	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	40002500 	.word	0x40002500

0800490c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e042      	b.n	80049a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	2b00      	cmp	r3, #0
 8004926:	d106      	bne.n	8004936 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7fc fb89 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2224      	movs	r2, #36	; 0x24
 800493a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0201 	bic.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 ff38 	bl	80057cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fc39 	bl	80051d4 <UART_SetConfig>
 8004962:	4603      	mov	r3, r0
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e01b      	b.n	80049a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800497a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800498a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 ffb7 	bl	8005910 <UART_CheckIdleState>
 80049a2:	4603      	mov	r3, r0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08a      	sub	sp, #40	; 0x28
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d17b      	bne.n	8004abe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <HAL_UART_Transmit+0x26>
 80049cc:	88fb      	ldrh	r3, [r7, #6]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e074      	b.n	8004ac0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2221      	movs	r2, #33	; 0x21
 80049e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049e6:	f7fc fcc7 	bl	8001378 <HAL_GetTick>
 80049ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	88fa      	ldrh	r2, [r7, #6]
 80049f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	88fa      	ldrh	r2, [r7, #6]
 80049f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a04:	d108      	bne.n	8004a18 <HAL_UART_Transmit+0x6c>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d104      	bne.n	8004a18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	e003      	b.n	8004a20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a20:	e030      	b.n	8004a84 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2180      	movs	r1, #128	; 0x80
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f001 f819 	bl	8005a64 <UART_WaitOnFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e03d      	b.n	8004ac0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10b      	bne.n	8004a62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	3302      	adds	r3, #2
 8004a5e:	61bb      	str	r3, [r7, #24]
 8004a60:	e007      	b.n	8004a72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	781a      	ldrb	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1c8      	bne.n	8004a22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2200      	movs	r2, #0
 8004a98:	2140      	movs	r1, #64	; 0x40
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 ffe2 	bl	8005a64 <UART_WaitOnFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d005      	beq.n	8004ab2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e006      	b.n	8004ac0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e000      	b.n	8004ac0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004abe:	2302      	movs	r3, #2
  }
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3720      	adds	r7, #32
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d137      	bne.n	8004b50 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <HAL_UART_Receive_IT+0x24>
 8004ae6:	88fb      	ldrh	r3, [r7, #6]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e030      	b.n	8004b52 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a18      	ldr	r2, [pc, #96]	; (8004b5c <HAL_UART_Receive_IT+0x94>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d01f      	beq.n	8004b40 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d018      	beq.n	8004b40 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	623b      	str	r3, [r7, #32]
 8004b2e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	69f9      	ldr	r1, [r7, #28]
 8004b32:	6a3a      	ldr	r2, [r7, #32]
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e6      	bne.n	8004b0e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b40:	88fb      	ldrh	r3, [r7, #6]
 8004b42:	461a      	mov	r2, r3
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 fffa 	bl	8005b40 <UART_Start_Receive_IT>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	e000      	b.n	8004b52 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b50:	2302      	movs	r3, #2
  }
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3728      	adds	r7, #40	; 0x28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40008000 	.word	0x40008000

08004b60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b0ba      	sub	sp, #232	; 0xe8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b8e:	4013      	ands	r3, r2
 8004b90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d11b      	bne.n	8004bd4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d105      	bne.n	8004bc0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d009      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 82e3 	beq.w	8005190 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
      }
      return;
 8004bd2:	e2dd      	b.n	8005190 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004bd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8123 	beq.w	8004e24 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004bde:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004be2:	4b8d      	ldr	r3, [pc, #564]	; (8004e18 <HAL_UART_IRQHandler+0x2b8>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004bea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004bee:	4b8b      	ldr	r3, [pc, #556]	; (8004e1c <HAL_UART_IRQHandler+0x2bc>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8116 	beq.w	8004e24 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d011      	beq.n	8004c28 <HAL_UART_IRQHandler+0xc8>
 8004c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00b      	beq.n	8004c28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2201      	movs	r2, #1
 8004c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1e:	f043 0201 	orr.w	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d011      	beq.n	8004c58 <HAL_UART_IRQHandler+0xf8>
 8004c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00b      	beq.n	8004c58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2202      	movs	r2, #2
 8004c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4e:	f043 0204 	orr.w	r2, r3, #4
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d011      	beq.n	8004c88 <HAL_UART_IRQHandler+0x128>
 8004c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2204      	movs	r2, #4
 8004c76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7e:	f043 0202 	orr.w	r2, r3, #2
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d017      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d105      	bne.n	8004cac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ca0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004ca4:	4b5c      	ldr	r3, [pc, #368]	; (8004e18 <HAL_UART_IRQHandler+0x2b8>)
 8004ca6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00b      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cba:	f043 0208 	orr.w	r2, r3, #8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d012      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x196>
 8004cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00c      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ce4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cec:	f043 0220 	orr.w	r2, r3, #32
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8249 	beq.w	8005194 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d013      	beq.n	8004d36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d105      	bne.n	8004d26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d005      	beq.n	8004d5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d054      	beq.n	8004e04 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f001 f812 	bl	8005d84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d146      	bne.n	8004dfc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3308      	adds	r3, #8
 8004d74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3308      	adds	r3, #8
 8004d96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004da6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004db2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1d9      	bne.n	8004d6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d017      	beq.n	8004df4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dca:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <HAL_UART_IRQHandler+0x2c0>)
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fc fc65 	bl	80016a4 <HAL_DMA_Abort_IT>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d019      	beq.n	8004e14 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004dee:	4610      	mov	r0, r2
 8004df0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df2:	e00f      	b.n	8004e14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7fc f8fd 	bl	8000ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfa:	e00b      	b.n	8004e14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7fc f8f9 	bl	8000ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e02:	e007      	b.n	8004e14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fc f8f5 	bl	8000ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004e12:	e1bf      	b.n	8005194 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e14:	bf00      	nop
    return;
 8004e16:	e1bd      	b.n	8005194 <HAL_UART_IRQHandler+0x634>
 8004e18:	10000001 	.word	0x10000001
 8004e1c:	04000120 	.word	0x04000120
 8004e20:	08005e51 	.word	0x08005e51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	f040 8153 	bne.w	80050d4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 814c 	beq.w	80050d4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8145 	beq.w	80050d4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2210      	movs	r2, #16
 8004e50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	f040 80bb 	bne.w	8004fd8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 818f 	beq.w	8005198 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e84:	429a      	cmp	r2, r3
 8004e86:	f080 8187 	bcs.w	8005198 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f040 8087 	bne.w	8004fb6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ed6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ede:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1da      	bne.n	8004ea8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3308      	adds	r3, #8
 8004f12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e1      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3308      	adds	r3, #8
 8004f34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1e3      	bne.n	8004f2e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f84:	f023 0310 	bic.w	r3, r3, #16
 8004f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f96:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f98:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e4      	bne.n	8004f74 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fc fb1e 	bl	80015f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f8f3 	bl	80051bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fd6:	e0df      	b.n	8005198 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80d1 	beq.w	800519c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004ffa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 80cc 	beq.w	800519c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005018:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005026:	647b      	str	r3, [r7, #68]	; 0x44
 8005028:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800502c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e4      	bne.n	8005004 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3308      	adds	r3, #8
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	623b      	str	r3, [r7, #32]
   return(result);
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3308      	adds	r3, #8
 800505e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005062:	633a      	str	r2, [r7, #48]	; 0x30
 8005064:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e1      	bne.n	800503a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	60fb      	str	r3, [r7, #12]
   return(result);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0310 	bic.w	r3, r3, #16
 800509e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050ac:	61fb      	str	r3, [r7, #28]
 80050ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	69b9      	ldr	r1, [r7, #24]
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	617b      	str	r3, [r7, #20]
   return(result);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e4      	bne.n	800508a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050ca:	4619      	mov	r1, r3
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f875 	bl	80051bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050d2:	e063      	b.n	800519c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00e      	beq.n	80050fe <HAL_UART_IRQHandler+0x59e>
 80050e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d008      	beq.n	80050fe <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80050f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f001 fc08 	bl	800690c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050fc:	e051      	b.n	80051a2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80050fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005106:	2b00      	cmp	r3, #0
 8005108:	d014      	beq.n	8005134 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800510a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800510e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005112:	2b00      	cmp	r3, #0
 8005114:	d105      	bne.n	8005122 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800511a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005126:	2b00      	cmp	r3, #0
 8005128:	d03a      	beq.n	80051a0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
    }
    return;
 8005132:	e035      	b.n	80051a0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d009      	beq.n	8005154 <HAL_UART_IRQHandler+0x5f4>
 8005140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fe95 	bl	8005e7c <UART_EndTransmit_IT>
    return;
 8005152:	e026      	b.n	80051a2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d009      	beq.n	8005174 <HAL_UART_IRQHandler+0x614>
 8005160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005164:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f001 fbe1 	bl	8006934 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005172:	e016      	b.n	80051a2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005178:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d010      	beq.n	80051a2 <HAL_UART_IRQHandler+0x642>
 8005180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005184:	2b00      	cmp	r3, #0
 8005186:	da0c      	bge.n	80051a2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f001 fbc9 	bl	8006920 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800518e:	e008      	b.n	80051a2 <HAL_UART_IRQHandler+0x642>
      return;
 8005190:	bf00      	nop
 8005192:	e006      	b.n	80051a2 <HAL_UART_IRQHandler+0x642>
    return;
 8005194:	bf00      	nop
 8005196:	e004      	b.n	80051a2 <HAL_UART_IRQHandler+0x642>
      return;
 8005198:	bf00      	nop
 800519a:	e002      	b.n	80051a2 <HAL_UART_IRQHandler+0x642>
      return;
 800519c:	bf00      	nop
 800519e:	e000      	b.n	80051a2 <HAL_UART_IRQHandler+0x642>
    return;
 80051a0:	bf00      	nop
  }
}
 80051a2:	37e8      	adds	r7, #232	; 0xe8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d8:	b08c      	sub	sp, #48	; 0x30
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4baa      	ldr	r3, [pc, #680]	; (80054ac <UART_SetConfig+0x2d8>)
 8005204:	4013      	ands	r3, r2
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800520c:	430b      	orrs	r3, r1
 800520e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a9f      	ldr	r2, [pc, #636]	; (80054b0 <UART_SetConfig+0x2dc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d004      	beq.n	8005240 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800523c:	4313      	orrs	r3, r2
 800523e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800524a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005254:	430b      	orrs	r3, r1
 8005256:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	f023 010f 	bic.w	r1, r3, #15
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a90      	ldr	r2, [pc, #576]	; (80054b4 <UART_SetConfig+0x2e0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d125      	bne.n	80052c4 <UART_SetConfig+0xf0>
 8005278:	4b8f      	ldr	r3, [pc, #572]	; (80054b8 <UART_SetConfig+0x2e4>)
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b03      	cmp	r3, #3
 8005284:	d81a      	bhi.n	80052bc <UART_SetConfig+0xe8>
 8005286:	a201      	add	r2, pc, #4	; (adr r2, 800528c <UART_SetConfig+0xb8>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	0800529d 	.word	0x0800529d
 8005290:	080052ad 	.word	0x080052ad
 8005294:	080052a5 	.word	0x080052a5
 8005298:	080052b5 	.word	0x080052b5
 800529c:	2301      	movs	r3, #1
 800529e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052a2:	e116      	b.n	80054d2 <UART_SetConfig+0x2fe>
 80052a4:	2302      	movs	r3, #2
 80052a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052aa:	e112      	b.n	80054d2 <UART_SetConfig+0x2fe>
 80052ac:	2304      	movs	r3, #4
 80052ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052b2:	e10e      	b.n	80054d2 <UART_SetConfig+0x2fe>
 80052b4:	2308      	movs	r3, #8
 80052b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ba:	e10a      	b.n	80054d2 <UART_SetConfig+0x2fe>
 80052bc:	2310      	movs	r3, #16
 80052be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052c2:	e106      	b.n	80054d2 <UART_SetConfig+0x2fe>
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a7c      	ldr	r2, [pc, #496]	; (80054bc <UART_SetConfig+0x2e8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d138      	bne.n	8005340 <UART_SetConfig+0x16c>
 80052ce:	4b7a      	ldr	r3, [pc, #488]	; (80054b8 <UART_SetConfig+0x2e4>)
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d4:	f003 030c 	and.w	r3, r3, #12
 80052d8:	2b0c      	cmp	r3, #12
 80052da:	d82d      	bhi.n	8005338 <UART_SetConfig+0x164>
 80052dc:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0x110>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	08005319 	.word	0x08005319
 80052e8:	08005339 	.word	0x08005339
 80052ec:	08005339 	.word	0x08005339
 80052f0:	08005339 	.word	0x08005339
 80052f4:	08005329 	.word	0x08005329
 80052f8:	08005339 	.word	0x08005339
 80052fc:	08005339 	.word	0x08005339
 8005300:	08005339 	.word	0x08005339
 8005304:	08005321 	.word	0x08005321
 8005308:	08005339 	.word	0x08005339
 800530c:	08005339 	.word	0x08005339
 8005310:	08005339 	.word	0x08005339
 8005314:	08005331 	.word	0x08005331
 8005318:	2300      	movs	r3, #0
 800531a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800531e:	e0d8      	b.n	80054d2 <UART_SetConfig+0x2fe>
 8005320:	2302      	movs	r3, #2
 8005322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005326:	e0d4      	b.n	80054d2 <UART_SetConfig+0x2fe>
 8005328:	2304      	movs	r3, #4
 800532a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800532e:	e0d0      	b.n	80054d2 <UART_SetConfig+0x2fe>
 8005330:	2308      	movs	r3, #8
 8005332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005336:	e0cc      	b.n	80054d2 <UART_SetConfig+0x2fe>
 8005338:	2310      	movs	r3, #16
 800533a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800533e:	e0c8      	b.n	80054d2 <UART_SetConfig+0x2fe>
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a5e      	ldr	r2, [pc, #376]	; (80054c0 <UART_SetConfig+0x2ec>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d125      	bne.n	8005396 <UART_SetConfig+0x1c2>
 800534a:	4b5b      	ldr	r3, [pc, #364]	; (80054b8 <UART_SetConfig+0x2e4>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005350:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005354:	2b30      	cmp	r3, #48	; 0x30
 8005356:	d016      	beq.n	8005386 <UART_SetConfig+0x1b2>
 8005358:	2b30      	cmp	r3, #48	; 0x30
 800535a:	d818      	bhi.n	800538e <UART_SetConfig+0x1ba>
 800535c:	2b20      	cmp	r3, #32
 800535e:	d00a      	beq.n	8005376 <UART_SetConfig+0x1a2>
 8005360:	2b20      	cmp	r3, #32
 8005362:	d814      	bhi.n	800538e <UART_SetConfig+0x1ba>
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <UART_SetConfig+0x19a>
 8005368:	2b10      	cmp	r3, #16
 800536a:	d008      	beq.n	800537e <UART_SetConfig+0x1aa>
 800536c:	e00f      	b.n	800538e <UART_SetConfig+0x1ba>
 800536e:	2300      	movs	r3, #0
 8005370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005374:	e0ad      	b.n	80054d2 <UART_SetConfig+0x2fe>
 8005376:	2302      	movs	r3, #2
 8005378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800537c:	e0a9      	b.n	80054d2 <UART_SetConfig+0x2fe>
 800537e:	2304      	movs	r3, #4
 8005380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005384:	e0a5      	b.n	80054d2 <UART_SetConfig+0x2fe>
 8005386:	2308      	movs	r3, #8
 8005388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800538c:	e0a1      	b.n	80054d2 <UART_SetConfig+0x2fe>
 800538e:	2310      	movs	r3, #16
 8005390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005394:	e09d      	b.n	80054d2 <UART_SetConfig+0x2fe>
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a4a      	ldr	r2, [pc, #296]	; (80054c4 <UART_SetConfig+0x2f0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d125      	bne.n	80053ec <UART_SetConfig+0x218>
 80053a0:	4b45      	ldr	r3, [pc, #276]	; (80054b8 <UART_SetConfig+0x2e4>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053aa:	2bc0      	cmp	r3, #192	; 0xc0
 80053ac:	d016      	beq.n	80053dc <UART_SetConfig+0x208>
 80053ae:	2bc0      	cmp	r3, #192	; 0xc0
 80053b0:	d818      	bhi.n	80053e4 <UART_SetConfig+0x210>
 80053b2:	2b80      	cmp	r3, #128	; 0x80
 80053b4:	d00a      	beq.n	80053cc <UART_SetConfig+0x1f8>
 80053b6:	2b80      	cmp	r3, #128	; 0x80
 80053b8:	d814      	bhi.n	80053e4 <UART_SetConfig+0x210>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <UART_SetConfig+0x1f0>
 80053be:	2b40      	cmp	r3, #64	; 0x40
 80053c0:	d008      	beq.n	80053d4 <UART_SetConfig+0x200>
 80053c2:	e00f      	b.n	80053e4 <UART_SetConfig+0x210>
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ca:	e082      	b.n	80054d2 <UART_SetConfig+0x2fe>
 80053cc:	2302      	movs	r3, #2
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053d2:	e07e      	b.n	80054d2 <UART_SetConfig+0x2fe>
 80053d4:	2304      	movs	r3, #4
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053da:	e07a      	b.n	80054d2 <UART_SetConfig+0x2fe>
 80053dc:	2308      	movs	r3, #8
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053e2:	e076      	b.n	80054d2 <UART_SetConfig+0x2fe>
 80053e4:	2310      	movs	r3, #16
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ea:	e072      	b.n	80054d2 <UART_SetConfig+0x2fe>
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a35      	ldr	r2, [pc, #212]	; (80054c8 <UART_SetConfig+0x2f4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d12a      	bne.n	800544c <UART_SetConfig+0x278>
 80053f6:	4b30      	ldr	r3, [pc, #192]	; (80054b8 <UART_SetConfig+0x2e4>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005404:	d01a      	beq.n	800543c <UART_SetConfig+0x268>
 8005406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800540a:	d81b      	bhi.n	8005444 <UART_SetConfig+0x270>
 800540c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005410:	d00c      	beq.n	800542c <UART_SetConfig+0x258>
 8005412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005416:	d815      	bhi.n	8005444 <UART_SetConfig+0x270>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <UART_SetConfig+0x250>
 800541c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005420:	d008      	beq.n	8005434 <UART_SetConfig+0x260>
 8005422:	e00f      	b.n	8005444 <UART_SetConfig+0x270>
 8005424:	2300      	movs	r3, #0
 8005426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800542a:	e052      	b.n	80054d2 <UART_SetConfig+0x2fe>
 800542c:	2302      	movs	r3, #2
 800542e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005432:	e04e      	b.n	80054d2 <UART_SetConfig+0x2fe>
 8005434:	2304      	movs	r3, #4
 8005436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800543a:	e04a      	b.n	80054d2 <UART_SetConfig+0x2fe>
 800543c:	2308      	movs	r3, #8
 800543e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005442:	e046      	b.n	80054d2 <UART_SetConfig+0x2fe>
 8005444:	2310      	movs	r3, #16
 8005446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800544a:	e042      	b.n	80054d2 <UART_SetConfig+0x2fe>
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a17      	ldr	r2, [pc, #92]	; (80054b0 <UART_SetConfig+0x2dc>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d13a      	bne.n	80054cc <UART_SetConfig+0x2f8>
 8005456:	4b18      	ldr	r3, [pc, #96]	; (80054b8 <UART_SetConfig+0x2e4>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005460:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005464:	d01a      	beq.n	800549c <UART_SetConfig+0x2c8>
 8005466:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800546a:	d81b      	bhi.n	80054a4 <UART_SetConfig+0x2d0>
 800546c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005470:	d00c      	beq.n	800548c <UART_SetConfig+0x2b8>
 8005472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005476:	d815      	bhi.n	80054a4 <UART_SetConfig+0x2d0>
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <UART_SetConfig+0x2b0>
 800547c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005480:	d008      	beq.n	8005494 <UART_SetConfig+0x2c0>
 8005482:	e00f      	b.n	80054a4 <UART_SetConfig+0x2d0>
 8005484:	2300      	movs	r3, #0
 8005486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800548a:	e022      	b.n	80054d2 <UART_SetConfig+0x2fe>
 800548c:	2302      	movs	r3, #2
 800548e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005492:	e01e      	b.n	80054d2 <UART_SetConfig+0x2fe>
 8005494:	2304      	movs	r3, #4
 8005496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800549a:	e01a      	b.n	80054d2 <UART_SetConfig+0x2fe>
 800549c:	2308      	movs	r3, #8
 800549e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054a2:	e016      	b.n	80054d2 <UART_SetConfig+0x2fe>
 80054a4:	2310      	movs	r3, #16
 80054a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054aa:	e012      	b.n	80054d2 <UART_SetConfig+0x2fe>
 80054ac:	cfff69f3 	.word	0xcfff69f3
 80054b0:	40008000 	.word	0x40008000
 80054b4:	40013800 	.word	0x40013800
 80054b8:	40021000 	.word	0x40021000
 80054bc:	40004400 	.word	0x40004400
 80054c0:	40004800 	.word	0x40004800
 80054c4:	40004c00 	.word	0x40004c00
 80054c8:	40005000 	.word	0x40005000
 80054cc:	2310      	movs	r3, #16
 80054ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4aae      	ldr	r2, [pc, #696]	; (8005790 <UART_SetConfig+0x5bc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	f040 8097 	bne.w	800560c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d823      	bhi.n	800552e <UART_SetConfig+0x35a>
 80054e6:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <UART_SetConfig+0x318>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	08005511 	.word	0x08005511
 80054f0:	0800552f 	.word	0x0800552f
 80054f4:	08005519 	.word	0x08005519
 80054f8:	0800552f 	.word	0x0800552f
 80054fc:	0800551f 	.word	0x0800551f
 8005500:	0800552f 	.word	0x0800552f
 8005504:	0800552f 	.word	0x0800552f
 8005508:	0800552f 	.word	0x0800552f
 800550c:	08005527 	.word	0x08005527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005510:	f7fe fdf0 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 8005514:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005516:	e010      	b.n	800553a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005518:	4b9e      	ldr	r3, [pc, #632]	; (8005794 <UART_SetConfig+0x5c0>)
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800551c:	e00d      	b.n	800553a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800551e:	f7fe fd7b 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8005522:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005524:	e009      	b.n	800553a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800552c:	e005      	b.n	800553a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005538:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8130 	beq.w	80057a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	4a94      	ldr	r2, [pc, #592]	; (8005798 <UART_SetConfig+0x5c4>)
 8005548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800554c:	461a      	mov	r2, r3
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	fbb3 f3f2 	udiv	r3, r3, r2
 8005554:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	4413      	add	r3, r2
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	429a      	cmp	r2, r3
 8005564:	d305      	bcc.n	8005572 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	429a      	cmp	r2, r3
 8005570:	d903      	bls.n	800557a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005578:	e113      	b.n	80057a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	2200      	movs	r2, #0
 800557e:	60bb      	str	r3, [r7, #8]
 8005580:	60fa      	str	r2, [r7, #12]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	4a84      	ldr	r2, [pc, #528]	; (8005798 <UART_SetConfig+0x5c4>)
 8005588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800558c:	b29b      	uxth	r3, r3
 800558e:	2200      	movs	r2, #0
 8005590:	603b      	str	r3, [r7, #0]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005598:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800559c:	f7fa fe90 	bl	80002c0 <__aeabi_uldivmod>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4610      	mov	r0, r2
 80055a6:	4619      	mov	r1, r3
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	020b      	lsls	r3, r1, #8
 80055b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055b6:	0202      	lsls	r2, r0, #8
 80055b8:	6979      	ldr	r1, [r7, #20]
 80055ba:	6849      	ldr	r1, [r1, #4]
 80055bc:	0849      	lsrs	r1, r1, #1
 80055be:	2000      	movs	r0, #0
 80055c0:	460c      	mov	r4, r1
 80055c2:	4605      	mov	r5, r0
 80055c4:	eb12 0804 	adds.w	r8, r2, r4
 80055c8:	eb43 0905 	adc.w	r9, r3, r5
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	469a      	mov	sl, r3
 80055d4:	4693      	mov	fp, r2
 80055d6:	4652      	mov	r2, sl
 80055d8:	465b      	mov	r3, fp
 80055da:	4640      	mov	r0, r8
 80055dc:	4649      	mov	r1, r9
 80055de:	f7fa fe6f 	bl	80002c0 <__aeabi_uldivmod>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4613      	mov	r3, r2
 80055e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055f0:	d308      	bcc.n	8005604 <UART_SetConfig+0x430>
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f8:	d204      	bcs.n	8005604 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6a3a      	ldr	r2, [r7, #32]
 8005600:	60da      	str	r2, [r3, #12]
 8005602:	e0ce      	b.n	80057a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800560a:	e0ca      	b.n	80057a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005614:	d166      	bne.n	80056e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005616:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800561a:	2b08      	cmp	r3, #8
 800561c:	d827      	bhi.n	800566e <UART_SetConfig+0x49a>
 800561e:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <UART_SetConfig+0x450>)
 8005620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005624:	08005649 	.word	0x08005649
 8005628:	08005651 	.word	0x08005651
 800562c:	08005659 	.word	0x08005659
 8005630:	0800566f 	.word	0x0800566f
 8005634:	0800565f 	.word	0x0800565f
 8005638:	0800566f 	.word	0x0800566f
 800563c:	0800566f 	.word	0x0800566f
 8005640:	0800566f 	.word	0x0800566f
 8005644:	08005667 	.word	0x08005667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005648:	f7fe fd54 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 800564c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800564e:	e014      	b.n	800567a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005650:	f7fe fd66 	bl	8004120 <HAL_RCC_GetPCLK2Freq>
 8005654:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005656:	e010      	b.n	800567a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005658:	4b4e      	ldr	r3, [pc, #312]	; (8005794 <UART_SetConfig+0x5c0>)
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800565c:	e00d      	b.n	800567a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800565e:	f7fe fcdb 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8005662:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005664:	e009      	b.n	800567a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800566c:	e005      	b.n	800567a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005678:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 8090 	beq.w	80057a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	4a44      	ldr	r2, [pc, #272]	; (8005798 <UART_SetConfig+0x5c4>)
 8005688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800568c:	461a      	mov	r2, r3
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	fbb3 f3f2 	udiv	r3, r3, r2
 8005694:	005a      	lsls	r2, r3, #1
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	441a      	add	r2, r3
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	2b0f      	cmp	r3, #15
 80056ac:	d916      	bls.n	80056dc <UART_SetConfig+0x508>
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b4:	d212      	bcs.n	80056dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f023 030f 	bic.w	r3, r3, #15
 80056be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	8bfb      	ldrh	r3, [r7, #30]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	8bfa      	ldrh	r2, [r7, #30]
 80056d8:	60da      	str	r2, [r3, #12]
 80056da:	e062      	b.n	80057a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80056e2:	e05e      	b.n	80057a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d828      	bhi.n	800573e <UART_SetConfig+0x56a>
 80056ec:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <UART_SetConfig+0x520>)
 80056ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f2:	bf00      	nop
 80056f4:	08005719 	.word	0x08005719
 80056f8:	08005721 	.word	0x08005721
 80056fc:	08005729 	.word	0x08005729
 8005700:	0800573f 	.word	0x0800573f
 8005704:	0800572f 	.word	0x0800572f
 8005708:	0800573f 	.word	0x0800573f
 800570c:	0800573f 	.word	0x0800573f
 8005710:	0800573f 	.word	0x0800573f
 8005714:	08005737 	.word	0x08005737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005718:	f7fe fcec 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 800571c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800571e:	e014      	b.n	800574a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005720:	f7fe fcfe 	bl	8004120 <HAL_RCC_GetPCLK2Freq>
 8005724:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005726:	e010      	b.n	800574a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005728:	4b1a      	ldr	r3, [pc, #104]	; (8005794 <UART_SetConfig+0x5c0>)
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800572c:	e00d      	b.n	800574a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800572e:	f7fe fc73 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8005732:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005734:	e009      	b.n	800574a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800573c:	e005      	b.n	800574a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005748:	bf00      	nop
    }

    if (pclk != 0U)
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	2b00      	cmp	r3, #0
 800574e:	d028      	beq.n	80057a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	4a10      	ldr	r2, [pc, #64]	; (8005798 <UART_SetConfig+0x5c4>)
 8005756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800575a:	461a      	mov	r2, r3
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	085b      	lsrs	r3, r3, #1
 8005768:	441a      	add	r2, r3
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005772:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	2b0f      	cmp	r3, #15
 8005778:	d910      	bls.n	800579c <UART_SetConfig+0x5c8>
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005780:	d20c      	bcs.n	800579c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	b29a      	uxth	r2, r3
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60da      	str	r2, [r3, #12]
 800578c:	e009      	b.n	80057a2 <UART_SetConfig+0x5ce>
 800578e:	bf00      	nop
 8005790:	40008000 	.word	0x40008000
 8005794:	00f42400 	.word	0x00f42400
 8005798:	0800bfac 	.word	0x0800bfac
      }
      else
      {
        ret = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2200      	movs	r2, #0
 80057b6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2200      	movs	r2, #0
 80057bc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80057be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3730      	adds	r7, #48	; 0x30
 80057c6:	46bd      	mov	sp, r7
 80057c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080057cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005860:	f003 0310 	and.w	r3, r3, #16
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01a      	beq.n	80058e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ca:	d10a      	bne.n	80058e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	605a      	str	r2, [r3, #4]
  }
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b098      	sub	sp, #96	; 0x60
 8005914:	af02      	add	r7, sp, #8
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005920:	f7fb fd2a 	bl	8001378 <HAL_GetTick>
 8005924:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b08      	cmp	r3, #8
 8005932:	d12f      	bne.n	8005994 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005934:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800593c:	2200      	movs	r2, #0
 800593e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f88e 	bl	8005a64 <UART_WaitOnFlagUntilTimeout>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d022      	beq.n	8005994 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800595c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005962:	653b      	str	r3, [r7, #80]	; 0x50
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800596c:	647b      	str	r3, [r7, #68]	; 0x44
 800596e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800597a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e6      	bne.n	800594e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e063      	b.n	8005a5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d149      	bne.n	8005a36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059aa:	2200      	movs	r2, #0
 80059ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f857 	bl	8005a64 <UART_WaitOnFlagUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d03c      	beq.n	8005a36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	623b      	str	r3, [r7, #32]
   return(result);
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059da:	633b      	str	r3, [r7, #48]	; 0x30
 80059dc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e6      	bne.n	80059bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3308      	adds	r3, #8
 80059f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f023 0301 	bic.w	r3, r3, #1
 8005a04:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a0e:	61fa      	str	r2, [r7, #28]
 8005a10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	69b9      	ldr	r1, [r7, #24]
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1e5      	bne.n	80059ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e012      	b.n	8005a5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3758      	adds	r7, #88	; 0x58
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	4613      	mov	r3, r2
 8005a72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a74:	e04f      	b.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7c:	d04b      	beq.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7e:	f7fb fc7b 	bl	8001378 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d302      	bcc.n	8005a94 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e04e      	b.n	8005b36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d037      	beq.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b80      	cmp	r3, #128	; 0x80
 8005aaa:	d034      	beq.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b40      	cmp	r3, #64	; 0x40
 8005ab0:	d031      	beq.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d110      	bne.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 f95b 	bl	8005d84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e029      	b.n	8005b36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af0:	d111      	bne.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005afa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 f941 	bl	8005d84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e00f      	b.n	8005b36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	bf0c      	ite	eq
 8005b26:	2301      	moveq	r3, #1
 8005b28:	2300      	movne	r3, #0
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d0a0      	beq.n	8005a76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b0a3      	sub	sp, #140	; 0x8c
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	88fa      	ldrh	r2, [r7, #6]
 8005b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	88fa      	ldrh	r2, [r7, #6]
 8005b60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b72:	d10e      	bne.n	8005b92 <UART_Start_Receive_IT+0x52>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d105      	bne.n	8005b88 <UART_Start_Receive_IT+0x48>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005b82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b86:	e02d      	b.n	8005be4 <UART_Start_Receive_IT+0xa4>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	22ff      	movs	r2, #255	; 0xff
 8005b8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b90:	e028      	b.n	8005be4 <UART_Start_Receive_IT+0xa4>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10d      	bne.n	8005bb6 <UART_Start_Receive_IT+0x76>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d104      	bne.n	8005bac <UART_Start_Receive_IT+0x6c>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	22ff      	movs	r2, #255	; 0xff
 8005ba6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005baa:	e01b      	b.n	8005be4 <UART_Start_Receive_IT+0xa4>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	227f      	movs	r2, #127	; 0x7f
 8005bb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bb4:	e016      	b.n	8005be4 <UART_Start_Receive_IT+0xa4>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bbe:	d10d      	bne.n	8005bdc <UART_Start_Receive_IT+0x9c>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d104      	bne.n	8005bd2 <UART_Start_Receive_IT+0x92>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	227f      	movs	r2, #127	; 0x7f
 8005bcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bd0:	e008      	b.n	8005be4 <UART_Start_Receive_IT+0xa4>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	223f      	movs	r2, #63	; 0x3f
 8005bd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bda:	e003      	b.n	8005be4 <UART_Start_Receive_IT+0xa4>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2222      	movs	r2, #34	; 0x22
 8005bf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005c04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c06:	f043 0301 	orr.w	r3, r3, #1
 8005c0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3308      	adds	r3, #8
 8005c14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005c18:	673a      	str	r2, [r7, #112]	; 0x70
 8005c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005c1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005c26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e3      	bne.n	8005bf4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c34:	d14f      	bne.n	8005cd6 <UART_Start_Receive_IT+0x196>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005c3c:	88fa      	ldrh	r2, [r7, #6]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d349      	bcc.n	8005cd6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4a:	d107      	bne.n	8005c5c <UART_Start_Receive_IT+0x11c>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d103      	bne.n	8005c5c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4a47      	ldr	r2, [pc, #284]	; (8005d74 <UART_Start_Receive_IT+0x234>)
 8005c58:	675a      	str	r2, [r3, #116]	; 0x74
 8005c5a:	e002      	b.n	8005c62 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4a46      	ldr	r2, [pc, #280]	; (8005d78 <UART_Start_Receive_IT+0x238>)
 8005c60:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01a      	beq.n	8005ca0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c72:	e853 3f00 	ldrex	r3, [r3]
 8005c76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c8e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c94:	e841 2300 	strex	r3, r2, [r1]
 8005c98:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e4      	bne.n	8005c6a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005cc0:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e5      	bne.n	8005ca0 <UART_Start_Receive_IT+0x160>
 8005cd4:	e046      	b.n	8005d64 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cde:	d107      	bne.n	8005cf0 <UART_Start_Receive_IT+0x1b0>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d103      	bne.n	8005cf0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4a24      	ldr	r2, [pc, #144]	; (8005d7c <UART_Start_Receive_IT+0x23c>)
 8005cec:	675a      	str	r2, [r3, #116]	; 0x74
 8005cee:	e002      	b.n	8005cf6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4a23      	ldr	r2, [pc, #140]	; (8005d80 <UART_Start_Receive_IT+0x240>)
 8005cf4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d019      	beq.n	8005d32 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005d12:	677b      	str	r3, [r7, #116]	; 0x74
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e6      	bne.n	8005cfe <UART_Start_Receive_IT+0x1be>
 8005d30:	e018      	b.n	8005d64 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f043 0320 	orr.w	r3, r3, #32
 8005d46:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d50:	623b      	str	r3, [r7, #32]
 8005d52:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	69f9      	ldr	r1, [r7, #28]
 8005d56:	6a3a      	ldr	r2, [r7, #32]
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e6      	bne.n	8005d32 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	378c      	adds	r7, #140	; 0x8c
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	080065a5 	.word	0x080065a5
 8005d78:	08006245 	.word	0x08006245
 8005d7c:	0800608d 	.word	0x0800608d
 8005d80:	08005ed5 	.word	0x08005ed5

08005d84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b095      	sub	sp, #84	; 0x54
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005da0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005daa:	643b      	str	r3, [r7, #64]	; 0x40
 8005dac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005db0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e6      	bne.n	8005d8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dd4:	f023 0301 	bic.w	r3, r3, #1
 8005dd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3308      	adds	r3, #8
 8005de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005de4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e3      	bne.n	8005dbe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d118      	bne.n	8005e30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f023 0310 	bic.w	r3, r3, #16
 8005e12:	647b      	str	r3, [r7, #68]	; 0x44
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	6979      	ldr	r1, [r7, #20]
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	613b      	str	r3, [r7, #16]
   return(result);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e6      	bne.n	8005dfe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005e44:	bf00      	nop
 8005e46:	3754      	adds	r7, #84	; 0x54
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f7fb f8c0 	bl	8000ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e74:	bf00      	nop
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	e853 3f00 	ldrex	r3, [r3]
 8005e90:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	61bb      	str	r3, [r7, #24]
 8005ea4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	6979      	ldr	r1, [r7, #20]
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1e6      	bne.n	8005e84 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff f96f 	bl	80051a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eca:	bf00      	nop
 8005ecc:	3720      	adds	r7, #32
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b09c      	sub	sp, #112	; 0x70
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005ee2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eec:	2b22      	cmp	r3, #34	; 0x22
 8005eee:	f040 80be 	bne.w	800606e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005efc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f00:	b2d9      	uxtb	r1, r3
 8005f02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0c:	400a      	ands	r2, r1
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f040 80a1 	bne.w	800607e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f50:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e6      	bne.n	8005f3c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3308      	adds	r3, #8
 8005f74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f80:	f023 0301 	bic.w	r3, r3, #1
 8005f84:	667b      	str	r3, [r7, #100]	; 0x64
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f8e:	647a      	str	r2, [r7, #68]	; 0x44
 8005f90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e5      	bne.n	8005f6e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a33      	ldr	r2, [pc, #204]	; (8006088 <UART_RxISR_8BIT+0x1b4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d01f      	beq.n	8006000 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d018      	beq.n	8006000 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	623b      	str	r3, [r7, #32]
   return(result);
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fe2:	663b      	str	r3, [r7, #96]	; 0x60
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fec:	633b      	str	r3, [r7, #48]	; 0x30
 8005fee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e6      	bne.n	8005fce <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006004:	2b01      	cmp	r3, #1
 8006006:	d12e      	bne.n	8006066 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	60fb      	str	r3, [r7, #12]
   return(result);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0310 	bic.w	r3, r3, #16
 8006022:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800602c:	61fb      	str	r3, [r7, #28]
 800602e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	69b9      	ldr	r1, [r7, #24]
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	617b      	str	r3, [r7, #20]
   return(result);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e6      	bne.n	800600e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f003 0310 	and.w	r3, r3, #16
 800604a:	2b10      	cmp	r3, #16
 800604c:	d103      	bne.n	8006056 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2210      	movs	r2, #16
 8006054:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff f8ac 	bl	80051bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006064:	e00b      	b.n	800607e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fa ffce 	bl	8001008 <HAL_UART_RxCpltCallback>
}
 800606c:	e007      	b.n	800607e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699a      	ldr	r2, [r3, #24]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0208 	orr.w	r2, r2, #8
 800607c:	619a      	str	r2, [r3, #24]
}
 800607e:	bf00      	nop
 8006080:	3770      	adds	r7, #112	; 0x70
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	40008000 	.word	0x40008000

0800608c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b09c      	sub	sp, #112	; 0x70
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800609a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060a4:	2b22      	cmp	r3, #34	; 0x22
 80060a6:	f040 80be 	bne.w	8006226 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80060ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80060be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80060c2:	4013      	ands	r3, r2
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ce:	1c9a      	adds	r2, r3, #2
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	3b01      	subs	r3, #1
 80060de:	b29a      	uxth	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f040 80a1 	bne.w	8006236 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060fc:	e853 3f00 	ldrex	r3, [r3]
 8006100:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006108:	667b      	str	r3, [r7, #100]	; 0x64
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006112:	657b      	str	r3, [r7, #84]	; 0x54
 8006114:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006118:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e6      	bne.n	80060f4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3308      	adds	r3, #8
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	f023 0301 	bic.w	r3, r3, #1
 800613c:	663b      	str	r3, [r7, #96]	; 0x60
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3308      	adds	r3, #8
 8006144:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006146:	643a      	str	r2, [r7, #64]	; 0x40
 8006148:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800614c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e5      	bne.n	8006126 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a33      	ldr	r2, [pc, #204]	; (8006240 <UART_RxISR_16BIT+0x1b4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d01f      	beq.n	80061b8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d018      	beq.n	80061b8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	e853 3f00 	ldrex	r3, [r3]
 8006192:	61fb      	str	r3, [r7, #28]
   return(result);
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800619a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061a6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061ac:	e841 2300 	strex	r3, r2, [r1]
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e6      	bne.n	8006186 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d12e      	bne.n	800621e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f023 0310 	bic.w	r3, r3, #16
 80061da:	65bb      	str	r3, [r7, #88]	; 0x58
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	6979      	ldr	r1, [r7, #20]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	613b      	str	r3, [r7, #16]
   return(result);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e6      	bne.n	80061c6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	2b10      	cmp	r3, #16
 8006204:	d103      	bne.n	800620e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2210      	movs	r2, #16
 800620c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fe ffd0 	bl	80051bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800621c:	e00b      	b.n	8006236 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fa fef2 	bl	8001008 <HAL_UART_RxCpltCallback>
}
 8006224:	e007      	b.n	8006236 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0208 	orr.w	r2, r2, #8
 8006234:	619a      	str	r2, [r3, #24]
}
 8006236:	bf00      	nop
 8006238:	3770      	adds	r7, #112	; 0x70
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40008000 	.word	0x40008000

08006244 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b0ac      	sub	sp, #176	; 0xb0
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006252:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800627a:	2b22      	cmp	r3, #34	; 0x22
 800627c:	f040 8182 	bne.w	8006584 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006286:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800628a:	e125      	b.n	80064d8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006296:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800629a:	b2d9      	uxtb	r1, r3
 800629c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a6:	400a      	ands	r2, r1
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80062d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d053      	beq.n	8006386 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d011      	beq.n	800630e <UART_RxISR_8BIT_FIFOEN+0xca>
 80062ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2201      	movs	r2, #1
 80062fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006304:	f043 0201 	orr.w	r2, r3, #1
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800630e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d011      	beq.n	800633e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800631a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00b      	beq.n	800633e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2202      	movs	r2, #2
 800632c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006334:	f043 0204 	orr.w	r2, r3, #4
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800633e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	d011      	beq.n	800636e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800634a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2204      	movs	r2, #4
 800635c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006364:	f043 0202 	orr.w	r2, r3, #2
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006374:	2b00      	cmp	r3, #0
 8006376:	d006      	beq.n	8006386 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7fa fe3b 	bl	8000ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	f040 80a2 	bne.w	80064d8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80063a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063b8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80063bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80063c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e4      	bne.n	8006394 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3308      	adds	r3, #8
 80063d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80063da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063e0:	f023 0301 	bic.w	r3, r3, #1
 80063e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3308      	adds	r3, #8
 80063ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063f2:	66ba      	str	r2, [r7, #104]	; 0x68
 80063f4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80063f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006400:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e1      	bne.n	80063ca <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a5f      	ldr	r2, [pc, #380]	; (800659c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d021      	beq.n	8006468 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d01a      	beq.n	8006468 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006442:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006454:	657b      	str	r3, [r7, #84]	; 0x54
 8006456:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800645a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e4      	bne.n	8006432 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800646c:	2b01      	cmp	r3, #1
 800646e:	d130      	bne.n	80064d2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	f023 0310 	bic.w	r3, r3, #16
 800648a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006498:	643b      	str	r3, [r7, #64]	; 0x40
 800649a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800649e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064a0:	e841 2300 	strex	r3, r2, [r1]
 80064a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e4      	bne.n	8006476 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	f003 0310 	and.w	r3, r3, #16
 80064b6:	2b10      	cmp	r3, #16
 80064b8:	d103      	bne.n	80064c2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2210      	movs	r2, #16
 80064c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fe fe76 	bl	80051bc <HAL_UARTEx_RxEventCallback>
 80064d0:	e002      	b.n	80064d8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fa fd98 	bl	8001008 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80064d8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d006      	beq.n	80064ee <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80064e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f47f aecf 	bne.w	800628c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80064f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d049      	beq.n	8006594 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006506:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800650a:	429a      	cmp	r2, r3
 800650c:	d242      	bcs.n	8006594 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3308      	adds	r3, #8
 8006514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	61fb      	str	r3, [r7, #28]
   return(result);
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006524:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3308      	adds	r3, #8
 800652e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006534:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e3      	bne.n	800650e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a15      	ldr	r2, [pc, #84]	; (80065a0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800654a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	60bb      	str	r3, [r7, #8]
   return(result);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f043 0320 	orr.w	r3, r3, #32
 8006560:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006572:	6979      	ldr	r1, [r7, #20]
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	e841 2300 	strex	r3, r2, [r1]
 800657a:	613b      	str	r3, [r7, #16]
   return(result);
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1e4      	bne.n	800654c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006582:	e007      	b.n	8006594 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0208 	orr.w	r2, r2, #8
 8006592:	619a      	str	r2, [r3, #24]
}
 8006594:	bf00      	nop
 8006596:	37b0      	adds	r7, #176	; 0xb0
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	40008000 	.word	0x40008000
 80065a0:	08005ed5 	.word	0x08005ed5

080065a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b0ae      	sub	sp, #184	; 0xb8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80065b2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065da:	2b22      	cmp	r3, #34	; 0x22
 80065dc:	f040 8186 	bne.w	80068ec <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80065e6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80065ea:	e129      	b.n	8006840 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80065fe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006602:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006606:	4013      	ands	r3, r2
 8006608:	b29a      	uxth	r2, r3
 800660a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800660e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006614:	1c9a      	adds	r2, r3, #2
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006636:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	2b00      	cmp	r3, #0
 8006640:	d053      	beq.n	80066ea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006642:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d011      	beq.n	8006672 <UART_RxISR_16BIT_FIFOEN+0xce>
 800664e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00b      	beq.n	8006672 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2201      	movs	r2, #1
 8006660:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006668:	f043 0201 	orr.w	r2, r3, #1
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006672:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d011      	beq.n	80066a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800667e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00b      	beq.n	80066a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2202      	movs	r2, #2
 8006690:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006698:	f043 0204 	orr.w	r2, r3, #4
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d011      	beq.n	80066d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80066ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00b      	beq.n	80066d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2204      	movs	r2, #4
 80066c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c8:	f043 0202 	orr.w	r2, r3, #2
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d006      	beq.n	80066ea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7fa fc89 	bl	8000ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f040 80a4 	bne.w	8006840 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006700:	e853 3f00 	ldrex	r3, [r3]
 8006704:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800670c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	461a      	mov	r2, r3
 8006716:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800671a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800671e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006722:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800672c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e2      	bne.n	80066f8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3308      	adds	r3, #8
 8006738:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006748:	f023 0301 	bic.w	r3, r3, #1
 800674c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3308      	adds	r3, #8
 8006756:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800675a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800675c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006760:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e1      	bne.n	8006732 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a5f      	ldr	r2, [pc, #380]	; (8006904 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d021      	beq.n	80067d0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d01a      	beq.n	80067d0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80067bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80067be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e4      	bne.n	800679a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d130      	bne.n	800683a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ee:	f023 0310 	bic.w	r3, r3, #16
 80067f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006800:	647b      	str	r3, [r7, #68]	; 0x44
 8006802:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800680e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e4      	bne.n	80067de <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	f003 0310 	and.w	r3, r3, #16
 800681e:	2b10      	cmp	r3, #16
 8006820:	d103      	bne.n	800682a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2210      	movs	r2, #16
 8006828:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fe fcc2 	bl	80051bc <HAL_UARTEx_RxEventCallback>
 8006838:	e002      	b.n	8006840 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fa fbe4 	bl	8001008 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006840:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006844:	2b00      	cmp	r3, #0
 8006846:	d006      	beq.n	8006856 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006848:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b00      	cmp	r3, #0
 8006852:	f47f aecb 	bne.w	80065ec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800685c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006860:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006864:	2b00      	cmp	r3, #0
 8006866:	d049      	beq.n	80068fc <UART_RxISR_16BIT_FIFOEN+0x358>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800686e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006872:	429a      	cmp	r2, r3
 8006874:	d242      	bcs.n	80068fc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3308      	adds	r3, #8
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	623b      	str	r3, [r7, #32]
   return(result);
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800688c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3308      	adds	r3, #8
 8006896:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800689a:	633a      	str	r2, [r7, #48]	; 0x30
 800689c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e3      	bne.n	8006876 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a15      	ldr	r2, [pc, #84]	; (8006908 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80068b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	e853 3f00 	ldrex	r3, [r3]
 80068c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f043 0320 	orr.w	r3, r3, #32
 80068c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	69b9      	ldr	r1, [r7, #24]
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	617b      	str	r3, [r7, #20]
   return(result);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e4      	bne.n	80068b4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068ea:	e007      	b.n	80068fc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0208 	orr.w	r2, r2, #8
 80068fa:	619a      	str	r2, [r3, #24]
}
 80068fc:	bf00      	nop
 80068fe:	37b8      	adds	r7, #184	; 0xb8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	40008000 	.word	0x40008000
 8006908:	0800608d 	.word	0x0800608d

0800690c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_UARTEx_DisableFifoMode+0x16>
 800695a:	2302      	movs	r3, #2
 800695c:	e027      	b.n	80069ae <HAL_UARTEx_DisableFifoMode+0x66>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2224      	movs	r2, #36	; 0x24
 800696a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0201 	bic.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800698c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e02d      	b.n	8006a2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2224      	movs	r2, #36	; 0x24
 80069de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0201 	bic.w	r2, r2, #1
 80069f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f850 	bl	8006ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e02d      	b.n	8006aaa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2224      	movs	r2, #36	; 0x24
 8006a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0201 	bic.w	r2, r2, #1
 8006a74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f812 	bl	8006ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d108      	bne.n	8006ad6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ad4:	e031      	b.n	8006b3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ad6:	2308      	movs	r3, #8
 8006ad8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ada:	2308      	movs	r3, #8
 8006adc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	0e5b      	lsrs	r3, r3, #25
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	0f5b      	lsrs	r3, r3, #29
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 0307 	and.w	r3, r3, #7
 8006afc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006afe:	7bbb      	ldrb	r3, [r7, #14]
 8006b00:	7b3a      	ldrb	r2, [r7, #12]
 8006b02:	4911      	ldr	r1, [pc, #68]	; (8006b48 <UARTEx_SetNbDataToProcess+0x94>)
 8006b04:	5c8a      	ldrb	r2, [r1, r2]
 8006b06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b0a:	7b3a      	ldrb	r2, [r7, #12]
 8006b0c:	490f      	ldr	r1, [pc, #60]	; (8006b4c <UARTEx_SetNbDataToProcess+0x98>)
 8006b0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	7b7a      	ldrb	r2, [r7, #13]
 8006b20:	4909      	ldr	r1, [pc, #36]	; (8006b48 <UARTEx_SetNbDataToProcess+0x94>)
 8006b22:	5c8a      	ldrb	r2, [r1, r2]
 8006b24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b28:	7b7a      	ldrb	r2, [r7, #13]
 8006b2a:	4908      	ldr	r1, [pc, #32]	; (8006b4c <UARTEx_SetNbDataToProcess+0x98>)
 8006b2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b3a:	bf00      	nop
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	0800bfc4 	.word	0x0800bfc4
 8006b4c:	0800bfcc 	.word	0x0800bfcc

08006b50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b60:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006b64:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b085      	sub	sp, #20
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b86:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006b8a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	43db      	mvns	r3, r3
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	1d3b      	adds	r3, r7, #4
 8006bbe:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b09d      	sub	sp, #116	; 0x74
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c16:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	78db      	ldrb	r3, [r3, #3]
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d81f      	bhi.n	8006c62 <USB_ActivateEndpoint+0x72>
 8006c22:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <USB_ActivateEndpoint+0x38>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006c39 	.word	0x08006c39
 8006c2c:	08006c55 	.word	0x08006c55
 8006c30:	08006c6b 	.word	0x08006c6b
 8006c34:	08006c47 	.word	0x08006c47
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006c38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006c44:	e012      	b.n	8006c6c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006c46:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c4a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006c4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006c52:	e00b      	b.n	8006c6c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006c54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006c60:	e004      	b.n	8006c6c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006c68:	e000      	b.n	8006c6c <USB_ActivateEndpoint+0x7c>
      break;
 8006c6a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	441a      	add	r2, r3
 8006c76:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	b21b      	sxth	r3, r3
 8006c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca6:	b21a      	sxth	r2, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	b21b      	sxth	r3, r3
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	b21b      	sxth	r3, r3
 8006cb2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	441a      	add	r2, r3
 8006cc0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	7b1b      	ldrb	r3, [r3, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f040 8178 	bne.w	8006fd2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 8084 	beq.w	8006df4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	00da      	lsls	r2, r3, #3
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	88db      	ldrh	r3, [r3, #6]
 8006d14:	085b      	lsrs	r3, r3, #1
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	827b      	strh	r3, [r7, #18]
 8006d2e:	8a7b      	ldrh	r3, [r7, #18]
 8006d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d01b      	beq.n	8006d70 <USB_ActivateEndpoint+0x180>
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4e:	823b      	strh	r3, [r7, #16]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	441a      	add	r2, r3
 8006d5a:	8a3b      	ldrh	r3, [r7, #16]
 8006d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	78db      	ldrb	r3, [r3, #3]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d020      	beq.n	8006dba <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d8e:	81bb      	strh	r3, [r7, #12]
 8006d90:	89bb      	ldrh	r3, [r7, #12]
 8006d92:	f083 0320 	eor.w	r3, r3, #32
 8006d96:	81bb      	strh	r3, [r7, #12]
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	441a      	add	r2, r3
 8006da2:	89bb      	ldrh	r3, [r7, #12]
 8006da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	8013      	strh	r3, [r2, #0]
 8006db8:	e2d5      	b.n	8007366 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd0:	81fb      	strh	r3, [r7, #14]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	441a      	add	r2, r3
 8006ddc:	89fb      	ldrh	r3, [r7, #14]
 8006dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	8013      	strh	r3, [r2, #0]
 8006df2:	e2b8      	b.n	8007366 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	633b      	str	r3, [r7, #48]	; 0x30
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	4413      	add	r3, r2
 8006e06:	633b      	str	r3, [r7, #48]	; 0x30
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	00da      	lsls	r2, r3, #3
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	4413      	add	r3, r2
 8006e12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	88db      	ldrh	r3, [r3, #6]
 8006e1c:	085b      	lsrs	r3, r3, #1
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	461a      	mov	r2, r3
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	4413      	add	r3, r2
 8006e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	00da      	lsls	r2, r3, #3
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e44:	4413      	add	r3, r2
 8006e46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	801a      	strh	r2, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b3e      	cmp	r3, #62	; 0x3e
 8006e62:	d91d      	bls.n	8006ea0 <USB_ActivateEndpoint+0x2b0>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	095b      	lsrs	r3, r3, #5
 8006e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	f003 031f 	and.w	r3, r3, #31
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d102      	bne.n	8006e7e <USB_ActivateEndpoint+0x28e>
 8006e78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	029b      	lsls	r3, r3, #10
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	801a      	strh	r2, [r3, #0]
 8006e9e:	e026      	b.n	8006eee <USB_ActivateEndpoint+0x2fe>
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <USB_ActivateEndpoint+0x2ce>
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	801a      	strh	r2, [r3, #0]
 8006ebc:	e017      	b.n	8006eee <USB_ActivateEndpoint+0x2fe>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	085b      	lsrs	r3, r3, #1
 8006ec4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <USB_ActivateEndpoint+0x2e8>
 8006ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	029b      	lsls	r3, r3, #10
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	847b      	strh	r3, [r7, #34]	; 0x22
 8006efc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01b      	beq.n	8006f3e <USB_ActivateEndpoint+0x34e>
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1c:	843b      	strh	r3, [r7, #32]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	441a      	add	r2, r3
 8006f28:	8c3b      	ldrh	r3, [r7, #32]
 8006f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d124      	bne.n	8006f90 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5c:	83bb      	strh	r3, [r7, #28]
 8006f5e:	8bbb      	ldrh	r3, [r7, #28]
 8006f60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f64:	83bb      	strh	r3, [r7, #28]
 8006f66:	8bbb      	ldrh	r3, [r7, #28]
 8006f68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f6c:	83bb      	strh	r3, [r7, #28]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	441a      	add	r2, r3
 8006f78:	8bbb      	ldrh	r3, [r7, #28]
 8006f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	8013      	strh	r3, [r2, #0]
 8006f8e:	e1ea      	b.n	8007366 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa6:	83fb      	strh	r3, [r7, #30]
 8006fa8:	8bfb      	ldrh	r3, [r7, #30]
 8006faa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fae:	83fb      	strh	r3, [r7, #30]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	441a      	add	r2, r3
 8006fba:	8bfb      	ldrh	r3, [r7, #30]
 8006fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	8013      	strh	r3, [r2, #0]
 8006fd0:	e1c9      	b.n	8007366 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	78db      	ldrb	r3, [r3, #3]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d11e      	bne.n	8007018 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	441a      	add	r2, r3
 8006ffe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800700a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800700e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007012:	b29b      	uxth	r3, r3
 8007014:	8013      	strh	r3, [r2, #0]
 8007016:	e01d      	b.n	8007054 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800702a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	441a      	add	r2, r3
 800703c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800704c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007050:	b29b      	uxth	r3, r3
 8007052:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705e:	b29b      	uxth	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007064:	4413      	add	r3, r2
 8007066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	00da      	lsls	r2, r3, #3
 800706e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007070:	4413      	add	r3, r2
 8007072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007076:	65bb      	str	r3, [r7, #88]	; 0x58
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	891b      	ldrh	r3, [r3, #8]
 800707c:	085b      	lsrs	r3, r3, #1
 800707e:	b29b      	uxth	r3, r3
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007086:	801a      	strh	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	657b      	str	r3, [r7, #84]	; 0x54
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007092:	b29b      	uxth	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007098:	4413      	add	r3, r2
 800709a:	657b      	str	r3, [r7, #84]	; 0x54
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	00da      	lsls	r2, r3, #3
 80070a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070a4:	4413      	add	r3, r2
 80070a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070aa:	653b      	str	r3, [r7, #80]	; 0x50
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	895b      	ldrh	r3, [r3, #10]
 80070b0:	085b      	lsrs	r3, r3, #1
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	785b      	ldrb	r3, [r3, #1]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f040 8093 	bne.w	80071ec <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80070d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01b      	beq.n	800711a <USB_ActivateEndpoint+0x52a>
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	441a      	add	r2, r3
 8007104:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800710a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800710e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007116:	b29b      	uxth	r3, r3
 8007118:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007128:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800712a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d01b      	beq.n	800716a <USB_ActivateEndpoint+0x57a>
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29b      	uxth	r3, r3
 8007140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007148:	877b      	strh	r3, [r7, #58]	; 0x3a
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	441a      	add	r2, r3
 8007154:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800715e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007162:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007166:	b29b      	uxth	r3, r3
 8007168:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	b29b      	uxth	r3, r3
 8007178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800717c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007180:	873b      	strh	r3, [r7, #56]	; 0x38
 8007182:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007184:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007188:	873b      	strh	r3, [r7, #56]	; 0x38
 800718a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800718c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007190:	873b      	strh	r3, [r7, #56]	; 0x38
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	441a      	add	r2, r3
 800719c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800719e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	441a      	add	r2, r3
 80071d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80071d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	8013      	strh	r3, [r2, #0]
 80071ea:	e0bc      	b.n	8007366 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80071fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d01d      	beq.n	8007244 <USB_ActivateEndpoint+0x654>
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	b29b      	uxth	r3, r3
 8007216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800721a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	441a      	add	r2, r3
 800722c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800723c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007240:	b29b      	uxth	r3, r3
 8007242:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007254:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725c:	2b00      	cmp	r3, #0
 800725e:	d01d      	beq.n	800729c <USB_ActivateEndpoint+0x6ac>
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b29b      	uxth	r3, r3
 800726e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007276:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	441a      	add	r2, r3
 8007284:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800728c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007294:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007298:	b29b      	uxth	r3, r3
 800729a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	78db      	ldrb	r3, [r3, #3]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d024      	beq.n	80072ee <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80072be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072c2:	f083 0320 	eor.w	r3, r3, #32
 80072c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	441a      	add	r2, r3
 80072d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80072d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	8013      	strh	r3, [r2, #0]
 80072ec:	e01d      	b.n	800732a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007304:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	441a      	add	r2, r3
 8007312:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800731a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800731e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007326:	b29b      	uxth	r3, r3
 8007328:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800733c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007340:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	441a      	add	r2, r3
 800734e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800735a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800735e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007362:	b29b      	uxth	r3, r3
 8007364:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007366:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800736a:	4618      	mov	r0, r3
 800736c:	3774      	adds	r7, #116	; 0x74
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop

08007378 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007378:	b480      	push	{r7}
 800737a:	b08d      	sub	sp, #52	; 0x34
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	7b1b      	ldrb	r3, [r3, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	f040 808e 	bne.w	80074a8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d044      	beq.n	800741e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	81bb      	strh	r3, [r7, #12]
 80073a2:	89bb      	ldrh	r3, [r7, #12]
 80073a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01b      	beq.n	80073e4 <USB_DeactivateEndpoint+0x6c>
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c2:	817b      	strh	r3, [r7, #10]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	441a      	add	r2, r3
 80073ce:	897b      	ldrh	r3, [r7, #10]
 80073d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073fa:	813b      	strh	r3, [r7, #8]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	441a      	add	r2, r3
 8007406:	893b      	ldrh	r3, [r7, #8]
 8007408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800740c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007418:	b29b      	uxth	r3, r3
 800741a:	8013      	strh	r3, [r2, #0]
 800741c:	e192      	b.n	8007744 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	827b      	strh	r3, [r7, #18]
 800742c:	8a7b      	ldrh	r3, [r7, #18]
 800742e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d01b      	beq.n	800746e <USB_DeactivateEndpoint+0xf6>
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29b      	uxth	r3, r3
 8007444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744c:	823b      	strh	r3, [r7, #16]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	441a      	add	r2, r3
 8007458:	8a3b      	ldrh	r3, [r7, #16]
 800745a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800745e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746a:	b29b      	uxth	r3, r3
 800746c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007484:	81fb      	strh	r3, [r7, #14]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	441a      	add	r2, r3
 8007490:	89fb      	ldrh	r3, [r7, #14]
 8007492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800749a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800749e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	8013      	strh	r3, [r2, #0]
 80074a6:	e14d      	b.n	8007744 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	785b      	ldrb	r3, [r3, #1]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f040 80a5 	bne.w	80075fc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	843b      	strh	r3, [r7, #32]
 80074c0:	8c3b      	ldrh	r3, [r7, #32]
 80074c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d01b      	beq.n	8007502 <USB_DeactivateEndpoint+0x18a>
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e0:	83fb      	strh	r3, [r7, #30]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	441a      	add	r2, r3
 80074ec:	8bfb      	ldrh	r3, [r7, #30]
 80074ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074fe:	b29b      	uxth	r3, r3
 8007500:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	83bb      	strh	r3, [r7, #28]
 8007510:	8bbb      	ldrh	r3, [r7, #28]
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	d01b      	beq.n	8007552 <USB_DeactivateEndpoint+0x1da>
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007530:	837b      	strh	r3, [r7, #26]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	441a      	add	r2, r3
 800753c:	8b7b      	ldrh	r3, [r7, #26]
 800753e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800754a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800754e:	b29b      	uxth	r3, r3
 8007550:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29b      	uxth	r3, r3
 8007560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007568:	833b      	strh	r3, [r7, #24]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	441a      	add	r2, r3
 8007574:	8b3b      	ldrh	r3, [r7, #24]
 8007576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800757e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007582:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007586:	b29b      	uxth	r3, r3
 8007588:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800759c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a0:	82fb      	strh	r3, [r7, #22]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	441a      	add	r2, r3
 80075ac:	8afb      	ldrh	r3, [r7, #22]
 80075ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075be:	b29b      	uxth	r3, r3
 80075c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d8:	82bb      	strh	r3, [r7, #20]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	441a      	add	r2, r3
 80075e4:	8abb      	ldrh	r3, [r7, #20]
 80075e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	8013      	strh	r3, [r2, #0]
 80075fa:	e0a3      	b.n	8007744 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800760a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800760c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d01b      	beq.n	800764c <USB_DeactivateEndpoint+0x2d4>
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	b29b      	uxth	r3, r3
 8007622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	441a      	add	r2, r3
 8007636:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800763c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007648:	b29b      	uxth	r3, r3
 800764a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	857b      	strh	r3, [r7, #42]	; 0x2a
 800765a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800765c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01b      	beq.n	800769c <USB_DeactivateEndpoint+0x324>
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767a:	853b      	strh	r3, [r7, #40]	; 0x28
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	441a      	add	r2, r3
 8007686:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800768c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007694:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007698:	b29b      	uxth	r3, r3
 800769a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	441a      	add	r2, r3
 80076be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	441a      	add	r2, r3
 80076f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007708:	b29b      	uxth	r3, r3
 800770a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	b29b      	uxth	r3, r3
 800771a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800771e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007722:	847b      	strh	r3, [r7, #34]	; 0x22
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	441a      	add	r2, r3
 800772e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800773c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007740:	b29b      	uxth	r3, r3
 8007742:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3734      	adds	r7, #52	; 0x34
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b0c2      	sub	sp, #264	; 0x108
 8007756:	af00      	add	r7, sp, #0
 8007758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007760:	6018      	str	r0, [r3, #0]
 8007762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800776a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800776c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	785b      	ldrb	r3, [r3, #1]
 8007778:	2b01      	cmp	r3, #1
 800777a:	f040 86b7 	bne.w	80084ec <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800777e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800778e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	429a      	cmp	r2, r3
 8007798:	d908      	bls.n	80077ac <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800779a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80077aa:	e007      	b.n	80077bc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80077ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80077bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	7b1b      	ldrb	r3, [r3, #12]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d13a      	bne.n	8007842 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80077cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6959      	ldr	r1, [r3, #20]
 80077d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	88da      	ldrh	r2, [r3, #6]
 80077e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80077ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80077f2:	6800      	ldr	r0, [r0, #0]
 80077f4:	f001 fc98 	bl	8009128 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80077f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	613b      	str	r3, [r7, #16]
 8007804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007808:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007812:	b29b      	uxth	r3, r3
 8007814:	461a      	mov	r2, r3
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	4413      	add	r3, r2
 800781a:	613b      	str	r3, [r7, #16]
 800781c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	00da      	lsls	r2, r3, #3
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	4413      	add	r3, r2
 800782e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007838:	b29a      	uxth	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	801a      	strh	r2, [r3, #0]
 800783e:	f000 be1f 	b.w	8008480 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	78db      	ldrb	r3, [r3, #3]
 800784e:	2b02      	cmp	r3, #2
 8007850:	f040 8462 	bne.w	8008118 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6a1a      	ldr	r2, [r3, #32]
 8007860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	429a      	cmp	r2, r3
 800786e:	f240 83df 	bls.w	8008030 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	b29b      	uxth	r3, r3
 8007890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007898:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800789c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	441a      	add	r2, r3
 80078b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80078ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80078c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80078ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6a1a      	ldr	r2, [r3, #32]
 80078da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078de:	1ad2      	subs	r2, r2, r3
 80078e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	b29b      	uxth	r3, r3
 800790a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 81c7 	beq.w	8007ca2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007918:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	633b      	str	r3, [r7, #48]	; 0x30
 8007920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	785b      	ldrb	r3, [r3, #1]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d177      	bne.n	8007a20 <USB_EPStartXfer+0x2ce>
 8007930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	62bb      	str	r3, [r7, #40]	; 0x28
 800793c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800794a:	b29b      	uxth	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	4413      	add	r3, r2
 8007952:	62bb      	str	r3, [r7, #40]	; 0x28
 8007954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	00da      	lsls	r2, r3, #3
 8007962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007964:	4413      	add	r3, r2
 8007966:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800796a:	627b      	str	r3, [r7, #36]	; 0x24
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	881b      	ldrh	r3, [r3, #0]
 8007970:	b29b      	uxth	r3, r3
 8007972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007976:	b29a      	uxth	r2, r3
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	801a      	strh	r2, [r3, #0]
 800797c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007980:	2b3e      	cmp	r3, #62	; 0x3e
 8007982:	d921      	bls.n	80079c8 <USB_EPStartXfer+0x276>
 8007984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007988:	095b      	lsrs	r3, r3, #5
 800798a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800798e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007992:	f003 031f 	and.w	r3, r3, #31
 8007996:	2b00      	cmp	r3, #0
 8007998:	d104      	bne.n	80079a4 <USB_EPStartXfer+0x252>
 800799a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800799e:	3b01      	subs	r3, #1
 80079a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	881b      	ldrh	r3, [r3, #0]
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	029b      	lsls	r3, r3, #10
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	4313      	orrs	r3, r2
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	801a      	strh	r2, [r3, #0]
 80079c6:	e050      	b.n	8007a6a <USB_EPStartXfer+0x318>
 80079c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10a      	bne.n	80079e6 <USB_EPStartXfer+0x294>
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	881b      	ldrh	r3, [r3, #0]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079de:	b29a      	uxth	r2, r3
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	801a      	strh	r2, [r3, #0]
 80079e4:	e041      	b.n	8007a6a <USB_EPStartXfer+0x318>
 80079e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d004      	beq.n	8007a06 <USB_EPStartXfer+0x2b4>
 80079fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a00:	3301      	adds	r3, #1
 8007a02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	029b      	lsls	r3, r3, #10
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	4313      	orrs	r3, r2
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	801a      	strh	r2, [r3, #0]
 8007a1e:	e024      	b.n	8007a6a <USB_EPStartXfer+0x318>
 8007a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	785b      	ldrb	r3, [r3, #1]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d11c      	bne.n	8007a6a <USB_EPStartXfer+0x318>
 8007a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	461a      	mov	r2, r3
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	4413      	add	r3, r2
 8007a46:	633b      	str	r3, [r7, #48]	; 0x30
 8007a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	00da      	lsls	r2, r3, #3
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	4413      	add	r3, r2
 8007a5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	895b      	ldrh	r3, [r3, #10]
 8007a76:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6959      	ldr	r1, [r3, #20]
 8007a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a90:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007a94:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007a98:	6800      	ldr	r0, [r0, #0]
 8007a9a:	f001 fb45 	bl	8009128 <USB_WritePMA>
            ep->xfer_buff += len;
 8007a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695a      	ldr	r2, [r3, #20]
 8007aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aae:	441a      	add	r2, r3
 8007ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6a1a      	ldr	r2, [r3, #32]
 8007ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d90f      	bls.n	8007af8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6a1a      	ldr	r2, [r3, #32]
 8007ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae8:	1ad2      	subs	r2, r2, r3
 8007aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	621a      	str	r2, [r3, #32]
 8007af6:	e00e      	b.n	8007b16 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2200      	movs	r2, #0
 8007b14:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	785b      	ldrb	r3, [r3, #1]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d177      	bne.n	8007c16 <USB_EPStartXfer+0x4c4>
 8007b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	61bb      	str	r3, [r7, #24]
 8007b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	461a      	mov	r2, r3
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	4413      	add	r3, r2
 8007b48:	61bb      	str	r3, [r7, #24]
 8007b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	00da      	lsls	r2, r3, #3
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b60:	617b      	str	r3, [r7, #20]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	801a      	strh	r2, [r3, #0]
 8007b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b76:	2b3e      	cmp	r3, #62	; 0x3e
 8007b78:	d921      	bls.n	8007bbe <USB_EPStartXfer+0x46c>
 8007b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7e:	095b      	lsrs	r3, r3, #5
 8007b80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d104      	bne.n	8007b9a <USB_EPStartXfer+0x448>
 8007b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b94:	3b01      	subs	r3, #1
 8007b96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	029b      	lsls	r3, r3, #10
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	4313      	orrs	r3, r2
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	801a      	strh	r2, [r3, #0]
 8007bbc:	e056      	b.n	8007c6c <USB_EPStartXfer+0x51a>
 8007bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10a      	bne.n	8007bdc <USB_EPStartXfer+0x48a>
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	801a      	strh	r2, [r3, #0]
 8007bda:	e047      	b.n	8007c6c <USB_EPStartXfer+0x51a>
 8007bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be0:	085b      	lsrs	r3, r3, #1
 8007be2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d004      	beq.n	8007bfc <USB_EPStartXfer+0x4aa>
 8007bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	029b      	lsls	r3, r3, #10
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	801a      	strh	r2, [r3, #0]
 8007c14:	e02a      	b.n	8007c6c <USB_EPStartXfer+0x51a>
 8007c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d122      	bne.n	8007c6c <USB_EPStartXfer+0x51a>
 8007c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	623b      	str	r3, [r7, #32]
 8007c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	461a      	mov	r2, r3
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	4413      	add	r3, r2
 8007c48:	623b      	str	r3, [r7, #32]
 8007c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	00da      	lsls	r2, r3, #3
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c60:	61fb      	str	r3, [r7, #28]
 8007c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	891b      	ldrh	r3, [r3, #8]
 8007c78:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6959      	ldr	r1, [r3, #20]
 8007c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c92:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007c96:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007c9a:	6800      	ldr	r0, [r0, #0]
 8007c9c:	f001 fa44 	bl	8009128 <USB_WritePMA>
 8007ca0:	e3ee      	b.n	8008480 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d177      	bne.n	8007da2 <USB_EPStartXfer+0x650>
 8007cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	461a      	mov	r2, r3
 8007cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cd2:	4413      	add	r3, r2
 8007cd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	00da      	lsls	r2, r3, #3
 8007ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cec:	647b      	str	r3, [r7, #68]	; 0x44
 8007cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cfc:	801a      	strh	r2, [r3, #0]
 8007cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d02:	2b3e      	cmp	r3, #62	; 0x3e
 8007d04:	d921      	bls.n	8007d4a <USB_EPStartXfer+0x5f8>
 8007d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d0a:	095b      	lsrs	r3, r3, #5
 8007d0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d14:	f003 031f 	and.w	r3, r3, #31
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d104      	bne.n	8007d26 <USB_EPStartXfer+0x5d4>
 8007d1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d20:	3b01      	subs	r3, #1
 8007d22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	029b      	lsls	r3, r3, #10
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	4313      	orrs	r3, r2
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d46:	801a      	strh	r2, [r3, #0]
 8007d48:	e056      	b.n	8007df8 <USB_EPStartXfer+0x6a6>
 8007d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10a      	bne.n	8007d68 <USB_EPStartXfer+0x616>
 8007d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d64:	801a      	strh	r2, [r3, #0]
 8007d66:	e047      	b.n	8007df8 <USB_EPStartXfer+0x6a6>
 8007d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d6c:	085b      	lsrs	r3, r3, #1
 8007d6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <USB_EPStartXfer+0x636>
 8007d7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d82:	3301      	adds	r3, #1
 8007d84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	029b      	lsls	r3, r3, #10
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d9e:	801a      	strh	r2, [r3, #0]
 8007da0:	e02a      	b.n	8007df8 <USB_EPStartXfer+0x6a6>
 8007da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	785b      	ldrb	r3, [r3, #1]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d122      	bne.n	8007df8 <USB_EPStartXfer+0x6a6>
 8007db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	653b      	str	r3, [r7, #80]	; 0x50
 8007dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	461a      	mov	r2, r3
 8007dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dd2:	4413      	add	r3, r2
 8007dd4:	653b      	str	r3, [r7, #80]	; 0x50
 8007dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	00da      	lsls	r2, r3, #3
 8007de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de6:	4413      	add	r3, r2
 8007de8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007dec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	891b      	ldrh	r3, [r3, #8]
 8007e04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6959      	ldr	r1, [r3, #20]
 8007e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007e22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007e26:	6800      	ldr	r0, [r0, #0]
 8007e28:	f001 f97e 	bl	8009128 <USB_WritePMA>
            ep->xfer_buff += len;
 8007e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	695a      	ldr	r2, [r3, #20]
 8007e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e3c:	441a      	add	r2, r3
 8007e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6a1a      	ldr	r2, [r3, #32]
 8007e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d90f      	bls.n	8007e86 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6a1a      	ldr	r2, [r3, #32]
 8007e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e76:	1ad2      	subs	r2, r2, r3
 8007e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	621a      	str	r2, [r3, #32]
 8007e84:	e00e      	b.n	8007ea4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	643b      	str	r3, [r7, #64]	; 0x40
 8007eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d177      	bne.n	8007fb0 <USB_EPStartXfer+0x85e>
 8007ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	461a      	mov	r2, r3
 8007ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee0:	4413      	add	r3, r2
 8007ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	00da      	lsls	r2, r3, #3
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007efa:	637b      	str	r3, [r7, #52]	; 0x34
 8007efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0a:	801a      	strh	r2, [r3, #0]
 8007f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f10:	2b3e      	cmp	r3, #62	; 0x3e
 8007f12:	d921      	bls.n	8007f58 <USB_EPStartXfer+0x806>
 8007f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f18:	095b      	lsrs	r3, r3, #5
 8007f1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f22:	f003 031f 	and.w	r3, r3, #31
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d104      	bne.n	8007f34 <USB_EPStartXfer+0x7e2>
 8007f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	029b      	lsls	r3, r3, #10
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	4313      	orrs	r3, r2
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f54:	801a      	strh	r2, [r3, #0]
 8007f56:	e050      	b.n	8007ffa <USB_EPStartXfer+0x8a8>
 8007f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <USB_EPStartXfer+0x824>
 8007f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f72:	801a      	strh	r2, [r3, #0]
 8007f74:	e041      	b.n	8007ffa <USB_EPStartXfer+0x8a8>
 8007f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f7a:	085b      	lsrs	r3, r3, #1
 8007f7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d004      	beq.n	8007f96 <USB_EPStartXfer+0x844>
 8007f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f90:	3301      	adds	r3, #1
 8007f92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	029b      	lsls	r3, r3, #10
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fac:	801a      	strh	r2, [r3, #0]
 8007fae:	e024      	b.n	8007ffa <USB_EPStartXfer+0x8a8>
 8007fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	785b      	ldrb	r3, [r3, #1]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d11c      	bne.n	8007ffa <USB_EPStartXfer+0x8a8>
 8007fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fd4:	4413      	add	r3, r2
 8007fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8007fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	00da      	lsls	r2, r3, #3
 8007fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fe8:	4413      	add	r3, r2
 8007fea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	895b      	ldrh	r3, [r3, #10]
 8008006:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800800a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800800e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6959      	ldr	r1, [r3, #20]
 8008016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800801a:	b29b      	uxth	r3, r3
 800801c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008020:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008024:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008028:	6800      	ldr	r0, [r0, #0]
 800802a:	f001 f87d 	bl	8009128 <USB_WritePMA>
 800802e:	e227      	b.n	8008480 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800804e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008066:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800806a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	441a      	add	r2, r3
 8008084:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800808c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008098:	b29b      	uxth	r3, r3
 800809a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800809c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	461a      	mov	r2, r3
 80080ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080bc:	4413      	add	r3, r2
 80080be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	00da      	lsls	r2, r3, #3
 80080ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080d0:	4413      	add	r3, r2
 80080d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80080d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080dc:	b29a      	uxth	r2, r3
 80080de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	891b      	ldrh	r3, [r3, #8]
 80080ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6959      	ldr	r1, [r3, #20]
 80080fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008102:	b29b      	uxth	r3, r3
 8008104:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008108:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800810c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008110:	6800      	ldr	r0, [r0, #0]
 8008112:	f001 f809 	bl	8009128 <USB_WritePMA>
 8008116:	e1b3      	b.n	8008480 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6a1a      	ldr	r2, [r3, #32]
 8008124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008128:	1ad2      	subs	r2, r2, r3
 800812a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800812e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b29b      	uxth	r3, r3
 8008154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 80c6 	beq.w	80082ea <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800815e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	673b      	str	r3, [r7, #112]	; 0x70
 800816a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	785b      	ldrb	r3, [r3, #1]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d177      	bne.n	800826a <USB_EPStartXfer+0xb18>
 800817a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800817e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	66bb      	str	r3, [r7, #104]	; 0x68
 8008186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800818a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008194:	b29b      	uxth	r3, r3
 8008196:	461a      	mov	r2, r3
 8008198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800819a:	4413      	add	r3, r2
 800819c:	66bb      	str	r3, [r7, #104]	; 0x68
 800819e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	00da      	lsls	r2, r3, #3
 80081ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081ae:	4413      	add	r3, r2
 80081b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081b4:	667b      	str	r3, [r7, #100]	; 0x64
 80081b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081c4:	801a      	strh	r2, [r3, #0]
 80081c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ca:	2b3e      	cmp	r3, #62	; 0x3e
 80081cc:	d921      	bls.n	8008212 <USB_EPStartXfer+0xac0>
 80081ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d2:	095b      	lsrs	r3, r3, #5
 80081d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80081d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081dc:	f003 031f 	and.w	r3, r3, #31
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d104      	bne.n	80081ee <USB_EPStartXfer+0xa9c>
 80081e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80081e8:	3b01      	subs	r3, #1
 80081ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80081ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	029b      	lsls	r3, r3, #10
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	4313      	orrs	r3, r2
 8008200:	b29b      	uxth	r3, r3
 8008202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820a:	b29a      	uxth	r2, r3
 800820c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800820e:	801a      	strh	r2, [r3, #0]
 8008210:	e050      	b.n	80082b4 <USB_EPStartXfer+0xb62>
 8008212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10a      	bne.n	8008230 <USB_EPStartXfer+0xade>
 800821a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008228:	b29a      	uxth	r2, r3
 800822a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800822c:	801a      	strh	r2, [r3, #0]
 800822e:	e041      	b.n	80082b4 <USB_EPStartXfer+0xb62>
 8008230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008234:	085b      	lsrs	r3, r3, #1
 8008236:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800823a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <USB_EPStartXfer+0xafe>
 8008246:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800824a:	3301      	adds	r3, #1
 800824c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	b29a      	uxth	r2, r3
 8008256:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800825a:	b29b      	uxth	r3, r3
 800825c:	029b      	lsls	r3, r3, #10
 800825e:	b29b      	uxth	r3, r3
 8008260:	4313      	orrs	r3, r2
 8008262:	b29a      	uxth	r2, r3
 8008264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008266:	801a      	strh	r2, [r3, #0]
 8008268:	e024      	b.n	80082b4 <USB_EPStartXfer+0xb62>
 800826a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800826e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	785b      	ldrb	r3, [r3, #1]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d11c      	bne.n	80082b4 <USB_EPStartXfer+0xb62>
 800827a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008288:	b29b      	uxth	r3, r3
 800828a:	461a      	mov	r2, r3
 800828c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800828e:	4413      	add	r3, r2
 8008290:	673b      	str	r3, [r7, #112]	; 0x70
 8008292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	00da      	lsls	r2, r3, #3
 80082a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082a2:	4413      	add	r3, r2
 80082a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80082b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	895b      	ldrh	r3, [r3, #10]
 80082c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6959      	ldr	r1, [r3, #20]
 80082d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80082da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80082de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80082e2:	6800      	ldr	r0, [r0, #0]
 80082e4:	f000 ff20 	bl	8009128 <USB_WritePMA>
 80082e8:	e0ca      	b.n	8008480 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	785b      	ldrb	r3, [r3, #1]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d177      	bne.n	80083ea <USB_EPStartXfer+0xc98>
 80082fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008314:	b29b      	uxth	r3, r3
 8008316:	461a      	mov	r2, r3
 8008318:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800831a:	4413      	add	r3, r2
 800831c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800831e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	00da      	lsls	r2, r3, #3
 800832c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800832e:	4413      	add	r3, r2
 8008330:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008334:	67bb      	str	r3, [r7, #120]	; 0x78
 8008336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	b29b      	uxth	r3, r3
 800833c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008340:	b29a      	uxth	r2, r3
 8008342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008344:	801a      	strh	r2, [r3, #0]
 8008346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800834a:	2b3e      	cmp	r3, #62	; 0x3e
 800834c:	d921      	bls.n	8008392 <USB_EPStartXfer+0xc40>
 800834e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008352:	095b      	lsrs	r3, r3, #5
 8008354:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800835c:	f003 031f 	and.w	r3, r3, #31
 8008360:	2b00      	cmp	r3, #0
 8008362:	d104      	bne.n	800836e <USB_EPStartXfer+0xc1c>
 8008364:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008368:	3b01      	subs	r3, #1
 800836a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800836e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	b29a      	uxth	r2, r3
 8008374:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008378:	b29b      	uxth	r3, r3
 800837a:	029b      	lsls	r3, r3, #10
 800837c:	b29b      	uxth	r3, r3
 800837e:	4313      	orrs	r3, r2
 8008380:	b29b      	uxth	r3, r3
 8008382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800838a:	b29a      	uxth	r2, r3
 800838c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800838e:	801a      	strh	r2, [r3, #0]
 8008390:	e05c      	b.n	800844c <USB_EPStartXfer+0xcfa>
 8008392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10a      	bne.n	80083b0 <USB_EPStartXfer+0xc5e>
 800839a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ac:	801a      	strh	r2, [r3, #0]
 80083ae:	e04d      	b.n	800844c <USB_EPStartXfer+0xcfa>
 80083b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083b4:	085b      	lsrs	r3, r3, #1
 80083b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80083ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d004      	beq.n	80083d0 <USB_EPStartXfer+0xc7e>
 80083c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80083ca:	3301      	adds	r3, #1
 80083cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80083d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80083da:	b29b      	uxth	r3, r3
 80083dc:	029b      	lsls	r3, r3, #10
 80083de:	b29b      	uxth	r3, r3
 80083e0:	4313      	orrs	r3, r2
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083e6:	801a      	strh	r2, [r3, #0]
 80083e8:	e030      	b.n	800844c <USB_EPStartXfer+0xcfa>
 80083ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	785b      	ldrb	r3, [r3, #1]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d128      	bne.n	800844c <USB_EPStartXfer+0xcfa>
 80083fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800840c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008416:	b29b      	uxth	r3, r3
 8008418:	461a      	mov	r2, r3
 800841a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800841e:	4413      	add	r3, r2
 8008420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	00da      	lsls	r2, r3, #3
 8008432:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008436:	4413      	add	r3, r2
 8008438:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800843c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008444:	b29a      	uxth	r2, r3
 8008446:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800844a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800844c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	891b      	ldrh	r3, [r3, #8]
 8008458:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800845c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6959      	ldr	r1, [r3, #20]
 8008468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800846c:	b29b      	uxth	r3, r3
 800846e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008472:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008476:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800847a:	6800      	ldr	r0, [r0, #0]
 800847c:	f000 fe54 	bl	8009128 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800848e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	b29b      	uxth	r3, r3
 800849e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084a6:	817b      	strh	r3, [r7, #10]
 80084a8:	897b      	ldrh	r3, [r7, #10]
 80084aa:	f083 0310 	eor.w	r3, r3, #16
 80084ae:	817b      	strh	r3, [r7, #10]
 80084b0:	897b      	ldrh	r3, [r7, #10]
 80084b2:	f083 0320 	eor.w	r3, r3, #32
 80084b6:	817b      	strh	r3, [r7, #10]
 80084b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	441a      	add	r2, r3
 80084d2:	897b      	ldrh	r3, [r7, #10]
 80084d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	8013      	strh	r3, [r2, #0]
 80084e8:	f000 bcde 	b.w	8008ea8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80084ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	7b1b      	ldrb	r3, [r3, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f040 80bb 	bne.w	8008674 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80084fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	699a      	ldr	r2, [r3, #24]
 800850a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	429a      	cmp	r2, r3
 8008518:	d917      	bls.n	800854a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800851a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800852a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800852e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699a      	ldr	r2, [r3, #24]
 8008536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800853a:	1ad2      	subs	r2, r2, r3
 800853c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	619a      	str	r2, [r3, #24]
 8008548:	e00e      	b.n	8008568 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800854a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800854e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800855a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2200      	movs	r2, #0
 8008566:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800856c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800857a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008584:	b29b      	uxth	r3, r3
 8008586:	461a      	mov	r2, r3
 8008588:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800858c:	4413      	add	r3, r2
 800858e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	00da      	lsls	r2, r3, #3
 80085a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085a4:	4413      	add	r3, r2
 80085a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80085ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085c0:	801a      	strh	r2, [r3, #0]
 80085c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c6:	2b3e      	cmp	r3, #62	; 0x3e
 80085c8:	d924      	bls.n	8008614 <USB_EPStartXfer+0xec2>
 80085ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ce:	095b      	lsrs	r3, r3, #5
 80085d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d8:	f003 031f 	and.w	r3, r3, #31
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d104      	bne.n	80085ea <USB_EPStartXfer+0xe98>
 80085e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085e4:	3b01      	subs	r3, #1
 80085e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	029b      	lsls	r3, r3, #10
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	4313      	orrs	r3, r2
 80085fe:	b29b      	uxth	r3, r3
 8008600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008608:	b29a      	uxth	r2, r3
 800860a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800860e:	801a      	strh	r2, [r3, #0]
 8008610:	f000 bc10 	b.w	8008e34 <USB_EPStartXfer+0x16e2>
 8008614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10c      	bne.n	8008636 <USB_EPStartXfer+0xee4>
 800861c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	b29b      	uxth	r3, r3
 8008624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800862c:	b29a      	uxth	r2, r3
 800862e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008632:	801a      	strh	r2, [r3, #0]
 8008634:	e3fe      	b.n	8008e34 <USB_EPStartXfer+0x16e2>
 8008636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800863a:	085b      	lsrs	r3, r3, #1
 800863c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d004      	beq.n	8008656 <USB_EPStartXfer+0xf04>
 800864c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008650:	3301      	adds	r3, #1
 8008652:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	b29a      	uxth	r2, r3
 800865e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008662:	b29b      	uxth	r3, r3
 8008664:	029b      	lsls	r3, r3, #10
 8008666:	b29b      	uxth	r3, r3
 8008668:	4313      	orrs	r3, r2
 800866a:	b29a      	uxth	r2, r3
 800866c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008670:	801a      	strh	r2, [r3, #0]
 8008672:	e3df      	b.n	8008e34 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	78db      	ldrb	r3, [r3, #3]
 8008680:	2b02      	cmp	r3, #2
 8008682:	f040 8218 	bne.w	8008ab6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	785b      	ldrb	r3, [r3, #1]
 8008692:	2b00      	cmp	r3, #0
 8008694:	f040 809d 	bne.w	80087d2 <USB_EPStartXfer+0x1080>
 8008698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800869c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	461a      	mov	r2, r3
 80086b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086bc:	4413      	add	r3, r2
 80086be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	00da      	lsls	r2, r3, #3
 80086d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086d4:	4413      	add	r3, r2
 80086d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80086da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80086de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086f0:	801a      	strh	r2, [r3, #0]
 80086f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b3e      	cmp	r3, #62	; 0x3e
 8008700:	d92b      	bls.n	800875a <USB_EPStartXfer+0x1008>
 8008702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	095b      	lsrs	r3, r3, #5
 8008710:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	f003 031f 	and.w	r3, r3, #31
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <USB_EPStartXfer+0xfe0>
 8008728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872c:	3b01      	subs	r3, #1
 800872e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008732:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	b29a      	uxth	r2, r3
 800873a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800873e:	b29b      	uxth	r3, r3
 8008740:	029b      	lsls	r3, r3, #10
 8008742:	b29b      	uxth	r3, r3
 8008744:	4313      	orrs	r3, r2
 8008746:	b29b      	uxth	r3, r3
 8008748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800874c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008750:	b29a      	uxth	r2, r3
 8008752:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008756:	801a      	strh	r2, [r3, #0]
 8008758:	e070      	b.n	800883c <USB_EPStartXfer+0x10ea>
 800875a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800875e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10c      	bne.n	8008784 <USB_EPStartXfer+0x1032>
 800876a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	b29b      	uxth	r3, r3
 8008772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800877a:	b29a      	uxth	r2, r3
 800877c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008780:	801a      	strh	r2, [r3, #0]
 8008782:	e05b      	b.n	800883c <USB_EPStartXfer+0x10ea>
 8008784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	085b      	lsrs	r3, r3, #1
 8008792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d004      	beq.n	80087b4 <USB_EPStartXfer+0x1062>
 80087aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ae:	3301      	adds	r3, #1
 80087b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	029b      	lsls	r3, r3, #10
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	4313      	orrs	r3, r2
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087ce:	801a      	strh	r2, [r3, #0]
 80087d0:	e034      	b.n	800883c <USB_EPStartXfer+0x10ea>
 80087d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	785b      	ldrb	r3, [r3, #1]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d12c      	bne.n	800883c <USB_EPStartXfer+0x10ea>
 80087e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087fe:	b29b      	uxth	r3, r3
 8008800:	461a      	mov	r2, r3
 8008802:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008806:	4413      	add	r3, r2
 8008808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800880c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	00da      	lsls	r2, r3, #3
 800881a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800881e:	4413      	add	r3, r2
 8008820:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800882c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	b29a      	uxth	r2, r3
 8008836:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800883a:	801a      	strh	r2, [r3, #0]
 800883c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800884a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	785b      	ldrb	r3, [r3, #1]
 8008856:	2b00      	cmp	r3, #0
 8008858:	f040 809d 	bne.w	8008996 <USB_EPStartXfer+0x1244>
 800885c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800886a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800886e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008878:	b29b      	uxth	r3, r3
 800887a:	461a      	mov	r2, r3
 800887c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008880:	4413      	add	r3, r2
 8008882:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800888a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	00da      	lsls	r2, r3, #3
 8008894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008898:	4413      	add	r3, r2
 800889a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800889e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088b4:	801a      	strh	r2, [r3, #0]
 80088b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2b3e      	cmp	r3, #62	; 0x3e
 80088c4:	d92b      	bls.n	800891e <USB_EPStartXfer+0x11cc>
 80088c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	095b      	lsrs	r3, r3, #5
 80088d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	f003 031f 	and.w	r3, r3, #31
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d104      	bne.n	80088f6 <USB_EPStartXfer+0x11a4>
 80088ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088f0:	3b01      	subs	r3, #1
 80088f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008902:	b29b      	uxth	r3, r3
 8008904:	029b      	lsls	r3, r3, #10
 8008906:	b29b      	uxth	r3, r3
 8008908:	4313      	orrs	r3, r2
 800890a:	b29b      	uxth	r3, r3
 800890c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008914:	b29a      	uxth	r2, r3
 8008916:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800891a:	801a      	strh	r2, [r3, #0]
 800891c:	e069      	b.n	80089f2 <USB_EPStartXfer+0x12a0>
 800891e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10c      	bne.n	8008948 <USB_EPStartXfer+0x11f6>
 800892e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008932:	881b      	ldrh	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800893a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800893e:	b29a      	uxth	r2, r3
 8008940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008944:	801a      	strh	r2, [r3, #0]
 8008946:	e054      	b.n	80089f2 <USB_EPStartXfer+0x12a0>
 8008948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	085b      	lsrs	r3, r3, #1
 8008956:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800895a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800895e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	2b00      	cmp	r3, #0
 800896c:	d004      	beq.n	8008978 <USB_EPStartXfer+0x1226>
 800896e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008972:	3301      	adds	r3, #1
 8008974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29a      	uxth	r2, r3
 8008980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008984:	b29b      	uxth	r3, r3
 8008986:	029b      	lsls	r3, r3, #10
 8008988:	b29b      	uxth	r3, r3
 800898a:	4313      	orrs	r3, r2
 800898c:	b29a      	uxth	r2, r3
 800898e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008992:	801a      	strh	r2, [r3, #0]
 8008994:	e02d      	b.n	80089f2 <USB_EPStartXfer+0x12a0>
 8008996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800899a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d125      	bne.n	80089f2 <USB_EPStartXfer+0x12a0>
 80089a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	461a      	mov	r2, r3
 80089b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089bc:	4413      	add	r3, r2
 80089be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80089c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	00da      	lsls	r2, r3, #3
 80089d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089d4:	4413      	add	r3, r2
 80089d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089f0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80089f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f000 8218 	beq.w	8008e34 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4413      	add	r3, r2
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a24:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <USB_EPStartXfer+0x12ea>
 8008a30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10d      	bne.n	8008a58 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f040 81f5 	bne.w	8008e34 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f040 81ee 	bne.w	8008e34 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	441a      	add	r2, r3
 8008a9c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	8013      	strh	r3, [r2, #0]
 8008ab4:	e1be      	b.n	8008e34 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	78db      	ldrb	r3, [r3, #3]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	f040 81b4 	bne.w	8008e30 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	699a      	ldr	r2, [r3, #24]
 8008ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d917      	bls.n	8008b14 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	699a      	ldr	r2, [r3, #24]
 8008b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b04:	1ad2      	subs	r2, r2, r3
 8008b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	619a      	str	r2, [r3, #24]
 8008b12:	e00e      	b.n	8008b32 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	785b      	ldrb	r3, [r3, #1]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f040 8085 	bne.w	8008c4e <USB_EPStartXfer+0x14fc>
 8008b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	461a      	mov	r2, r3
 8008b64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b68:	4413      	add	r3, r2
 8008b6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	00da      	lsls	r2, r3, #3
 8008b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b80:	4413      	add	r3, r2
 8008b82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b9c:	801a      	strh	r2, [r3, #0]
 8008b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba2:	2b3e      	cmp	r3, #62	; 0x3e
 8008ba4:	d923      	bls.n	8008bee <USB_EPStartXfer+0x149c>
 8008ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008baa:	095b      	lsrs	r3, r3, #5
 8008bac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb4:	f003 031f 	and.w	r3, r3, #31
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d104      	bne.n	8008bc6 <USB_EPStartXfer+0x1474>
 8008bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008bc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	029b      	lsls	r3, r3, #10
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bea:	801a      	strh	r2, [r3, #0]
 8008bec:	e060      	b.n	8008cb0 <USB_EPStartXfer+0x155e>
 8008bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10c      	bne.n	8008c10 <USB_EPStartXfer+0x14be>
 8008bf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c0c:	801a      	strh	r2, [r3, #0]
 8008c0e:	e04f      	b.n	8008cb0 <USB_EPStartXfer+0x155e>
 8008c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c14:	085b      	lsrs	r3, r3, #1
 8008c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d004      	beq.n	8008c30 <USB_EPStartXfer+0x14de>
 8008c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	029b      	lsls	r3, r3, #10
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	4313      	orrs	r3, r2
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c4a:	801a      	strh	r2, [r3, #0]
 8008c4c:	e030      	b.n	8008cb0 <USB_EPStartXfer+0x155e>
 8008c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	785b      	ldrb	r3, [r3, #1]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d128      	bne.n	8008cb0 <USB_EPStartXfer+0x155e>
 8008c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c82:	4413      	add	r3, r2
 8008c84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	00da      	lsls	r2, r3, #3
 8008c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008cae:	801a      	strh	r2, [r3, #0]
 8008cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	785b      	ldrb	r3, [r3, #1]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f040 8085 	bne.w	8008dda <USB_EPStartXfer+0x1688>
 8008cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	00da      	lsls	r2, r3, #3
 8008d08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d28:	801a      	strh	r2, [r3, #0]
 8008d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d2e:	2b3e      	cmp	r3, #62	; 0x3e
 8008d30:	d923      	bls.n	8008d7a <USB_EPStartXfer+0x1628>
 8008d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d36:	095b      	lsrs	r3, r3, #5
 8008d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d40:	f003 031f 	and.w	r3, r3, #31
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d104      	bne.n	8008d52 <USB_EPStartXfer+0x1600>
 8008d48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	029b      	lsls	r3, r3, #10
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	4313      	orrs	r3, r2
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d76:	801a      	strh	r2, [r3, #0]
 8008d78:	e05c      	b.n	8008e34 <USB_EPStartXfer+0x16e2>
 8008d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10c      	bne.n	8008d9c <USB_EPStartXfer+0x164a>
 8008d82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d98:	801a      	strh	r2, [r3, #0]
 8008d9a:	e04b      	b.n	8008e34 <USB_EPStartXfer+0x16e2>
 8008d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008da0:	085b      	lsrs	r3, r3, #1
 8008da2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d004      	beq.n	8008dbc <USB_EPStartXfer+0x166a>
 8008db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008db6:	3301      	adds	r3, #1
 8008db8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008dbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	029b      	lsls	r3, r3, #10
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008dd6:	801a      	strh	r2, [r3, #0]
 8008dd8:	e02c      	b.n	8008e34 <USB_EPStartXfer+0x16e2>
 8008dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	785b      	ldrb	r3, [r3, #1]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d124      	bne.n	8008e34 <USB_EPStartXfer+0x16e2>
 8008dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e00:	4413      	add	r3, r2
 8008e02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	00da      	lsls	r2, r3, #3
 8008e14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e18:	4413      	add	r3, r2
 8008e1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e2c:	801a      	strh	r2, [r3, #0]
 8008e2e:	e001      	b.n	8008e34 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e03a      	b.n	8008eaa <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4413      	add	r3, r2
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e5a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008e5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008e62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008e6a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008e6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e72:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	441a      	add	r2, r3
 8008e90:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	785b      	ldrb	r3, [r3, #1]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d020      	beq.n	8008f08 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008edc:	81bb      	strh	r3, [r7, #12]
 8008ede:	89bb      	ldrh	r3, [r7, #12]
 8008ee0:	f083 0310 	eor.w	r3, r3, #16
 8008ee4:	81bb      	strh	r3, [r7, #12]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	441a      	add	r2, r3
 8008ef0:	89bb      	ldrh	r3, [r7, #12]
 8008ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	8013      	strh	r3, [r2, #0]
 8008f06:	e01f      	b.n	8008f48 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f1e:	81fb      	strh	r3, [r7, #14]
 8008f20:	89fb      	ldrh	r3, [r7, #14]
 8008f22:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f26:	81fb      	strh	r3, [r7, #14]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	441a      	add	r2, r3
 8008f32:	89fb      	ldrh	r3, [r7, #14]
 8008f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b087      	sub	sp, #28
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	7b1b      	ldrb	r3, [r3, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f040 809d 	bne.w	80090a4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	785b      	ldrb	r3, [r3, #1]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d04c      	beq.n	800900c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	823b      	strh	r3, [r7, #16]
 8008f80:	8a3b      	ldrh	r3, [r7, #16]
 8008f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d01b      	beq.n	8008fc2 <USB_EPClearStall+0x6c>
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	4413      	add	r3, r2
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fa0:	81fb      	strh	r3, [r7, #14]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	441a      	add	r2, r3
 8008fac:	89fb      	ldrh	r3, [r7, #14]
 8008fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	78db      	ldrb	r3, [r3, #3]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d06c      	beq.n	80090a4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fe0:	81bb      	strh	r3, [r7, #12]
 8008fe2:	89bb      	ldrh	r3, [r7, #12]
 8008fe4:	f083 0320 	eor.w	r3, r3, #32
 8008fe8:	81bb      	strh	r3, [r7, #12]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	441a      	add	r2, r3
 8008ff4:	89bb      	ldrh	r3, [r7, #12]
 8008ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009006:	b29b      	uxth	r3, r3
 8009008:	8013      	strh	r3, [r2, #0]
 800900a:	e04b      	b.n	80090a4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	82fb      	strh	r3, [r7, #22]
 800901a:	8afb      	ldrh	r3, [r7, #22]
 800901c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d01b      	beq.n	800905c <USB_EPClearStall+0x106>
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	881b      	ldrh	r3, [r3, #0]
 8009030:	b29b      	uxth	r3, r3
 8009032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800903a:	82bb      	strh	r3, [r7, #20]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	441a      	add	r2, r3
 8009046:	8abb      	ldrh	r3, [r7, #20]
 8009048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800904c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009058:	b29b      	uxth	r3, r3
 800905a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4413      	add	r3, r2
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	b29b      	uxth	r3, r3
 800906a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800906e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009072:	827b      	strh	r3, [r7, #18]
 8009074:	8a7b      	ldrh	r3, [r7, #18]
 8009076:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800907a:	827b      	strh	r3, [r7, #18]
 800907c:	8a7b      	ldrh	r3, [r7, #18]
 800907e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009082:	827b      	strh	r3, [r7, #18]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	441a      	add	r2, r3
 800908e:	8a7b      	ldrh	r3, [r7, #18]
 8009090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800909c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	371c      	adds	r7, #28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b083      	sub	sp, #12
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	460b      	mov	r3, r1
 80090bc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80090be:	78fb      	ldrb	r3, [r7, #3]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d103      	bne.n	80090cc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2280      	movs	r2, #128	; 0x80
 80090c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80090da:	b480      	push	{r7}
 80090dc:	b083      	sub	sp, #12
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009116:	b29b      	uxth	r3, r3
 8009118:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800911a:	68fb      	ldr	r3, [r7, #12]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009128:	b480      	push	{r7}
 800912a:	b08b      	sub	sp, #44	; 0x2c
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	4611      	mov	r1, r2
 8009134:	461a      	mov	r2, r3
 8009136:	460b      	mov	r3, r1
 8009138:	80fb      	strh	r3, [r7, #6]
 800913a:	4613      	mov	r3, r2
 800913c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800913e:	88bb      	ldrh	r3, [r7, #4]
 8009140:	3301      	adds	r3, #1
 8009142:	085b      	lsrs	r3, r3, #1
 8009144:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800914e:	88fa      	ldrh	r2, [r7, #6]
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009158:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	627b      	str	r3, [r7, #36]	; 0x24
 800915e:	e01b      	b.n	8009198 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	3301      	adds	r3, #1
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	021b      	lsls	r3, r3, #8
 800916e:	b21a      	sxth	r2, r3
 8009170:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009174:	4313      	orrs	r3, r2
 8009176:	b21b      	sxth	r3, r3
 8009178:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	8a7a      	ldrh	r2, [r7, #18]
 800917e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	3302      	adds	r3, #2
 8009184:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	3301      	adds	r3, #1
 800918a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	3301      	adds	r3, #1
 8009190:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	3b01      	subs	r3, #1
 8009196:	627b      	str	r3, [r7, #36]	; 0x24
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e0      	bne.n	8009160 <USB_WritePMA+0x38>
  }
}
 800919e:	bf00      	nop
 80091a0:	bf00      	nop
 80091a2:	372c      	adds	r7, #44	; 0x2c
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b08b      	sub	sp, #44	; 0x2c
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	4611      	mov	r1, r2
 80091b8:	461a      	mov	r2, r3
 80091ba:	460b      	mov	r3, r1
 80091bc:	80fb      	strh	r3, [r7, #6]
 80091be:	4613      	mov	r3, r2
 80091c0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80091c2:	88bb      	ldrh	r3, [r7, #4]
 80091c4:	085b      	lsrs	r3, r3, #1
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091d2:	88fa      	ldrh	r2, [r7, #6]
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091dc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	627b      	str	r3, [r7, #36]	; 0x24
 80091e2:	e018      	b.n	8009216 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	3302      	adds	r3, #2
 80091f0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	3301      	adds	r3, #1
 80091fe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	0a1b      	lsrs	r3, r3, #8
 8009204:	b2da      	uxtb	r2, r3
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	3301      	adds	r3, #1
 800920e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	3b01      	subs	r3, #1
 8009214:	627b      	str	r3, [r7, #36]	; 0x24
 8009216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e3      	bne.n	80091e4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800921c:	88bb      	ldrh	r3, [r7, #4]
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	b29b      	uxth	r3, r3
 8009224:	2b00      	cmp	r3, #0
 8009226:	d007      	beq.n	8009238 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009228:	6a3b      	ldr	r3, [r7, #32]
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
 800922e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	b2da      	uxtb	r2, r3
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	701a      	strb	r2, [r3, #0]
  }
}
 8009238:	bf00      	nop
 800923a:	372c      	adds	r7, #44	; 0x2c
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009250:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009254:	f002 f94a 	bl	800b4ec <USBD_static_malloc>
 8009258:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d105      	bne.n	800926c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009268:	2302      	movs	r3, #2
 800926a:	e066      	b.n	800933a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	7c1b      	ldrb	r3, [r3, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d119      	bne.n	80092b0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800927c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009280:	2202      	movs	r2, #2
 8009282:	2181      	movs	r1, #129	; 0x81
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f001 ffd8 	bl	800b23a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009294:	2202      	movs	r2, #2
 8009296:	2101      	movs	r1, #1
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f001 ffce 	bl	800b23a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2210      	movs	r2, #16
 80092aa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80092ae:	e016      	b.n	80092de <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80092b0:	2340      	movs	r3, #64	; 0x40
 80092b2:	2202      	movs	r2, #2
 80092b4:	2181      	movs	r1, #129	; 0x81
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f001 ffbf 	bl	800b23a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80092c2:	2340      	movs	r3, #64	; 0x40
 80092c4:	2202      	movs	r2, #2
 80092c6:	2101      	movs	r1, #1
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 ffb6 	bl	800b23a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2210      	movs	r2, #16
 80092da:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80092de:	2308      	movs	r3, #8
 80092e0:	2203      	movs	r2, #3
 80092e2:	2182      	movs	r1, #130	; 0x82
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f001 ffa8 	bl	800b23a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	7c1b      	ldrb	r3, [r3, #16]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d109      	bne.n	8009328 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800931a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800931e:	2101      	movs	r1, #1
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f002 f879 	bl	800b418 <USBD_LL_PrepareReceive>
 8009326:	e007      	b.n	8009338 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800932e:	2340      	movs	r3, #64	; 0x40
 8009330:	2101      	movs	r1, #1
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f002 f870 	bl	800b418 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	460b      	mov	r3, r1
 800934c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800934e:	2181      	movs	r1, #129	; 0x81
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 ff98 	bl	800b286 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800935c:	2101      	movs	r1, #1
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f001 ff91 	bl	800b286 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800936c:	2182      	movs	r1, #130	; 0x82
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f001 ff89 	bl	800b286 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00e      	beq.n	80093ac <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800939e:	4618      	mov	r0, r3
 80093a0:	f002 f8b2 	bl	800b508 <USBD_static_free>
    pdev->pClassData = NULL;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
	...

080093b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80093dc:	2303      	movs	r3, #3
 80093de:	e0af      	b.n	8009540 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d03f      	beq.n	800946c <USBD_CDC_Setup+0xb4>
 80093ec:	2b20      	cmp	r3, #32
 80093ee:	f040 809f 	bne.w	8009530 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	88db      	ldrh	r3, [r3, #6]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d02e      	beq.n	8009458 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	b25b      	sxtb	r3, r3
 8009400:	2b00      	cmp	r3, #0
 8009402:	da16      	bge.n	8009432 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009410:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	88d2      	ldrh	r2, [r2, #6]
 8009416:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	88db      	ldrh	r3, [r3, #6]
 800941c:	2b07      	cmp	r3, #7
 800941e:	bf28      	it	cs
 8009420:	2307      	movcs	r3, #7
 8009422:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	89fa      	ldrh	r2, [r7, #14]
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f001 fa9f 	bl	800a96e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009430:	e085      	b.n	800953e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	785a      	ldrb	r2, [r3, #1]
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	88db      	ldrh	r3, [r3, #6]
 8009440:	b2da      	uxtb	r2, r3
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009448:	6939      	ldr	r1, [r7, #16]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	88db      	ldrh	r3, [r3, #6]
 800944e:	461a      	mov	r2, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f001 fab8 	bl	800a9c6 <USBD_CtlPrepareRx>
      break;
 8009456:	e072      	b.n	800953e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	7850      	ldrb	r0, [r2, #1]
 8009464:	2200      	movs	r2, #0
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	4798      	blx	r3
      break;
 800946a:	e068      	b.n	800953e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	785b      	ldrb	r3, [r3, #1]
 8009470:	2b0b      	cmp	r3, #11
 8009472:	d852      	bhi.n	800951a <USBD_CDC_Setup+0x162>
 8009474:	a201      	add	r2, pc, #4	; (adr r2, 800947c <USBD_CDC_Setup+0xc4>)
 8009476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947a:	bf00      	nop
 800947c:	080094ad 	.word	0x080094ad
 8009480:	08009529 	.word	0x08009529
 8009484:	0800951b 	.word	0x0800951b
 8009488:	0800951b 	.word	0x0800951b
 800948c:	0800951b 	.word	0x0800951b
 8009490:	0800951b 	.word	0x0800951b
 8009494:	0800951b 	.word	0x0800951b
 8009498:	0800951b 	.word	0x0800951b
 800949c:	0800951b 	.word	0x0800951b
 80094a0:	0800951b 	.word	0x0800951b
 80094a4:	080094d7 	.word	0x080094d7
 80094a8:	08009501 	.word	0x08009501
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d107      	bne.n	80094c8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80094b8:	f107 030a 	add.w	r3, r7, #10
 80094bc:	2202      	movs	r2, #2
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f001 fa54 	bl	800a96e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094c6:	e032      	b.n	800952e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f001 f9de 	bl	800a88c <USBD_CtlError>
            ret = USBD_FAIL;
 80094d0:	2303      	movs	r3, #3
 80094d2:	75fb      	strb	r3, [r7, #23]
          break;
 80094d4:	e02b      	b.n	800952e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d107      	bne.n	80094f2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80094e2:	f107 030d 	add.w	r3, r7, #13
 80094e6:	2201      	movs	r2, #1
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f001 fa3f 	bl	800a96e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094f0:	e01d      	b.n	800952e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f001 f9c9 	bl	800a88c <USBD_CtlError>
            ret = USBD_FAIL;
 80094fa:	2303      	movs	r3, #3
 80094fc:	75fb      	strb	r3, [r7, #23]
          break;
 80094fe:	e016      	b.n	800952e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b03      	cmp	r3, #3
 800950a:	d00f      	beq.n	800952c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f001 f9bc 	bl	800a88c <USBD_CtlError>
            ret = USBD_FAIL;
 8009514:	2303      	movs	r3, #3
 8009516:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009518:	e008      	b.n	800952c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 f9b5 	bl	800a88c <USBD_CtlError>
          ret = USBD_FAIL;
 8009522:	2303      	movs	r3, #3
 8009524:	75fb      	strb	r3, [r7, #23]
          break;
 8009526:	e002      	b.n	800952e <USBD_CDC_Setup+0x176>
          break;
 8009528:	bf00      	nop
 800952a:	e008      	b.n	800953e <USBD_CDC_Setup+0x186>
          break;
 800952c:	bf00      	nop
      }
      break;
 800952e:	e006      	b.n	800953e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f001 f9aa 	bl	800a88c <USBD_CtlError>
      ret = USBD_FAIL;
 8009538:	2303      	movs	r3, #3
 800953a:	75fb      	strb	r3, [r7, #23]
      break;
 800953c:	bf00      	nop
  }

  return (uint8_t)ret;
 800953e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3718      	adds	r7, #24
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800955a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009562:	2b00      	cmp	r3, #0
 8009564:	d101      	bne.n	800956a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009566:	2303      	movs	r3, #3
 8009568:	e04f      	b.n	800960a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009570:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009572:	78fa      	ldrb	r2, [r7, #3]
 8009574:	6879      	ldr	r1, [r7, #4]
 8009576:	4613      	mov	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	440b      	add	r3, r1
 8009580:	3318      	adds	r3, #24
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d029      	beq.n	80095dc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009588:	78fa      	ldrb	r2, [r7, #3]
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	4613      	mov	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	440b      	add	r3, r1
 8009596:	3318      	adds	r3, #24
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	78f9      	ldrb	r1, [r7, #3]
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	460b      	mov	r3, r1
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	440b      	add	r3, r1
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	4403      	add	r3, r0
 80095a8:	3320      	adds	r3, #32
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80095b0:	fb01 f303 	mul.w	r3, r1, r3
 80095b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d110      	bne.n	80095dc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80095ba:	78fa      	ldrb	r2, [r7, #3]
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	440b      	add	r3, r1
 80095c8:	3318      	adds	r3, #24
 80095ca:	2200      	movs	r2, #0
 80095cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80095ce:	78f9      	ldrb	r1, [r7, #3]
 80095d0:	2300      	movs	r3, #0
 80095d2:	2200      	movs	r2, #0
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 fefe 	bl	800b3d6 <USBD_LL_Transmit>
 80095da:	e015      	b.n	8009608 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	2200      	movs	r2, #0
 80095e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00b      	beq.n	8009608 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009604:	78fa      	ldrb	r2, [r7, #3]
 8009606:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	460b      	mov	r3, r1
 800961c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009624:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800962c:	2b00      	cmp	r3, #0
 800962e:	d101      	bne.n	8009634 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009630:	2303      	movs	r3, #3
 8009632:	e015      	b.n	8009660 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f001 ff0e 	bl	800b45a <USBD_LL_GetRxDataSize>
 800963e:	4602      	mov	r2, r0
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800965a:	4611      	mov	r1, r2
 800965c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009676:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800967e:	2303      	movs	r3, #3
 8009680:	e01b      	b.n	80096ba <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d015      	beq.n	80096b8 <USBD_CDC_EP0_RxReady+0x50>
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009692:	2bff      	cmp	r3, #255	; 0xff
 8009694:	d010      	beq.n	80096b8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80096a4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096ac:	b292      	uxth	r2, r2
 80096ae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	22ff      	movs	r2, #255	; 0xff
 80096b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
	...

080096c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2243      	movs	r2, #67	; 0x43
 80096d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80096d2:	4b03      	ldr	r3, [pc, #12]	; (80096e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	20000094 	.word	0x20000094

080096e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2243      	movs	r2, #67	; 0x43
 80096f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80096f2:	4b03      	ldr	r3, [pc, #12]	; (8009700 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	20000050 	.word	0x20000050

08009704 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2243      	movs	r2, #67	; 0x43
 8009710:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009712:	4b03      	ldr	r3, [pc, #12]	; (8009720 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009714:	4618      	mov	r0, r3
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	200000d8 	.word	0x200000d8

08009724 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	220a      	movs	r2, #10
 8009730:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009732:	4b03      	ldr	r3, [pc, #12]	; (8009740 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009734:	4618      	mov	r0, r3
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	2000000c 	.word	0x2000000c

08009744 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d101      	bne.n	8009758 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009754:	2303      	movs	r3, #3
 8009756:	e004      	b.n	8009762 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800976e:	b480      	push	{r7}
 8009770:	b087      	sub	sp, #28
 8009772:	af00      	add	r7, sp, #0
 8009774:	60f8      	str	r0, [r7, #12]
 8009776:	60b9      	str	r1, [r7, #8]
 8009778:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009780:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009788:	2303      	movs	r3, #3
 800978a:	e008      	b.n	800979e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	371c      	adds	r7, #28
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b085      	sub	sp, #20
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e004      	b.n	80097d0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d101      	bne.n	80097fa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e016      	b.n	8009828 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	7c1b      	ldrb	r3, [r3, #16]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d109      	bne.n	8009816 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800980c:	2101      	movs	r1, #1
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f001 fe02 	bl	800b418 <USBD_LL_PrepareReceive>
 8009814:	e007      	b.n	8009826 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800981c:	2340      	movs	r3, #64	; 0x40
 800981e:	2101      	movs	r1, #1
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f001 fdf9 	bl	800b418 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	4613      	mov	r3, r2
 800983c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009844:	2303      	movs	r3, #3
 8009846:	e01f      	b.n	8009888 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d003      	beq.n	800986e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	79fa      	ldrb	r2, [r7, #7]
 800987a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f001 fc61 	bl	800b144 <USBD_LL_Init>
 8009882:	4603      	mov	r3, r0
 8009884:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009886:	7dfb      	ldrb	r3, [r7, #23]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800989a:	2300      	movs	r3, #0
 800989c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e016      	b.n	80098d6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00b      	beq.n	80098d4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c4:	f107 020e 	add.w	r2, r7, #14
 80098c8:	4610      	mov	r0, r2
 80098ca:	4798      	blx	r3
 80098cc:	4602      	mov	r2, r0
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b082      	sub	sp, #8
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 fc8c 	bl	800b204 <USBD_LL_Start>
 80098ec:	4603      	mov	r3, r0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b083      	sub	sp, #12
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009918:	2303      	movs	r3, #3
 800991a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009922:	2b00      	cmp	r3, #0
 8009924:	d009      	beq.n	800993a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	78fa      	ldrb	r2, [r7, #3]
 8009930:	4611      	mov	r1, r2
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	4798      	blx	r3
 8009936:	4603      	mov	r3, r0
 8009938:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800993a:	7bfb      	ldrb	r3, [r7, #15]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009956:	2b00      	cmp	r3, #0
 8009958:	d007      	beq.n	800996a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	78fa      	ldrb	r2, [r7, #3]
 8009964:	4611      	mov	r1, r2
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	4798      	blx	r3
  }

  return USBD_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	4618      	mov	r0, r3
 8009988:	f000 ff46 	bl	800a818 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800999a:	461a      	mov	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80099a8:	f003 031f 	and.w	r3, r3, #31
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d01a      	beq.n	80099e6 <USBD_LL_SetupStage+0x72>
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d822      	bhi.n	80099fa <USBD_LL_SetupStage+0x86>
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <USBD_LL_SetupStage+0x4a>
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d00a      	beq.n	80099d2 <USBD_LL_SetupStage+0x5e>
 80099bc:	e01d      	b.n	80099fa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80099c4:	4619      	mov	r1, r3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f9ee 	bl	8009da8 <USBD_StdDevReq>
 80099cc:	4603      	mov	r3, r0
 80099ce:	73fb      	strb	r3, [r7, #15]
      break;
 80099d0:	e020      	b.n	8009a14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fa52 	bl	8009e84 <USBD_StdItfReq>
 80099e0:	4603      	mov	r3, r0
 80099e2:	73fb      	strb	r3, [r7, #15]
      break;
 80099e4:	e016      	b.n	8009a14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fa91 	bl	8009f16 <USBD_StdEPReq>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73fb      	strb	r3, [r7, #15]
      break;
 80099f8:	e00c      	b.n	8009a14 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f001 fc5b 	bl	800b2c4 <USBD_LL_StallEP>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	73fb      	strb	r3, [r7, #15]
      break;
 8009a12:	bf00      	nop
  }

  return ret;
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b086      	sub	sp, #24
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	60f8      	str	r0, [r7, #12]
 8009a26:	460b      	mov	r3, r1
 8009a28:	607a      	str	r2, [r7, #4]
 8009a2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009a2c:	7afb      	ldrb	r3, [r7, #11]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d138      	bne.n	8009aa4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009a38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	d14a      	bne.n	8009ada <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	689a      	ldr	r2, [r3, #8]
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d913      	bls.n	8009a78 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	1ad2      	subs	r2, r2, r3
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	68da      	ldr	r2, [r3, #12]
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	4293      	cmp	r3, r2
 8009a68:	bf28      	it	cs
 8009a6a:	4613      	movcs	r3, r2
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	6879      	ldr	r1, [r7, #4]
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f000 ffc5 	bl	800aa00 <USBD_CtlContinueRx>
 8009a76:	e030      	b.n	8009ada <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b03      	cmp	r3, #3
 8009a82:	d10b      	bne.n	8009a9c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d005      	beq.n	8009a9c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f000 ffc0 	bl	800aa22 <USBD_CtlSendStatus>
 8009aa2:	e01a      	b.n	8009ada <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b03      	cmp	r3, #3
 8009aae:	d114      	bne.n	8009ada <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00e      	beq.n	8009ada <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	7afa      	ldrb	r2, [r7, #11]
 8009ac6:	4611      	mov	r1, r2
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	4798      	blx	r3
 8009acc:	4603      	mov	r3, r0
 8009ace:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009ad0:	7dfb      	ldrb	r3, [r7, #23]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009ad6:	7dfb      	ldrb	r3, [r7, #23]
 8009ad8:	e000      	b.n	8009adc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3718      	adds	r7, #24
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	460b      	mov	r3, r1
 8009aee:	607a      	str	r2, [r7, #4]
 8009af0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009af2:	7afb      	ldrb	r3, [r7, #11]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d16b      	bne.n	8009bd0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	3314      	adds	r3, #20
 8009afc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d156      	bne.n	8009bb6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	689a      	ldr	r2, [r3, #8]
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d914      	bls.n	8009b3e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	689a      	ldr	r2, [r3, #8]
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	1ad2      	subs	r2, r2, r3
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	461a      	mov	r2, r3
 8009b28:	6879      	ldr	r1, [r7, #4]
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f000 ff3a 	bl	800a9a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b30:	2300      	movs	r3, #0
 8009b32:	2200      	movs	r2, #0
 8009b34:	2100      	movs	r1, #0
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f001 fc6e 	bl	800b418 <USBD_LL_PrepareReceive>
 8009b3c:	e03b      	b.n	8009bb6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	68da      	ldr	r2, [r3, #12]
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d11c      	bne.n	8009b84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	685a      	ldr	r2, [r3, #4]
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d316      	bcc.n	8009b84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	685a      	ldr	r2, [r3, #4]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d20f      	bcs.n	8009b84 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b64:	2200      	movs	r2, #0
 8009b66:	2100      	movs	r1, #0
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 ff1b 	bl	800a9a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b76:	2300      	movs	r3, #0
 8009b78:	2200      	movs	r2, #0
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f001 fc4b 	bl	800b418 <USBD_LL_PrepareReceive>
 8009b82:	e018      	b.n	8009bb6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	d10b      	bne.n	8009ba8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d005      	beq.n	8009ba8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ba8:	2180      	movs	r1, #128	; 0x80
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f001 fb8a 	bl	800b2c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f000 ff49 	bl	800aa48 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d122      	bne.n	8009c06 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f7ff fe98 	bl	80098f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009bce:	e01a      	b.n	8009c06 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b03      	cmp	r3, #3
 8009bda:	d114      	bne.n	8009c06 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00e      	beq.n	8009c06 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	7afa      	ldrb	r2, [r7, #11]
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	4798      	blx	r3
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009bfc:	7dfb      	ldrb	r3, [r7, #23]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009c02:	7dfb      	ldrb	r3, [r7, #23]
 8009c04:	e000      	b.n	8009c08 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3718      	adds	r7, #24
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e02f      	b.n	8009ca4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00f      	beq.n	8009c6e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d009      	beq.n	8009c6e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	6852      	ldr	r2, [r2, #4]
 8009c66:	b2d2      	uxtb	r2, r2
 8009c68:	4611      	mov	r1, r2
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c6e:	2340      	movs	r3, #64	; 0x40
 8009c70:	2200      	movs	r2, #0
 8009c72:	2100      	movs	r1, #0
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f001 fae0 	bl	800b23a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2240      	movs	r2, #64	; 0x40
 8009c86:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c8a:	2340      	movs	r3, #64	; 0x40
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	2180      	movs	r1, #128	; 0x80
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f001 fad2 	bl	800b23a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2240      	movs	r2, #64	; 0x40
 8009ca0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	78fa      	ldrb	r2, [r7, #3]
 8009cbc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cda:	b2da      	uxtb	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2204      	movs	r2, #4
 8009ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	2b04      	cmp	r3, #4
 8009d0a:	d106      	bne.n	8009d1a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e012      	b.n	8009d64 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d10b      	bne.n	8009d62 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d50:	69db      	ldr	r3, [r3, #28]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d005      	beq.n	8009d62 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d5c:	69db      	ldr	r3, [r3, #28]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b087      	sub	sp, #28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	3301      	adds	r3, #1
 8009d82:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009d8a:	8a3b      	ldrh	r3, [r7, #16]
 8009d8c:	021b      	lsls	r3, r3, #8
 8009d8e:	b21a      	sxth	r2, r3
 8009d90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	b21b      	sxth	r3, r3
 8009d98:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009d9a:	89fb      	ldrh	r3, [r7, #14]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	371c      	adds	r7, #28
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dbe:	2b40      	cmp	r3, #64	; 0x40
 8009dc0:	d005      	beq.n	8009dce <USBD_StdDevReq+0x26>
 8009dc2:	2b40      	cmp	r3, #64	; 0x40
 8009dc4:	d853      	bhi.n	8009e6e <USBD_StdDevReq+0xc6>
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00b      	beq.n	8009de2 <USBD_StdDevReq+0x3a>
 8009dca:	2b20      	cmp	r3, #32
 8009dcc:	d14f      	bne.n	8009e6e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	4798      	blx	r3
 8009ddc:	4603      	mov	r3, r0
 8009dde:	73fb      	strb	r3, [r7, #15]
      break;
 8009de0:	e04a      	b.n	8009e78 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	785b      	ldrb	r3, [r3, #1]
 8009de6:	2b09      	cmp	r3, #9
 8009de8:	d83b      	bhi.n	8009e62 <USBD_StdDevReq+0xba>
 8009dea:	a201      	add	r2, pc, #4	; (adr r2, 8009df0 <USBD_StdDevReq+0x48>)
 8009dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df0:	08009e45 	.word	0x08009e45
 8009df4:	08009e59 	.word	0x08009e59
 8009df8:	08009e63 	.word	0x08009e63
 8009dfc:	08009e4f 	.word	0x08009e4f
 8009e00:	08009e63 	.word	0x08009e63
 8009e04:	08009e23 	.word	0x08009e23
 8009e08:	08009e19 	.word	0x08009e19
 8009e0c:	08009e63 	.word	0x08009e63
 8009e10:	08009e3b 	.word	0x08009e3b
 8009e14:	08009e2d 	.word	0x08009e2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f9de 	bl	800a1dc <USBD_GetDescriptor>
          break;
 8009e20:	e024      	b.n	8009e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fb6d 	bl	800a504 <USBD_SetAddress>
          break;
 8009e2a:	e01f      	b.n	8009e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fbac 	bl	800a58c <USBD_SetConfig>
 8009e34:	4603      	mov	r3, r0
 8009e36:	73fb      	strb	r3, [r7, #15]
          break;
 8009e38:	e018      	b.n	8009e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fc4b 	bl	800a6d8 <USBD_GetConfig>
          break;
 8009e42:	e013      	b.n	8009e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fc7c 	bl	800a744 <USBD_GetStatus>
          break;
 8009e4c:	e00e      	b.n	8009e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fcab 	bl	800a7ac <USBD_SetFeature>
          break;
 8009e56:	e009      	b.n	8009e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fcba 	bl	800a7d4 <USBD_ClrFeature>
          break;
 8009e60:	e004      	b.n	8009e6c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fd11 	bl	800a88c <USBD_CtlError>
          break;
 8009e6a:	bf00      	nop
      }
      break;
 8009e6c:	e004      	b.n	8009e78 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fd0b 	bl	800a88c <USBD_CtlError>
      break;
 8009e76:	bf00      	nop
  }

  return ret;
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop

08009e84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e9a:	2b40      	cmp	r3, #64	; 0x40
 8009e9c:	d005      	beq.n	8009eaa <USBD_StdItfReq+0x26>
 8009e9e:	2b40      	cmp	r3, #64	; 0x40
 8009ea0:	d82f      	bhi.n	8009f02 <USBD_StdItfReq+0x7e>
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <USBD_StdItfReq+0x26>
 8009ea6:	2b20      	cmp	r3, #32
 8009ea8:	d12b      	bne.n	8009f02 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d81d      	bhi.n	8009ef4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	889b      	ldrh	r3, [r3, #4]
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d813      	bhi.n	8009eea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	4798      	blx	r3
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	88db      	ldrh	r3, [r3, #6]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d110      	bne.n	8009efe <USBD_StdItfReq+0x7a>
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10d      	bne.n	8009efe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fd9d 	bl	800aa22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ee8:	e009      	b.n	8009efe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009eea:	6839      	ldr	r1, [r7, #0]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fccd 	bl	800a88c <USBD_CtlError>
          break;
 8009ef2:	e004      	b.n	8009efe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fcc8 	bl	800a88c <USBD_CtlError>
          break;
 8009efc:	e000      	b.n	8009f00 <USBD_StdItfReq+0x7c>
          break;
 8009efe:	bf00      	nop
      }
      break;
 8009f00:	e004      	b.n	8009f0c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fcc1 	bl	800a88c <USBD_CtlError>
      break;
 8009f0a:	bf00      	nop
  }

  return ret;
 8009f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b084      	sub	sp, #16
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	889b      	ldrh	r3, [r3, #4]
 8009f28:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f32:	2b40      	cmp	r3, #64	; 0x40
 8009f34:	d007      	beq.n	8009f46 <USBD_StdEPReq+0x30>
 8009f36:	2b40      	cmp	r3, #64	; 0x40
 8009f38:	f200 8145 	bhi.w	800a1c6 <USBD_StdEPReq+0x2b0>
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00c      	beq.n	8009f5a <USBD_StdEPReq+0x44>
 8009f40:	2b20      	cmp	r3, #32
 8009f42:	f040 8140 	bne.w	800a1c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	4798      	blx	r3
 8009f54:	4603      	mov	r3, r0
 8009f56:	73fb      	strb	r3, [r7, #15]
      break;
 8009f58:	e13a      	b.n	800a1d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	785b      	ldrb	r3, [r3, #1]
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	d007      	beq.n	8009f72 <USBD_StdEPReq+0x5c>
 8009f62:	2b03      	cmp	r3, #3
 8009f64:	f300 8129 	bgt.w	800a1ba <USBD_StdEPReq+0x2a4>
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d07f      	beq.n	800a06c <USBD_StdEPReq+0x156>
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d03c      	beq.n	8009fea <USBD_StdEPReq+0xd4>
 8009f70:	e123      	b.n	800a1ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d002      	beq.n	8009f84 <USBD_StdEPReq+0x6e>
 8009f7e:	2b03      	cmp	r3, #3
 8009f80:	d016      	beq.n	8009fb0 <USBD_StdEPReq+0x9a>
 8009f82:	e02c      	b.n	8009fde <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f84:	7bbb      	ldrb	r3, [r7, #14]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00d      	beq.n	8009fa6 <USBD_StdEPReq+0x90>
 8009f8a:	7bbb      	ldrb	r3, [r7, #14]
 8009f8c:	2b80      	cmp	r3, #128	; 0x80
 8009f8e:	d00a      	beq.n	8009fa6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f90:	7bbb      	ldrb	r3, [r7, #14]
 8009f92:	4619      	mov	r1, r3
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f001 f995 	bl	800b2c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f9a:	2180      	movs	r1, #128	; 0x80
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f001 f991 	bl	800b2c4 <USBD_LL_StallEP>
 8009fa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009fa4:	e020      	b.n	8009fe8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009fa6:	6839      	ldr	r1, [r7, #0]
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fc6f 	bl	800a88c <USBD_CtlError>
              break;
 8009fae:	e01b      	b.n	8009fe8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	885b      	ldrh	r3, [r3, #2]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10e      	bne.n	8009fd6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00b      	beq.n	8009fd6 <USBD_StdEPReq+0xc0>
 8009fbe:	7bbb      	ldrb	r3, [r7, #14]
 8009fc0:	2b80      	cmp	r3, #128	; 0x80
 8009fc2:	d008      	beq.n	8009fd6 <USBD_StdEPReq+0xc0>
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	88db      	ldrh	r3, [r3, #6]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d104      	bne.n	8009fd6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009fcc:	7bbb      	ldrb	r3, [r7, #14]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f001 f977 	bl	800b2c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fd23 	bl	800aa22 <USBD_CtlSendStatus>

              break;
 8009fdc:	e004      	b.n	8009fe8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 fc53 	bl	800a88c <USBD_CtlError>
              break;
 8009fe6:	bf00      	nop
          }
          break;
 8009fe8:	e0ec      	b.n	800a1c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d002      	beq.n	8009ffc <USBD_StdEPReq+0xe6>
 8009ff6:	2b03      	cmp	r3, #3
 8009ff8:	d016      	beq.n	800a028 <USBD_StdEPReq+0x112>
 8009ffa:	e030      	b.n	800a05e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00d      	beq.n	800a01e <USBD_StdEPReq+0x108>
 800a002:	7bbb      	ldrb	r3, [r7, #14]
 800a004:	2b80      	cmp	r3, #128	; 0x80
 800a006:	d00a      	beq.n	800a01e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a008:	7bbb      	ldrb	r3, [r7, #14]
 800a00a:	4619      	mov	r1, r3
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f001 f959 	bl	800b2c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a012:	2180      	movs	r1, #128	; 0x80
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f001 f955 	bl	800b2c4 <USBD_LL_StallEP>
 800a01a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a01c:	e025      	b.n	800a06a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fc33 	bl	800a88c <USBD_CtlError>
              break;
 800a026:	e020      	b.n	800a06a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	885b      	ldrh	r3, [r3, #2]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d11b      	bne.n	800a068 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a030:	7bbb      	ldrb	r3, [r7, #14]
 800a032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a036:	2b00      	cmp	r3, #0
 800a038:	d004      	beq.n	800a044 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a03a:	7bbb      	ldrb	r3, [r7, #14]
 800a03c:	4619      	mov	r1, r3
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f001 f95f 	bl	800b302 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fcec 	bl	800aa22 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	6839      	ldr	r1, [r7, #0]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	4798      	blx	r3
 800a058:	4603      	mov	r3, r0
 800a05a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a05c:	e004      	b.n	800a068 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a05e:	6839      	ldr	r1, [r7, #0]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 fc13 	bl	800a88c <USBD_CtlError>
              break;
 800a066:	e000      	b.n	800a06a <USBD_StdEPReq+0x154>
              break;
 800a068:	bf00      	nop
          }
          break;
 800a06a:	e0ab      	b.n	800a1c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a072:	b2db      	uxtb	r3, r3
 800a074:	2b02      	cmp	r3, #2
 800a076:	d002      	beq.n	800a07e <USBD_StdEPReq+0x168>
 800a078:	2b03      	cmp	r3, #3
 800a07a:	d032      	beq.n	800a0e2 <USBD_StdEPReq+0x1cc>
 800a07c:	e097      	b.n	800a1ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a07e:	7bbb      	ldrb	r3, [r7, #14]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d007      	beq.n	800a094 <USBD_StdEPReq+0x17e>
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	2b80      	cmp	r3, #128	; 0x80
 800a088:	d004      	beq.n	800a094 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fbfd 	bl	800a88c <USBD_CtlError>
                break;
 800a092:	e091      	b.n	800a1b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a094:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	da0b      	bge.n	800a0b4 <USBD_StdEPReq+0x19e>
 800a09c:	7bbb      	ldrb	r3, [r7, #14]
 800a09e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	3310      	adds	r3, #16
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	e00b      	b.n	800a0cc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0b4:	7bbb      	ldrb	r3, [r7, #14]
 800a0b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2202      	movs	r2, #2
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fc47 	bl	800a96e <USBD_CtlSendData>
              break;
 800a0e0:	e06a      	b.n	800a1b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a0e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	da11      	bge.n	800a10e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a0ea:	7bbb      	ldrb	r3, [r7, #14]
 800a0ec:	f003 020f 	and.w	r2, r3, #15
 800a0f0:	6879      	ldr	r1, [r7, #4]
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4413      	add	r3, r2
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	440b      	add	r3, r1
 800a0fc:	3324      	adds	r3, #36	; 0x24
 800a0fe:	881b      	ldrh	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d117      	bne.n	800a134 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a104:	6839      	ldr	r1, [r7, #0]
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fbc0 	bl	800a88c <USBD_CtlError>
                  break;
 800a10c:	e054      	b.n	800a1b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a10e:	7bbb      	ldrb	r3, [r7, #14]
 800a110:	f003 020f 	and.w	r2, r3, #15
 800a114:	6879      	ldr	r1, [r7, #4]
 800a116:	4613      	mov	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	440b      	add	r3, r1
 800a120:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d104      	bne.n	800a134 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fbad 	bl	800a88c <USBD_CtlError>
                  break;
 800a132:	e041      	b.n	800a1b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	da0b      	bge.n	800a154 <USBD_StdEPReq+0x23e>
 800a13c:	7bbb      	ldrb	r3, [r7, #14]
 800a13e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a142:	4613      	mov	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4413      	add	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	3310      	adds	r3, #16
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	4413      	add	r3, r2
 800a150:	3304      	adds	r3, #4
 800a152:	e00b      	b.n	800a16c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a154:	7bbb      	ldrb	r3, [r7, #14]
 800a156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a15a:	4613      	mov	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	4413      	add	r3, r2
 800a16a:	3304      	adds	r3, #4
 800a16c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a16e:	7bbb      	ldrb	r3, [r7, #14]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <USBD_StdEPReq+0x264>
 800a174:	7bbb      	ldrb	r3, [r7, #14]
 800a176:	2b80      	cmp	r3, #128	; 0x80
 800a178:	d103      	bne.n	800a182 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2200      	movs	r2, #0
 800a17e:	601a      	str	r2, [r3, #0]
 800a180:	e00e      	b.n	800a1a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a182:	7bbb      	ldrb	r3, [r7, #14]
 800a184:	4619      	mov	r1, r3
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f001 f8da 	bl	800b340 <USBD_LL_IsStallEP>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	2201      	movs	r2, #1
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	e002      	b.n	800a1a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fbe1 	bl	800a96e <USBD_CtlSendData>
              break;
 800a1ac:	e004      	b.n	800a1b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fb6b 	bl	800a88c <USBD_CtlError>
              break;
 800a1b6:	bf00      	nop
          }
          break;
 800a1b8:	e004      	b.n	800a1c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a1ba:	6839      	ldr	r1, [r7, #0]
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 fb65 	bl	800a88c <USBD_CtlError>
          break;
 800a1c2:	bf00      	nop
      }
      break;
 800a1c4:	e004      	b.n	800a1d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fb5f 	bl	800a88c <USBD_CtlError>
      break;
 800a1ce:	bf00      	nop
  }

  return ret;
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
	...

0800a1dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	885b      	ldrh	r3, [r3, #2]
 800a1f6:	0a1b      	lsrs	r3, r3, #8
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	2b0e      	cmp	r3, #14
 800a1fe:	f200 8152 	bhi.w	800a4a6 <USBD_GetDescriptor+0x2ca>
 800a202:	a201      	add	r2, pc, #4	; (adr r2, 800a208 <USBD_GetDescriptor+0x2c>)
 800a204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a208:	0800a279 	.word	0x0800a279
 800a20c:	0800a291 	.word	0x0800a291
 800a210:	0800a2d1 	.word	0x0800a2d1
 800a214:	0800a4a7 	.word	0x0800a4a7
 800a218:	0800a4a7 	.word	0x0800a4a7
 800a21c:	0800a447 	.word	0x0800a447
 800a220:	0800a473 	.word	0x0800a473
 800a224:	0800a4a7 	.word	0x0800a4a7
 800a228:	0800a4a7 	.word	0x0800a4a7
 800a22c:	0800a4a7 	.word	0x0800a4a7
 800a230:	0800a4a7 	.word	0x0800a4a7
 800a234:	0800a4a7 	.word	0x0800a4a7
 800a238:	0800a4a7 	.word	0x0800a4a7
 800a23c:	0800a4a7 	.word	0x0800a4a7
 800a240:	0800a245 	.word	0x0800a245
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a24a:	69db      	ldr	r3, [r3, #28]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00b      	beq.n	800a268 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	7c12      	ldrb	r2, [r2, #16]
 800a25c:	f107 0108 	add.w	r1, r7, #8
 800a260:	4610      	mov	r0, r2
 800a262:	4798      	blx	r3
 800a264:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a266:	e126      	b.n	800a4b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fb0e 	bl	800a88c <USBD_CtlError>
        err++;
 800a270:	7afb      	ldrb	r3, [r7, #11]
 800a272:	3301      	adds	r3, #1
 800a274:	72fb      	strb	r3, [r7, #11]
      break;
 800a276:	e11e      	b.n	800a4b6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	7c12      	ldrb	r2, [r2, #16]
 800a284:	f107 0108 	add.w	r1, r7, #8
 800a288:	4610      	mov	r0, r2
 800a28a:	4798      	blx	r3
 800a28c:	60f8      	str	r0, [r7, #12]
      break;
 800a28e:	e112      	b.n	800a4b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	7c1b      	ldrb	r3, [r3, #16]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10d      	bne.n	800a2b4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a0:	f107 0208 	add.w	r2, r7, #8
 800a2a4:	4610      	mov	r0, r2
 800a2a6:	4798      	blx	r3
 800a2a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a2b2:	e100      	b.n	800a4b6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2bc:	f107 0208 	add.w	r2, r7, #8
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	4798      	blx	r3
 800a2c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	2202      	movs	r2, #2
 800a2cc:	701a      	strb	r2, [r3, #0]
      break;
 800a2ce:	e0f2      	b.n	800a4b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	885b      	ldrh	r3, [r3, #2]
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b05      	cmp	r3, #5
 800a2d8:	f200 80ac 	bhi.w	800a434 <USBD_GetDescriptor+0x258>
 800a2dc:	a201      	add	r2, pc, #4	; (adr r2, 800a2e4 <USBD_GetDescriptor+0x108>)
 800a2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e2:	bf00      	nop
 800a2e4:	0800a2fd 	.word	0x0800a2fd
 800a2e8:	0800a331 	.word	0x0800a331
 800a2ec:	0800a365 	.word	0x0800a365
 800a2f0:	0800a399 	.word	0x0800a399
 800a2f4:	0800a3cd 	.word	0x0800a3cd
 800a2f8:	0800a401 	.word	0x0800a401
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00b      	beq.n	800a320 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	7c12      	ldrb	r2, [r2, #16]
 800a314:	f107 0108 	add.w	r1, r7, #8
 800a318:	4610      	mov	r0, r2
 800a31a:	4798      	blx	r3
 800a31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a31e:	e091      	b.n	800a444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a320:	6839      	ldr	r1, [r7, #0]
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fab2 	bl	800a88c <USBD_CtlError>
            err++;
 800a328:	7afb      	ldrb	r3, [r7, #11]
 800a32a:	3301      	adds	r3, #1
 800a32c:	72fb      	strb	r3, [r7, #11]
          break;
 800a32e:	e089      	b.n	800a444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00b      	beq.n	800a354 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	7c12      	ldrb	r2, [r2, #16]
 800a348:	f107 0108 	add.w	r1, r7, #8
 800a34c:	4610      	mov	r0, r2
 800a34e:	4798      	blx	r3
 800a350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a352:	e077      	b.n	800a444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fa98 	bl	800a88c <USBD_CtlError>
            err++;
 800a35c:	7afb      	ldrb	r3, [r7, #11]
 800a35e:	3301      	adds	r3, #1
 800a360:	72fb      	strb	r3, [r7, #11]
          break;
 800a362:	e06f      	b.n	800a444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00b      	beq.n	800a388 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	7c12      	ldrb	r2, [r2, #16]
 800a37c:	f107 0108 	add.w	r1, r7, #8
 800a380:	4610      	mov	r0, r2
 800a382:	4798      	blx	r3
 800a384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a386:	e05d      	b.n	800a444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fa7e 	bl	800a88c <USBD_CtlError>
            err++;
 800a390:	7afb      	ldrb	r3, [r7, #11]
 800a392:	3301      	adds	r3, #1
 800a394:	72fb      	strb	r3, [r7, #11]
          break;
 800a396:	e055      	b.n	800a444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00b      	beq.n	800a3bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	7c12      	ldrb	r2, [r2, #16]
 800a3b0:	f107 0108 	add.w	r1, r7, #8
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	4798      	blx	r3
 800a3b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3ba:	e043      	b.n	800a444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 fa64 	bl	800a88c <USBD_CtlError>
            err++;
 800a3c4:	7afb      	ldrb	r3, [r7, #11]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a3ca:	e03b      	b.n	800a444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3d2:	695b      	ldr	r3, [r3, #20]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00b      	beq.n	800a3f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	7c12      	ldrb	r2, [r2, #16]
 800a3e4:	f107 0108 	add.w	r1, r7, #8
 800a3e8:	4610      	mov	r0, r2
 800a3ea:	4798      	blx	r3
 800a3ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3ee:	e029      	b.n	800a444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fa4a 	bl	800a88c <USBD_CtlError>
            err++;
 800a3f8:	7afb      	ldrb	r3, [r7, #11]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a3fe:	e021      	b.n	800a444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00b      	beq.n	800a424 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	7c12      	ldrb	r2, [r2, #16]
 800a418:	f107 0108 	add.w	r1, r7, #8
 800a41c:	4610      	mov	r0, r2
 800a41e:	4798      	blx	r3
 800a420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a422:	e00f      	b.n	800a444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fa30 	bl	800a88c <USBD_CtlError>
            err++;
 800a42c:	7afb      	ldrb	r3, [r7, #11]
 800a42e:	3301      	adds	r3, #1
 800a430:	72fb      	strb	r3, [r7, #11]
          break;
 800a432:	e007      	b.n	800a444 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 fa28 	bl	800a88c <USBD_CtlError>
          err++;
 800a43c:	7afb      	ldrb	r3, [r7, #11]
 800a43e:	3301      	adds	r3, #1
 800a440:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a442:	bf00      	nop
      }
      break;
 800a444:	e037      	b.n	800a4b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	7c1b      	ldrb	r3, [r3, #16]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d109      	bne.n	800a462 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a456:	f107 0208 	add.w	r2, r7, #8
 800a45a:	4610      	mov	r0, r2
 800a45c:	4798      	blx	r3
 800a45e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a460:	e029      	b.n	800a4b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fa11 	bl	800a88c <USBD_CtlError>
        err++;
 800a46a:	7afb      	ldrb	r3, [r7, #11]
 800a46c:	3301      	adds	r3, #1
 800a46e:	72fb      	strb	r3, [r7, #11]
      break;
 800a470:	e021      	b.n	800a4b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	7c1b      	ldrb	r3, [r3, #16]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10d      	bne.n	800a496 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a482:	f107 0208 	add.w	r2, r7, #8
 800a486:	4610      	mov	r0, r2
 800a488:	4798      	blx	r3
 800a48a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	3301      	adds	r3, #1
 800a490:	2207      	movs	r2, #7
 800a492:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a494:	e00f      	b.n	800a4b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f9f7 	bl	800a88c <USBD_CtlError>
        err++;
 800a49e:	7afb      	ldrb	r3, [r7, #11]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a4a4:	e007      	b.n	800a4b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a4a6:	6839      	ldr	r1, [r7, #0]
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 f9ef 	bl	800a88c <USBD_CtlError>
      err++;
 800a4ae:	7afb      	ldrb	r3, [r7, #11]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a4b4:	bf00      	nop
  }

  if (err != 0U)
 800a4b6:	7afb      	ldrb	r3, [r7, #11]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d11e      	bne.n	800a4fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	88db      	ldrh	r3, [r3, #6]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d016      	beq.n	800a4f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a4c4:	893b      	ldrh	r3, [r7, #8]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00e      	beq.n	800a4e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	88da      	ldrh	r2, [r3, #6]
 800a4ce:	893b      	ldrh	r3, [r7, #8]
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	bf28      	it	cs
 800a4d4:	4613      	movcs	r3, r2
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a4da:	893b      	ldrh	r3, [r7, #8]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	68f9      	ldr	r1, [r7, #12]
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fa44 	bl	800a96e <USBD_CtlSendData>
 800a4e6:	e009      	b.n	800a4fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a4e8:	6839      	ldr	r1, [r7, #0]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f9ce 	bl	800a88c <USBD_CtlError>
 800a4f0:	e004      	b.n	800a4fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fa95 	bl	800aa22 <USBD_CtlSendStatus>
 800a4f8:	e000      	b.n	800a4fc <USBD_GetDescriptor+0x320>
    return;
 800a4fa:	bf00      	nop
  }
}
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop

0800a504 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	889b      	ldrh	r3, [r3, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d131      	bne.n	800a57a <USBD_SetAddress+0x76>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	88db      	ldrh	r3, [r3, #6]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d12d      	bne.n	800a57a <USBD_SetAddress+0x76>
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	885b      	ldrh	r3, [r3, #2]
 800a522:	2b7f      	cmp	r3, #127	; 0x7f
 800a524:	d829      	bhi.n	800a57a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	885b      	ldrh	r3, [r3, #2]
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a530:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b03      	cmp	r3, #3
 800a53c:	d104      	bne.n	800a548 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a53e:	6839      	ldr	r1, [r7, #0]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f9a3 	bl	800a88c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a546:	e01d      	b.n	800a584 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	7bfa      	ldrb	r2, [r7, #15]
 800a54c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a550:	7bfb      	ldrb	r3, [r7, #15]
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 ff1f 	bl	800b398 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fa61 	bl	800aa22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a560:	7bfb      	ldrb	r3, [r7, #15]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d004      	beq.n	800a570 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2202      	movs	r2, #2
 800a56a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a56e:	e009      	b.n	800a584 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a578:	e004      	b.n	800a584 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f985 	bl	800a88c <USBD_CtlError>
  }
}
 800a582:	bf00      	nop
 800a584:	bf00      	nop
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	885b      	ldrh	r3, [r3, #2]
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	4b4c      	ldr	r3, [pc, #304]	; (800a6d4 <USBD_SetConfig+0x148>)
 800a5a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a5a4:	4b4b      	ldr	r3, [pc, #300]	; (800a6d4 <USBD_SetConfig+0x148>)
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d905      	bls.n	800a5b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a5ac:	6839      	ldr	r1, [r7, #0]
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f96c 	bl	800a88c <USBD_CtlError>
    return USBD_FAIL;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e088      	b.n	800a6ca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d002      	beq.n	800a5ca <USBD_SetConfig+0x3e>
 800a5c4:	2b03      	cmp	r3, #3
 800a5c6:	d025      	beq.n	800a614 <USBD_SetConfig+0x88>
 800a5c8:	e071      	b.n	800a6ae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a5ca:	4b42      	ldr	r3, [pc, #264]	; (800a6d4 <USBD_SetConfig+0x148>)
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d01c      	beq.n	800a60c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a5d2:	4b40      	ldr	r3, [pc, #256]	; (800a6d4 <USBD_SetConfig+0x148>)
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a5dc:	4b3d      	ldr	r3, [pc, #244]	; (800a6d4 <USBD_SetConfig+0x148>)
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7ff f992 	bl	800990c <USBD_SetClassConfig>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d004      	beq.n	800a5fc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a5f2:	6839      	ldr	r1, [r7, #0]
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f949 	bl	800a88c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a5fa:	e065      	b.n	800a6c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fa10 	bl	800aa22 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2203      	movs	r2, #3
 800a606:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a60a:	e05d      	b.n	800a6c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fa08 	bl	800aa22 <USBD_CtlSendStatus>
      break;
 800a612:	e059      	b.n	800a6c8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a614:	4b2f      	ldr	r3, [pc, #188]	; (800a6d4 <USBD_SetConfig+0x148>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d112      	bne.n	800a642 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2202      	movs	r2, #2
 800a620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a624:	4b2b      	ldr	r3, [pc, #172]	; (800a6d4 <USBD_SetConfig+0x148>)
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	461a      	mov	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a62e:	4b29      	ldr	r3, [pc, #164]	; (800a6d4 <USBD_SetConfig+0x148>)
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f7ff f985 	bl	8009944 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 f9f1 	bl	800aa22 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a640:	e042      	b.n	800a6c8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a642:	4b24      	ldr	r3, [pc, #144]	; (800a6d4 <USBD_SetConfig+0x148>)
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	461a      	mov	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d02a      	beq.n	800a6a6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	b2db      	uxtb	r3, r3
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7ff f973 	bl	8009944 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a65e:	4b1d      	ldr	r3, [pc, #116]	; (800a6d4 <USBD_SetConfig+0x148>)
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	461a      	mov	r2, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a668:	4b1a      	ldr	r3, [pc, #104]	; (800a6d4 <USBD_SetConfig+0x148>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	4619      	mov	r1, r3
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f7ff f94c 	bl	800990c <USBD_SetClassConfig>
 800a674:	4603      	mov	r3, r0
 800a676:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a678:	7bfb      	ldrb	r3, [r7, #15]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00f      	beq.n	800a69e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f903 	bl	800a88c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7ff f958 	bl	8009944 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2202      	movs	r2, #2
 800a698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a69c:	e014      	b.n	800a6c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f9bf 	bl	800aa22 <USBD_CtlSendStatus>
      break;
 800a6a4:	e010      	b.n	800a6c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f9bb 	bl	800aa22 <USBD_CtlSendStatus>
      break;
 800a6ac:	e00c      	b.n	800a6c8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a6ae:	6839      	ldr	r1, [r7, #0]
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 f8eb 	bl	800a88c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a6b6:	4b07      	ldr	r3, [pc, #28]	; (800a6d4 <USBD_SetConfig+0x148>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f7ff f941 	bl	8009944 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c6:	bf00      	nop
  }

  return ret;
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	200003e4 	.word	0x200003e4

0800a6d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	88db      	ldrh	r3, [r3, #6]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d004      	beq.n	800a6f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a6ea:	6839      	ldr	r1, [r7, #0]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f8cd 	bl	800a88c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a6f2:	e023      	b.n	800a73c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	dc02      	bgt.n	800a706 <USBD_GetConfig+0x2e>
 800a700:	2b00      	cmp	r3, #0
 800a702:	dc03      	bgt.n	800a70c <USBD_GetConfig+0x34>
 800a704:	e015      	b.n	800a732 <USBD_GetConfig+0x5a>
 800a706:	2b03      	cmp	r3, #3
 800a708:	d00b      	beq.n	800a722 <USBD_GetConfig+0x4a>
 800a70a:	e012      	b.n	800a732 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	3308      	adds	r3, #8
 800a716:	2201      	movs	r2, #1
 800a718:	4619      	mov	r1, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 f927 	bl	800a96e <USBD_CtlSendData>
        break;
 800a720:	e00c      	b.n	800a73c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	3304      	adds	r3, #4
 800a726:	2201      	movs	r2, #1
 800a728:	4619      	mov	r1, r3
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f91f 	bl	800a96e <USBD_CtlSendData>
        break;
 800a730:	e004      	b.n	800a73c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a732:	6839      	ldr	r1, [r7, #0]
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f8a9 	bl	800a88c <USBD_CtlError>
        break;
 800a73a:	bf00      	nop
}
 800a73c:	bf00      	nop
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a754:	b2db      	uxtb	r3, r3
 800a756:	3b01      	subs	r3, #1
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d81e      	bhi.n	800a79a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	88db      	ldrh	r3, [r3, #6]
 800a760:	2b02      	cmp	r3, #2
 800a762:	d004      	beq.n	800a76e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a764:	6839      	ldr	r1, [r7, #0]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f890 	bl	800a88c <USBD_CtlError>
        break;
 800a76c:	e01a      	b.n	800a7a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2201      	movs	r2, #1
 800a772:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d005      	beq.n	800a78a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	f043 0202 	orr.w	r2, r3, #2
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	330c      	adds	r3, #12
 800a78e:	2202      	movs	r2, #2
 800a790:	4619      	mov	r1, r3
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f8eb 	bl	800a96e <USBD_CtlSendData>
      break;
 800a798:	e004      	b.n	800a7a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a79a:	6839      	ldr	r1, [r7, #0]
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 f875 	bl	800a88c <USBD_CtlError>
      break;
 800a7a2:	bf00      	nop
  }
}
 800a7a4:	bf00      	nop
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	885b      	ldrh	r3, [r3, #2]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d106      	bne.n	800a7cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f92b 	bl	800aa22 <USBD_CtlSendStatus>
  }
}
 800a7cc:	bf00      	nop
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d80b      	bhi.n	800a804 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	885b      	ldrh	r3, [r3, #2]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d10c      	bne.n	800a80e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 f910 	bl	800aa22 <USBD_CtlSendStatus>
      }
      break;
 800a802:	e004      	b.n	800a80e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a804:	6839      	ldr	r1, [r7, #0]
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f840 	bl	800a88c <USBD_CtlError>
      break;
 800a80c:	e000      	b.n	800a810 <USBD_ClrFeature+0x3c>
      break;
 800a80e:	bf00      	nop
  }
}
 800a810:	bf00      	nop
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	781a      	ldrb	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	3301      	adds	r3, #1
 800a832:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	781a      	ldrb	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	3301      	adds	r3, #1
 800a840:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f7ff fa92 	bl	8009d6c <SWAPBYTE>
 800a848:	4603      	mov	r3, r0
 800a84a:	461a      	mov	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	3301      	adds	r3, #1
 800a854:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3301      	adds	r3, #1
 800a85a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f7ff fa85 	bl	8009d6c <SWAPBYTE>
 800a862:	4603      	mov	r3, r0
 800a864:	461a      	mov	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3301      	adds	r3, #1
 800a86e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3301      	adds	r3, #1
 800a874:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f7ff fa78 	bl	8009d6c <SWAPBYTE>
 800a87c:	4603      	mov	r3, r0
 800a87e:	461a      	mov	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	80da      	strh	r2, [r3, #6]
}
 800a884:	bf00      	nop
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a896:	2180      	movs	r1, #128	; 0x80
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fd13 	bl	800b2c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a89e:	2100      	movs	r1, #0
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fd0f 	bl	800b2c4 <USBD_LL_StallEP>
}
 800a8a6:	bf00      	nop
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b086      	sub	sp, #24
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	60f8      	str	r0, [r7, #12]
 800a8b6:	60b9      	str	r1, [r7, #8]
 800a8b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d036      	beq.n	800a932 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a8c8:	6938      	ldr	r0, [r7, #16]
 800a8ca:	f000 f836 	bl	800a93a <USBD_GetLen>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a8dc:	7dfb      	ldrb	r3, [r7, #23]
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	7812      	ldrb	r2, [r2, #0]
 800a8e6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a8e8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a8ee:	7dfb      	ldrb	r3, [r7, #23]
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	2203      	movs	r2, #3
 800a8f6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a8f8:	7dfb      	ldrb	r3, [r7, #23]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a8fe:	e013      	b.n	800a928 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a900:	7dfb      	ldrb	r3, [r7, #23]
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	4413      	add	r3, r2
 800a906:	693a      	ldr	r2, [r7, #16]
 800a908:	7812      	ldrb	r2, [r2, #0]
 800a90a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	3301      	adds	r3, #1
 800a910:	613b      	str	r3, [r7, #16]
    idx++;
 800a912:	7dfb      	ldrb	r3, [r7, #23]
 800a914:	3301      	adds	r3, #1
 800a916:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a918:	7dfb      	ldrb	r3, [r7, #23]
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	4413      	add	r3, r2
 800a91e:	2200      	movs	r2, #0
 800a920:	701a      	strb	r2, [r3, #0]
    idx++;
 800a922:	7dfb      	ldrb	r3, [r7, #23]
 800a924:	3301      	adds	r3, #1
 800a926:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1e7      	bne.n	800a900 <USBD_GetString+0x52>
 800a930:	e000      	b.n	800a934 <USBD_GetString+0x86>
    return;
 800a932:	bf00      	nop
  }
}
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a93a:	b480      	push	{r7}
 800a93c:	b085      	sub	sp, #20
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a942:	2300      	movs	r3, #0
 800a944:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a94a:	e005      	b.n	800a958 <USBD_GetLen+0x1e>
  {
    len++;
 800a94c:	7bfb      	ldrb	r3, [r7, #15]
 800a94e:	3301      	adds	r3, #1
 800a950:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	3301      	adds	r3, #1
 800a956:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1f5      	bne.n	800a94c <USBD_GetLen+0x12>
  }

  return len;
 800a960:	7bfb      	ldrb	r3, [r7, #15]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b084      	sub	sp, #16
 800a972:	af00      	add	r7, sp, #0
 800a974:	60f8      	str	r0, [r7, #12]
 800a976:	60b9      	str	r1, [r7, #8]
 800a978:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2202      	movs	r2, #2
 800a97e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	2100      	movs	r1, #0
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f000 fd1e 	bl	800b3d6 <USBD_LL_Transmit>

  return USBD_OK;
 800a99a:	2300      	movs	r3, #0
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3710      	adds	r7, #16
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f000 fd0d 	bl	800b3d6 <USBD_LL_Transmit>

  return USBD_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b084      	sub	sp, #16
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	60f8      	str	r0, [r7, #12]
 800a9ce:	60b9      	str	r1, [r7, #8]
 800a9d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2203      	movs	r2, #3
 800a9d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f000 fd11 	bl	800b418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	2100      	movs	r1, #0
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f000 fd00 	bl	800b418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b082      	sub	sp, #8
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2204      	movs	r2, #4
 800aa2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aa32:	2300      	movs	r3, #0
 800aa34:	2200      	movs	r2, #0
 800aa36:	2100      	movs	r1, #0
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fccc 	bl	800b3d6 <USBD_LL_Transmit>

  return USBD_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2205      	movs	r2, #5
 800aa54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa58:	2300      	movs	r3, #0
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fcda 	bl	800b418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
	...

0800aa70 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800aa74:	2200      	movs	r2, #0
 800aa76:	4912      	ldr	r1, [pc, #72]	; (800aac0 <MX_USB_Device_Init+0x50>)
 800aa78:	4812      	ldr	r0, [pc, #72]	; (800aac4 <MX_USB_Device_Init+0x54>)
 800aa7a:	f7fe fed9 	bl	8009830 <USBD_Init>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d001      	beq.n	800aa88 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800aa84:	f7f5 fe8e 	bl	80007a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800aa88:	490f      	ldr	r1, [pc, #60]	; (800aac8 <MX_USB_Device_Init+0x58>)
 800aa8a:	480e      	ldr	r0, [pc, #56]	; (800aac4 <MX_USB_Device_Init+0x54>)
 800aa8c:	f7fe ff00 	bl	8009890 <USBD_RegisterClass>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800aa96:	f7f5 fe85 	bl	80007a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800aa9a:	490c      	ldr	r1, [pc, #48]	; (800aacc <MX_USB_Device_Init+0x5c>)
 800aa9c:	4809      	ldr	r0, [pc, #36]	; (800aac4 <MX_USB_Device_Init+0x54>)
 800aa9e:	f7fe fe51 	bl	8009744 <USBD_CDC_RegisterInterface>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d001      	beq.n	800aaac <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800aaa8:	f7f5 fe7c 	bl	80007a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800aaac:	4805      	ldr	r0, [pc, #20]	; (800aac4 <MX_USB_Device_Init+0x54>)
 800aaae:	f7fe ff16 	bl	80098de <USBD_Start>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d001      	beq.n	800aabc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800aab8:	f7f5 fe74 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800aabc:	bf00      	nop
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20000138 	.word	0x20000138
 800aac4:	200003e8 	.word	0x200003e8
 800aac8:	20000018 	.word	0x20000018
 800aacc:	20000124 	.word	0x20000124

0800aad0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aad4:	2200      	movs	r2, #0
 800aad6:	4905      	ldr	r1, [pc, #20]	; (800aaec <CDC_Init_FS+0x1c>)
 800aad8:	4805      	ldr	r0, [pc, #20]	; (800aaf0 <CDC_Init_FS+0x20>)
 800aada:	f7fe fe48 	bl	800976e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aade:	4905      	ldr	r1, [pc, #20]	; (800aaf4 <CDC_Init_FS+0x24>)
 800aae0:	4803      	ldr	r0, [pc, #12]	; (800aaf0 <CDC_Init_FS+0x20>)
 800aae2:	f7fe fe62 	bl	80097aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aae6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	20001ee4 	.word	0x20001ee4
 800aaf0:	200003e8 	.word	0x200003e8
 800aaf4:	200016e4 	.word	0x200016e4

0800aaf8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aafc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	6039      	str	r1, [r7, #0]
 800ab12:	71fb      	strb	r3, [r7, #7]
 800ab14:	4613      	mov	r3, r2
 800ab16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	60fb      	str	r3, [r7, #12]

  switch(cmd)
 800ab1c:	79fb      	ldrb	r3, [r7, #7]
 800ab1e:	2b23      	cmp	r3, #35	; 0x23
 800ab20:	f200 80af 	bhi.w	800ac82 <CDC_Control_FS+0x17a>
 800ab24:	a201      	add	r2, pc, #4	; (adr r2, 800ab2c <CDC_Control_FS+0x24>)
 800ab26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2a:	bf00      	nop
 800ab2c:	0800ac83 	.word	0x0800ac83
 800ab30:	0800ac83 	.word	0x0800ac83
 800ab34:	0800ac83 	.word	0x0800ac83
 800ab38:	0800ac83 	.word	0x0800ac83
 800ab3c:	0800ac83 	.word	0x0800ac83
 800ab40:	0800ac83 	.word	0x0800ac83
 800ab44:	0800ac83 	.word	0x0800ac83
 800ab48:	0800ac83 	.word	0x0800ac83
 800ab4c:	0800ac83 	.word	0x0800ac83
 800ab50:	0800ac83 	.word	0x0800ac83
 800ab54:	0800ac83 	.word	0x0800ac83
 800ab58:	0800ac83 	.word	0x0800ac83
 800ab5c:	0800ac83 	.word	0x0800ac83
 800ab60:	0800ac83 	.word	0x0800ac83
 800ab64:	0800ac83 	.word	0x0800ac83
 800ab68:	0800ac83 	.word	0x0800ac83
 800ab6c:	0800ac83 	.word	0x0800ac83
 800ab70:	0800ac83 	.word	0x0800ac83
 800ab74:	0800ac83 	.word	0x0800ac83
 800ab78:	0800ac83 	.word	0x0800ac83
 800ab7c:	0800ac83 	.word	0x0800ac83
 800ab80:	0800ac83 	.word	0x0800ac83
 800ab84:	0800ac83 	.word	0x0800ac83
 800ab88:	0800ac83 	.word	0x0800ac83
 800ab8c:	0800ac83 	.word	0x0800ac83
 800ab90:	0800ac83 	.word	0x0800ac83
 800ab94:	0800ac83 	.word	0x0800ac83
 800ab98:	0800ac83 	.word	0x0800ac83
 800ab9c:	0800ac83 	.word	0x0800ac83
 800aba0:	0800ac83 	.word	0x0800ac83
 800aba4:	0800ac83 	.word	0x0800ac83
 800aba8:	0800ac83 	.word	0x0800ac83
 800abac:	0800abbd 	.word	0x0800abbd
 800abb0:	0800ac17 	.word	0x0800ac17
 800abb4:	0800ac6b 	.word	0x0800ac6b
 800abb8:	0800ac83 	.word	0x0800ac83
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	461a      	mov	r2, r3
 800abc2:	4b34      	ldr	r3, [pc, #208]	; (800ac94 <CDC_Control_FS+0x18c>)
 800abc4:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 800abc6:	4b33      	ldr	r3, [pc, #204]	; (800ac94 <CDC_Control_FS+0x18c>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	3201      	adds	r2, #1
 800abce:	7812      	ldrb	r2, [r2, #0]
 800abd0:	0212      	lsls	r2, r2, #8
 800abd2:	4313      	orrs	r3, r2
 800abd4:	4a2f      	ldr	r2, [pc, #188]	; (800ac94 <CDC_Control_FS+0x18c>)
 800abd6:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 800abd8:	4b2e      	ldr	r3, [pc, #184]	; (800ac94 <CDC_Control_FS+0x18c>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	683a      	ldr	r2, [r7, #0]
 800abde:	3202      	adds	r2, #2
 800abe0:	7812      	ldrb	r2, [r2, #0]
 800abe2:	0412      	lsls	r2, r2, #16
 800abe4:	4313      	orrs	r3, r2
 800abe6:	4a2b      	ldr	r2, [pc, #172]	; (800ac94 <CDC_Control_FS+0x18c>)
 800abe8:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 800abea:	4b2a      	ldr	r3, [pc, #168]	; (800ac94 <CDC_Control_FS+0x18c>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	3203      	adds	r2, #3
 800abf2:	7812      	ldrb	r2, [r2, #0]
 800abf4:	0612      	lsls	r2, r2, #24
 800abf6:	4313      	orrs	r3, r2
 800abf8:	4a26      	ldr	r2, [pc, #152]	; (800ac94 <CDC_Control_FS+0x18c>)
 800abfa:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	791a      	ldrb	r2, [r3, #4]
 800ac00:	4b24      	ldr	r3, [pc, #144]	; (800ac94 <CDC_Control_FS+0x18c>)
 800ac02:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	795a      	ldrb	r2, [r3, #5]
 800ac08:	4b22      	ldr	r3, [pc, #136]	; (800ac94 <CDC_Control_FS+0x18c>)
 800ac0a:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	799a      	ldrb	r2, [r3, #6]
 800ac10:	4b20      	ldr	r3, [pc, #128]	; (800ac94 <CDC_Control_FS+0x18c>)
 800ac12:	719a      	strb	r2, [r3, #6]

    break;
 800ac14:	e036      	b.n	800ac84 <CDC_Control_FS+0x17c>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800ac16:	4b1f      	ldr	r3, [pc, #124]	; (800ac94 <CDC_Control_FS+0x18c>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 800ac20:	4b1c      	ldr	r3, [pc, #112]	; (800ac94 <CDC_Control_FS+0x18c>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	0a1a      	lsrs	r2, r3, #8
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	b2d2      	uxtb	r2, r2
 800ac2c:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 800ac2e:	4b19      	ldr	r3, [pc, #100]	; (800ac94 <CDC_Control_FS+0x18c>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	0c1a      	lsrs	r2, r3, #16
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	3302      	adds	r3, #2
 800ac38:	b2d2      	uxtb	r2, r2
 800ac3a:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 800ac3c:	4b15      	ldr	r3, [pc, #84]	; (800ac94 <CDC_Control_FS+0x18c>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	0e1a      	lsrs	r2, r3, #24
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	3303      	adds	r3, #3
 800ac46:	b2d2      	uxtb	r2, r2
 800ac48:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	4a11      	ldr	r2, [pc, #68]	; (800ac94 <CDC_Control_FS+0x18c>)
 800ac50:	7912      	ldrb	r2, [r2, #4]
 800ac52:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	3305      	adds	r3, #5
 800ac58:	4a0e      	ldr	r2, [pc, #56]	; (800ac94 <CDC_Control_FS+0x18c>)
 800ac5a:	7952      	ldrb	r2, [r2, #5]
 800ac5c:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	3306      	adds	r3, #6
 800ac62:	4a0c      	ldr	r2, [pc, #48]	; (800ac94 <CDC_Control_FS+0x18c>)
 800ac64:	7992      	ldrb	r2, [r2, #6]
 800ac66:	701a      	strb	r2, [r3, #0]

    break;
 800ac68:	e00c      	b.n	800ac84 <CDC_Control_FS+0x17c>

    case CDC_SET_CONTROL_LINE_STATE:
      is_opened = req->wValue & 0x01;   // 0 bit: DTR, 1 bit: RTS
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	885b      	ldrh	r3, [r3, #2]
 800ac6e:	f003 0301 	and.w	r3, r3, #1
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	bf14      	ite	ne
 800ac76:	2301      	movne	r3, #1
 800ac78:	2300      	moveq	r3, #0
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	4b06      	ldr	r3, [pc, #24]	; (800ac98 <CDC_Control_FS+0x190>)
 800ac7e:	701a      	strb	r2, [r3, #0]

    break;
 800ac80:	e000      	b.n	800ac84 <CDC_Control_FS+0x17c>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ac82:	bf00      	nop
  }

  return (USBD_OK);
 800ac84:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	2000011c 	.word	0x2000011c
 800ac98:	200016e0 	.word	0x200016e0

0800ac9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ac9c:	b590      	push	{r4, r7, lr}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  qbufferWrite(&q_rx, Buf, *Len);
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	6879      	ldr	r1, [r7, #4]
 800acae:	480f      	ldr	r0, [pc, #60]	; (800acec <CDC_Receive_FS+0x50>)
 800acb0:	f7f5 fe71 	bl	8000996 <qbufferWrite>


  uint32_t buf_len;

  buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 800acb4:	4b0d      	ldr	r3, [pc, #52]	; (800acec <CDC_Receive_FS+0x50>)
 800acb6:	689c      	ldr	r4, [r3, #8]
 800acb8:	480c      	ldr	r0, [pc, #48]	; (800acec <CDC_Receive_FS+0x50>)
 800acba:	f7f5 fec8 	bl	8000a4e <qbufferAvailable>
 800acbe:	4603      	mov	r3, r0
 800acc0:	1ae3      	subs	r3, r4, r3
 800acc2:	3b01      	subs	r3, #1
 800acc4:	60fb      	str	r3, [r7, #12]

  if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b3f      	cmp	r3, #63	; 0x3f
 800acca:	d907      	bls.n	800acdc <CDC_Receive_FS+0x40>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800accc:	6879      	ldr	r1, [r7, #4]
 800acce:	4808      	ldr	r0, [pc, #32]	; (800acf0 <CDC_Receive_FS+0x54>)
 800acd0:	f7fe fd6b 	bl	80097aa <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800acd4:	4806      	ldr	r0, [pc, #24]	; (800acf0 <CDC_Receive_FS+0x54>)
 800acd6:	f7fe fd81 	bl	80097dc <USBD_CDC_ReceivePacket>
 800acda:	e002      	b.n	800ace2 <CDC_Receive_FS+0x46>
  }
  else
  {
    is_rx_full = true;
 800acdc:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <CDC_Receive_FS+0x58>)
 800acde:	2201      	movs	r2, #1
 800ace0:	701a      	strb	r2, [r3, #0]
  }

    return (USBD_OK);
 800ace2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd90      	pop	{r4, r7, pc}
 800acec:	200006b8 	.word	0x200006b8
 800acf0:	200003e8 	.word	0x200003e8
 800acf4:	200016e1 	.word	0x200016e1

0800acf8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b087      	sub	sp, #28
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	4613      	mov	r3, r2
 800ad04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ad0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	371c      	adds	r7, #28
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
	...

0800ad1c <cdcIfInit>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool cdcIfInit(void)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	af00      	add	r7, sp, #0
  is_opened = false;
 800ad20:	4b08      	ldr	r3, [pc, #32]	; (800ad44 <cdcIfInit+0x28>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	701a      	strb	r2, [r3, #0]
  qbufferCreate(&q_rx, q_rx_buf, 2048);
 800ad26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad2a:	4907      	ldr	r1, [pc, #28]	; (800ad48 <cdcIfInit+0x2c>)
 800ad2c:	4807      	ldr	r0, [pc, #28]	; (800ad4c <cdcIfInit+0x30>)
 800ad2e:	f7f5 fe14 	bl	800095a <qbufferCreate>
  qbufferCreate(&q_tx, q_tx_buf, 2048);
 800ad32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad36:	4906      	ldr	r1, [pc, #24]	; (800ad50 <cdcIfInit+0x34>)
 800ad38:	4806      	ldr	r0, [pc, #24]	; (800ad54 <cdcIfInit+0x38>)
 800ad3a:	f7f5 fe0e 	bl	800095a <qbufferCreate>

  return true;
 800ad3e:	2301      	movs	r3, #1
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	200016e0 	.word	0x200016e0
 800ad48:	200006e0 	.word	0x200006e0
 800ad4c:	200006b8 	.word	0x200006b8
 800ad50:	20000ee0 	.word	0x20000ee0
 800ad54:	200006cc 	.word	0x200006cc

0800ad58 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	4603      	mov	r3, r0
 800ad60:	6039      	str	r1, [r7, #0]
 800ad62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	2212      	movs	r2, #18
 800ad68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ad6a:	4b03      	ldr	r3, [pc, #12]	; (800ad78 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr
 800ad78:	20000158 	.word	0x20000158

0800ad7c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	4603      	mov	r3, r0
 800ad84:	6039      	str	r1, [r7, #0]
 800ad86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2204      	movs	r2, #4
 800ad8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ad8e:	4b03      	ldr	r3, [pc, #12]	; (800ad9c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr
 800ad9c:	2000016c 	.word	0x2000016c

0800ada0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	6039      	str	r1, [r7, #0]
 800adaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800adac:	79fb      	ldrb	r3, [r7, #7]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d105      	bne.n	800adbe <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	4907      	ldr	r1, [pc, #28]	; (800add4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800adb6:	4808      	ldr	r0, [pc, #32]	; (800add8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800adb8:	f7ff fd79 	bl	800a8ae <USBD_GetString>
 800adbc:	e004      	b.n	800adc8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	4904      	ldr	r1, [pc, #16]	; (800add4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800adc2:	4805      	ldr	r0, [pc, #20]	; (800add8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800adc4:	f7ff fd73 	bl	800a8ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800adc8:	4b02      	ldr	r3, [pc, #8]	; (800add4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	200026e4 	.word	0x200026e4
 800add8:	0800bf44 	.word	0x0800bf44

0800addc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	4603      	mov	r3, r0
 800ade4:	6039      	str	r1, [r7, #0]
 800ade6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	4904      	ldr	r1, [pc, #16]	; (800adfc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800adec:	4804      	ldr	r0, [pc, #16]	; (800ae00 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800adee:	f7ff fd5e 	bl	800a8ae <USBD_GetString>
  return USBD_StrDesc;
 800adf2:	4b02      	ldr	r3, [pc, #8]	; (800adfc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3708      	adds	r7, #8
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	200026e4 	.word	0x200026e4
 800ae00:	0800bf5c 	.word	0x0800bf5c

0800ae04 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	6039      	str	r1, [r7, #0]
 800ae0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	221a      	movs	r2, #26
 800ae14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ae16:	f000 f843 	bl	800aea0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ae1a:	4b02      	ldr	r3, [pc, #8]	; (800ae24 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	20000170 	.word	0x20000170

0800ae28 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	4603      	mov	r3, r0
 800ae30:	6039      	str	r1, [r7, #0]
 800ae32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ae34:	79fb      	ldrb	r3, [r7, #7]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d105      	bne.n	800ae46 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	4907      	ldr	r1, [pc, #28]	; (800ae5c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ae3e:	4808      	ldr	r0, [pc, #32]	; (800ae60 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ae40:	f7ff fd35 	bl	800a8ae <USBD_GetString>
 800ae44:	e004      	b.n	800ae50 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	4904      	ldr	r1, [pc, #16]	; (800ae5c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ae4a:	4805      	ldr	r0, [pc, #20]	; (800ae60 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ae4c:	f7ff fd2f 	bl	800a8ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae50:	4b02      	ldr	r3, [pc, #8]	; (800ae5c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	200026e4 	.word	0x200026e4
 800ae60:	0800bf70 	.word	0x0800bf70

0800ae64 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	6039      	str	r1, [r7, #0]
 800ae6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae70:	79fb      	ldrb	r3, [r7, #7]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d105      	bne.n	800ae82 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	4907      	ldr	r1, [pc, #28]	; (800ae98 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ae7a:	4808      	ldr	r0, [pc, #32]	; (800ae9c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ae7c:	f7ff fd17 	bl	800a8ae <USBD_GetString>
 800ae80:	e004      	b.n	800ae8c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ae82:	683a      	ldr	r2, [r7, #0]
 800ae84:	4904      	ldr	r1, [pc, #16]	; (800ae98 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ae86:	4805      	ldr	r0, [pc, #20]	; (800ae9c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ae88:	f7ff fd11 	bl	800a8ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae8c:	4b02      	ldr	r3, [pc, #8]	; (800ae98 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	200026e4 	.word	0x200026e4
 800ae9c:	0800bf7c 	.word	0x0800bf7c

0800aea0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aea6:	4b0f      	ldr	r3, [pc, #60]	; (800aee4 <Get_SerialNum+0x44>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aeac:	4b0e      	ldr	r3, [pc, #56]	; (800aee8 <Get_SerialNum+0x48>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aeb2:	4b0e      	ldr	r3, [pc, #56]	; (800aeec <Get_SerialNum+0x4c>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4413      	add	r3, r2
 800aebe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d009      	beq.n	800aeda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aec6:	2208      	movs	r2, #8
 800aec8:	4909      	ldr	r1, [pc, #36]	; (800aef0 <Get_SerialNum+0x50>)
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f000 f814 	bl	800aef8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aed0:	2204      	movs	r2, #4
 800aed2:	4908      	ldr	r1, [pc, #32]	; (800aef4 <Get_SerialNum+0x54>)
 800aed4:	68b8      	ldr	r0, [r7, #8]
 800aed6:	f000 f80f 	bl	800aef8 <IntToUnicode>
  }
}
 800aeda:	bf00      	nop
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	1fff7590 	.word	0x1fff7590
 800aee8:	1fff7594 	.word	0x1fff7594
 800aeec:	1fff7598 	.word	0x1fff7598
 800aef0:	20000172 	.word	0x20000172
 800aef4:	20000182 	.word	0x20000182

0800aef8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	4613      	mov	r3, r2
 800af04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800af06:	2300      	movs	r3, #0
 800af08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800af0a:	2300      	movs	r3, #0
 800af0c:	75fb      	strb	r3, [r7, #23]
 800af0e:	e027      	b.n	800af60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	0f1b      	lsrs	r3, r3, #28
 800af14:	2b09      	cmp	r3, #9
 800af16:	d80b      	bhi.n	800af30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	0f1b      	lsrs	r3, r3, #28
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	7dfb      	ldrb	r3, [r7, #23]
 800af20:	005b      	lsls	r3, r3, #1
 800af22:	4619      	mov	r1, r3
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	440b      	add	r3, r1
 800af28:	3230      	adds	r2, #48	; 0x30
 800af2a:	b2d2      	uxtb	r2, r2
 800af2c:	701a      	strb	r2, [r3, #0]
 800af2e:	e00a      	b.n	800af46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	0f1b      	lsrs	r3, r3, #28
 800af34:	b2da      	uxtb	r2, r3
 800af36:	7dfb      	ldrb	r3, [r7, #23]
 800af38:	005b      	lsls	r3, r3, #1
 800af3a:	4619      	mov	r1, r3
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	440b      	add	r3, r1
 800af40:	3237      	adds	r2, #55	; 0x37
 800af42:	b2d2      	uxtb	r2, r2
 800af44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	011b      	lsls	r3, r3, #4
 800af4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800af4c:	7dfb      	ldrb	r3, [r7, #23]
 800af4e:	005b      	lsls	r3, r3, #1
 800af50:	3301      	adds	r3, #1
 800af52:	68ba      	ldr	r2, [r7, #8]
 800af54:	4413      	add	r3, r2
 800af56:	2200      	movs	r2, #0
 800af58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800af5a:	7dfb      	ldrb	r3, [r7, #23]
 800af5c:	3301      	adds	r3, #1
 800af5e:	75fb      	strb	r3, [r7, #23]
 800af60:	7dfa      	ldrb	r2, [r7, #23]
 800af62:	79fb      	ldrb	r3, [r7, #7]
 800af64:	429a      	cmp	r2, r3
 800af66:	d3d3      	bcc.n	800af10 <IntToUnicode+0x18>
  }
}
 800af68:	bf00      	nop
 800af6a:	bf00      	nop
 800af6c:	371c      	adds	r7, #28
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
	...

0800af78 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b098      	sub	sp, #96	; 0x60
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800af80:	f107 030c 	add.w	r3, r7, #12
 800af84:	2254      	movs	r2, #84	; 0x54
 800af86:	2100      	movs	r1, #0
 800af88:	4618      	mov	r0, r3
 800af8a:	f000 fb3d 	bl	800b608 <memset>
  if(pcdHandle->Instance==USB)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a15      	ldr	r2, [pc, #84]	; (800afe8 <HAL_PCD_MspInit+0x70>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d123      	bne.n	800afe0 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800af98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af9c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800af9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800afa2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800afa4:	f107 030c 	add.w	r3, r7, #12
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7f9 f915 	bl	80041d8 <HAL_RCCEx_PeriphCLKConfig>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d001      	beq.n	800afb8 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800afb4:	f7f5 fbf6 	bl	80007a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800afb8:	4b0c      	ldr	r3, [pc, #48]	; (800afec <HAL_PCD_MspInit+0x74>)
 800afba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afbc:	4a0b      	ldr	r2, [pc, #44]	; (800afec <HAL_PCD_MspInit+0x74>)
 800afbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800afc2:	6593      	str	r3, [r2, #88]	; 0x58
 800afc4:	4b09      	ldr	r3, [pc, #36]	; (800afec <HAL_PCD_MspInit+0x74>)
 800afc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afcc:	60bb      	str	r3, [r7, #8]
 800afce:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800afd0:	2200      	movs	r2, #0
 800afd2:	2100      	movs	r1, #0
 800afd4:	2014      	movs	r0, #20
 800afd6:	f7f6 fad8 	bl	800158a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800afda:	2014      	movs	r0, #20
 800afdc:	f7f6 faef 	bl	80015be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800afe0:	bf00      	nop
 800afe2:	3760      	adds	r7, #96	; 0x60
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	40005c00 	.word	0x40005c00
 800afec:	40021000 	.word	0x40021000

0800aff0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800b004:	4619      	mov	r1, r3
 800b006:	4610      	mov	r0, r2
 800b008:	f7fe fcb4 	bl	8009974 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b00c:	bf00      	nop
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	460b      	mov	r3, r1
 800b01e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b026:	78fa      	ldrb	r2, [r7, #3]
 800b028:	6879      	ldr	r1, [r7, #4]
 800b02a:	4613      	mov	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4413      	add	r3, r2
 800b030:	00db      	lsls	r3, r3, #3
 800b032:	440b      	add	r3, r1
 800b034:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	78fb      	ldrb	r3, [r7, #3]
 800b03c:	4619      	mov	r1, r3
 800b03e:	f7fe fcee 	bl	8009a1e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b042:	bf00      	nop
 800b044:	3708      	adds	r7, #8
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b082      	sub	sp, #8
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	460b      	mov	r3, r1
 800b054:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b05c:	78fa      	ldrb	r2, [r7, #3]
 800b05e:	6879      	ldr	r1, [r7, #4]
 800b060:	4613      	mov	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4413      	add	r3, r2
 800b066:	00db      	lsls	r3, r3, #3
 800b068:	440b      	add	r3, r1
 800b06a:	3324      	adds	r3, #36	; 0x24
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	78fb      	ldrb	r3, [r7, #3]
 800b070:	4619      	mov	r1, r3
 800b072:	f7fe fd37 	bl	8009ae4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b076:	bf00      	nop
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b082      	sub	sp, #8
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fe fe4b 	bl	8009d28 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b092:	bf00      	nop
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b084      	sub	sp, #16
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	795b      	ldrb	r3, [r3, #5]
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d001      	beq.n	800b0b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b0ae:	f7f5 fb79 	bl	80007a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b0b8:	7bfa      	ldrb	r2, [r7, #15]
 800b0ba:	4611      	mov	r1, r2
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7fe fdf5 	bl	8009cac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fe fda1 	bl	8009c10 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b0ce:	bf00      	nop
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
	...

0800b0d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fe fdf0 	bl	8009ccc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	7a5b      	ldrb	r3, [r3, #9]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d005      	beq.n	800b100 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0f4:	4b04      	ldr	r3, [pc, #16]	; (800b108 <HAL_PCD_SuspendCallback+0x30>)
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	4a03      	ldr	r2, [pc, #12]	; (800b108 <HAL_PCD_SuspendCallback+0x30>)
 800b0fa:	f043 0306 	orr.w	r3, r3, #6
 800b0fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b100:	bf00      	nop
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	e000ed00 	.word	0xe000ed00

0800b10c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	7a5b      	ldrb	r3, [r3, #9]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d007      	beq.n	800b12c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b11c:	4b08      	ldr	r3, [pc, #32]	; (800b140 <HAL_PCD_ResumeCallback+0x34>)
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	4a07      	ldr	r2, [pc, #28]	; (800b140 <HAL_PCD_ResumeCallback+0x34>)
 800b122:	f023 0306 	bic.w	r3, r3, #6
 800b126:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b128:	f000 f9f8 	bl	800b51c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b132:	4618      	mov	r0, r3
 800b134:	f7fe fde0 	bl	8009cf8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b138:	bf00      	nop
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	e000ed00 	.word	0xe000ed00

0800b144 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b14c:	4a2b      	ldr	r2, [pc, #172]	; (800b1fc <USBD_LL_Init+0xb8>)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a29      	ldr	r2, [pc, #164]	; (800b1fc <USBD_LL_Init+0xb8>)
 800b158:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b15c:	4b27      	ldr	r3, [pc, #156]	; (800b1fc <USBD_LL_Init+0xb8>)
 800b15e:	4a28      	ldr	r2, [pc, #160]	; (800b200 <USBD_LL_Init+0xbc>)
 800b160:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b162:	4b26      	ldr	r3, [pc, #152]	; (800b1fc <USBD_LL_Init+0xb8>)
 800b164:	2208      	movs	r2, #8
 800b166:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b168:	4b24      	ldr	r3, [pc, #144]	; (800b1fc <USBD_LL_Init+0xb8>)
 800b16a:	2202      	movs	r2, #2
 800b16c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b16e:	4b23      	ldr	r3, [pc, #140]	; (800b1fc <USBD_LL_Init+0xb8>)
 800b170:	2202      	movs	r2, #2
 800b172:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b174:	4b21      	ldr	r3, [pc, #132]	; (800b1fc <USBD_LL_Init+0xb8>)
 800b176:	2200      	movs	r2, #0
 800b178:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b17a:	4b20      	ldr	r3, [pc, #128]	; (800b1fc <USBD_LL_Init+0xb8>)
 800b17c:	2200      	movs	r2, #0
 800b17e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b180:	4b1e      	ldr	r3, [pc, #120]	; (800b1fc <USBD_LL_Init+0xb8>)
 800b182:	2200      	movs	r2, #0
 800b184:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b186:	4b1d      	ldr	r3, [pc, #116]	; (800b1fc <USBD_LL_Init+0xb8>)
 800b188:	2200      	movs	r2, #0
 800b18a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b18c:	481b      	ldr	r0, [pc, #108]	; (800b1fc <USBD_LL_Init+0xb8>)
 800b18e:	f7f6 fc8b 	bl	8001aa8 <HAL_PCD_Init>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b198:	f7f5 fb04 	bl	80007a4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b1a2:	2318      	movs	r3, #24
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	f7f8 f945 	bl	8003436 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b1b2:	2358      	movs	r3, #88	; 0x58
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	2180      	movs	r1, #128	; 0x80
 800b1b8:	f7f8 f93d 	bl	8003436 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b1c2:	23c0      	movs	r3, #192	; 0xc0
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	2181      	movs	r1, #129	; 0x81
 800b1c8:	f7f8 f935 	bl	8003436 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b1d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	2101      	movs	r1, #1
 800b1da:	f7f8 f92c 	bl	8003436 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b1e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2182      	movs	r1, #130	; 0x82
 800b1ec:	f7f8 f923 	bl	8003436 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	200028e4 	.word	0x200028e4
 800b200:	40005c00 	.word	0x40005c00

0800b204 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b20c:	2300      	movs	r3, #0
 800b20e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7f6 fd12 	bl	8001c44 <HAL_PCD_Start>
 800b220:	4603      	mov	r3, r0
 800b222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b224:	7bfb      	ldrb	r3, [r7, #15]
 800b226:	4618      	mov	r0, r3
 800b228:	f000 f97e 	bl	800b528 <USBD_Get_USB_Status>
 800b22c:	4603      	mov	r3, r0
 800b22e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b230:	7bbb      	ldrb	r3, [r7, #14]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b084      	sub	sp, #16
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	4608      	mov	r0, r1
 800b244:	4611      	mov	r1, r2
 800b246:	461a      	mov	r2, r3
 800b248:	4603      	mov	r3, r0
 800b24a:	70fb      	strb	r3, [r7, #3]
 800b24c:	460b      	mov	r3, r1
 800b24e:	70bb      	strb	r3, [r7, #2]
 800b250:	4613      	mov	r3, r2
 800b252:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b258:	2300      	movs	r3, #0
 800b25a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b262:	78bb      	ldrb	r3, [r7, #2]
 800b264:	883a      	ldrh	r2, [r7, #0]
 800b266:	78f9      	ldrb	r1, [r7, #3]
 800b268:	f7f6 fe59 	bl	8001f1e <HAL_PCD_EP_Open>
 800b26c:	4603      	mov	r3, r0
 800b26e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b270:	7bfb      	ldrb	r3, [r7, #15]
 800b272:	4618      	mov	r0, r3
 800b274:	f000 f958 	bl	800b528 <USBD_Get_USB_Status>
 800b278:	4603      	mov	r3, r0
 800b27a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b27c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b084      	sub	sp, #16
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	460b      	mov	r3, r1
 800b290:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2a0:	78fa      	ldrb	r2, [r7, #3]
 800b2a2:	4611      	mov	r1, r2
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7f6 fe97 	bl	8001fd8 <HAL_PCD_EP_Close>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2ae:	7bfb      	ldrb	r3, [r7, #15]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 f939 	bl	800b528 <USBD_Get_USB_Status>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2de:	78fa      	ldrb	r2, [r7, #3]
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7f6 ff40 	bl	8002168 <HAL_PCD_EP_SetStall>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2ec:	7bfb      	ldrb	r3, [r7, #15]
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 f91a 	bl	800b528 <USBD_Get_USB_Status>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b084      	sub	sp, #16
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	460b      	mov	r3, r1
 800b30c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b312:	2300      	movs	r3, #0
 800b314:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b31c:	78fa      	ldrb	r2, [r7, #3]
 800b31e:	4611      	mov	r1, r2
 800b320:	4618      	mov	r0, r3
 800b322:	f7f6 ff73 	bl	800220c <HAL_PCD_EP_ClrStall>
 800b326:	4603      	mov	r3, r0
 800b328:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b32a:	7bfb      	ldrb	r3, [r7, #15]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 f8fb 	bl	800b528 <USBD_Get_USB_Status>
 800b332:	4603      	mov	r3, r0
 800b334:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b336:	7bbb      	ldrb	r3, [r7, #14]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	460b      	mov	r3, r1
 800b34a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b352:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	da0b      	bge.n	800b374 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b35c:	78fb      	ldrb	r3, [r7, #3]
 800b35e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b362:	68f9      	ldr	r1, [r7, #12]
 800b364:	4613      	mov	r3, r2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	4413      	add	r3, r2
 800b36a:	00db      	lsls	r3, r3, #3
 800b36c:	440b      	add	r3, r1
 800b36e:	3312      	adds	r3, #18
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	e00b      	b.n	800b38c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b374:	78fb      	ldrb	r3, [r7, #3]
 800b376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b37a:	68f9      	ldr	r1, [r7, #12]
 800b37c:	4613      	mov	r3, r2
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4413      	add	r3, r2
 800b382:	00db      	lsls	r3, r3, #3
 800b384:	440b      	add	r3, r1
 800b386:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800b38a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3714      	adds	r7, #20
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b3b2:	78fa      	ldrb	r2, [r7, #3]
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7f6 fd8d 	bl	8001ed6 <HAL_PCD_SetAddress>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f000 f8b0 	bl	800b528 <USBD_Get_USB_Status>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b086      	sub	sp, #24
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	60f8      	str	r0, [r7, #12]
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	603b      	str	r3, [r7, #0]
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b3f4:	7af9      	ldrb	r1, [r7, #11]
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	f7f6 fe7e 	bl	80020fa <HAL_PCD_EP_Transmit>
 800b3fe:	4603      	mov	r3, r0
 800b400:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b402:	7dfb      	ldrb	r3, [r7, #23]
 800b404:	4618      	mov	r0, r3
 800b406:	f000 f88f 	bl	800b528 <USBD_Get_USB_Status>
 800b40a:	4603      	mov	r3, r0
 800b40c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b40e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	607a      	str	r2, [r7, #4]
 800b422:	603b      	str	r3, [r7, #0]
 800b424:	460b      	mov	r3, r1
 800b426:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b428:	2300      	movs	r3, #0
 800b42a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b436:	7af9      	ldrb	r1, [r7, #11]
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	f7f6 fe14 	bl	8002068 <HAL_PCD_EP_Receive>
 800b440:	4603      	mov	r3, r0
 800b442:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b444:	7dfb      	ldrb	r3, [r7, #23]
 800b446:	4618      	mov	r0, r3
 800b448:	f000 f86e 	bl	800b528 <USBD_Get_USB_Status>
 800b44c:	4603      	mov	r3, r0
 800b44e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b450:	7dbb      	ldrb	r3, [r7, #22]
}
 800b452:	4618      	mov	r0, r3
 800b454:	3718      	adds	r7, #24
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b082      	sub	sp, #8
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	460b      	mov	r3, r1
 800b464:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b46c:	78fa      	ldrb	r2, [r7, #3]
 800b46e:	4611      	mov	r1, r2
 800b470:	4618      	mov	r0, r3
 800b472:	f7f6 fe2a 	bl	80020ca <HAL_PCD_EP_GetRxCount>
 800b476:	4603      	mov	r3, r0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	460b      	mov	r3, r1
 800b48a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b48c:	78fb      	ldrb	r3, [r7, #3]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d002      	beq.n	800b498 <HAL_PCDEx_LPM_Callback+0x18>
 800b492:	2b01      	cmp	r3, #1
 800b494:	d013      	beq.n	800b4be <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b496:	e023      	b.n	800b4e0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	7a5b      	ldrb	r3, [r3, #9]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d007      	beq.n	800b4b0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b4a0:	f000 f83c 	bl	800b51c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4a4:	4b10      	ldr	r3, [pc, #64]	; (800b4e8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	4a0f      	ldr	r2, [pc, #60]	; (800b4e8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b4aa:	f023 0306 	bic.w	r3, r3, #6
 800b4ae:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fe fc1e 	bl	8009cf8 <USBD_LL_Resume>
    break;
 800b4bc:	e010      	b.n	800b4e0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fe fc01 	bl	8009ccc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	7a5b      	ldrb	r3, [r3, #9]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d005      	beq.n	800b4de <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4d2:	4b05      	ldr	r3, [pc, #20]	; (800b4e8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b4d4:	691b      	ldr	r3, [r3, #16]
 800b4d6:	4a04      	ldr	r2, [pc, #16]	; (800b4e8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b4d8:	f043 0306 	orr.w	r3, r3, #6
 800b4dc:	6113      	str	r3, [r2, #16]
    break;
 800b4de:	bf00      	nop
}
 800b4e0:	bf00      	nop
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	e000ed00 	.word	0xe000ed00

0800b4ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b4f4:	4b03      	ldr	r3, [pc, #12]	; (800b504 <USBD_static_malloc+0x18>)
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	370c      	adds	r7, #12
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	20002bc0 	.word	0x20002bc0

0800b508 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]

}
 800b510:	bf00      	nop
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b520:	f7f5 f8e6 	bl	80006f0 <SystemClock_Config>
}
 800b524:	bf00      	nop
 800b526:	bd80      	pop	{r7, pc}

0800b528 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b536:	79fb      	ldrb	r3, [r7, #7]
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d817      	bhi.n	800b56c <USBD_Get_USB_Status+0x44>
 800b53c:	a201      	add	r2, pc, #4	; (adr r2, 800b544 <USBD_Get_USB_Status+0x1c>)
 800b53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b542:	bf00      	nop
 800b544:	0800b555 	.word	0x0800b555
 800b548:	0800b55b 	.word	0x0800b55b
 800b54c:	0800b561 	.word	0x0800b561
 800b550:	0800b567 	.word	0x0800b567
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b554:	2300      	movs	r3, #0
 800b556:	73fb      	strb	r3, [r7, #15]
    break;
 800b558:	e00b      	b.n	800b572 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b55a:	2303      	movs	r3, #3
 800b55c:	73fb      	strb	r3, [r7, #15]
    break;
 800b55e:	e008      	b.n	800b572 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b560:	2301      	movs	r3, #1
 800b562:	73fb      	strb	r3, [r7, #15]
    break;
 800b564:	e005      	b.n	800b572 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b566:	2303      	movs	r3, #3
 800b568:	73fb      	strb	r3, [r7, #15]
    break;
 800b56a:	e002      	b.n	800b572 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b56c:	2303      	movs	r3, #3
 800b56e:	73fb      	strb	r3, [r7, #15]
    break;
 800b570:	bf00      	nop
  }
  return usb_status;
 800b572:	7bfb      	ldrb	r3, [r7, #15]
}
 800b574:	4618      	mov	r0, r3
 800b576:	3714      	adds	r7, #20
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <main>:


#include "main.h"

int main(void)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	af00      	add	r7, sp, #0
  hwInit();
 800b584:	f7f5 fe16 	bl	80011b4 <hwInit>
  apInit();
 800b588:	f7f5 f818 	bl	80005bc <apInit>

  apMain();
 800b58c:	f7f5 f81d 	bl	80005ca <apMain>
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	bd80      	pop	{r7, pc}

0800b596 <_vsniprintf_r>:
 800b596:	b530      	push	{r4, r5, lr}
 800b598:	4614      	mov	r4, r2
 800b59a:	2c00      	cmp	r4, #0
 800b59c:	b09b      	sub	sp, #108	; 0x6c
 800b59e:	4605      	mov	r5, r0
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	da05      	bge.n	800b5b0 <_vsniprintf_r+0x1a>
 800b5a4:	238b      	movs	r3, #139	; 0x8b
 800b5a6:	6003      	str	r3, [r0, #0]
 800b5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ac:	b01b      	add	sp, #108	; 0x6c
 800b5ae:	bd30      	pop	{r4, r5, pc}
 800b5b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b5b4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b5b8:	bf14      	ite	ne
 800b5ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b5be:	4623      	moveq	r3, r4
 800b5c0:	9302      	str	r3, [sp, #8]
 800b5c2:	9305      	str	r3, [sp, #20]
 800b5c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5c8:	9100      	str	r1, [sp, #0]
 800b5ca:	9104      	str	r1, [sp, #16]
 800b5cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b5d0:	4669      	mov	r1, sp
 800b5d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b5d4:	f000 f99e 	bl	800b914 <_svfiprintf_r>
 800b5d8:	1c43      	adds	r3, r0, #1
 800b5da:	bfbc      	itt	lt
 800b5dc:	238b      	movlt	r3, #139	; 0x8b
 800b5de:	602b      	strlt	r3, [r5, #0]
 800b5e0:	2c00      	cmp	r4, #0
 800b5e2:	d0e3      	beq.n	800b5ac <_vsniprintf_r+0x16>
 800b5e4:	9b00      	ldr	r3, [sp, #0]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	701a      	strb	r2, [r3, #0]
 800b5ea:	e7df      	b.n	800b5ac <_vsniprintf_r+0x16>

0800b5ec <vsniprintf>:
 800b5ec:	b507      	push	{r0, r1, r2, lr}
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	460a      	mov	r2, r1
 800b5f4:	4601      	mov	r1, r0
 800b5f6:	4803      	ldr	r0, [pc, #12]	; (800b604 <vsniprintf+0x18>)
 800b5f8:	6800      	ldr	r0, [r0, #0]
 800b5fa:	f7ff ffcc 	bl	800b596 <_vsniprintf_r>
 800b5fe:	b003      	add	sp, #12
 800b600:	f85d fb04 	ldr.w	pc, [sp], #4
 800b604:	200001d8 	.word	0x200001d8

0800b608 <memset>:
 800b608:	4402      	add	r2, r0
 800b60a:	4603      	mov	r3, r0
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d100      	bne.n	800b612 <memset+0xa>
 800b610:	4770      	bx	lr
 800b612:	f803 1b01 	strb.w	r1, [r3], #1
 800b616:	e7f9      	b.n	800b60c <memset+0x4>

0800b618 <__errno>:
 800b618:	4b01      	ldr	r3, [pc, #4]	; (800b620 <__errno+0x8>)
 800b61a:	6818      	ldr	r0, [r3, #0]
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	200001d8 	.word	0x200001d8

0800b624 <__libc_init_array>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	4d0d      	ldr	r5, [pc, #52]	; (800b65c <__libc_init_array+0x38>)
 800b628:	4c0d      	ldr	r4, [pc, #52]	; (800b660 <__libc_init_array+0x3c>)
 800b62a:	1b64      	subs	r4, r4, r5
 800b62c:	10a4      	asrs	r4, r4, #2
 800b62e:	2600      	movs	r6, #0
 800b630:	42a6      	cmp	r6, r4
 800b632:	d109      	bne.n	800b648 <__libc_init_array+0x24>
 800b634:	4d0b      	ldr	r5, [pc, #44]	; (800b664 <__libc_init_array+0x40>)
 800b636:	4c0c      	ldr	r4, [pc, #48]	; (800b668 <__libc_init_array+0x44>)
 800b638:	f000 fc6a 	bl	800bf10 <_init>
 800b63c:	1b64      	subs	r4, r4, r5
 800b63e:	10a4      	asrs	r4, r4, #2
 800b640:	2600      	movs	r6, #0
 800b642:	42a6      	cmp	r6, r4
 800b644:	d105      	bne.n	800b652 <__libc_init_array+0x2e>
 800b646:	bd70      	pop	{r4, r5, r6, pc}
 800b648:	f855 3b04 	ldr.w	r3, [r5], #4
 800b64c:	4798      	blx	r3
 800b64e:	3601      	adds	r6, #1
 800b650:	e7ee      	b.n	800b630 <__libc_init_array+0xc>
 800b652:	f855 3b04 	ldr.w	r3, [r5], #4
 800b656:	4798      	blx	r3
 800b658:	3601      	adds	r6, #1
 800b65a:	e7f2      	b.n	800b642 <__libc_init_array+0x1e>
 800b65c:	0800c010 	.word	0x0800c010
 800b660:	0800c010 	.word	0x0800c010
 800b664:	0800c010 	.word	0x0800c010
 800b668:	0800c014 	.word	0x0800c014

0800b66c <__retarget_lock_acquire_recursive>:
 800b66c:	4770      	bx	lr

0800b66e <__retarget_lock_release_recursive>:
 800b66e:	4770      	bx	lr

0800b670 <_free_r>:
 800b670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b672:	2900      	cmp	r1, #0
 800b674:	d044      	beq.n	800b700 <_free_r+0x90>
 800b676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b67a:	9001      	str	r0, [sp, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f1a1 0404 	sub.w	r4, r1, #4
 800b682:	bfb8      	it	lt
 800b684:	18e4      	addlt	r4, r4, r3
 800b686:	f000 f8df 	bl	800b848 <__malloc_lock>
 800b68a:	4a1e      	ldr	r2, [pc, #120]	; (800b704 <_free_r+0x94>)
 800b68c:	9801      	ldr	r0, [sp, #4]
 800b68e:	6813      	ldr	r3, [r2, #0]
 800b690:	b933      	cbnz	r3, 800b6a0 <_free_r+0x30>
 800b692:	6063      	str	r3, [r4, #4]
 800b694:	6014      	str	r4, [r2, #0]
 800b696:	b003      	add	sp, #12
 800b698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b69c:	f000 b8da 	b.w	800b854 <__malloc_unlock>
 800b6a0:	42a3      	cmp	r3, r4
 800b6a2:	d908      	bls.n	800b6b6 <_free_r+0x46>
 800b6a4:	6825      	ldr	r5, [r4, #0]
 800b6a6:	1961      	adds	r1, r4, r5
 800b6a8:	428b      	cmp	r3, r1
 800b6aa:	bf01      	itttt	eq
 800b6ac:	6819      	ldreq	r1, [r3, #0]
 800b6ae:	685b      	ldreq	r3, [r3, #4]
 800b6b0:	1949      	addeq	r1, r1, r5
 800b6b2:	6021      	streq	r1, [r4, #0]
 800b6b4:	e7ed      	b.n	800b692 <_free_r+0x22>
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	b10b      	cbz	r3, 800b6c0 <_free_r+0x50>
 800b6bc:	42a3      	cmp	r3, r4
 800b6be:	d9fa      	bls.n	800b6b6 <_free_r+0x46>
 800b6c0:	6811      	ldr	r1, [r2, #0]
 800b6c2:	1855      	adds	r5, r2, r1
 800b6c4:	42a5      	cmp	r5, r4
 800b6c6:	d10b      	bne.n	800b6e0 <_free_r+0x70>
 800b6c8:	6824      	ldr	r4, [r4, #0]
 800b6ca:	4421      	add	r1, r4
 800b6cc:	1854      	adds	r4, r2, r1
 800b6ce:	42a3      	cmp	r3, r4
 800b6d0:	6011      	str	r1, [r2, #0]
 800b6d2:	d1e0      	bne.n	800b696 <_free_r+0x26>
 800b6d4:	681c      	ldr	r4, [r3, #0]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	6053      	str	r3, [r2, #4]
 800b6da:	440c      	add	r4, r1
 800b6dc:	6014      	str	r4, [r2, #0]
 800b6de:	e7da      	b.n	800b696 <_free_r+0x26>
 800b6e0:	d902      	bls.n	800b6e8 <_free_r+0x78>
 800b6e2:	230c      	movs	r3, #12
 800b6e4:	6003      	str	r3, [r0, #0]
 800b6e6:	e7d6      	b.n	800b696 <_free_r+0x26>
 800b6e8:	6825      	ldr	r5, [r4, #0]
 800b6ea:	1961      	adds	r1, r4, r5
 800b6ec:	428b      	cmp	r3, r1
 800b6ee:	bf04      	itt	eq
 800b6f0:	6819      	ldreq	r1, [r3, #0]
 800b6f2:	685b      	ldreq	r3, [r3, #4]
 800b6f4:	6063      	str	r3, [r4, #4]
 800b6f6:	bf04      	itt	eq
 800b6f8:	1949      	addeq	r1, r1, r5
 800b6fa:	6021      	streq	r1, [r4, #0]
 800b6fc:	6054      	str	r4, [r2, #4]
 800b6fe:	e7ca      	b.n	800b696 <_free_r+0x26>
 800b700:	b003      	add	sp, #12
 800b702:	bd30      	pop	{r4, r5, pc}
 800b704:	20002f20 	.word	0x20002f20

0800b708 <sbrk_aligned>:
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	4e0e      	ldr	r6, [pc, #56]	; (800b744 <sbrk_aligned+0x3c>)
 800b70c:	460c      	mov	r4, r1
 800b70e:	6831      	ldr	r1, [r6, #0]
 800b710:	4605      	mov	r5, r0
 800b712:	b911      	cbnz	r1, 800b71a <sbrk_aligned+0x12>
 800b714:	f000 fba6 	bl	800be64 <_sbrk_r>
 800b718:	6030      	str	r0, [r6, #0]
 800b71a:	4621      	mov	r1, r4
 800b71c:	4628      	mov	r0, r5
 800b71e:	f000 fba1 	bl	800be64 <_sbrk_r>
 800b722:	1c43      	adds	r3, r0, #1
 800b724:	d00a      	beq.n	800b73c <sbrk_aligned+0x34>
 800b726:	1cc4      	adds	r4, r0, #3
 800b728:	f024 0403 	bic.w	r4, r4, #3
 800b72c:	42a0      	cmp	r0, r4
 800b72e:	d007      	beq.n	800b740 <sbrk_aligned+0x38>
 800b730:	1a21      	subs	r1, r4, r0
 800b732:	4628      	mov	r0, r5
 800b734:	f000 fb96 	bl	800be64 <_sbrk_r>
 800b738:	3001      	adds	r0, #1
 800b73a:	d101      	bne.n	800b740 <sbrk_aligned+0x38>
 800b73c:	f04f 34ff 	mov.w	r4, #4294967295
 800b740:	4620      	mov	r0, r4
 800b742:	bd70      	pop	{r4, r5, r6, pc}
 800b744:	20002f24 	.word	0x20002f24

0800b748 <_malloc_r>:
 800b748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b74c:	1ccd      	adds	r5, r1, #3
 800b74e:	f025 0503 	bic.w	r5, r5, #3
 800b752:	3508      	adds	r5, #8
 800b754:	2d0c      	cmp	r5, #12
 800b756:	bf38      	it	cc
 800b758:	250c      	movcc	r5, #12
 800b75a:	2d00      	cmp	r5, #0
 800b75c:	4607      	mov	r7, r0
 800b75e:	db01      	blt.n	800b764 <_malloc_r+0x1c>
 800b760:	42a9      	cmp	r1, r5
 800b762:	d905      	bls.n	800b770 <_malloc_r+0x28>
 800b764:	230c      	movs	r3, #12
 800b766:	603b      	str	r3, [r7, #0]
 800b768:	2600      	movs	r6, #0
 800b76a:	4630      	mov	r0, r6
 800b76c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b770:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b844 <_malloc_r+0xfc>
 800b774:	f000 f868 	bl	800b848 <__malloc_lock>
 800b778:	f8d8 3000 	ldr.w	r3, [r8]
 800b77c:	461c      	mov	r4, r3
 800b77e:	bb5c      	cbnz	r4, 800b7d8 <_malloc_r+0x90>
 800b780:	4629      	mov	r1, r5
 800b782:	4638      	mov	r0, r7
 800b784:	f7ff ffc0 	bl	800b708 <sbrk_aligned>
 800b788:	1c43      	adds	r3, r0, #1
 800b78a:	4604      	mov	r4, r0
 800b78c:	d155      	bne.n	800b83a <_malloc_r+0xf2>
 800b78e:	f8d8 4000 	ldr.w	r4, [r8]
 800b792:	4626      	mov	r6, r4
 800b794:	2e00      	cmp	r6, #0
 800b796:	d145      	bne.n	800b824 <_malloc_r+0xdc>
 800b798:	2c00      	cmp	r4, #0
 800b79a:	d048      	beq.n	800b82e <_malloc_r+0xe6>
 800b79c:	6823      	ldr	r3, [r4, #0]
 800b79e:	4631      	mov	r1, r6
 800b7a0:	4638      	mov	r0, r7
 800b7a2:	eb04 0903 	add.w	r9, r4, r3
 800b7a6:	f000 fb5d 	bl	800be64 <_sbrk_r>
 800b7aa:	4581      	cmp	r9, r0
 800b7ac:	d13f      	bne.n	800b82e <_malloc_r+0xe6>
 800b7ae:	6821      	ldr	r1, [r4, #0]
 800b7b0:	1a6d      	subs	r5, r5, r1
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	f7ff ffa7 	bl	800b708 <sbrk_aligned>
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	d037      	beq.n	800b82e <_malloc_r+0xe6>
 800b7be:	6823      	ldr	r3, [r4, #0]
 800b7c0:	442b      	add	r3, r5
 800b7c2:	6023      	str	r3, [r4, #0]
 800b7c4:	f8d8 3000 	ldr.w	r3, [r8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d038      	beq.n	800b83e <_malloc_r+0xf6>
 800b7cc:	685a      	ldr	r2, [r3, #4]
 800b7ce:	42a2      	cmp	r2, r4
 800b7d0:	d12b      	bne.n	800b82a <_malloc_r+0xe2>
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	605a      	str	r2, [r3, #4]
 800b7d6:	e00f      	b.n	800b7f8 <_malloc_r+0xb0>
 800b7d8:	6822      	ldr	r2, [r4, #0]
 800b7da:	1b52      	subs	r2, r2, r5
 800b7dc:	d41f      	bmi.n	800b81e <_malloc_r+0xd6>
 800b7de:	2a0b      	cmp	r2, #11
 800b7e0:	d917      	bls.n	800b812 <_malloc_r+0xca>
 800b7e2:	1961      	adds	r1, r4, r5
 800b7e4:	42a3      	cmp	r3, r4
 800b7e6:	6025      	str	r5, [r4, #0]
 800b7e8:	bf18      	it	ne
 800b7ea:	6059      	strne	r1, [r3, #4]
 800b7ec:	6863      	ldr	r3, [r4, #4]
 800b7ee:	bf08      	it	eq
 800b7f0:	f8c8 1000 	streq.w	r1, [r8]
 800b7f4:	5162      	str	r2, [r4, r5]
 800b7f6:	604b      	str	r3, [r1, #4]
 800b7f8:	4638      	mov	r0, r7
 800b7fa:	f104 060b 	add.w	r6, r4, #11
 800b7fe:	f000 f829 	bl	800b854 <__malloc_unlock>
 800b802:	f026 0607 	bic.w	r6, r6, #7
 800b806:	1d23      	adds	r3, r4, #4
 800b808:	1af2      	subs	r2, r6, r3
 800b80a:	d0ae      	beq.n	800b76a <_malloc_r+0x22>
 800b80c:	1b9b      	subs	r3, r3, r6
 800b80e:	50a3      	str	r3, [r4, r2]
 800b810:	e7ab      	b.n	800b76a <_malloc_r+0x22>
 800b812:	42a3      	cmp	r3, r4
 800b814:	6862      	ldr	r2, [r4, #4]
 800b816:	d1dd      	bne.n	800b7d4 <_malloc_r+0x8c>
 800b818:	f8c8 2000 	str.w	r2, [r8]
 800b81c:	e7ec      	b.n	800b7f8 <_malloc_r+0xb0>
 800b81e:	4623      	mov	r3, r4
 800b820:	6864      	ldr	r4, [r4, #4]
 800b822:	e7ac      	b.n	800b77e <_malloc_r+0x36>
 800b824:	4634      	mov	r4, r6
 800b826:	6876      	ldr	r6, [r6, #4]
 800b828:	e7b4      	b.n	800b794 <_malloc_r+0x4c>
 800b82a:	4613      	mov	r3, r2
 800b82c:	e7cc      	b.n	800b7c8 <_malloc_r+0x80>
 800b82e:	230c      	movs	r3, #12
 800b830:	603b      	str	r3, [r7, #0]
 800b832:	4638      	mov	r0, r7
 800b834:	f000 f80e 	bl	800b854 <__malloc_unlock>
 800b838:	e797      	b.n	800b76a <_malloc_r+0x22>
 800b83a:	6025      	str	r5, [r4, #0]
 800b83c:	e7dc      	b.n	800b7f8 <_malloc_r+0xb0>
 800b83e:	605b      	str	r3, [r3, #4]
 800b840:	deff      	udf	#255	; 0xff
 800b842:	bf00      	nop
 800b844:	20002f20 	.word	0x20002f20

0800b848 <__malloc_lock>:
 800b848:	4801      	ldr	r0, [pc, #4]	; (800b850 <__malloc_lock+0x8>)
 800b84a:	f7ff bf0f 	b.w	800b66c <__retarget_lock_acquire_recursive>
 800b84e:	bf00      	nop
 800b850:	20002f1c 	.word	0x20002f1c

0800b854 <__malloc_unlock>:
 800b854:	4801      	ldr	r0, [pc, #4]	; (800b85c <__malloc_unlock+0x8>)
 800b856:	f7ff bf0a 	b.w	800b66e <__retarget_lock_release_recursive>
 800b85a:	bf00      	nop
 800b85c:	20002f1c 	.word	0x20002f1c

0800b860 <__ssputs_r>:
 800b860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b864:	688e      	ldr	r6, [r1, #8]
 800b866:	461f      	mov	r7, r3
 800b868:	42be      	cmp	r6, r7
 800b86a:	680b      	ldr	r3, [r1, #0]
 800b86c:	4682      	mov	sl, r0
 800b86e:	460c      	mov	r4, r1
 800b870:	4690      	mov	r8, r2
 800b872:	d82c      	bhi.n	800b8ce <__ssputs_r+0x6e>
 800b874:	898a      	ldrh	r2, [r1, #12]
 800b876:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b87a:	d026      	beq.n	800b8ca <__ssputs_r+0x6a>
 800b87c:	6965      	ldr	r5, [r4, #20]
 800b87e:	6909      	ldr	r1, [r1, #16]
 800b880:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b884:	eba3 0901 	sub.w	r9, r3, r1
 800b888:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b88c:	1c7b      	adds	r3, r7, #1
 800b88e:	444b      	add	r3, r9
 800b890:	106d      	asrs	r5, r5, #1
 800b892:	429d      	cmp	r5, r3
 800b894:	bf38      	it	cc
 800b896:	461d      	movcc	r5, r3
 800b898:	0553      	lsls	r3, r2, #21
 800b89a:	d527      	bpl.n	800b8ec <__ssputs_r+0x8c>
 800b89c:	4629      	mov	r1, r5
 800b89e:	f7ff ff53 	bl	800b748 <_malloc_r>
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	b360      	cbz	r0, 800b900 <__ssputs_r+0xa0>
 800b8a6:	6921      	ldr	r1, [r4, #16]
 800b8a8:	464a      	mov	r2, r9
 800b8aa:	f000 faeb 	bl	800be84 <memcpy>
 800b8ae:	89a3      	ldrh	r3, [r4, #12]
 800b8b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8b8:	81a3      	strh	r3, [r4, #12]
 800b8ba:	6126      	str	r6, [r4, #16]
 800b8bc:	6165      	str	r5, [r4, #20]
 800b8be:	444e      	add	r6, r9
 800b8c0:	eba5 0509 	sub.w	r5, r5, r9
 800b8c4:	6026      	str	r6, [r4, #0]
 800b8c6:	60a5      	str	r5, [r4, #8]
 800b8c8:	463e      	mov	r6, r7
 800b8ca:	42be      	cmp	r6, r7
 800b8cc:	d900      	bls.n	800b8d0 <__ssputs_r+0x70>
 800b8ce:	463e      	mov	r6, r7
 800b8d0:	6820      	ldr	r0, [r4, #0]
 800b8d2:	4632      	mov	r2, r6
 800b8d4:	4641      	mov	r1, r8
 800b8d6:	f000 faab 	bl	800be30 <memmove>
 800b8da:	68a3      	ldr	r3, [r4, #8]
 800b8dc:	1b9b      	subs	r3, r3, r6
 800b8de:	60a3      	str	r3, [r4, #8]
 800b8e0:	6823      	ldr	r3, [r4, #0]
 800b8e2:	4433      	add	r3, r6
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ec:	462a      	mov	r2, r5
 800b8ee:	f000 fad7 	bl	800bea0 <_realloc_r>
 800b8f2:	4606      	mov	r6, r0
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d1e0      	bne.n	800b8ba <__ssputs_r+0x5a>
 800b8f8:	6921      	ldr	r1, [r4, #16]
 800b8fa:	4650      	mov	r0, sl
 800b8fc:	f7ff feb8 	bl	800b670 <_free_r>
 800b900:	230c      	movs	r3, #12
 800b902:	f8ca 3000 	str.w	r3, [sl]
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b90c:	81a3      	strh	r3, [r4, #12]
 800b90e:	f04f 30ff 	mov.w	r0, #4294967295
 800b912:	e7e9      	b.n	800b8e8 <__ssputs_r+0x88>

0800b914 <_svfiprintf_r>:
 800b914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b918:	4698      	mov	r8, r3
 800b91a:	898b      	ldrh	r3, [r1, #12]
 800b91c:	061b      	lsls	r3, r3, #24
 800b91e:	b09d      	sub	sp, #116	; 0x74
 800b920:	4607      	mov	r7, r0
 800b922:	460d      	mov	r5, r1
 800b924:	4614      	mov	r4, r2
 800b926:	d50e      	bpl.n	800b946 <_svfiprintf_r+0x32>
 800b928:	690b      	ldr	r3, [r1, #16]
 800b92a:	b963      	cbnz	r3, 800b946 <_svfiprintf_r+0x32>
 800b92c:	2140      	movs	r1, #64	; 0x40
 800b92e:	f7ff ff0b 	bl	800b748 <_malloc_r>
 800b932:	6028      	str	r0, [r5, #0]
 800b934:	6128      	str	r0, [r5, #16]
 800b936:	b920      	cbnz	r0, 800b942 <_svfiprintf_r+0x2e>
 800b938:	230c      	movs	r3, #12
 800b93a:	603b      	str	r3, [r7, #0]
 800b93c:	f04f 30ff 	mov.w	r0, #4294967295
 800b940:	e0d0      	b.n	800bae4 <_svfiprintf_r+0x1d0>
 800b942:	2340      	movs	r3, #64	; 0x40
 800b944:	616b      	str	r3, [r5, #20]
 800b946:	2300      	movs	r3, #0
 800b948:	9309      	str	r3, [sp, #36]	; 0x24
 800b94a:	2320      	movs	r3, #32
 800b94c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b950:	f8cd 800c 	str.w	r8, [sp, #12]
 800b954:	2330      	movs	r3, #48	; 0x30
 800b956:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bafc <_svfiprintf_r+0x1e8>
 800b95a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b95e:	f04f 0901 	mov.w	r9, #1
 800b962:	4623      	mov	r3, r4
 800b964:	469a      	mov	sl, r3
 800b966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b96a:	b10a      	cbz	r2, 800b970 <_svfiprintf_r+0x5c>
 800b96c:	2a25      	cmp	r2, #37	; 0x25
 800b96e:	d1f9      	bne.n	800b964 <_svfiprintf_r+0x50>
 800b970:	ebba 0b04 	subs.w	fp, sl, r4
 800b974:	d00b      	beq.n	800b98e <_svfiprintf_r+0x7a>
 800b976:	465b      	mov	r3, fp
 800b978:	4622      	mov	r2, r4
 800b97a:	4629      	mov	r1, r5
 800b97c:	4638      	mov	r0, r7
 800b97e:	f7ff ff6f 	bl	800b860 <__ssputs_r>
 800b982:	3001      	adds	r0, #1
 800b984:	f000 80a9 	beq.w	800bada <_svfiprintf_r+0x1c6>
 800b988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b98a:	445a      	add	r2, fp
 800b98c:	9209      	str	r2, [sp, #36]	; 0x24
 800b98e:	f89a 3000 	ldrb.w	r3, [sl]
 800b992:	2b00      	cmp	r3, #0
 800b994:	f000 80a1 	beq.w	800bada <_svfiprintf_r+0x1c6>
 800b998:	2300      	movs	r3, #0
 800b99a:	f04f 32ff 	mov.w	r2, #4294967295
 800b99e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9a2:	f10a 0a01 	add.w	sl, sl, #1
 800b9a6:	9304      	str	r3, [sp, #16]
 800b9a8:	9307      	str	r3, [sp, #28]
 800b9aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9ae:	931a      	str	r3, [sp, #104]	; 0x68
 800b9b0:	4654      	mov	r4, sl
 800b9b2:	2205      	movs	r2, #5
 800b9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b8:	4850      	ldr	r0, [pc, #320]	; (800bafc <_svfiprintf_r+0x1e8>)
 800b9ba:	f7f4 fc31 	bl	8000220 <memchr>
 800b9be:	9a04      	ldr	r2, [sp, #16]
 800b9c0:	b9d8      	cbnz	r0, 800b9fa <_svfiprintf_r+0xe6>
 800b9c2:	06d0      	lsls	r0, r2, #27
 800b9c4:	bf44      	itt	mi
 800b9c6:	2320      	movmi	r3, #32
 800b9c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9cc:	0711      	lsls	r1, r2, #28
 800b9ce:	bf44      	itt	mi
 800b9d0:	232b      	movmi	r3, #43	; 0x2b
 800b9d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b9da:	2b2a      	cmp	r3, #42	; 0x2a
 800b9dc:	d015      	beq.n	800ba0a <_svfiprintf_r+0xf6>
 800b9de:	9a07      	ldr	r2, [sp, #28]
 800b9e0:	4654      	mov	r4, sl
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	f04f 0c0a 	mov.w	ip, #10
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9ee:	3b30      	subs	r3, #48	; 0x30
 800b9f0:	2b09      	cmp	r3, #9
 800b9f2:	d94d      	bls.n	800ba90 <_svfiprintf_r+0x17c>
 800b9f4:	b1b0      	cbz	r0, 800ba24 <_svfiprintf_r+0x110>
 800b9f6:	9207      	str	r2, [sp, #28]
 800b9f8:	e014      	b.n	800ba24 <_svfiprintf_r+0x110>
 800b9fa:	eba0 0308 	sub.w	r3, r0, r8
 800b9fe:	fa09 f303 	lsl.w	r3, r9, r3
 800ba02:	4313      	orrs	r3, r2
 800ba04:	9304      	str	r3, [sp, #16]
 800ba06:	46a2      	mov	sl, r4
 800ba08:	e7d2      	b.n	800b9b0 <_svfiprintf_r+0x9c>
 800ba0a:	9b03      	ldr	r3, [sp, #12]
 800ba0c:	1d19      	adds	r1, r3, #4
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	9103      	str	r1, [sp, #12]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	bfbb      	ittet	lt
 800ba16:	425b      	neglt	r3, r3
 800ba18:	f042 0202 	orrlt.w	r2, r2, #2
 800ba1c:	9307      	strge	r3, [sp, #28]
 800ba1e:	9307      	strlt	r3, [sp, #28]
 800ba20:	bfb8      	it	lt
 800ba22:	9204      	strlt	r2, [sp, #16]
 800ba24:	7823      	ldrb	r3, [r4, #0]
 800ba26:	2b2e      	cmp	r3, #46	; 0x2e
 800ba28:	d10c      	bne.n	800ba44 <_svfiprintf_r+0x130>
 800ba2a:	7863      	ldrb	r3, [r4, #1]
 800ba2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba2e:	d134      	bne.n	800ba9a <_svfiprintf_r+0x186>
 800ba30:	9b03      	ldr	r3, [sp, #12]
 800ba32:	1d1a      	adds	r2, r3, #4
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	9203      	str	r2, [sp, #12]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	bfb8      	it	lt
 800ba3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba40:	3402      	adds	r4, #2
 800ba42:	9305      	str	r3, [sp, #20]
 800ba44:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bb0c <_svfiprintf_r+0x1f8>
 800ba48:	7821      	ldrb	r1, [r4, #0]
 800ba4a:	2203      	movs	r2, #3
 800ba4c:	4650      	mov	r0, sl
 800ba4e:	f7f4 fbe7 	bl	8000220 <memchr>
 800ba52:	b138      	cbz	r0, 800ba64 <_svfiprintf_r+0x150>
 800ba54:	9b04      	ldr	r3, [sp, #16]
 800ba56:	eba0 000a 	sub.w	r0, r0, sl
 800ba5a:	2240      	movs	r2, #64	; 0x40
 800ba5c:	4082      	lsls	r2, r0
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	3401      	adds	r4, #1
 800ba62:	9304      	str	r3, [sp, #16]
 800ba64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba68:	4825      	ldr	r0, [pc, #148]	; (800bb00 <_svfiprintf_r+0x1ec>)
 800ba6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba6e:	2206      	movs	r2, #6
 800ba70:	f7f4 fbd6 	bl	8000220 <memchr>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d038      	beq.n	800baea <_svfiprintf_r+0x1d6>
 800ba78:	4b22      	ldr	r3, [pc, #136]	; (800bb04 <_svfiprintf_r+0x1f0>)
 800ba7a:	bb1b      	cbnz	r3, 800bac4 <_svfiprintf_r+0x1b0>
 800ba7c:	9b03      	ldr	r3, [sp, #12]
 800ba7e:	3307      	adds	r3, #7
 800ba80:	f023 0307 	bic.w	r3, r3, #7
 800ba84:	3308      	adds	r3, #8
 800ba86:	9303      	str	r3, [sp, #12]
 800ba88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba8a:	4433      	add	r3, r6
 800ba8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba8e:	e768      	b.n	800b962 <_svfiprintf_r+0x4e>
 800ba90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba94:	460c      	mov	r4, r1
 800ba96:	2001      	movs	r0, #1
 800ba98:	e7a6      	b.n	800b9e8 <_svfiprintf_r+0xd4>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	3401      	adds	r4, #1
 800ba9e:	9305      	str	r3, [sp, #20]
 800baa0:	4619      	mov	r1, r3
 800baa2:	f04f 0c0a 	mov.w	ip, #10
 800baa6:	4620      	mov	r0, r4
 800baa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baac:	3a30      	subs	r2, #48	; 0x30
 800baae:	2a09      	cmp	r2, #9
 800bab0:	d903      	bls.n	800baba <_svfiprintf_r+0x1a6>
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d0c6      	beq.n	800ba44 <_svfiprintf_r+0x130>
 800bab6:	9105      	str	r1, [sp, #20]
 800bab8:	e7c4      	b.n	800ba44 <_svfiprintf_r+0x130>
 800baba:	fb0c 2101 	mla	r1, ip, r1, r2
 800babe:	4604      	mov	r4, r0
 800bac0:	2301      	movs	r3, #1
 800bac2:	e7f0      	b.n	800baa6 <_svfiprintf_r+0x192>
 800bac4:	ab03      	add	r3, sp, #12
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	462a      	mov	r2, r5
 800baca:	4b0f      	ldr	r3, [pc, #60]	; (800bb08 <_svfiprintf_r+0x1f4>)
 800bacc:	a904      	add	r1, sp, #16
 800bace:	4638      	mov	r0, r7
 800bad0:	f3af 8000 	nop.w
 800bad4:	1c42      	adds	r2, r0, #1
 800bad6:	4606      	mov	r6, r0
 800bad8:	d1d6      	bne.n	800ba88 <_svfiprintf_r+0x174>
 800bada:	89ab      	ldrh	r3, [r5, #12]
 800badc:	065b      	lsls	r3, r3, #25
 800bade:	f53f af2d 	bmi.w	800b93c <_svfiprintf_r+0x28>
 800bae2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bae4:	b01d      	add	sp, #116	; 0x74
 800bae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baea:	ab03      	add	r3, sp, #12
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	462a      	mov	r2, r5
 800baf0:	4b05      	ldr	r3, [pc, #20]	; (800bb08 <_svfiprintf_r+0x1f4>)
 800baf2:	a904      	add	r1, sp, #16
 800baf4:	4638      	mov	r0, r7
 800baf6:	f000 f879 	bl	800bbec <_printf_i>
 800bafa:	e7eb      	b.n	800bad4 <_svfiprintf_r+0x1c0>
 800bafc:	0800bfd4 	.word	0x0800bfd4
 800bb00:	0800bfde 	.word	0x0800bfde
 800bb04:	00000000 	.word	0x00000000
 800bb08:	0800b861 	.word	0x0800b861
 800bb0c:	0800bfda 	.word	0x0800bfda

0800bb10 <_printf_common>:
 800bb10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb14:	4616      	mov	r6, r2
 800bb16:	4699      	mov	r9, r3
 800bb18:	688a      	ldr	r2, [r1, #8]
 800bb1a:	690b      	ldr	r3, [r1, #16]
 800bb1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb20:	4293      	cmp	r3, r2
 800bb22:	bfb8      	it	lt
 800bb24:	4613      	movlt	r3, r2
 800bb26:	6033      	str	r3, [r6, #0]
 800bb28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb2c:	4607      	mov	r7, r0
 800bb2e:	460c      	mov	r4, r1
 800bb30:	b10a      	cbz	r2, 800bb36 <_printf_common+0x26>
 800bb32:	3301      	adds	r3, #1
 800bb34:	6033      	str	r3, [r6, #0]
 800bb36:	6823      	ldr	r3, [r4, #0]
 800bb38:	0699      	lsls	r1, r3, #26
 800bb3a:	bf42      	ittt	mi
 800bb3c:	6833      	ldrmi	r3, [r6, #0]
 800bb3e:	3302      	addmi	r3, #2
 800bb40:	6033      	strmi	r3, [r6, #0]
 800bb42:	6825      	ldr	r5, [r4, #0]
 800bb44:	f015 0506 	ands.w	r5, r5, #6
 800bb48:	d106      	bne.n	800bb58 <_printf_common+0x48>
 800bb4a:	f104 0a19 	add.w	sl, r4, #25
 800bb4e:	68e3      	ldr	r3, [r4, #12]
 800bb50:	6832      	ldr	r2, [r6, #0]
 800bb52:	1a9b      	subs	r3, r3, r2
 800bb54:	42ab      	cmp	r3, r5
 800bb56:	dc26      	bgt.n	800bba6 <_printf_common+0x96>
 800bb58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb5c:	1e13      	subs	r3, r2, #0
 800bb5e:	6822      	ldr	r2, [r4, #0]
 800bb60:	bf18      	it	ne
 800bb62:	2301      	movne	r3, #1
 800bb64:	0692      	lsls	r2, r2, #26
 800bb66:	d42b      	bmi.n	800bbc0 <_printf_common+0xb0>
 800bb68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb6c:	4649      	mov	r1, r9
 800bb6e:	4638      	mov	r0, r7
 800bb70:	47c0      	blx	r8
 800bb72:	3001      	adds	r0, #1
 800bb74:	d01e      	beq.n	800bbb4 <_printf_common+0xa4>
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	6922      	ldr	r2, [r4, #16]
 800bb7a:	f003 0306 	and.w	r3, r3, #6
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	bf02      	ittt	eq
 800bb82:	68e5      	ldreq	r5, [r4, #12]
 800bb84:	6833      	ldreq	r3, [r6, #0]
 800bb86:	1aed      	subeq	r5, r5, r3
 800bb88:	68a3      	ldr	r3, [r4, #8]
 800bb8a:	bf0c      	ite	eq
 800bb8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb90:	2500      	movne	r5, #0
 800bb92:	4293      	cmp	r3, r2
 800bb94:	bfc4      	itt	gt
 800bb96:	1a9b      	subgt	r3, r3, r2
 800bb98:	18ed      	addgt	r5, r5, r3
 800bb9a:	2600      	movs	r6, #0
 800bb9c:	341a      	adds	r4, #26
 800bb9e:	42b5      	cmp	r5, r6
 800bba0:	d11a      	bne.n	800bbd8 <_printf_common+0xc8>
 800bba2:	2000      	movs	r0, #0
 800bba4:	e008      	b.n	800bbb8 <_printf_common+0xa8>
 800bba6:	2301      	movs	r3, #1
 800bba8:	4652      	mov	r2, sl
 800bbaa:	4649      	mov	r1, r9
 800bbac:	4638      	mov	r0, r7
 800bbae:	47c0      	blx	r8
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	d103      	bne.n	800bbbc <_printf_common+0xac>
 800bbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbbc:	3501      	adds	r5, #1
 800bbbe:	e7c6      	b.n	800bb4e <_printf_common+0x3e>
 800bbc0:	18e1      	adds	r1, r4, r3
 800bbc2:	1c5a      	adds	r2, r3, #1
 800bbc4:	2030      	movs	r0, #48	; 0x30
 800bbc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbca:	4422      	add	r2, r4
 800bbcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbd4:	3302      	adds	r3, #2
 800bbd6:	e7c7      	b.n	800bb68 <_printf_common+0x58>
 800bbd8:	2301      	movs	r3, #1
 800bbda:	4622      	mov	r2, r4
 800bbdc:	4649      	mov	r1, r9
 800bbde:	4638      	mov	r0, r7
 800bbe0:	47c0      	blx	r8
 800bbe2:	3001      	adds	r0, #1
 800bbe4:	d0e6      	beq.n	800bbb4 <_printf_common+0xa4>
 800bbe6:	3601      	adds	r6, #1
 800bbe8:	e7d9      	b.n	800bb9e <_printf_common+0x8e>
	...

0800bbec <_printf_i>:
 800bbec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbf0:	7e0f      	ldrb	r7, [r1, #24]
 800bbf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bbf4:	2f78      	cmp	r7, #120	; 0x78
 800bbf6:	4691      	mov	r9, r2
 800bbf8:	4680      	mov	r8, r0
 800bbfa:	460c      	mov	r4, r1
 800bbfc:	469a      	mov	sl, r3
 800bbfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc02:	d807      	bhi.n	800bc14 <_printf_i+0x28>
 800bc04:	2f62      	cmp	r7, #98	; 0x62
 800bc06:	d80a      	bhi.n	800bc1e <_printf_i+0x32>
 800bc08:	2f00      	cmp	r7, #0
 800bc0a:	f000 80d4 	beq.w	800bdb6 <_printf_i+0x1ca>
 800bc0e:	2f58      	cmp	r7, #88	; 0x58
 800bc10:	f000 80c0 	beq.w	800bd94 <_printf_i+0x1a8>
 800bc14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc1c:	e03a      	b.n	800bc94 <_printf_i+0xa8>
 800bc1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc22:	2b15      	cmp	r3, #21
 800bc24:	d8f6      	bhi.n	800bc14 <_printf_i+0x28>
 800bc26:	a101      	add	r1, pc, #4	; (adr r1, 800bc2c <_printf_i+0x40>)
 800bc28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc2c:	0800bc85 	.word	0x0800bc85
 800bc30:	0800bc99 	.word	0x0800bc99
 800bc34:	0800bc15 	.word	0x0800bc15
 800bc38:	0800bc15 	.word	0x0800bc15
 800bc3c:	0800bc15 	.word	0x0800bc15
 800bc40:	0800bc15 	.word	0x0800bc15
 800bc44:	0800bc99 	.word	0x0800bc99
 800bc48:	0800bc15 	.word	0x0800bc15
 800bc4c:	0800bc15 	.word	0x0800bc15
 800bc50:	0800bc15 	.word	0x0800bc15
 800bc54:	0800bc15 	.word	0x0800bc15
 800bc58:	0800bd9d 	.word	0x0800bd9d
 800bc5c:	0800bcc5 	.word	0x0800bcc5
 800bc60:	0800bd57 	.word	0x0800bd57
 800bc64:	0800bc15 	.word	0x0800bc15
 800bc68:	0800bc15 	.word	0x0800bc15
 800bc6c:	0800bdbf 	.word	0x0800bdbf
 800bc70:	0800bc15 	.word	0x0800bc15
 800bc74:	0800bcc5 	.word	0x0800bcc5
 800bc78:	0800bc15 	.word	0x0800bc15
 800bc7c:	0800bc15 	.word	0x0800bc15
 800bc80:	0800bd5f 	.word	0x0800bd5f
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	1d1a      	adds	r2, r3, #4
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	602a      	str	r2, [r5, #0]
 800bc8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc94:	2301      	movs	r3, #1
 800bc96:	e09f      	b.n	800bdd8 <_printf_i+0x1ec>
 800bc98:	6820      	ldr	r0, [r4, #0]
 800bc9a:	682b      	ldr	r3, [r5, #0]
 800bc9c:	0607      	lsls	r7, r0, #24
 800bc9e:	f103 0104 	add.w	r1, r3, #4
 800bca2:	6029      	str	r1, [r5, #0]
 800bca4:	d501      	bpl.n	800bcaa <_printf_i+0xbe>
 800bca6:	681e      	ldr	r6, [r3, #0]
 800bca8:	e003      	b.n	800bcb2 <_printf_i+0xc6>
 800bcaa:	0646      	lsls	r6, r0, #25
 800bcac:	d5fb      	bpl.n	800bca6 <_printf_i+0xba>
 800bcae:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bcb2:	2e00      	cmp	r6, #0
 800bcb4:	da03      	bge.n	800bcbe <_printf_i+0xd2>
 800bcb6:	232d      	movs	r3, #45	; 0x2d
 800bcb8:	4276      	negs	r6, r6
 800bcba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcbe:	485a      	ldr	r0, [pc, #360]	; (800be28 <_printf_i+0x23c>)
 800bcc0:	230a      	movs	r3, #10
 800bcc2:	e012      	b.n	800bcea <_printf_i+0xfe>
 800bcc4:	682b      	ldr	r3, [r5, #0]
 800bcc6:	6820      	ldr	r0, [r4, #0]
 800bcc8:	1d19      	adds	r1, r3, #4
 800bcca:	6029      	str	r1, [r5, #0]
 800bccc:	0605      	lsls	r5, r0, #24
 800bcce:	d501      	bpl.n	800bcd4 <_printf_i+0xe8>
 800bcd0:	681e      	ldr	r6, [r3, #0]
 800bcd2:	e002      	b.n	800bcda <_printf_i+0xee>
 800bcd4:	0641      	lsls	r1, r0, #25
 800bcd6:	d5fb      	bpl.n	800bcd0 <_printf_i+0xe4>
 800bcd8:	881e      	ldrh	r6, [r3, #0]
 800bcda:	4853      	ldr	r0, [pc, #332]	; (800be28 <_printf_i+0x23c>)
 800bcdc:	2f6f      	cmp	r7, #111	; 0x6f
 800bcde:	bf0c      	ite	eq
 800bce0:	2308      	moveq	r3, #8
 800bce2:	230a      	movne	r3, #10
 800bce4:	2100      	movs	r1, #0
 800bce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcea:	6865      	ldr	r5, [r4, #4]
 800bcec:	60a5      	str	r5, [r4, #8]
 800bcee:	2d00      	cmp	r5, #0
 800bcf0:	bfa2      	ittt	ge
 800bcf2:	6821      	ldrge	r1, [r4, #0]
 800bcf4:	f021 0104 	bicge.w	r1, r1, #4
 800bcf8:	6021      	strge	r1, [r4, #0]
 800bcfa:	b90e      	cbnz	r6, 800bd00 <_printf_i+0x114>
 800bcfc:	2d00      	cmp	r5, #0
 800bcfe:	d04b      	beq.n	800bd98 <_printf_i+0x1ac>
 800bd00:	4615      	mov	r5, r2
 800bd02:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd06:	fb03 6711 	mls	r7, r3, r1, r6
 800bd0a:	5dc7      	ldrb	r7, [r0, r7]
 800bd0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd10:	4637      	mov	r7, r6
 800bd12:	42bb      	cmp	r3, r7
 800bd14:	460e      	mov	r6, r1
 800bd16:	d9f4      	bls.n	800bd02 <_printf_i+0x116>
 800bd18:	2b08      	cmp	r3, #8
 800bd1a:	d10b      	bne.n	800bd34 <_printf_i+0x148>
 800bd1c:	6823      	ldr	r3, [r4, #0]
 800bd1e:	07de      	lsls	r6, r3, #31
 800bd20:	d508      	bpl.n	800bd34 <_printf_i+0x148>
 800bd22:	6923      	ldr	r3, [r4, #16]
 800bd24:	6861      	ldr	r1, [r4, #4]
 800bd26:	4299      	cmp	r1, r3
 800bd28:	bfde      	ittt	le
 800bd2a:	2330      	movle	r3, #48	; 0x30
 800bd2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd30:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd34:	1b52      	subs	r2, r2, r5
 800bd36:	6122      	str	r2, [r4, #16]
 800bd38:	f8cd a000 	str.w	sl, [sp]
 800bd3c:	464b      	mov	r3, r9
 800bd3e:	aa03      	add	r2, sp, #12
 800bd40:	4621      	mov	r1, r4
 800bd42:	4640      	mov	r0, r8
 800bd44:	f7ff fee4 	bl	800bb10 <_printf_common>
 800bd48:	3001      	adds	r0, #1
 800bd4a:	d14a      	bne.n	800bde2 <_printf_i+0x1f6>
 800bd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd50:	b004      	add	sp, #16
 800bd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd56:	6823      	ldr	r3, [r4, #0]
 800bd58:	f043 0320 	orr.w	r3, r3, #32
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	4833      	ldr	r0, [pc, #204]	; (800be2c <_printf_i+0x240>)
 800bd60:	2778      	movs	r7, #120	; 0x78
 800bd62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	6829      	ldr	r1, [r5, #0]
 800bd6a:	061f      	lsls	r7, r3, #24
 800bd6c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd70:	d402      	bmi.n	800bd78 <_printf_i+0x18c>
 800bd72:	065f      	lsls	r7, r3, #25
 800bd74:	bf48      	it	mi
 800bd76:	b2b6      	uxthmi	r6, r6
 800bd78:	07df      	lsls	r7, r3, #31
 800bd7a:	bf48      	it	mi
 800bd7c:	f043 0320 	orrmi.w	r3, r3, #32
 800bd80:	6029      	str	r1, [r5, #0]
 800bd82:	bf48      	it	mi
 800bd84:	6023      	strmi	r3, [r4, #0]
 800bd86:	b91e      	cbnz	r6, 800bd90 <_printf_i+0x1a4>
 800bd88:	6823      	ldr	r3, [r4, #0]
 800bd8a:	f023 0320 	bic.w	r3, r3, #32
 800bd8e:	6023      	str	r3, [r4, #0]
 800bd90:	2310      	movs	r3, #16
 800bd92:	e7a7      	b.n	800bce4 <_printf_i+0xf8>
 800bd94:	4824      	ldr	r0, [pc, #144]	; (800be28 <_printf_i+0x23c>)
 800bd96:	e7e4      	b.n	800bd62 <_printf_i+0x176>
 800bd98:	4615      	mov	r5, r2
 800bd9a:	e7bd      	b.n	800bd18 <_printf_i+0x12c>
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	6826      	ldr	r6, [r4, #0]
 800bda0:	6961      	ldr	r1, [r4, #20]
 800bda2:	1d18      	adds	r0, r3, #4
 800bda4:	6028      	str	r0, [r5, #0]
 800bda6:	0635      	lsls	r5, r6, #24
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	d501      	bpl.n	800bdb0 <_printf_i+0x1c4>
 800bdac:	6019      	str	r1, [r3, #0]
 800bdae:	e002      	b.n	800bdb6 <_printf_i+0x1ca>
 800bdb0:	0670      	lsls	r0, r6, #25
 800bdb2:	d5fb      	bpl.n	800bdac <_printf_i+0x1c0>
 800bdb4:	8019      	strh	r1, [r3, #0]
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	6123      	str	r3, [r4, #16]
 800bdba:	4615      	mov	r5, r2
 800bdbc:	e7bc      	b.n	800bd38 <_printf_i+0x14c>
 800bdbe:	682b      	ldr	r3, [r5, #0]
 800bdc0:	1d1a      	adds	r2, r3, #4
 800bdc2:	602a      	str	r2, [r5, #0]
 800bdc4:	681d      	ldr	r5, [r3, #0]
 800bdc6:	6862      	ldr	r2, [r4, #4]
 800bdc8:	2100      	movs	r1, #0
 800bdca:	4628      	mov	r0, r5
 800bdcc:	f7f4 fa28 	bl	8000220 <memchr>
 800bdd0:	b108      	cbz	r0, 800bdd6 <_printf_i+0x1ea>
 800bdd2:	1b40      	subs	r0, r0, r5
 800bdd4:	6060      	str	r0, [r4, #4]
 800bdd6:	6863      	ldr	r3, [r4, #4]
 800bdd8:	6123      	str	r3, [r4, #16]
 800bdda:	2300      	movs	r3, #0
 800bddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bde0:	e7aa      	b.n	800bd38 <_printf_i+0x14c>
 800bde2:	6923      	ldr	r3, [r4, #16]
 800bde4:	462a      	mov	r2, r5
 800bde6:	4649      	mov	r1, r9
 800bde8:	4640      	mov	r0, r8
 800bdea:	47d0      	blx	sl
 800bdec:	3001      	adds	r0, #1
 800bdee:	d0ad      	beq.n	800bd4c <_printf_i+0x160>
 800bdf0:	6823      	ldr	r3, [r4, #0]
 800bdf2:	079b      	lsls	r3, r3, #30
 800bdf4:	d413      	bmi.n	800be1e <_printf_i+0x232>
 800bdf6:	68e0      	ldr	r0, [r4, #12]
 800bdf8:	9b03      	ldr	r3, [sp, #12]
 800bdfa:	4298      	cmp	r0, r3
 800bdfc:	bfb8      	it	lt
 800bdfe:	4618      	movlt	r0, r3
 800be00:	e7a6      	b.n	800bd50 <_printf_i+0x164>
 800be02:	2301      	movs	r3, #1
 800be04:	4632      	mov	r2, r6
 800be06:	4649      	mov	r1, r9
 800be08:	4640      	mov	r0, r8
 800be0a:	47d0      	blx	sl
 800be0c:	3001      	adds	r0, #1
 800be0e:	d09d      	beq.n	800bd4c <_printf_i+0x160>
 800be10:	3501      	adds	r5, #1
 800be12:	68e3      	ldr	r3, [r4, #12]
 800be14:	9903      	ldr	r1, [sp, #12]
 800be16:	1a5b      	subs	r3, r3, r1
 800be18:	42ab      	cmp	r3, r5
 800be1a:	dcf2      	bgt.n	800be02 <_printf_i+0x216>
 800be1c:	e7eb      	b.n	800bdf6 <_printf_i+0x20a>
 800be1e:	2500      	movs	r5, #0
 800be20:	f104 0619 	add.w	r6, r4, #25
 800be24:	e7f5      	b.n	800be12 <_printf_i+0x226>
 800be26:	bf00      	nop
 800be28:	0800bfe5 	.word	0x0800bfe5
 800be2c:	0800bff6 	.word	0x0800bff6

0800be30 <memmove>:
 800be30:	4288      	cmp	r0, r1
 800be32:	b510      	push	{r4, lr}
 800be34:	eb01 0402 	add.w	r4, r1, r2
 800be38:	d902      	bls.n	800be40 <memmove+0x10>
 800be3a:	4284      	cmp	r4, r0
 800be3c:	4623      	mov	r3, r4
 800be3e:	d807      	bhi.n	800be50 <memmove+0x20>
 800be40:	1e43      	subs	r3, r0, #1
 800be42:	42a1      	cmp	r1, r4
 800be44:	d008      	beq.n	800be58 <memmove+0x28>
 800be46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be4e:	e7f8      	b.n	800be42 <memmove+0x12>
 800be50:	4402      	add	r2, r0
 800be52:	4601      	mov	r1, r0
 800be54:	428a      	cmp	r2, r1
 800be56:	d100      	bne.n	800be5a <memmove+0x2a>
 800be58:	bd10      	pop	{r4, pc}
 800be5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be62:	e7f7      	b.n	800be54 <memmove+0x24>

0800be64 <_sbrk_r>:
 800be64:	b538      	push	{r3, r4, r5, lr}
 800be66:	4d06      	ldr	r5, [pc, #24]	; (800be80 <_sbrk_r+0x1c>)
 800be68:	2300      	movs	r3, #0
 800be6a:	4604      	mov	r4, r0
 800be6c:	4608      	mov	r0, r1
 800be6e:	602b      	str	r3, [r5, #0]
 800be70:	f7f4 fd02 	bl	8000878 <_sbrk>
 800be74:	1c43      	adds	r3, r0, #1
 800be76:	d102      	bne.n	800be7e <_sbrk_r+0x1a>
 800be78:	682b      	ldr	r3, [r5, #0]
 800be7a:	b103      	cbz	r3, 800be7e <_sbrk_r+0x1a>
 800be7c:	6023      	str	r3, [r4, #0]
 800be7e:	bd38      	pop	{r3, r4, r5, pc}
 800be80:	20002f18 	.word	0x20002f18

0800be84 <memcpy>:
 800be84:	440a      	add	r2, r1
 800be86:	4291      	cmp	r1, r2
 800be88:	f100 33ff 	add.w	r3, r0, #4294967295
 800be8c:	d100      	bne.n	800be90 <memcpy+0xc>
 800be8e:	4770      	bx	lr
 800be90:	b510      	push	{r4, lr}
 800be92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be9a:	4291      	cmp	r1, r2
 800be9c:	d1f9      	bne.n	800be92 <memcpy+0xe>
 800be9e:	bd10      	pop	{r4, pc}

0800bea0 <_realloc_r>:
 800bea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea4:	4680      	mov	r8, r0
 800bea6:	4614      	mov	r4, r2
 800bea8:	460e      	mov	r6, r1
 800beaa:	b921      	cbnz	r1, 800beb6 <_realloc_r+0x16>
 800beac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beb0:	4611      	mov	r1, r2
 800beb2:	f7ff bc49 	b.w	800b748 <_malloc_r>
 800beb6:	b92a      	cbnz	r2, 800bec4 <_realloc_r+0x24>
 800beb8:	f7ff fbda 	bl	800b670 <_free_r>
 800bebc:	4625      	mov	r5, r4
 800bebe:	4628      	mov	r0, r5
 800bec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec4:	f000 f81b 	bl	800befe <_malloc_usable_size_r>
 800bec8:	4284      	cmp	r4, r0
 800beca:	4607      	mov	r7, r0
 800becc:	d802      	bhi.n	800bed4 <_realloc_r+0x34>
 800bece:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bed2:	d812      	bhi.n	800befa <_realloc_r+0x5a>
 800bed4:	4621      	mov	r1, r4
 800bed6:	4640      	mov	r0, r8
 800bed8:	f7ff fc36 	bl	800b748 <_malloc_r>
 800bedc:	4605      	mov	r5, r0
 800bede:	2800      	cmp	r0, #0
 800bee0:	d0ed      	beq.n	800bebe <_realloc_r+0x1e>
 800bee2:	42bc      	cmp	r4, r7
 800bee4:	4622      	mov	r2, r4
 800bee6:	4631      	mov	r1, r6
 800bee8:	bf28      	it	cs
 800beea:	463a      	movcs	r2, r7
 800beec:	f7ff ffca 	bl	800be84 <memcpy>
 800bef0:	4631      	mov	r1, r6
 800bef2:	4640      	mov	r0, r8
 800bef4:	f7ff fbbc 	bl	800b670 <_free_r>
 800bef8:	e7e1      	b.n	800bebe <_realloc_r+0x1e>
 800befa:	4635      	mov	r5, r6
 800befc:	e7df      	b.n	800bebe <_realloc_r+0x1e>

0800befe <_malloc_usable_size_r>:
 800befe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf02:	1f18      	subs	r0, r3, #4
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	bfbc      	itt	lt
 800bf08:	580b      	ldrlt	r3, [r1, r0]
 800bf0a:	18c0      	addlt	r0, r0, r3
 800bf0c:	4770      	bx	lr
	...

0800bf10 <_init>:
 800bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf12:	bf00      	nop
 800bf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf16:	bc08      	pop	{r3}
 800bf18:	469e      	mov	lr, r3
 800bf1a:	4770      	bx	lr

0800bf1c <_fini>:
 800bf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1e:	bf00      	nop
 800bf20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf22:	bc08      	pop	{r3}
 800bf24:	469e      	mov	lr, r3
 800bf26:	4770      	bx	lr
