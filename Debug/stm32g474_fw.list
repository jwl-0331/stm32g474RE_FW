
stm32g474_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c860  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800ca40  0800ca40  0001ca40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb88  0800cb88  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb88  0800cb88  0001cb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb90  0800cb90  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb90  0800cb90  0001cb90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb94  0800cb94  0001cb94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800cb98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  000201fc  2**0
                  CONTENTS
 10 .bss          00002d98  200001fc  200001fc  000201fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002f94  20002f94  000201fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d8e9  00000000  00000000  0002026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000055be  00000000  00000000  0003db58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001800  00000000  00000000  00043118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001203  00000000  00000000  00044918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bd45  00000000  00000000  00045b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00025f1f  00000000  00000000  00071860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f69a5  00000000  00000000  0009777f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006438  00000000  00000000  0018e124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0019455c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ca28 	.word	0x0800ca28

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0800ca28 	.word	0x0800ca28

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <apInit>:
static uint32_t g_LEDOffTime = 200;
static uint32_t nextmill = 0;
*/

void apInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <apMain>:

void apMain(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b092      	sub	sp, #72	; 0x48
 80005d0:	af00      	add	r7, sp, #0
  uint32_t pre_time1 = millis();
 80005d2:	f000 f90c 	bl	80007ee <millis>
 80005d6:	6478      	str	r0, [r7, #68]	; 0x44
  uint32_t pre_time2 = millis();
 80005d8:	f000 f909 	bl	80007ee <millis>
 80005dc:	63b8      	str	r0, [r7, #56]	; 0x38
  while(1)
  {
    /* LED Non blocking toggle*/
    /* Using Reg to toggle */
    if(millis()-pre_time1 >= 500)
 80005de:	f000 f906 	bl	80007ee <millis>
 80005e2:	4602      	mov	r2, r0
 80005e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ec:	d307      	bcc.n	80005fe <apMain+0x32>
    {
      pre_time1 = millis();
 80005ee:	f000 f8fe 	bl	80007ee <millis>
 80005f2:	6478      	str	r0, [r7, #68]	; 0x44
      //ledToggle(_DEF_LED1);
      gpio_out_toggle(GPIOA, GPIO_PIN_5);
 80005f4:	2120      	movs	r1, #32
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f000 fd3d 	bl	8001078 <gpio_out_toggle>
      uartPrintf(_DEF_UART1, "Rx : 0x%X, %c\n", rx_data, rx_data);
    }
    */

    /* FLASH Test*/
    if(uartAvailable(_DEF_UART1) > 0)
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 ff22 	bl	8001448 <uartAvailable>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0e9      	beq.n	80005de <apMain+0x12>
    {
      int8_t rx_data;

      rx_data = uartRead(_DEF_UART1);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 ff3a 	bl	8001484 <uartRead>
 8000610:	4603      	mov	r3, r0
 8000612:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      // read
      if(rx_data == '1')
 8000616:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800061a:	2b31      	cmp	r3, #49	; 0x31
 800061c:	d121      	bne.n	8000662 <apMain+0x96>
      {
        uint32_t buf[12];
        uartPrintf(_DEF_UART1, "Read...\n");
 800061e:	4932      	ldr	r1, [pc, #200]	; (80006e8 <apMain+0x11c>)
 8000620:	2000      	movs	r0, #0
 8000622:	f000 ff71 	bl	8001508 <uartPrintf>
        flashRead(0x08000000 + (1024*60), &buf[0], 12);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	220c      	movs	r2, #12
 800062a:	4619      	mov	r1, r3
 800062c:	482f      	ldr	r0, [pc, #188]	; (80006ec <apMain+0x120>)
 800062e:	f000 fc4f 	bl	8000ed0 <flashRead>
        for(int i=0; i<12; i++)
 8000632:	2300      	movs	r3, #0
 8000634:	643b      	str	r3, [r7, #64]	; 0x40
 8000636:	e011      	b.n	800065c <apMain+0x90>
        {
          uartPrintf(_DEF_UART1, "0x%X : 0x%X\n", 0x08000000 + (1024*60) + i, buf[i]);
 8000638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800063a:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 800063e:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8000642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	3348      	adds	r3, #72	; 0x48
 8000648:	443b      	add	r3, r7
 800064a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800064e:	4928      	ldr	r1, [pc, #160]	; (80006f0 <apMain+0x124>)
 8000650:	2000      	movs	r0, #0
 8000652:	f000 ff59 	bl	8001508 <uartPrintf>
        for(int i=0; i<12; i++)
 8000656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000658:	3301      	adds	r3, #1
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
 800065c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800065e:	2b0b      	cmp	r3, #11
 8000660:	ddea      	ble.n	8000638 <apMain+0x6c>
        }
      }
      //erase - flash 특성상 지우면 0xffff , erase 특정 구간에서 erase fail 이유 ?
      if(rx_data == '2')
 8000662:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000666:	2b32      	cmp	r3, #50	; 0x32
 8000668:	d113      	bne.n	8000692 <apMain+0xc6>
      {
        uartPrintf(_DEF_UART1,"Erase...\n");
 800066a:	4922      	ldr	r1, [pc, #136]	; (80006f4 <apMain+0x128>)
 800066c:	2000      	movs	r0, #0
 800066e:	f000 ff4b 	bl	8001508 <uartPrintf>
        //지우고자하는 시작 주소 , length
        //if(flashErase(0x8000000 + (1024 * 60), 12) == true)
        //if(flashErase(0x08000000, 12) == true)
        if(flashErase(0x8000000 + (1024 * 60), 12) == true)
 8000672:	210c      	movs	r1, #12
 8000674:	481d      	ldr	r0, [pc, #116]	; (80006ec <apMain+0x120>)
 8000676:	f000 fb9d 	bl	8000db4 <flashErase>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d004      	beq.n	800068a <apMain+0xbe>
        {
          uartPrintf(_DEF_UART1,"Erase OK\n");
 8000680:	491d      	ldr	r1, [pc, #116]	; (80006f8 <apMain+0x12c>)
 8000682:	2000      	movs	r0, #0
 8000684:	f000 ff40 	bl	8001508 <uartPrintf>
 8000688:	e003      	b.n	8000692 <apMain+0xc6>
        }
        else
        {
          uartPrintf(_DEF_UART1,"Erase Fail\n");
 800068a:	491c      	ldr	r1, [pc, #112]	; (80006fc <apMain+0x130>)
 800068c:	2000      	movs	r0, #0
 800068e:	f000 ff3b 	bl	8001508 <uartPrintf>
        }
      }
      // write
      if(rx_data == '3')
 8000692:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000696:	2b33      	cmp	r3, #51	; 0x33
 8000698:	d1a1      	bne.n	80005de <apMain+0x12>
      {
        uint8_t buf[32];


        for(int i =0; i < 32; i++)
 800069a:	2300      	movs	r3, #0
 800069c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800069e:	e009      	b.n	80006b4 <apMain+0xe8>
        {
          buf[i] = i;
 80006a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006a2:	b2d9      	uxtb	r1, r3
 80006a4:	1d3a      	adds	r2, r7, #4
 80006a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006a8:	4413      	add	r3, r2
 80006aa:	460a      	mov	r2, r1
 80006ac:	701a      	strb	r2, [r3, #0]
        for(int i =0; i < 32; i++)
 80006ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b0:	3301      	adds	r3, #1
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b6:	2b1f      	cmp	r3, #31
 80006b8:	ddf2      	ble.n	80006a0 <apMain+0xd4>
        }

        uartPrintf(_DEF_UART1,"Write...\n");
 80006ba:	4911      	ldr	r1, [pc, #68]	; (8000700 <apMain+0x134>)
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 ff23 	bl	8001508 <uartPrintf>

        if(flashWrite(0x8000000 + (60*1024), buf, 32) == true)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2220      	movs	r2, #32
 80006c6:	4619      	mov	r1, r3
 80006c8:	4808      	ldr	r0, [pc, #32]	; (80006ec <apMain+0x120>)
 80006ca:	f000 fbc3 	bl	8000e54 <flashWrite>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d004      	beq.n	80006de <apMain+0x112>
        {
          uartPrintf(_DEF_UART1,"Write OK\n");
 80006d4:	490b      	ldr	r1, [pc, #44]	; (8000704 <apMain+0x138>)
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 ff16 	bl	8001508 <uartPrintf>
 80006dc:	e77f      	b.n	80005de <apMain+0x12>
        }
        else
        {
          uartPrintf(_DEF_UART1,"Write Fail\n");
 80006de:	490a      	ldr	r1, [pc, #40]	; (8000708 <apMain+0x13c>)
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 ff11 	bl	8001508 <uartPrintf>
    if(millis()-pre_time1 >= 500)
 80006e6:	e77a      	b.n	80005de <apMain+0x12>
 80006e8:	0800ca40 	.word	0x0800ca40
 80006ec:	0800f000 	.word	0x0800f000
 80006f0:	0800ca4c 	.word	0x0800ca4c
 80006f4:	0800ca5c 	.word	0x0800ca5c
 80006f8:	0800ca68 	.word	0x0800ca68
 80006fc:	0800ca74 	.word	0x0800ca74
 8000700:	0800ca80 	.word	0x0800ca80
 8000704:	0800ca8c 	.word	0x0800ca8c
 8000708:	0800ca98 	.word	0x0800ca98

0800070c <bspInit>:
#include "usb_device.h"

void SystemClock_Config(void);

bool bspInit(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <bspInit+0xc8>)
 8000714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000716:	4a2f      	ldr	r2, [pc, #188]	; (80007d4 <bspInit+0xc8>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6613      	str	r3, [r2, #96]	; 0x60
 800071e:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <bspInit+0xc8>)
 8000720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]


  HAL_Init();
 800072a:	f001 f893 	bl	8001854 <HAL_Init>
  SystemClock_Config();
 800072e:	f000 f865 	bl	80007fc <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <bspInit+0xc8>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a27      	ldr	r2, [pc, #156]	; (80007d4 <bspInit+0xc8>)
 8000738:	f043 0320 	orr.w	r3, r3, #32
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <bspInit+0xc8>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0320 	and.w	r3, r3, #32
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <bspInit+0xc8>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <bspInit+0xc8>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <bspInit+0xc8>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /* USB - RESET 시 장치관리자 해제 연결 안될 시 */

  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
  // PA12(USB_DP) 출력 설정
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8000778:	2311      	movs	r3, #17
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f001 fd7d 	bl	800228c <HAL_GPIO_Init>

  //회로에 PULL UP 이 걸려있다면 - 내리고
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079c:	f001 fef8 	bl	8002590 <HAL_GPIO_WritePin>
  delay(100);
 80007a0:	2064      	movs	r0, #100	; 0x64
 80007a2:	f000 f819 	bl	80007d8 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b0:	f001 feee 	bl	8002590 <HAL_GPIO_WritePin>

  // INPUT 으로 다시 변경
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f001 fd63 	bl	800228c <HAL_GPIO_Init>

  MX_USB_Device_Init();
 80007c6:	f00a fedf 	bl	800b588 <MX_USB_Device_Init>

  return true;
 80007ca:	2301      	movs	r3, #1
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000

080007d8 <delay>:

void delay(uint32_t time_ms)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  HAL_Delay(time_ms);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f001 f8a7 	bl	8001934 <HAL_Delay>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <millis>:

uint32_t millis(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80007f2:	f001 f893 	bl	800191c <HAL_GetTick>
 80007f6:	4603      	mov	r3, r0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	bd80      	pop	{r7, pc}

080007fc <SystemClock_Config>:


void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	; 0x50
 8000800:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <SystemClock_Config+0xb0>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a29      	ldr	r2, [pc, #164]	; (80008ac <SystemClock_Config+0xb0>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b27      	ldr	r3, [pc, #156]	; (80008ac <SystemClock_Config+0xb0>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	2238      	movs	r2, #56	; 0x38
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f00b fc7c 	bl	800c120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000836:	f44f 7000 	mov.w	r0, #512	; 0x200
 800083a:	f003 fbf5 	bl	8004028 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800083e:	2309      	movs	r3, #9
 8000840:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000846:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000848:	2301      	movs	r3, #1
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084c:	2302      	movs	r3, #2
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000850:	2303      	movs	r3, #3
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000854:	2302      	movs	r3, #2
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000858:	2308      	movs	r3, #8
 800085a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085c:	2302      	movs	r3, #2
 800085e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000860:	2302      	movs	r3, #2
 8000862:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000864:	2302      	movs	r3, #2
 8000866:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	4618      	mov	r0, r3
 800086e:	f003 fd11 	bl	8004294 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000878:	f000 f81a 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	230f      	movs	r3, #15
 800087e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000880:	2303      	movs	r3, #3
 8000882:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2101      	movs	r1, #1
 8000894:	4618      	mov	r0, r3
 8000896:	f004 f80f 	bl	80048b8 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80008a0:	f000 f806 	bl	80008b0 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3750      	adds	r7, #80	; 0x50
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40021000 	.word	0x40021000

080008b0 <Error_Handler>:


void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_MspInit+0x44>)
 80008c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ca:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <HAL_MspInit+0x44>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6613      	str	r3, [r2, #96]	; 0x60
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <HAL_MspInit+0x44>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_MspInit+0x44>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_MspInit+0x44>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_MspInit+0x44>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008f6:	f003 fc3b 	bl	8004170 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 ffd0 	bl	80018f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <USB_LP_IRQHandler+0x10>)
 8000962:	f001 ff1d 	bl	80027a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20002950 	.word	0x20002950

08000970 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <USART1_IRQHandler+0x10>)
 8000976:	f004 fe7f 	bl	8005678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200003b4 	.word	0x200003b4

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f00b fbbc 	bl	800c130 <__errno>
 80009b8:	4603      	mov	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <_sbrk+0x64>)
 80009d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20020000 	.word	0x20020000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	20000218 	.word	0x20000218
 80009ec:	20002f98 	.word	0x20002f98

080009f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <SystemInit+0x20>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <SystemInit+0x20>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a18:	f7ff ffea 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1e:	490d      	ldr	r1, [pc, #52]	; (8000a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <LoopForever+0xe>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a34:	4c0a      	ldr	r4, [pc, #40]	; (8000a60 <LoopForever+0x16>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a42:	f00b fb7b 	bl	800c13c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a46:	f00b fb27 	bl	800c098 <main>

08000a4a <LoopForever>:

LoopForever:
  b LoopForever
 8000a4a:	e7fe      	b.n	8000a4a <LoopForever>
  ldr   r0, =_estack
 8000a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8000a58:	0800cb98 	.word	0x0800cb98
  ldr r2, =_sbss
 8000a5c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8000a60:	20002f94 	.word	0x20002f94

08000a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC1_2_IRQHandler>

08000a66 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b087      	sub	sp, #28
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000a72:	2301      	movs	r3, #1
 8000a74:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	68ba      	ldr	r2, [r7, #8]
 8000a92:	611a      	str	r2, [r3, #16]

  return ret;
 8000a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	371c      	adds	r7, #28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <qbufferWrite>:

  return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b08b      	sub	sp, #44	; 0x2c
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t next_in;


  for (int i=0; i<length; i++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
 8000ab8:	e043      	b.n	8000b42 <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	6892      	ldr	r2, [r2, #8]
 8000ac4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ac8:	fb01 f202 	mul.w	r2, r1, r2
 8000acc:	1a9b      	subs	r3, r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d02c      	beq.n	8000b34 <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d024      	beq.n	8000b2c <qbufferWrite+0x8a>
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d021      	beq.n	8000b2c <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	691a      	ldr	r2, [r3, #16]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68f9      	ldr	r1, [r7, #12]
 8000af2:	68c9      	ldr	r1, [r1, #12]
 8000af4:	fb01 f303 	mul.w	r3, r1, r3
 8000af8:	4413      	add	r3, r2
 8000afa:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	e00a      	b.n	8000b18 <qbufferWrite+0x76>
        {
          p_buf[i] = p_data[i];
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	68ba      	ldr	r2, [r7, #8]
 8000b06:	441a      	add	r2, r3
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	6979      	ldr	r1, [r7, #20]
 8000b0c:	440b      	add	r3, r1
 8000b0e:	7812      	ldrb	r2, [r2, #0]
 8000b10:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3301      	adds	r3, #1
 8000b16:	61fb      	str	r3, [r7, #28]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	68da      	ldr	r2, [r3, #12]
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d8ef      	bhi.n	8000b02 <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	4413      	add	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	e003      	b.n	8000b3c <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000b3a:	e006      	b.n	8000b4a <qbufferWrite+0xa8>
  for (int i=0; i<length; i++)
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	623b      	str	r3, [r7, #32]
 8000b42:	6a3b      	ldr	r3, [r7, #32]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d8b7      	bhi.n	8000aba <qbufferWrite+0x18>
    }
  }

  return ret;
 8000b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	372c      	adds	r7, #44	; 0x2c
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b089      	sub	sp, #36	; 0x24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000b66:	2301      	movs	r3, #1
 8000b68:	77fb      	strb	r3, [r7, #31]


  for (int i=0; i<length; i++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
 8000b6e:	e041      	b.n	8000bf4 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	691b      	ldr	r3, [r3, #16]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d024      	beq.n	8000bc2 <qbufferRead+0x68>
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d021      	beq.n	8000bc2 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	691a      	ldr	r2, [r3, #16]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	68f9      	ldr	r1, [r7, #12]
 8000b88:	68c9      	ldr	r1, [r1, #12]
 8000b8a:	fb01 f303 	mul.w	r3, r1, r3
 8000b8e:	4413      	add	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e00a      	b.n	8000bae <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	440b      	add	r3, r1
 8000ba4:	7812      	ldrb	r2, [r2, #0]
 8000ba6:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	68da      	ldr	r2, [r3, #12]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8ef      	bhi.n	8000b98 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	68ba      	ldr	r2, [r7, #8]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d00c      	beq.n	8000be8 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	6892      	ldr	r2, [r2, #8]
 8000bd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8000bdc:	fb01 f202 	mul.w	r2, r1, r2
 8000be0:	1a9a      	subs	r2, r3, r2
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	e002      	b.n	8000bee <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 8000be8:	2300      	movs	r3, #0
 8000bea:	77fb      	strb	r3, [r7, #31]
      break;
 8000bec:	e006      	b.n	8000bfc <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8b9      	bhi.n	8000b70 <qbufferRead+0x16>
    }
  }

  return ret;
 8000bfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3724      	adds	r7, #36	; 0x24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b085      	sub	sp, #20
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	6892      	ldr	r2, [r2, #8]
 8000c20:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c24:	fb01 f202 	mul.w	r2, r1, r2
 8000c28:	1a9b      	subs	r3, r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]

  return ret;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <buttonInit>:
extern void buttonISR(void *arg);
extern bool buttonGetPin(uint8_t ch);


bool buttonInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
  bool ret = true;
 8000c42:	2301      	movs	r3, #1
 8000c44:	76fb      	strb	r3, [r7, #27]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c54:	4b40      	ldr	r3, [pc, #256]	; (8000d58 <buttonInit+0x11c>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c58:	4a3f      	ldr	r2, [pc, #252]	; (8000d58 <buttonInit+0x11c>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c60:	4b3d      	ldr	r3, [pc, #244]	; (8000d58 <buttonInit+0x11c>)
 8000c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]

  for(int i=0; i < BTN_MAX_CH; i++)
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
 8000c78:	e011      	b.n	8000c9e <buttonInit+0x62>
  {
    GPIO_InitStruct.Pin = button_pin[i].pin;
 8000c7a:	4938      	ldr	r1, [pc, #224]	; (8000d5c <buttonInit+0x120>)
 8000c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c7e:	4613      	mov	r3, r2
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	4413      	add	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	440b      	add	r3, r1
 8000c88:	3304      	adds	r3, #4
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(PC13_BLU_SW_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	4619      	mov	r1, r3
 8000c92:	4833      	ldr	r0, [pc, #204]	; (8000d60 <buttonInit+0x124>)
 8000c94:	f001 fafa 	bl	800228c <HAL_GPIO_Init>
  for(int i=0; i < BTN_MAX_CH; i++)
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	ddea      	ble.n	8000c7a <buttonInit+0x3e>
  }

  for(int i=0; i < BTN_MAX_CH; i++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
 8000ca8:	e040      	b.n	8000d2c <buttonInit+0xf0>
  {
    button_tbl[i].pressed = 0;
 8000caa:	4a2e      	ldr	r2, [pc, #184]	; (8000d64 <buttonInit+0x128>)
 8000cac:	6a3b      	ldr	r3, [r7, #32]
 8000cae:	212c      	movs	r1, #44	; 0x2c
 8000cb0:	fb01 f303 	mul.w	r3, r1, r3
 8000cb4:	4413      	add	r3, r2
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
    button_tbl[i].pressed_cnt = 0;
 8000cba:	4a2a      	ldr	r2, [pc, #168]	; (8000d64 <buttonInit+0x128>)
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	212c      	movs	r1, #44	; 0x2c
 8000cc0:	fb01 f303 	mul.w	r3, r1, r3
 8000cc4:	4413      	add	r3, r2
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	801a      	strh	r2, [r3, #0]
    button_tbl[i].pressed_event = 0;
 8000ccc:	4a25      	ldr	r2, [pc, #148]	; (8000d64 <buttonInit+0x128>)
 8000cce:	6a3b      	ldr	r3, [r7, #32]
 8000cd0:	212c      	movs	r1, #44	; 0x2c
 8000cd2:	fb01 f303 	mul.w	r3, r1, r3
 8000cd6:	4413      	add	r3, r2
 8000cd8:	3301      	adds	r3, #1
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]

    button_tbl[i].released = 0;
 8000cde:	4a21      	ldr	r2, [pc, #132]	; (8000d64 <buttonInit+0x128>)
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
 8000ce2:	212c      	movs	r1, #44	; 0x2c
 8000ce4:	fb01 f303 	mul.w	r3, r1, r3
 8000ce8:	4413      	add	r3, r2
 8000cea:	330c      	adds	r3, #12
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released_event = 0;
 8000cf0:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <buttonInit+0x128>)
 8000cf2:	6a3b      	ldr	r3, [r7, #32]
 8000cf4:	212c      	movs	r1, #44	; 0x2c
 8000cf6:	fb01 f303 	mul.w	r3, r1, r3
 8000cfa:	4413      	add	r3, r2
 8000cfc:	330d      	adds	r3, #13
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]

    button_tbl[i].repeat_cnt = 0;
 8000d02:	4a18      	ldr	r2, [pc, #96]	; (8000d64 <buttonInit+0x128>)
 8000d04:	6a3b      	ldr	r3, [r7, #32]
 8000d06:	212c      	movs	r1, #44	; 0x2c
 8000d08:	fb01 f303 	mul.w	r3, r1, r3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	331c      	adds	r3, #28
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
    button_tbl[i].repeat_update = 0;
 8000d14:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <buttonInit+0x128>)
 8000d16:	6a3b      	ldr	r3, [r7, #32]
 8000d18:	212c      	movs	r1, #44	; 0x2c
 8000d1a:	fb01 f303 	mul.w	r3, r1, r3
 8000d1e:	4413      	add	r3, r2
 8000d20:	3318      	adds	r3, #24
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
  for(int i=0; i < BTN_MAX_CH; i++)
 8000d26:	6a3b      	ldr	r3, [r7, #32]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	623b      	str	r3, [r7, #32]
 8000d2c:	6a3b      	ldr	r3, [r7, #32]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	ddbb      	ble.n	8000caa <buttonInit+0x6e>
  }

  for (int i=0; i<BTN_EVENT_MAX; i++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	e007      	b.n	8000d48 <buttonInit+0x10c>
  {
   event_tbl[i] = NULL;
 8000d38:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <buttonInit+0x12c>)
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i=0; i<BTN_EVENT_MAX; i++)
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3301      	adds	r3, #1
 8000d46:	61fb      	str	r3, [r7, #28]
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	2b07      	cmp	r3, #7
 8000d4c:	ddf4      	ble.n	8000d38 <buttonInit+0xfc>
  }
  return ret;
 8000d4e:	7efb      	ldrb	r3, [r7, #27]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3728      	adds	r7, #40	; 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	0800cb18 	.word	0x0800cb18
 8000d60:	48000800 	.word	0x48000800
 8000d64:	2000021c 	.word	0x2000021c
 8000d68:	20000248 	.word	0x20000248

08000d6c <cdcInit>:


static bool is_init = false;

bool cdcInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  bool ret = true;
 8000d72:	2301      	movs	r3, #1
 8000d74:	71fb      	strb	r3, [r7, #7]


  ret = cdcIfInit();
 8000d76:	f00a fd5d 	bl	800b834 <cdcIfInit>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	bf14      	ite	ne
 8000d80:	2301      	movne	r3, #1
 8000d82:	2300      	moveq	r3, #0
 8000d84:	71fb      	strb	r3, [r7, #7]

  is_init = ret;
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <cdcInit+0x2c>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	7013      	strb	r3, [r2, #0]

  return ret;
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000268 	.word	0x20000268

08000d9c <flashInit>:


static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
  bool ret = true;
 8000da2:	2301      	movs	r3, #1
 8000da4:	71fb      	strb	r3, [r7, #7]

  return true;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08c      	sub	sp, #48	; 0x30
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  int32_t start_sector = -1;
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t end_sector = -1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8000dd0:	f001 f80e 	bl	8001df0 <HAL_FLASH_Unlock>
  /* Clear OPTVERR bit set on virgin samples */
  //__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);

  //  Dual Bank -> FLASH_MAX_SECTOR  - 256
  //  Single Bank -> FLASH_MAX_SECTOR  - 128
  for(int i=0; i< FLASH_MAX_SECTOR; i++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
 8000dd8:	e013      	b.n	8000e02 <flashErase+0x4e>
  {
    if(flashInSector(i, addr, length) == true)
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f899 	bl	8000f1a <flashInSector>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d006      	beq.n	8000dfc <flashErase+0x48>
    {
      // - 일때 처음 초기화 하고 이후 초기화 안시킴
      if(start_sector < 0)
 8000dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	da01      	bge.n	8000df8 <flashErase+0x44>
      {
        start_sector = i;
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      //  계속 for 문 돌면서 초기화 end_sector
      end_sector = i;
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  for(int i=0; i< FLASH_MAX_SECTOR; i++)
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	623b      	str	r3, [r7, #32]
 8000e02:	6a3b      	ldr	r3, [r7, #32]
 8000e04:	2bff      	cmp	r3, #255	; 0xff
 8000e06:	dde8      	ble.n	8000dda <flashErase+0x26>
    }
  }

  if(start_sector >= 0)
 8000e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	db1a      	blt.n	8000e44 <flashErase+0x90>
    HAL_StatusTypeDef status;
    // TypeErase : Mass or Page Erase ,Banks :   Page/PageAddress:  Nbpages:
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t SectorError;
    //@ref FLASH_Type_Erase
    EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
    //@ref FLASH_Banks  - FLASH_BANK_BOTH  , 1
    EraseInit.Banks = FLASH_BANK_BOTH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	613b      	str	r3, [r7, #16]
    EraseInit.Page = start_sector;    // sector 번호 OR sector address , 확인해야댐 (페이지 번호를 주거나, 지우는 주소를 주거나)
 8000e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e18:	617b      	str	r3, [r7, #20]
    EraseInit.NbPages = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 8000e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	3301      	adds	r3, #1
 8000e22:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 8000e24:	f107 0208 	add.w	r2, r7, #8
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 f8ca 	bl	8001fc8 <HAL_FLASHEx_Erase>
 8000e34:	4603      	mov	r3, r0
 8000e36:	77fb      	strb	r3, [r7, #31]
    if(status == HAL_OK)
 8000e38:	7ffb      	ldrb	r3, [r7, #31]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d102      	bne.n	8000e44 <flashErase+0x90>
    {
     ret = true;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }
  HAL_FLASH_Lock();
 8000e44:	f000 fff6 	bl	8001e34 <HAL_FLASH_Lock>
  return ret;
 8000e48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3730      	adds	r7, #48	; 0x30
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]

  bool ret = true;
 8000e60:	2301      	movs	r3, #1
 8000e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  HAL_StatusTypeDef status;

  // 주소도 64 bit 설정한 값으로 align 되어있어야한다 (FLASH_TYPEPROGRAM_DOUBLEWORD)
  if(addr%FLASH_WRITE_SIZE != 0) //16bit %2 , double-word (64-bit) %8
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f003 0307 	and.w	r3, r3, #7
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <flashWrite+0x20>
  {
    return false;
 8000e70:	2300      	movs	r3, #0
 8000e72:	e029      	b.n	8000ec8 <flashWrite+0x74>
  }
  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Unlock();
 8000e74:	f000 ffbc 	bl	8001df0 <HAL_FLASH_Unlock>
  // erase 와 같은 방법
  for(int i = 0; i < length; i+=FLASH_WRITE_SIZE) // 64bit-8 , 16bit-2
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
 8000e7c:	e01c      	b.n	8000eb8 <flashWrite+0x64>
  {
    uint64_t data;

    memcpy(&data, &p_data[i], FLASH_WRITE_SIZE);
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	68ba      	ldr	r2, [r7, #8]
 8000e82:	18d1      	adds	r1, r2, r3
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	2208      	movs	r2, #8
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f00b f97c 	bl	800c188 <memcpy>
    //data = p_data[i+0] << 0; //처음 data, shift하지 않는다 명시적으로 (<<0)
    //data |= p_data[i+1] << 8;  // 두번쨰 부터는 OR 연산, 8비트 shift

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr + i, data);
 8000e90:	6a3a      	ldr	r2, [r7, #32]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	18d1      	adds	r1, r2, r3
 8000e96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 ff3c 	bl	8001d18 <HAL_FLASH_Program>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	77fb      	strb	r3, [r7, #31]
    if(status != HAL_OK)
 8000ea4:	7ffb      	ldrb	r3, [r7, #31]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <flashWrite+0x5e>
    {
      ret = false;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000eb0:	e006      	b.n	8000ec0 <flashWrite+0x6c>
  for(int i = 0; i < length; i+=FLASH_WRITE_SIZE) // 64bit-8 , 16bit-2
 8000eb2:	6a3b      	ldr	r3, [r7, #32]
 8000eb4:	3308      	adds	r3, #8
 8000eb6:	623b      	str	r3, [r7, #32]
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d8de      	bhi.n	8000e7e <flashWrite+0x2a>
      break;
    }
  }
  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Lock();
 8000ec0:	f000 ffb8 	bl	8001e34 <HAL_FLASH_Lock>

  return ret;
 8000ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3728      	adds	r7, #40	; 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <flashRead>:

bool flashRead(uint32_t addr, uint32_t *p_data, uint32_t length)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000edc:	2301      	movs	r3, #1
 8000ede:	76fb      	strb	r3, [r7, #27]

  // 1byte 데이터 포인터
  uint8_t *p_byte = (uint8_t *) addr;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	617b      	str	r3, [r7, #20]

  for(int i=0; i < length; i++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
 8000ee8:	e00c      	b.n	8000f04 <flashRead+0x34>
  {
    p_data[i] = p_byte[i];
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	4413      	add	r3, r2
 8000ef0:	7819      	ldrb	r1, [r3, #0]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	4413      	add	r3, r2
 8000efa:	460a      	mov	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
  for(int i=0; i < length; i++)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3301      	adds	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d8ee      	bhi.n	8000eea <flashRead+0x1a>
  }


  return ret;
 8000f0c:	7efb      	ldrb	r3, [r7, #27]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	; 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <flashInSector>:

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b08b      	sub	sp, #44	; 0x2c
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t flash_start;
  uint32_t flash_end;

  //#define FLASH_BASE            (0x08000000UL) /*!< FLASH (up to 512 kB) base address */
  // 0x08000000 부터 find
  sector_start = FLASH_BASE + (sector_num * FLASH_SECTOR_SIZE);
 8000f2e:	89fb      	ldrh	r3, [r7, #14]
 8000f30:	02db      	lsls	r3, r3, #11
 8000f32:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000f36:	623b      	str	r3, [r7, #32]
  sector_end   = sector_start + FLASH_SECTOR_SIZE - 1;
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000f3e:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 8000f4e:	6a3a      	ldr	r2, [r7, #32]
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d306      	bcc.n	8000f64 <flashInSector+0x4a>
 8000f56:	6a3a      	ldr	r2, [r7, #32]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d802      	bhi.n	8000f64 <flashInSector+0x4a>
  {
    ret = true;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d306      	bcc.n	8000f7a <flashInSector+0x60>
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d802      	bhi.n	8000f7a <flashInSector+0x60>
  {
    ret = true;
 8000f74:	2301      	movs	r3, #1
 8000f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d306      	bcc.n	8000f90 <flashInSector+0x76>
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d802      	bhi.n	8000f90 <flashInSector+0x76>
  {
    ret = true;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	6a3b      	ldr	r3, [r7, #32]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d306      	bcc.n	8000fa6 <flashInSector+0x8c>
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d802      	bhi.n	8000fa6 <flashInSector+0x8c>
  {
    ret = true;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 8000fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	372c      	adds	r7, #44	; 0x2c
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <ledInit>:




bool ledInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <ledInit+0x80>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a19      	ldr	r2, [pc, #100]	; (8001038 <ledInit+0x80>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <ledInit+0x80>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
 8000ff6:	e017      	b.n	8001028 <ledInit+0x70>
  {
    GPIO_InitStructure.Pin = led_tbl[i].pin;
 8000ff8:	4a10      	ldr	r2, [pc, #64]	; (800103c <ledInit+0x84>)
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	4413      	add	r3, r2
 8001000:	889b      	ldrh	r3, [r3, #4]
 8001002:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <ledInit+0x84>)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800100c:	f107 0208 	add.w	r2, r7, #8
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f001 f93a 	bl	800228c <HAL_GPIO_Init>

    ledOff(i);
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f80f 	bl	8001040 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3301      	adds	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	2b00      	cmp	r3, #0
 800102c:	dde4      	ble.n	8000ff8 <ledInit+0x40>
  }
  return true;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000
 800103c:	0800cb24 	.word	0x0800cb24

08001040 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10d      	bne.n	800106c <ledOff+0x2c>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <ledOff+0x34>)
 8001054:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	4a06      	ldr	r2, [pc, #24]	; (8001074 <ledOff+0x34>)
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	4413      	add	r3, r2
 8001060:	889b      	ldrh	r3, [r3, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	4619      	mov	r1, r3
 8001066:	f001 fa93 	bl	8002590 <HAL_GPIO_WritePin>
 800106a:	e000      	b.n	800106e <ledOff+0x2e>
  if (ch >= LED_MAX_CH) return;
 800106c:	bf00      	nop
}
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	0800cb24 	.word	0x0800cb24

08001078 <gpio_out_toggle>:
  gpio->ODR &= ~(GPIO_Pin);
}

//
void gpio_out_toggle(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
  GPIO_TypeDef *gpio = (void*)GPIOA_BASE;
 8001084:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001088:	60fb      	str	r3, [r7, #12]
  gpio->ODR ^= GPIO_Pin;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	695a      	ldr	r2, [r3, #20]
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	405a      	eors	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	615a      	str	r2, [r3, #20]
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <resetInit>:
  }
}


bool resetInit(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  bool ret = true;
 80010aa:	2301      	movs	r3, #1
 80010ac:	71bb      	strb	r3, [r7, #6]
  bool is_debug = false;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <resetInit+0x80>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <resetInit+0x1e>
  {
    is_debug = true;
 80010be:	2301      	movs	r3, #1
 80010c0:	71fb      	strb	r3, [r7, #7]
  }

  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if (RCC->CSR & (1<<26) && is_debug != true)
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <resetInit+0x84>)
 80010c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d01f      	beq.n	8001110 <resetInit+0x6c>
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f083 0301 	eor.w	r3, r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d019      	beq.n	8001110 <resetInit+0x6c>
  if(RCC->CSR & (1<<26))
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <resetInit+0x84>)
 80010de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d012      	beq.n	8001110 <resetInit+0x6c>
  {
    rtcBackupRegWrite(RESET_REG_COUNT, rtcBackupRegRead(RESET_REG_COUNT) + 1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 f8a2 	bl	8001234 <rtcBackupRegRead>
 80010f0:	4603      	mov	r3, r0
 80010f2:	3301      	adds	r3, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	2001      	movs	r0, #1
 80010f8:	f000 f8ac 	bl	8001254 <rtcBackupRegWrite>
    delay(500);
 80010fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001100:	f7ff fb6a 	bl	80007d8 <delay>
    reset_count = rtcBackupRegRead(RESET_REG_COUNT);
 8001104:	2001      	movs	r0, #1
 8001106:	f000 f895 	bl	8001234 <rtcBackupRegRead>
 800110a:	4603      	mov	r3, r0
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <resetInit+0x88>)
 800110e:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  rtcBackupRegWrite(RESET_REG_COUNT, 0);
 8001110:	2100      	movs	r1, #0
 8001112:	2001      	movs	r0, #1
 8001114:	f000 f89e 	bl	8001254 <rtcBackupRegWrite>

  return ret;
 8001118:	79bb      	ldrb	r3, [r7, #6]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	e000edf0 	.word	0xe000edf0
 8001128:	40021000 	.word	0x40021000
 800112c:	2000026c 	.word	0x2000026c

08001130 <resetGetCount>:

uint32_t resetGetCount(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return reset_count;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <resetGetCount+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000026c 	.word	0x2000026c

08001148 <resetToSystemBoot>:
    run_timeout_count = timeout;
  }
}

void resetToSystemBoot(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
  void (*SysMemBootJump)(void);
  volatile uint32_t addr = 0x1FFF0000; // System Boot Loader 주소
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <resetToSystemBoot+0x7c>)
 8001150:	603b      	str	r3, [r7, #0]


  HAL_RCC_DeInit();
 8001152:	f003 f81d 	bl	8004190 <HAL_RCC_DeInit>

  SysTick->CTRL = 0;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <resetToSystemBoot+0x80>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <resetToSystemBoot+0x80>)
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
  SysTick->VAL  = 0;
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <resetToSystemBoot+0x80>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]

  // 인터럽트
  for (int i=0;i<8;i++)
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	e016      	b.n	800119c <resetToSystemBoot+0x54>
  {
    NVIC->ICER[i]=0xFFFFFFFF;
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <resetToSystemBoot+0x84>)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3320      	adds	r3, #32
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NVIC->ICPR[i]=0xFFFFFFFF;
 800117c:	4a13      	ldr	r2, [pc, #76]	; (80011cc <resetToSystemBoot+0x84>)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3360      	adds	r3, #96	; 0x60
 8001182:	f04f 31ff 	mov.w	r1, #4294967295
 8001186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800118a:	f3bf 8f4f 	dsb	sy
}
 800118e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001190:	f3bf 8f6f 	isb	sy
}
 8001194:	bf00      	nop
  for (int i=0;i<8;i++)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b07      	cmp	r3, #7
 80011a0:	dde5      	ble.n	800116e <resetToSystemBoot+0x26>
    __DSB();
    __ISB();
  }

  SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	3304      	adds	r3, #4
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60bb      	str	r3, [r7, #8]

  // Main Stack 주소 셋팅
  __set_MSP(*(uint32_t *)addr);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f383 8808 	msr	MSP, r3
}
 80011b6:	bf00      	nop
  // Jump
  SysMemBootJump();
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4798      	blx	r3
}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	1fff0000 	.word	0x1fff0000
 80011c8:	e000e010 	.word	0xe000e010
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  bool ret = true;
 80011d6:	2301      	movs	r3, #1
 80011d8:	71fb      	strb	r3, [r7, #7]


  hrtc.Instance = RTC;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <rtcInit+0x5c>)
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <rtcInit+0x60>)
 80011de:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <rtcInit+0x5c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <rtcInit+0x5c>)
 80011e8:	227f      	movs	r2, #127	; 0x7f
 80011ea:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <rtcInit+0x5c>)
 80011ee:	22ff      	movs	r2, #255	; 0xff
 80011f0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <rtcInit+0x5c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <rtcInit+0x5c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <rtcInit+0x5c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <rtcInit+0x5c>)
 8001206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800120a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <rtcInit+0x5c>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <rtcInit+0x5c>)
 8001214:	f003 ffba 	bl	800518c <HAL_RTC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <rtcInit+0x52>
  {
    return false;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <rtcInit+0x54>
  }

  return ret;
 8001222:	79fb      	ldrb	r3, [r7, #7]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000270 	.word	0x20000270
 8001230:	40002800 	.word	0x40002800

08001234 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <rtcBackupRegRead+0x1c>)
 8001240:	f004 f8da 	bl	80053f8 <HAL_RTCEx_BKUPRead>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000270 	.word	0x20000270

08001254 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4803      	ldr	r0, [pc, #12]	; (8001270 <rtcBackupRegWrite+0x1c>)
 8001264:	f004 f8b0 	bl	80053c8 <HAL_RTCEx_BKUPWrite>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000270 	.word	0x20000270

08001274 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b098      	sub	sp, #96	; 0x60
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2254      	movs	r2, #84	; 0x54
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f00a ff4b 	bl	800c120 <memset>
  if(rtcHandle->Instance==RTC)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <HAL_RTC_MspInit+0x70>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d123      	bne.n	80012dc <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001294:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001298:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800129a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 fd23 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80012b0:	f7ff fafe 	bl	80008b0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_RTC_MspInit+0x74>)
 80012b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <HAL_RTC_MspInit+0x74>)
 80012bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_RTC_MspInit+0x74>)
 80012c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_RTC_MspInit+0x74>)
 80012ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ce:	6593      	str	r3, [r2, #88]	; 0x58
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_RTC_MspInit+0x74>)
 80012d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012dc:	bf00      	nop
 80012de:	3760      	adds	r7, #96	; 0x60
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40002800 	.word	0x40002800
 80012e8:	40021000 	.word	0x40021000

080012ec <uartInit>:
UART_HandleTypeDef huart1;



bool uartInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
  for(int i = 0; i <UART_MAX_CH; i++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	e007      	b.n	8001308 <uartInit+0x1c>
  {
    is_open[i] = false;
 80012f8:	4a08      	ldr	r2, [pc, #32]	; (800131c <uartInit+0x30>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i <UART_MAX_CH; i++)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3301      	adds	r3, #1
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	ddf4      	ble.n	80012f8 <uartInit+0xc>
  }

  return true;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	20000298 	.word	0x20000298

08001320 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  bool ret =false;
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d176      	bne.n	8001424 <uartOpen+0x104>
  {
    case _DEF_UART1:
      huart1.Instance = USART1;
 8001336:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <uartOpen+0x110>)
 8001338:	4a3e      	ldr	r2, [pc, #248]	; (8001434 <uartOpen+0x114>)
 800133a:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 800133c:	4a3c      	ldr	r2, [pc, #240]	; (8001430 <uartOpen+0x110>)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	6053      	str	r3, [r2, #4]
      huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <uartOpen+0x110>)
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001348:	4b39      	ldr	r3, [pc, #228]	; (8001430 <uartOpen+0x110>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
      huart1.Init.Mode = UART_MODE_TX_RX;
 800134e:	4b38      	ldr	r3, [pc, #224]	; (8001430 <uartOpen+0x110>)
 8001350:	220c      	movs	r2, #12
 8001352:	615a      	str	r2, [r3, #20]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b36      	ldr	r3, [pc, #216]	; (8001430 <uartOpen+0x110>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
      huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135a:	4b35      	ldr	r3, [pc, #212]	; (8001430 <uartOpen+0x110>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
      huart1.Init.Parity = UART_PARITY_NONE;
 8001360:	4b33      	ldr	r3, [pc, #204]	; (8001430 <uartOpen+0x110>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8001366:	4b32      	ldr	r3, [pc, #200]	; (8001430 <uartOpen+0x110>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800136c:	4b30      	ldr	r3, [pc, #192]	; (8001430 <uartOpen+0x110>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001372:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <uartOpen+0x110>)
 8001374:	2200      	movs	r2, #0
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
      qbufferCreate(&qbuffer[ch],&rx_buf[ch], 256); // 수신 버퍼 생성
 8001378:	79fa      	ldrb	r2, [r7, #7]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4a2d      	ldr	r2, [pc, #180]	; (8001438 <uartOpen+0x118>)
 8001384:	1898      	adds	r0, r3, r2
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	4a2c      	ldr	r2, [pc, #176]	; (800143c <uartOpen+0x11c>)
 800138a:	4413      	add	r3, r2
 800138c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fb68 	bl	8000a66 <qbufferCreate>
      if (HAL_UART_Init(&huart1) != HAL_OK)
 8001396:	4826      	ldr	r0, [pc, #152]	; (8001430 <uartOpen+0x110>)
 8001398:	f004 f844 	bl	8005424 <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <uartOpen+0x88>
      {
        ret = false;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	e016      	b.n	80013d6 <uartOpen+0xb6>
      }
      else
      {
        ret = true;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4a24      	ldr	r2, [pc, #144]	; (8001440 <uartOpen+0x120>)
 80013b0:	2101      	movs	r1, #1
 80013b2:	54d1      	strb	r1, [r2, r3]
        // 수신용 데이터 버퍼 (rx_data)에 size 만큼 받아서 HAL_UART_RxCpltCallback 함수 호출
        if(HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[ch], 1) != HAL_OK)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	4a23      	ldr	r2, [pc, #140]	; (8001444 <uartOpen+0x124>)
 80013b8:	4413      	add	r3, r2
 80013ba:	2201      	movs	r2, #1
 80013bc:	4619      	mov	r1, r3
 80013be:	481c      	ldr	r0, [pc, #112]	; (8001430 <uartOpen+0x110>)
 80013c0:	f004 f90e 	bl	80055e0 <HAL_UART_Receive_IT>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d005      	beq.n	80013d6 <uartOpen+0xb6>
        {
         ret = false;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
         is_open[ch] = false;
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <uartOpen+0x120>)
 80013d2:	2100      	movs	r1, #0
 80013d4:	54d1      	strb	r1, [r2, r3]
        }
      }
      if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d6:	2100      	movs	r1, #0
 80013d8:	4815      	ldr	r0, [pc, #84]	; (8001430 <uartOpen+0x110>)
 80013da:	f006 f87a 	bl	80074d2 <HAL_UARTEx_SetTxFifoThreshold>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <uartOpen+0xd0>
      {
        ret = false;
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4a15      	ldr	r2, [pc, #84]	; (8001440 <uartOpen+0x120>)
 80013ec:	2100      	movs	r1, #0
 80013ee:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f0:	2100      	movs	r1, #0
 80013f2:	480f      	ldr	r0, [pc, #60]	; (8001430 <uartOpen+0x110>)
 80013f4:	f006 f8ab 	bl	800754e <HAL_UARTEx_SetRxFifoThreshold>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <uartOpen+0xea>
      {
        ret = false;
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <uartOpen+0x120>)
 8001406:	2100      	movs	r1, #0
 8001408:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800140a:	4809      	ldr	r0, [pc, #36]	; (8001430 <uartOpen+0x110>)
 800140c:	f006 f828 	bl	8007460 <HAL_UARTEx_DisableFifoMode>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <uartOpen+0x102>
      {
        ret = false;
 8001416:	2300      	movs	r3, #0
 8001418:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4a08      	ldr	r2, [pc, #32]	; (8001440 <uartOpen+0x120>)
 800141e:	2100      	movs	r1, #0
 8001420:	54d1      	strb	r1, [r2, r3]
      }
      break;
 8001422:	bf00      	nop
  }


  return ret;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200003b4 	.word	0x200003b4
 8001434:	40013800 	.word	0x40013800
 8001438:	2000029c 	.word	0x2000029c
 800143c:	200002b0 	.word	0x200002b0
 8001440:	20000298 	.word	0x20000298
 8001444:	200003b0 	.word	0x200003b0

08001448 <uartAvailable>:
{
  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10b      	bne.n	8001474 <uartAvailable+0x2c>
  {
    case _DEF_UART1:
      ret = qbufferAvailable(&qbuffer[ch]);
 800145c:	79fa      	ldrb	r2, [r7, #7]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4a06      	ldr	r2, [pc, #24]	; (8001480 <uartAvailable+0x38>)
 8001468:	4413      	add	r3, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fbcd 	bl	8000c0a <qbufferAvailable>
 8001470:	60f8      	str	r0, [r7, #12]
      break;
 8001472:	bf00      	nop
  }

  return ret;
 8001474:	68fb      	ldr	r3, [r7, #12]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2000029c 	.word	0x2000029c

08001484 <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
  switch(ch)
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10d      	bne.n	80014b4 <uartRead+0x30>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[ch],&ret,1);
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <uartRead+0x3c>)
 80014a4:	4413      	add	r3, r2
 80014a6:	f107 010f 	add.w	r1, r7, #15
 80014aa:	2201      	movs	r2, #1
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fb54 	bl	8000b5a <qbufferRead>
      break;
 80014b2:	bf00      	nop
  }

  return ret;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000029c 	.word	0x2000029c

080014c4 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;
  switch(ch)
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10e      	bne.n	80014fa <uartWrite+0x36>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	b29a      	uxth	r2, r3
 80014e0:	2364      	movs	r3, #100	; 0x64
 80014e2:	68b9      	ldr	r1, [r7, #8]
 80014e4:	4807      	ldr	r0, [pc, #28]	; (8001504 <uartWrite+0x40>)
 80014e6:	f003 ffed 	bl	80054c4 <HAL_UART_Transmit>
 80014ea:	4603      	mov	r3, r0
 80014ec:	74fb      	strb	r3, [r7, #19]
      if(status == HAL_OK)
 80014ee:	7cfb      	ldrb	r3, [r7, #19]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <uartWrite+0x34>
      {
        ret = length;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	617b      	str	r3, [r7, #20]
      }
      break;
 80014f8:	bf00      	nop
  }

  return ret;
 80014fa:	697b      	ldr	r3, [r7, #20]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200003b4 	.word	0x200003b4

08001508 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8001508:	b40e      	push	{r1, r2, r3}
 800150a:	b580      	push	{r7, lr}
 800150c:	b0c7      	sub	sp, #284	; 0x11c
 800150e:	af00      	add	r7, sp, #0
 8001510:	4602      	mov	r2, r0
 8001512:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001516:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800151a:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 800151c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001520:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001524:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001528:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 800152a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800152e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001532:	f107 0010 	add.w	r0, r7, #16
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800153c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001540:	f00a fde0 	bl	800c104 <vsniprintf>
 8001544:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8001548:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800154c:	f107 0110 	add.w	r1, r7, #16
 8001550:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001554:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ffb2 	bl	80014c4 <uartWrite>
 8001560:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8001564:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001568:	4618      	mov	r0, r3
 800156a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800156e:	46bd      	mov	sp, r7
 8001570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001574:	b003      	add	sp, #12
 8001576:	4770      	bx	lr

08001578 <HAL_UART_ErrorCallback>:

  return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
  {

  }
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_UART_RxCpltCallback+0x30>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d109      	bne.n	80015b2 <HAL_UART_RxCpltCallback+0x26>
  {
    // 빠르게 송신시 1 바이트 사용시 인터럽트가 많이 걸려서 처리가 늦어져 overrun (덮어쓰기 에러) , 데이터 손실 에러 발생 가능
    // 고속의 송수신 - DMA 방식을 사용
    qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
 800159e:	2201      	movs	r2, #1
 80015a0:	4907      	ldr	r1, [pc, #28]	; (80015c0 <HAL_UART_RxCpltCallback+0x34>)
 80015a2:	4808      	ldr	r0, [pc, #32]	; (80015c4 <HAL_UART_RxCpltCallback+0x38>)
 80015a4:	f7ff fa7d 	bl	8000aa2 <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[_DEF_UART1], 1);
 80015a8:	2201      	movs	r2, #1
 80015aa:	4905      	ldr	r1, [pc, #20]	; (80015c0 <HAL_UART_RxCpltCallback+0x34>)
 80015ac:	4806      	ldr	r0, [pc, #24]	; (80015c8 <HAL_UART_RxCpltCallback+0x3c>)
 80015ae:	f004 f817 	bl	80055e0 <HAL_UART_Receive_IT>
  }
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40013800 	.word	0x40013800
 80015c0:	200003b0 	.word	0x200003b0
 80015c4:	2000029c 	.word	0x2000029c
 80015c8:	200003b4 	.word	0x200003b4

080015cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b09e      	sub	sp, #120	; 0x78
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	2254      	movs	r2, #84	; 0x54
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00a fd97 	bl	800c120 <memset>
  if(uartHandle->Instance==USART1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a22      	ldr	r2, [pc, #136]	; (8001680 <HAL_UART_MspInit+0xb4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d13d      	bne.n	8001678 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	4618      	mov	r0, r3
 800160a:	f003 fb71 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001614:	f7ff f94c 	bl	80008b0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <HAL_UART_MspInit+0xb8>)
 800161a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_UART_MspInit+0xb8>)
 800161e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001622:	6613      	str	r3, [r2, #96]	; 0x60
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_UART_MspInit+0xb8>)
 8001626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_UART_MspInit+0xb8>)
 8001632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001634:	4a13      	ldr	r2, [pc, #76]	; (8001684 <HAL_UART_MspInit+0xb8>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_UART_MspInit+0xb8>)
 800163e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC4_USART1_TX_Pin|PC5_USART1_RX_Pin;
 8001648:	2330      	movs	r3, #48	; 0x30
 800164a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001658:	2307      	movs	r3, #7
 800165a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001660:	4619      	mov	r1, r3
 8001662:	4809      	ldr	r0, [pc, #36]	; (8001688 <HAL_UART_MspInit+0xbc>)
 8001664:	f000 fe12 	bl	800228c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	2025      	movs	r0, #37	; 0x25
 800166e:	f000 fa5e 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001672:	2025      	movs	r0, #37	; 0x25
 8001674:	f000 fa75 	bl	8001b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001678:	bf00      	nop
 800167a:	3778      	adds	r7, #120	; 0x78
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40013800 	.word	0x40013800
 8001684:	40021000 	.word	0x40021000
 8001688:	48000800 	.word	0x48000800

0800168c <usbInit>:
#endif



bool usbInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
  bool ret = true;
 8001692:	2301      	movs	r3, #1
 8001694:	71fb      	strb	r3, [r7, #7]


#ifdef _USE_HW_CLI
  cliAdd("usb", cliCmd);
#endif
  return ret;
 8001696:	79fb      	ldrb	r3, [r7, #7]
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <usbBegin>:
{
  return is_usb_mode;
}

bool usbBegin(UsbMode usb_mode)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]


#if HW_USE_CDC == 1

  if (usb_mode == USB_CDC_MODE)
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d12a      	bne.n	800170e <usbBegin+0x6a>
  {
    if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 80016b8:	2200      	movs	r2, #0
 80016ba:	4919      	ldr	r1, [pc, #100]	; (8001720 <usbBegin+0x7c>)
 80016bc:	4819      	ldr	r0, [pc, #100]	; (8001724 <usbBegin+0x80>)
 80016be:	f008 fe43 	bl	800a348 <USBD_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <usbBegin+0x28>
    {
      return false;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e024      	b.n	8001716 <usbBegin+0x72>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80016cc:	4916      	ldr	r1, [pc, #88]	; (8001728 <usbBegin+0x84>)
 80016ce:	4815      	ldr	r0, [pc, #84]	; (8001724 <usbBegin+0x80>)
 80016d0:	f008 fe6a 	bl	800a3a8 <USBD_RegisterClass>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <usbBegin+0x3a>
    {
      return false;
 80016da:	2300      	movs	r3, #0
 80016dc:	e01b      	b.n	8001716 <usbBegin+0x72>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80016de:	4913      	ldr	r1, [pc, #76]	; (800172c <usbBegin+0x88>)
 80016e0:	4810      	ldr	r0, [pc, #64]	; (8001724 <usbBegin+0x80>)
 80016e2:	f008 fdbb 	bl	800a25c <USBD_CDC_RegisterInterface>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <usbBegin+0x4c>
    {
      return false;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e012      	b.n	8001716 <usbBegin+0x72>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80016f0:	480c      	ldr	r0, [pc, #48]	; (8001724 <usbBegin+0x80>)
 80016f2:	f008 fe80 	bl	800a3f6 <USBD_Start>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <usbBegin+0x5c>
    {
      return false;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e00a      	b.n	8001716 <usbBegin+0x72>
    }


    cdcInit();
 8001700:	f7ff fb34 	bl	8000d6c <cdcInit>

    is_usb_mode = USB_CDC_MODE;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <usbBegin+0x8c>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
    ret = true;
 800170a:	2301      	movs	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
    ret = true;
  }
#endif


  is_init = ret;
 800170e:	4a09      	ldr	r2, [pc, #36]	; (8001734 <usbBegin+0x90>)
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	7013      	strb	r3, [r2, #0]

  return ret;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000158 	.word	0x20000158
 8001724:	20000454 	.word	0x20000454
 8001728:	20000038 	.word	0x20000038
 800172c:	20000144 	.word	0x20000144
 8001730:	20000449 	.word	0x20000449
 8001734:	20000448 	.word	0x20000448

08001738 <hwInit>:
 *      Author: mm940
 */
#include "hw.h"

bool hwInit(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
  bool ret = true;
 800173e:	2301      	movs	r3, #1
 8001740:	71fb      	strb	r3, [r7, #7]

  ret &= bspInit();
 8001742:	f7fe ffe3 	bl	800070c <bspInit>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	bf14      	ite	ne
 8001752:	2301      	movne	r3, #1
 8001754:	2300      	moveq	r3, #0
 8001756:	71fb      	strb	r3, [r7, #7]
  ret &= rtcInit();
 8001758:	f7ff fd3a 	bl	80011d0 <rtcInit>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf14      	ite	ne
 8001768:	2301      	movne	r3, #1
 800176a:	2300      	moveq	r3, #0
 800176c:	71fb      	strb	r3, [r7, #7]
#ifdef _USE_HW_RESET
  ret &= resetInit();
 800176e:	f7ff fc99 	bl	80010a4 <resetInit>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	bf14      	ite	ne
 800177e:	2301      	movne	r3, #1
 8001780:	2300      	moveq	r3, #0
 8001782:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef _USE_HW_RESET
  if (resetGetCount() == 2)
 8001784:	f7ff fcd4 	bl	8001130 <resetGetCount>
 8001788:	4603      	mov	r3, r0
 800178a:	2b02      	cmp	r3, #2
 800178c:	d101      	bne.n	8001792 <hwInit+0x5a>
  {
    // Jump To SystemBootloader
    resetToSystemBoot();
 800178e:	f7ff fcdb 	bl	8001148 <resetToSystemBoot>
  }
#endif
  ret &= flashInit();
 8001792:	f7ff fb03 	bl	8000d9c <flashInit>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	71fb      	strb	r3, [r7, #7]
  ret &= buttonInit();
 80017a8:	f7ff fa48 	bl	8000c3c <buttonInit>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	bf14      	ite	ne
 80017b8:	2301      	movne	r3, #1
 80017ba:	2300      	moveq	r3, #0
 80017bc:	71fb      	strb	r3, [r7, #7]
  ret &= ledInit();
 80017be:	f7ff fbfb 	bl	8000fb8 <ledInit>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	bf14      	ite	ne
 80017ce:	2301      	movne	r3, #1
 80017d0:	2300      	moveq	r3, #0
 80017d2:	71fb      	strb	r3, [r7, #7]
  ret &= usbInit();
 80017d4:	f7ff ff5a 	bl	800168c <usbInit>
 80017d8:	4603      	mov	r3, r0
 80017da:	461a      	mov	r2, r3
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	4013      	ands	r3, r2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	bf14      	ite	ne
 80017e4:	2301      	movne	r3, #1
 80017e6:	2300      	moveq	r3, #0
 80017e8:	71fb      	strb	r3, [r7, #7]
  ret &= usbBegin(USB_CDC_MODE);
 80017ea:	2001      	movs	r0, #1
 80017ec:	f7ff ff5a 	bl	80016a4 <usbBegin>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	71fb      	strb	r3, [r7, #7]
  ret &= uartInit();
 8001802:	f7ff fd73 	bl	80012ec <uartInit>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	4013      	ands	r3, r2
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf14      	ite	ne
 8001812:	2301      	movne	r3, #1
 8001814:	2300      	moveq	r3, #0
 8001816:	71fb      	strb	r3, [r7, #7]
  ret &= uartOpen(_DEF_UART1, 115200);
 8001818:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800181c:	2000      	movs	r0, #0
 800181e:	f7ff fd7f 	bl	8001320 <uartOpen>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	4013      	ands	r3, r2
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	71fb      	strb	r3, [r7, #7]

  /* Reset Test */
  uartPrintf(_DEF_UART1, "Reset Count : %d\n", resetGetCount());
 8001834:	f7ff fc7c 	bl	8001130 <resetGetCount>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	4904      	ldr	r1, [pc, #16]	; (8001850 <hwInit+0x118>)
 800183e:	2000      	movs	r0, #0
 8001840:	f7ff fe62 	bl	8001508 <uartPrintf>
  return ret;
 8001844:	79fb      	ldrb	r3, [r7, #7]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	0800caa4 	.word	0x0800caa4

08001854 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185e:	2003      	movs	r0, #3
 8001860:	f000 f95a 	bl	8001b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001864:	200f      	movs	r0, #15
 8001866:	f000 f80d 	bl	8001884 <HAL_InitTick>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	71fb      	strb	r3, [r7, #7]
 8001874:	e001      	b.n	800187a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001876:	f7ff f823 	bl	80008c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800187a:	79fb      	ldrb	r3, [r7, #7]

}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001890:	4b16      	ldr	r3, [pc, #88]	; (80018ec <HAL_InitTick+0x68>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d022      	beq.n	80018de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_InitTick+0x6c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <HAL_InitTick+0x68>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 f966 	bl	8001b7e <HAL_SYSTICK_Config>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10f      	bne.n	80018d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b0f      	cmp	r3, #15
 80018bc:	d809      	bhi.n	80018d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018be:	2200      	movs	r2, #0
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	f04f 30ff 	mov.w	r0, #4294967295
 80018c6:	f000 f932 	bl	8001b2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <HAL_InitTick+0x70>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	e007      	b.n	80018e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]
 80018d6:	e004      	b.n	80018e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e001      	b.n	80018e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000008 	.word	0x20000008
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_IncTick+0x1c>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_IncTick+0x20>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4413      	add	r3, r2
 8001906:	4a03      	ldr	r2, [pc, #12]	; (8001914 <HAL_IncTick+0x1c>)
 8001908:	6013      	str	r3, [r2, #0]
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	2000044c 	.word	0x2000044c
 8001918:	20000008 	.word	0x20000008

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	2000044c 	.word	0x2000044c

08001934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7ff ffee 	bl	800191c <HAL_GetTick>
 8001940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194c:	d004      	beq.n	8001958 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_Delay+0x40>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4413      	add	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001958:	bf00      	nop
 800195a:	f7ff ffdf 	bl	800191c <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	429a      	cmp	r2, r3
 8001968:	d8f7      	bhi.n	800195a <HAL_Delay+0x26>
  {
  }
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000008 	.word	0x20000008

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0b      	blt.n	8001a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	4907      	ldr	r1, [pc, #28]	; (8001a14 <__NVIC_EnableIRQ+0x38>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	2001      	movs	r0, #1
 80019fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000e100 	.word	0xe000e100

08001a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db0a      	blt.n	8001a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	; (8001a64 <__NVIC_SetPriority+0x4c>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a40:	e00a      	b.n	8001a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4908      	ldr	r1, [pc, #32]	; (8001a68 <__NVIC_SetPriority+0x50>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	440b      	add	r3, r1
 8001a56:	761a      	strb	r2, [r3, #24]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f1c3 0307 	rsb	r3, r3, #7
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	bf28      	it	cs
 8001a8a:	2304      	movcs	r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d902      	bls.n	8001a9c <NVIC_EncodePriority+0x30>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <NVIC_EncodePriority+0x32>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43d9      	mvns	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	4313      	orrs	r3, r2
         );
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	; 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae4:	d301      	bcc.n	8001aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00f      	b.n	8001b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <SysTick_Config+0x40>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af2:	210f      	movs	r1, #15
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	f7ff ff8e 	bl	8001a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <SysTick_Config+0x40>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <SysTick_Config+0x40>)
 8001b04:	2207      	movs	r2, #7
 8001b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	e000e010 	.word	0xe000e010

08001b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff29 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3c:	f7ff ff40 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001b40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	6978      	ldr	r0, [r7, #20]
 8001b48:	f7ff ff90 	bl	8001a6c <NVIC_EncodePriority>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff5f 	bl	8001a18 <__NVIC_SetPriority>
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff33 	bl	80019dc <__NVIC_EnableIRQ>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ffa4 	bl	8001ad4 <SysTick_Config>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b085      	sub	sp, #20
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d005      	beq.n	8001bba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	e037      	b.n	8001c2a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 020e 	bic.w	r2, r2, #14
 8001bc8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bd8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0201 	bic.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f003 021f 	and.w	r2, r3, #31
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c06:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00c      	beq.n	8001c2a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c1e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c28:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d00d      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2204      	movs	r2, #4
 8001c64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
 8001c7a:	e047      	b.n	8001d0c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 020e 	bic.w	r2, r2, #14
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0201 	bic.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001caa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	2101      	movs	r1, #1
 8001cba:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cc8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00c      	beq.n	8001cec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ce0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001cea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
    }
  }
  return status;
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <HAL_FLASH_Program+0xd0>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_FLASH_Program+0x1e>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e053      	b.n	8001dde <HAL_FLASH_Program+0xc6>
 8001d36:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <HAL_FLASH_Program+0xd0>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d40:	f000 f892 	bl	8001e68 <FLASH_WaitForLastOperation>
 8001d44:	4603      	mov	r3, r0
 8001d46:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d143      	bne.n	8001dd6 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d4e:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <HAL_FLASH_Program+0xd0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_FLASH_Program+0xd4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d009      	beq.n	8001d74 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001d60:	4b22      	ldr	r3, [pc, #136]	; (8001dec <HAL_FLASH_Program+0xd4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a21      	ldr	r2, [pc, #132]	; (8001dec <HAL_FLASH_Program+0xd4>)
 8001d66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d6a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_FLASH_Program+0xd0>)
 8001d6e:	2202      	movs	r2, #2
 8001d70:	771a      	strb	r2, [r3, #28]
 8001d72:	e002      	b.n	8001d7a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HAL_FLASH_Program+0xd0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d107      	bne.n	8001d90 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	f000 f8c3 	bl	8001f10 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	e010      	b.n	8001db2 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d002      	beq.n	8001d9c <HAL_FLASH_Program+0x84>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d10a      	bne.n	8001db2 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	68b8      	ldr	r0, [r7, #8]
 8001da2:	f000 f8db 	bl	8001f5c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d102      	bne.n	8001db2 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001dac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001db0:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001db6:	f000 f857 	bl	8001e68 <FLASH_WaitForLastOperation>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_FLASH_Program+0xd4>)
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <HAL_FLASH_Program+0xd4>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001dd2:	f000 fa11 	bl	80021f8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <HAL_FLASH_Program+0xd0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000000c 	.word	0x2000000c
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_FLASH_Unlock+0x38>)
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da0b      	bge.n	8001e1a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_FLASH_Unlock+0x38>)
 8001e04:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <HAL_FLASH_Unlock+0x3c>)
 8001e06:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <HAL_FLASH_Unlock+0x38>)
 8001e0a:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <HAL_FLASH_Unlock+0x40>)
 8001e0c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_FLASH_Unlock+0x38>)
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	da01      	bge.n	8001e1a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	45670123 	.word	0x45670123
 8001e30:	cdef89ab 	.word	0xcdef89ab

08001e34 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_FLASH_Lock+0x30>)
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <HAL_FLASH_Lock+0x30>)
 8001e44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e48:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_FLASH_Lock+0x30>)
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	da01      	bge.n	8001e56 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001e56:	79fb      	ldrb	r3, [r7, #7]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	40022000 	.word	0x40022000

08001e68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff fd54 	bl	800191c <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001e76:	e009      	b.n	8001e8c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8001e78:	f7ff fd50 	bl	800191c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d201      	bcs.n	8001e8c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e038      	b.n	8001efe <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001e8c:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <FLASH_WaitForLastOperation+0xa0>)
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e98:	d0ee      	beq.n	8001e78 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <FLASH_WaitForLastOperation+0xa0>)
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01e      	beq.n	8001eea <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8001eac:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <FLASH_WaitForLastOperation+0xa4>)
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <FLASH_WaitForLastOperation+0xa4>)
 8001eb6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <FLASH_WaitForLastOperation+0x6a>
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <FLASH_WaitForLastOperation+0xa0>)
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001ecc:	490e      	ldr	r1, [pc, #56]	; (8001f08 <FLASH_WaitForLastOperation+0xa0>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	618b      	str	r3, [r1, #24]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <FLASH_WaitForLastOperation+0x7e>
 8001edc:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <FLASH_WaitForLastOperation+0xa0>)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001ee4:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e009      	b.n	8001efe <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <FLASH_WaitForLastOperation+0xa0>)
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d102      	bne.n	8001efc <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <FLASH_WaitForLastOperation+0xa0>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40022000 	.word	0x40022000
 8001f0c:	2000000c 	.word	0x2000000c

08001f10 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <FLASH_Program_DoubleWord+0x48>)
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <FLASH_Program_DoubleWord+0x48>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001f2e:	f3bf 8f6f 	isb	sy
}
 8001f32:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8001f34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	000a      	movs	r2, r1
 8001f42:	2300      	movs	r3, #0
 8001f44:	68f9      	ldr	r1, [r7, #12]
 8001f46:	3104      	adds	r1, #4
 8001f48:	4613      	mov	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	40022000 	.word	0x40022000

08001f5c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8001f66:	2340      	movs	r3, #64	; 0x40
 8001f68:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <FLASH_Program_Fast+0x68>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <FLASH_Program_Fast+0x68>)
 8001f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f7c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f82:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f84:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8001f86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
}
 8001f8a:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	3304      	adds	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	617b      	str	r3, [r7, #20]
    row_index--;
 8001fa0:	7ffb      	ldrb	r3, [r7, #31]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8001fa6:	7ffb      	ldrb	r3, [r7, #31]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1ef      	bne.n	8001f8c <FLASH_Program_Fast+0x30>
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f383 8810 	msr	PRIMASK, r3
}
 8001fb6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8001fb8:	bf00      	nop
 8001fba:	3724      	adds	r7, #36	; 0x24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40022000 	.word	0x40022000

08001fc8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001fd2:	4b49      	ldr	r3, [pc, #292]	; (80020f8 <HAL_FLASHEx_Erase+0x130>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_FLASHEx_Erase+0x16>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e087      	b.n	80020ee <HAL_FLASHEx_Erase+0x126>
 8001fde:	4b46      	ldr	r3, [pc, #280]	; (80020f8 <HAL_FLASHEx_Erase+0x130>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fe4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fe8:	f7ff ff3e 	bl	8001e68 <FLASH_WaitForLastOperation>
 8001fec:	4603      	mov	r3, r0
 8001fee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d177      	bne.n	80020e6 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ff6:	4b40      	ldr	r3, [pc, #256]	; (80020f8 <HAL_FLASHEx_Erase+0x130>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001ffc:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <HAL_FLASHEx_Erase+0x134>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002004:	2b00      	cmp	r3, #0
 8002006:	d013      	beq.n	8002030 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002008:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <HAL_FLASHEx_Erase+0x134>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002010:	2b00      	cmp	r3, #0
 8002012:	d009      	beq.n	8002028 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002014:	4b39      	ldr	r3, [pc, #228]	; (80020fc <HAL_FLASHEx_Erase+0x134>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a38      	ldr	r2, [pc, #224]	; (80020fc <HAL_FLASHEx_Erase+0x134>)
 800201a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800201e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002020:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <HAL_FLASHEx_Erase+0x130>)
 8002022:	2203      	movs	r2, #3
 8002024:	771a      	strb	r2, [r3, #28]
 8002026:	e016      	b.n	8002056 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002028:	4b33      	ldr	r3, [pc, #204]	; (80020f8 <HAL_FLASHEx_Erase+0x130>)
 800202a:	2201      	movs	r2, #1
 800202c:	771a      	strb	r2, [r3, #28]
 800202e:	e012      	b.n	8002056 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002030:	4b32      	ldr	r3, [pc, #200]	; (80020fc <HAL_FLASHEx_Erase+0x134>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002038:	2b00      	cmp	r3, #0
 800203a:	d009      	beq.n	8002050 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800203c:	4b2f      	ldr	r3, [pc, #188]	; (80020fc <HAL_FLASHEx_Erase+0x134>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a2e      	ldr	r2, [pc, #184]	; (80020fc <HAL_FLASHEx_Erase+0x134>)
 8002042:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002046:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002048:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_FLASHEx_Erase+0x130>)
 800204a:	2202      	movs	r2, #2
 800204c:	771a      	strb	r2, [r3, #28]
 800204e:	e002      	b.n	8002056 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <HAL_FLASHEx_Erase+0x130>)
 8002052:	2200      	movs	r2, #0
 8002054:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d113      	bne.n	8002086 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f84c 	bl	8002100 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800206c:	f7ff fefc 	bl	8001e68 <FLASH_WaitForLastOperation>
 8002070:	4603      	mov	r3, r0
 8002072:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002074:	4b21      	ldr	r3, [pc, #132]	; (80020fc <HAL_FLASHEx_Erase+0x134>)
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	4a20      	ldr	r2, [pc, #128]	; (80020fc <HAL_FLASHEx_Erase+0x134>)
 800207a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800207e:	f023 0304 	bic.w	r3, r3, #4
 8002082:	6153      	str	r3, [r2, #20]
 8002084:	e02d      	b.n	80020e2 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	e01d      	b.n	80020d2 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4619      	mov	r1, r3
 800209c:	68b8      	ldr	r0, [r7, #8]
 800209e:	f000 f867 	bl	8002170 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020a6:	f7ff fedf 	bl	8001e68 <FLASH_WaitForLastOperation>
 80020aa:	4603      	mov	r3, r0
 80020ac:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_FLASHEx_Erase+0x134>)
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <HAL_FLASHEx_Erase+0x134>)
 80020b4:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80020b8:	f023 0302 	bic.w	r3, r3, #2
 80020bc:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	601a      	str	r2, [r3, #0]
          break;
 80020ca:	e00a      	b.n	80020e2 <HAL_FLASHEx_Erase+0x11a>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	3301      	adds	r3, #1
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d3d9      	bcc.n	8002096 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80020e2:	f000 f889 	bl	80021f8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <HAL_FLASHEx_Erase+0x130>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]

  return status;
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000000c 	.word	0x2000000c
 80020fc:	40022000 	.word	0x40022000

08002100 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <FLASH_MassErase+0x6c>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d016      	beq.n	8002142 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800211e:	4b13      	ldr	r3, [pc, #76]	; (800216c <FLASH_MassErase+0x6c>)
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <FLASH_MassErase+0x6c>)
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00e      	beq.n	8002152 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002134:	4b0d      	ldr	r3, [pc, #52]	; (800216c <FLASH_MassErase+0x6c>)
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	4a0c      	ldr	r2, [pc, #48]	; (800216c <FLASH_MassErase+0x6c>)
 800213a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800213e:	6153      	str	r3, [r2, #20]
 8002140:	e007      	b.n	8002152 <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <FLASH_MassErase+0x6c>)
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	4a09      	ldr	r2, [pc, #36]	; (800216c <FLASH_MassErase+0x6c>)
 8002148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <FLASH_MassErase+0x6c>)
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <FLASH_MassErase+0x6c>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215c:	6153      	str	r3, [r2, #20]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40022000 	.word	0x40022000

08002170 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <FLASH_PageErase+0x84>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002186:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <FLASH_PageErase+0x84>)
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <FLASH_PageErase+0x84>)
 800218c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002190:	6153      	str	r3, [r2, #20]
 8002192:	e011      	b.n	80021b8 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <FLASH_PageErase+0x84>)
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <FLASH_PageErase+0x84>)
 80021a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021a8:	6153      	str	r3, [r2, #20]
 80021aa:	e005      	b.n	80021b8 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <FLASH_PageErase+0x84>)
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <FLASH_PageErase+0x84>)
 80021b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021b6:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <FLASH_PageErase+0x84>)
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80021c8:	490a      	ldr	r1, [pc, #40]	; (80021f4 <FLASH_PageErase+0x84>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <FLASH_PageErase+0x84>)
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <FLASH_PageErase+0x84>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <FLASH_PageErase+0x84>)
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <FLASH_PageErase+0x84>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6153      	str	r3, [r2, #20]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40022000 	.word	0x40022000

080021f8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80021fe:	4b21      	ldr	r3, [pc, #132]	; (8002284 <FLASH_FlushCaches+0x8c>)
 8002200:	7f1b      	ldrb	r3, [r3, #28]
 8002202:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d002      	beq.n	8002210 <FLASH_FlushCaches+0x18>
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d117      	bne.n	8002240 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <FLASH_FlushCaches+0x90>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a1c      	ldr	r2, [pc, #112]	; (8002288 <FLASH_FlushCaches+0x90>)
 8002216:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800221a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800221c:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <FLASH_FlushCaches+0x90>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a19      	ldr	r2, [pc, #100]	; (8002288 <FLASH_FlushCaches+0x90>)
 8002222:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <FLASH_FlushCaches+0x90>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a16      	ldr	r2, [pc, #88]	; (8002288 <FLASH_FlushCaches+0x90>)
 800222e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002232:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <FLASH_FlushCaches+0x90>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a13      	ldr	r2, [pc, #76]	; (8002288 <FLASH_FlushCaches+0x90>)
 800223a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800223e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d002      	beq.n	800224c <FLASH_FlushCaches+0x54>
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d111      	bne.n	8002270 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <FLASH_FlushCaches+0x90>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0d      	ldr	r2, [pc, #52]	; (8002288 <FLASH_FlushCaches+0x90>)
 8002252:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <FLASH_FlushCaches+0x90>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <FLASH_FlushCaches+0x90>)
 800225e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002262:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <FLASH_FlushCaches+0x90>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <FLASH_FlushCaches+0x90>)
 800226a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <FLASH_FlushCaches+0x8c>)
 8002272:	2200      	movs	r2, #0
 8002274:	771a      	strb	r2, [r3, #28]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	2000000c 	.word	0x2000000c
 8002288:	40022000 	.word	0x40022000

0800228c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800229a:	e15a      	b.n	8002552 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 814c 	beq.w	800254c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d005      	beq.n	80022cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d130      	bne.n	800232e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002302:	2201      	movs	r2, #1
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 0201 	and.w	r2, r3, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b03      	cmp	r3, #3
 8002338:	d017      	beq.n	800236a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d123      	bne.n	80023be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	08da      	lsrs	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3208      	adds	r2, #8
 80023b8:	6939      	ldr	r1, [r7, #16]
 80023ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0203 	and.w	r2, r3, #3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 80a6 	beq.w	800254c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002400:	4b5b      	ldr	r3, [pc, #364]	; (8002570 <HAL_GPIO_Init+0x2e4>)
 8002402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002404:	4a5a      	ldr	r2, [pc, #360]	; (8002570 <HAL_GPIO_Init+0x2e4>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6613      	str	r3, [r2, #96]	; 0x60
 800240c:	4b58      	ldr	r3, [pc, #352]	; (8002570 <HAL_GPIO_Init+0x2e4>)
 800240e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002418:	4a56      	ldr	r2, [pc, #344]	; (8002574 <HAL_GPIO_Init+0x2e8>)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	220f      	movs	r2, #15
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002442:	d01f      	beq.n	8002484 <HAL_GPIO_Init+0x1f8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a4c      	ldr	r2, [pc, #304]	; (8002578 <HAL_GPIO_Init+0x2ec>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d019      	beq.n	8002480 <HAL_GPIO_Init+0x1f4>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a4b      	ldr	r2, [pc, #300]	; (800257c <HAL_GPIO_Init+0x2f0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d013      	beq.n	800247c <HAL_GPIO_Init+0x1f0>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a4a      	ldr	r2, [pc, #296]	; (8002580 <HAL_GPIO_Init+0x2f4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00d      	beq.n	8002478 <HAL_GPIO_Init+0x1ec>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a49      	ldr	r2, [pc, #292]	; (8002584 <HAL_GPIO_Init+0x2f8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d007      	beq.n	8002474 <HAL_GPIO_Init+0x1e8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a48      	ldr	r2, [pc, #288]	; (8002588 <HAL_GPIO_Init+0x2fc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_GPIO_Init+0x1e4>
 800246c:	2305      	movs	r3, #5
 800246e:	e00a      	b.n	8002486 <HAL_GPIO_Init+0x1fa>
 8002470:	2306      	movs	r3, #6
 8002472:	e008      	b.n	8002486 <HAL_GPIO_Init+0x1fa>
 8002474:	2304      	movs	r3, #4
 8002476:	e006      	b.n	8002486 <HAL_GPIO_Init+0x1fa>
 8002478:	2303      	movs	r3, #3
 800247a:	e004      	b.n	8002486 <HAL_GPIO_Init+0x1fa>
 800247c:	2302      	movs	r3, #2
 800247e:	e002      	b.n	8002486 <HAL_GPIO_Init+0x1fa>
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <HAL_GPIO_Init+0x1fa>
 8002484:	2300      	movs	r3, #0
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	f002 0203 	and.w	r2, r2, #3
 800248c:	0092      	lsls	r2, r2, #2
 800248e:	4093      	lsls	r3, r2
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002496:	4937      	ldr	r1, [pc, #220]	; (8002574 <HAL_GPIO_Init+0x2e8>)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	3302      	adds	r3, #2
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024a4:	4b39      	ldr	r3, [pc, #228]	; (800258c <HAL_GPIO_Init+0x300>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024c8:	4a30      	ldr	r2, [pc, #192]	; (800258c <HAL_GPIO_Init+0x300>)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024ce:	4b2f      	ldr	r3, [pc, #188]	; (800258c <HAL_GPIO_Init+0x300>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024f2:	4a26      	ldr	r2, [pc, #152]	; (800258c <HAL_GPIO_Init+0x300>)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80024f8:	4b24      	ldr	r3, [pc, #144]	; (800258c <HAL_GPIO_Init+0x300>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	43db      	mvns	r3, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800251c:	4a1b      	ldr	r2, [pc, #108]	; (800258c <HAL_GPIO_Init+0x300>)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_GPIO_Init+0x300>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002546:	4a11      	ldr	r2, [pc, #68]	; (800258c <HAL_GPIO_Init+0x300>)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	3301      	adds	r3, #1
 8002550:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	f47f ae9d 	bne.w	800229c <HAL_GPIO_Init+0x10>
  }
}
 8002562:	bf00      	nop
 8002564:	bf00      	nop
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	40021000 	.word	0x40021000
 8002574:	40010000 	.word	0x40010000
 8002578:	48000400 	.word	0x48000400
 800257c:	48000800 	.word	0x48000800
 8002580:	48000c00 	.word	0x48000c00
 8002584:	48001000 	.word	0x48001000
 8002588:	48001400 	.word	0x48001400
 800258c:	40010400 	.word	0x40010400

08002590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025ac:	e002      	b.n	80025b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ae:	887a      	ldrh	r2, [r7, #2]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0c0      	b.n	8002754 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f009 fa52 	bl	800ba90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2203      	movs	r2, #3
 80025f0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f005 f84c 	bl	8007696 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	e03e      	b.n	8002682 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	3311      	adds	r3, #17
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	440b      	add	r3, r1
 8002626:	3310      	adds	r3, #16
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	440b      	add	r3, r1
 800263a:	3313      	adds	r3, #19
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	440b      	add	r3, r1
 800264e:	3320      	adds	r3, #32
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	3324      	adds	r3, #36	; 0x24
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	440b      	add	r3, r1
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	3301      	adds	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	791b      	ldrb	r3, [r3, #4]
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	429a      	cmp	r2, r3
 800268a:	d3bb      	bcc.n	8002604 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e044      	b.n	800271c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	f203 1351 	addw	r3, r3, #337	; 0x151
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	440b      	add	r3, r1
 80026cc:	f203 1353 	addw	r3, r3, #339	; 0x153
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026d4:	7bfa      	ldrb	r2, [r7, #15]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	440b      	add	r3, r1
 80026e2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	440b      	add	r3, r1
 80026f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	440b      	add	r3, r1
 800270e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	3301      	adds	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	791b      	ldrb	r3, [r3, #4]
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	429a      	cmp	r2, r3
 8002724:	d3b5      	bcc.n	8002692 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3304      	adds	r3, #4
 800272e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002732:	f004 ffcb 	bl	80076cc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7a9b      	ldrb	r3, [r3, #10]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d102      	bne.n	8002752 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f001 fc41 	bl	8003fd4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_PCD_Start+0x16>
 800276e:	2302      	movs	r3, #2
 8002770:	e012      	b.n	8002798 <HAL_PCD_Start+0x3c>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f004 ff72 	bl	8007668 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f007 fa32 	bl	8009bf2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f007 fa37 	bl	8009c20 <USB_ReadInterrupts>
 80027b2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fb04 	bl	8002dcc <PCD_EP_ISR_Handler>

    return;
 80027c4:	e110      	b.n	80029e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027d8:	b29a      	uxth	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e2:	b292      	uxth	r2, r2
 80027e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f009 f9e2 	bl	800bbb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80027ee:	2100      	movs	r1, #0
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f8fc 	bl	80029ee <HAL_PCD_SetAddress>

    return;
 80027f6:	e0f7      	b.n	80029e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00c      	beq.n	800281c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800280a:	b29a      	uxth	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002814:	b292      	uxth	r2, r2
 8002816:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800281a:	e0e5      	b.n	80029e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00c      	beq.n	8002840 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800282e:	b29a      	uxth	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002838:	b292      	uxth	r2, r2
 800283a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800283e:	e0d3      	b.n	80029e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d034      	beq.n	80028b4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002852:	b29a      	uxth	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0204 	bic.w	r2, r2, #4
 800285c:	b292      	uxth	r2, r2
 800285e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800286a:	b29a      	uxth	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0208 	bic.w	r2, r2, #8
 8002874:	b292      	uxth	r2, r2
 8002876:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800288c:	2100      	movs	r1, #0
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f009 fb82 	bl	800bf98 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f009 f9c5 	bl	800bc24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028ac:	b292      	uxth	r2, r2
 80028ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80028b2:	e099      	b.n	80029e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d027      	beq.n	800290e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0208 	orr.w	r2, r2, #8
 80028d0:	b292      	uxth	r2, r2
 80028d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028de:	b29a      	uxth	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e8:	b292      	uxth	r2, r2
 80028ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0204 	orr.w	r2, r2, #4
 8002900:	b292      	uxth	r2, r2
 8002902:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f009 f972 	bl	800bbf0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800290c:	e06c      	b.n	80029e8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002914:	2b00      	cmp	r3, #0
 8002916:	d040      	beq.n	800299a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002920:	b29a      	uxth	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800292a:	b292      	uxth	r2, r2
 800292c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d12b      	bne.n	8002992 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0204 	orr.w	r2, r2, #4
 800294c:	b292      	uxth	r2, r2
 800294e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800295a:	b29a      	uxth	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0208 	orr.w	r2, r2, #8
 8002964:	b292      	uxth	r2, r2
 8002966:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800297a:	b29b      	uxth	r3, r3
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002988:	2101      	movs	r1, #1
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f009 fb04 	bl	800bf98 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002990:	e02a      	b.n	80029e8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f009 f92c 	bl	800bbf0 <HAL_PCD_SuspendCallback>
    return;
 8002998:	e026      	b.n	80029e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00f      	beq.n	80029c4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029b6:	b292      	uxth	r2, r2
 80029b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f009 f8ea 	bl	800bb96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80029c2:	e011      	b.n	80029e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00c      	beq.n	80029e8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029e0:	b292      	uxth	r2, r2
 80029e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80029e6:	bf00      	nop
  }
}
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_PCD_SetAddress+0x1a>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e012      	b.n	8002a2e <HAL_PCD_SetAddress+0x40>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f007 f8d3 	bl	8009bca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	4608      	mov	r0, r1
 8002a40:	4611      	mov	r1, r2
 8002a42:	461a      	mov	r2, r3
 8002a44:	4603      	mov	r3, r0
 8002a46:	70fb      	strb	r3, [r7, #3]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	803b      	strh	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	da0e      	bge.n	8002a7a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	f003 0207 	and.w	r2, r3, #7
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	3310      	adds	r3, #16
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	705a      	strb	r2, [r3, #1]
 8002a78:	e00e      	b.n	8002a98 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a7a:	78fb      	ldrb	r3, [r7, #3]
 8002a7c:	f003 0207 	and.w	r2, r3, #7
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	4413      	add	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002aa4:	883a      	ldrh	r2, [r7, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	78ba      	ldrb	r2, [r7, #2]
 8002aae:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ab0:	78bb      	ldrb	r3, [r7, #2]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d102      	bne.n	8002abc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_PCD_EP_Open+0x94>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e00e      	b.n	8002ae8 <HAL_PCD_EP_Open+0xb2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68f9      	ldr	r1, [r7, #12]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f004 fe15 	bl	8007708 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8002ae6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	da0e      	bge.n	8002b22 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	f003 0207 	and.w	r2, r3, #7
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	3310      	adds	r3, #16
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	4413      	add	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	705a      	strb	r2, [r3, #1]
 8002b20:	e00e      	b.n	8002b40 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	f003 0207 	and.w	r2, r3, #7
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_PCD_EP_Close+0x6a>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e00e      	b.n	8002b78 <HAL_PCD_EP_Close+0x88>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68f9      	ldr	r1, [r7, #12]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f005 f991 	bl	8007e90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b90:	7afb      	ldrb	r3, [r7, #11]
 8002b92:	f003 0207 	and.w	r2, r3, #7
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc0:	7afb      	ldrb	r3, [r7, #11]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6979      	ldr	r1, [r7, #20]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f005 fb49 	bl	800826a <USB_EPStartXfer>

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	f003 0207 	and.w	r2, r3, #7
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	440b      	add	r3, r1
 8002c00:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002c04:	681b      	ldr	r3, [r3, #0]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c22:	7afb      	ldrb	r3, [r7, #11]
 8002c24:	f003 0207 	and.w	r2, r3, #7
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	3310      	adds	r3, #16
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4413      	add	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2200      	movs	r2, #0
 8002c56:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c5e:	7afb      	ldrb	r3, [r7, #11]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6979      	ldr	r1, [r7, #20]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f005 fafa 	bl	800826a <USB_EPStartXfer>

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	7912      	ldrb	r2, [r2, #4]
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e03e      	b.n	8002d1c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	da0e      	bge.n	8002cc4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	f003 0207 	and.w	r2, r3, #7
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	3310      	adds	r3, #16
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	705a      	strb	r2, [r3, #1]
 8002cc2:	e00c      	b.n	8002cde <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_PCD_EP_SetStall+0x7e>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e00e      	b.n	8002d1c <HAL_PCD_EP_SetStall+0x9c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68f9      	ldr	r1, [r7, #12]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f006 fe5d 	bl	80099cc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	7912      	ldrb	r2, [r2, #4]
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e040      	b.n	8002dc4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	da0e      	bge.n	8002d68 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	f003 0207 	and.w	r2, r3, #7
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	3310      	adds	r3, #16
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	705a      	strb	r2, [r3, #1]
 8002d66:	e00e      	b.n	8002d86 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	f003 0207 	and.w	r2, r3, #7
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_PCD_EP_ClrStall+0x82>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e00e      	b.n	8002dc4 <HAL_PCD_EP_ClrStall+0xa0>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68f9      	ldr	r1, [r7, #12]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f006 fe5a 	bl	8009a6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b096      	sub	sp, #88	; 0x58
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002dd4:	e3ae      	b.n	8003534 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dde:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002de2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002df0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f040 8170 	bne.w	80030da <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002dfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d14d      	bne.n	8002ea2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e16:	81fb      	strh	r3, [r7, #14]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	89fb      	ldrh	r3, [r7, #14]
 8002e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3310      	adds	r3, #16
 8002e2e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e56:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	441a      	add	r2, r3
 8002e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e64:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002e66:	2100      	movs	r1, #0
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f008 fe7a 	bl	800bb62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	7b1b      	ldrb	r3, [r3, #12]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 835d 	beq.w	8003534 <PCD_EP_ISR_Handler+0x768>
 8002e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 8358 	bne.w	8003534 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	7b1b      	ldrb	r3, [r3, #12]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	b292      	uxth	r2, r2
 8002e96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	731a      	strb	r2, [r3, #12]
 8002ea0:	e348      	b.n	8003534 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002ea8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002eb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d032      	beq.n	8002f26 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8002ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f006 fee2 	bl	8009cc4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	823b      	strh	r3, [r7, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	8a3a      	ldrh	r2, [r7, #16]
 8002f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f1a:	b292      	uxth	r2, r2
 8002f1c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f008 fdf2 	bl	800bb08 <HAL_PCD_SetupStageCallback>
 8002f24:	e306      	b.n	8003534 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f26:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f280 8302 	bge.w	8003534 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	83fb      	strh	r3, [r7, #30]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	8bfa      	ldrh	r2, [r7, #30]
 8002f46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f4a:	b292      	uxth	r2, r2
 8002f4c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	4413      	add	r3, r2
 8002f68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f74:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d019      	beq.n	8002fb2 <PCD_EP_ISR_Handler+0x1e6>
 8002f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d015      	beq.n	8002fb2 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f8c:	6959      	ldr	r1, [r3, #20]
 8002f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f90:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f94:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	f006 fe94 	bl	8009cc4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	441a      	add	r2, r3
 8002fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002faa:	2100      	movs	r1, #0
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f008 fdbd 	bl	800bb2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002fbc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f040 82b5 	bne.w	8003534 <PCD_EP_ISR_Handler+0x768>
 8002fca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002fce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002fd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fd6:	f000 82ad 	beq.w	8003534 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	4413      	add	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003004:	b29a      	uxth	r2, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	801a      	strh	r2, [r3, #0]
 800300a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b3e      	cmp	r3, #62	; 0x3e
 8003010:	d91d      	bls.n	800304e <PCD_EP_ISR_Handler+0x282>
 8003012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	647b      	str	r3, [r7, #68]	; 0x44
 800301a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <PCD_EP_ISR_Handler+0x260>
 8003026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003028:	3b01      	subs	r3, #1
 800302a:	647b      	str	r3, [r7, #68]	; 0x44
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	b29a      	uxth	r2, r3
 8003032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003034:	b29b      	uxth	r3, r3
 8003036:	029b      	lsls	r3, r3, #10
 8003038:	b29b      	uxth	r3, r3
 800303a:	4313      	orrs	r3, r2
 800303c:	b29b      	uxth	r3, r3
 800303e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003046:	b29a      	uxth	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	801a      	strh	r2, [r3, #0]
 800304c:	e026      	b.n	800309c <PCD_EP_ISR_Handler+0x2d0>
 800304e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10a      	bne.n	800306c <PCD_EP_ISR_Handler+0x2a0>
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
 800305c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003064:	b29a      	uxth	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	801a      	strh	r2, [r3, #0]
 800306a:	e017      	b.n	800309c <PCD_EP_ISR_Handler+0x2d0>
 800306c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	085b      	lsrs	r3, r3, #1
 8003072:	647b      	str	r3, [r7, #68]	; 0x44
 8003074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <PCD_EP_ISR_Handler+0x2ba>
 8003080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003082:	3301      	adds	r3, #1
 8003084:	647b      	str	r3, [r7, #68]	; 0x44
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	b29a      	uxth	r2, r3
 800308c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800308e:	b29b      	uxth	r3, r3
 8003090:	029b      	lsls	r3, r3, #10
 8003092:	b29b      	uxth	r3, r3
 8003094:	4313      	orrs	r3, r2
 8003096:	b29a      	uxth	r2, r3
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ac:	827b      	strh	r3, [r7, #18]
 80030ae:	8a7b      	ldrh	r3, [r7, #18]
 80030b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80030b4:	827b      	strh	r3, [r7, #18]
 80030b6:	8a7b      	ldrh	r3, [r7, #18]
 80030b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030bc:	827b      	strh	r3, [r7, #18]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	8a7b      	ldrh	r3, [r7, #18]
 80030c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	8013      	strh	r3, [r2, #0]
 80030d8:	e22c      	b.n	8003534 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030ee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f280 80f6 	bge.w	80032e4 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29a      	uxth	r2, r3
 800310a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800310e:	4013      	ands	r3, r2
 8003110:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003126:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800312a:	b292      	uxth	r2, r2
 800312c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800312e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003146:	7b1b      	ldrb	r3, [r3, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d123      	bne.n	8003194 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003154:	b29b      	uxth	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	4413      	add	r3, r2
 8003166:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003170:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003174:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 808e 	beq.w	800329a <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003184:	6959      	ldr	r1, [r3, #20]
 8003186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003188:	88da      	ldrh	r2, [r3, #6]
 800318a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800318e:	f006 fd99 	bl	8009cc4 <USB_ReadPMA>
 8003192:	e082      	b.n	800329a <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003196:	78db      	ldrb	r3, [r3, #3]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d10a      	bne.n	80031b2 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800319c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031a0:	461a      	mov	r2, r3
 80031a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f9d3 	bl	8003550 <HAL_PCD_EP_DB_Receive>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80031b0:	e073      	b.n	800329a <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031cc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	441a      	add	r2, r3
 80031de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d022      	beq.n	8003256 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003218:	b29b      	uxth	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	4413      	add	r3, r2
 800322a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003234:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003238:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800323c:	2b00      	cmp	r3, #0
 800323e:	d02c      	beq.n	800329a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003246:	6959      	ldr	r1, [r3, #20]
 8003248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324a:	891a      	ldrh	r2, [r3, #8]
 800324c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003250:	f006 fd38 	bl	8009cc4 <USB_ReadPMA>
 8003254:	e021      	b.n	800329a <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800325e:	b29b      	uxth	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	4413      	add	r3, r2
 8003270:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800327a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800327e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328c:	6959      	ldr	r1, [r3, #20]
 800328e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003290:	895a      	ldrh	r2, [r3, #10]
 8003292:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003296:	f006 fd15 	bl	8009cc4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800329a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032a2:	441a      	add	r2, r3
 80032a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80032a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032b0:	441a      	add	r2, r3
 80032b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80032b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <PCD_EP_ISR_Handler+0x4fe>
 80032be:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80032c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d206      	bcs.n	80032d8 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80032ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	4619      	mov	r1, r3
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f008 fc2b 	bl	800bb2c <HAL_PCD_DataOutStageCallback>
 80032d6:	e005      	b.n	80032e4 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032de:	4618      	mov	r0, r3
 80032e0:	f004 ffc3 	bl	800826a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80032e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8121 	beq.w	8003534 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80032f2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	3310      	adds	r3, #16
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	4413      	add	r3, r2
 8003304:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800331c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003320:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	441a      	add	r2, r3
 8003332:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800333a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333e:	b29b      	uxth	r3, r3
 8003340:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003344:	78db      	ldrb	r3, [r3, #3]
 8003346:	2b01      	cmp	r3, #1
 8003348:	f040 80a2 	bne.w	8003490 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800334c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800334e:	2200      	movs	r2, #0
 8003350:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003354:	7b1b      	ldrb	r3, [r3, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 8093 	beq.w	8003482 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800335c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d046      	beq.n	80033f6 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d126      	bne.n	80033be <PCD_EP_ISR_Handler+0x5f2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800337e:	b29b      	uxth	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	4413      	add	r3, r2
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
 8003388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	00da      	lsls	r2, r3, #3
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	4413      	add	r3, r2
 8003392:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003396:	623b      	str	r3, [r7, #32]
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	801a      	strh	r2, [r3, #0]
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	801a      	strh	r2, [r3, #0]
 80033bc:	e061      	b.n	8003482 <PCD_EP_ISR_Handler+0x6b6>
 80033be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c0:	785b      	ldrb	r3, [r3, #1]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d15d      	bne.n	8003482 <PCD_EP_ISR_Handler+0x6b6>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033da:	4413      	add	r3, r2
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	00da      	lsls	r2, r3, #3
 80033e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e6:	4413      	add	r3, r2
 80033e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	2200      	movs	r2, #0
 80033f2:	801a      	strh	r2, [r3, #0]
 80033f4:	e045      	b.n	8003482 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033fe:	785b      	ldrb	r3, [r3, #1]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d126      	bne.n	8003452 <PCD_EP_ISR_Handler+0x686>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003412:	b29b      	uxth	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003418:	4413      	add	r3, r2
 800341a:	637b      	str	r3, [r7, #52]	; 0x34
 800341c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	00da      	lsls	r2, r3, #3
 8003422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003424:	4413      	add	r3, r2
 8003426:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800342a:	633b      	str	r3, [r7, #48]	; 0x30
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003436:	b29a      	uxth	r2, r3
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	801a      	strh	r2, [r3, #0]
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800344a:	b29a      	uxth	r2, r3
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	801a      	strh	r2, [r3, #0]
 8003450:	e017      	b.n	8003482 <PCD_EP_ISR_Handler+0x6b6>
 8003452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003454:	785b      	ldrb	r3, [r3, #1]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d113      	bne.n	8003482 <PCD_EP_ISR_Handler+0x6b6>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003462:	b29b      	uxth	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003468:	4413      	add	r3, r2
 800346a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800346c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	00da      	lsls	r2, r3, #3
 8003472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003474:	4413      	add	r3, r2
 8003476:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800347a:	63bb      	str	r3, [r7, #56]	; 0x38
 800347c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347e:	2200      	movs	r2, #0
 8003480:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	4619      	mov	r1, r3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f008 fb6a 	bl	800bb62 <HAL_PCD_DataInStageCallback>
 800348e:	e051      	b.n	8003534 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003490:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d144      	bne.n	8003526 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	4413      	add	r3, r2
 80034b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80034c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c6:	699a      	ldr	r2, [r3, #24]
 80034c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d907      	bls.n	80034e0 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80034d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034d8:	1ad2      	subs	r2, r2, r3
 80034da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034dc:	619a      	str	r2, [r3, #24]
 80034de:	e002      	b.n	80034e6 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80034e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e2:	2200      	movs	r2, #0
 80034e4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80034e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	4619      	mov	r1, r3
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f008 fb34 	bl	800bb62 <HAL_PCD_DataInStageCallback>
 80034fa:	e01b      	b.n	8003534 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80034fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003504:	441a      	add	r2, r3
 8003506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003508:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800350a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350c:	69da      	ldr	r2, [r3, #28]
 800350e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003512:	441a      	add	r2, r3
 8003514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003516:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800351e:	4618      	mov	r0, r3
 8003520:	f004 fea3 	bl	800826a <USB_EPStartXfer>
 8003524:	e006      	b.n	8003534 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003526:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800352a:	461a      	mov	r2, r3
 800352c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f917 	bl	8003762 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800353c:	b29b      	uxth	r3, r3
 800353e:	b21b      	sxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	f6ff ac48 	blt.w	8002dd6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3758      	adds	r7, #88	; 0x58
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d07c      	beq.n	8003662 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003570:	b29b      	uxth	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	4413      	add	r3, r2
 8003582:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800358c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	8b7b      	ldrh	r3, [r7, #26]
 8003594:	429a      	cmp	r2, r3
 8003596:	d306      	bcc.n	80035a6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	8b7b      	ldrh	r3, [r7, #26]
 800359e:	1ad2      	subs	r2, r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	619a      	str	r2, [r3, #24]
 80035a4:	e002      	b.n	80035ac <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d123      	bne.n	80035fc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	461a      	mov	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	833b      	strh	r3, [r7, #24]
 80035d0:	8b3b      	ldrh	r3, [r7, #24]
 80035d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80035d6:	833b      	strh	r3, [r7, #24]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	441a      	add	r2, r3
 80035e6:	8b3b      	ldrh	r3, [r7, #24]
 80035e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01f      	beq.n	8003646 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003620:	82fb      	strh	r3, [r7, #22]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	441a      	add	r2, r3
 8003630:	8afb      	ldrh	r3, [r7, #22]
 8003632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800363a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800363e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003642:	b29b      	uxth	r3, r3
 8003644:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003646:	8b7b      	ldrh	r3, [r7, #26]
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8085 	beq.w	8003758 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	6959      	ldr	r1, [r3, #20]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	891a      	ldrh	r2, [r3, #8]
 800365a:	8b7b      	ldrh	r3, [r7, #26]
 800365c:	f006 fb32 	bl	8009cc4 <USB_ReadPMA>
 8003660:	e07a      	b.n	8003758 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800366a:	b29b      	uxth	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	4413      	add	r3, r2
 800367c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003686:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	699a      	ldr	r2, [r3, #24]
 800368c:	8b7b      	ldrh	r3, [r7, #26]
 800368e:	429a      	cmp	r2, r3
 8003690:	d306      	bcc.n	80036a0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	8b7b      	ldrh	r3, [r7, #26]
 8003698:	1ad2      	subs	r2, r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	619a      	str	r2, [r3, #24]
 800369e:	e002      	b.n	80036a6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2200      	movs	r2, #0
 80036a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d123      	bne.n	80036f6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c8:	83fb      	strh	r3, [r7, #30]
 80036ca:	8bfb      	ldrh	r3, [r7, #30]
 80036cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036d0:	83fb      	strh	r3, [r7, #30]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	441a      	add	r2, r3
 80036e0:	8bfb      	ldrh	r3, [r7, #30]
 80036e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d11f      	bne.n	8003740 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b29b      	uxth	r3, r3
 8003712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	83bb      	strh	r3, [r7, #28]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	441a      	add	r2, r3
 800372a:	8bbb      	ldrh	r3, [r7, #28]
 800372c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003738:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800373c:	b29b      	uxth	r3, r3
 800373e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003740:	8b7b      	ldrh	r3, [r7, #26]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6959      	ldr	r1, [r3, #20]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	895a      	ldrh	r2, [r3, #10]
 8003752:	8b7b      	ldrh	r3, [r7, #26]
 8003754:	f006 fab6 	bl	8009cc4 <USB_ReadPMA>
    }
  }

  return count;
 8003758:	8b7b      	ldrh	r3, [r7, #26]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b0a4      	sub	sp, #144	; 0x90
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	4613      	mov	r3, r2
 800376e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 81db 	beq.w	8003b32 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003784:	b29b      	uxth	r3, r3
 8003786:	461a      	mov	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	4413      	add	r3, r2
 8003796:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037a0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	699a      	ldr	r2, [r3, #24]
 80037a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d907      	bls.n	80037c0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	699a      	ldr	r2, [r3, #24]
 80037b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80037b8:	1ad2      	subs	r2, r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	619a      	str	r2, [r3, #24]
 80037be:	e002      	b.n	80037c6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2200      	movs	r2, #0
 80037c4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f040 80b9 	bne.w	8003942 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	785b      	ldrb	r3, [r3, #1]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d126      	bne.n	8003826 <HAL_PCD_EP_DB_Transmit+0xc4>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	4413      	add	r3, r2
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	00da      	lsls	r2, r3, #3
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	4413      	add	r3, r2
 80037fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	b29b      	uxth	r3, r3
 8003806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800380a:	b29a      	uxth	r2, r3
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	801a      	strh	r2, [r3, #0]
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800381a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800381e:	b29a      	uxth	r2, r3
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	801a      	strh	r2, [r3, #0]
 8003824:	e01a      	b.n	800385c <HAL_PCD_EP_DB_Transmit+0xfa>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	785b      	ldrb	r3, [r3, #1]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d116      	bne.n	800385c <HAL_PCD_EP_DB_Transmit+0xfa>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800383c:	b29b      	uxth	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003842:	4413      	add	r3, r2
 8003844:	637b      	str	r3, [r7, #52]	; 0x34
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	00da      	lsls	r2, r3, #3
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	4413      	add	r3, r2
 8003850:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003854:	633b      	str	r3, [r7, #48]	; 0x30
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	2200      	movs	r2, #0
 800385a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	785b      	ldrb	r3, [r3, #1]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d126      	bne.n	80038b8 <HAL_PCD_EP_DB_Transmit+0x156>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003878:	b29b      	uxth	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	4413      	add	r3, r2
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	00da      	lsls	r2, r3, #3
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	4413      	add	r3, r2
 800388c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800389c:	b29a      	uxth	r2, r3
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	801a      	strh	r2, [r3, #0]
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	801a      	strh	r2, [r3, #0]
 80038b6:	e017      	b.n	80038e8 <HAL_PCD_EP_DB_Transmit+0x186>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	785b      	ldrb	r3, [r3, #1]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d113      	bne.n	80038e8 <HAL_PCD_EP_DB_Transmit+0x186>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	4413      	add	r3, r2
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	00da      	lsls	r2, r3, #3
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	4413      	add	r3, r2
 80038dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038e0:	623b      	str	r3, [r7, #32]
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	2200      	movs	r2, #0
 80038e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	4619      	mov	r1, r3
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f008 f937 	bl	800bb62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 82fa 	beq.w	8003ef4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	82fb      	strh	r3, [r7, #22]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	441a      	add	r2, r3
 800392a:	8afb      	ldrh	r3, [r7, #22]
 800392c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393c:	b29b      	uxth	r3, r3
 800393e:	8013      	strh	r3, [r2, #0]
 8003940:	e2d8      	b.n	8003ef4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d021      	beq.n	8003990 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003966:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	441a      	add	r2, r3
 8003978:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800397c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398c:	b29b      	uxth	r3, r3
 800398e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003996:	2b01      	cmp	r3, #1
 8003998:	f040 82ac 	bne.w	8003ef4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80039a4:	441a      	add	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80039b2:	441a      	add	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	6a1a      	ldr	r2, [r3, #32]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d30b      	bcc.n	80039dc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	6a1a      	ldr	r2, [r3, #32]
 80039d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039d4:	1ad2      	subs	r2, r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	621a      	str	r2, [r3, #32]
 80039da:	e017      	b.n	8003a0c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d108      	bne.n	80039f6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80039e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80039e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80039f4:	e00a      	b.n	8003a0c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	785b      	ldrb	r3, [r3, #1]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d165      	bne.n	8003ae0 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a28:	4413      	add	r3, r2
 8003a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	00da      	lsls	r2, r3, #3
 8003a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a34:	4413      	add	r3, r2
 8003a36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4a:	801a      	strh	r2, [r3, #0]
 8003a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a50:	2b3e      	cmp	r3, #62	; 0x3e
 8003a52:	d91d      	bls.n	8003a90 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003a54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <HAL_PCD_EP_DB_Transmit+0x30c>
 8003a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	029b      	lsls	r3, r3, #10
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	801a      	strh	r2, [r3, #0]
 8003a8e:	e044      	b.n	8003b1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <HAL_PCD_EP_DB_Transmit+0x34c>
 8003a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	801a      	strh	r2, [r3, #0]
 8003aac:	e035      	b.n	8003b1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ab2:	085b      	lsrs	r3, r3, #1
 8003ab4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_PCD_EP_DB_Transmit+0x366>
 8003ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	029b      	lsls	r3, r3, #10
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003adc:	801a      	strh	r2, [r3, #0]
 8003ade:	e01c      	b.n	8003b1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	785b      	ldrb	r3, [r3, #1]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d118      	bne.n	8003b1a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	647b      	str	r3, [r7, #68]	; 0x44
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003afc:	4413      	add	r3, r2
 8003afe:	647b      	str	r3, [r7, #68]	; 0x44
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	00da      	lsls	r2, r3, #3
 8003b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b08:	4413      	add	r3, r2
 8003b0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b0e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b18:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	6959      	ldr	r1, [r3, #20]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	891a      	ldrh	r2, [r3, #8]
 8003b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f006 f888 	bl	8009c40 <USB_WritePMA>
 8003b30:	e1e0      	b.n	8003ef4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b56:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d307      	bcc.n	8003b76 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b6e:	1ad2      	subs	r2, r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	619a      	str	r2, [r3, #24]
 8003b74:	e002      	b.n	8003b7c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f040 80c0 	bne.w	8003d06 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	785b      	ldrb	r3, [r3, #1]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d126      	bne.n	8003bdc <HAL_PCD_EP_DB_Transmit+0x47a>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ba2:	4413      	add	r3, r2
 8003ba4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	00da      	lsls	r2, r3, #3
 8003bac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bae:	4413      	add	r3, r2
 8003bb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bc4:	801a      	strh	r2, [r3, #0]
 8003bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	e01a      	b.n	8003c12 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	785b      	ldrb	r3, [r3, #1]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d116      	bne.n	8003c12 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	667b      	str	r3, [r7, #100]	; 0x64
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bf8:	4413      	add	r3, r2
 8003bfa:	667b      	str	r3, [r7, #100]	; 0x64
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	00da      	lsls	r2, r3, #3
 8003c02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c04:	4413      	add	r3, r2
 8003c06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c0e:	2200      	movs	r2, #0
 8003c10:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	677b      	str	r3, [r7, #116]	; 0x74
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	785b      	ldrb	r3, [r3, #1]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d12b      	bne.n	8003c78 <HAL_PCD_EP_DB_Transmit+0x516>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c34:	4413      	add	r3, r2
 8003c36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	00da      	lsls	r2, r3, #3
 8003c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c40:	4413      	add	r3, r2
 8003c42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c5c:	801a      	strh	r2, [r3, #0]
 8003c5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c74:	801a      	strh	r2, [r3, #0]
 8003c76:	e017      	b.n	8003ca8 <HAL_PCD_EP_DB_Transmit+0x546>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	785b      	ldrb	r3, [r3, #1]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d113      	bne.n	8003ca8 <HAL_PCD_EP_DB_Transmit+0x546>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c8e:	4413      	add	r3, r2
 8003c90:	677b      	str	r3, [r7, #116]	; 0x74
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	00da      	lsls	r2, r3, #3
 8003c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ca0:	673b      	str	r3, [r7, #112]	; 0x70
 8003ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	4619      	mov	r1, r3
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f007 ff57 	bl	800bb62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f040 811a 	bne.w	8003ef4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cda:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	441a      	add	r2, r3
 8003cec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	8013      	strh	r3, [r2, #0]
 8003d04:	e0f6      	b.n	8003ef4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d121      	bne.n	8003d54 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	441a      	add	r2, r3
 8003d3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	f040 80ca 	bne.w	8003ef4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d68:	441a      	add	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	69da      	ldr	r2, [r3, #28]
 8003d72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d76:	441a      	add	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	6a1a      	ldr	r2, [r3, #32]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d30b      	bcc.n	8003da0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6a1a      	ldr	r2, [r3, #32]
 8003d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d98:	1ad2      	subs	r2, r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	621a      	str	r2, [r3, #32]
 8003d9e:	e017      	b.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d108      	bne.n	8003dba <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003da8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003dac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003db8:	e00a      	b.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	657b      	str	r3, [r7, #84]	; 0x54
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	785b      	ldrb	r3, [r3, #1]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d165      	bne.n	8003eaa <HAL_PCD_EP_DB_Transmit+0x748>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df2:	4413      	add	r3, r2
 8003df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	00da      	lsls	r2, r3, #3
 8003dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dfe:	4413      	add	r3, r2
 8003e00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e04:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e14:	801a      	strh	r2, [r3, #0]
 8003e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e1a:	2b3e      	cmp	r3, #62	; 0x3e
 8003e1c:	d91d      	bls.n	8003e5a <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e34:	3b01      	subs	r3, #1
 8003e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	029b      	lsls	r3, r3, #10
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	4313      	orrs	r3, r2
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e56:	801a      	strh	r2, [r3, #0]
 8003e58:	e041      	b.n	8003ede <HAL_PCD_EP_DB_Transmit+0x77c>
 8003e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10a      	bne.n	8003e78 <HAL_PCD_EP_DB_Transmit+0x716>
 8003e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e74:	801a      	strh	r2, [r3, #0]
 8003e76:	e032      	b.n	8003ede <HAL_PCD_EP_DB_Transmit+0x77c>
 8003e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_PCD_EP_DB_Transmit+0x730>
 8003e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e8e:	3301      	adds	r3, #1
 8003e90:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	029b      	lsls	r3, r3, #10
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ea6:	801a      	strh	r2, [r3, #0]
 8003ea8:	e019      	b.n	8003ede <HAL_PCD_EP_DB_Transmit+0x77c>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	785b      	ldrb	r3, [r3, #1]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d115      	bne.n	8003ede <HAL_PCD_EP_DB_Transmit+0x77c>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec0:	4413      	add	r3, r2
 8003ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	00da      	lsls	r2, r3, #3
 8003eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ecc:	4413      	add	r3, r2
 8003ece:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ed2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003edc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6959      	ldr	r1, [r3, #20]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	895a      	ldrh	r2, [r3, #10]
 8003eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f005 fea6 	bl	8009c40 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0e:	82bb      	strh	r3, [r7, #20]
 8003f10:	8abb      	ldrh	r3, [r7, #20]
 8003f12:	f083 0310 	eor.w	r3, r3, #16
 8003f16:	82bb      	strh	r3, [r7, #20]
 8003f18:	8abb      	ldrh	r3, [r7, #20]
 8003f1a:	f083 0320 	eor.w	r3, r3, #32
 8003f1e:	82bb      	strh	r3, [r7, #20]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	441a      	add	r2, r3
 8003f2e:	8abb      	ldrh	r3, [r7, #20]
 8003f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3790      	adds	r7, #144	; 0x90
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b087      	sub	sp, #28
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	607b      	str	r3, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	817b      	strh	r3, [r7, #10]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003f60:	897b      	ldrh	r3, [r7, #10]
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00b      	beq.n	8003f84 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f6c:	897b      	ldrh	r3, [r7, #10]
 8003f6e:	f003 0207 	and.w	r2, r3, #7
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	3310      	adds	r3, #16
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
 8003f82:	e009      	b.n	8003f98 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f84:	897a      	ldrh	r2, [r7, #10]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4413      	add	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003f98:	893b      	ldrh	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d107      	bne.n	8003fae <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	80da      	strh	r2, [r3, #6]
 8003fac:	e00b      	b.n	8003fc6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	0c1b      	lsrs	r3, r3, #16
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800400c:	b29b      	uxth	r3, r3
 800400e:	f043 0302 	orr.w	r3, r3, #2
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d141      	bne.n	80040ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004036:	4b4b      	ldr	r3, [pc, #300]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800403e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004042:	d131      	bne.n	80040a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004044:	4b47      	ldr	r3, [pc, #284]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404a:	4a46      	ldr	r2, [pc, #280]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004050:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004054:	4b43      	ldr	r3, [pc, #268]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800405c:	4a41      	ldr	r2, [pc, #260]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004062:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004064:	4b40      	ldr	r3, [pc, #256]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2232      	movs	r2, #50	; 0x32
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	4a3f      	ldr	r2, [pc, #252]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	0c9b      	lsrs	r3, r3, #18
 8004076:	3301      	adds	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800407a:	e002      	b.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3b01      	subs	r3, #1
 8004080:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004082:	4b38      	ldr	r3, [pc, #224]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408e:	d102      	bne.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f2      	bne.n	800407c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004096:	4b33      	ldr	r3, [pc, #204]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a2:	d158      	bne.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e057      	b.n	8004158 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040a8:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ae:	4a2d      	ldr	r2, [pc, #180]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040b8:	e04d      	b.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c0:	d141      	bne.n	8004146 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040c2:	4b28      	ldr	r3, [pc, #160]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ce:	d131      	bne.n	8004134 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040d0:	4b24      	ldr	r3, [pc, #144]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d6:	4a23      	ldr	r2, [pc, #140]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040e0:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040e8:	4a1e      	ldr	r2, [pc, #120]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040f0:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2232      	movs	r2, #50	; 0x32
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	4a1c      	ldr	r2, [pc, #112]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	0c9b      	lsrs	r3, r3, #18
 8004102:	3301      	adds	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004106:	e002      	b.n	800410e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3b01      	subs	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800410e:	4b15      	ldr	r3, [pc, #84]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411a:	d102      	bne.n	8004122 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f2      	bne.n	8004108 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004122:	4b10      	ldr	r3, [pc, #64]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412e:	d112      	bne.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e011      	b.n	8004158 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004140:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004144:	e007      	b.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004146:	4b07      	ldr	r3, [pc, #28]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800414e:	4a05      	ldr	r2, [pc, #20]	; (8004164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004154:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	40007000 	.word	0x40007000
 8004168:	20000000 	.word	0x20000000
 800416c:	431bde83 	.word	0x431bde83

08004170 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a04      	ldr	r2, [pc, #16]	; (800418c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800417a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800417e:	6093      	str	r3, [r2, #8]
}
 8004180:	bf00      	nop
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40007000 	.word	0x40007000

08004190 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004196:	f7fd fbc1 	bl	800191c <HAL_GetTick>
 800419a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800419c:	4b39      	ldr	r3, [pc, #228]	; (8004284 <HAL_RCC_DeInit+0xf4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a38      	ldr	r2, [pc, #224]	; (8004284 <HAL_RCC_DeInit+0xf4>)
 80041a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041aa:	f7fd fbb7 	bl	800191c <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e05f      	b.n	800427c <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041bc:	4b31      	ldr	r3, [pc, #196]	; (8004284 <HAL_RCC_DeInit+0xf4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 80041c8:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <HAL_RCC_DeInit+0xf4>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4a2d      	ldr	r2, [pc, #180]	; (8004284 <HAL_RCC_DeInit+0xf4>)
 80041ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041d2:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80041d4:	f7fd fba2 	bl	800191c <HAL_GetTick>
 80041d8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 80041da:	4b2a      	ldr	r3, [pc, #168]	; (8004284 <HAL_RCC_DeInit+0xf4>)
 80041dc:	2201      	movs	r2, #1
 80041de:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80041e0:	e00a      	b.n	80041f8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e2:	f7fd fb9b 	bl	800191c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e041      	b.n	800427c <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80041f8:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_RCC_DeInit+0xf4>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 030c 	and.w	r3, r3, #12
 8004200:	2b04      	cmp	r3, #4
 8004202:	d1ee      	bne.n	80041e2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8004204:	4b20      	ldr	r3, [pc, #128]	; (8004288 <HAL_RCC_DeInit+0xf8>)
 8004206:	4a21      	ldr	r2, [pc, #132]	; (800428c <HAL_RCC_DeInit+0xfc>)
 8004208:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800420a:	4b21      	ldr	r3, [pc, #132]	; (8004290 <HAL_RCC_DeInit+0x100>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fd fb38 	bl	8001884 <HAL_InitTick>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e02e      	b.n	800427c <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 800421e:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_RCC_DeInit+0xf4>)
 8004220:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004224:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8004226:	4b17      	ldr	r3, [pc, #92]	; (8004284 <HAL_RCC_DeInit+0xf4>)
 8004228:	f44f 7280 	mov.w	r2, #256	; 0x100
 800422c:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800422e:	f7fd fb75 	bl	800191c <HAL_GetTick>
 8004232:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004236:	f7fd fb71 	bl	800191c <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e019      	b.n	800427c <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004248:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <HAL_RCC_DeInit+0xf4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f0      	bne.n	8004236 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_DeInit+0xf4>)
 8004256:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800425a:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800425c:	4b09      	ldr	r3, [pc, #36]	; (8004284 <HAL_RCC_DeInit+0xf4>)
 800425e:	2200      	movs	r2, #0
 8004260:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8004262:	4b08      	ldr	r3, [pc, #32]	; (8004284 <HAL_RCC_DeInit+0xf4>)
 8004264:	f04f 32ff 	mov.w	r2, #4294967295
 8004268:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_RCC_DeInit+0xf4>)
 800426c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004270:	4a04      	ldr	r2, [pc, #16]	; (8004284 <HAL_RCC_DeInit+0xf4>)
 8004272:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004276:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000
 8004288:	20000000 	.word	0x20000000
 800428c:	00f42400 	.word	0x00f42400
 8004290:	20000004 	.word	0x20000004

08004294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e2fe      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d075      	beq.n	800439e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b2:	4b97      	ldr	r3, [pc, #604]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042bc:	4b94      	ldr	r3, [pc, #592]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2b0c      	cmp	r3, #12
 80042ca:	d102      	bne.n	80042d2 <HAL_RCC_OscConfig+0x3e>
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d002      	beq.n	80042d8 <HAL_RCC_OscConfig+0x44>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d10b      	bne.n	80042f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d8:	4b8d      	ldr	r3, [pc, #564]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d05b      	beq.n	800439c <HAL_RCC_OscConfig+0x108>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d157      	bne.n	800439c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e2d9      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f8:	d106      	bne.n	8004308 <HAL_RCC_OscConfig+0x74>
 80042fa:	4b85      	ldr	r3, [pc, #532]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a84      	ldr	r2, [pc, #528]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	e01d      	b.n	8004344 <HAL_RCC_OscConfig+0xb0>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004310:	d10c      	bne.n	800432c <HAL_RCC_OscConfig+0x98>
 8004312:	4b7f      	ldr	r3, [pc, #508]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a7e      	ldr	r2, [pc, #504]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	4b7c      	ldr	r3, [pc, #496]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a7b      	ldr	r2, [pc, #492]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	e00b      	b.n	8004344 <HAL_RCC_OscConfig+0xb0>
 800432c:	4b78      	ldr	r3, [pc, #480]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a77      	ldr	r2, [pc, #476]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	4b75      	ldr	r3, [pc, #468]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a74      	ldr	r2, [pc, #464]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 800433e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d013      	beq.n	8004374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fd fae6 	bl	800191c <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004354:	f7fd fae2 	bl	800191c <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b64      	cmp	r3, #100	; 0x64
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e29e      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004366:	4b6a      	ldr	r3, [pc, #424]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0xc0>
 8004372:	e014      	b.n	800439e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fd fad2 	bl	800191c <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800437c:	f7fd face 	bl	800191c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e28a      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800438e:	4b60      	ldr	r3, [pc, #384]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0xe8>
 800439a:	e000      	b.n	800439e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d075      	beq.n	8004496 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043aa:	4b59      	ldr	r3, [pc, #356]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043b4:	4b56      	ldr	r3, [pc, #344]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	d102      	bne.n	80043ca <HAL_RCC_OscConfig+0x136>
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d002      	beq.n	80043d0 <HAL_RCC_OscConfig+0x13c>
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d11f      	bne.n	8004410 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d0:	4b4f      	ldr	r3, [pc, #316]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_OscConfig+0x154>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e25d      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e8:	4b49      	ldr	r3, [pc, #292]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	4946      	ldr	r1, [pc, #280]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043fc:	4b45      	ldr	r3, [pc, #276]	; (8004514 <HAL_RCC_OscConfig+0x280>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7fd fa3f 	bl	8001884 <HAL_InitTick>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d043      	beq.n	8004494 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e249      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d023      	beq.n	8004460 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004418:	4b3d      	ldr	r3, [pc, #244]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a3c      	ldr	r2, [pc, #240]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 800441e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004424:	f7fd fa7a 	bl	800191c <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800442c:	f7fd fa76 	bl	800191c <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e232      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800443e:	4b34      	ldr	r3, [pc, #208]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444a:	4b31      	ldr	r3, [pc, #196]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	061b      	lsls	r3, r3, #24
 8004458:	492d      	ldr	r1, [pc, #180]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 800445a:	4313      	orrs	r3, r2
 800445c:	604b      	str	r3, [r1, #4]
 800445e:	e01a      	b.n	8004496 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004460:	4b2b      	ldr	r3, [pc, #172]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2a      	ldr	r2, [pc, #168]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004466:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800446a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fd fa56 	bl	800191c <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004474:	f7fd fa52 	bl	800191c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e20e      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004486:	4b22      	ldr	r3, [pc, #136]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x1e0>
 8004492:	e000      	b.n	8004496 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004494:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d041      	beq.n	8004526 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d01c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044aa:	4b19      	ldr	r3, [pc, #100]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80044ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b0:	4a17      	ldr	r2, [pc, #92]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ba:	f7fd fa2f 	bl	800191c <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c2:	f7fd fa2b 	bl	800191c <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e1e7      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044d4:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80044d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0ef      	beq.n	80044c2 <HAL_RCC_OscConfig+0x22e>
 80044e2:	e020      	b.n	8004526 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e4:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80044e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ea:	4a09      	ldr	r2, [pc, #36]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80044ec:	f023 0301 	bic.w	r3, r3, #1
 80044f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fd fa12 	bl	800191c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044fa:	e00d      	b.n	8004518 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fc:	f7fd fa0e 	bl	800191c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d906      	bls.n	8004518 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e1ca      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004518:	4b8c      	ldr	r3, [pc, #560]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 800451a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1ea      	bne.n	80044fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80a6 	beq.w	8004680 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004534:	2300      	movs	r3, #0
 8004536:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004538:	4b84      	ldr	r3, [pc, #528]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_RCC_OscConfig+0x2b4>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x2b6>
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00d      	beq.n	800456a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800454e:	4b7f      	ldr	r3, [pc, #508]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	4a7e      	ldr	r2, [pc, #504]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004558:	6593      	str	r3, [r2, #88]	; 0x58
 800455a:	4b7c      	ldr	r3, [pc, #496]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004566:	2301      	movs	r3, #1
 8004568:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800456a:	4b79      	ldr	r3, [pc, #484]	; (8004750 <HAL_RCC_OscConfig+0x4bc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004572:	2b00      	cmp	r3, #0
 8004574:	d118      	bne.n	80045a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004576:	4b76      	ldr	r3, [pc, #472]	; (8004750 <HAL_RCC_OscConfig+0x4bc>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a75      	ldr	r2, [pc, #468]	; (8004750 <HAL_RCC_OscConfig+0x4bc>)
 800457c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004582:	f7fd f9cb 	bl	800191c <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458a:	f7fd f9c7 	bl	800191c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e183      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800459c:	4b6c      	ldr	r3, [pc, #432]	; (8004750 <HAL_RCC_OscConfig+0x4bc>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d108      	bne.n	80045c2 <HAL_RCC_OscConfig+0x32e>
 80045b0:	4b66      	ldr	r3, [pc, #408]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b6:	4a65      	ldr	r2, [pc, #404]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045c0:	e024      	b.n	800460c <HAL_RCC_OscConfig+0x378>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b05      	cmp	r3, #5
 80045c8:	d110      	bne.n	80045ec <HAL_RCC_OscConfig+0x358>
 80045ca:	4b60      	ldr	r3, [pc, #384]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d0:	4a5e      	ldr	r2, [pc, #376]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045d2:	f043 0304 	orr.w	r3, r3, #4
 80045d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045da:	4b5c      	ldr	r3, [pc, #368]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	4a5a      	ldr	r2, [pc, #360]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045ea:	e00f      	b.n	800460c <HAL_RCC_OscConfig+0x378>
 80045ec:	4b57      	ldr	r3, [pc, #348]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f2:	4a56      	ldr	r2, [pc, #344]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045f4:	f023 0301 	bic.w	r3, r3, #1
 80045f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045fc:	4b53      	ldr	r3, [pc, #332]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	4a52      	ldr	r2, [pc, #328]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004604:	f023 0304 	bic.w	r3, r3, #4
 8004608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d016      	beq.n	8004642 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fd f982 	bl	800191c <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800461a:	e00a      	b.n	8004632 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fd f97e 	bl	800191c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e138      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004632:	4b46      	ldr	r3, [pc, #280]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ed      	beq.n	800461c <HAL_RCC_OscConfig+0x388>
 8004640:	e015      	b.n	800466e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004642:	f7fd f96b 	bl	800191c <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004648:	e00a      	b.n	8004660 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464a:	f7fd f967 	bl	800191c <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	; 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e121      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004660:	4b3a      	ldr	r3, [pc, #232]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1ed      	bne.n	800464a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800466e:	7ffb      	ldrb	r3, [r7, #31]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d105      	bne.n	8004680 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004674:	4b35      	ldr	r3, [pc, #212]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004678:	4a34      	ldr	r2, [pc, #208]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 800467a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	d03c      	beq.n	8004706 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01c      	beq.n	80046ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004694:	4b2d      	ldr	r3, [pc, #180]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800469a:	4a2c      	ldr	r2, [pc, #176]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a4:	f7fd f93a 	bl	800191c <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ac:	f7fd f936 	bl	800191c <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e0f2      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046be:	4b23      	ldr	r3, [pc, #140]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80046c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0ef      	beq.n	80046ac <HAL_RCC_OscConfig+0x418>
 80046cc:	e01b      	b.n	8004706 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046ce:	4b1f      	ldr	r3, [pc, #124]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80046d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046d4:	4a1d      	ldr	r2, [pc, #116]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80046d6:	f023 0301 	bic.w	r3, r3, #1
 80046da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046de:	f7fd f91d 	bl	800191c <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046e6:	f7fd f919 	bl	800191c <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e0d5      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 80046fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1ef      	bne.n	80046e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 80c9 	beq.w	80048a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004710:	4b0e      	ldr	r3, [pc, #56]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 030c 	and.w	r3, r3, #12
 8004718:	2b0c      	cmp	r3, #12
 800471a:	f000 8083 	beq.w	8004824 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d15e      	bne.n	80047e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a08      	ldr	r2, [pc, #32]	; (800474c <HAL_RCC_OscConfig+0x4b8>)
 800472c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004732:	f7fd f8f3 	bl	800191c <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004738:	e00c      	b.n	8004754 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473a:	f7fd f8ef 	bl	800191c <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d905      	bls.n	8004754 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e0ab      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
 800474c:	40021000 	.word	0x40021000
 8004750:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004754:	4b55      	ldr	r3, [pc, #340]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1ec      	bne.n	800473a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004760:	4b52      	ldr	r3, [pc, #328]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	4b52      	ldr	r3, [pc, #328]	; (80048b0 <HAL_RCC_OscConfig+0x61c>)
 8004766:	4013      	ands	r3, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6a11      	ldr	r1, [r2, #32]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004770:	3a01      	subs	r2, #1
 8004772:	0112      	lsls	r2, r2, #4
 8004774:	4311      	orrs	r1, r2
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800477a:	0212      	lsls	r2, r2, #8
 800477c:	4311      	orrs	r1, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004782:	0852      	lsrs	r2, r2, #1
 8004784:	3a01      	subs	r2, #1
 8004786:	0552      	lsls	r2, r2, #21
 8004788:	4311      	orrs	r1, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800478e:	0852      	lsrs	r2, r2, #1
 8004790:	3a01      	subs	r2, #1
 8004792:	0652      	lsls	r2, r2, #25
 8004794:	4311      	orrs	r1, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800479a:	06d2      	lsls	r2, r2, #27
 800479c:	430a      	orrs	r2, r1
 800479e:	4943      	ldr	r1, [pc, #268]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a4:	4b41      	ldr	r3, [pc, #260]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a40      	ldr	r2, [pc, #256]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047b0:	4b3e      	ldr	r3, [pc, #248]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4a3d      	ldr	r2, [pc, #244]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fd f8ae 	bl	800191c <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fd f8aa 	bl	800191c <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e066      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d6:	4b35      	ldr	r3, [pc, #212]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x530>
 80047e2:	e05e      	b.n	80048a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e4:	4b31      	ldr	r3, [pc, #196]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a30      	ldr	r2, [pc, #192]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 80047ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7fd f894 	bl	800191c <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f8:	f7fd f890 	bl	800191c <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e04c      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800480a:	4b28      	ldr	r3, [pc, #160]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f0      	bne.n	80047f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004816:	4b25      	ldr	r3, [pc, #148]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	4924      	ldr	r1, [pc, #144]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 800481c:	4b25      	ldr	r3, [pc, #148]	; (80048b4 <HAL_RCC_OscConfig+0x620>)
 800481e:	4013      	ands	r3, r2
 8004820:	60cb      	str	r3, [r1, #12]
 8004822:	e03e      	b.n	80048a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e039      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004830:	4b1e      	ldr	r3, [pc, #120]	; (80048ac <HAL_RCC_OscConfig+0x618>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f003 0203 	and.w	r2, r3, #3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	429a      	cmp	r2, r3
 8004842:	d12c      	bne.n	800489e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	3b01      	subs	r3, #1
 8004850:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d123      	bne.n	800489e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004862:	429a      	cmp	r2, r3
 8004864:	d11b      	bne.n	800489e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004872:	429a      	cmp	r2, r3
 8004874:	d113      	bne.n	800489e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	085b      	lsrs	r3, r3, #1
 8004882:	3b01      	subs	r3, #1
 8004884:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004886:	429a      	cmp	r2, r3
 8004888:	d109      	bne.n	800489e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	3b01      	subs	r3, #1
 8004898:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800489a:	429a      	cmp	r2, r3
 800489c:	d001      	beq.n	80048a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3720      	adds	r7, #32
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40021000 	.word	0x40021000
 80048b0:	019f800c 	.word	0x019f800c
 80048b4:	feeefffc 	.word	0xfeeefffc

080048b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e11e      	b.n	8004b0e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048d0:	4b91      	ldr	r3, [pc, #580]	; (8004b18 <HAL_RCC_ClockConfig+0x260>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d910      	bls.n	8004900 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b8e      	ldr	r3, [pc, #568]	; (8004b18 <HAL_RCC_ClockConfig+0x260>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f023 020f 	bic.w	r2, r3, #15
 80048e6:	498c      	ldr	r1, [pc, #560]	; (8004b18 <HAL_RCC_ClockConfig+0x260>)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ee:	4b8a      	ldr	r3, [pc, #552]	; (8004b18 <HAL_RCC_ClockConfig+0x260>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d001      	beq.n	8004900 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e106      	b.n	8004b0e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d073      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b03      	cmp	r3, #3
 8004912:	d129      	bne.n	8004968 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004914:	4b81      	ldr	r3, [pc, #516]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e0f4      	b.n	8004b0e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004924:	f000 f99e 	bl	8004c64 <RCC_GetSysClockFreqFromPLLSource>
 8004928:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4a7c      	ldr	r2, [pc, #496]	; (8004b20 <HAL_RCC_ClockConfig+0x268>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d93f      	bls.n	80049b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004932:	4b7a      	ldr	r3, [pc, #488]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d009      	beq.n	8004952 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004946:	2b00      	cmp	r3, #0
 8004948:	d033      	beq.n	80049b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800494e:	2b00      	cmp	r3, #0
 8004950:	d12f      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004952:	4b72      	ldr	r3, [pc, #456]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800495a:	4a70      	ldr	r2, [pc, #448]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 800495c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004960:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004962:	2380      	movs	r3, #128	; 0x80
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	e024      	b.n	80049b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d107      	bne.n	8004980 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004970:	4b6a      	ldr	r3, [pc, #424]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d109      	bne.n	8004990 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0c6      	b.n	8004b0e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004980:	4b66      	ldr	r3, [pc, #408]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0be      	b.n	8004b0e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004990:	f000 f8ce 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 8004994:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4a61      	ldr	r2, [pc, #388]	; (8004b20 <HAL_RCC_ClockConfig+0x268>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d909      	bls.n	80049b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800499e:	4b5f      	ldr	r3, [pc, #380]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049a6:	4a5d      	ldr	r2, [pc, #372]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 80049a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049b2:	4b5a      	ldr	r3, [pc, #360]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f023 0203 	bic.w	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	4957      	ldr	r1, [pc, #348]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c4:	f7fc ffaa 	bl	800191c <HAL_GetTick>
 80049c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049cc:	f7fc ffa6 	bl	800191c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e095      	b.n	8004b0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	4b4e      	ldr	r3, [pc, #312]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 020c 	and.w	r2, r3, #12
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d1eb      	bne.n	80049cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d023      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a0c:	4b43      	ldr	r3, [pc, #268]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4a42      	ldr	r2, [pc, #264]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004a12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004a24:	4b3d      	ldr	r3, [pc, #244]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a2c:	4a3b      	ldr	r2, [pc, #236]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004a2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a34:	4b39      	ldr	r3, [pc, #228]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	4936      	ldr	r1, [pc, #216]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d105      	bne.n	8004a5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a4e:	4b33      	ldr	r3, [pc, #204]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	4a32      	ldr	r2, [pc, #200]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004a54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a5a:	4b2f      	ldr	r3, [pc, #188]	; (8004b18 <HAL_RCC_ClockConfig+0x260>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d21d      	bcs.n	8004aa4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a68:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <HAL_RCC_ClockConfig+0x260>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f023 020f 	bic.w	r2, r3, #15
 8004a70:	4929      	ldr	r1, [pc, #164]	; (8004b18 <HAL_RCC_ClockConfig+0x260>)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a78:	f7fc ff50 	bl	800191c <HAL_GetTick>
 8004a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a80:	f7fc ff4c 	bl	800191c <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e03b      	b.n	8004b0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a96:	4b20      	ldr	r3, [pc, #128]	; (8004b18 <HAL_RCC_ClockConfig+0x260>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d1ed      	bne.n	8004a80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab0:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4917      	ldr	r1, [pc, #92]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ace:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	490f      	ldr	r1, [pc, #60]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ae2:	f000 f825 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <HAL_RCC_ClockConfig+0x264>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	490c      	ldr	r1, [pc, #48]	; (8004b24 <HAL_RCC_ClockConfig+0x26c>)
 8004af4:	5ccb      	ldrb	r3, [r1, r3]
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	fa22 f303 	lsr.w	r3, r2, r3
 8004afe:	4a0a      	ldr	r2, [pc, #40]	; (8004b28 <HAL_RCC_ClockConfig+0x270>)
 8004b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b02:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <HAL_RCC_ClockConfig+0x274>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fc febc 	bl	8001884 <HAL_InitTick>
 8004b0c:	4603      	mov	r3, r0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40022000 	.word	0x40022000
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	04c4b400 	.word	0x04c4b400
 8004b24:	0800cb00 	.word	0x0800cb00
 8004b28:	20000000 	.word	0x20000000
 8004b2c:	20000004 	.word	0x20000004

08004b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b36:	4b2c      	ldr	r3, [pc, #176]	; (8004be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d102      	bne.n	8004b48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b42:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	e047      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b48:	4b27      	ldr	r3, [pc, #156]	; (8004be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 030c 	and.w	r3, r3, #12
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d102      	bne.n	8004b5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b54:	4b26      	ldr	r3, [pc, #152]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b56:	613b      	str	r3, [r7, #16]
 8004b58:	e03e      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b5a:	4b23      	ldr	r3, [pc, #140]	; (8004be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b0c      	cmp	r3, #12
 8004b64:	d136      	bne.n	8004bd4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b66:	4b20      	ldr	r3, [pc, #128]	; (8004be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b70:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	091b      	lsrs	r3, r3, #4
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d10c      	bne.n	8004b9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b84:	4a1a      	ldr	r2, [pc, #104]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	4a16      	ldr	r2, [pc, #88]	; (8004be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b8e:	68d2      	ldr	r2, [r2, #12]
 8004b90:	0a12      	lsrs	r2, r2, #8
 8004b92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	617b      	str	r3, [r7, #20]
      break;
 8004b9c:	e00c      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b9e:	4a13      	ldr	r2, [pc, #76]	; (8004bec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba6:	4a10      	ldr	r2, [pc, #64]	; (8004be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ba8:	68d2      	ldr	r2, [r2, #12]
 8004baa:	0a12      	lsrs	r2, r2, #8
 8004bac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bb0:	fb02 f303 	mul.w	r3, r2, r3
 8004bb4:	617b      	str	r3, [r7, #20]
      break;
 8004bb6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	0e5b      	lsrs	r3, r3, #25
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	e001      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004bd8:	693b      	ldr	r3, [r7, #16]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000
 8004bec:	00f42400 	.word	0x00f42400
 8004bf0:	016e3600 	.word	0x016e3600

08004bf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf8:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	20000000 	.word	0x20000000

08004c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c10:	f7ff fff0 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c14:	4602      	mov	r2, r0
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	0a1b      	lsrs	r3, r3, #8
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	4904      	ldr	r1, [pc, #16]	; (8004c34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c22:	5ccb      	ldrb	r3, [r1, r3]
 8004c24:	f003 031f 	and.w	r3, r3, #31
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40021000 	.word	0x40021000
 8004c34:	0800cb10 	.word	0x0800cb10

08004c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c3c:	f7ff ffda 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c40:	4602      	mov	r2, r0
 8004c42:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	0adb      	lsrs	r3, r3, #11
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	4904      	ldr	r1, [pc, #16]	; (8004c60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c4e:	5ccb      	ldrb	r3, [r1, r3]
 8004c50:	f003 031f 	and.w	r3, r3, #31
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	0800cb10 	.word	0x0800cb10

08004c64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c74:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	3301      	adds	r3, #1
 8004c80:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d10c      	bne.n	8004ca2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c88:	4a17      	ldr	r2, [pc, #92]	; (8004ce8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c90:	4a14      	ldr	r2, [pc, #80]	; (8004ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c92:	68d2      	ldr	r2, [r2, #12]
 8004c94:	0a12      	lsrs	r2, r2, #8
 8004c96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	617b      	str	r3, [r7, #20]
    break;
 8004ca0:	e00c      	b.n	8004cbc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ca2:	4a12      	ldr	r2, [pc, #72]	; (8004cec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004caa:	4a0e      	ldr	r2, [pc, #56]	; (8004ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cac:	68d2      	ldr	r2, [r2, #12]
 8004cae:	0a12      	lsrs	r2, r2, #8
 8004cb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cb4:	fb02 f303 	mul.w	r3, r2, r3
 8004cb8:	617b      	str	r3, [r7, #20]
    break;
 8004cba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cbc:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	0e5b      	lsrs	r3, r3, #25
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004cd6:	687b      	ldr	r3, [r7, #4]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	016e3600 	.word	0x016e3600
 8004cec:	00f42400 	.word	0x00f42400

08004cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 8098 	beq.w	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d12:	4b43      	ldr	r3, [pc, #268]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10d      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d1e:	4b40      	ldr	r3, [pc, #256]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d22:	4a3f      	ldr	r2, [pc, #252]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d28:	6593      	str	r3, [r2, #88]	; 0x58
 8004d2a:	4b3d      	ldr	r3, [pc, #244]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d32:	60bb      	str	r3, [r7, #8]
 8004d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d36:	2301      	movs	r3, #1
 8004d38:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d3a:	4b3a      	ldr	r3, [pc, #232]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a39      	ldr	r2, [pc, #228]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d46:	f7fc fde9 	bl	800191c <HAL_GetTick>
 8004d4a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d4c:	e009      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d4e:	f7fc fde5 	bl	800191c <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d902      	bls.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	74fb      	strb	r3, [r7, #19]
        break;
 8004d60:	e005      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d62:	4b30      	ldr	r3, [pc, #192]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0ef      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d6e:	7cfb      	ldrb	r3, [r7, #19]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d159      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d74:	4b2a      	ldr	r3, [pc, #168]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d7e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d01e      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d019      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d90:	4b23      	ldr	r3, [pc, #140]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d9c:	4b20      	ldr	r3, [pc, #128]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da2:	4a1f      	ldr	r2, [pc, #124]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dac:	4b1c      	ldr	r3, [pc, #112]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	4a1b      	ldr	r2, [pc, #108]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dbc:	4a18      	ldr	r2, [pc, #96]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d016      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dce:	f7fc fda5 	bl	800191c <HAL_GetTick>
 8004dd2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dd4:	e00b      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd6:	f7fc fda1 	bl	800191c <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d902      	bls.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	74fb      	strb	r3, [r7, #19]
            break;
 8004dec:	e006      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dee:	4b0c      	ldr	r3, [pc, #48]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0ec      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004dfc:	7cfb      	ldrb	r3, [r7, #19]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10b      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e02:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e10:	4903      	ldr	r1, [pc, #12]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e18:	e008      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e1a:	7cfb      	ldrb	r3, [r7, #19]
 8004e1c:	74bb      	strb	r3, [r7, #18]
 8004e1e:	e005      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e20:	40021000 	.word	0x40021000
 8004e24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e28:	7cfb      	ldrb	r3, [r7, #19]
 8004e2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e2c:	7c7b      	ldrb	r3, [r7, #17]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d105      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e32:	4ba7      	ldr	r3, [pc, #668]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e36:	4aa6      	ldr	r2, [pc, #664]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e4a:	4ba1      	ldr	r3, [pc, #644]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e50:	f023 0203 	bic.w	r2, r3, #3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	499d      	ldr	r1, [pc, #628]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e6c:	4b98      	ldr	r3, [pc, #608]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	f023 020c 	bic.w	r2, r3, #12
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	4995      	ldr	r1, [pc, #596]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e8e:	4b90      	ldr	r3, [pc, #576]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	498c      	ldr	r1, [pc, #560]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0308 	and.w	r3, r3, #8
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004eb0:	4b87      	ldr	r3, [pc, #540]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	4984      	ldr	r1, [pc, #528]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ed2:	4b7f      	ldr	r3, [pc, #508]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	497b      	ldr	r1, [pc, #492]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ef4:	4b76      	ldr	r3, [pc, #472]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	4973      	ldr	r1, [pc, #460]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f16:	4b6e      	ldr	r3, [pc, #440]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	496a      	ldr	r1, [pc, #424]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f38:	4b65      	ldr	r3, [pc, #404]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	4962      	ldr	r1, [pc, #392]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f5a:	4b5d      	ldr	r3, [pc, #372]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	4959      	ldr	r1, [pc, #356]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f7c:	4b54      	ldr	r3, [pc, #336]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f82:	f023 0203 	bic.w	r2, r3, #3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	4951      	ldr	r1, [pc, #324]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f9e:	4b4c      	ldr	r3, [pc, #304]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	4948      	ldr	r1, [pc, #288]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d015      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fc0:	4b43      	ldr	r3, [pc, #268]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	4940      	ldr	r1, [pc, #256]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fde:	d105      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe0:	4b3b      	ldr	r3, [pc, #236]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4a3a      	ldr	r2, [pc, #232]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d015      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ff8:	4b35      	ldr	r3, [pc, #212]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005006:	4932      	ldr	r1, [pc, #200]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005016:	d105      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005018:	4b2d      	ldr	r3, [pc, #180]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	4a2c      	ldr	r2, [pc, #176]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005022:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d015      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005030:	4b27      	ldr	r3, [pc, #156]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005036:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	4924      	ldr	r1, [pc, #144]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800504e:	d105      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005050:	4b1f      	ldr	r3, [pc, #124]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	4a1e      	ldr	r2, [pc, #120]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800505a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d015      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005068:	4b19      	ldr	r3, [pc, #100]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	4916      	ldr	r1, [pc, #88]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005086:	d105      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005088:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4a10      	ldr	r2, [pc, #64]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800508e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005092:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d019      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050a0:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	4908      	ldr	r1, [pc, #32]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050be:	d109      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050c0:	4b03      	ldr	r3, [pc, #12]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4a02      	ldr	r2, [pc, #8]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ca:	60d3      	str	r3, [r2, #12]
 80050cc:	e002      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d015      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80050e0:	4b29      	ldr	r3, [pc, #164]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ee:	4926      	ldr	r1, [pc, #152]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050fe:	d105      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005100:	4b21      	ldr	r3, [pc, #132]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4a20      	ldr	r2, [pc, #128]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d015      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005118:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005126:	4918      	ldr	r1, [pc, #96]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005136:	d105      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005138:	4b13      	ldr	r3, [pc, #76]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4a12      	ldr	r2, [pc, #72]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800513e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005142:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d015      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005150:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005152:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515e:	490a      	ldr	r1, [pc, #40]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800516e:	d105      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	4a04      	ldr	r2, [pc, #16]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800517a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800517c:	7cbb      	ldrb	r3, [r7, #18]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40021000 	.word	0x40021000

0800518c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d070      	beq.n	8005280 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fc f85e 	bl	8001274 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b10      	cmp	r3, #16
 80051cc:	d04f      	beq.n	800526e <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	22ca      	movs	r2, #202	; 0xca
 80051d4:	625a      	str	r2, [r3, #36]	; 0x24
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2253      	movs	r2, #83	; 0x53
 80051dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f878 	bl	80052d4 <RTC_EnterInitMode>
 80051e4:	4603      	mov	r3, r0
 80051e6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d126      	bne.n	800523c <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80051fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005200:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6999      	ldr	r1, [r3, #24]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68d9      	ldr	r1, [r3, #12]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	041a      	lsls	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f884 	bl	8005340 <RTC_ExitInitMode>
 8005238:	4603      	mov	r3, r0
 800523a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d110      	bne.n	8005264 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1a      	ldr	r2, [r3, #32]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	22ff      	movs	r2, #255	; 0xff
 800526a:	625a      	str	r2, [r3, #36]	; 0x24
 800526c:	e001      	b.n	8005272 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005272:	7bfb      	ldrb	r3, [r7, #15]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d103      	bne.n	8005280 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a0d      	ldr	r2, [pc, #52]	; (80052d0 <HAL_RTC_WaitForSynchro+0x44>)
 800529a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800529c:	f7fc fb3e 	bl	800191c <HAL_GetTick>
 80052a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80052a2:	e009      	b.n	80052b8 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052a4:	f7fc fb3a 	bl	800191c <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052b2:	d901      	bls.n	80052b8 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e007      	b.n	80052c8 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0ee      	beq.n	80052a4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	0001005f 	.word	0x0001005f

080052d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d123      	bne.n	8005336 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052fc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80052fe:	f7fc fb0d 	bl	800191c <HAL_GetTick>
 8005302:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005304:	e00d      	b.n	8005322 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005306:	f7fc fb09 	bl	800191c <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005314:	d905      	bls.n	8005322 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2203      	movs	r2, #3
 800531e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d102      	bne.n	8005336 <RTC_EnterInitMode+0x62>
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	2b03      	cmp	r3, #3
 8005334:	d1e7      	bne.n	8005306 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8005336:	7bfb      	ldrb	r3, [r7, #15]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800535a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10c      	bne.n	8005384 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7ff ff8e 	bl	800528c <HAL_RTC_WaitForSynchro>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d022      	beq.n	80053bc <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2203      	movs	r2, #3
 800537a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	73fb      	strb	r3, [r7, #15]
 8005382:	e01b      	b.n	80053bc <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0220 	bic.w	r2, r2, #32
 8005392:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff ff79 	bl	800528c <HAL_RTC_WaitForSynchro>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2203      	movs	r2, #3
 80053a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0220 	orr.w	r2, r2, #32
 80053ba:	619a      	str	r2, [r3, #24]
  }

  return status;
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified TAMP Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 80053d4:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <HAL_RTCEx_BKUPWrite+0x2c>)
 80053d6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4413      	add	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	601a      	str	r2, [r3, #0]
}
 80053e8:	bf00      	nop
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	40002500 	.word	0x40002500

080053f8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB to
  *          specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 8005402:	4b07      	ldr	r3, [pc, #28]	; (8005420 <HAL_RTCEx_BKUPRead+0x28>)
 8005404:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40002500 	.word	0x40002500

08005424 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e042      	b.n	80054bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543c:	2b00      	cmp	r3, #0
 800543e:	d106      	bne.n	800544e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7fc f8bf 	bl	80015cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2224      	movs	r2, #36	; 0x24
 8005452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 ff38 	bl	80062e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fc39 	bl	8005cec <UART_SetConfig>
 800547a:	4603      	mov	r3, r0
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e01b      	b.n	80054bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 ffb7 	bl	8006428 <UART_CheckIdleState>
 80054ba:	4603      	mov	r3, r0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08a      	sub	sp, #40	; 0x28
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	4613      	mov	r3, r2
 80054d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d17b      	bne.n	80055d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <HAL_UART_Transmit+0x26>
 80054e4:	88fb      	ldrh	r3, [r7, #6]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e074      	b.n	80055d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2221      	movs	r2, #33	; 0x21
 80054fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054fe:	f7fc fa0d 	bl	800191c <HAL_GetTick>
 8005502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	88fa      	ldrh	r2, [r7, #6]
 8005510:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551c:	d108      	bne.n	8005530 <HAL_UART_Transmit+0x6c>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d104      	bne.n	8005530 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	61bb      	str	r3, [r7, #24]
 800552e:	e003      	b.n	8005538 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005534:	2300      	movs	r3, #0
 8005536:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005538:	e030      	b.n	800559c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2200      	movs	r2, #0
 8005542:	2180      	movs	r1, #128	; 0x80
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f001 f819 	bl	800657c <UART_WaitOnFlagUntilTimeout>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e03d      	b.n	80055d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005570:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	3302      	adds	r3, #2
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	e007      	b.n	800558a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	781a      	ldrb	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	3301      	adds	r3, #1
 8005588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005590:	b29b      	uxth	r3, r3
 8005592:	3b01      	subs	r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1c8      	bne.n	800553a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2200      	movs	r2, #0
 80055b0:	2140      	movs	r1, #64	; 0x40
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 ffe2 	bl	800657c <UART_WaitOnFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e006      	b.n	80055d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	e000      	b.n	80055d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80055d6:	2302      	movs	r3, #2
  }
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3720      	adds	r7, #32
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08a      	sub	sp, #40	; 0x28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	4613      	mov	r3, r2
 80055ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d137      	bne.n	8005668 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_UART_Receive_IT+0x24>
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e030      	b.n	800566a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a18      	ldr	r2, [pc, #96]	; (8005674 <HAL_UART_Receive_IT+0x94>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d01f      	beq.n	8005658 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d018      	beq.n	8005658 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	e853 3f00 	ldrex	r3, [r3]
 8005632:	613b      	str	r3, [r7, #16]
   return(result);
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	623b      	str	r3, [r7, #32]
 8005646:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	69f9      	ldr	r1, [r7, #28]
 800564a:	6a3a      	ldr	r2, [r7, #32]
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	61bb      	str	r3, [r7, #24]
   return(result);
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e6      	bne.n	8005626 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	461a      	mov	r2, r3
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fffa 	bl	8006658 <UART_Start_Receive_IT>
 8005664:	4603      	mov	r3, r0
 8005666:	e000      	b.n	800566a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005668:	2302      	movs	r3, #2
  }
}
 800566a:	4618      	mov	r0, r3
 800566c:	3728      	adds	r7, #40	; 0x28
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40008000 	.word	0x40008000

08005678 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b0ba      	sub	sp, #232	; 0xe8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800569e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80056a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80056a6:	4013      	ands	r3, r2
 80056a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80056ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d11b      	bne.n	80056ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d015      	beq.n	80056ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d105      	bne.n	80056d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d009      	beq.n	80056ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 82e3 	beq.w	8005ca8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
      }
      return;
 80056ea:	e2dd      	b.n	8005ca8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 8123 	beq.w	800593c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80056f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80056fa:	4b8d      	ldr	r3, [pc, #564]	; (8005930 <HAL_UART_IRQHandler+0x2b8>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005702:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005706:	4b8b      	ldr	r3, [pc, #556]	; (8005934 <HAL_UART_IRQHandler+0x2bc>)
 8005708:	4013      	ands	r3, r2
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 8116 	beq.w	800593c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b00      	cmp	r3, #0
 800571a:	d011      	beq.n	8005740 <HAL_UART_IRQHandler+0xc8>
 800571c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00b      	beq.n	8005740 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2201      	movs	r2, #1
 800572e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005736:	f043 0201 	orr.w	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d011      	beq.n	8005770 <HAL_UART_IRQHandler+0xf8>
 800574c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00b      	beq.n	8005770 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2202      	movs	r2, #2
 800575e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005766:	f043 0204 	orr.w	r2, r3, #4
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d011      	beq.n	80057a0 <HAL_UART_IRQHandler+0x128>
 800577c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00b      	beq.n	80057a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2204      	movs	r2, #4
 800578e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005796:	f043 0202 	orr.w	r2, r3, #2
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d017      	beq.n	80057dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d105      	bne.n	80057c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80057b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80057bc:	4b5c      	ldr	r3, [pc, #368]	; (8005930 <HAL_UART_IRQHandler+0x2b8>)
 80057be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00b      	beq.n	80057dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2208      	movs	r2, #8
 80057ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d2:	f043 0208 	orr.w	r2, r3, #8
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d012      	beq.n	800580e <HAL_UART_IRQHandler+0x196>
 80057e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00c      	beq.n	800580e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005804:	f043 0220 	orr.w	r2, r3, #32
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 8249 	beq.w	8005cac <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800581a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b00      	cmp	r3, #0
 8005824:	d013      	beq.n	800584e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d105      	bne.n	800583e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d007      	beq.n	800584e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005854:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005862:	2b40      	cmp	r3, #64	; 0x40
 8005864:	d005      	beq.n	8005872 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800586a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800586e:	2b00      	cmp	r3, #0
 8005870:	d054      	beq.n	800591c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f001 f812 	bl	800689c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005882:	2b40      	cmp	r3, #64	; 0x40
 8005884:	d146      	bne.n	8005914 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3308      	adds	r3, #8
 800588c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800589c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3308      	adds	r3, #8
 80058ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1d9      	bne.n	8005886 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d017      	beq.n	800590c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058e2:	4a15      	ldr	r2, [pc, #84]	; (8005938 <HAL_UART_IRQHandler+0x2c0>)
 80058e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fc f9ab 	bl	8001c48 <HAL_DMA_Abort_IT>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d019      	beq.n	800592c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005906:	4610      	mov	r0, r2
 8005908:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590a:	e00f      	b.n	800592c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7fb fe33 	bl	8001578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005912:	e00b      	b.n	800592c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7fb fe2f 	bl	8001578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800591a:	e007      	b.n	800592c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7fb fe2b 	bl	8001578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800592a:	e1bf      	b.n	8005cac <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800592c:	bf00      	nop
    return;
 800592e:	e1bd      	b.n	8005cac <HAL_UART_IRQHandler+0x634>
 8005930:	10000001 	.word	0x10000001
 8005934:	04000120 	.word	0x04000120
 8005938:	08006969 	.word	0x08006969

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005940:	2b01      	cmp	r3, #1
 8005942:	f040 8153 	bne.w	8005bec <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 814c 	beq.w	8005bec <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 8145 	beq.w	8005bec <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2210      	movs	r2, #16
 8005968:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	f040 80bb 	bne.w	8005af0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005988:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 818f 	beq.w	8005cb0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005998:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800599c:	429a      	cmp	r2, r3
 800599e:	f080 8187 	bcs.w	8005cb0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f040 8087 	bne.w	8005ace <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1da      	bne.n	80059c0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3308      	adds	r3, #8
 8005a10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a1c:	f023 0301 	bic.w	r3, r3, #1
 8005a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e1      	bne.n	8005a0a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3308      	adds	r3, #8
 8005a66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1e3      	bne.n	8005a46 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a9c:	f023 0310 	bic.w	r3, r3, #16
 8005aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005aae:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ab0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ab4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ab6:	e841 2300 	strex	r3, r2, [r1]
 8005aba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1e4      	bne.n	8005a8c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fc f864 	bl	8001b96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f8f3 	bl	8005cd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aee:	e0df      	b.n	8005cb0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80d1 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005b12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 80cc 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e4      	bne.n	8005b1c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3308      	adds	r3, #8
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	623b      	str	r3, [r7, #32]
   return(result);
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3308      	adds	r3, #8
 8005b76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b7a:	633a      	str	r2, [r7, #48]	; 0x30
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e1      	bne.n	8005b52 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0310 	bic.w	r3, r3, #16
 8005bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	69b9      	ldr	r1, [r7, #24]
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e4      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f875 	bl	8005cd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bea:	e063      	b.n	8005cb4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00e      	beq.n	8005c16 <HAL_UART_IRQHandler+0x59e>
 8005bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d008      	beq.n	8005c16 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f001 fc08 	bl	8007424 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c14:	e051      	b.n	8005cba <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d014      	beq.n	8005c4c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d105      	bne.n	8005c3a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d008      	beq.n	8005c4c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d03a      	beq.n	8005cb8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	4798      	blx	r3
    }
    return;
 8005c4a:	e035      	b.n	8005cb8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d009      	beq.n	8005c6c <HAL_UART_IRQHandler+0x5f4>
 8005c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fe95 	bl	8006994 <UART_EndTransmit_IT>
    return;
 8005c6a:	e026      	b.n	8005cba <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d009      	beq.n	8005c8c <HAL_UART_IRQHandler+0x614>
 8005c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f001 fbe1 	bl	800744c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c8a:	e016      	b.n	8005cba <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d010      	beq.n	8005cba <HAL_UART_IRQHandler+0x642>
 8005c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	da0c      	bge.n	8005cba <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 fbc9 	bl	8007438 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ca6:	e008      	b.n	8005cba <HAL_UART_IRQHandler+0x642>
      return;
 8005ca8:	bf00      	nop
 8005caa:	e006      	b.n	8005cba <HAL_UART_IRQHandler+0x642>
    return;
 8005cac:	bf00      	nop
 8005cae:	e004      	b.n	8005cba <HAL_UART_IRQHandler+0x642>
      return;
 8005cb0:	bf00      	nop
 8005cb2:	e002      	b.n	8005cba <HAL_UART_IRQHandler+0x642>
      return;
 8005cb4:	bf00      	nop
 8005cb6:	e000      	b.n	8005cba <HAL_UART_IRQHandler+0x642>
    return;
 8005cb8:	bf00      	nop
  }
}
 8005cba:	37e8      	adds	r7, #232	; 0xe8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cf0:	b08c      	sub	sp, #48	; 0x30
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	431a      	orrs	r2, r3
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	4baa      	ldr	r3, [pc, #680]	; (8005fc4 <UART_SetConfig+0x2d8>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d24:	430b      	orrs	r3, r1
 8005d26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a9f      	ldr	r2, [pc, #636]	; (8005fc8 <UART_SetConfig+0x2dc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d004      	beq.n	8005d58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d54:	4313      	orrs	r3, r2
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005d62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d76:	f023 010f 	bic.w	r1, r3, #15
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a90      	ldr	r2, [pc, #576]	; (8005fcc <UART_SetConfig+0x2e0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d125      	bne.n	8005ddc <UART_SetConfig+0xf0>
 8005d90:	4b8f      	ldr	r3, [pc, #572]	; (8005fd0 <UART_SetConfig+0x2e4>)
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d81a      	bhi.n	8005dd4 <UART_SetConfig+0xe8>
 8005d9e:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <UART_SetConfig+0xb8>)
 8005da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da4:	08005db5 	.word	0x08005db5
 8005da8:	08005dc5 	.word	0x08005dc5
 8005dac:	08005dbd 	.word	0x08005dbd
 8005db0:	08005dcd 	.word	0x08005dcd
 8005db4:	2301      	movs	r3, #1
 8005db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dba:	e116      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dc2:	e112      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005dc4:	2304      	movs	r3, #4
 8005dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dca:	e10e      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005dcc:	2308      	movs	r3, #8
 8005dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dd2:	e10a      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dda:	e106      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a7c      	ldr	r2, [pc, #496]	; (8005fd4 <UART_SetConfig+0x2e8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d138      	bne.n	8005e58 <UART_SetConfig+0x16c>
 8005de6:	4b7a      	ldr	r3, [pc, #488]	; (8005fd0 <UART_SetConfig+0x2e4>)
 8005de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dec:	f003 030c 	and.w	r3, r3, #12
 8005df0:	2b0c      	cmp	r3, #12
 8005df2:	d82d      	bhi.n	8005e50 <UART_SetConfig+0x164>
 8005df4:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <UART_SetConfig+0x110>)
 8005df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfa:	bf00      	nop
 8005dfc:	08005e31 	.word	0x08005e31
 8005e00:	08005e51 	.word	0x08005e51
 8005e04:	08005e51 	.word	0x08005e51
 8005e08:	08005e51 	.word	0x08005e51
 8005e0c:	08005e41 	.word	0x08005e41
 8005e10:	08005e51 	.word	0x08005e51
 8005e14:	08005e51 	.word	0x08005e51
 8005e18:	08005e51 	.word	0x08005e51
 8005e1c:	08005e39 	.word	0x08005e39
 8005e20:	08005e51 	.word	0x08005e51
 8005e24:	08005e51 	.word	0x08005e51
 8005e28:	08005e51 	.word	0x08005e51
 8005e2c:	08005e49 	.word	0x08005e49
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e36:	e0d8      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e3e:	e0d4      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005e40:	2304      	movs	r3, #4
 8005e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e46:	e0d0      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005e48:	2308      	movs	r3, #8
 8005e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e4e:	e0cc      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005e50:	2310      	movs	r3, #16
 8005e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e56:	e0c8      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a5e      	ldr	r2, [pc, #376]	; (8005fd8 <UART_SetConfig+0x2ec>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d125      	bne.n	8005eae <UART_SetConfig+0x1c2>
 8005e62:	4b5b      	ldr	r3, [pc, #364]	; (8005fd0 <UART_SetConfig+0x2e4>)
 8005e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e6c:	2b30      	cmp	r3, #48	; 0x30
 8005e6e:	d016      	beq.n	8005e9e <UART_SetConfig+0x1b2>
 8005e70:	2b30      	cmp	r3, #48	; 0x30
 8005e72:	d818      	bhi.n	8005ea6 <UART_SetConfig+0x1ba>
 8005e74:	2b20      	cmp	r3, #32
 8005e76:	d00a      	beq.n	8005e8e <UART_SetConfig+0x1a2>
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d814      	bhi.n	8005ea6 <UART_SetConfig+0x1ba>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <UART_SetConfig+0x19a>
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	d008      	beq.n	8005e96 <UART_SetConfig+0x1aa>
 8005e84:	e00f      	b.n	8005ea6 <UART_SetConfig+0x1ba>
 8005e86:	2300      	movs	r3, #0
 8005e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e8c:	e0ad      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e94:	e0a9      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005e96:	2304      	movs	r3, #4
 8005e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e9c:	e0a5      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005e9e:	2308      	movs	r3, #8
 8005ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ea4:	e0a1      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005ea6:	2310      	movs	r3, #16
 8005ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eac:	e09d      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a4a      	ldr	r2, [pc, #296]	; (8005fdc <UART_SetConfig+0x2f0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d125      	bne.n	8005f04 <UART_SetConfig+0x218>
 8005eb8:	4b45      	ldr	r3, [pc, #276]	; (8005fd0 <UART_SetConfig+0x2e4>)
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ec2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ec4:	d016      	beq.n	8005ef4 <UART_SetConfig+0x208>
 8005ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ec8:	d818      	bhi.n	8005efc <UART_SetConfig+0x210>
 8005eca:	2b80      	cmp	r3, #128	; 0x80
 8005ecc:	d00a      	beq.n	8005ee4 <UART_SetConfig+0x1f8>
 8005ece:	2b80      	cmp	r3, #128	; 0x80
 8005ed0:	d814      	bhi.n	8005efc <UART_SetConfig+0x210>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <UART_SetConfig+0x1f0>
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d008      	beq.n	8005eec <UART_SetConfig+0x200>
 8005eda:	e00f      	b.n	8005efc <UART_SetConfig+0x210>
 8005edc:	2300      	movs	r3, #0
 8005ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ee2:	e082      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eea:	e07e      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005eec:	2304      	movs	r3, #4
 8005eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ef2:	e07a      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005ef4:	2308      	movs	r3, #8
 8005ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005efa:	e076      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005efc:	2310      	movs	r3, #16
 8005efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f02:	e072      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a35      	ldr	r2, [pc, #212]	; (8005fe0 <UART_SetConfig+0x2f4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d12a      	bne.n	8005f64 <UART_SetConfig+0x278>
 8005f0e:	4b30      	ldr	r3, [pc, #192]	; (8005fd0 <UART_SetConfig+0x2e4>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f1c:	d01a      	beq.n	8005f54 <UART_SetConfig+0x268>
 8005f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f22:	d81b      	bhi.n	8005f5c <UART_SetConfig+0x270>
 8005f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f28:	d00c      	beq.n	8005f44 <UART_SetConfig+0x258>
 8005f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f2e:	d815      	bhi.n	8005f5c <UART_SetConfig+0x270>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <UART_SetConfig+0x250>
 8005f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f38:	d008      	beq.n	8005f4c <UART_SetConfig+0x260>
 8005f3a:	e00f      	b.n	8005f5c <UART_SetConfig+0x270>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f42:	e052      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005f44:	2302      	movs	r3, #2
 8005f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f4a:	e04e      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f52:	e04a      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005f54:	2308      	movs	r3, #8
 8005f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f5a:	e046      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f62:	e042      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a17      	ldr	r2, [pc, #92]	; (8005fc8 <UART_SetConfig+0x2dc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d13a      	bne.n	8005fe4 <UART_SetConfig+0x2f8>
 8005f6e:	4b18      	ldr	r3, [pc, #96]	; (8005fd0 <UART_SetConfig+0x2e4>)
 8005f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f7c:	d01a      	beq.n	8005fb4 <UART_SetConfig+0x2c8>
 8005f7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f82:	d81b      	bhi.n	8005fbc <UART_SetConfig+0x2d0>
 8005f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f88:	d00c      	beq.n	8005fa4 <UART_SetConfig+0x2b8>
 8005f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f8e:	d815      	bhi.n	8005fbc <UART_SetConfig+0x2d0>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <UART_SetConfig+0x2b0>
 8005f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f98:	d008      	beq.n	8005fac <UART_SetConfig+0x2c0>
 8005f9a:	e00f      	b.n	8005fbc <UART_SetConfig+0x2d0>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fa2:	e022      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005faa:	e01e      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005fac:	2304      	movs	r3, #4
 8005fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fb2:	e01a      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005fb4:	2308      	movs	r3, #8
 8005fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fba:	e016      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fc2:	e012      	b.n	8005fea <UART_SetConfig+0x2fe>
 8005fc4:	cfff69f3 	.word	0xcfff69f3
 8005fc8:	40008000 	.word	0x40008000
 8005fcc:	40013800 	.word	0x40013800
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40004400 	.word	0x40004400
 8005fd8:	40004800 	.word	0x40004800
 8005fdc:	40004c00 	.word	0x40004c00
 8005fe0:	40005000 	.word	0x40005000
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4aae      	ldr	r2, [pc, #696]	; (80062a8 <UART_SetConfig+0x5bc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	f040 8097 	bne.w	8006124 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	d823      	bhi.n	8006046 <UART_SetConfig+0x35a>
 8005ffe:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <UART_SetConfig+0x318>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	08006029 	.word	0x08006029
 8006008:	08006047 	.word	0x08006047
 800600c:	08006031 	.word	0x08006031
 8006010:	08006047 	.word	0x08006047
 8006014:	08006037 	.word	0x08006037
 8006018:	08006047 	.word	0x08006047
 800601c:	08006047 	.word	0x08006047
 8006020:	08006047 	.word	0x08006047
 8006024:	0800603f 	.word	0x0800603f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006028:	f7fe fdf0 	bl	8004c0c <HAL_RCC_GetPCLK1Freq>
 800602c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800602e:	e010      	b.n	8006052 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006030:	4b9e      	ldr	r3, [pc, #632]	; (80062ac <UART_SetConfig+0x5c0>)
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006034:	e00d      	b.n	8006052 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006036:	f7fe fd7b 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 800603a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800603c:	e009      	b.n	8006052 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800603e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006044:	e005      	b.n	8006052 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006050:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8130 	beq.w	80062ba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	4a94      	ldr	r2, [pc, #592]	; (80062b0 <UART_SetConfig+0x5c4>)
 8006060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006064:	461a      	mov	r2, r3
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	fbb3 f3f2 	udiv	r3, r3, r2
 800606c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	4613      	mov	r3, r2
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	4413      	add	r3, r2
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	429a      	cmp	r2, r3
 800607c:	d305      	bcc.n	800608a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	429a      	cmp	r2, r3
 8006088:	d903      	bls.n	8006092 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006090:	e113      	b.n	80062ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	2200      	movs	r2, #0
 8006096:	60bb      	str	r3, [r7, #8]
 8006098:	60fa      	str	r2, [r7, #12]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	4a84      	ldr	r2, [pc, #528]	; (80062b0 <UART_SetConfig+0x5c4>)
 80060a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2200      	movs	r2, #0
 80060a8:	603b      	str	r3, [r7, #0]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060b4:	f7fa f904 	bl	80002c0 <__aeabi_uldivmod>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4610      	mov	r0, r2
 80060be:	4619      	mov	r1, r3
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	020b      	lsls	r3, r1, #8
 80060ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060ce:	0202      	lsls	r2, r0, #8
 80060d0:	6979      	ldr	r1, [r7, #20]
 80060d2:	6849      	ldr	r1, [r1, #4]
 80060d4:	0849      	lsrs	r1, r1, #1
 80060d6:	2000      	movs	r0, #0
 80060d8:	460c      	mov	r4, r1
 80060da:	4605      	mov	r5, r0
 80060dc:	eb12 0804 	adds.w	r8, r2, r4
 80060e0:	eb43 0905 	adc.w	r9, r3, r5
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	469a      	mov	sl, r3
 80060ec:	4693      	mov	fp, r2
 80060ee:	4652      	mov	r2, sl
 80060f0:	465b      	mov	r3, fp
 80060f2:	4640      	mov	r0, r8
 80060f4:	4649      	mov	r1, r9
 80060f6:	f7fa f8e3 	bl	80002c0 <__aeabi_uldivmod>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	4613      	mov	r3, r2
 8006100:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006108:	d308      	bcc.n	800611c <UART_SetConfig+0x430>
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006110:	d204      	bcs.n	800611c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6a3a      	ldr	r2, [r7, #32]
 8006118:	60da      	str	r2, [r3, #12]
 800611a:	e0ce      	b.n	80062ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006122:	e0ca      	b.n	80062ba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800612c:	d166      	bne.n	80061fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800612e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006132:	2b08      	cmp	r3, #8
 8006134:	d827      	bhi.n	8006186 <UART_SetConfig+0x49a>
 8006136:	a201      	add	r2, pc, #4	; (adr r2, 800613c <UART_SetConfig+0x450>)
 8006138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613c:	08006161 	.word	0x08006161
 8006140:	08006169 	.word	0x08006169
 8006144:	08006171 	.word	0x08006171
 8006148:	08006187 	.word	0x08006187
 800614c:	08006177 	.word	0x08006177
 8006150:	08006187 	.word	0x08006187
 8006154:	08006187 	.word	0x08006187
 8006158:	08006187 	.word	0x08006187
 800615c:	0800617f 	.word	0x0800617f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006160:	f7fe fd54 	bl	8004c0c <HAL_RCC_GetPCLK1Freq>
 8006164:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006166:	e014      	b.n	8006192 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006168:	f7fe fd66 	bl	8004c38 <HAL_RCC_GetPCLK2Freq>
 800616c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800616e:	e010      	b.n	8006192 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006170:	4b4e      	ldr	r3, [pc, #312]	; (80062ac <UART_SetConfig+0x5c0>)
 8006172:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006174:	e00d      	b.n	8006192 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006176:	f7fe fcdb 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 800617a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800617c:	e009      	b.n	8006192 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800617e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006182:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006184:	e005      	b.n	8006192 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006190:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 8090 	beq.w	80062ba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	4a44      	ldr	r2, [pc, #272]	; (80062b0 <UART_SetConfig+0x5c4>)
 80061a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061a4:	461a      	mov	r2, r3
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ac:	005a      	lsls	r2, r3, #1
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	085b      	lsrs	r3, r3, #1
 80061b4:	441a      	add	r2, r3
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80061be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	2b0f      	cmp	r3, #15
 80061c4:	d916      	bls.n	80061f4 <UART_SetConfig+0x508>
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061cc:	d212      	bcs.n	80061f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	f023 030f 	bic.w	r3, r3, #15
 80061d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	8bfb      	ldrh	r3, [r7, #30]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	8bfa      	ldrh	r2, [r7, #30]
 80061f0:	60da      	str	r2, [r3, #12]
 80061f2:	e062      	b.n	80062ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80061fa:	e05e      	b.n	80062ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006200:	2b08      	cmp	r3, #8
 8006202:	d828      	bhi.n	8006256 <UART_SetConfig+0x56a>
 8006204:	a201      	add	r2, pc, #4	; (adr r2, 800620c <UART_SetConfig+0x520>)
 8006206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620a:	bf00      	nop
 800620c:	08006231 	.word	0x08006231
 8006210:	08006239 	.word	0x08006239
 8006214:	08006241 	.word	0x08006241
 8006218:	08006257 	.word	0x08006257
 800621c:	08006247 	.word	0x08006247
 8006220:	08006257 	.word	0x08006257
 8006224:	08006257 	.word	0x08006257
 8006228:	08006257 	.word	0x08006257
 800622c:	0800624f 	.word	0x0800624f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006230:	f7fe fcec 	bl	8004c0c <HAL_RCC_GetPCLK1Freq>
 8006234:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006236:	e014      	b.n	8006262 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006238:	f7fe fcfe 	bl	8004c38 <HAL_RCC_GetPCLK2Freq>
 800623c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800623e:	e010      	b.n	8006262 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006240:	4b1a      	ldr	r3, [pc, #104]	; (80062ac <UART_SetConfig+0x5c0>)
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006244:	e00d      	b.n	8006262 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006246:	f7fe fc73 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 800624a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800624c:	e009      	b.n	8006262 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800624e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006254:	e005      	b.n	8006262 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006260:	bf00      	nop
    }

    if (pclk != 0U)
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	2b00      	cmp	r3, #0
 8006266:	d028      	beq.n	80062ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	4a10      	ldr	r2, [pc, #64]	; (80062b0 <UART_SetConfig+0x5c4>)
 800626e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006272:	461a      	mov	r2, r3
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	fbb3 f2f2 	udiv	r2, r3, r2
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	085b      	lsrs	r3, r3, #1
 8006280:	441a      	add	r2, r3
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	fbb2 f3f3 	udiv	r3, r2, r3
 800628a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	2b0f      	cmp	r3, #15
 8006290:	d910      	bls.n	80062b4 <UART_SetConfig+0x5c8>
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006298:	d20c      	bcs.n	80062b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	b29a      	uxth	r2, r3
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60da      	str	r2, [r3, #12]
 80062a4:	e009      	b.n	80062ba <UART_SetConfig+0x5ce>
 80062a6:	bf00      	nop
 80062a8:	40008000 	.word	0x40008000
 80062ac:	00f42400 	.word	0x00f42400
 80062b0:	0800cb2c 	.word	0x0800cb2c
      }
      else
      {
        ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2201      	movs	r2, #1
 80062be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2200      	movs	r2, #0
 80062ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2200      	movs	r2, #0
 80062d4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80062d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3730      	adds	r7, #48	; 0x30
 80062de:	46bd      	mov	sp, r7
 80062e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080062e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01a      	beq.n	80063fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063e2:	d10a      	bne.n	80063fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	605a      	str	r2, [r3, #4]
  }
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b098      	sub	sp, #96	; 0x60
 800642c:	af02      	add	r7, sp, #8
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006438:	f7fb fa70 	bl	800191c <HAL_GetTick>
 800643c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b08      	cmp	r3, #8
 800644a:	d12f      	bne.n	80064ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800644c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006454:	2200      	movs	r2, #0
 8006456:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f88e 	bl	800657c <UART_WaitOnFlagUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d022      	beq.n	80064ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800647a:	653b      	str	r3, [r7, #80]	; 0x50
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	461a      	mov	r2, r3
 8006482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006484:	647b      	str	r3, [r7, #68]	; 0x44
 8006486:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800648a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e6      	bne.n	8006466 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2220      	movs	r2, #32
 800649c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e063      	b.n	8006574 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d149      	bne.n	800654e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064c2:	2200      	movs	r2, #0
 80064c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f857 	bl	800657c <UART_WaitOnFlagUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d03c      	beq.n	800654e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	623b      	str	r3, [r7, #32]
   return(result);
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f2:	633b      	str	r3, [r7, #48]	; 0x30
 80064f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e6      	bne.n	80064d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3308      	adds	r3, #8
 800650c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	60fb      	str	r3, [r7, #12]
   return(result);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f023 0301 	bic.w	r3, r3, #1
 800651c:	64bb      	str	r3, [r7, #72]	; 0x48
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3308      	adds	r3, #8
 8006524:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006526:	61fa      	str	r2, [r7, #28]
 8006528:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	69b9      	ldr	r1, [r7, #24]
 800652c:	69fa      	ldr	r2, [r7, #28]
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	617b      	str	r3, [r7, #20]
   return(result);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e5      	bne.n	8006506 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e012      	b.n	8006574 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3758      	adds	r7, #88	; 0x58
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	603b      	str	r3, [r7, #0]
 8006588:	4613      	mov	r3, r2
 800658a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800658c:	e04f      	b.n	800662e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006594:	d04b      	beq.n	800662e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006596:	f7fb f9c1 	bl	800191c <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d302      	bcc.n	80065ac <UART_WaitOnFlagUntilTimeout+0x30>
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e04e      	b.n	800664e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d037      	beq.n	800662e <UART_WaitOnFlagUntilTimeout+0xb2>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b80      	cmp	r3, #128	; 0x80
 80065c2:	d034      	beq.n	800662e <UART_WaitOnFlagUntilTimeout+0xb2>
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2b40      	cmp	r3, #64	; 0x40
 80065c8:	d031      	beq.n	800662e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d110      	bne.n	80065fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2208      	movs	r2, #8
 80065de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 f95b 	bl	800689c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2208      	movs	r2, #8
 80065ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e029      	b.n	800664e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006608:	d111      	bne.n	800662e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 f941 	bl	800689c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2220      	movs	r2, #32
 800661e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e00f      	b.n	800664e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69da      	ldr	r2, [r3, #28]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4013      	ands	r3, r2
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	429a      	cmp	r2, r3
 800663c:	bf0c      	ite	eq
 800663e:	2301      	moveq	r3, #1
 8006640:	2300      	movne	r3, #0
 8006642:	b2db      	uxtb	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	79fb      	ldrb	r3, [r7, #7]
 8006648:	429a      	cmp	r2, r3
 800664a:	d0a0      	beq.n	800658e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006658:	b480      	push	{r7}
 800665a:	b0a3      	sub	sp, #140	; 0x8c
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	4613      	mov	r3, r2
 8006664:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	88fa      	ldrh	r2, [r7, #6]
 8006670:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	88fa      	ldrh	r2, [r7, #6]
 8006678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668a:	d10e      	bne.n	80066aa <UART_Start_Receive_IT+0x52>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d105      	bne.n	80066a0 <UART_Start_Receive_IT+0x48>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f240 12ff 	movw	r2, #511	; 0x1ff
 800669a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800669e:	e02d      	b.n	80066fc <UART_Start_Receive_IT+0xa4>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	22ff      	movs	r2, #255	; 0xff
 80066a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066a8:	e028      	b.n	80066fc <UART_Start_Receive_IT+0xa4>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10d      	bne.n	80066ce <UART_Start_Receive_IT+0x76>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d104      	bne.n	80066c4 <UART_Start_Receive_IT+0x6c>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	22ff      	movs	r2, #255	; 0xff
 80066be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066c2:	e01b      	b.n	80066fc <UART_Start_Receive_IT+0xa4>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	227f      	movs	r2, #127	; 0x7f
 80066c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066cc:	e016      	b.n	80066fc <UART_Start_Receive_IT+0xa4>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066d6:	d10d      	bne.n	80066f4 <UART_Start_Receive_IT+0x9c>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d104      	bne.n	80066ea <UART_Start_Receive_IT+0x92>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	227f      	movs	r2, #127	; 0x7f
 80066e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066e8:	e008      	b.n	80066fc <UART_Start_Receive_IT+0xa4>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	223f      	movs	r2, #63	; 0x3f
 80066ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066f2:	e003      	b.n	80066fc <UART_Start_Receive_IT+0xa4>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2222      	movs	r2, #34	; 0x22
 8006708:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3308      	adds	r3, #8
 8006712:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006716:	e853 3f00 	ldrex	r3, [r3]
 800671a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800671c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800671e:	f043 0301 	orr.w	r3, r3, #1
 8006722:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3308      	adds	r3, #8
 800672c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006730:	673a      	str	r2, [r7, #112]	; 0x70
 8006732:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006736:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800673e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e3      	bne.n	800670c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800674c:	d14f      	bne.n	80067ee <UART_Start_Receive_IT+0x196>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006754:	88fa      	ldrh	r2, [r7, #6]
 8006756:	429a      	cmp	r2, r3
 8006758:	d349      	bcc.n	80067ee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006762:	d107      	bne.n	8006774 <UART_Start_Receive_IT+0x11c>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d103      	bne.n	8006774 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a47      	ldr	r2, [pc, #284]	; (800688c <UART_Start_Receive_IT+0x234>)
 8006770:	675a      	str	r2, [r3, #116]	; 0x74
 8006772:	e002      	b.n	800677a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4a46      	ldr	r2, [pc, #280]	; (8006890 <UART_Start_Receive_IT+0x238>)
 8006778:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d01a      	beq.n	80067b8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800678a:	e853 3f00 	ldrex	r3, [r3]
 800678e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006796:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067a6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e4      	bne.n	8006782 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3308      	adds	r3, #8
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3308      	adds	r3, #8
 80067d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80067d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80067da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e5      	bne.n	80067b8 <UART_Start_Receive_IT+0x160>
 80067ec:	e046      	b.n	800687c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f6:	d107      	bne.n	8006808 <UART_Start_Receive_IT+0x1b0>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d103      	bne.n	8006808 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4a24      	ldr	r2, [pc, #144]	; (8006894 <UART_Start_Receive_IT+0x23c>)
 8006804:	675a      	str	r2, [r3, #116]	; 0x74
 8006806:	e002      	b.n	800680e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4a23      	ldr	r2, [pc, #140]	; (8006898 <UART_Start_Receive_IT+0x240>)
 800680c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d019      	beq.n	800684a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	e853 3f00 	ldrex	r3, [r3]
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800682a:	677b      	str	r3, [r7, #116]	; 0x74
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006834:	637b      	str	r3, [r7, #52]	; 0x34
 8006836:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006838:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800683a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800683c:	e841 2300 	strex	r3, r2, [r1]
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1e6      	bne.n	8006816 <UART_Start_Receive_IT+0x1be>
 8006848:	e018      	b.n	800687c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	e853 3f00 	ldrex	r3, [r3]
 8006856:	613b      	str	r3, [r7, #16]
   return(result);
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f043 0320 	orr.w	r3, r3, #32
 800685e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	461a      	mov	r2, r3
 8006866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006868:	623b      	str	r3, [r7, #32]
 800686a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686c:	69f9      	ldr	r1, [r7, #28]
 800686e:	6a3a      	ldr	r2, [r7, #32]
 8006870:	e841 2300 	strex	r3, r2, [r1]
 8006874:	61bb      	str	r3, [r7, #24]
   return(result);
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1e6      	bne.n	800684a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	378c      	adds	r7, #140	; 0x8c
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	080070bd 	.word	0x080070bd
 8006890:	08006d5d 	.word	0x08006d5d
 8006894:	08006ba5 	.word	0x08006ba5
 8006898:	080069ed 	.word	0x080069ed

0800689c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800689c:	b480      	push	{r7}
 800689e:	b095      	sub	sp, #84	; 0x54
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c2:	643b      	str	r3, [r7, #64]	; 0x40
 80068c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e6      	bne.n	80068a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3308      	adds	r3, #8
 80068dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3308      	adds	r3, #8
 80068f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e3      	bne.n	80068d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006912:	2b01      	cmp	r3, #1
 8006914:	d118      	bne.n	8006948 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	60bb      	str	r3, [r7, #8]
   return(result);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f023 0310 	bic.w	r3, r3, #16
 800692a:	647b      	str	r3, [r7, #68]	; 0x44
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6979      	ldr	r1, [r7, #20]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	613b      	str	r3, [r7, #16]
   return(result);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e6      	bne.n	8006916 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800695c:	bf00      	nop
 800695e:	3754      	adds	r7, #84	; 0x54
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006974:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7fa fdf6 	bl	8001578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800698c:	bf00      	nop
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b0:	61fb      	str	r3, [r7, #28]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	61bb      	str	r3, [r7, #24]
 80069bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	6979      	ldr	r1, [r7, #20]
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	613b      	str	r3, [r7, #16]
   return(result);
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e6      	bne.n	800699c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7ff f96f 	bl	8005cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e2:	bf00      	nop
 80069e4:	3720      	adds	r7, #32
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
	...

080069ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b09c      	sub	sp, #112	; 0x70
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a04:	2b22      	cmp	r3, #34	; 0x22
 8006a06:	f040 80be 	bne.w	8006b86 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a18:	b2d9      	uxtb	r1, r3
 8006a1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a24:	400a      	ands	r2, r1
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f040 80a1 	bne.w	8006b96 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a68:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a72:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e6      	bne.n	8006a54 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a98:	f023 0301 	bic.w	r3, r3, #1
 8006a9c:	667b      	str	r3, [r7, #100]	; 0x64
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3308      	adds	r3, #8
 8006aa4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006aa6:	647a      	str	r2, [r7, #68]	; 0x44
 8006aa8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006aac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e5      	bne.n	8006a86 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a33      	ldr	r2, [pc, #204]	; (8006ba0 <UART_RxISR_8BIT+0x1b4>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d01f      	beq.n	8006b18 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d018      	beq.n	8006b18 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	623b      	str	r3, [r7, #32]
   return(result);
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006afa:	663b      	str	r3, [r7, #96]	; 0x60
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	461a      	mov	r2, r3
 8006b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b04:	633b      	str	r3, [r7, #48]	; 0x30
 8006b06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e6      	bne.n	8006ae6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d12e      	bne.n	8006b7e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0310 	bic.w	r3, r3, #16
 8006b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b44:	61fb      	str	r3, [r7, #28]
 8006b46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	69b9      	ldr	r1, [r7, #24]
 8006b4a:	69fa      	ldr	r2, [r7, #28]
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	617b      	str	r3, [r7, #20]
   return(result);
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e6      	bne.n	8006b26 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f003 0310 	and.w	r3, r3, #16
 8006b62:	2b10      	cmp	r3, #16
 8006b64:	d103      	bne.n	8006b6e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2210      	movs	r2, #16
 8006b6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff f8ac 	bl	8005cd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b7c:	e00b      	b.n	8006b96 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fa fd04 	bl	800158c <HAL_UART_RxCpltCallback>
}
 8006b84:	e007      	b.n	8006b96 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	699a      	ldr	r2, [r3, #24]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0208 	orr.w	r2, r2, #8
 8006b94:	619a      	str	r2, [r3, #24]
}
 8006b96:	bf00      	nop
 8006b98:	3770      	adds	r7, #112	; 0x70
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	40008000 	.word	0x40008000

08006ba4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b09c      	sub	sp, #112	; 0x70
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006bb2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bbc:	2b22      	cmp	r3, #34	; 0x22
 8006bbe:	f040 80be 	bne.w	8006d3e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006bd2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006bd6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006bda:	4013      	ands	r3, r2
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006be0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be6:	1c9a      	adds	r2, r3, #2
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f040 80a1 	bne.w	8006d4e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c20:	667b      	str	r3, [r7, #100]	; 0x64
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c2c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e6      	bne.n	8006c0c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3308      	adds	r3, #8
 8006c44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	f023 0301 	bic.w	r3, r3, #1
 8006c54:	663b      	str	r3, [r7, #96]	; 0x60
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c5e:	643a      	str	r2, [r7, #64]	; 0x40
 8006c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e5      	bne.n	8006c3e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a33      	ldr	r2, [pc, #204]	; (8006d58 <UART_RxISR_16BIT+0x1b4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d01f      	beq.n	8006cd0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d018      	beq.n	8006cd0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cbe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e6      	bne.n	8006c9e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d12e      	bne.n	8006d36 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	e853 3f00 	ldrex	r3, [r3]
 8006cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f023 0310 	bic.w	r3, r3, #16
 8006cf2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d00:	6979      	ldr	r1, [r7, #20]
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	e841 2300 	strex	r3, r2, [r1]
 8006d08:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1e6      	bne.n	8006cde <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	f003 0310 	and.w	r3, r3, #16
 8006d1a:	2b10      	cmp	r3, #16
 8006d1c:	d103      	bne.n	8006d26 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2210      	movs	r2, #16
 8006d24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fe ffd0 	bl	8005cd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d34:	e00b      	b.n	8006d4e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7fa fc28 	bl	800158c <HAL_UART_RxCpltCallback>
}
 8006d3c:	e007      	b.n	8006d4e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	699a      	ldr	r2, [r3, #24]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0208 	orr.w	r2, r2, #8
 8006d4c:	619a      	str	r2, [r3, #24]
}
 8006d4e:	bf00      	nop
 8006d50:	3770      	adds	r7, #112	; 0x70
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	40008000 	.word	0x40008000

08006d5c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b0ac      	sub	sp, #176	; 0xb0
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d6a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	69db      	ldr	r3, [r3, #28]
 8006d74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d92:	2b22      	cmp	r3, #34	; 0x22
 8006d94:	f040 8182 	bne.w	800709c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d9e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006da2:	e125      	b.n	8006ff0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006dae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006db2:	b2d9      	uxtb	r1, r3
 8006db4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbe:	400a      	ands	r2, r1
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dee:	f003 0307 	and.w	r3, r3, #7
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d053      	beq.n	8006e9e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d011      	beq.n	8006e26 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00b      	beq.n	8006e26 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2201      	movs	r2, #1
 8006e14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e1c:	f043 0201 	orr.w	r2, r3, #1
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d011      	beq.n	8006e56 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006e32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00b      	beq.n	8006e56 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2202      	movs	r2, #2
 8006e44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4c:	f043 0204 	orr.w	r2, r3, #4
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e5a:	f003 0304 	and.w	r3, r3, #4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d011      	beq.n	8006e86 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00b      	beq.n	8006e86 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2204      	movs	r2, #4
 8006e74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7c:	f043 0202 	orr.w	r2, r3, #2
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d006      	beq.n	8006e9e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7fa fb71 	bl	8001578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f040 80a2 	bne.w	8006ff0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ece:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ed0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006ed4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e4      	bne.n	8006eac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ef8:	f023 0301 	bic.w	r3, r3, #1
 8006efc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3308      	adds	r3, #8
 8006f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f0a:	66ba      	str	r2, [r7, #104]	; 0x68
 8006f0c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006f10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e1      	bne.n	8006ee2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a5f      	ldr	r2, [pc, #380]	; (80070b4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d021      	beq.n	8006f80 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d01a      	beq.n	8006f80 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f6c:	657b      	str	r3, [r7, #84]	; 0x54
 8006f6e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e4      	bne.n	8006f4a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d130      	bne.n	8006fea <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9e:	f023 0310 	bic.w	r3, r3, #16
 8006fa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e4      	bne.n	8006f8e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	f003 0310 	and.w	r3, r3, #16
 8006fce:	2b10      	cmp	r3, #16
 8006fd0:	d103      	bne.n	8006fda <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2210      	movs	r2, #16
 8006fd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fe fe76 	bl	8005cd4 <HAL_UARTEx_RxEventCallback>
 8006fe8:	e002      	b.n	8006ff0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7fa face 	bl	800158c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ff0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d006      	beq.n	8007006 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ffc:	f003 0320 	and.w	r3, r3, #32
 8007000:	2b00      	cmp	r3, #0
 8007002:	f47f aecf 	bne.w	8006da4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800700c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007010:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007014:	2b00      	cmp	r3, #0
 8007016:	d049      	beq.n	80070ac <UART_RxISR_8BIT_FIFOEN+0x350>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800701e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007022:	429a      	cmp	r2, r3
 8007024:	d242      	bcs.n	80070ac <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3308      	adds	r3, #8
 800702c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	e853 3f00 	ldrex	r3, [r3]
 8007034:	61fb      	str	r3, [r7, #28]
   return(result);
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800703c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800704a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007052:	e841 2300 	strex	r3, r2, [r1]
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1e3      	bne.n	8007026 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a15      	ldr	r2, [pc, #84]	; (80070b8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007062:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	60bb      	str	r3, [r7, #8]
   return(result);
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f043 0320 	orr.w	r3, r3, #32
 8007078:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007086:	61bb      	str	r3, [r7, #24]
 8007088:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6979      	ldr	r1, [r7, #20]
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	613b      	str	r3, [r7, #16]
   return(result);
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e4      	bne.n	8007064 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800709a:	e007      	b.n	80070ac <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699a      	ldr	r2, [r3, #24]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0208 	orr.w	r2, r2, #8
 80070aa:	619a      	str	r2, [r3, #24]
}
 80070ac:	bf00      	nop
 80070ae:	37b0      	adds	r7, #176	; 0xb0
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	40008000 	.word	0x40008000
 80070b8:	080069ed 	.word	0x080069ed

080070bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b0ae      	sub	sp, #184	; 0xb8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80070ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070f2:	2b22      	cmp	r3, #34	; 0x22
 80070f4:	f040 8186 	bne.w	8007404 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007102:	e129      	b.n	8007358 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007116:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800711a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800711e:	4013      	ands	r3, r2
 8007120:	b29a      	uxth	r2, r3
 8007122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007126:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712c:	1c9a      	adds	r2, r3, #2
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800714e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	2b00      	cmp	r3, #0
 8007158:	d053      	beq.n	8007202 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800715a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d011      	beq.n	800718a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800716a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00b      	beq.n	800718a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2201      	movs	r2, #1
 8007178:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007180:	f043 0201 	orr.w	r2, r3, #1
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800718a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d011      	beq.n	80071ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00b      	beq.n	80071ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2202      	movs	r2, #2
 80071a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b0:	f043 0204 	orr.w	r2, r3, #4
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d011      	beq.n	80071ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 80071c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00b      	beq.n	80071ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2204      	movs	r2, #4
 80071d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e0:	f043 0202 	orr.w	r2, r3, #2
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d006      	beq.n	8007202 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7fa f9bf 	bl	8001578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007208:	b29b      	uxth	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	f040 80a4 	bne.w	8007358 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800721e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007232:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007236:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800723a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1e2      	bne.n	8007210 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3308      	adds	r3, #8
 8007250:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800725a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800725c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3308      	adds	r3, #8
 800726e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007272:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007274:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007278:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e1      	bne.n	800724a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a5f      	ldr	r2, [pc, #380]	; (800741c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d021      	beq.n	80072e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d01a      	beq.n	80072e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80072d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e4      	bne.n	80072b2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d130      	bne.n	8007352 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fe:	e853 3f00 	ldrex	r3, [r3]
 8007302:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007306:	f023 0310 	bic.w	r3, r3, #16
 800730a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007318:	647b      	str	r3, [r7, #68]	; 0x44
 800731a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800731e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e4      	bne.n	80072f6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	f003 0310 	and.w	r3, r3, #16
 8007336:	2b10      	cmp	r3, #16
 8007338:	d103      	bne.n	8007342 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2210      	movs	r2, #16
 8007340:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7fe fcc2 	bl	8005cd4 <HAL_UARTEx_RxEventCallback>
 8007350:	e002      	b.n	8007358 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7fa f91a 	bl	800158c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007358:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800735c:	2b00      	cmp	r3, #0
 800735e:	d006      	beq.n	800736e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007360:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007364:	f003 0320 	and.w	r3, r3, #32
 8007368:	2b00      	cmp	r3, #0
 800736a:	f47f aecb 	bne.w	8007104 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007374:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007378:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800737c:	2b00      	cmp	r3, #0
 800737e:	d049      	beq.n	8007414 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007386:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800738a:	429a      	cmp	r2, r3
 800738c:	d242      	bcs.n	8007414 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3308      	adds	r3, #8
 8007394:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	623b      	str	r3, [r7, #32]
   return(result);
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3308      	adds	r3, #8
 80073ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80073b2:	633a      	str	r2, [r7, #48]	; 0x30
 80073b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e3      	bne.n	800738e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a15      	ldr	r2, [pc, #84]	; (8007420 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80073ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f043 0320 	orr.w	r3, r3, #32
 80073e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073ee:	61fb      	str	r3, [r7, #28]
 80073f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	69b9      	ldr	r1, [r7, #24]
 80073f4:	69fa      	ldr	r2, [r7, #28]
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	617b      	str	r3, [r7, #20]
   return(result);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e4      	bne.n	80073cc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007402:	e007      	b.n	8007414 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0208 	orr.w	r2, r2, #8
 8007412:	619a      	str	r2, [r3, #24]
}
 8007414:	bf00      	nop
 8007416:	37b8      	adds	r7, #184	; 0xb8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	40008000 	.word	0x40008000
 8007420:	08006ba5 	.word	0x08006ba5

08007424 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800746e:	2b01      	cmp	r3, #1
 8007470:	d101      	bne.n	8007476 <HAL_UARTEx_DisableFifoMode+0x16>
 8007472:	2302      	movs	r3, #2
 8007474:	e027      	b.n	80074c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2224      	movs	r2, #36	; 0x24
 8007482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0201 	bic.w	r2, r2, #1
 800749c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d101      	bne.n	80074ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074e6:	2302      	movs	r3, #2
 80074e8:	e02d      	b.n	8007546 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2224      	movs	r2, #36	; 0x24
 80074f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0201 	bic.w	r2, r2, #1
 8007510:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f850 	bl	80075cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2220      	movs	r2, #32
 8007538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800755e:	2b01      	cmp	r3, #1
 8007560:	d101      	bne.n	8007566 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007562:	2302      	movs	r3, #2
 8007564:	e02d      	b.n	80075c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2224      	movs	r2, #36	; 0x24
 8007572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 0201 	bic.w	r2, r2, #1
 800758c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f812 	bl	80075cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2220      	movs	r2, #32
 80075b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d108      	bne.n	80075ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075ec:	e031      	b.n	8007652 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075ee:	2308      	movs	r3, #8
 80075f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075f2:	2308      	movs	r3, #8
 80075f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	0e5b      	lsrs	r3, r3, #25
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	f003 0307 	and.w	r3, r3, #7
 8007604:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	0f5b      	lsrs	r3, r3, #29
 800760e:	b2db      	uxtb	r3, r3
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	7b3a      	ldrb	r2, [r7, #12]
 800761a:	4911      	ldr	r1, [pc, #68]	; (8007660 <UARTEx_SetNbDataToProcess+0x94>)
 800761c:	5c8a      	ldrb	r2, [r1, r2]
 800761e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007622:	7b3a      	ldrb	r2, [r7, #12]
 8007624:	490f      	ldr	r1, [pc, #60]	; (8007664 <UARTEx_SetNbDataToProcess+0x98>)
 8007626:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007628:	fb93 f3f2 	sdiv	r3, r3, r2
 800762c:	b29a      	uxth	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	7b7a      	ldrb	r2, [r7, #13]
 8007638:	4909      	ldr	r1, [pc, #36]	; (8007660 <UARTEx_SetNbDataToProcess+0x94>)
 800763a:	5c8a      	ldrb	r2, [r1, r2]
 800763c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007640:	7b7a      	ldrb	r2, [r7, #13]
 8007642:	4908      	ldr	r1, [pc, #32]	; (8007664 <UARTEx_SetNbDataToProcess+0x98>)
 8007644:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007646:	fb93 f3f2 	sdiv	r3, r3, r2
 800764a:	b29a      	uxth	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007652:	bf00      	nop
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	0800cb44 	.word	0x0800cb44
 8007664:	0800cb4c 	.word	0x0800cb4c

08007668 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007678:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800767c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	b29a      	uxth	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007696:	b480      	push	{r7}
 8007698:	b085      	sub	sp, #20
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800769e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80076a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	43db      	mvns	r3, r3
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	4013      	ands	r3, r2
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	1d3b      	adds	r3, r7, #4
 80076d6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007708:	b480      	push	{r7}
 800770a:	b09d      	sub	sp, #116	; 0x74
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29b      	uxth	r3, r3
 8007726:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800772a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	78db      	ldrb	r3, [r3, #3]
 8007736:	2b03      	cmp	r3, #3
 8007738:	d81f      	bhi.n	800777a <USB_ActivateEndpoint+0x72>
 800773a:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <USB_ActivateEndpoint+0x38>)
 800773c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007740:	08007751 	.word	0x08007751
 8007744:	0800776d 	.word	0x0800776d
 8007748:	08007783 	.word	0x08007783
 800774c:	0800775f 	.word	0x0800775f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007750:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007758:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800775c:	e012      	b.n	8007784 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800775e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007762:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007766:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800776a:	e00b      	b.n	8007784 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800776c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007770:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007774:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007778:	e004      	b.n	8007784 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007780:	e000      	b.n	8007784 <USB_ActivateEndpoint+0x7c>
      break;
 8007782:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	441a      	add	r2, r3
 800778e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800779a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800779e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	b21b      	sxth	r3, r3
 80077b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077be:	b21a      	sxth	r2, r3
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	b21b      	sxth	r3, r3
 80077c6:	4313      	orrs	r3, r2
 80077c8:	b21b      	sxth	r3, r3
 80077ca:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	441a      	add	r2, r3
 80077d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80077dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	7b1b      	ldrb	r3, [r3, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f040 8178 	bne.w	8007aea <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	785b      	ldrb	r3, [r3, #1]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 8084 	beq.w	800790c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	61bb      	str	r3, [r7, #24]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800780e:	b29b      	uxth	r3, r3
 8007810:	461a      	mov	r2, r3
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	4413      	add	r3, r2
 8007816:	61bb      	str	r3, [r7, #24]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	00da      	lsls	r2, r3, #3
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	4413      	add	r3, r2
 8007822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	88db      	ldrh	r3, [r3, #6]
 800782c:	085b      	lsrs	r3, r3, #1
 800782e:	b29b      	uxth	r3, r3
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	b29a      	uxth	r2, r3
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	827b      	strh	r3, [r7, #18]
 8007846:	8a7b      	ldrh	r3, [r7, #18]
 8007848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01b      	beq.n	8007888 <USB_ActivateEndpoint+0x180>
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007866:	823b      	strh	r3, [r7, #16]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	441a      	add	r2, r3
 8007872:	8a3b      	ldrh	r3, [r7, #16]
 8007874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800787c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007880:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007884:	b29b      	uxth	r3, r3
 8007886:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	78db      	ldrb	r3, [r3, #3]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d020      	beq.n	80078d2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29b      	uxth	r3, r3
 800789e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a6:	81bb      	strh	r3, [r7, #12]
 80078a8:	89bb      	ldrh	r3, [r7, #12]
 80078aa:	f083 0320 	eor.w	r3, r3, #32
 80078ae:	81bb      	strh	r3, [r7, #12]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	441a      	add	r2, r3
 80078ba:	89bb      	ldrh	r3, [r7, #12]
 80078bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	8013      	strh	r3, [r2, #0]
 80078d0:	e2d5      	b.n	8007e7e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	b29b      	uxth	r3, r3
 80078e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e8:	81fb      	strh	r3, [r7, #14]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	441a      	add	r2, r3
 80078f4:	89fb      	ldrh	r3, [r7, #14]
 80078f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007906:	b29b      	uxth	r3, r3
 8007908:	8013      	strh	r3, [r2, #0]
 800790a:	e2b8      	b.n	8007e7e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	633b      	str	r3, [r7, #48]	; 0x30
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007916:	b29b      	uxth	r3, r3
 8007918:	461a      	mov	r2, r3
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	4413      	add	r3, r2
 800791e:	633b      	str	r3, [r7, #48]	; 0x30
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	00da      	lsls	r2, r3, #3
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	4413      	add	r3, r2
 800792a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800792e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	88db      	ldrh	r3, [r3, #6]
 8007934:	085b      	lsrs	r3, r3, #1
 8007936:	b29b      	uxth	r3, r3
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	62bb      	str	r3, [r7, #40]	; 0x28
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800794a:	b29b      	uxth	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	4413      	add	r3, r2
 8007952:	62bb      	str	r3, [r7, #40]	; 0x28
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	00da      	lsls	r2, r3, #3
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	4413      	add	r3, r2
 800795e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	b29b      	uxth	r3, r3
 800796a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800796e:	b29a      	uxth	r2, r3
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	801a      	strh	r2, [r3, #0]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	2b3e      	cmp	r3, #62	; 0x3e
 800797a:	d91d      	bls.n	80079b8 <USB_ActivateEndpoint+0x2b0>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	095b      	lsrs	r3, r3, #5
 8007982:	66bb      	str	r3, [r7, #104]	; 0x68
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	f003 031f 	and.w	r3, r3, #31
 800798c:	2b00      	cmp	r3, #0
 800798e:	d102      	bne.n	8007996 <USB_ActivateEndpoint+0x28e>
 8007990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007992:	3b01      	subs	r3, #1
 8007994:	66bb      	str	r3, [r7, #104]	; 0x68
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29a      	uxth	r2, r3
 800799c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800799e:	b29b      	uxth	r3, r3
 80079a0:	029b      	lsls	r3, r3, #10
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	4313      	orrs	r3, r2
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	801a      	strh	r2, [r3, #0]
 80079b6:	e026      	b.n	8007a06 <USB_ActivateEndpoint+0x2fe>
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <USB_ActivateEndpoint+0x2ce>
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	801a      	strh	r2, [r3, #0]
 80079d4:	e017      	b.n	8007a06 <USB_ActivateEndpoint+0x2fe>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	085b      	lsrs	r3, r3, #1
 80079dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <USB_ActivateEndpoint+0x2e8>
 80079ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079ec:	3301      	adds	r3, #1
 80079ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	029b      	lsls	r3, r3, #10
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	4313      	orrs	r3, r2
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	847b      	strh	r3, [r7, #34]	; 0x22
 8007a14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d01b      	beq.n	8007a56 <USB_ActivateEndpoint+0x34e>
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a34:	843b      	strh	r3, [r7, #32]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	441a      	add	r2, r3
 8007a40:	8c3b      	ldrh	r3, [r7, #32]
 8007a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d124      	bne.n	8007aa8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a74:	83bb      	strh	r3, [r7, #28]
 8007a76:	8bbb      	ldrh	r3, [r7, #28]
 8007a78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a7c:	83bb      	strh	r3, [r7, #28]
 8007a7e:	8bbb      	ldrh	r3, [r7, #28]
 8007a80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a84:	83bb      	strh	r3, [r7, #28]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	441a      	add	r2, r3
 8007a90:	8bbb      	ldrh	r3, [r7, #28]
 8007a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	8013      	strh	r3, [r2, #0]
 8007aa6:	e1ea      	b.n	8007e7e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007abe:	83fb      	strh	r3, [r7, #30]
 8007ac0:	8bfb      	ldrh	r3, [r7, #30]
 8007ac2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ac6:	83fb      	strh	r3, [r7, #30]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	441a      	add	r2, r3
 8007ad2:	8bfb      	ldrh	r3, [r7, #30]
 8007ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	8013      	strh	r3, [r2, #0]
 8007ae8:	e1c9      	b.n	8007e7e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	78db      	ldrb	r3, [r3, #3]
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d11e      	bne.n	8007b30 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b08:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	441a      	add	r2, r3
 8007b16:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b22:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	8013      	strh	r3, [r2, #0]
 8007b2e:	e01d      	b.n	8007b6c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b46:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	441a      	add	r2, r3
 8007b54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	461a      	mov	r2, r3
 8007b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b7c:	4413      	add	r3, r2
 8007b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	00da      	lsls	r2, r3, #3
 8007b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	891b      	ldrh	r3, [r3, #8]
 8007b94:	085b      	lsrs	r3, r3, #1
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b9e:	801a      	strh	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	657b      	str	r3, [r7, #84]	; 0x54
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb0:	4413      	add	r3, r2
 8007bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	00da      	lsls	r2, r3, #3
 8007bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bc2:	653b      	str	r3, [r7, #80]	; 0x50
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	895b      	ldrh	r3, [r3, #10]
 8007bc8:	085b      	lsrs	r3, r3, #1
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	785b      	ldrb	r3, [r3, #1]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f040 8093 	bne.w	8007d04 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007bee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d01b      	beq.n	8007c32 <USB_ActivateEndpoint+0x52a>
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c10:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	441a      	add	r2, r3
 8007c1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007c40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d01b      	beq.n	8007c82 <USB_ActivateEndpoint+0x57a>
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c60:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	441a      	add	r2, r3
 8007c6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c98:	873b      	strh	r3, [r7, #56]	; 0x38
 8007c9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ca0:	873b      	strh	r3, [r7, #56]	; 0x38
 8007ca2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ca4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ca8:	873b      	strh	r3, [r7, #56]	; 0x38
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	441a      	add	r2, r3
 8007cb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	441a      	add	r2, r3
 8007cec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	8013      	strh	r3, [r2, #0]
 8007d02:	e0bc      	b.n	8007e7e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	881b      	ldrh	r3, [r3, #0]
 8007d10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007d14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01d      	beq.n	8007d5c <USB_ActivateEndpoint+0x654>
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d36:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	441a      	add	r2, r3
 8007d44:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007d6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01d      	beq.n	8007db4 <USB_ActivateEndpoint+0x6ac>
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	441a      	add	r2, r3
 8007d9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	78db      	ldrb	r3, [r3, #3]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d024      	beq.n	8007e06 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dd2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007dd6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007dda:	f083 0320 	eor.w	r3, r3, #32
 8007dde:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	441a      	add	r2, r3
 8007dec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	8013      	strh	r3, [r2, #0]
 8007e04:	e01d      	b.n	8007e42 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e1c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	441a      	add	r2, r3
 8007e2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	441a      	add	r2, r3
 8007e66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007e7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3774      	adds	r7, #116	; 0x74
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop

08007e90 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b08d      	sub	sp, #52	; 0x34
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	7b1b      	ldrb	r3, [r3, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f040 808e 	bne.w	8007fc0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	785b      	ldrb	r3, [r3, #1]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d044      	beq.n	8007f36 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	81bb      	strh	r3, [r7, #12]
 8007eba:	89bb      	ldrh	r3, [r7, #12]
 8007ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d01b      	beq.n	8007efc <USB_DeactivateEndpoint+0x6c>
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eda:	817b      	strh	r3, [r7, #10]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	441a      	add	r2, r3
 8007ee6:	897b      	ldrh	r3, [r7, #10]
 8007ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ef4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f12:	813b      	strh	r3, [r7, #8]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	441a      	add	r2, r3
 8007f1e:	893b      	ldrh	r3, [r7, #8]
 8007f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	8013      	strh	r3, [r2, #0]
 8007f34:	e192      	b.n	800825c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	827b      	strh	r3, [r7, #18]
 8007f44:	8a7b      	ldrh	r3, [r7, #18]
 8007f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d01b      	beq.n	8007f86 <USB_DeactivateEndpoint+0xf6>
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f64:	823b      	strh	r3, [r7, #16]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	441a      	add	r2, r3
 8007f70:	8a3b      	ldrh	r3, [r7, #16]
 8007f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9c:	81fb      	strh	r3, [r7, #14]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	441a      	add	r2, r3
 8007fa8:	89fb      	ldrh	r3, [r7, #14]
 8007faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	8013      	strh	r3, [r2, #0]
 8007fbe:	e14d      	b.n	800825c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	785b      	ldrb	r3, [r3, #1]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f040 80a5 	bne.w	8008114 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	843b      	strh	r3, [r7, #32]
 8007fd8:	8c3b      	ldrh	r3, [r7, #32]
 8007fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d01b      	beq.n	800801a <USB_DeactivateEndpoint+0x18a>
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff8:	83fb      	strh	r3, [r7, #30]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	441a      	add	r2, r3
 8008004:	8bfb      	ldrh	r3, [r7, #30]
 8008006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800800a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800800e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008016:	b29b      	uxth	r3, r3
 8008018:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	83bb      	strh	r3, [r7, #28]
 8008028:	8bbb      	ldrh	r3, [r7, #28]
 800802a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802e:	2b00      	cmp	r3, #0
 8008030:	d01b      	beq.n	800806a <USB_DeactivateEndpoint+0x1da>
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	b29b      	uxth	r3, r3
 8008040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008048:	837b      	strh	r3, [r7, #26]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	441a      	add	r2, r3
 8008054:	8b7b      	ldrh	r3, [r7, #26]
 8008056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800805a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800805e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008062:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008066:	b29b      	uxth	r3, r3
 8008068:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	b29b      	uxth	r3, r3
 8008078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800807c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008080:	833b      	strh	r3, [r7, #24]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	441a      	add	r2, r3
 800808c:	8b3b      	ldrh	r3, [r7, #24]
 800808e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800809a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800809e:	b29b      	uxth	r3, r3
 80080a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b8:	82fb      	strh	r3, [r7, #22]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	441a      	add	r2, r3
 80080c4:	8afb      	ldrh	r3, [r7, #22]
 80080c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080f0:	82bb      	strh	r3, [r7, #20]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	441a      	add	r2, r3
 80080fc:	8abb      	ldrh	r3, [r7, #20]
 80080fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800810a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810e:	b29b      	uxth	r3, r3
 8008110:	8013      	strh	r3, [r2, #0]
 8008112:	e0a3      	b.n	800825c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	881b      	ldrh	r3, [r3, #0]
 8008120:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008122:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01b      	beq.n	8008164 <USB_DeactivateEndpoint+0x2d4>
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	881b      	ldrh	r3, [r3, #0]
 8008138:	b29b      	uxth	r3, r3
 800813a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800813e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008142:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	441a      	add	r2, r3
 800814e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800815c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008160:	b29b      	uxth	r3, r3
 8008162:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008172:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008178:	2b00      	cmp	r3, #0
 800817a:	d01b      	beq.n	80081b4 <USB_DeactivateEndpoint+0x324>
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	b29b      	uxth	r3, r3
 800818a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800818e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008192:	853b      	strh	r3, [r7, #40]	; 0x28
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	441a      	add	r2, r3
 800819e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	441a      	add	r2, r3
 80081d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008202:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	441a      	add	r2, r3
 800820e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800821c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008220:	b29b      	uxth	r3, r3
 8008222:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	b29b      	uxth	r3, r3
 8008232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823a:	847b      	strh	r3, [r7, #34]	; 0x22
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	441a      	add	r2, r3
 8008246:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800824c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008258:	b29b      	uxth	r3, r3
 800825a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3734      	adds	r7, #52	; 0x34
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b0c2      	sub	sp, #264	; 0x108
 800826e:	af00      	add	r7, sp, #0
 8008270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008278:	6018      	str	r0, [r3, #0]
 800827a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008282:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	785b      	ldrb	r3, [r3, #1]
 8008290:	2b01      	cmp	r3, #1
 8008292:	f040 86b7 	bne.w	8009004 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	699a      	ldr	r2, [r3, #24]
 80082a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d908      	bls.n	80082c4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80082b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80082c2:	e007      	b.n	80082d4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80082c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80082d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	7b1b      	ldrb	r3, [r3, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d13a      	bne.n	800835a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80082e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6959      	ldr	r1, [r3, #20]
 80082f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	88da      	ldrh	r2, [r3, #6]
 80082fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008300:	b29b      	uxth	r3, r3
 8008302:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008306:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800830a:	6800      	ldr	r0, [r0, #0]
 800830c:	f001 fc98 	bl	8009c40 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008314:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	613b      	str	r3, [r7, #16]
 800831c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008320:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800832a:	b29b      	uxth	r3, r3
 800832c:	461a      	mov	r2, r3
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	4413      	add	r3, r2
 8008332:	613b      	str	r3, [r7, #16]
 8008334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	00da      	lsls	r2, r3, #3
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	4413      	add	r3, r2
 8008346:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008350:	b29a      	uxth	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	801a      	strh	r2, [r3, #0]
 8008356:	f000 be1f 	b.w	8008f98 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800835a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800835e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	78db      	ldrb	r3, [r3, #3]
 8008366:	2b02      	cmp	r3, #2
 8008368:	f040 8462 	bne.w	8008c30 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800836c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6a1a      	ldr	r2, [r3, #32]
 8008378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	429a      	cmp	r2, r3
 8008386:	f240 83df 	bls.w	8008b48 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800838a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80083b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	441a      	add	r2, r3
 80083ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80083d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083da:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80083de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80083e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6a1a      	ldr	r2, [r3, #32]
 80083f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f6:	1ad2      	subs	r2, r2, r3
 80083f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	b29b      	uxth	r3, r3
 8008422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 81c7 	beq.w	80087ba <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800842c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008430:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	633b      	str	r3, [r7, #48]	; 0x30
 8008438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800843c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	785b      	ldrb	r3, [r3, #1]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d177      	bne.n	8008538 <USB_EPStartXfer+0x2ce>
 8008448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	62bb      	str	r3, [r7, #40]	; 0x28
 8008454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008458:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008462:	b29b      	uxth	r3, r3
 8008464:	461a      	mov	r2, r3
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	4413      	add	r3, r2
 800846a:	62bb      	str	r3, [r7, #40]	; 0x28
 800846c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	00da      	lsls	r2, r3, #3
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	4413      	add	r3, r2
 800847e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008482:	627b      	str	r3, [r7, #36]	; 0x24
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	881b      	ldrh	r3, [r3, #0]
 8008488:	b29b      	uxth	r3, r3
 800848a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800848e:	b29a      	uxth	r2, r3
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	801a      	strh	r2, [r3, #0]
 8008494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008498:	2b3e      	cmp	r3, #62	; 0x3e
 800849a:	d921      	bls.n	80084e0 <USB_EPStartXfer+0x276>
 800849c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084a0:	095b      	lsrs	r3, r3, #5
 80084a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80084a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084aa:	f003 031f 	and.w	r3, r3, #31
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d104      	bne.n	80084bc <USB_EPStartXfer+0x252>
 80084b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80084b6:	3b01      	subs	r3, #1
 80084b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	029b      	lsls	r3, r3, #10
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	4313      	orrs	r3, r2
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d8:	b29a      	uxth	r2, r3
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	801a      	strh	r2, [r3, #0]
 80084de:	e050      	b.n	8008582 <USB_EPStartXfer+0x318>
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10a      	bne.n	80084fe <USB_EPStartXfer+0x294>
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	801a      	strh	r2, [r3, #0]
 80084fc:	e041      	b.n	8008582 <USB_EPStartXfer+0x318>
 80084fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008502:	085b      	lsrs	r3, r3, #1
 8008504:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	2b00      	cmp	r3, #0
 8008512:	d004      	beq.n	800851e <USB_EPStartXfer+0x2b4>
 8008514:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008518:	3301      	adds	r3, #1
 800851a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	b29a      	uxth	r2, r3
 8008524:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008528:	b29b      	uxth	r3, r3
 800852a:	029b      	lsls	r3, r3, #10
 800852c:	b29b      	uxth	r3, r3
 800852e:	4313      	orrs	r3, r2
 8008530:	b29a      	uxth	r2, r3
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	801a      	strh	r2, [r3, #0]
 8008536:	e024      	b.n	8008582 <USB_EPStartXfer+0x318>
 8008538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800853c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	785b      	ldrb	r3, [r3, #1]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d11c      	bne.n	8008582 <USB_EPStartXfer+0x318>
 8008548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800854c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008556:	b29b      	uxth	r3, r3
 8008558:	461a      	mov	r2, r3
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	4413      	add	r3, r2
 800855e:	633b      	str	r3, [r7, #48]	; 0x30
 8008560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	00da      	lsls	r2, r3, #3
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	4413      	add	r3, r2
 8008572:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800857c:	b29a      	uxth	r2, r3
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	895b      	ldrh	r3, [r3, #10]
 800858e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6959      	ldr	r1, [r3, #20]
 800859e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80085a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80085ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80085b0:	6800      	ldr	r0, [r0, #0]
 80085b2:	f001 fb45 	bl	8009c40 <USB_WritePMA>
            ep->xfer_buff += len;
 80085b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	695a      	ldr	r2, [r3, #20]
 80085c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c6:	441a      	add	r2, r3
 80085c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80085d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6a1a      	ldr	r2, [r3, #32]
 80085e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d90f      	bls.n	8008610 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80085f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	6a1a      	ldr	r2, [r3, #32]
 80085fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008600:	1ad2      	subs	r2, r2, r3
 8008602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	621a      	str	r2, [r3, #32]
 800860e:	e00e      	b.n	800862e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2200      	movs	r2, #0
 800862c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800862e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	785b      	ldrb	r3, [r3, #1]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d177      	bne.n	800872e <USB_EPStartXfer+0x4c4>
 800863e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	61bb      	str	r3, [r7, #24]
 800864a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800864e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008658:	b29b      	uxth	r3, r3
 800865a:	461a      	mov	r2, r3
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	4413      	add	r3, r2
 8008660:	61bb      	str	r3, [r7, #24]
 8008662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	00da      	lsls	r2, r3, #3
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	4413      	add	r3, r2
 8008674:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008678:	617b      	str	r3, [r7, #20]
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	b29b      	uxth	r3, r3
 8008680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008684:	b29a      	uxth	r2, r3
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	801a      	strh	r2, [r3, #0]
 800868a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800868e:	2b3e      	cmp	r3, #62	; 0x3e
 8008690:	d921      	bls.n	80086d6 <USB_EPStartXfer+0x46c>
 8008692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008696:	095b      	lsrs	r3, r3, #5
 8008698:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800869c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086a0:	f003 031f 	and.w	r3, r3, #31
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d104      	bne.n	80086b2 <USB_EPStartXfer+0x448>
 80086a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086ac:	3b01      	subs	r3, #1
 80086ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	881b      	ldrh	r3, [r3, #0]
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086bc:	b29b      	uxth	r3, r3
 80086be:	029b      	lsls	r3, r3, #10
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	4313      	orrs	r3, r2
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	801a      	strh	r2, [r3, #0]
 80086d4:	e056      	b.n	8008784 <USB_EPStartXfer+0x51a>
 80086d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10a      	bne.n	80086f4 <USB_EPStartXfer+0x48a>
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	801a      	strh	r2, [r3, #0]
 80086f2:	e047      	b.n	8008784 <USB_EPStartXfer+0x51a>
 80086f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f8:	085b      	lsrs	r3, r3, #1
 80086fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	2b00      	cmp	r3, #0
 8008708:	d004      	beq.n	8008714 <USB_EPStartXfer+0x4aa>
 800870a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800870e:	3301      	adds	r3, #1
 8008710:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	b29a      	uxth	r2, r3
 800871a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800871e:	b29b      	uxth	r3, r3
 8008720:	029b      	lsls	r3, r3, #10
 8008722:	b29b      	uxth	r3, r3
 8008724:	4313      	orrs	r3, r2
 8008726:	b29a      	uxth	r2, r3
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	801a      	strh	r2, [r3, #0]
 800872c:	e02a      	b.n	8008784 <USB_EPStartXfer+0x51a>
 800872e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d122      	bne.n	8008784 <USB_EPStartXfer+0x51a>
 800873e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008742:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	623b      	str	r3, [r7, #32]
 800874a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800874e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008758:	b29b      	uxth	r3, r3
 800875a:	461a      	mov	r2, r3
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	4413      	add	r3, r2
 8008760:	623b      	str	r3, [r7, #32]
 8008762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	00da      	lsls	r2, r3, #3
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	4413      	add	r3, r2
 8008774:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008778:	61fb      	str	r3, [r7, #28]
 800877a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800877e:	b29a      	uxth	r2, r3
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	891b      	ldrh	r3, [r3, #8]
 8008790:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6959      	ldr	r1, [r3, #20]
 80087a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80087aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80087ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80087b2:	6800      	ldr	r0, [r0, #0]
 80087b4:	f001 fa44 	bl	8009c40 <USB_WritePMA>
 80087b8:	e3ee      	b.n	8008f98 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80087ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	785b      	ldrb	r3, [r3, #1]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d177      	bne.n	80088ba <USB_EPStartXfer+0x650>
 80087ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80087d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	461a      	mov	r2, r3
 80087e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ea:	4413      	add	r3, r2
 80087ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80087ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	00da      	lsls	r2, r3, #3
 80087fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087fe:	4413      	add	r3, r2
 8008800:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008804:	647b      	str	r3, [r7, #68]	; 0x44
 8008806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008810:	b29a      	uxth	r2, r3
 8008812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008814:	801a      	strh	r2, [r3, #0]
 8008816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800881a:	2b3e      	cmp	r3, #62	; 0x3e
 800881c:	d921      	bls.n	8008862 <USB_EPStartXfer+0x5f8>
 800881e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008822:	095b      	lsrs	r3, r3, #5
 8008824:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800882c:	f003 031f 	and.w	r3, r3, #31
 8008830:	2b00      	cmp	r3, #0
 8008832:	d104      	bne.n	800883e <USB_EPStartXfer+0x5d4>
 8008834:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008838:	3b01      	subs	r3, #1
 800883a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800883e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	b29a      	uxth	r2, r3
 8008844:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008848:	b29b      	uxth	r3, r3
 800884a:	029b      	lsls	r3, r3, #10
 800884c:	b29b      	uxth	r3, r3
 800884e:	4313      	orrs	r3, r2
 8008850:	b29b      	uxth	r3, r3
 8008852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800885a:	b29a      	uxth	r2, r3
 800885c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800885e:	801a      	strh	r2, [r3, #0]
 8008860:	e056      	b.n	8008910 <USB_EPStartXfer+0x6a6>
 8008862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10a      	bne.n	8008880 <USB_EPStartXfer+0x616>
 800886a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	b29b      	uxth	r3, r3
 8008870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008878:	b29a      	uxth	r2, r3
 800887a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800887c:	801a      	strh	r2, [r3, #0]
 800887e:	e047      	b.n	8008910 <USB_EPStartXfer+0x6a6>
 8008880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008884:	085b      	lsrs	r3, r3, #1
 8008886:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800888a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	2b00      	cmp	r3, #0
 8008894:	d004      	beq.n	80088a0 <USB_EPStartXfer+0x636>
 8008896:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800889a:	3301      	adds	r3, #1
 800889c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80088a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	029b      	lsls	r3, r3, #10
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	4313      	orrs	r3, r2
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088b6:	801a      	strh	r2, [r3, #0]
 80088b8:	e02a      	b.n	8008910 <USB_EPStartXfer+0x6a6>
 80088ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	785b      	ldrb	r3, [r3, #1]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d122      	bne.n	8008910 <USB_EPStartXfer+0x6a6>
 80088ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	653b      	str	r3, [r7, #80]	; 0x50
 80088d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	461a      	mov	r2, r3
 80088e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088ea:	4413      	add	r3, r2
 80088ec:	653b      	str	r3, [r7, #80]	; 0x50
 80088ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	00da      	lsls	r2, r3, #3
 80088fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088fe:	4413      	add	r3, r2
 8008900:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008904:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800890a:	b29a      	uxth	r2, r3
 800890c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800890e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	891b      	ldrh	r3, [r3, #8]
 800891c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6959      	ldr	r1, [r3, #20]
 800892c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008930:	b29b      	uxth	r3, r3
 8008932:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008936:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800893a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800893e:	6800      	ldr	r0, [r0, #0]
 8008940:	f001 f97e 	bl	8009c40 <USB_WritePMA>
            ep->xfer_buff += len;
 8008944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	695a      	ldr	r2, [r3, #20]
 8008950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008954:	441a      	add	r2, r3
 8008956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800895a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6a1a      	ldr	r2, [r3, #32]
 800896e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	429a      	cmp	r2, r3
 800897c:	d90f      	bls.n	800899e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800897e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6a1a      	ldr	r2, [r3, #32]
 800898a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800898e:	1ad2      	subs	r2, r2, r3
 8008990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	621a      	str	r2, [r3, #32]
 800899c:	e00e      	b.n	80089bc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800899e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80089ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2200      	movs	r2, #0
 80089ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80089bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	643b      	str	r3, [r7, #64]	; 0x40
 80089c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	785b      	ldrb	r3, [r3, #1]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d177      	bne.n	8008ac8 <USB_EPStartXfer+0x85e>
 80089d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80089e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f8:	4413      	add	r3, r2
 80089fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80089fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	00da      	lsls	r2, r3, #3
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a12:	637b      	str	r3, [r7, #52]	; 0x34
 8008a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a22:	801a      	strh	r2, [r3, #0]
 8008a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a28:	2b3e      	cmp	r3, #62	; 0x3e
 8008a2a:	d921      	bls.n	8008a70 <USB_EPStartXfer+0x806>
 8008a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a30:	095b      	lsrs	r3, r3, #5
 8008a32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a3a:	f003 031f 	and.w	r3, r3, #31
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d104      	bne.n	8008a4c <USB_EPStartXfer+0x7e2>
 8008a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a46:	3b01      	subs	r3, #1
 8008a48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	029b      	lsls	r3, r3, #10
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6c:	801a      	strh	r2, [r3, #0]
 8008a6e:	e050      	b.n	8008b12 <USB_EPStartXfer+0x8a8>
 8008a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10a      	bne.n	8008a8e <USB_EPStartXfer+0x824>
 8008a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8a:	801a      	strh	r2, [r3, #0]
 8008a8c:	e041      	b.n	8008b12 <USB_EPStartXfer+0x8a8>
 8008a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a92:	085b      	lsrs	r3, r3, #1
 8008a94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a9c:	f003 0301 	and.w	r3, r3, #1
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d004      	beq.n	8008aae <USB_EPStartXfer+0x844>
 8008aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	029b      	lsls	r3, r3, #10
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac4:	801a      	strh	r2, [r3, #0]
 8008ac6:	e024      	b.n	8008b12 <USB_EPStartXfer+0x8a8>
 8008ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	785b      	ldrb	r3, [r3, #1]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d11c      	bne.n	8008b12 <USB_EPStartXfer+0x8a8>
 8008ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008adc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	461a      	mov	r2, r3
 8008aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aec:	4413      	add	r3, r2
 8008aee:	643b      	str	r3, [r7, #64]	; 0x40
 8008af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	00da      	lsls	r2, r3, #3
 8008afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b00:	4413      	add	r3, r2
 8008b02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	895b      	ldrh	r3, [r3, #10]
 8008b1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6959      	ldr	r1, [r3, #20]
 8008b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008b38:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008b3c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008b40:	6800      	ldr	r0, [r0, #0]
 8008b42:	f001 f87d 	bl	8009c40 <USB_WritePMA>
 8008b46:	e227      	b.n	8008f98 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b7e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	441a      	add	r2, r3
 8008b9c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bd4:	4413      	add	r3, r2
 8008bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	00da      	lsls	r2, r3, #3
 8008be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008be8:	4413      	add	r3, r2
 8008bea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bee:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bf8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	891b      	ldrh	r3, [r3, #8]
 8008c06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6959      	ldr	r1, [r3, #20]
 8008c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008c20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008c24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008c28:	6800      	ldr	r0, [r0, #0]
 8008c2a:	f001 f809 	bl	8009c40 <USB_WritePMA>
 8008c2e:	e1b3      	b.n	8008f98 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6a1a      	ldr	r2, [r3, #32]
 8008c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c40:	1ad2      	subs	r2, r2, r3
 8008c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 80c6 	beq.w	8008e02 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	673b      	str	r3, [r7, #112]	; 0x70
 8008c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	785b      	ldrb	r3, [r3, #1]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d177      	bne.n	8008d82 <USB_EPStartXfer+0xb18>
 8008c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	461a      	mov	r2, r3
 8008cb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cb2:	4413      	add	r3, r2
 8008cb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	00da      	lsls	r2, r3, #3
 8008cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ccc:	667b      	str	r3, [r7, #100]	; 0x64
 8008cce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cd0:	881b      	ldrh	r3, [r3, #0]
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cdc:	801a      	strh	r2, [r3, #0]
 8008cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce2:	2b3e      	cmp	r3, #62	; 0x3e
 8008ce4:	d921      	bls.n	8008d2a <USB_EPStartXfer+0xac0>
 8008ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cea:	095b      	lsrs	r3, r3, #5
 8008cec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cf4:	f003 031f 	and.w	r3, r3, #31
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d104      	bne.n	8008d06 <USB_EPStartXfer+0xa9c>
 8008cfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d00:	3b01      	subs	r3, #1
 8008d02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008d06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	029b      	lsls	r3, r3, #10
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	4313      	orrs	r3, r2
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d26:	801a      	strh	r2, [r3, #0]
 8008d28:	e050      	b.n	8008dcc <USB_EPStartXfer+0xb62>
 8008d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10a      	bne.n	8008d48 <USB_EPStartXfer+0xade>
 8008d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d44:	801a      	strh	r2, [r3, #0]
 8008d46:	e041      	b.n	8008dcc <USB_EPStartXfer+0xb62>
 8008d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d4c:	085b      	lsrs	r3, r3, #1
 8008d4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d004      	beq.n	8008d68 <USB_EPStartXfer+0xafe>
 8008d5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d62:	3301      	adds	r3, #1
 8008d64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	029b      	lsls	r3, r3, #10
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d7e:	801a      	strh	r2, [r3, #0]
 8008d80:	e024      	b.n	8008dcc <USB_EPStartXfer+0xb62>
 8008d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	785b      	ldrb	r3, [r3, #1]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d11c      	bne.n	8008dcc <USB_EPStartXfer+0xb62>
 8008d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	461a      	mov	r2, r3
 8008da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008da6:	4413      	add	r3, r2
 8008da8:	673b      	str	r3, [r7, #112]	; 0x70
 8008daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	00da      	lsls	r2, r3, #3
 8008db8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dba:	4413      	add	r3, r2
 8008dbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008dc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	895b      	ldrh	r3, [r3, #10]
 8008dd8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6959      	ldr	r1, [r3, #20]
 8008de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008df2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008df6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008dfa:	6800      	ldr	r0, [r0, #0]
 8008dfc:	f000 ff20 	bl	8009c40 <USB_WritePMA>
 8008e00:	e0ca      	b.n	8008f98 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	785b      	ldrb	r3, [r3, #1]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d177      	bne.n	8008f02 <USB_EPStartXfer+0xc98>
 8008e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	461a      	mov	r2, r3
 8008e30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e32:	4413      	add	r3, r2
 8008e34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	00da      	lsls	r2, r3, #3
 8008e44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e46:	4413      	add	r3, r2
 8008e48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e5c:	801a      	strh	r2, [r3, #0]
 8008e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e62:	2b3e      	cmp	r3, #62	; 0x3e
 8008e64:	d921      	bls.n	8008eaa <USB_EPStartXfer+0xc40>
 8008e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e6a:	095b      	lsrs	r3, r3, #5
 8008e6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e74:	f003 031f 	and.w	r3, r3, #31
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d104      	bne.n	8008e86 <USB_EPStartXfer+0xc1c>
 8008e7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e80:	3b01      	subs	r3, #1
 8008e82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	029b      	lsls	r3, r3, #10
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	4313      	orrs	r3, r2
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ea6:	801a      	strh	r2, [r3, #0]
 8008ea8:	e05c      	b.n	8008f64 <USB_EPStartXfer+0xcfa>
 8008eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <USB_EPStartXfer+0xc5e>
 8008eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eb4:	881b      	ldrh	r3, [r3, #0]
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ec4:	801a      	strh	r2, [r3, #0]
 8008ec6:	e04d      	b.n	8008f64 <USB_EPStartXfer+0xcfa>
 8008ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ecc:	085b      	lsrs	r3, r3, #1
 8008ece:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d004      	beq.n	8008ee8 <USB_EPStartXfer+0xc7e>
 8008ede:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eea:	881b      	ldrh	r3, [r3, #0]
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	029b      	lsls	r3, r3, #10
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008efe:	801a      	strh	r2, [r3, #0]
 8008f00:	e030      	b.n	8008f64 <USB_EPStartXfer+0xcfa>
 8008f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d128      	bne.n	8008f64 <USB_EPStartXfer+0xcfa>
 8008f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	461a      	mov	r2, r3
 8008f32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f36:	4413      	add	r3, r2
 8008f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	00da      	lsls	r2, r3, #3
 8008f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f4e:	4413      	add	r3, r2
 8008f50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	891b      	ldrh	r3, [r3, #8]
 8008f70:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6959      	ldr	r1, [r3, #20]
 8008f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008f8a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008f8e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008f92:	6800      	ldr	r0, [r0, #0]
 8008f94:	f000 fe54 	bl	8009c40 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fbe:	817b      	strh	r3, [r7, #10]
 8008fc0:	897b      	ldrh	r3, [r7, #10]
 8008fc2:	f083 0310 	eor.w	r3, r3, #16
 8008fc6:	817b      	strh	r3, [r7, #10]
 8008fc8:	897b      	ldrh	r3, [r7, #10]
 8008fca:	f083 0320 	eor.w	r3, r3, #32
 8008fce:	817b      	strh	r3, [r7, #10]
 8008fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	441a      	add	r2, r3
 8008fea:	897b      	ldrh	r3, [r7, #10]
 8008fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	8013      	strh	r3, [r2, #0]
 8009000:	f000 bcde 	b.w	80099c0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	7b1b      	ldrb	r3, [r3, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f040 80bb 	bne.w	800918c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800901a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	699a      	ldr	r2, [r3, #24]
 8009022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	429a      	cmp	r2, r3
 8009030:	d917      	bls.n	8009062 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	699a      	ldr	r2, [r3, #24]
 800904e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009052:	1ad2      	subs	r2, r2, r3
 8009054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	619a      	str	r2, [r3, #24]
 8009060:	e00e      	b.n	8009080 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2200      	movs	r2, #0
 800907e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800908e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800909c:	b29b      	uxth	r3, r3
 800909e:	461a      	mov	r2, r3
 80090a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090a4:	4413      	add	r3, r2
 80090a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	00da      	lsls	r2, r3, #3
 80090b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090bc:	4413      	add	r3, r2
 80090be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80090c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80090c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090d8:	801a      	strh	r2, [r3, #0]
 80090da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090de:	2b3e      	cmp	r3, #62	; 0x3e
 80090e0:	d924      	bls.n	800912c <USB_EPStartXfer+0xec2>
 80090e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090e6:	095b      	lsrs	r3, r3, #5
 80090e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090f0:	f003 031f 	and.w	r3, r3, #31
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d104      	bne.n	8009102 <USB_EPStartXfer+0xe98>
 80090f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090fc:	3b01      	subs	r3, #1
 80090fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	b29a      	uxth	r2, r3
 800910a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800910e:	b29b      	uxth	r3, r3
 8009110:	029b      	lsls	r3, r3, #10
 8009112:	b29b      	uxth	r3, r3
 8009114:	4313      	orrs	r3, r2
 8009116:	b29b      	uxth	r3, r3
 8009118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800911c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009120:	b29a      	uxth	r2, r3
 8009122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009126:	801a      	strh	r2, [r3, #0]
 8009128:	f000 bc10 	b.w	800994c <USB_EPStartXfer+0x16e2>
 800912c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10c      	bne.n	800914e <USB_EPStartXfer+0xee4>
 8009134:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009144:	b29a      	uxth	r2, r3
 8009146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800914a:	801a      	strh	r2, [r3, #0]
 800914c:	e3fe      	b.n	800994c <USB_EPStartXfer+0x16e2>
 800914e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009152:	085b      	lsrs	r3, r3, #1
 8009154:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d004      	beq.n	800916e <USB_EPStartXfer+0xf04>
 8009164:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009168:	3301      	adds	r3, #1
 800916a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800916e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	b29a      	uxth	r2, r3
 8009176:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800917a:	b29b      	uxth	r3, r3
 800917c:	029b      	lsls	r3, r3, #10
 800917e:	b29b      	uxth	r3, r3
 8009180:	4313      	orrs	r3, r2
 8009182:	b29a      	uxth	r2, r3
 8009184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009188:	801a      	strh	r2, [r3, #0]
 800918a:	e3df      	b.n	800994c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800918c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	78db      	ldrb	r3, [r3, #3]
 8009198:	2b02      	cmp	r3, #2
 800919a:	f040 8218 	bne.w	80095ce <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800919e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	785b      	ldrb	r3, [r3, #1]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f040 809d 	bne.w	80092ea <USB_EPStartXfer+0x1080>
 80091b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	461a      	mov	r2, r3
 80091d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091d4:	4413      	add	r3, r2
 80091d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	00da      	lsls	r2, r3, #3
 80091e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091ec:	4413      	add	r3, r2
 80091ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80091f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091fa:	881b      	ldrh	r3, [r3, #0]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009202:	b29a      	uxth	r2, r3
 8009204:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009208:	801a      	strh	r2, [r3, #0]
 800920a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800920e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	2b3e      	cmp	r3, #62	; 0x3e
 8009218:	d92b      	bls.n	8009272 <USB_EPStartXfer+0x1008>
 800921a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800921e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	095b      	lsrs	r3, r3, #5
 8009228:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800922c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	f003 031f 	and.w	r3, r3, #31
 800923c:	2b00      	cmp	r3, #0
 800923e:	d104      	bne.n	800924a <USB_EPStartXfer+0xfe0>
 8009240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009244:	3b01      	subs	r3, #1
 8009246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800924a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	b29a      	uxth	r2, r3
 8009252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009256:	b29b      	uxth	r3, r3
 8009258:	029b      	lsls	r3, r3, #10
 800925a:	b29b      	uxth	r3, r3
 800925c:	4313      	orrs	r3, r2
 800925e:	b29b      	uxth	r3, r3
 8009260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009268:	b29a      	uxth	r2, r3
 800926a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800926e:	801a      	strh	r2, [r3, #0]
 8009270:	e070      	b.n	8009354 <USB_EPStartXfer+0x10ea>
 8009272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10c      	bne.n	800929c <USB_EPStartXfer+0x1032>
 8009282:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009286:	881b      	ldrh	r3, [r3, #0]
 8009288:	b29b      	uxth	r3, r3
 800928a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800928e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009292:	b29a      	uxth	r2, r3
 8009294:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009298:	801a      	strh	r2, [r3, #0]
 800929a:	e05b      	b.n	8009354 <USB_EPStartXfer+0x10ea>
 800929c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	085b      	lsrs	r3, r3, #1
 80092aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	f003 0301 	and.w	r3, r3, #1
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d004      	beq.n	80092cc <USB_EPStartXfer+0x1062>
 80092c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092c6:	3301      	adds	r3, #1
 80092c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092d8:	b29b      	uxth	r3, r3
 80092da:	029b      	lsls	r3, r3, #10
 80092dc:	b29b      	uxth	r3, r3
 80092de:	4313      	orrs	r3, r2
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80092e6:	801a      	strh	r2, [r3, #0]
 80092e8:	e034      	b.n	8009354 <USB_EPStartXfer+0x10ea>
 80092ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	785b      	ldrb	r3, [r3, #1]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d12c      	bne.n	8009354 <USB_EPStartXfer+0x10ea>
 80092fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800930c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009316:	b29b      	uxth	r3, r3
 8009318:	461a      	mov	r2, r3
 800931a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800931e:	4413      	add	r3, r2
 8009320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	00da      	lsls	r2, r3, #3
 8009332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009336:	4413      	add	r3, r2
 8009338:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800933c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	b29a      	uxth	r2, r3
 800934e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009352:	801a      	strh	r2, [r3, #0]
 8009354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009358:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	785b      	ldrb	r3, [r3, #1]
 800936e:	2b00      	cmp	r3, #0
 8009370:	f040 809d 	bne.w	80094ae <USB_EPStartXfer+0x1244>
 8009374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009378:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009386:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009390:	b29b      	uxth	r3, r3
 8009392:	461a      	mov	r2, r3
 8009394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009398:	4413      	add	r3, r2
 800939a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800939e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	00da      	lsls	r2, r3, #3
 80093ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093b0:	4413      	add	r3, r2
 80093b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093be:	881b      	ldrh	r3, [r3, #0]
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093cc:	801a      	strh	r2, [r3, #0]
 80093ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	2b3e      	cmp	r3, #62	; 0x3e
 80093dc:	d92b      	bls.n	8009436 <USB_EPStartXfer+0x11cc>
 80093de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	095b      	lsrs	r3, r3, #5
 80093ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	f003 031f 	and.w	r3, r3, #31
 8009400:	2b00      	cmp	r3, #0
 8009402:	d104      	bne.n	800940e <USB_EPStartXfer+0x11a4>
 8009404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009408:	3b01      	subs	r3, #1
 800940a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800940e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	b29a      	uxth	r2, r3
 8009416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800941a:	b29b      	uxth	r3, r3
 800941c:	029b      	lsls	r3, r3, #10
 800941e:	b29b      	uxth	r3, r3
 8009420:	4313      	orrs	r3, r2
 8009422:	b29b      	uxth	r3, r3
 8009424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800942c:	b29a      	uxth	r2, r3
 800942e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009432:	801a      	strh	r2, [r3, #0]
 8009434:	e069      	b.n	800950a <USB_EPStartXfer+0x12a0>
 8009436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800943a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10c      	bne.n	8009460 <USB_EPStartXfer+0x11f6>
 8009446:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800944a:	881b      	ldrh	r3, [r3, #0]
 800944c:	b29b      	uxth	r3, r3
 800944e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009456:	b29a      	uxth	r2, r3
 8009458:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800945c:	801a      	strh	r2, [r3, #0]
 800945e:	e054      	b.n	800950a <USB_EPStartXfer+0x12a0>
 8009460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	085b      	lsrs	r3, r3, #1
 800946e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	d004      	beq.n	8009490 <USB_EPStartXfer+0x1226>
 8009486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800948a:	3301      	adds	r3, #1
 800948c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009490:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009494:	881b      	ldrh	r3, [r3, #0]
 8009496:	b29a      	uxth	r2, r3
 8009498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800949c:	b29b      	uxth	r3, r3
 800949e:	029b      	lsls	r3, r3, #10
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	4313      	orrs	r3, r2
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094aa:	801a      	strh	r2, [r3, #0]
 80094ac:	e02d      	b.n	800950a <USB_EPStartXfer+0x12a0>
 80094ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	785b      	ldrb	r3, [r3, #1]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d125      	bne.n	800950a <USB_EPStartXfer+0x12a0>
 80094be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	461a      	mov	r2, r3
 80094d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80094d4:	4413      	add	r3, r2
 80094d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80094da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	00da      	lsls	r2, r3, #3
 80094e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80094ec:	4413      	add	r3, r2
 80094ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80094f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	b29a      	uxth	r2, r3
 8009504:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009508:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800950a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	69db      	ldr	r3, [r3, #28]
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 8218 	beq.w	800994c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800951c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009520:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800952a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800953c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d005      	beq.n	8009554 <USB_EPStartXfer+0x12ea>
 8009548:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800954c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10d      	bne.n	8009570 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009554:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800955c:	2b00      	cmp	r3, #0
 800955e:	f040 81f5 	bne.w	800994c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009562:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956a:	2b00      	cmp	r3, #0
 800956c:	f040 81ee 	bne.w	800994c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800957e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4413      	add	r3, r2
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	b29b      	uxth	r3, r3
 800958e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009596:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800959a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800959e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	441a      	add	r2, r3
 80095b4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80095b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	8013      	strh	r3, [r2, #0]
 80095cc:	e1be      	b.n	800994c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80095ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	78db      	ldrb	r3, [r3, #3]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	f040 81b4 	bne.w	8009948 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80095e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	699a      	ldr	r2, [r3, #24]
 80095ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d917      	bls.n	800962c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80095fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800960c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	699a      	ldr	r2, [r3, #24]
 8009618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961c:	1ad2      	subs	r2, r2, r3
 800961e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	619a      	str	r2, [r3, #24]
 800962a:	e00e      	b.n	800964a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800962c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800963c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2200      	movs	r2, #0
 8009648:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800964a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800964e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	785b      	ldrb	r3, [r3, #1]
 8009656:	2b00      	cmp	r3, #0
 8009658:	f040 8085 	bne.w	8009766 <USB_EPStartXfer+0x14fc>
 800965c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800966a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800966e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009678:	b29b      	uxth	r3, r3
 800967a:	461a      	mov	r2, r3
 800967c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009680:	4413      	add	r3, r2
 8009682:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800968a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	00da      	lsls	r2, r3, #3
 8009694:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009698:	4413      	add	r3, r2
 800969a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800969e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096a6:	881b      	ldrh	r3, [r3, #0]
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096b4:	801a      	strh	r2, [r3, #0]
 80096b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ba:	2b3e      	cmp	r3, #62	; 0x3e
 80096bc:	d923      	bls.n	8009706 <USB_EPStartXfer+0x149c>
 80096be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c2:	095b      	lsrs	r3, r3, #5
 80096c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096cc:	f003 031f 	and.w	r3, r3, #31
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d104      	bne.n	80096de <USB_EPStartXfer+0x1474>
 80096d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096d8:	3b01      	subs	r3, #1
 80096da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096e2:	881b      	ldrh	r3, [r3, #0]
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	029b      	lsls	r3, r3, #10
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	4313      	orrs	r3, r2
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009702:	801a      	strh	r2, [r3, #0]
 8009704:	e060      	b.n	80097c8 <USB_EPStartXfer+0x155e>
 8009706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10c      	bne.n	8009728 <USB_EPStartXfer+0x14be>
 800970e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009712:	881b      	ldrh	r3, [r3, #0]
 8009714:	b29b      	uxth	r3, r3
 8009716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800971a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800971e:	b29a      	uxth	r2, r3
 8009720:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009724:	801a      	strh	r2, [r3, #0]
 8009726:	e04f      	b.n	80097c8 <USB_EPStartXfer+0x155e>
 8009728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800972c:	085b      	lsrs	r3, r3, #1
 800972e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b00      	cmp	r3, #0
 800973c:	d004      	beq.n	8009748 <USB_EPStartXfer+0x14de>
 800973e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009742:	3301      	adds	r3, #1
 8009744:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009748:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	b29a      	uxth	r2, r3
 8009750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009754:	b29b      	uxth	r3, r3
 8009756:	029b      	lsls	r3, r3, #10
 8009758:	b29b      	uxth	r3, r3
 800975a:	4313      	orrs	r3, r2
 800975c:	b29a      	uxth	r2, r3
 800975e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009762:	801a      	strh	r2, [r3, #0]
 8009764:	e030      	b.n	80097c8 <USB_EPStartXfer+0x155e>
 8009766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	785b      	ldrb	r3, [r3, #1]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d128      	bne.n	80097c8 <USB_EPStartXfer+0x155e>
 8009776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800977a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009792:	b29b      	uxth	r3, r3
 8009794:	461a      	mov	r2, r3
 8009796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800979a:	4413      	add	r3, r2
 800979c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80097a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	00da      	lsls	r2, r3, #3
 80097ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80097b2:	4413      	add	r3, r2
 80097b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80097b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80097bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80097c6:	801a      	strh	r2, [r3, #0]
 80097c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	785b      	ldrb	r3, [r3, #1]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f040 8085 	bne.w	80098f2 <USB_EPStartXfer+0x1688>
 80097e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80097f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009804:	b29b      	uxth	r3, r3
 8009806:	461a      	mov	r2, r3
 8009808:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800980c:	4413      	add	r3, r2
 800980e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	00da      	lsls	r2, r3, #3
 8009820:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009824:	4413      	add	r3, r2
 8009826:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800982a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800982e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	b29b      	uxth	r3, r3
 8009836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800983a:	b29a      	uxth	r2, r3
 800983c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009840:	801a      	strh	r2, [r3, #0]
 8009842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009846:	2b3e      	cmp	r3, #62	; 0x3e
 8009848:	d923      	bls.n	8009892 <USB_EPStartXfer+0x1628>
 800984a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800984e:	095b      	lsrs	r3, r3, #5
 8009850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009858:	f003 031f 	and.w	r3, r3, #31
 800985c:	2b00      	cmp	r3, #0
 800985e:	d104      	bne.n	800986a <USB_EPStartXfer+0x1600>
 8009860:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009864:	3b01      	subs	r3, #1
 8009866:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800986a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	b29a      	uxth	r2, r3
 8009872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009876:	b29b      	uxth	r3, r3
 8009878:	029b      	lsls	r3, r3, #10
 800987a:	b29b      	uxth	r3, r3
 800987c:	4313      	orrs	r3, r2
 800987e:	b29b      	uxth	r3, r3
 8009880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009888:	b29a      	uxth	r2, r3
 800988a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800988e:	801a      	strh	r2, [r3, #0]
 8009890:	e05c      	b.n	800994c <USB_EPStartXfer+0x16e2>
 8009892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10c      	bne.n	80098b4 <USB_EPStartXfer+0x164a>
 800989a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800989e:	881b      	ldrh	r3, [r3, #0]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098b0:	801a      	strh	r2, [r3, #0]
 80098b2:	e04b      	b.n	800994c <USB_EPStartXfer+0x16e2>
 80098b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098b8:	085b      	lsrs	r3, r3, #1
 80098ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80098be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d004      	beq.n	80098d4 <USB_EPStartXfer+0x166a>
 80098ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098ce:	3301      	adds	r3, #1
 80098d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80098d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	b29a      	uxth	r2, r3
 80098dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	029b      	lsls	r3, r3, #10
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	4313      	orrs	r3, r2
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098ee:	801a      	strh	r2, [r3, #0]
 80098f0:	e02c      	b.n	800994c <USB_EPStartXfer+0x16e2>
 80098f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	785b      	ldrb	r3, [r3, #1]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d124      	bne.n	800994c <USB_EPStartXfer+0x16e2>
 8009902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009910:	b29b      	uxth	r3, r3
 8009912:	461a      	mov	r2, r3
 8009914:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009918:	4413      	add	r3, r2
 800991a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800991e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	00da      	lsls	r2, r3, #3
 800992c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009930:	4413      	add	r3, r2
 8009932:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009936:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800993a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800993e:	b29a      	uxth	r2, r3
 8009940:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009944:	801a      	strh	r2, [r3, #0]
 8009946:	e001      	b.n	800994c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	e03a      	b.n	80099c2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800994c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800995a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	881b      	ldrh	r3, [r3, #0]
 8009968:	b29b      	uxth	r3, r3
 800996a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800996e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009972:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009976:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800997a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800997e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009982:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009986:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800998a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800998e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009992:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800999c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	441a      	add	r2, r3
 80099a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80099ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099bc:	b29b      	uxth	r3, r3
 80099be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	785b      	ldrb	r3, [r3, #1]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d020      	beq.n	8009a20 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	881b      	ldrh	r3, [r3, #0]
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099f4:	81bb      	strh	r3, [r7, #12]
 80099f6:	89bb      	ldrh	r3, [r7, #12]
 80099f8:	f083 0310 	eor.w	r3, r3, #16
 80099fc:	81bb      	strh	r3, [r7, #12]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	441a      	add	r2, r3
 8009a08:	89bb      	ldrh	r3, [r7, #12]
 8009a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	8013      	strh	r3, [r2, #0]
 8009a1e:	e01f      	b.n	8009a60 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a36:	81fb      	strh	r3, [r7, #14]
 8009a38:	89fb      	ldrh	r3, [r7, #14]
 8009a3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a3e:	81fb      	strh	r3, [r7, #14]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	441a      	add	r2, r3
 8009a4a:	89fb      	ldrh	r3, [r7, #14]
 8009a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b087      	sub	sp, #28
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	7b1b      	ldrb	r3, [r3, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f040 809d 	bne.w	8009bbc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	785b      	ldrb	r3, [r3, #1]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d04c      	beq.n	8009b24 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	823b      	strh	r3, [r7, #16]
 8009a98:	8a3b      	ldrh	r3, [r7, #16]
 8009a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d01b      	beq.n	8009ada <USB_EPClearStall+0x6c>
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab8:	81fb      	strh	r3, [r7, #14]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	441a      	add	r2, r3
 8009ac4:	89fb      	ldrh	r3, [r7, #14]
 8009ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	78db      	ldrb	r3, [r3, #3]
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d06c      	beq.n	8009bbc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009af8:	81bb      	strh	r3, [r7, #12]
 8009afa:	89bb      	ldrh	r3, [r7, #12]
 8009afc:	f083 0320 	eor.w	r3, r3, #32
 8009b00:	81bb      	strh	r3, [r7, #12]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	441a      	add	r2, r3
 8009b0c:	89bb      	ldrh	r3, [r7, #12]
 8009b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	8013      	strh	r3, [r2, #0]
 8009b22:	e04b      	b.n	8009bbc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	82fb      	strh	r3, [r7, #22]
 8009b32:	8afb      	ldrh	r3, [r7, #22]
 8009b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01b      	beq.n	8009b74 <USB_EPClearStall+0x106>
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b52:	82bb      	strh	r3, [r7, #20]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	441a      	add	r2, r3
 8009b5e:	8abb      	ldrh	r3, [r7, #20]
 8009b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b8a:	827b      	strh	r3, [r7, #18]
 8009b8c:	8a7b      	ldrh	r3, [r7, #18]
 8009b8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b92:	827b      	strh	r3, [r7, #18]
 8009b94:	8a7b      	ldrh	r3, [r7, #18]
 8009b96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b9a:	827b      	strh	r3, [r7, #18]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	441a      	add	r2, r3
 8009ba6:	8a7b      	ldrh	r3, [r7, #18]
 8009ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	371c      	adds	r7, #28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr

08009bca <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b083      	sub	sp, #12
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009bd6:	78fb      	ldrb	r3, [r7, #3]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d103      	bne.n	8009be4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2280      	movs	r2, #128	; 0x80
 8009be0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009c32:	68fb      	ldr	r3, [r7, #12]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b08b      	sub	sp, #44	; 0x2c
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	460b      	mov	r3, r1
 8009c50:	80fb      	strh	r3, [r7, #6]
 8009c52:	4613      	mov	r3, r2
 8009c54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009c56:	88bb      	ldrh	r3, [r7, #4]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	085b      	lsrs	r3, r3, #1
 8009c5c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c66:	88fa      	ldrh	r2, [r7, #6]
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c70:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	627b      	str	r3, [r7, #36]	; 0x24
 8009c76:	e01b      	b.n	8009cb0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	3301      	adds	r3, #1
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	021b      	lsls	r3, r3, #8
 8009c86:	b21a      	sxth	r2, r3
 8009c88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	b21b      	sxth	r3, r3
 8009c90:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	8a7a      	ldrh	r2, [r7, #18]
 8009c96:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	3302      	adds	r3, #2
 8009c9c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	3b01      	subs	r3, #1
 8009cae:	627b      	str	r3, [r7, #36]	; 0x24
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1e0      	bne.n	8009c78 <USB_WritePMA+0x38>
  }
}
 8009cb6:	bf00      	nop
 8009cb8:	bf00      	nop
 8009cba:	372c      	adds	r7, #44	; 0x2c
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b08b      	sub	sp, #44	; 0x2c
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	4611      	mov	r1, r2
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	80fb      	strh	r3, [r7, #6]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009cda:	88bb      	ldrh	r3, [r7, #4]
 8009cdc:	085b      	lsrs	r3, r3, #1
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009cea:	88fa      	ldrh	r2, [r7, #6]
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cf4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8009cfa:	e018      	b.n	8009d2e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	3302      	adds	r3, #2
 8009d08:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	3301      	adds	r3, #1
 8009d16:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	0a1b      	lsrs	r3, r3, #8
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	3301      	adds	r3, #1
 8009d26:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e3      	bne.n	8009cfc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009d34:	88bb      	ldrh	r3, [r7, #4]
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d007      	beq.n	8009d50 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	881b      	ldrh	r3, [r3, #0]
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	701a      	strb	r2, [r3, #0]
  }
}
 8009d50:	bf00      	nop
 8009d52:	372c      	adds	r7, #44	; 0x2c
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009d6c:	f002 f94a 	bl	800c004 <USBD_static_malloc>
 8009d70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d105      	bne.n	8009d84 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009d80:	2302      	movs	r3, #2
 8009d82:	e066      	b.n	8009e52 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	7c1b      	ldrb	r3, [r3, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d119      	bne.n	8009dc8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d98:	2202      	movs	r2, #2
 8009d9a:	2181      	movs	r1, #129	; 0x81
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f001 ffd8 	bl	800bd52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dac:	2202      	movs	r2, #2
 8009dae:	2101      	movs	r1, #1
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f001 ffce 	bl	800bd52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2210      	movs	r2, #16
 8009dc2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009dc6:	e016      	b.n	8009df6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009dc8:	2340      	movs	r3, #64	; 0x40
 8009dca:	2202      	movs	r2, #2
 8009dcc:	2181      	movs	r1, #129	; 0x81
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f001 ffbf 	bl	800bd52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009dda:	2340      	movs	r3, #64	; 0x40
 8009ddc:	2202      	movs	r2, #2
 8009dde:	2101      	movs	r1, #1
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 ffb6 	bl	800bd52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2210      	movs	r2, #16
 8009df2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009df6:	2308      	movs	r3, #8
 8009df8:	2203      	movs	r2, #3
 8009dfa:	2182      	movs	r1, #130	; 0x82
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f001 ffa8 	bl	800bd52 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	7c1b      	ldrb	r3, [r3, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d109      	bne.n	8009e40 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e36:	2101      	movs	r1, #1
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f002 f879 	bl	800bf30 <USBD_LL_PrepareReceive>
 8009e3e:	e007      	b.n	8009e50 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e46:	2340      	movs	r3, #64	; 0x40
 8009e48:	2101      	movs	r1, #1
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f002 f870 	bl	800bf30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	460b      	mov	r3, r1
 8009e64:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009e66:	2181      	movs	r1, #129	; 0x81
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f001 ff98 	bl	800bd9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009e74:	2101      	movs	r1, #1
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f001 ff91 	bl	800bd9e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009e84:	2182      	movs	r1, #130	; 0x82
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f001 ff89 	bl	800bd9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00e      	beq.n	8009ec4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f002 f8b2 	bl	800c020 <USBD_static_free>
    pdev->pClassData = NULL;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ee0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e0af      	b.n	800a058 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d03f      	beq.n	8009f84 <USBD_CDC_Setup+0xb4>
 8009f04:	2b20      	cmp	r3, #32
 8009f06:	f040 809f 	bne.w	800a048 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	88db      	ldrh	r3, [r3, #6]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d02e      	beq.n	8009f70 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	b25b      	sxtb	r3, r3
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	da16      	bge.n	8009f4a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009f28:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	88d2      	ldrh	r2, [r2, #6]
 8009f2e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	88db      	ldrh	r3, [r3, #6]
 8009f34:	2b07      	cmp	r3, #7
 8009f36:	bf28      	it	cs
 8009f38:	2307      	movcs	r3, #7
 8009f3a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	89fa      	ldrh	r2, [r7, #14]
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f001 fa9f 	bl	800b486 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009f48:	e085      	b.n	800a056 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	785a      	ldrb	r2, [r3, #1]
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	88db      	ldrh	r3, [r3, #6]
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009f60:	6939      	ldr	r1, [r7, #16]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	88db      	ldrh	r3, [r3, #6]
 8009f66:	461a      	mov	r2, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 fab8 	bl	800b4de <USBD_CtlPrepareRx>
      break;
 8009f6e:	e072      	b.n	800a056 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	7850      	ldrb	r0, [r2, #1]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	4798      	blx	r3
      break;
 8009f82:	e068      	b.n	800a056 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	785b      	ldrb	r3, [r3, #1]
 8009f88:	2b0b      	cmp	r3, #11
 8009f8a:	d852      	bhi.n	800a032 <USBD_CDC_Setup+0x162>
 8009f8c:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <USBD_CDC_Setup+0xc4>)
 8009f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f92:	bf00      	nop
 8009f94:	08009fc5 	.word	0x08009fc5
 8009f98:	0800a041 	.word	0x0800a041
 8009f9c:	0800a033 	.word	0x0800a033
 8009fa0:	0800a033 	.word	0x0800a033
 8009fa4:	0800a033 	.word	0x0800a033
 8009fa8:	0800a033 	.word	0x0800a033
 8009fac:	0800a033 	.word	0x0800a033
 8009fb0:	0800a033 	.word	0x0800a033
 8009fb4:	0800a033 	.word	0x0800a033
 8009fb8:	0800a033 	.word	0x0800a033
 8009fbc:	08009fef 	.word	0x08009fef
 8009fc0:	0800a019 	.word	0x0800a019
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	d107      	bne.n	8009fe0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009fd0:	f107 030a 	add.w	r3, r7, #10
 8009fd4:	2202      	movs	r2, #2
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 fa54 	bl	800b486 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fde:	e032      	b.n	800a046 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009fe0:	6839      	ldr	r1, [r7, #0]
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f001 f9de 	bl	800b3a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	75fb      	strb	r3, [r7, #23]
          break;
 8009fec:	e02b      	b.n	800a046 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b03      	cmp	r3, #3
 8009ff8:	d107      	bne.n	800a00a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009ffa:	f107 030d 	add.w	r3, r7, #13
 8009ffe:	2201      	movs	r2, #1
 800a000:	4619      	mov	r1, r3
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f001 fa3f 	bl	800b486 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a008:	e01d      	b.n	800a046 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f001 f9c9 	bl	800b3a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a012:	2303      	movs	r3, #3
 800a014:	75fb      	strb	r3, [r7, #23]
          break;
 800a016:	e016      	b.n	800a046 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	2b03      	cmp	r3, #3
 800a022:	d00f      	beq.n	800a044 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a024:	6839      	ldr	r1, [r7, #0]
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f001 f9bc 	bl	800b3a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a02c:	2303      	movs	r3, #3
 800a02e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a030:	e008      	b.n	800a044 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 f9b5 	bl	800b3a4 <USBD_CtlError>
          ret = USBD_FAIL;
 800a03a:	2303      	movs	r3, #3
 800a03c:	75fb      	strb	r3, [r7, #23]
          break;
 800a03e:	e002      	b.n	800a046 <USBD_CDC_Setup+0x176>
          break;
 800a040:	bf00      	nop
 800a042:	e008      	b.n	800a056 <USBD_CDC_Setup+0x186>
          break;
 800a044:	bf00      	nop
      }
      break;
 800a046:	e006      	b.n	800a056 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f001 f9aa 	bl	800b3a4 <USBD_CtlError>
      ret = USBD_FAIL;
 800a050:	2303      	movs	r3, #3
 800a052:	75fb      	strb	r3, [r7, #23]
      break;
 800a054:	bf00      	nop
  }

  return (uint8_t)ret;
 800a056:	7dfb      	ldrb	r3, [r7, #23]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3718      	adds	r7, #24
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a072:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a07e:	2303      	movs	r3, #3
 800a080:	e04f      	b.n	800a122 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a088:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a08a:	78fa      	ldrb	r2, [r7, #3]
 800a08c:	6879      	ldr	r1, [r7, #4]
 800a08e:	4613      	mov	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	440b      	add	r3, r1
 800a098:	3318      	adds	r3, #24
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d029      	beq.n	800a0f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a0a0:	78fa      	ldrb	r2, [r7, #3]
 800a0a2:	6879      	ldr	r1, [r7, #4]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4413      	add	r3, r2
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	440b      	add	r3, r1
 800a0ae:	3318      	adds	r3, #24
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	78f9      	ldrb	r1, [r7, #3]
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	440b      	add	r3, r1
 800a0bc:	00db      	lsls	r3, r3, #3
 800a0be:	4403      	add	r3, r0
 800a0c0:	3320      	adds	r3, #32
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0c8:	fb01 f303 	mul.w	r3, r1, r3
 800a0cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d110      	bne.n	800a0f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a0d2:	78fa      	ldrb	r2, [r7, #3]
 800a0d4:	6879      	ldr	r1, [r7, #4]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	440b      	add	r3, r1
 800a0e0:	3318      	adds	r3, #24
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a0e6:	78f9      	ldrb	r1, [r7, #3]
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f001 fefe 	bl	800beee <USBD_LL_Transmit>
 800a0f2:	e015      	b.n	800a120 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00b      	beq.n	800a120 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a11c:	78fa      	ldrb	r2, [r7, #3]
 800a11e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	460b      	mov	r3, r1
 800a134:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a13c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a148:	2303      	movs	r3, #3
 800a14a:	e015      	b.n	800a178 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a14c:	78fb      	ldrb	r3, [r7, #3]
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f001 ff0e 	bl	800bf72 <USBD_LL_GetRxDataSize>
 800a156:	4602      	mov	r2, r0
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a172:	4611      	mov	r1, r2
 800a174:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a18e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a196:	2303      	movs	r3, #3
 800a198:	e01b      	b.n	800a1d2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d015      	beq.n	800a1d0 <USBD_CDC_EP0_RxReady+0x50>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a1aa:	2bff      	cmp	r3, #255	; 0xff
 800a1ac:	d010      	beq.n	800a1d0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a1bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a1c4:	b292      	uxth	r2, r2
 800a1c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	22ff      	movs	r2, #255	; 0xff
 800a1cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
	...

0800a1dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2243      	movs	r2, #67	; 0x43
 800a1e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a1ea:	4b03      	ldr	r3, [pc, #12]	; (800a1f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	200000b4 	.word	0x200000b4

0800a1fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2243      	movs	r2, #67	; 0x43
 800a208:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a20a:	4b03      	ldr	r3, [pc, #12]	; (800a218 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	20000070 	.word	0x20000070

0800a21c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2243      	movs	r2, #67	; 0x43
 800a228:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a22a:	4b03      	ldr	r3, [pc, #12]	; (800a238 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	200000f8 	.word	0x200000f8

0800a23c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	220a      	movs	r2, #10
 800a248:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a24a:	4b03      	ldr	r3, [pc, #12]	; (800a258 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	2000002c 	.word	0x2000002c

0800a25c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e004      	b.n	800a27a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a286:	b480      	push	{r7}
 800a288:	b087      	sub	sp, #28
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	60f8      	str	r0, [r7, #12]
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a298:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d101      	bne.n	800a2a4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e008      	b.n	800a2b6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	68ba      	ldr	r2, [r7, #8]
 800a2a8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	371c      	adds	r7, #28
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a2c2:	b480      	push	{r7}
 800a2c4:	b085      	sub	sp, #20
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d101      	bne.n	800a2de <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e004      	b.n	800a2e8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a302:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d101      	bne.n	800a312 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a30e:	2303      	movs	r3, #3
 800a310:	e016      	b.n	800a340 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	7c1b      	ldrb	r3, [r3, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d109      	bne.n	800a32e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a320:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a324:	2101      	movs	r1, #1
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f001 fe02 	bl	800bf30 <USBD_LL_PrepareReceive>
 800a32c:	e007      	b.n	800a33e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a334:	2340      	movs	r3, #64	; 0x40
 800a336:	2101      	movs	r1, #1
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f001 fdf9 	bl	800bf30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	4613      	mov	r3, r2
 800a354:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d101      	bne.n	800a360 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a35c:	2303      	movs	r3, #3
 800a35e:	e01f      	b.n	800a3a0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	79fa      	ldrb	r2, [r7, #7]
 800a392:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f001 fc61 	bl	800bc5c <USBD_LL_Init>
 800a39a:	4603      	mov	r3, r0
 800a39c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d101      	bne.n	800a3c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e016      	b.n	800a3ee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00b      	beq.n	800a3ec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3dc:	f107 020e 	add.w	r2, r7, #14
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	4798      	blx	r3
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b082      	sub	sp, #8
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f001 fc8c 	bl	800bd1c <USBD_LL_Start>
 800a404:	4603      	mov	r3, r0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a40e:	b480      	push	{r7}
 800a410:	b083      	sub	sp, #12
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	460b      	mov	r3, r1
 800a42e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a430:	2303      	movs	r3, #3
 800a432:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d009      	beq.n	800a452 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	78fa      	ldrb	r2, [r7, #3]
 800a448:	4611      	mov	r1, r2
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	4798      	blx	r3
 800a44e:	4603      	mov	r3, r0
 800a450:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a452:	7bfb      	ldrb	r3, [r7, #15]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	460b      	mov	r3, r1
 800a466:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d007      	beq.n	800a482 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	78fa      	ldrb	r2, [r7, #3]
 800a47c:	4611      	mov	r1, r2
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	4798      	blx	r3
  }

  return USBD_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 ff46 	bl	800b330 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a4c0:	f003 031f 	and.w	r3, r3, #31
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d01a      	beq.n	800a4fe <USBD_LL_SetupStage+0x72>
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d822      	bhi.n	800a512 <USBD_LL_SetupStage+0x86>
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <USBD_LL_SetupStage+0x4a>
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d00a      	beq.n	800a4ea <USBD_LL_SetupStage+0x5e>
 800a4d4:	e01d      	b.n	800a512 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4dc:	4619      	mov	r1, r3
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f9ee 	bl	800a8c0 <USBD_StdDevReq>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4e8:	e020      	b.n	800a52c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fa52 	bl	800a99c <USBD_StdItfReq>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	73fb      	strb	r3, [r7, #15]
      break;
 800a4fc:	e016      	b.n	800a52c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fa91 	bl	800aa2e <USBD_StdEPReq>
 800a50c:	4603      	mov	r3, r0
 800a50e:	73fb      	strb	r3, [r7, #15]
      break;
 800a510:	e00c      	b.n	800a52c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a518:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f001 fc5b 	bl	800bddc <USBD_LL_StallEP>
 800a526:	4603      	mov	r3, r0
 800a528:	73fb      	strb	r3, [r7, #15]
      break;
 800a52a:	bf00      	nop
  }

  return ret;
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b086      	sub	sp, #24
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	60f8      	str	r0, [r7, #12]
 800a53e:	460b      	mov	r3, r1
 800a540:	607a      	str	r2, [r7, #4]
 800a542:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a544:	7afb      	ldrb	r3, [r7, #11]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d138      	bne.n	800a5bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a550:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d14a      	bne.n	800a5f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	689a      	ldr	r2, [r3, #8]
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	429a      	cmp	r2, r3
 800a566:	d913      	bls.n	800a590 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	1ad2      	subs	r2, r2, r3
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	68da      	ldr	r2, [r3, #12]
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	4293      	cmp	r3, r2
 800a580:	bf28      	it	cs
 800a582:	4613      	movcs	r3, r2
 800a584:	461a      	mov	r2, r3
 800a586:	6879      	ldr	r1, [r7, #4]
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f000 ffc5 	bl	800b518 <USBD_CtlContinueRx>
 800a58e:	e030      	b.n	800a5f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b03      	cmp	r3, #3
 800a59a:	d10b      	bne.n	800a5b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d005      	beq.n	800a5b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f000 ffc0 	bl	800b53a <USBD_CtlSendStatus>
 800a5ba:	e01a      	b.n	800a5f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b03      	cmp	r3, #3
 800a5c6:	d114      	bne.n	800a5f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00e      	beq.n	800a5f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	7afa      	ldrb	r2, [r7, #11]
 800a5de:	4611      	mov	r1, r2
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	4798      	blx	r3
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a5e8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a5ee:	7dfb      	ldrb	r3, [r7, #23]
 800a5f0:	e000      	b.n	800a5f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3718      	adds	r7, #24
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	460b      	mov	r3, r1
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a60a:	7afb      	ldrb	r3, [r7, #11]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d16b      	bne.n	800a6e8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3314      	adds	r3, #20
 800a614:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d156      	bne.n	800a6ce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	689a      	ldr	r2, [r3, #8]
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d914      	bls.n	800a656 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	689a      	ldr	r2, [r3, #8]
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	1ad2      	subs	r2, r2, r3
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	461a      	mov	r2, r3
 800a640:	6879      	ldr	r1, [r7, #4]
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f000 ff3a 	bl	800b4bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a648:	2300      	movs	r3, #0
 800a64a:	2200      	movs	r2, #0
 800a64c:	2100      	movs	r1, #0
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f001 fc6e 	bl	800bf30 <USBD_LL_PrepareReceive>
 800a654:	e03b      	b.n	800a6ce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	68da      	ldr	r2, [r3, #12]
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d11c      	bne.n	800a69c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	685a      	ldr	r2, [r3, #4]
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d316      	bcc.n	800a69c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a678:	429a      	cmp	r2, r3
 800a67a:	d20f      	bcs.n	800a69c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a67c:	2200      	movs	r2, #0
 800a67e:	2100      	movs	r1, #0
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f000 ff1b 	bl	800b4bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a68e:	2300      	movs	r3, #0
 800a690:	2200      	movs	r2, #0
 800a692:	2100      	movs	r1, #0
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f001 fc4b 	bl	800bf30 <USBD_LL_PrepareReceive>
 800a69a:	e018      	b.n	800a6ce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d10b      	bne.n	800a6c0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d005      	beq.n	800a6c0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6c0:	2180      	movs	r1, #128	; 0x80
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f001 fb8a 	bl	800bddc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 ff49 	bl	800b560 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d122      	bne.n	800a71e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f7ff fe98 	bl	800a40e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a6e6:	e01a      	b.n	800a71e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	2b03      	cmp	r3, #3
 800a6f2:	d114      	bne.n	800a71e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fa:	695b      	ldr	r3, [r3, #20]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00e      	beq.n	800a71e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	7afa      	ldrb	r2, [r7, #11]
 800a70a:	4611      	mov	r1, r2
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	4798      	blx	r3
 800a710:	4603      	mov	r3, r0
 800a712:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a714:	7dfb      	ldrb	r3, [r7, #23]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	e000      	b.n	800a720 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3718      	adds	r7, #24
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a754:	2b00      	cmp	r3, #0
 800a756:	d101      	bne.n	800a75c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a758:	2303      	movs	r3, #3
 800a75a:	e02f      	b.n	800a7bc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00f      	beq.n	800a786 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d009      	beq.n	800a786 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	6852      	ldr	r2, [r2, #4]
 800a77e:	b2d2      	uxtb	r2, r2
 800a780:	4611      	mov	r1, r2
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a786:	2340      	movs	r3, #64	; 0x40
 800a788:	2200      	movs	r2, #0
 800a78a:	2100      	movs	r1, #0
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f001 fae0 	bl	800bd52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2240      	movs	r2, #64	; 0x40
 800a79e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7a2:	2340      	movs	r3, #64	; 0x40
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2180      	movs	r1, #128	; 0x80
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f001 fad2 	bl	800bd52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2240      	movs	r2, #64	; 0x40
 800a7b8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	78fa      	ldrb	r2, [r7, #3]
 800a7d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f2:	b2da      	uxtb	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2204      	movs	r2, #4
 800a7fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	2b04      	cmp	r3, #4
 800a822:	d106      	bne.n	800a832 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a82a:	b2da      	uxtb	r2, r3
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a852:	2303      	movs	r3, #3
 800a854:	e012      	b.n	800a87c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b03      	cmp	r3, #3
 800a860:	d10b      	bne.n	800a87a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d005      	beq.n	800a87a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a874:	69db      	ldr	r3, [r3, #28]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a884:	b480      	push	{r7}
 800a886:	b087      	sub	sp, #28
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	3301      	adds	r3, #1
 800a89a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a8a2:	8a3b      	ldrh	r3, [r7, #16]
 800a8a4:	021b      	lsls	r3, r3, #8
 800a8a6:	b21a      	sxth	r2, r3
 800a8a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	b21b      	sxth	r3, r3
 800a8b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a8b2:	89fb      	ldrh	r3, [r7, #14]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	371c      	adds	r7, #28
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8d6:	2b40      	cmp	r3, #64	; 0x40
 800a8d8:	d005      	beq.n	800a8e6 <USBD_StdDevReq+0x26>
 800a8da:	2b40      	cmp	r3, #64	; 0x40
 800a8dc:	d853      	bhi.n	800a986 <USBD_StdDevReq+0xc6>
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00b      	beq.n	800a8fa <USBD_StdDevReq+0x3a>
 800a8e2:	2b20      	cmp	r3, #32
 800a8e4:	d14f      	bne.n	800a986 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	6839      	ldr	r1, [r7, #0]
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	4798      	blx	r3
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a8f8:	e04a      	b.n	800a990 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	785b      	ldrb	r3, [r3, #1]
 800a8fe:	2b09      	cmp	r3, #9
 800a900:	d83b      	bhi.n	800a97a <USBD_StdDevReq+0xba>
 800a902:	a201      	add	r2, pc, #4	; (adr r2, 800a908 <USBD_StdDevReq+0x48>)
 800a904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a908:	0800a95d 	.word	0x0800a95d
 800a90c:	0800a971 	.word	0x0800a971
 800a910:	0800a97b 	.word	0x0800a97b
 800a914:	0800a967 	.word	0x0800a967
 800a918:	0800a97b 	.word	0x0800a97b
 800a91c:	0800a93b 	.word	0x0800a93b
 800a920:	0800a931 	.word	0x0800a931
 800a924:	0800a97b 	.word	0x0800a97b
 800a928:	0800a953 	.word	0x0800a953
 800a92c:	0800a945 	.word	0x0800a945
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f9de 	bl	800acf4 <USBD_GetDescriptor>
          break;
 800a938:	e024      	b.n	800a984 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a93a:	6839      	ldr	r1, [r7, #0]
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fb6d 	bl	800b01c <USBD_SetAddress>
          break;
 800a942:	e01f      	b.n	800a984 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a944:	6839      	ldr	r1, [r7, #0]
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fbac 	bl	800b0a4 <USBD_SetConfig>
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]
          break;
 800a950:	e018      	b.n	800a984 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a952:	6839      	ldr	r1, [r7, #0]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fc4b 	bl	800b1f0 <USBD_GetConfig>
          break;
 800a95a:	e013      	b.n	800a984 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a95c:	6839      	ldr	r1, [r7, #0]
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fc7c 	bl	800b25c <USBD_GetStatus>
          break;
 800a964:	e00e      	b.n	800a984 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fcab 	bl	800b2c4 <USBD_SetFeature>
          break;
 800a96e:	e009      	b.n	800a984 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a970:	6839      	ldr	r1, [r7, #0]
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fcba 	bl	800b2ec <USBD_ClrFeature>
          break;
 800a978:	e004      	b.n	800a984 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fd11 	bl	800b3a4 <USBD_CtlError>
          break;
 800a982:	bf00      	nop
      }
      break;
 800a984:	e004      	b.n	800a990 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a986:	6839      	ldr	r1, [r7, #0]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fd0b 	bl	800b3a4 <USBD_CtlError>
      break;
 800a98e:	bf00      	nop
  }

  return ret;
 800a990:	7bfb      	ldrb	r3, [r7, #15]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop

0800a99c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9b2:	2b40      	cmp	r3, #64	; 0x40
 800a9b4:	d005      	beq.n	800a9c2 <USBD_StdItfReq+0x26>
 800a9b6:	2b40      	cmp	r3, #64	; 0x40
 800a9b8:	d82f      	bhi.n	800aa1a <USBD_StdItfReq+0x7e>
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <USBD_StdItfReq+0x26>
 800a9be:	2b20      	cmp	r3, #32
 800a9c0:	d12b      	bne.n	800aa1a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d81d      	bhi.n	800aa0c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	889b      	ldrh	r3, [r3, #4]
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d813      	bhi.n	800aa02 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	4798      	blx	r3
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	88db      	ldrh	r3, [r3, #6]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d110      	bne.n	800aa16 <USBD_StdItfReq+0x7a>
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10d      	bne.n	800aa16 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fd9d 	bl	800b53a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa00:	e009      	b.n	800aa16 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800aa02:	6839      	ldr	r1, [r7, #0]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fccd 	bl	800b3a4 <USBD_CtlError>
          break;
 800aa0a:	e004      	b.n	800aa16 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fcc8 	bl	800b3a4 <USBD_CtlError>
          break;
 800aa14:	e000      	b.n	800aa18 <USBD_StdItfReq+0x7c>
          break;
 800aa16:	bf00      	nop
      }
      break;
 800aa18:	e004      	b.n	800aa24 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fcc1 	bl	800b3a4 <USBD_CtlError>
      break;
 800aa22:	bf00      	nop
  }

  return ret;
 800aa24:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b084      	sub	sp, #16
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	889b      	ldrh	r3, [r3, #4]
 800aa40:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa4a:	2b40      	cmp	r3, #64	; 0x40
 800aa4c:	d007      	beq.n	800aa5e <USBD_StdEPReq+0x30>
 800aa4e:	2b40      	cmp	r3, #64	; 0x40
 800aa50:	f200 8145 	bhi.w	800acde <USBD_StdEPReq+0x2b0>
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00c      	beq.n	800aa72 <USBD_StdEPReq+0x44>
 800aa58:	2b20      	cmp	r3, #32
 800aa5a:	f040 8140 	bne.w	800acde <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	6839      	ldr	r1, [r7, #0]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	4798      	blx	r3
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa70:	e13a      	b.n	800ace8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	785b      	ldrb	r3, [r3, #1]
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d007      	beq.n	800aa8a <USBD_StdEPReq+0x5c>
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	f300 8129 	bgt.w	800acd2 <USBD_StdEPReq+0x2a4>
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d07f      	beq.n	800ab84 <USBD_StdEPReq+0x156>
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d03c      	beq.n	800ab02 <USBD_StdEPReq+0xd4>
 800aa88:	e123      	b.n	800acd2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d002      	beq.n	800aa9c <USBD_StdEPReq+0x6e>
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	d016      	beq.n	800aac8 <USBD_StdEPReq+0x9a>
 800aa9a:	e02c      	b.n	800aaf6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa9c:	7bbb      	ldrb	r3, [r7, #14]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00d      	beq.n	800aabe <USBD_StdEPReq+0x90>
 800aaa2:	7bbb      	ldrb	r3, [r7, #14]
 800aaa4:	2b80      	cmp	r3, #128	; 0x80
 800aaa6:	d00a      	beq.n	800aabe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aaa8:	7bbb      	ldrb	r3, [r7, #14]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f001 f995 	bl	800bddc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aab2:	2180      	movs	r1, #128	; 0x80
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 f991 	bl	800bddc <USBD_LL_StallEP>
 800aaba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aabc:	e020      	b.n	800ab00 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800aabe:	6839      	ldr	r1, [r7, #0]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 fc6f 	bl	800b3a4 <USBD_CtlError>
              break;
 800aac6:	e01b      	b.n	800ab00 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	885b      	ldrh	r3, [r3, #2]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10e      	bne.n	800aaee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aad0:	7bbb      	ldrb	r3, [r7, #14]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00b      	beq.n	800aaee <USBD_StdEPReq+0xc0>
 800aad6:	7bbb      	ldrb	r3, [r7, #14]
 800aad8:	2b80      	cmp	r3, #128	; 0x80
 800aada:	d008      	beq.n	800aaee <USBD_StdEPReq+0xc0>
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	88db      	ldrh	r3, [r3, #6]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d104      	bne.n	800aaee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aae4:	7bbb      	ldrb	r3, [r7, #14]
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f001 f977 	bl	800bddc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fd23 	bl	800b53a <USBD_CtlSendStatus>

              break;
 800aaf4:	e004      	b.n	800ab00 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fc53 	bl	800b3a4 <USBD_CtlError>
              break;
 800aafe:	bf00      	nop
          }
          break;
 800ab00:	e0ec      	b.n	800acdc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d002      	beq.n	800ab14 <USBD_StdEPReq+0xe6>
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d016      	beq.n	800ab40 <USBD_StdEPReq+0x112>
 800ab12:	e030      	b.n	800ab76 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00d      	beq.n	800ab36 <USBD_StdEPReq+0x108>
 800ab1a:	7bbb      	ldrb	r3, [r7, #14]
 800ab1c:	2b80      	cmp	r3, #128	; 0x80
 800ab1e:	d00a      	beq.n	800ab36 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab20:	7bbb      	ldrb	r3, [r7, #14]
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f001 f959 	bl	800bddc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab2a:	2180      	movs	r1, #128	; 0x80
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f001 f955 	bl	800bddc <USBD_LL_StallEP>
 800ab32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab34:	e025      	b.n	800ab82 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fc33 	bl	800b3a4 <USBD_CtlError>
              break;
 800ab3e:	e020      	b.n	800ab82 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	885b      	ldrh	r3, [r3, #2]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d11b      	bne.n	800ab80 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab48:	7bbb      	ldrb	r3, [r7, #14]
 800ab4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d004      	beq.n	800ab5c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab52:	7bbb      	ldrb	r3, [r7, #14]
 800ab54:	4619      	mov	r1, r3
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f001 f95f 	bl	800be1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fcec 	bl	800b53a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	4798      	blx	r3
 800ab70:	4603      	mov	r3, r0
 800ab72:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ab74:	e004      	b.n	800ab80 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fc13 	bl	800b3a4 <USBD_CtlError>
              break;
 800ab7e:	e000      	b.n	800ab82 <USBD_StdEPReq+0x154>
              break;
 800ab80:	bf00      	nop
          }
          break;
 800ab82:	e0ab      	b.n	800acdc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d002      	beq.n	800ab96 <USBD_StdEPReq+0x168>
 800ab90:	2b03      	cmp	r3, #3
 800ab92:	d032      	beq.n	800abfa <USBD_StdEPReq+0x1cc>
 800ab94:	e097      	b.n	800acc6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab96:	7bbb      	ldrb	r3, [r7, #14]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d007      	beq.n	800abac <USBD_StdEPReq+0x17e>
 800ab9c:	7bbb      	ldrb	r3, [r7, #14]
 800ab9e:	2b80      	cmp	r3, #128	; 0x80
 800aba0:	d004      	beq.n	800abac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aba2:	6839      	ldr	r1, [r7, #0]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 fbfd 	bl	800b3a4 <USBD_CtlError>
                break;
 800abaa:	e091      	b.n	800acd0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	da0b      	bge.n	800abcc <USBD_StdEPReq+0x19e>
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
 800abb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abba:	4613      	mov	r3, r2
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4413      	add	r3, r2
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	3310      	adds	r3, #16
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	4413      	add	r3, r2
 800abc8:	3304      	adds	r3, #4
 800abca:	e00b      	b.n	800abe4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
 800abce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abd2:	4613      	mov	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4413      	add	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	4413      	add	r3, r2
 800abe2:	3304      	adds	r3, #4
 800abe4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	2202      	movs	r2, #2
 800abf0:	4619      	mov	r1, r3
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fc47 	bl	800b486 <USBD_CtlSendData>
              break;
 800abf8:	e06a      	b.n	800acd0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800abfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	da11      	bge.n	800ac26 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac02:	7bbb      	ldrb	r3, [r7, #14]
 800ac04:	f003 020f 	and.w	r2, r3, #15
 800ac08:	6879      	ldr	r1, [r7, #4]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	440b      	add	r3, r1
 800ac14:	3324      	adds	r3, #36	; 0x24
 800ac16:	881b      	ldrh	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d117      	bne.n	800ac4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fbc0 	bl	800b3a4 <USBD_CtlError>
                  break;
 800ac24:	e054      	b.n	800acd0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac26:	7bbb      	ldrb	r3, [r7, #14]
 800ac28:	f003 020f 	and.w	r2, r3, #15
 800ac2c:	6879      	ldr	r1, [r7, #4]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	440b      	add	r3, r1
 800ac38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d104      	bne.n	800ac4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ac42:	6839      	ldr	r1, [r7, #0]
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fbad 	bl	800b3a4 <USBD_CtlError>
                  break;
 800ac4a:	e041      	b.n	800acd0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	da0b      	bge.n	800ac6c <USBD_StdEPReq+0x23e>
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
 800ac56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	3310      	adds	r3, #16
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	4413      	add	r3, r2
 800ac68:	3304      	adds	r3, #4
 800ac6a:	e00b      	b.n	800ac84 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
 800ac6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac72:	4613      	mov	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	4413      	add	r3, r2
 800ac82:	3304      	adds	r3, #4
 800ac84:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac86:	7bbb      	ldrb	r3, [r7, #14]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d002      	beq.n	800ac92 <USBD_StdEPReq+0x264>
 800ac8c:	7bbb      	ldrb	r3, [r7, #14]
 800ac8e:	2b80      	cmp	r3, #128	; 0x80
 800ac90:	d103      	bne.n	800ac9a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	2200      	movs	r2, #0
 800ac96:	601a      	str	r2, [r3, #0]
 800ac98:	e00e      	b.n	800acb8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f001 f8da 	bl	800be58 <USBD_LL_IsStallEP>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2201      	movs	r2, #1
 800acae:	601a      	str	r2, [r3, #0]
 800acb0:	e002      	b.n	800acb8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	2200      	movs	r2, #0
 800acb6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	2202      	movs	r2, #2
 800acbc:	4619      	mov	r1, r3
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fbe1 	bl	800b486 <USBD_CtlSendData>
              break;
 800acc4:	e004      	b.n	800acd0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800acc6:	6839      	ldr	r1, [r7, #0]
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fb6b 	bl	800b3a4 <USBD_CtlError>
              break;
 800acce:	bf00      	nop
          }
          break;
 800acd0:	e004      	b.n	800acdc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800acd2:	6839      	ldr	r1, [r7, #0]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fb65 	bl	800b3a4 <USBD_CtlError>
          break;
 800acda:	bf00      	nop
      }
      break;
 800acdc:	e004      	b.n	800ace8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fb5f 	bl	800b3a4 <USBD_CtlError>
      break;
 800ace6:	bf00      	nop
  }

  return ret;
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
	...

0800acf4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad02:	2300      	movs	r3, #0
 800ad04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad06:	2300      	movs	r3, #0
 800ad08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	885b      	ldrh	r3, [r3, #2]
 800ad0e:	0a1b      	lsrs	r3, r3, #8
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	3b01      	subs	r3, #1
 800ad14:	2b0e      	cmp	r3, #14
 800ad16:	f200 8152 	bhi.w	800afbe <USBD_GetDescriptor+0x2ca>
 800ad1a:	a201      	add	r2, pc, #4	; (adr r2, 800ad20 <USBD_GetDescriptor+0x2c>)
 800ad1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad20:	0800ad91 	.word	0x0800ad91
 800ad24:	0800ada9 	.word	0x0800ada9
 800ad28:	0800ade9 	.word	0x0800ade9
 800ad2c:	0800afbf 	.word	0x0800afbf
 800ad30:	0800afbf 	.word	0x0800afbf
 800ad34:	0800af5f 	.word	0x0800af5f
 800ad38:	0800af8b 	.word	0x0800af8b
 800ad3c:	0800afbf 	.word	0x0800afbf
 800ad40:	0800afbf 	.word	0x0800afbf
 800ad44:	0800afbf 	.word	0x0800afbf
 800ad48:	0800afbf 	.word	0x0800afbf
 800ad4c:	0800afbf 	.word	0x0800afbf
 800ad50:	0800afbf 	.word	0x0800afbf
 800ad54:	0800afbf 	.word	0x0800afbf
 800ad58:	0800ad5d 	.word	0x0800ad5d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad62:	69db      	ldr	r3, [r3, #28]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00b      	beq.n	800ad80 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad6e:	69db      	ldr	r3, [r3, #28]
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	7c12      	ldrb	r2, [r2, #16]
 800ad74:	f107 0108 	add.w	r1, r7, #8
 800ad78:	4610      	mov	r0, r2
 800ad7a:	4798      	blx	r3
 800ad7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad7e:	e126      	b.n	800afce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fb0e 	bl	800b3a4 <USBD_CtlError>
        err++;
 800ad88:	7afb      	ldrb	r3, [r7, #11]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	72fb      	strb	r3, [r7, #11]
      break;
 800ad8e:	e11e      	b.n	800afce <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	7c12      	ldrb	r2, [r2, #16]
 800ad9c:	f107 0108 	add.w	r1, r7, #8
 800ada0:	4610      	mov	r0, r2
 800ada2:	4798      	blx	r3
 800ada4:	60f8      	str	r0, [r7, #12]
      break;
 800ada6:	e112      	b.n	800afce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	7c1b      	ldrb	r3, [r3, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10d      	bne.n	800adcc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb8:	f107 0208 	add.w	r2, r7, #8
 800adbc:	4610      	mov	r0, r2
 800adbe:	4798      	blx	r3
 800adc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3301      	adds	r3, #1
 800adc6:	2202      	movs	r2, #2
 800adc8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800adca:	e100      	b.n	800afce <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800add2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add4:	f107 0208 	add.w	r2, r7, #8
 800add8:	4610      	mov	r0, r2
 800adda:	4798      	blx	r3
 800addc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3301      	adds	r3, #1
 800ade2:	2202      	movs	r2, #2
 800ade4:	701a      	strb	r2, [r3, #0]
      break;
 800ade6:	e0f2      	b.n	800afce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	885b      	ldrh	r3, [r3, #2]
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b05      	cmp	r3, #5
 800adf0:	f200 80ac 	bhi.w	800af4c <USBD_GetDescriptor+0x258>
 800adf4:	a201      	add	r2, pc, #4	; (adr r2, 800adfc <USBD_GetDescriptor+0x108>)
 800adf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfa:	bf00      	nop
 800adfc:	0800ae15 	.word	0x0800ae15
 800ae00:	0800ae49 	.word	0x0800ae49
 800ae04:	0800ae7d 	.word	0x0800ae7d
 800ae08:	0800aeb1 	.word	0x0800aeb1
 800ae0c:	0800aee5 	.word	0x0800aee5
 800ae10:	0800af19 	.word	0x0800af19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00b      	beq.n	800ae38 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	7c12      	ldrb	r2, [r2, #16]
 800ae2c:	f107 0108 	add.w	r1, r7, #8
 800ae30:	4610      	mov	r0, r2
 800ae32:	4798      	blx	r3
 800ae34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae36:	e091      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fab2 	bl	800b3a4 <USBD_CtlError>
            err++;
 800ae40:	7afb      	ldrb	r3, [r7, #11]
 800ae42:	3301      	adds	r3, #1
 800ae44:	72fb      	strb	r3, [r7, #11]
          break;
 800ae46:	e089      	b.n	800af5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00b      	beq.n	800ae6c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	7c12      	ldrb	r2, [r2, #16]
 800ae60:	f107 0108 	add.w	r1, r7, #8
 800ae64:	4610      	mov	r0, r2
 800ae66:	4798      	blx	r3
 800ae68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae6a:	e077      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fa98 	bl	800b3a4 <USBD_CtlError>
            err++;
 800ae74:	7afb      	ldrb	r3, [r7, #11]
 800ae76:	3301      	adds	r3, #1
 800ae78:	72fb      	strb	r3, [r7, #11]
          break;
 800ae7a:	e06f      	b.n	800af5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00b      	beq.n	800aea0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	7c12      	ldrb	r2, [r2, #16]
 800ae94:	f107 0108 	add.w	r1, r7, #8
 800ae98:	4610      	mov	r0, r2
 800ae9a:	4798      	blx	r3
 800ae9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae9e:	e05d      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aea0:	6839      	ldr	r1, [r7, #0]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 fa7e 	bl	800b3a4 <USBD_CtlError>
            err++;
 800aea8:	7afb      	ldrb	r3, [r7, #11]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	72fb      	strb	r3, [r7, #11]
          break;
 800aeae:	e055      	b.n	800af5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00b      	beq.n	800aed4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aec2:	691b      	ldr	r3, [r3, #16]
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	7c12      	ldrb	r2, [r2, #16]
 800aec8:	f107 0108 	add.w	r1, r7, #8
 800aecc:	4610      	mov	r0, r2
 800aece:	4798      	blx	r3
 800aed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aed2:	e043      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fa64 	bl	800b3a4 <USBD_CtlError>
            err++;
 800aedc:	7afb      	ldrb	r3, [r7, #11]
 800aede:	3301      	adds	r3, #1
 800aee0:	72fb      	strb	r3, [r7, #11]
          break;
 800aee2:	e03b      	b.n	800af5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeea:	695b      	ldr	r3, [r3, #20]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00b      	beq.n	800af08 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aef6:	695b      	ldr	r3, [r3, #20]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	7c12      	ldrb	r2, [r2, #16]
 800aefc:	f107 0108 	add.w	r1, r7, #8
 800af00:	4610      	mov	r0, r2
 800af02:	4798      	blx	r3
 800af04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af06:	e029      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fa4a 	bl	800b3a4 <USBD_CtlError>
            err++;
 800af10:	7afb      	ldrb	r3, [r7, #11]
 800af12:	3301      	adds	r3, #1
 800af14:	72fb      	strb	r3, [r7, #11]
          break;
 800af16:	e021      	b.n	800af5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00b      	beq.n	800af3c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	7c12      	ldrb	r2, [r2, #16]
 800af30:	f107 0108 	add.w	r1, r7, #8
 800af34:	4610      	mov	r0, r2
 800af36:	4798      	blx	r3
 800af38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af3a:	e00f      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 fa30 	bl	800b3a4 <USBD_CtlError>
            err++;
 800af44:	7afb      	ldrb	r3, [r7, #11]
 800af46:	3301      	adds	r3, #1
 800af48:	72fb      	strb	r3, [r7, #11]
          break;
 800af4a:	e007      	b.n	800af5c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fa28 	bl	800b3a4 <USBD_CtlError>
          err++;
 800af54:	7afb      	ldrb	r3, [r7, #11]
 800af56:	3301      	adds	r3, #1
 800af58:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800af5a:	bf00      	nop
      }
      break;
 800af5c:	e037      	b.n	800afce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	7c1b      	ldrb	r3, [r3, #16]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d109      	bne.n	800af7a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af6e:	f107 0208 	add.w	r2, r7, #8
 800af72:	4610      	mov	r0, r2
 800af74:	4798      	blx	r3
 800af76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af78:	e029      	b.n	800afce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 fa11 	bl	800b3a4 <USBD_CtlError>
        err++;
 800af82:	7afb      	ldrb	r3, [r7, #11]
 800af84:	3301      	adds	r3, #1
 800af86:	72fb      	strb	r3, [r7, #11]
      break;
 800af88:	e021      	b.n	800afce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	7c1b      	ldrb	r3, [r3, #16]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d10d      	bne.n	800afae <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af9a:	f107 0208 	add.w	r2, r7, #8
 800af9e:	4610      	mov	r0, r2
 800afa0:	4798      	blx	r3
 800afa2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3301      	adds	r3, #1
 800afa8:	2207      	movs	r2, #7
 800afaa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afac:	e00f      	b.n	800afce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f9f7 	bl	800b3a4 <USBD_CtlError>
        err++;
 800afb6:	7afb      	ldrb	r3, [r7, #11]
 800afb8:	3301      	adds	r3, #1
 800afba:	72fb      	strb	r3, [r7, #11]
      break;
 800afbc:	e007      	b.n	800afce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f9ef 	bl	800b3a4 <USBD_CtlError>
      err++;
 800afc6:	7afb      	ldrb	r3, [r7, #11]
 800afc8:	3301      	adds	r3, #1
 800afca:	72fb      	strb	r3, [r7, #11]
      break;
 800afcc:	bf00      	nop
  }

  if (err != 0U)
 800afce:	7afb      	ldrb	r3, [r7, #11]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d11e      	bne.n	800b012 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	88db      	ldrh	r3, [r3, #6]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d016      	beq.n	800b00a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800afdc:	893b      	ldrh	r3, [r7, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00e      	beq.n	800b000 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	88da      	ldrh	r2, [r3, #6]
 800afe6:	893b      	ldrh	r3, [r7, #8]
 800afe8:	4293      	cmp	r3, r2
 800afea:	bf28      	it	cs
 800afec:	4613      	movcs	r3, r2
 800afee:	b29b      	uxth	r3, r3
 800aff0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aff2:	893b      	ldrh	r3, [r7, #8]
 800aff4:	461a      	mov	r2, r3
 800aff6:	68f9      	ldr	r1, [r7, #12]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fa44 	bl	800b486 <USBD_CtlSendData>
 800affe:	e009      	b.n	800b014 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f9ce 	bl	800b3a4 <USBD_CtlError>
 800b008:	e004      	b.n	800b014 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fa95 	bl	800b53a <USBD_CtlSendStatus>
 800b010:	e000      	b.n	800b014 <USBD_GetDescriptor+0x320>
    return;
 800b012:	bf00      	nop
  }
}
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop

0800b01c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	889b      	ldrh	r3, [r3, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d131      	bne.n	800b092 <USBD_SetAddress+0x76>
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	88db      	ldrh	r3, [r3, #6]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d12d      	bne.n	800b092 <USBD_SetAddress+0x76>
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	885b      	ldrh	r3, [r3, #2]
 800b03a:	2b7f      	cmp	r3, #127	; 0x7f
 800b03c:	d829      	bhi.n	800b092 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	885b      	ldrh	r3, [r3, #2]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b048:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b03      	cmp	r3, #3
 800b054:	d104      	bne.n	800b060 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f9a3 	bl	800b3a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b05e:	e01d      	b.n	800b09c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	7bfa      	ldrb	r2, [r7, #15]
 800b064:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b068:	7bfb      	ldrb	r3, [r7, #15]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 ff1f 	bl	800beb0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fa61 	bl	800b53a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b078:	7bfb      	ldrb	r3, [r7, #15]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d004      	beq.n	800b088 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2202      	movs	r2, #2
 800b082:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b086:	e009      	b.n	800b09c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b090:	e004      	b.n	800b09c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f985 	bl	800b3a4 <USBD_CtlError>
  }
}
 800b09a:	bf00      	nop
 800b09c:	bf00      	nop
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	885b      	ldrh	r3, [r3, #2]
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	4b4c      	ldr	r3, [pc, #304]	; (800b1ec <USBD_SetConfig+0x148>)
 800b0ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b0bc:	4b4b      	ldr	r3, [pc, #300]	; (800b1ec <USBD_SetConfig+0x148>)
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d905      	bls.n	800b0d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b0c4:	6839      	ldr	r1, [r7, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f96c 	bl	800b3a4 <USBD_CtlError>
    return USBD_FAIL;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	e088      	b.n	800b1e2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d002      	beq.n	800b0e2 <USBD_SetConfig+0x3e>
 800b0dc:	2b03      	cmp	r3, #3
 800b0de:	d025      	beq.n	800b12c <USBD_SetConfig+0x88>
 800b0e0:	e071      	b.n	800b1c6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b0e2:	4b42      	ldr	r3, [pc, #264]	; (800b1ec <USBD_SetConfig+0x148>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d01c      	beq.n	800b124 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b0ea:	4b40      	ldr	r3, [pc, #256]	; (800b1ec <USBD_SetConfig+0x148>)
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0f4:	4b3d      	ldr	r3, [pc, #244]	; (800b1ec <USBD_SetConfig+0x148>)
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f7ff f992 	bl	800a424 <USBD_SetClassConfig>
 800b100:	4603      	mov	r3, r0
 800b102:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b104:	7bfb      	ldrb	r3, [r7, #15]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d004      	beq.n	800b114 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 f949 	bl	800b3a4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b112:	e065      	b.n	800b1e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fa10 	bl	800b53a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2203      	movs	r2, #3
 800b11e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b122:	e05d      	b.n	800b1e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fa08 	bl	800b53a <USBD_CtlSendStatus>
      break;
 800b12a:	e059      	b.n	800b1e0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b12c:	4b2f      	ldr	r3, [pc, #188]	; (800b1ec <USBD_SetConfig+0x148>)
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d112      	bne.n	800b15a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2202      	movs	r2, #2
 800b138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b13c:	4b2b      	ldr	r3, [pc, #172]	; (800b1ec <USBD_SetConfig+0x148>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	461a      	mov	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b146:	4b29      	ldr	r3, [pc, #164]	; (800b1ec <USBD_SetConfig+0x148>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7ff f985 	bl	800a45c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f9f1 	bl	800b53a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b158:	e042      	b.n	800b1e0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b15a:	4b24      	ldr	r3, [pc, #144]	; (800b1ec <USBD_SetConfig+0x148>)
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	461a      	mov	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	429a      	cmp	r2, r3
 800b166:	d02a      	beq.n	800b1be <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7ff f973 	bl	800a45c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b176:	4b1d      	ldr	r3, [pc, #116]	; (800b1ec <USBD_SetConfig+0x148>)
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	461a      	mov	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b180:	4b1a      	ldr	r3, [pc, #104]	; (800b1ec <USBD_SetConfig+0x148>)
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7ff f94c 	bl	800a424 <USBD_SetClassConfig>
 800b18c:	4603      	mov	r3, r0
 800b18e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b190:	7bfb      	ldrb	r3, [r7, #15]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00f      	beq.n	800b1b6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f903 	bl	800b3a4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f7ff f958 	bl	800a45c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2202      	movs	r2, #2
 800b1b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b1b4:	e014      	b.n	800b1e0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f9bf 	bl	800b53a <USBD_CtlSendStatus>
      break;
 800b1bc:	e010      	b.n	800b1e0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f9bb 	bl	800b53a <USBD_CtlSendStatus>
      break;
 800b1c4:	e00c      	b.n	800b1e0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f8eb 	bl	800b3a4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1ce:	4b07      	ldr	r3, [pc, #28]	; (800b1ec <USBD_SetConfig+0x148>)
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f7ff f941 	bl	800a45c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b1da:	2303      	movs	r3, #3
 800b1dc:	73fb      	strb	r3, [r7, #15]
      break;
 800b1de:	bf00      	nop
  }

  return ret;
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	20000450 	.word	0x20000450

0800b1f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	88db      	ldrh	r3, [r3, #6]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d004      	beq.n	800b20c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b202:	6839      	ldr	r1, [r7, #0]
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f8cd 	bl	800b3a4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b20a:	e023      	b.n	800b254 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b02      	cmp	r3, #2
 800b216:	dc02      	bgt.n	800b21e <USBD_GetConfig+0x2e>
 800b218:	2b00      	cmp	r3, #0
 800b21a:	dc03      	bgt.n	800b224 <USBD_GetConfig+0x34>
 800b21c:	e015      	b.n	800b24a <USBD_GetConfig+0x5a>
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d00b      	beq.n	800b23a <USBD_GetConfig+0x4a>
 800b222:	e012      	b.n	800b24a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	3308      	adds	r3, #8
 800b22e:	2201      	movs	r2, #1
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f927 	bl	800b486 <USBD_CtlSendData>
        break;
 800b238:	e00c      	b.n	800b254 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	3304      	adds	r3, #4
 800b23e:	2201      	movs	r2, #1
 800b240:	4619      	mov	r1, r3
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 f91f 	bl	800b486 <USBD_CtlSendData>
        break;
 800b248:	e004      	b.n	800b254 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b24a:	6839      	ldr	r1, [r7, #0]
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 f8a9 	bl	800b3a4 <USBD_CtlError>
        break;
 800b252:	bf00      	nop
}
 800b254:	bf00      	nop
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	3b01      	subs	r3, #1
 800b270:	2b02      	cmp	r3, #2
 800b272:	d81e      	bhi.n	800b2b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	88db      	ldrh	r3, [r3, #6]
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d004      	beq.n	800b286 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f890 	bl	800b3a4 <USBD_CtlError>
        break;
 800b284:	e01a      	b.n	800b2bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2201      	movs	r2, #1
 800b28a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b292:	2b00      	cmp	r3, #0
 800b294:	d005      	beq.n	800b2a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	f043 0202 	orr.w	r2, r3, #2
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	330c      	adds	r3, #12
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f8eb 	bl	800b486 <USBD_CtlSendData>
      break;
 800b2b0:	e004      	b.n	800b2bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f875 	bl	800b3a4 <USBD_CtlError>
      break;
 800b2ba:	bf00      	nop
  }
}
 800b2bc:	bf00      	nop
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	885b      	ldrh	r3, [r3, #2]
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d106      	bne.n	800b2e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f92b 	bl	800b53a <USBD_CtlSendStatus>
  }
}
 800b2e4:	bf00      	nop
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	3b01      	subs	r3, #1
 800b300:	2b02      	cmp	r3, #2
 800b302:	d80b      	bhi.n	800b31c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	885b      	ldrh	r3, [r3, #2]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d10c      	bne.n	800b326 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f910 	bl	800b53a <USBD_CtlSendStatus>
      }
      break;
 800b31a:	e004      	b.n	800b326 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f840 	bl	800b3a4 <USBD_CtlError>
      break;
 800b324:	e000      	b.n	800b328 <USBD_ClrFeature+0x3c>
      break;
 800b326:	bf00      	nop
  }
}
 800b328:	bf00      	nop
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	781a      	ldrb	r2, [r3, #0]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3301      	adds	r3, #1
 800b34a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	781a      	ldrb	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	3301      	adds	r3, #1
 800b358:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f7ff fa92 	bl	800a884 <SWAPBYTE>
 800b360:	4603      	mov	r3, r0
 800b362:	461a      	mov	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	3301      	adds	r3, #1
 800b36c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3301      	adds	r3, #1
 800b372:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f7ff fa85 	bl	800a884 <SWAPBYTE>
 800b37a:	4603      	mov	r3, r0
 800b37c:	461a      	mov	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3301      	adds	r3, #1
 800b386:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	3301      	adds	r3, #1
 800b38c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f7ff fa78 	bl	800a884 <SWAPBYTE>
 800b394:	4603      	mov	r3, r0
 800b396:	461a      	mov	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	80da      	strh	r2, [r3, #6]
}
 800b39c:	bf00      	nop
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3ae:	2180      	movs	r1, #128	; 0x80
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fd13 	bl	800bddc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fd0f 	bl	800bddc <USBD_LL_StallEP>
}
 800b3be:	bf00      	nop
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b086      	sub	sp, #24
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	60f8      	str	r0, [r7, #12]
 800b3ce:	60b9      	str	r1, [r7, #8]
 800b3d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d036      	beq.n	800b44a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b3e0:	6938      	ldr	r0, [r7, #16]
 800b3e2:	f000 f836 	bl	800b452 <USBD_GetLen>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	005b      	lsls	r3, r3, #1
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	7812      	ldrb	r2, [r2, #0]
 800b3fe:	701a      	strb	r2, [r3, #0]
  idx++;
 800b400:	7dfb      	ldrb	r3, [r7, #23]
 800b402:	3301      	adds	r3, #1
 800b404:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b406:	7dfb      	ldrb	r3, [r7, #23]
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	4413      	add	r3, r2
 800b40c:	2203      	movs	r2, #3
 800b40e:	701a      	strb	r2, [r3, #0]
  idx++;
 800b410:	7dfb      	ldrb	r3, [r7, #23]
 800b412:	3301      	adds	r3, #1
 800b414:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b416:	e013      	b.n	800b440 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b418:	7dfb      	ldrb	r3, [r7, #23]
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	4413      	add	r3, r2
 800b41e:	693a      	ldr	r2, [r7, #16]
 800b420:	7812      	ldrb	r2, [r2, #0]
 800b422:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	3301      	adds	r3, #1
 800b428:	613b      	str	r3, [r7, #16]
    idx++;
 800b42a:	7dfb      	ldrb	r3, [r7, #23]
 800b42c:	3301      	adds	r3, #1
 800b42e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b430:	7dfb      	ldrb	r3, [r7, #23]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	4413      	add	r3, r2
 800b436:	2200      	movs	r2, #0
 800b438:	701a      	strb	r2, [r3, #0]
    idx++;
 800b43a:	7dfb      	ldrb	r3, [r7, #23]
 800b43c:	3301      	adds	r3, #1
 800b43e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1e7      	bne.n	800b418 <USBD_GetString+0x52>
 800b448:	e000      	b.n	800b44c <USBD_GetString+0x86>
    return;
 800b44a:	bf00      	nop
  }
}
 800b44c:	3718      	adds	r7, #24
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b452:	b480      	push	{r7}
 800b454:	b085      	sub	sp, #20
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b45a:	2300      	movs	r3, #0
 800b45c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b462:	e005      	b.n	800b470 <USBD_GetLen+0x1e>
  {
    len++;
 800b464:	7bfb      	ldrb	r3, [r7, #15]
 800b466:	3301      	adds	r3, #1
 800b468:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	3301      	adds	r3, #1
 800b46e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1f5      	bne.n	800b464 <USBD_GetLen+0x12>
  }

  return len;
 800b478:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr

0800b486 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b084      	sub	sp, #16
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	60f8      	str	r0, [r7, #12]
 800b48e:	60b9      	str	r1, [r7, #8]
 800b490:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2202      	movs	r2, #2
 800b496:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f000 fd1e 	bl	800beee <USBD_LL_Transmit>

  return USBD_OK;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f000 fd0d 	bl	800beee <USBD_LL_Transmit>

  return USBD_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b084      	sub	sp, #16
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	60f8      	str	r0, [r7, #12]
 800b4e6:	60b9      	str	r1, [r7, #8]
 800b4e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2203      	movs	r2, #3
 800b4ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	2100      	movs	r1, #0
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 fd11 	bl	800bf30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	2100      	movs	r1, #0
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f000 fd00 	bl	800bf30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b082      	sub	sp, #8
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2204      	movs	r2, #4
 800b546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b54a:	2300      	movs	r3, #0
 800b54c:	2200      	movs	r2, #0
 800b54e:	2100      	movs	r1, #0
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 fccc 	bl	800beee <USBD_LL_Transmit>

  return USBD_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2205      	movs	r2, #5
 800b56c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b570:	2300      	movs	r3, #0
 800b572:	2200      	movs	r2, #0
 800b574:	2100      	movs	r1, #0
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 fcda 	bl	800bf30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
	...

0800b588 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b58c:	2200      	movs	r2, #0
 800b58e:	4912      	ldr	r1, [pc, #72]	; (800b5d8 <MX_USB_Device_Init+0x50>)
 800b590:	4812      	ldr	r0, [pc, #72]	; (800b5dc <MX_USB_Device_Init+0x54>)
 800b592:	f7fe fed9 	bl	800a348 <USBD_Init>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b59c:	f7f5 f988 	bl	80008b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b5a0:	490f      	ldr	r1, [pc, #60]	; (800b5e0 <MX_USB_Device_Init+0x58>)
 800b5a2:	480e      	ldr	r0, [pc, #56]	; (800b5dc <MX_USB_Device_Init+0x54>)
 800b5a4:	f7fe ff00 	bl	800a3a8 <USBD_RegisterClass>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d001      	beq.n	800b5b2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b5ae:	f7f5 f97f 	bl	80008b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b5b2:	490c      	ldr	r1, [pc, #48]	; (800b5e4 <MX_USB_Device_Init+0x5c>)
 800b5b4:	4809      	ldr	r0, [pc, #36]	; (800b5dc <MX_USB_Device_Init+0x54>)
 800b5b6:	f7fe fe51 	bl	800a25c <USBD_CDC_RegisterInterface>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d001      	beq.n	800b5c4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b5c0:	f7f5 f976 	bl	80008b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b5c4:	4805      	ldr	r0, [pc, #20]	; (800b5dc <MX_USB_Device_Init+0x54>)
 800b5c6:	f7fe ff16 	bl	800a3f6 <USBD_Start>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b5d0:	f7f5 f96e 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b5d4:	bf00      	nop
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	20000158 	.word	0x20000158
 800b5dc:	20000454 	.word	0x20000454
 800b5e0:	20000038 	.word	0x20000038
 800b5e4:	20000144 	.word	0x20000144

0800b5e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	4905      	ldr	r1, [pc, #20]	; (800b604 <CDC_Init_FS+0x1c>)
 800b5f0:	4805      	ldr	r0, [pc, #20]	; (800b608 <CDC_Init_FS+0x20>)
 800b5f2:	f7fe fe48 	bl	800a286 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b5f6:	4905      	ldr	r1, [pc, #20]	; (800b60c <CDC_Init_FS+0x24>)
 800b5f8:	4803      	ldr	r0, [pc, #12]	; (800b608 <CDC_Init_FS+0x20>)
 800b5fa:	f7fe fe62 	bl	800a2c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b5fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b600:	4618      	mov	r0, r3
 800b602:	bd80      	pop	{r7, pc}
 800b604:	20001f50 	.word	0x20001f50
 800b608:	20000454 	.word	0x20000454
 800b60c:	20001750 	.word	0x20001750

0800b610 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b610:	b480      	push	{r7}
 800b612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b614:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b616:	4618      	mov	r0, r3
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
 800b626:	4603      	mov	r3, r0
 800b628:	6039      	str	r1, [r7, #0]
 800b62a:	71fb      	strb	r3, [r7, #7]
 800b62c:	4613      	mov	r3, r2
 800b62e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	60fb      	str	r3, [r7, #12]

  switch(cmd)
 800b634:	79fb      	ldrb	r3, [r7, #7]
 800b636:	2b23      	cmp	r3, #35	; 0x23
 800b638:	f200 80af 	bhi.w	800b79a <CDC_Control_FS+0x17a>
 800b63c:	a201      	add	r2, pc, #4	; (adr r2, 800b644 <CDC_Control_FS+0x24>)
 800b63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b642:	bf00      	nop
 800b644:	0800b79b 	.word	0x0800b79b
 800b648:	0800b79b 	.word	0x0800b79b
 800b64c:	0800b79b 	.word	0x0800b79b
 800b650:	0800b79b 	.word	0x0800b79b
 800b654:	0800b79b 	.word	0x0800b79b
 800b658:	0800b79b 	.word	0x0800b79b
 800b65c:	0800b79b 	.word	0x0800b79b
 800b660:	0800b79b 	.word	0x0800b79b
 800b664:	0800b79b 	.word	0x0800b79b
 800b668:	0800b79b 	.word	0x0800b79b
 800b66c:	0800b79b 	.word	0x0800b79b
 800b670:	0800b79b 	.word	0x0800b79b
 800b674:	0800b79b 	.word	0x0800b79b
 800b678:	0800b79b 	.word	0x0800b79b
 800b67c:	0800b79b 	.word	0x0800b79b
 800b680:	0800b79b 	.word	0x0800b79b
 800b684:	0800b79b 	.word	0x0800b79b
 800b688:	0800b79b 	.word	0x0800b79b
 800b68c:	0800b79b 	.word	0x0800b79b
 800b690:	0800b79b 	.word	0x0800b79b
 800b694:	0800b79b 	.word	0x0800b79b
 800b698:	0800b79b 	.word	0x0800b79b
 800b69c:	0800b79b 	.word	0x0800b79b
 800b6a0:	0800b79b 	.word	0x0800b79b
 800b6a4:	0800b79b 	.word	0x0800b79b
 800b6a8:	0800b79b 	.word	0x0800b79b
 800b6ac:	0800b79b 	.word	0x0800b79b
 800b6b0:	0800b79b 	.word	0x0800b79b
 800b6b4:	0800b79b 	.word	0x0800b79b
 800b6b8:	0800b79b 	.word	0x0800b79b
 800b6bc:	0800b79b 	.word	0x0800b79b
 800b6c0:	0800b79b 	.word	0x0800b79b
 800b6c4:	0800b6d5 	.word	0x0800b6d5
 800b6c8:	0800b72f 	.word	0x0800b72f
 800b6cc:	0800b783 	.word	0x0800b783
 800b6d0:	0800b79b 	.word	0x0800b79b
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	4b34      	ldr	r3, [pc, #208]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b6dc:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 800b6de:	4b33      	ldr	r3, [pc, #204]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	3201      	adds	r2, #1
 800b6e6:	7812      	ldrb	r2, [r2, #0]
 800b6e8:	0212      	lsls	r2, r2, #8
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	4a2f      	ldr	r2, [pc, #188]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b6ee:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 800b6f0:	4b2e      	ldr	r3, [pc, #184]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	3202      	adds	r2, #2
 800b6f8:	7812      	ldrb	r2, [r2, #0]
 800b6fa:	0412      	lsls	r2, r2, #16
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	4a2b      	ldr	r2, [pc, #172]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b700:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 800b702:	4b2a      	ldr	r3, [pc, #168]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	3203      	adds	r2, #3
 800b70a:	7812      	ldrb	r2, [r2, #0]
 800b70c:	0612      	lsls	r2, r2, #24
 800b70e:	4313      	orrs	r3, r2
 800b710:	4a26      	ldr	r2, [pc, #152]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b712:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	791a      	ldrb	r2, [r3, #4]
 800b718:	4b24      	ldr	r3, [pc, #144]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b71a:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	795a      	ldrb	r2, [r3, #5]
 800b720:	4b22      	ldr	r3, [pc, #136]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b722:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	799a      	ldrb	r2, [r3, #6]
 800b728:	4b20      	ldr	r3, [pc, #128]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b72a:	719a      	strb	r2, [r3, #6]

    break;
 800b72c:	e036      	b.n	800b79c <CDC_Control_FS+0x17c>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800b72e:	4b1f      	ldr	r3, [pc, #124]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	b2da      	uxtb	r2, r3
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 800b738:	4b1c      	ldr	r3, [pc, #112]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	0a1a      	lsrs	r2, r3, #8
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	3301      	adds	r3, #1
 800b742:	b2d2      	uxtb	r2, r2
 800b744:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 800b746:	4b19      	ldr	r3, [pc, #100]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	0c1a      	lsrs	r2, r3, #16
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	3302      	adds	r3, #2
 800b750:	b2d2      	uxtb	r2, r2
 800b752:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 800b754:	4b15      	ldr	r3, [pc, #84]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	0e1a      	lsrs	r2, r3, #24
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	3303      	adds	r3, #3
 800b75e:	b2d2      	uxtb	r2, r2
 800b760:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	3304      	adds	r3, #4
 800b766:	4a11      	ldr	r2, [pc, #68]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b768:	7912      	ldrb	r2, [r2, #4]
 800b76a:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	3305      	adds	r3, #5
 800b770:	4a0e      	ldr	r2, [pc, #56]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b772:	7952      	ldrb	r2, [r2, #5]
 800b774:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	3306      	adds	r3, #6
 800b77a:	4a0c      	ldr	r2, [pc, #48]	; (800b7ac <CDC_Control_FS+0x18c>)
 800b77c:	7992      	ldrb	r2, [r2, #6]
 800b77e:	701a      	strb	r2, [r3, #0]

    break;
 800b780:	e00c      	b.n	800b79c <CDC_Control_FS+0x17c>

    case CDC_SET_CONTROL_LINE_STATE:
      is_opened = req->wValue & 0x01;   // 0 bit: DTR, 1 bit: RTS
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	885b      	ldrh	r3, [r3, #2]
 800b786:	f003 0301 	and.w	r3, r3, #1
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	bf14      	ite	ne
 800b78e:	2301      	movne	r3, #1
 800b790:	2300      	moveq	r3, #0
 800b792:	b2da      	uxtb	r2, r3
 800b794:	4b06      	ldr	r3, [pc, #24]	; (800b7b0 <CDC_Control_FS+0x190>)
 800b796:	701a      	strb	r2, [r3, #0]

    break;
 800b798:	e000      	b.n	800b79c <CDC_Control_FS+0x17c>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b79a:	bf00      	nop
  }

  return (USBD_OK);
 800b79c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	2000013c 	.word	0x2000013c
 800b7b0:	2000174c 	.word	0x2000174c

0800b7b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b7b4:	b590      	push	{r4, r7, lr}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  qbufferWrite(&q_rx, Buf, *Len);
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	6879      	ldr	r1, [r7, #4]
 800b7c6:	480f      	ldr	r0, [pc, #60]	; (800b804 <CDC_Receive_FS+0x50>)
 800b7c8:	f7f5 f96b 	bl	8000aa2 <qbufferWrite>


  uint32_t buf_len;

  buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 800b7cc:	4b0d      	ldr	r3, [pc, #52]	; (800b804 <CDC_Receive_FS+0x50>)
 800b7ce:	689c      	ldr	r4, [r3, #8]
 800b7d0:	480c      	ldr	r0, [pc, #48]	; (800b804 <CDC_Receive_FS+0x50>)
 800b7d2:	f7f5 fa1a 	bl	8000c0a <qbufferAvailable>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	1ae3      	subs	r3, r4, r3
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	60fb      	str	r3, [r7, #12]

  if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2b3f      	cmp	r3, #63	; 0x3f
 800b7e2:	d907      	bls.n	800b7f4 <CDC_Receive_FS+0x40>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b7e4:	6879      	ldr	r1, [r7, #4]
 800b7e6:	4808      	ldr	r0, [pc, #32]	; (800b808 <CDC_Receive_FS+0x54>)
 800b7e8:	f7fe fd6b 	bl	800a2c2 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b7ec:	4806      	ldr	r0, [pc, #24]	; (800b808 <CDC_Receive_FS+0x54>)
 800b7ee:	f7fe fd81 	bl	800a2f4 <USBD_CDC_ReceivePacket>
 800b7f2:	e002      	b.n	800b7fa <CDC_Receive_FS+0x46>
  }
  else
  {
    is_rx_full = true;
 800b7f4:	4b05      	ldr	r3, [pc, #20]	; (800b80c <CDC_Receive_FS+0x58>)
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	701a      	strb	r2, [r3, #0]
  }

    return (USBD_OK);
 800b7fa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3714      	adds	r7, #20
 800b800:	46bd      	mov	sp, r7
 800b802:	bd90      	pop	{r4, r7, pc}
 800b804:	20000724 	.word	0x20000724
 800b808:	20000454 	.word	0x20000454
 800b80c:	2000174d 	.word	0x2000174d

0800b810 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b810:	b480      	push	{r7}
 800b812:	b087      	sub	sp, #28
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	4613      	mov	r3, r2
 800b81c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b822:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b826:	4618      	mov	r0, r3
 800b828:	371c      	adds	r7, #28
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
	...

0800b834 <cdcIfInit>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool cdcIfInit(void)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	af00      	add	r7, sp, #0
  is_opened = false;
 800b838:	4b08      	ldr	r3, [pc, #32]	; (800b85c <cdcIfInit+0x28>)
 800b83a:	2200      	movs	r2, #0
 800b83c:	701a      	strb	r2, [r3, #0]
  qbufferCreate(&q_rx, q_rx_buf, 2048);
 800b83e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b842:	4907      	ldr	r1, [pc, #28]	; (800b860 <cdcIfInit+0x2c>)
 800b844:	4807      	ldr	r0, [pc, #28]	; (800b864 <cdcIfInit+0x30>)
 800b846:	f7f5 f90e 	bl	8000a66 <qbufferCreate>
  qbufferCreate(&q_tx, q_tx_buf, 2048);
 800b84a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b84e:	4906      	ldr	r1, [pc, #24]	; (800b868 <cdcIfInit+0x34>)
 800b850:	4806      	ldr	r0, [pc, #24]	; (800b86c <cdcIfInit+0x38>)
 800b852:	f7f5 f908 	bl	8000a66 <qbufferCreate>

  return true;
 800b856:	2301      	movs	r3, #1
}
 800b858:	4618      	mov	r0, r3
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	2000174c 	.word	0x2000174c
 800b860:	2000074c 	.word	0x2000074c
 800b864:	20000724 	.word	0x20000724
 800b868:	20000f4c 	.word	0x20000f4c
 800b86c:	20000738 	.word	0x20000738

0800b870 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	4603      	mov	r3, r0
 800b878:	6039      	str	r1, [r7, #0]
 800b87a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2212      	movs	r2, #18
 800b880:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b882:	4b03      	ldr	r3, [pc, #12]	; (800b890 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b884:	4618      	mov	r0, r3
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr
 800b890:	20000178 	.word	0x20000178

0800b894 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	4603      	mov	r3, r0
 800b89c:	6039      	str	r1, [r7, #0]
 800b89e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	2204      	movs	r2, #4
 800b8a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b8a6:	4b03      	ldr	r3, [pc, #12]	; (800b8b4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr
 800b8b4:	2000018c 	.word	0x2000018c

0800b8b8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	4603      	mov	r3, r0
 800b8c0:	6039      	str	r1, [r7, #0]
 800b8c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8c4:	79fb      	ldrb	r3, [r7, #7]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d105      	bne.n	800b8d6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b8ca:	683a      	ldr	r2, [r7, #0]
 800b8cc:	4907      	ldr	r1, [pc, #28]	; (800b8ec <USBD_CDC_ProductStrDescriptor+0x34>)
 800b8ce:	4808      	ldr	r0, [pc, #32]	; (800b8f0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b8d0:	f7ff fd79 	bl	800b3c6 <USBD_GetString>
 800b8d4:	e004      	b.n	800b8e0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	4904      	ldr	r1, [pc, #16]	; (800b8ec <USBD_CDC_ProductStrDescriptor+0x34>)
 800b8da:	4805      	ldr	r0, [pc, #20]	; (800b8f0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b8dc:	f7ff fd73 	bl	800b3c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8e0:	4b02      	ldr	r3, [pc, #8]	; (800b8ec <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3708      	adds	r7, #8
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	20002750 	.word	0x20002750
 800b8f0:	0800cab8 	.word	0x0800cab8

0800b8f4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	6039      	str	r1, [r7, #0]
 800b8fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b900:	683a      	ldr	r2, [r7, #0]
 800b902:	4904      	ldr	r1, [pc, #16]	; (800b914 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b904:	4804      	ldr	r0, [pc, #16]	; (800b918 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b906:	f7ff fd5e 	bl	800b3c6 <USBD_GetString>
  return USBD_StrDesc;
 800b90a:	4b02      	ldr	r3, [pc, #8]	; (800b914 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	20002750 	.word	0x20002750
 800b918:	0800cad0 	.word	0x0800cad0

0800b91c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	4603      	mov	r3, r0
 800b924:	6039      	str	r1, [r7, #0]
 800b926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	221a      	movs	r2, #26
 800b92c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b92e:	f000 f843 	bl	800b9b8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b932:	4b02      	ldr	r3, [pc, #8]	; (800b93c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b934:	4618      	mov	r0, r3
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	20000190 	.word	0x20000190

0800b940 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	4603      	mov	r3, r0
 800b948:	6039      	str	r1, [r7, #0]
 800b94a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b94c:	79fb      	ldrb	r3, [r7, #7]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d105      	bne.n	800b95e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	4907      	ldr	r1, [pc, #28]	; (800b974 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b956:	4808      	ldr	r0, [pc, #32]	; (800b978 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b958:	f7ff fd35 	bl	800b3c6 <USBD_GetString>
 800b95c:	e004      	b.n	800b968 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b95e:	683a      	ldr	r2, [r7, #0]
 800b960:	4904      	ldr	r1, [pc, #16]	; (800b974 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b962:	4805      	ldr	r0, [pc, #20]	; (800b978 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b964:	f7ff fd2f 	bl	800b3c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b968:	4b02      	ldr	r3, [pc, #8]	; (800b974 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3708      	adds	r7, #8
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	20002750 	.word	0x20002750
 800b978:	0800cae4 	.word	0x0800cae4

0800b97c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	4603      	mov	r3, r0
 800b984:	6039      	str	r1, [r7, #0]
 800b986:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b988:	79fb      	ldrb	r3, [r7, #7]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d105      	bne.n	800b99a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	4907      	ldr	r1, [pc, #28]	; (800b9b0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b992:	4808      	ldr	r0, [pc, #32]	; (800b9b4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b994:	f7ff fd17 	bl	800b3c6 <USBD_GetString>
 800b998:	e004      	b.n	800b9a4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	4904      	ldr	r1, [pc, #16]	; (800b9b0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b99e:	4805      	ldr	r0, [pc, #20]	; (800b9b4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b9a0:	f7ff fd11 	bl	800b3c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9a4:	4b02      	ldr	r3, [pc, #8]	; (800b9b0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20002750 	.word	0x20002750
 800b9b4:	0800caf0 	.word	0x0800caf0

0800b9b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b9be:	4b0f      	ldr	r3, [pc, #60]	; (800b9fc <Get_SerialNum+0x44>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b9c4:	4b0e      	ldr	r3, [pc, #56]	; (800ba00 <Get_SerialNum+0x48>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b9ca:	4b0e      	ldr	r3, [pc, #56]	; (800ba04 <Get_SerialNum+0x4c>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d009      	beq.n	800b9f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b9de:	2208      	movs	r2, #8
 800b9e0:	4909      	ldr	r1, [pc, #36]	; (800ba08 <Get_SerialNum+0x50>)
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f000 f814 	bl	800ba10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b9e8:	2204      	movs	r2, #4
 800b9ea:	4908      	ldr	r1, [pc, #32]	; (800ba0c <Get_SerialNum+0x54>)
 800b9ec:	68b8      	ldr	r0, [r7, #8]
 800b9ee:	f000 f80f 	bl	800ba10 <IntToUnicode>
  }
}
 800b9f2:	bf00      	nop
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	1fff7590 	.word	0x1fff7590
 800ba00:	1fff7594 	.word	0x1fff7594
 800ba04:	1fff7598 	.word	0x1fff7598
 800ba08:	20000192 	.word	0x20000192
 800ba0c:	200001a2 	.word	0x200001a2

0800ba10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b087      	sub	sp, #28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba22:	2300      	movs	r3, #0
 800ba24:	75fb      	strb	r3, [r7, #23]
 800ba26:	e027      	b.n	800ba78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	0f1b      	lsrs	r3, r3, #28
 800ba2c:	2b09      	cmp	r3, #9
 800ba2e:	d80b      	bhi.n	800ba48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	0f1b      	lsrs	r3, r3, #28
 800ba34:	b2da      	uxtb	r2, r3
 800ba36:	7dfb      	ldrb	r3, [r7, #23]
 800ba38:	005b      	lsls	r3, r3, #1
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	440b      	add	r3, r1
 800ba40:	3230      	adds	r2, #48	; 0x30
 800ba42:	b2d2      	uxtb	r2, r2
 800ba44:	701a      	strb	r2, [r3, #0]
 800ba46:	e00a      	b.n	800ba5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	0f1b      	lsrs	r3, r3, #28
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	7dfb      	ldrb	r3, [r7, #23]
 800ba50:	005b      	lsls	r3, r3, #1
 800ba52:	4619      	mov	r1, r3
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	440b      	add	r3, r1
 800ba58:	3237      	adds	r2, #55	; 0x37
 800ba5a:	b2d2      	uxtb	r2, r2
 800ba5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	011b      	lsls	r3, r3, #4
 800ba62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba64:	7dfb      	ldrb	r3, [r7, #23]
 800ba66:	005b      	lsls	r3, r3, #1
 800ba68:	3301      	adds	r3, #1
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	2200      	movs	r2, #0
 800ba70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
 800ba74:	3301      	adds	r3, #1
 800ba76:	75fb      	strb	r3, [r7, #23]
 800ba78:	7dfa      	ldrb	r2, [r7, #23]
 800ba7a:	79fb      	ldrb	r3, [r7, #7]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d3d3      	bcc.n	800ba28 <IntToUnicode+0x18>
  }
}
 800ba80:	bf00      	nop
 800ba82:	bf00      	nop
 800ba84:	371c      	adds	r7, #28
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
	...

0800ba90 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b098      	sub	sp, #96	; 0x60
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ba98:	f107 030c 	add.w	r3, r7, #12
 800ba9c:	2254      	movs	r2, #84	; 0x54
 800ba9e:	2100      	movs	r1, #0
 800baa0:	4618      	mov	r0, r3
 800baa2:	f000 fb3d 	bl	800c120 <memset>
  if(pcdHandle->Instance==USB)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a15      	ldr	r2, [pc, #84]	; (800bb00 <HAL_PCD_MspInit+0x70>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d123      	bne.n	800baf8 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bab4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800bab6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800baba:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800babc:	f107 030c 	add.w	r3, r7, #12
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7f9 f915 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d001      	beq.n	800bad0 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800bacc:	f7f4 fef0 	bl	80008b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bad0:	4b0c      	ldr	r3, [pc, #48]	; (800bb04 <HAL_PCD_MspInit+0x74>)
 800bad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bad4:	4a0b      	ldr	r2, [pc, #44]	; (800bb04 <HAL_PCD_MspInit+0x74>)
 800bad6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bada:	6593      	str	r3, [r2, #88]	; 0x58
 800badc:	4b09      	ldr	r3, [pc, #36]	; (800bb04 <HAL_PCD_MspInit+0x74>)
 800bade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bae4:	60bb      	str	r3, [r7, #8]
 800bae6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800bae8:	2200      	movs	r2, #0
 800baea:	2100      	movs	r1, #0
 800baec:	2014      	movs	r0, #20
 800baee:	f7f6 f81e 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800baf2:	2014      	movs	r0, #20
 800baf4:	f7f6 f835 	bl	8001b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800baf8:	bf00      	nop
 800bafa:	3760      	adds	r7, #96	; 0x60
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	40005c00 	.word	0x40005c00
 800bb04:	40021000 	.word	0x40021000

0800bb08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	4610      	mov	r0, r2
 800bb20:	f7fe fcb4 	bl	800a48c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bb24:	bf00      	nop
 800bb26:	3708      	adds	r7, #8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	460b      	mov	r3, r1
 800bb36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800bb3e:	78fa      	ldrb	r2, [r7, #3]
 800bb40:	6879      	ldr	r1, [r7, #4]
 800bb42:	4613      	mov	r3, r2
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	4413      	add	r3, r2
 800bb48:	00db      	lsls	r3, r3, #3
 800bb4a:	440b      	add	r3, r1
 800bb4c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	78fb      	ldrb	r3, [r7, #3]
 800bb54:	4619      	mov	r1, r3
 800bb56:	f7fe fcee 	bl	800a536 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800bb5a:	bf00      	nop
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b082      	sub	sp, #8
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800bb74:	78fa      	ldrb	r2, [r7, #3]
 800bb76:	6879      	ldr	r1, [r7, #4]
 800bb78:	4613      	mov	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	4413      	add	r3, r2
 800bb7e:	00db      	lsls	r3, r3, #3
 800bb80:	440b      	add	r3, r1
 800bb82:	3324      	adds	r3, #36	; 0x24
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	78fb      	ldrb	r3, [r7, #3]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	f7fe fd37 	bl	800a5fc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800bb8e:	bf00      	nop
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b082      	sub	sp, #8
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fe fe4b 	bl	800a840 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bbaa:	bf00      	nop
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b084      	sub	sp, #16
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	795b      	ldrb	r3, [r3, #5]
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d001      	beq.n	800bbca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bbc6:	f7f4 fe73 	bl	80008b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bbd0:	7bfa      	ldrb	r2, [r7, #15]
 800bbd2:	4611      	mov	r1, r2
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7fe fdf5 	bl	800a7c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fe fda1 	bl	800a728 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bbe6:	bf00      	nop
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
	...

0800bbf0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fe fdf0 	bl	800a7e4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	7a5b      	ldrb	r3, [r3, #9]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d005      	beq.n	800bc18 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc0c:	4b04      	ldr	r3, [pc, #16]	; (800bc20 <HAL_PCD_SuspendCallback+0x30>)
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	4a03      	ldr	r2, [pc, #12]	; (800bc20 <HAL_PCD_SuspendCallback+0x30>)
 800bc12:	f043 0306 	orr.w	r3, r3, #6
 800bc16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bc18:	bf00      	nop
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	e000ed00 	.word	0xe000ed00

0800bc24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	7a5b      	ldrb	r3, [r3, #9]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d007      	beq.n	800bc44 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc34:	4b08      	ldr	r3, [pc, #32]	; (800bc58 <HAL_PCD_ResumeCallback+0x34>)
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	4a07      	ldr	r2, [pc, #28]	; (800bc58 <HAL_PCD_ResumeCallback+0x34>)
 800bc3a:	f023 0306 	bic.w	r3, r3, #6
 800bc3e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bc40:	f000 f9f8 	bl	800c034 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fe fde0 	bl	800a810 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bc50:	bf00      	nop
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	e000ed00 	.word	0xe000ed00

0800bc5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bc64:	4a2b      	ldr	r2, [pc, #172]	; (800bd14 <USBD_LL_Init+0xb8>)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a29      	ldr	r2, [pc, #164]	; (800bd14 <USBD_LL_Init+0xb8>)
 800bc70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bc74:	4b27      	ldr	r3, [pc, #156]	; (800bd14 <USBD_LL_Init+0xb8>)
 800bc76:	4a28      	ldr	r2, [pc, #160]	; (800bd18 <USBD_LL_Init+0xbc>)
 800bc78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bc7a:	4b26      	ldr	r3, [pc, #152]	; (800bd14 <USBD_LL_Init+0xb8>)
 800bc7c:	2208      	movs	r2, #8
 800bc7e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bc80:	4b24      	ldr	r3, [pc, #144]	; (800bd14 <USBD_LL_Init+0xb8>)
 800bc82:	2202      	movs	r2, #2
 800bc84:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bc86:	4b23      	ldr	r3, [pc, #140]	; (800bd14 <USBD_LL_Init+0xb8>)
 800bc88:	2202      	movs	r2, #2
 800bc8a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bc8c:	4b21      	ldr	r3, [pc, #132]	; (800bd14 <USBD_LL_Init+0xb8>)
 800bc8e:	2200      	movs	r2, #0
 800bc90:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bc92:	4b20      	ldr	r3, [pc, #128]	; (800bd14 <USBD_LL_Init+0xb8>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bc98:	4b1e      	ldr	r3, [pc, #120]	; (800bd14 <USBD_LL_Init+0xb8>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bc9e:	4b1d      	ldr	r3, [pc, #116]	; (800bd14 <USBD_LL_Init+0xb8>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bca4:	481b      	ldr	r0, [pc, #108]	; (800bd14 <USBD_LL_Init+0xb8>)
 800bca6:	f7f6 fc8b 	bl	80025c0 <HAL_PCD_Init>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bcb0:	f7f4 fdfe 	bl	80008b0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bcba:	2318      	movs	r3, #24
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	f7f8 f945 	bl	8003f4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bcca:	2358      	movs	r3, #88	; 0x58
 800bccc:	2200      	movs	r2, #0
 800bcce:	2180      	movs	r1, #128	; 0x80
 800bcd0:	f7f8 f93d 	bl	8003f4e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bcda:	23c0      	movs	r3, #192	; 0xc0
 800bcdc:	2200      	movs	r2, #0
 800bcde:	2181      	movs	r1, #129	; 0x81
 800bce0:	f7f8 f935 	bl	8003f4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bcea:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bcee:	2200      	movs	r2, #0
 800bcf0:	2101      	movs	r1, #1
 800bcf2:	f7f8 f92c 	bl	8003f4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bcfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd00:	2200      	movs	r2, #0
 800bd02:	2182      	movs	r1, #130	; 0x82
 800bd04:	f7f8 f923 	bl	8003f4e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	20002950 	.word	0x20002950
 800bd18:	40005c00 	.word	0x40005c00

0800bd1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd24:	2300      	movs	r3, #0
 800bd26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7f6 fd12 	bl	800275c <HAL_PCD_Start>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f000 f97e 	bl	800c040 <USBD_Get_USB_Status>
 800bd44:	4603      	mov	r3, r0
 800bd46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd48:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b084      	sub	sp, #16
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
 800bd5a:	4608      	mov	r0, r1
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	461a      	mov	r2, r3
 800bd60:	4603      	mov	r3, r0
 800bd62:	70fb      	strb	r3, [r7, #3]
 800bd64:	460b      	mov	r3, r1
 800bd66:	70bb      	strb	r3, [r7, #2]
 800bd68:	4613      	mov	r3, r2
 800bd6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd7a:	78bb      	ldrb	r3, [r7, #2]
 800bd7c:	883a      	ldrh	r2, [r7, #0]
 800bd7e:	78f9      	ldrb	r1, [r7, #3]
 800bd80:	f7f6 fe59 	bl	8002a36 <HAL_PCD_EP_Open>
 800bd84:	4603      	mov	r3, r0
 800bd86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd88:	7bfb      	ldrb	r3, [r7, #15]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 f958 	bl	800c040 <USBD_Get_USB_Status>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd94:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b084      	sub	sp, #16
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	460b      	mov	r3, r1
 800bda8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bdb8:	78fa      	ldrb	r2, [r7, #3]
 800bdba:	4611      	mov	r1, r2
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7f6 fe97 	bl	8002af0 <HAL_PCD_EP_Close>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdc6:	7bfb      	ldrb	r3, [r7, #15]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f000 f939 	bl	800c040 <USBD_Get_USB_Status>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	460b      	mov	r3, r1
 800bde6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bde8:	2300      	movs	r3, #0
 800bdea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bdf6:	78fa      	ldrb	r2, [r7, #3]
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7f6 ff40 	bl	8002c80 <HAL_PCD_EP_SetStall>
 800be00:	4603      	mov	r3, r0
 800be02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be04:	7bfb      	ldrb	r3, [r7, #15]
 800be06:	4618      	mov	r0, r3
 800be08:	f000 f91a 	bl	800c040 <USBD_Get_USB_Status>
 800be0c:	4603      	mov	r3, r0
 800be0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be10:	7bbb      	ldrb	r3, [r7, #14]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b084      	sub	sp, #16
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	460b      	mov	r3, r1
 800be24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be34:	78fa      	ldrb	r2, [r7, #3]
 800be36:	4611      	mov	r1, r2
 800be38:	4618      	mov	r0, r3
 800be3a:	f7f6 ff73 	bl	8002d24 <HAL_PCD_EP_ClrStall>
 800be3e:	4603      	mov	r3, r0
 800be40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be42:	7bfb      	ldrb	r3, [r7, #15]
 800be44:	4618      	mov	r0, r3
 800be46:	f000 f8fb 	bl	800c040 <USBD_Get_USB_Status>
 800be4a:	4603      	mov	r3, r0
 800be4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	460b      	mov	r3, r1
 800be62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be70:	2b00      	cmp	r3, #0
 800be72:	da0b      	bge.n	800be8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be74:	78fb      	ldrb	r3, [r7, #3]
 800be76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be7a:	68f9      	ldr	r1, [r7, #12]
 800be7c:	4613      	mov	r3, r2
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4413      	add	r3, r2
 800be82:	00db      	lsls	r3, r3, #3
 800be84:	440b      	add	r3, r1
 800be86:	3312      	adds	r3, #18
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	e00b      	b.n	800bea4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be8c:	78fb      	ldrb	r3, [r7, #3]
 800be8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be92:	68f9      	ldr	r1, [r7, #12]
 800be94:	4613      	mov	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4413      	add	r3, r2
 800be9a:	00db      	lsls	r3, r3, #3
 800be9c:	440b      	add	r3, r1
 800be9e:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800bea2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3714      	adds	r7, #20
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	460b      	mov	r3, r1
 800beba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bebc:	2300      	movs	r3, #0
 800bebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800beca:	78fa      	ldrb	r2, [r7, #3]
 800becc:	4611      	mov	r1, r2
 800bece:	4618      	mov	r0, r3
 800bed0:	f7f6 fd8d 	bl	80029ee <HAL_PCD_SetAddress>
 800bed4:	4603      	mov	r3, r0
 800bed6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
 800beda:	4618      	mov	r0, r3
 800bedc:	f000 f8b0 	bl	800c040 <USBD_Get_USB_Status>
 800bee0:	4603      	mov	r3, r0
 800bee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bee4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b086      	sub	sp, #24
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	60f8      	str	r0, [r7, #12]
 800bef6:	607a      	str	r2, [r7, #4]
 800bef8:	603b      	str	r3, [r7, #0]
 800befa:	460b      	mov	r3, r1
 800befc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800befe:	2300      	movs	r3, #0
 800bf00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf02:	2300      	movs	r3, #0
 800bf04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf0c:	7af9      	ldrb	r1, [r7, #11]
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	f7f6 fe7e 	bl	8002c12 <HAL_PCD_EP_Transmit>
 800bf16:	4603      	mov	r3, r0
 800bf18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf1a:	7dfb      	ldrb	r3, [r7, #23]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f000 f88f 	bl	800c040 <USBD_Get_USB_Status>
 800bf22:	4603      	mov	r3, r0
 800bf24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf26:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3718      	adds	r7, #24
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	607a      	str	r2, [r7, #4]
 800bf3a:	603b      	str	r3, [r7, #0]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf4e:	7af9      	ldrb	r1, [r7, #11]
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	f7f6 fe14 	bl	8002b80 <HAL_PCD_EP_Receive>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf5c:	7dfb      	ldrb	r3, [r7, #23]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 f86e 	bl	800c040 <USBD_Get_USB_Status>
 800bf64:	4603      	mov	r3, r0
 800bf66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf68:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3718      	adds	r7, #24
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b082      	sub	sp, #8
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf84:	78fa      	ldrb	r2, [r7, #3]
 800bf86:	4611      	mov	r1, r2
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7f6 fe2a 	bl	8002be2 <HAL_PCD_EP_GetRxCount>
 800bf8e:	4603      	mov	r3, r0
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3708      	adds	r7, #8
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bfa4:	78fb      	ldrb	r3, [r7, #3]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d002      	beq.n	800bfb0 <HAL_PCDEx_LPM_Callback+0x18>
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d013      	beq.n	800bfd6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bfae:	e023      	b.n	800bff8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	7a5b      	ldrb	r3, [r3, #9]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d007      	beq.n	800bfc8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bfb8:	f000 f83c 	bl	800c034 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfbc:	4b10      	ldr	r3, [pc, #64]	; (800c000 <HAL_PCDEx_LPM_Callback+0x68>)
 800bfbe:	691b      	ldr	r3, [r3, #16]
 800bfc0:	4a0f      	ldr	r2, [pc, #60]	; (800c000 <HAL_PCDEx_LPM_Callback+0x68>)
 800bfc2:	f023 0306 	bic.w	r3, r3, #6
 800bfc6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7fe fc1e 	bl	800a810 <USBD_LL_Resume>
    break;
 800bfd4:	e010      	b.n	800bff8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7fe fc01 	bl	800a7e4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	7a5b      	ldrb	r3, [r3, #9]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d005      	beq.n	800bff6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfea:	4b05      	ldr	r3, [pc, #20]	; (800c000 <HAL_PCDEx_LPM_Callback+0x68>)
 800bfec:	691b      	ldr	r3, [r3, #16]
 800bfee:	4a04      	ldr	r2, [pc, #16]	; (800c000 <HAL_PCDEx_LPM_Callback+0x68>)
 800bff0:	f043 0306 	orr.w	r3, r3, #6
 800bff4:	6113      	str	r3, [r2, #16]
    break;
 800bff6:	bf00      	nop
}
 800bff8:	bf00      	nop
 800bffa:	3708      	adds	r7, #8
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	e000ed00 	.word	0xe000ed00

0800c004 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c00c:	4b03      	ldr	r3, [pc, #12]	; (800c01c <USBD_static_malloc+0x18>)
}
 800c00e:	4618      	mov	r0, r3
 800c010:	370c      	adds	r7, #12
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	20002c2c 	.word	0x20002c2c

0800c020 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]

}
 800c028:	bf00      	nop
 800c02a:	370c      	adds	r7, #12
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c038:	f7f4 fbe0 	bl	80007fc <SystemClock_Config>
}
 800c03c:	bf00      	nop
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	4603      	mov	r3, r0
 800c048:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c04a:	2300      	movs	r3, #0
 800c04c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c04e:	79fb      	ldrb	r3, [r7, #7]
 800c050:	2b03      	cmp	r3, #3
 800c052:	d817      	bhi.n	800c084 <USBD_Get_USB_Status+0x44>
 800c054:	a201      	add	r2, pc, #4	; (adr r2, 800c05c <USBD_Get_USB_Status+0x1c>)
 800c056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05a:	bf00      	nop
 800c05c:	0800c06d 	.word	0x0800c06d
 800c060:	0800c073 	.word	0x0800c073
 800c064:	0800c079 	.word	0x0800c079
 800c068:	0800c07f 	.word	0x0800c07f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c06c:	2300      	movs	r3, #0
 800c06e:	73fb      	strb	r3, [r7, #15]
    break;
 800c070:	e00b      	b.n	800c08a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c072:	2303      	movs	r3, #3
 800c074:	73fb      	strb	r3, [r7, #15]
    break;
 800c076:	e008      	b.n	800c08a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c078:	2301      	movs	r3, #1
 800c07a:	73fb      	strb	r3, [r7, #15]
    break;
 800c07c:	e005      	b.n	800c08a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c07e:	2303      	movs	r3, #3
 800c080:	73fb      	strb	r3, [r7, #15]
    break;
 800c082:	e002      	b.n	800c08a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c084:	2303      	movs	r3, #3
 800c086:	73fb      	strb	r3, [r7, #15]
    break;
 800c088:	bf00      	nop
  }
  return usb_status;
 800c08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3714      	adds	r7, #20
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <main>:


#include "main.h"

int main(void)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	af00      	add	r7, sp, #0
  hwInit();
 800c09c:	f7f5 fb4c 	bl	8001738 <hwInit>
  apInit();
 800c0a0:	f7f4 fa8c 	bl	80005bc <apInit>

  apMain();
 800c0a4:	f7f4 fa92 	bl	80005cc <apMain>
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <_vsniprintf_r>:
 800c0ae:	b530      	push	{r4, r5, lr}
 800c0b0:	4614      	mov	r4, r2
 800c0b2:	2c00      	cmp	r4, #0
 800c0b4:	b09b      	sub	sp, #108	; 0x6c
 800c0b6:	4605      	mov	r5, r0
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	da05      	bge.n	800c0c8 <_vsniprintf_r+0x1a>
 800c0bc:	238b      	movs	r3, #139	; 0x8b
 800c0be:	6003      	str	r3, [r0, #0]
 800c0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c4:	b01b      	add	sp, #108	; 0x6c
 800c0c6:	bd30      	pop	{r4, r5, pc}
 800c0c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c0cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c0d0:	bf14      	ite	ne
 800c0d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c0d6:	4623      	moveq	r3, r4
 800c0d8:	9302      	str	r3, [sp, #8]
 800c0da:	9305      	str	r3, [sp, #20]
 800c0dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0e0:	9100      	str	r1, [sp, #0]
 800c0e2:	9104      	str	r1, [sp, #16]
 800c0e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c0e8:	4669      	mov	r1, sp
 800c0ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c0ec:	f000 f9ac 	bl	800c448 <_svfiprintf_r>
 800c0f0:	1c43      	adds	r3, r0, #1
 800c0f2:	bfbc      	itt	lt
 800c0f4:	238b      	movlt	r3, #139	; 0x8b
 800c0f6:	602b      	strlt	r3, [r5, #0]
 800c0f8:	2c00      	cmp	r4, #0
 800c0fa:	d0e3      	beq.n	800c0c4 <_vsniprintf_r+0x16>
 800c0fc:	9b00      	ldr	r3, [sp, #0]
 800c0fe:	2200      	movs	r2, #0
 800c100:	701a      	strb	r2, [r3, #0]
 800c102:	e7df      	b.n	800c0c4 <_vsniprintf_r+0x16>

0800c104 <vsniprintf>:
 800c104:	b507      	push	{r0, r1, r2, lr}
 800c106:	9300      	str	r3, [sp, #0]
 800c108:	4613      	mov	r3, r2
 800c10a:	460a      	mov	r2, r1
 800c10c:	4601      	mov	r1, r0
 800c10e:	4803      	ldr	r0, [pc, #12]	; (800c11c <vsniprintf+0x18>)
 800c110:	6800      	ldr	r0, [r0, #0]
 800c112:	f7ff ffcc 	bl	800c0ae <_vsniprintf_r>
 800c116:	b003      	add	sp, #12
 800c118:	f85d fb04 	ldr.w	pc, [sp], #4
 800c11c:	200001f8 	.word	0x200001f8

0800c120 <memset>:
 800c120:	4402      	add	r2, r0
 800c122:	4603      	mov	r3, r0
 800c124:	4293      	cmp	r3, r2
 800c126:	d100      	bne.n	800c12a <memset+0xa>
 800c128:	4770      	bx	lr
 800c12a:	f803 1b01 	strb.w	r1, [r3], #1
 800c12e:	e7f9      	b.n	800c124 <memset+0x4>

0800c130 <__errno>:
 800c130:	4b01      	ldr	r3, [pc, #4]	; (800c138 <__errno+0x8>)
 800c132:	6818      	ldr	r0, [r3, #0]
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	200001f8 	.word	0x200001f8

0800c13c <__libc_init_array>:
 800c13c:	b570      	push	{r4, r5, r6, lr}
 800c13e:	4d0d      	ldr	r5, [pc, #52]	; (800c174 <__libc_init_array+0x38>)
 800c140:	4c0d      	ldr	r4, [pc, #52]	; (800c178 <__libc_init_array+0x3c>)
 800c142:	1b64      	subs	r4, r4, r5
 800c144:	10a4      	asrs	r4, r4, #2
 800c146:	2600      	movs	r6, #0
 800c148:	42a6      	cmp	r6, r4
 800c14a:	d109      	bne.n	800c160 <__libc_init_array+0x24>
 800c14c:	4d0b      	ldr	r5, [pc, #44]	; (800c17c <__libc_init_array+0x40>)
 800c14e:	4c0c      	ldr	r4, [pc, #48]	; (800c180 <__libc_init_array+0x44>)
 800c150:	f000 fc6a 	bl	800ca28 <_init>
 800c154:	1b64      	subs	r4, r4, r5
 800c156:	10a4      	asrs	r4, r4, #2
 800c158:	2600      	movs	r6, #0
 800c15a:	42a6      	cmp	r6, r4
 800c15c:	d105      	bne.n	800c16a <__libc_init_array+0x2e>
 800c15e:	bd70      	pop	{r4, r5, r6, pc}
 800c160:	f855 3b04 	ldr.w	r3, [r5], #4
 800c164:	4798      	blx	r3
 800c166:	3601      	adds	r6, #1
 800c168:	e7ee      	b.n	800c148 <__libc_init_array+0xc>
 800c16a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c16e:	4798      	blx	r3
 800c170:	3601      	adds	r6, #1
 800c172:	e7f2      	b.n	800c15a <__libc_init_array+0x1e>
 800c174:	0800cb90 	.word	0x0800cb90
 800c178:	0800cb90 	.word	0x0800cb90
 800c17c:	0800cb90 	.word	0x0800cb90
 800c180:	0800cb94 	.word	0x0800cb94

0800c184 <__retarget_lock_acquire_recursive>:
 800c184:	4770      	bx	lr

0800c186 <__retarget_lock_release_recursive>:
 800c186:	4770      	bx	lr

0800c188 <memcpy>:
 800c188:	440a      	add	r2, r1
 800c18a:	4291      	cmp	r1, r2
 800c18c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c190:	d100      	bne.n	800c194 <memcpy+0xc>
 800c192:	4770      	bx	lr
 800c194:	b510      	push	{r4, lr}
 800c196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c19a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c19e:	4291      	cmp	r1, r2
 800c1a0:	d1f9      	bne.n	800c196 <memcpy+0xe>
 800c1a2:	bd10      	pop	{r4, pc}

0800c1a4 <_free_r>:
 800c1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1a6:	2900      	cmp	r1, #0
 800c1a8:	d044      	beq.n	800c234 <_free_r+0x90>
 800c1aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1ae:	9001      	str	r0, [sp, #4]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f1a1 0404 	sub.w	r4, r1, #4
 800c1b6:	bfb8      	it	lt
 800c1b8:	18e4      	addlt	r4, r4, r3
 800c1ba:	f000 f8df 	bl	800c37c <__malloc_lock>
 800c1be:	4a1e      	ldr	r2, [pc, #120]	; (800c238 <_free_r+0x94>)
 800c1c0:	9801      	ldr	r0, [sp, #4]
 800c1c2:	6813      	ldr	r3, [r2, #0]
 800c1c4:	b933      	cbnz	r3, 800c1d4 <_free_r+0x30>
 800c1c6:	6063      	str	r3, [r4, #4]
 800c1c8:	6014      	str	r4, [r2, #0]
 800c1ca:	b003      	add	sp, #12
 800c1cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1d0:	f000 b8da 	b.w	800c388 <__malloc_unlock>
 800c1d4:	42a3      	cmp	r3, r4
 800c1d6:	d908      	bls.n	800c1ea <_free_r+0x46>
 800c1d8:	6825      	ldr	r5, [r4, #0]
 800c1da:	1961      	adds	r1, r4, r5
 800c1dc:	428b      	cmp	r3, r1
 800c1de:	bf01      	itttt	eq
 800c1e0:	6819      	ldreq	r1, [r3, #0]
 800c1e2:	685b      	ldreq	r3, [r3, #4]
 800c1e4:	1949      	addeq	r1, r1, r5
 800c1e6:	6021      	streq	r1, [r4, #0]
 800c1e8:	e7ed      	b.n	800c1c6 <_free_r+0x22>
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	b10b      	cbz	r3, 800c1f4 <_free_r+0x50>
 800c1f0:	42a3      	cmp	r3, r4
 800c1f2:	d9fa      	bls.n	800c1ea <_free_r+0x46>
 800c1f4:	6811      	ldr	r1, [r2, #0]
 800c1f6:	1855      	adds	r5, r2, r1
 800c1f8:	42a5      	cmp	r5, r4
 800c1fa:	d10b      	bne.n	800c214 <_free_r+0x70>
 800c1fc:	6824      	ldr	r4, [r4, #0]
 800c1fe:	4421      	add	r1, r4
 800c200:	1854      	adds	r4, r2, r1
 800c202:	42a3      	cmp	r3, r4
 800c204:	6011      	str	r1, [r2, #0]
 800c206:	d1e0      	bne.n	800c1ca <_free_r+0x26>
 800c208:	681c      	ldr	r4, [r3, #0]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	6053      	str	r3, [r2, #4]
 800c20e:	440c      	add	r4, r1
 800c210:	6014      	str	r4, [r2, #0]
 800c212:	e7da      	b.n	800c1ca <_free_r+0x26>
 800c214:	d902      	bls.n	800c21c <_free_r+0x78>
 800c216:	230c      	movs	r3, #12
 800c218:	6003      	str	r3, [r0, #0]
 800c21a:	e7d6      	b.n	800c1ca <_free_r+0x26>
 800c21c:	6825      	ldr	r5, [r4, #0]
 800c21e:	1961      	adds	r1, r4, r5
 800c220:	428b      	cmp	r3, r1
 800c222:	bf04      	itt	eq
 800c224:	6819      	ldreq	r1, [r3, #0]
 800c226:	685b      	ldreq	r3, [r3, #4]
 800c228:	6063      	str	r3, [r4, #4]
 800c22a:	bf04      	itt	eq
 800c22c:	1949      	addeq	r1, r1, r5
 800c22e:	6021      	streq	r1, [r4, #0]
 800c230:	6054      	str	r4, [r2, #4]
 800c232:	e7ca      	b.n	800c1ca <_free_r+0x26>
 800c234:	b003      	add	sp, #12
 800c236:	bd30      	pop	{r4, r5, pc}
 800c238:	20002f8c 	.word	0x20002f8c

0800c23c <sbrk_aligned>:
 800c23c:	b570      	push	{r4, r5, r6, lr}
 800c23e:	4e0e      	ldr	r6, [pc, #56]	; (800c278 <sbrk_aligned+0x3c>)
 800c240:	460c      	mov	r4, r1
 800c242:	6831      	ldr	r1, [r6, #0]
 800c244:	4605      	mov	r5, r0
 800c246:	b911      	cbnz	r1, 800c24e <sbrk_aligned+0x12>
 800c248:	f000 fba6 	bl	800c998 <_sbrk_r>
 800c24c:	6030      	str	r0, [r6, #0]
 800c24e:	4621      	mov	r1, r4
 800c250:	4628      	mov	r0, r5
 800c252:	f000 fba1 	bl	800c998 <_sbrk_r>
 800c256:	1c43      	adds	r3, r0, #1
 800c258:	d00a      	beq.n	800c270 <sbrk_aligned+0x34>
 800c25a:	1cc4      	adds	r4, r0, #3
 800c25c:	f024 0403 	bic.w	r4, r4, #3
 800c260:	42a0      	cmp	r0, r4
 800c262:	d007      	beq.n	800c274 <sbrk_aligned+0x38>
 800c264:	1a21      	subs	r1, r4, r0
 800c266:	4628      	mov	r0, r5
 800c268:	f000 fb96 	bl	800c998 <_sbrk_r>
 800c26c:	3001      	adds	r0, #1
 800c26e:	d101      	bne.n	800c274 <sbrk_aligned+0x38>
 800c270:	f04f 34ff 	mov.w	r4, #4294967295
 800c274:	4620      	mov	r0, r4
 800c276:	bd70      	pop	{r4, r5, r6, pc}
 800c278:	20002f90 	.word	0x20002f90

0800c27c <_malloc_r>:
 800c27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c280:	1ccd      	adds	r5, r1, #3
 800c282:	f025 0503 	bic.w	r5, r5, #3
 800c286:	3508      	adds	r5, #8
 800c288:	2d0c      	cmp	r5, #12
 800c28a:	bf38      	it	cc
 800c28c:	250c      	movcc	r5, #12
 800c28e:	2d00      	cmp	r5, #0
 800c290:	4607      	mov	r7, r0
 800c292:	db01      	blt.n	800c298 <_malloc_r+0x1c>
 800c294:	42a9      	cmp	r1, r5
 800c296:	d905      	bls.n	800c2a4 <_malloc_r+0x28>
 800c298:	230c      	movs	r3, #12
 800c29a:	603b      	str	r3, [r7, #0]
 800c29c:	2600      	movs	r6, #0
 800c29e:	4630      	mov	r0, r6
 800c2a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c378 <_malloc_r+0xfc>
 800c2a8:	f000 f868 	bl	800c37c <__malloc_lock>
 800c2ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c2b0:	461c      	mov	r4, r3
 800c2b2:	bb5c      	cbnz	r4, 800c30c <_malloc_r+0x90>
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	f7ff ffc0 	bl	800c23c <sbrk_aligned>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	4604      	mov	r4, r0
 800c2c0:	d155      	bne.n	800c36e <_malloc_r+0xf2>
 800c2c2:	f8d8 4000 	ldr.w	r4, [r8]
 800c2c6:	4626      	mov	r6, r4
 800c2c8:	2e00      	cmp	r6, #0
 800c2ca:	d145      	bne.n	800c358 <_malloc_r+0xdc>
 800c2cc:	2c00      	cmp	r4, #0
 800c2ce:	d048      	beq.n	800c362 <_malloc_r+0xe6>
 800c2d0:	6823      	ldr	r3, [r4, #0]
 800c2d2:	4631      	mov	r1, r6
 800c2d4:	4638      	mov	r0, r7
 800c2d6:	eb04 0903 	add.w	r9, r4, r3
 800c2da:	f000 fb5d 	bl	800c998 <_sbrk_r>
 800c2de:	4581      	cmp	r9, r0
 800c2e0:	d13f      	bne.n	800c362 <_malloc_r+0xe6>
 800c2e2:	6821      	ldr	r1, [r4, #0]
 800c2e4:	1a6d      	subs	r5, r5, r1
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	f7ff ffa7 	bl	800c23c <sbrk_aligned>
 800c2ee:	3001      	adds	r0, #1
 800c2f0:	d037      	beq.n	800c362 <_malloc_r+0xe6>
 800c2f2:	6823      	ldr	r3, [r4, #0]
 800c2f4:	442b      	add	r3, r5
 800c2f6:	6023      	str	r3, [r4, #0]
 800c2f8:	f8d8 3000 	ldr.w	r3, [r8]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d038      	beq.n	800c372 <_malloc_r+0xf6>
 800c300:	685a      	ldr	r2, [r3, #4]
 800c302:	42a2      	cmp	r2, r4
 800c304:	d12b      	bne.n	800c35e <_malloc_r+0xe2>
 800c306:	2200      	movs	r2, #0
 800c308:	605a      	str	r2, [r3, #4]
 800c30a:	e00f      	b.n	800c32c <_malloc_r+0xb0>
 800c30c:	6822      	ldr	r2, [r4, #0]
 800c30e:	1b52      	subs	r2, r2, r5
 800c310:	d41f      	bmi.n	800c352 <_malloc_r+0xd6>
 800c312:	2a0b      	cmp	r2, #11
 800c314:	d917      	bls.n	800c346 <_malloc_r+0xca>
 800c316:	1961      	adds	r1, r4, r5
 800c318:	42a3      	cmp	r3, r4
 800c31a:	6025      	str	r5, [r4, #0]
 800c31c:	bf18      	it	ne
 800c31e:	6059      	strne	r1, [r3, #4]
 800c320:	6863      	ldr	r3, [r4, #4]
 800c322:	bf08      	it	eq
 800c324:	f8c8 1000 	streq.w	r1, [r8]
 800c328:	5162      	str	r2, [r4, r5]
 800c32a:	604b      	str	r3, [r1, #4]
 800c32c:	4638      	mov	r0, r7
 800c32e:	f104 060b 	add.w	r6, r4, #11
 800c332:	f000 f829 	bl	800c388 <__malloc_unlock>
 800c336:	f026 0607 	bic.w	r6, r6, #7
 800c33a:	1d23      	adds	r3, r4, #4
 800c33c:	1af2      	subs	r2, r6, r3
 800c33e:	d0ae      	beq.n	800c29e <_malloc_r+0x22>
 800c340:	1b9b      	subs	r3, r3, r6
 800c342:	50a3      	str	r3, [r4, r2]
 800c344:	e7ab      	b.n	800c29e <_malloc_r+0x22>
 800c346:	42a3      	cmp	r3, r4
 800c348:	6862      	ldr	r2, [r4, #4]
 800c34a:	d1dd      	bne.n	800c308 <_malloc_r+0x8c>
 800c34c:	f8c8 2000 	str.w	r2, [r8]
 800c350:	e7ec      	b.n	800c32c <_malloc_r+0xb0>
 800c352:	4623      	mov	r3, r4
 800c354:	6864      	ldr	r4, [r4, #4]
 800c356:	e7ac      	b.n	800c2b2 <_malloc_r+0x36>
 800c358:	4634      	mov	r4, r6
 800c35a:	6876      	ldr	r6, [r6, #4]
 800c35c:	e7b4      	b.n	800c2c8 <_malloc_r+0x4c>
 800c35e:	4613      	mov	r3, r2
 800c360:	e7cc      	b.n	800c2fc <_malloc_r+0x80>
 800c362:	230c      	movs	r3, #12
 800c364:	603b      	str	r3, [r7, #0]
 800c366:	4638      	mov	r0, r7
 800c368:	f000 f80e 	bl	800c388 <__malloc_unlock>
 800c36c:	e797      	b.n	800c29e <_malloc_r+0x22>
 800c36e:	6025      	str	r5, [r4, #0]
 800c370:	e7dc      	b.n	800c32c <_malloc_r+0xb0>
 800c372:	605b      	str	r3, [r3, #4]
 800c374:	deff      	udf	#255	; 0xff
 800c376:	bf00      	nop
 800c378:	20002f8c 	.word	0x20002f8c

0800c37c <__malloc_lock>:
 800c37c:	4801      	ldr	r0, [pc, #4]	; (800c384 <__malloc_lock+0x8>)
 800c37e:	f7ff bf01 	b.w	800c184 <__retarget_lock_acquire_recursive>
 800c382:	bf00      	nop
 800c384:	20002f88 	.word	0x20002f88

0800c388 <__malloc_unlock>:
 800c388:	4801      	ldr	r0, [pc, #4]	; (800c390 <__malloc_unlock+0x8>)
 800c38a:	f7ff befc 	b.w	800c186 <__retarget_lock_release_recursive>
 800c38e:	bf00      	nop
 800c390:	20002f88 	.word	0x20002f88

0800c394 <__ssputs_r>:
 800c394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c398:	688e      	ldr	r6, [r1, #8]
 800c39a:	461f      	mov	r7, r3
 800c39c:	42be      	cmp	r6, r7
 800c39e:	680b      	ldr	r3, [r1, #0]
 800c3a0:	4682      	mov	sl, r0
 800c3a2:	460c      	mov	r4, r1
 800c3a4:	4690      	mov	r8, r2
 800c3a6:	d82c      	bhi.n	800c402 <__ssputs_r+0x6e>
 800c3a8:	898a      	ldrh	r2, [r1, #12]
 800c3aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3ae:	d026      	beq.n	800c3fe <__ssputs_r+0x6a>
 800c3b0:	6965      	ldr	r5, [r4, #20]
 800c3b2:	6909      	ldr	r1, [r1, #16]
 800c3b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3b8:	eba3 0901 	sub.w	r9, r3, r1
 800c3bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3c0:	1c7b      	adds	r3, r7, #1
 800c3c2:	444b      	add	r3, r9
 800c3c4:	106d      	asrs	r5, r5, #1
 800c3c6:	429d      	cmp	r5, r3
 800c3c8:	bf38      	it	cc
 800c3ca:	461d      	movcc	r5, r3
 800c3cc:	0553      	lsls	r3, r2, #21
 800c3ce:	d527      	bpl.n	800c420 <__ssputs_r+0x8c>
 800c3d0:	4629      	mov	r1, r5
 800c3d2:	f7ff ff53 	bl	800c27c <_malloc_r>
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	b360      	cbz	r0, 800c434 <__ssputs_r+0xa0>
 800c3da:	6921      	ldr	r1, [r4, #16]
 800c3dc:	464a      	mov	r2, r9
 800c3de:	f7ff fed3 	bl	800c188 <memcpy>
 800c3e2:	89a3      	ldrh	r3, [r4, #12]
 800c3e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3ec:	81a3      	strh	r3, [r4, #12]
 800c3ee:	6126      	str	r6, [r4, #16]
 800c3f0:	6165      	str	r5, [r4, #20]
 800c3f2:	444e      	add	r6, r9
 800c3f4:	eba5 0509 	sub.w	r5, r5, r9
 800c3f8:	6026      	str	r6, [r4, #0]
 800c3fa:	60a5      	str	r5, [r4, #8]
 800c3fc:	463e      	mov	r6, r7
 800c3fe:	42be      	cmp	r6, r7
 800c400:	d900      	bls.n	800c404 <__ssputs_r+0x70>
 800c402:	463e      	mov	r6, r7
 800c404:	6820      	ldr	r0, [r4, #0]
 800c406:	4632      	mov	r2, r6
 800c408:	4641      	mov	r1, r8
 800c40a:	f000 faab 	bl	800c964 <memmove>
 800c40e:	68a3      	ldr	r3, [r4, #8]
 800c410:	1b9b      	subs	r3, r3, r6
 800c412:	60a3      	str	r3, [r4, #8]
 800c414:	6823      	ldr	r3, [r4, #0]
 800c416:	4433      	add	r3, r6
 800c418:	6023      	str	r3, [r4, #0]
 800c41a:	2000      	movs	r0, #0
 800c41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c420:	462a      	mov	r2, r5
 800c422:	f000 fac9 	bl	800c9b8 <_realloc_r>
 800c426:	4606      	mov	r6, r0
 800c428:	2800      	cmp	r0, #0
 800c42a:	d1e0      	bne.n	800c3ee <__ssputs_r+0x5a>
 800c42c:	6921      	ldr	r1, [r4, #16]
 800c42e:	4650      	mov	r0, sl
 800c430:	f7ff feb8 	bl	800c1a4 <_free_r>
 800c434:	230c      	movs	r3, #12
 800c436:	f8ca 3000 	str.w	r3, [sl]
 800c43a:	89a3      	ldrh	r3, [r4, #12]
 800c43c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c440:	81a3      	strh	r3, [r4, #12]
 800c442:	f04f 30ff 	mov.w	r0, #4294967295
 800c446:	e7e9      	b.n	800c41c <__ssputs_r+0x88>

0800c448 <_svfiprintf_r>:
 800c448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c44c:	4698      	mov	r8, r3
 800c44e:	898b      	ldrh	r3, [r1, #12]
 800c450:	061b      	lsls	r3, r3, #24
 800c452:	b09d      	sub	sp, #116	; 0x74
 800c454:	4607      	mov	r7, r0
 800c456:	460d      	mov	r5, r1
 800c458:	4614      	mov	r4, r2
 800c45a:	d50e      	bpl.n	800c47a <_svfiprintf_r+0x32>
 800c45c:	690b      	ldr	r3, [r1, #16]
 800c45e:	b963      	cbnz	r3, 800c47a <_svfiprintf_r+0x32>
 800c460:	2140      	movs	r1, #64	; 0x40
 800c462:	f7ff ff0b 	bl	800c27c <_malloc_r>
 800c466:	6028      	str	r0, [r5, #0]
 800c468:	6128      	str	r0, [r5, #16]
 800c46a:	b920      	cbnz	r0, 800c476 <_svfiprintf_r+0x2e>
 800c46c:	230c      	movs	r3, #12
 800c46e:	603b      	str	r3, [r7, #0]
 800c470:	f04f 30ff 	mov.w	r0, #4294967295
 800c474:	e0d0      	b.n	800c618 <_svfiprintf_r+0x1d0>
 800c476:	2340      	movs	r3, #64	; 0x40
 800c478:	616b      	str	r3, [r5, #20]
 800c47a:	2300      	movs	r3, #0
 800c47c:	9309      	str	r3, [sp, #36]	; 0x24
 800c47e:	2320      	movs	r3, #32
 800c480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c484:	f8cd 800c 	str.w	r8, [sp, #12]
 800c488:	2330      	movs	r3, #48	; 0x30
 800c48a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c630 <_svfiprintf_r+0x1e8>
 800c48e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c492:	f04f 0901 	mov.w	r9, #1
 800c496:	4623      	mov	r3, r4
 800c498:	469a      	mov	sl, r3
 800c49a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c49e:	b10a      	cbz	r2, 800c4a4 <_svfiprintf_r+0x5c>
 800c4a0:	2a25      	cmp	r2, #37	; 0x25
 800c4a2:	d1f9      	bne.n	800c498 <_svfiprintf_r+0x50>
 800c4a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c4a8:	d00b      	beq.n	800c4c2 <_svfiprintf_r+0x7a>
 800c4aa:	465b      	mov	r3, fp
 800c4ac:	4622      	mov	r2, r4
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	4638      	mov	r0, r7
 800c4b2:	f7ff ff6f 	bl	800c394 <__ssputs_r>
 800c4b6:	3001      	adds	r0, #1
 800c4b8:	f000 80a9 	beq.w	800c60e <_svfiprintf_r+0x1c6>
 800c4bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4be:	445a      	add	r2, fp
 800c4c0:	9209      	str	r2, [sp, #36]	; 0x24
 800c4c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f000 80a1 	beq.w	800c60e <_svfiprintf_r+0x1c6>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4d6:	f10a 0a01 	add.w	sl, sl, #1
 800c4da:	9304      	str	r3, [sp, #16]
 800c4dc:	9307      	str	r3, [sp, #28]
 800c4de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4e2:	931a      	str	r3, [sp, #104]	; 0x68
 800c4e4:	4654      	mov	r4, sl
 800c4e6:	2205      	movs	r2, #5
 800c4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ec:	4850      	ldr	r0, [pc, #320]	; (800c630 <_svfiprintf_r+0x1e8>)
 800c4ee:	f7f3 fe97 	bl	8000220 <memchr>
 800c4f2:	9a04      	ldr	r2, [sp, #16]
 800c4f4:	b9d8      	cbnz	r0, 800c52e <_svfiprintf_r+0xe6>
 800c4f6:	06d0      	lsls	r0, r2, #27
 800c4f8:	bf44      	itt	mi
 800c4fa:	2320      	movmi	r3, #32
 800c4fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c500:	0711      	lsls	r1, r2, #28
 800c502:	bf44      	itt	mi
 800c504:	232b      	movmi	r3, #43	; 0x2b
 800c506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c50a:	f89a 3000 	ldrb.w	r3, [sl]
 800c50e:	2b2a      	cmp	r3, #42	; 0x2a
 800c510:	d015      	beq.n	800c53e <_svfiprintf_r+0xf6>
 800c512:	9a07      	ldr	r2, [sp, #28]
 800c514:	4654      	mov	r4, sl
 800c516:	2000      	movs	r0, #0
 800c518:	f04f 0c0a 	mov.w	ip, #10
 800c51c:	4621      	mov	r1, r4
 800c51e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c522:	3b30      	subs	r3, #48	; 0x30
 800c524:	2b09      	cmp	r3, #9
 800c526:	d94d      	bls.n	800c5c4 <_svfiprintf_r+0x17c>
 800c528:	b1b0      	cbz	r0, 800c558 <_svfiprintf_r+0x110>
 800c52a:	9207      	str	r2, [sp, #28]
 800c52c:	e014      	b.n	800c558 <_svfiprintf_r+0x110>
 800c52e:	eba0 0308 	sub.w	r3, r0, r8
 800c532:	fa09 f303 	lsl.w	r3, r9, r3
 800c536:	4313      	orrs	r3, r2
 800c538:	9304      	str	r3, [sp, #16]
 800c53a:	46a2      	mov	sl, r4
 800c53c:	e7d2      	b.n	800c4e4 <_svfiprintf_r+0x9c>
 800c53e:	9b03      	ldr	r3, [sp, #12]
 800c540:	1d19      	adds	r1, r3, #4
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	9103      	str	r1, [sp, #12]
 800c546:	2b00      	cmp	r3, #0
 800c548:	bfbb      	ittet	lt
 800c54a:	425b      	neglt	r3, r3
 800c54c:	f042 0202 	orrlt.w	r2, r2, #2
 800c550:	9307      	strge	r3, [sp, #28]
 800c552:	9307      	strlt	r3, [sp, #28]
 800c554:	bfb8      	it	lt
 800c556:	9204      	strlt	r2, [sp, #16]
 800c558:	7823      	ldrb	r3, [r4, #0]
 800c55a:	2b2e      	cmp	r3, #46	; 0x2e
 800c55c:	d10c      	bne.n	800c578 <_svfiprintf_r+0x130>
 800c55e:	7863      	ldrb	r3, [r4, #1]
 800c560:	2b2a      	cmp	r3, #42	; 0x2a
 800c562:	d134      	bne.n	800c5ce <_svfiprintf_r+0x186>
 800c564:	9b03      	ldr	r3, [sp, #12]
 800c566:	1d1a      	adds	r2, r3, #4
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	9203      	str	r2, [sp, #12]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	bfb8      	it	lt
 800c570:	f04f 33ff 	movlt.w	r3, #4294967295
 800c574:	3402      	adds	r4, #2
 800c576:	9305      	str	r3, [sp, #20]
 800c578:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c640 <_svfiprintf_r+0x1f8>
 800c57c:	7821      	ldrb	r1, [r4, #0]
 800c57e:	2203      	movs	r2, #3
 800c580:	4650      	mov	r0, sl
 800c582:	f7f3 fe4d 	bl	8000220 <memchr>
 800c586:	b138      	cbz	r0, 800c598 <_svfiprintf_r+0x150>
 800c588:	9b04      	ldr	r3, [sp, #16]
 800c58a:	eba0 000a 	sub.w	r0, r0, sl
 800c58e:	2240      	movs	r2, #64	; 0x40
 800c590:	4082      	lsls	r2, r0
 800c592:	4313      	orrs	r3, r2
 800c594:	3401      	adds	r4, #1
 800c596:	9304      	str	r3, [sp, #16]
 800c598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c59c:	4825      	ldr	r0, [pc, #148]	; (800c634 <_svfiprintf_r+0x1ec>)
 800c59e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5a2:	2206      	movs	r2, #6
 800c5a4:	f7f3 fe3c 	bl	8000220 <memchr>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	d038      	beq.n	800c61e <_svfiprintf_r+0x1d6>
 800c5ac:	4b22      	ldr	r3, [pc, #136]	; (800c638 <_svfiprintf_r+0x1f0>)
 800c5ae:	bb1b      	cbnz	r3, 800c5f8 <_svfiprintf_r+0x1b0>
 800c5b0:	9b03      	ldr	r3, [sp, #12]
 800c5b2:	3307      	adds	r3, #7
 800c5b4:	f023 0307 	bic.w	r3, r3, #7
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	9303      	str	r3, [sp, #12]
 800c5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5be:	4433      	add	r3, r6
 800c5c0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5c2:	e768      	b.n	800c496 <_svfiprintf_r+0x4e>
 800c5c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5c8:	460c      	mov	r4, r1
 800c5ca:	2001      	movs	r0, #1
 800c5cc:	e7a6      	b.n	800c51c <_svfiprintf_r+0xd4>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	3401      	adds	r4, #1
 800c5d2:	9305      	str	r3, [sp, #20]
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	f04f 0c0a 	mov.w	ip, #10
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5e0:	3a30      	subs	r2, #48	; 0x30
 800c5e2:	2a09      	cmp	r2, #9
 800c5e4:	d903      	bls.n	800c5ee <_svfiprintf_r+0x1a6>
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d0c6      	beq.n	800c578 <_svfiprintf_r+0x130>
 800c5ea:	9105      	str	r1, [sp, #20]
 800c5ec:	e7c4      	b.n	800c578 <_svfiprintf_r+0x130>
 800c5ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e7f0      	b.n	800c5da <_svfiprintf_r+0x192>
 800c5f8:	ab03      	add	r3, sp, #12
 800c5fa:	9300      	str	r3, [sp, #0]
 800c5fc:	462a      	mov	r2, r5
 800c5fe:	4b0f      	ldr	r3, [pc, #60]	; (800c63c <_svfiprintf_r+0x1f4>)
 800c600:	a904      	add	r1, sp, #16
 800c602:	4638      	mov	r0, r7
 800c604:	f3af 8000 	nop.w
 800c608:	1c42      	adds	r2, r0, #1
 800c60a:	4606      	mov	r6, r0
 800c60c:	d1d6      	bne.n	800c5bc <_svfiprintf_r+0x174>
 800c60e:	89ab      	ldrh	r3, [r5, #12]
 800c610:	065b      	lsls	r3, r3, #25
 800c612:	f53f af2d 	bmi.w	800c470 <_svfiprintf_r+0x28>
 800c616:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c618:	b01d      	add	sp, #116	; 0x74
 800c61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c61e:	ab03      	add	r3, sp, #12
 800c620:	9300      	str	r3, [sp, #0]
 800c622:	462a      	mov	r2, r5
 800c624:	4b05      	ldr	r3, [pc, #20]	; (800c63c <_svfiprintf_r+0x1f4>)
 800c626:	a904      	add	r1, sp, #16
 800c628:	4638      	mov	r0, r7
 800c62a:	f000 f879 	bl	800c720 <_printf_i>
 800c62e:	e7eb      	b.n	800c608 <_svfiprintf_r+0x1c0>
 800c630:	0800cb54 	.word	0x0800cb54
 800c634:	0800cb5e 	.word	0x0800cb5e
 800c638:	00000000 	.word	0x00000000
 800c63c:	0800c395 	.word	0x0800c395
 800c640:	0800cb5a 	.word	0x0800cb5a

0800c644 <_printf_common>:
 800c644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c648:	4616      	mov	r6, r2
 800c64a:	4699      	mov	r9, r3
 800c64c:	688a      	ldr	r2, [r1, #8]
 800c64e:	690b      	ldr	r3, [r1, #16]
 800c650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c654:	4293      	cmp	r3, r2
 800c656:	bfb8      	it	lt
 800c658:	4613      	movlt	r3, r2
 800c65a:	6033      	str	r3, [r6, #0]
 800c65c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c660:	4607      	mov	r7, r0
 800c662:	460c      	mov	r4, r1
 800c664:	b10a      	cbz	r2, 800c66a <_printf_common+0x26>
 800c666:	3301      	adds	r3, #1
 800c668:	6033      	str	r3, [r6, #0]
 800c66a:	6823      	ldr	r3, [r4, #0]
 800c66c:	0699      	lsls	r1, r3, #26
 800c66e:	bf42      	ittt	mi
 800c670:	6833      	ldrmi	r3, [r6, #0]
 800c672:	3302      	addmi	r3, #2
 800c674:	6033      	strmi	r3, [r6, #0]
 800c676:	6825      	ldr	r5, [r4, #0]
 800c678:	f015 0506 	ands.w	r5, r5, #6
 800c67c:	d106      	bne.n	800c68c <_printf_common+0x48>
 800c67e:	f104 0a19 	add.w	sl, r4, #25
 800c682:	68e3      	ldr	r3, [r4, #12]
 800c684:	6832      	ldr	r2, [r6, #0]
 800c686:	1a9b      	subs	r3, r3, r2
 800c688:	42ab      	cmp	r3, r5
 800c68a:	dc26      	bgt.n	800c6da <_printf_common+0x96>
 800c68c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c690:	1e13      	subs	r3, r2, #0
 800c692:	6822      	ldr	r2, [r4, #0]
 800c694:	bf18      	it	ne
 800c696:	2301      	movne	r3, #1
 800c698:	0692      	lsls	r2, r2, #26
 800c69a:	d42b      	bmi.n	800c6f4 <_printf_common+0xb0>
 800c69c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6a0:	4649      	mov	r1, r9
 800c6a2:	4638      	mov	r0, r7
 800c6a4:	47c0      	blx	r8
 800c6a6:	3001      	adds	r0, #1
 800c6a8:	d01e      	beq.n	800c6e8 <_printf_common+0xa4>
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	6922      	ldr	r2, [r4, #16]
 800c6ae:	f003 0306 	and.w	r3, r3, #6
 800c6b2:	2b04      	cmp	r3, #4
 800c6b4:	bf02      	ittt	eq
 800c6b6:	68e5      	ldreq	r5, [r4, #12]
 800c6b8:	6833      	ldreq	r3, [r6, #0]
 800c6ba:	1aed      	subeq	r5, r5, r3
 800c6bc:	68a3      	ldr	r3, [r4, #8]
 800c6be:	bf0c      	ite	eq
 800c6c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6c4:	2500      	movne	r5, #0
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	bfc4      	itt	gt
 800c6ca:	1a9b      	subgt	r3, r3, r2
 800c6cc:	18ed      	addgt	r5, r5, r3
 800c6ce:	2600      	movs	r6, #0
 800c6d0:	341a      	adds	r4, #26
 800c6d2:	42b5      	cmp	r5, r6
 800c6d4:	d11a      	bne.n	800c70c <_printf_common+0xc8>
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	e008      	b.n	800c6ec <_printf_common+0xa8>
 800c6da:	2301      	movs	r3, #1
 800c6dc:	4652      	mov	r2, sl
 800c6de:	4649      	mov	r1, r9
 800c6e0:	4638      	mov	r0, r7
 800c6e2:	47c0      	blx	r8
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	d103      	bne.n	800c6f0 <_printf_common+0xac>
 800c6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f0:	3501      	adds	r5, #1
 800c6f2:	e7c6      	b.n	800c682 <_printf_common+0x3e>
 800c6f4:	18e1      	adds	r1, r4, r3
 800c6f6:	1c5a      	adds	r2, r3, #1
 800c6f8:	2030      	movs	r0, #48	; 0x30
 800c6fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6fe:	4422      	add	r2, r4
 800c700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c708:	3302      	adds	r3, #2
 800c70a:	e7c7      	b.n	800c69c <_printf_common+0x58>
 800c70c:	2301      	movs	r3, #1
 800c70e:	4622      	mov	r2, r4
 800c710:	4649      	mov	r1, r9
 800c712:	4638      	mov	r0, r7
 800c714:	47c0      	blx	r8
 800c716:	3001      	adds	r0, #1
 800c718:	d0e6      	beq.n	800c6e8 <_printf_common+0xa4>
 800c71a:	3601      	adds	r6, #1
 800c71c:	e7d9      	b.n	800c6d2 <_printf_common+0x8e>
	...

0800c720 <_printf_i>:
 800c720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c724:	7e0f      	ldrb	r7, [r1, #24]
 800c726:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c728:	2f78      	cmp	r7, #120	; 0x78
 800c72a:	4691      	mov	r9, r2
 800c72c:	4680      	mov	r8, r0
 800c72e:	460c      	mov	r4, r1
 800c730:	469a      	mov	sl, r3
 800c732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c736:	d807      	bhi.n	800c748 <_printf_i+0x28>
 800c738:	2f62      	cmp	r7, #98	; 0x62
 800c73a:	d80a      	bhi.n	800c752 <_printf_i+0x32>
 800c73c:	2f00      	cmp	r7, #0
 800c73e:	f000 80d4 	beq.w	800c8ea <_printf_i+0x1ca>
 800c742:	2f58      	cmp	r7, #88	; 0x58
 800c744:	f000 80c0 	beq.w	800c8c8 <_printf_i+0x1a8>
 800c748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c74c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c750:	e03a      	b.n	800c7c8 <_printf_i+0xa8>
 800c752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c756:	2b15      	cmp	r3, #21
 800c758:	d8f6      	bhi.n	800c748 <_printf_i+0x28>
 800c75a:	a101      	add	r1, pc, #4	; (adr r1, 800c760 <_printf_i+0x40>)
 800c75c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c760:	0800c7b9 	.word	0x0800c7b9
 800c764:	0800c7cd 	.word	0x0800c7cd
 800c768:	0800c749 	.word	0x0800c749
 800c76c:	0800c749 	.word	0x0800c749
 800c770:	0800c749 	.word	0x0800c749
 800c774:	0800c749 	.word	0x0800c749
 800c778:	0800c7cd 	.word	0x0800c7cd
 800c77c:	0800c749 	.word	0x0800c749
 800c780:	0800c749 	.word	0x0800c749
 800c784:	0800c749 	.word	0x0800c749
 800c788:	0800c749 	.word	0x0800c749
 800c78c:	0800c8d1 	.word	0x0800c8d1
 800c790:	0800c7f9 	.word	0x0800c7f9
 800c794:	0800c88b 	.word	0x0800c88b
 800c798:	0800c749 	.word	0x0800c749
 800c79c:	0800c749 	.word	0x0800c749
 800c7a0:	0800c8f3 	.word	0x0800c8f3
 800c7a4:	0800c749 	.word	0x0800c749
 800c7a8:	0800c7f9 	.word	0x0800c7f9
 800c7ac:	0800c749 	.word	0x0800c749
 800c7b0:	0800c749 	.word	0x0800c749
 800c7b4:	0800c893 	.word	0x0800c893
 800c7b8:	682b      	ldr	r3, [r5, #0]
 800c7ba:	1d1a      	adds	r2, r3, #4
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	602a      	str	r2, [r5, #0]
 800c7c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	e09f      	b.n	800c90c <_printf_i+0x1ec>
 800c7cc:	6820      	ldr	r0, [r4, #0]
 800c7ce:	682b      	ldr	r3, [r5, #0]
 800c7d0:	0607      	lsls	r7, r0, #24
 800c7d2:	f103 0104 	add.w	r1, r3, #4
 800c7d6:	6029      	str	r1, [r5, #0]
 800c7d8:	d501      	bpl.n	800c7de <_printf_i+0xbe>
 800c7da:	681e      	ldr	r6, [r3, #0]
 800c7dc:	e003      	b.n	800c7e6 <_printf_i+0xc6>
 800c7de:	0646      	lsls	r6, r0, #25
 800c7e0:	d5fb      	bpl.n	800c7da <_printf_i+0xba>
 800c7e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c7e6:	2e00      	cmp	r6, #0
 800c7e8:	da03      	bge.n	800c7f2 <_printf_i+0xd2>
 800c7ea:	232d      	movs	r3, #45	; 0x2d
 800c7ec:	4276      	negs	r6, r6
 800c7ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7f2:	485a      	ldr	r0, [pc, #360]	; (800c95c <_printf_i+0x23c>)
 800c7f4:	230a      	movs	r3, #10
 800c7f6:	e012      	b.n	800c81e <_printf_i+0xfe>
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	6820      	ldr	r0, [r4, #0]
 800c7fc:	1d19      	adds	r1, r3, #4
 800c7fe:	6029      	str	r1, [r5, #0]
 800c800:	0605      	lsls	r5, r0, #24
 800c802:	d501      	bpl.n	800c808 <_printf_i+0xe8>
 800c804:	681e      	ldr	r6, [r3, #0]
 800c806:	e002      	b.n	800c80e <_printf_i+0xee>
 800c808:	0641      	lsls	r1, r0, #25
 800c80a:	d5fb      	bpl.n	800c804 <_printf_i+0xe4>
 800c80c:	881e      	ldrh	r6, [r3, #0]
 800c80e:	4853      	ldr	r0, [pc, #332]	; (800c95c <_printf_i+0x23c>)
 800c810:	2f6f      	cmp	r7, #111	; 0x6f
 800c812:	bf0c      	ite	eq
 800c814:	2308      	moveq	r3, #8
 800c816:	230a      	movne	r3, #10
 800c818:	2100      	movs	r1, #0
 800c81a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c81e:	6865      	ldr	r5, [r4, #4]
 800c820:	60a5      	str	r5, [r4, #8]
 800c822:	2d00      	cmp	r5, #0
 800c824:	bfa2      	ittt	ge
 800c826:	6821      	ldrge	r1, [r4, #0]
 800c828:	f021 0104 	bicge.w	r1, r1, #4
 800c82c:	6021      	strge	r1, [r4, #0]
 800c82e:	b90e      	cbnz	r6, 800c834 <_printf_i+0x114>
 800c830:	2d00      	cmp	r5, #0
 800c832:	d04b      	beq.n	800c8cc <_printf_i+0x1ac>
 800c834:	4615      	mov	r5, r2
 800c836:	fbb6 f1f3 	udiv	r1, r6, r3
 800c83a:	fb03 6711 	mls	r7, r3, r1, r6
 800c83e:	5dc7      	ldrb	r7, [r0, r7]
 800c840:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c844:	4637      	mov	r7, r6
 800c846:	42bb      	cmp	r3, r7
 800c848:	460e      	mov	r6, r1
 800c84a:	d9f4      	bls.n	800c836 <_printf_i+0x116>
 800c84c:	2b08      	cmp	r3, #8
 800c84e:	d10b      	bne.n	800c868 <_printf_i+0x148>
 800c850:	6823      	ldr	r3, [r4, #0]
 800c852:	07de      	lsls	r6, r3, #31
 800c854:	d508      	bpl.n	800c868 <_printf_i+0x148>
 800c856:	6923      	ldr	r3, [r4, #16]
 800c858:	6861      	ldr	r1, [r4, #4]
 800c85a:	4299      	cmp	r1, r3
 800c85c:	bfde      	ittt	le
 800c85e:	2330      	movle	r3, #48	; 0x30
 800c860:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c864:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c868:	1b52      	subs	r2, r2, r5
 800c86a:	6122      	str	r2, [r4, #16]
 800c86c:	f8cd a000 	str.w	sl, [sp]
 800c870:	464b      	mov	r3, r9
 800c872:	aa03      	add	r2, sp, #12
 800c874:	4621      	mov	r1, r4
 800c876:	4640      	mov	r0, r8
 800c878:	f7ff fee4 	bl	800c644 <_printf_common>
 800c87c:	3001      	adds	r0, #1
 800c87e:	d14a      	bne.n	800c916 <_printf_i+0x1f6>
 800c880:	f04f 30ff 	mov.w	r0, #4294967295
 800c884:	b004      	add	sp, #16
 800c886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c88a:	6823      	ldr	r3, [r4, #0]
 800c88c:	f043 0320 	orr.w	r3, r3, #32
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	4833      	ldr	r0, [pc, #204]	; (800c960 <_printf_i+0x240>)
 800c894:	2778      	movs	r7, #120	; 0x78
 800c896:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c89a:	6823      	ldr	r3, [r4, #0]
 800c89c:	6829      	ldr	r1, [r5, #0]
 800c89e:	061f      	lsls	r7, r3, #24
 800c8a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c8a4:	d402      	bmi.n	800c8ac <_printf_i+0x18c>
 800c8a6:	065f      	lsls	r7, r3, #25
 800c8a8:	bf48      	it	mi
 800c8aa:	b2b6      	uxthmi	r6, r6
 800c8ac:	07df      	lsls	r7, r3, #31
 800c8ae:	bf48      	it	mi
 800c8b0:	f043 0320 	orrmi.w	r3, r3, #32
 800c8b4:	6029      	str	r1, [r5, #0]
 800c8b6:	bf48      	it	mi
 800c8b8:	6023      	strmi	r3, [r4, #0]
 800c8ba:	b91e      	cbnz	r6, 800c8c4 <_printf_i+0x1a4>
 800c8bc:	6823      	ldr	r3, [r4, #0]
 800c8be:	f023 0320 	bic.w	r3, r3, #32
 800c8c2:	6023      	str	r3, [r4, #0]
 800c8c4:	2310      	movs	r3, #16
 800c8c6:	e7a7      	b.n	800c818 <_printf_i+0xf8>
 800c8c8:	4824      	ldr	r0, [pc, #144]	; (800c95c <_printf_i+0x23c>)
 800c8ca:	e7e4      	b.n	800c896 <_printf_i+0x176>
 800c8cc:	4615      	mov	r5, r2
 800c8ce:	e7bd      	b.n	800c84c <_printf_i+0x12c>
 800c8d0:	682b      	ldr	r3, [r5, #0]
 800c8d2:	6826      	ldr	r6, [r4, #0]
 800c8d4:	6961      	ldr	r1, [r4, #20]
 800c8d6:	1d18      	adds	r0, r3, #4
 800c8d8:	6028      	str	r0, [r5, #0]
 800c8da:	0635      	lsls	r5, r6, #24
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	d501      	bpl.n	800c8e4 <_printf_i+0x1c4>
 800c8e0:	6019      	str	r1, [r3, #0]
 800c8e2:	e002      	b.n	800c8ea <_printf_i+0x1ca>
 800c8e4:	0670      	lsls	r0, r6, #25
 800c8e6:	d5fb      	bpl.n	800c8e0 <_printf_i+0x1c0>
 800c8e8:	8019      	strh	r1, [r3, #0]
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	6123      	str	r3, [r4, #16]
 800c8ee:	4615      	mov	r5, r2
 800c8f0:	e7bc      	b.n	800c86c <_printf_i+0x14c>
 800c8f2:	682b      	ldr	r3, [r5, #0]
 800c8f4:	1d1a      	adds	r2, r3, #4
 800c8f6:	602a      	str	r2, [r5, #0]
 800c8f8:	681d      	ldr	r5, [r3, #0]
 800c8fa:	6862      	ldr	r2, [r4, #4]
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	4628      	mov	r0, r5
 800c900:	f7f3 fc8e 	bl	8000220 <memchr>
 800c904:	b108      	cbz	r0, 800c90a <_printf_i+0x1ea>
 800c906:	1b40      	subs	r0, r0, r5
 800c908:	6060      	str	r0, [r4, #4]
 800c90a:	6863      	ldr	r3, [r4, #4]
 800c90c:	6123      	str	r3, [r4, #16]
 800c90e:	2300      	movs	r3, #0
 800c910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c914:	e7aa      	b.n	800c86c <_printf_i+0x14c>
 800c916:	6923      	ldr	r3, [r4, #16]
 800c918:	462a      	mov	r2, r5
 800c91a:	4649      	mov	r1, r9
 800c91c:	4640      	mov	r0, r8
 800c91e:	47d0      	blx	sl
 800c920:	3001      	adds	r0, #1
 800c922:	d0ad      	beq.n	800c880 <_printf_i+0x160>
 800c924:	6823      	ldr	r3, [r4, #0]
 800c926:	079b      	lsls	r3, r3, #30
 800c928:	d413      	bmi.n	800c952 <_printf_i+0x232>
 800c92a:	68e0      	ldr	r0, [r4, #12]
 800c92c:	9b03      	ldr	r3, [sp, #12]
 800c92e:	4298      	cmp	r0, r3
 800c930:	bfb8      	it	lt
 800c932:	4618      	movlt	r0, r3
 800c934:	e7a6      	b.n	800c884 <_printf_i+0x164>
 800c936:	2301      	movs	r3, #1
 800c938:	4632      	mov	r2, r6
 800c93a:	4649      	mov	r1, r9
 800c93c:	4640      	mov	r0, r8
 800c93e:	47d0      	blx	sl
 800c940:	3001      	adds	r0, #1
 800c942:	d09d      	beq.n	800c880 <_printf_i+0x160>
 800c944:	3501      	adds	r5, #1
 800c946:	68e3      	ldr	r3, [r4, #12]
 800c948:	9903      	ldr	r1, [sp, #12]
 800c94a:	1a5b      	subs	r3, r3, r1
 800c94c:	42ab      	cmp	r3, r5
 800c94e:	dcf2      	bgt.n	800c936 <_printf_i+0x216>
 800c950:	e7eb      	b.n	800c92a <_printf_i+0x20a>
 800c952:	2500      	movs	r5, #0
 800c954:	f104 0619 	add.w	r6, r4, #25
 800c958:	e7f5      	b.n	800c946 <_printf_i+0x226>
 800c95a:	bf00      	nop
 800c95c:	0800cb65 	.word	0x0800cb65
 800c960:	0800cb76 	.word	0x0800cb76

0800c964 <memmove>:
 800c964:	4288      	cmp	r0, r1
 800c966:	b510      	push	{r4, lr}
 800c968:	eb01 0402 	add.w	r4, r1, r2
 800c96c:	d902      	bls.n	800c974 <memmove+0x10>
 800c96e:	4284      	cmp	r4, r0
 800c970:	4623      	mov	r3, r4
 800c972:	d807      	bhi.n	800c984 <memmove+0x20>
 800c974:	1e43      	subs	r3, r0, #1
 800c976:	42a1      	cmp	r1, r4
 800c978:	d008      	beq.n	800c98c <memmove+0x28>
 800c97a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c97e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c982:	e7f8      	b.n	800c976 <memmove+0x12>
 800c984:	4402      	add	r2, r0
 800c986:	4601      	mov	r1, r0
 800c988:	428a      	cmp	r2, r1
 800c98a:	d100      	bne.n	800c98e <memmove+0x2a>
 800c98c:	bd10      	pop	{r4, pc}
 800c98e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c996:	e7f7      	b.n	800c988 <memmove+0x24>

0800c998 <_sbrk_r>:
 800c998:	b538      	push	{r3, r4, r5, lr}
 800c99a:	4d06      	ldr	r5, [pc, #24]	; (800c9b4 <_sbrk_r+0x1c>)
 800c99c:	2300      	movs	r3, #0
 800c99e:	4604      	mov	r4, r0
 800c9a0:	4608      	mov	r0, r1
 800c9a2:	602b      	str	r3, [r5, #0]
 800c9a4:	f7f3 ffee 	bl	8000984 <_sbrk>
 800c9a8:	1c43      	adds	r3, r0, #1
 800c9aa:	d102      	bne.n	800c9b2 <_sbrk_r+0x1a>
 800c9ac:	682b      	ldr	r3, [r5, #0]
 800c9ae:	b103      	cbz	r3, 800c9b2 <_sbrk_r+0x1a>
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	bd38      	pop	{r3, r4, r5, pc}
 800c9b4:	20002f84 	.word	0x20002f84

0800c9b8 <_realloc_r>:
 800c9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9bc:	4680      	mov	r8, r0
 800c9be:	4614      	mov	r4, r2
 800c9c0:	460e      	mov	r6, r1
 800c9c2:	b921      	cbnz	r1, 800c9ce <_realloc_r+0x16>
 800c9c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	f7ff bc57 	b.w	800c27c <_malloc_r>
 800c9ce:	b92a      	cbnz	r2, 800c9dc <_realloc_r+0x24>
 800c9d0:	f7ff fbe8 	bl	800c1a4 <_free_r>
 800c9d4:	4625      	mov	r5, r4
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9dc:	f000 f81b 	bl	800ca16 <_malloc_usable_size_r>
 800c9e0:	4284      	cmp	r4, r0
 800c9e2:	4607      	mov	r7, r0
 800c9e4:	d802      	bhi.n	800c9ec <_realloc_r+0x34>
 800c9e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c9ea:	d812      	bhi.n	800ca12 <_realloc_r+0x5a>
 800c9ec:	4621      	mov	r1, r4
 800c9ee:	4640      	mov	r0, r8
 800c9f0:	f7ff fc44 	bl	800c27c <_malloc_r>
 800c9f4:	4605      	mov	r5, r0
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	d0ed      	beq.n	800c9d6 <_realloc_r+0x1e>
 800c9fa:	42bc      	cmp	r4, r7
 800c9fc:	4622      	mov	r2, r4
 800c9fe:	4631      	mov	r1, r6
 800ca00:	bf28      	it	cs
 800ca02:	463a      	movcs	r2, r7
 800ca04:	f7ff fbc0 	bl	800c188 <memcpy>
 800ca08:	4631      	mov	r1, r6
 800ca0a:	4640      	mov	r0, r8
 800ca0c:	f7ff fbca 	bl	800c1a4 <_free_r>
 800ca10:	e7e1      	b.n	800c9d6 <_realloc_r+0x1e>
 800ca12:	4635      	mov	r5, r6
 800ca14:	e7df      	b.n	800c9d6 <_realloc_r+0x1e>

0800ca16 <_malloc_usable_size_r>:
 800ca16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca1a:	1f18      	subs	r0, r3, #4
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	bfbc      	itt	lt
 800ca20:	580b      	ldrlt	r3, [r1, r0]
 800ca22:	18c0      	addlt	r0, r0, r3
 800ca24:	4770      	bx	lr
	...

0800ca28 <_init>:
 800ca28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca2a:	bf00      	nop
 800ca2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca2e:	bc08      	pop	{r3}
 800ca30:	469e      	mov	lr, r3
 800ca32:	4770      	bx	lr

0800ca34 <_fini>:
 800ca34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca36:	bf00      	nop
 800ca38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca3a:	bc08      	pop	{r3}
 800ca3c:	469e      	mov	lr, r3
 800ca3e:	4770      	bx	lr
