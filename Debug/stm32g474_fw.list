
stm32g474_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be14  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800bff4  0800bff4  0001bff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0c8  0800c0c8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0c8  0800c0c8  0001c0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0d0  0800c0d0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0d0  0800c0d0  0001c0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0d4  0800c0d4  0001c0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c0d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00002d4c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002f28  20002f28  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b4e4  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004b42  00000000  00000000  0003b733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015c0  00000000  00000000  00040278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001050  00000000  00000000  00041838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b1ae  00000000  00000000  00042888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000223c1  00000000  00000000  0006da36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f5db5  00000000  00000000  0008fdf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b18  00000000  00000000  00185bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0018b6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bfdc 	.word	0x0800bfdc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800bfdc 	.word	0x0800bfdc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <apInit>:
static uint32_t g_LEDOffTime = 200;
static uint32_t nextmill = 0;
*/

void apInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <apMain>:

void apMain(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
  uint32_t pre_time1 = millis();
 80005d2:	f000 f88e 	bl	80006f2 <millis>
 80005d6:	60f8      	str	r0, [r7, #12]
  uint32_t pre_time2 = millis();
 80005d8:	f000 f88b 	bl	80006f2 <millis>
 80005dc:	60b8      	str	r0, [r7, #8]
  while(1)
  {
    /* LED Non blocking toggle*/
    /* Using Reg to toggle */
    if(millis()-pre_time1 >= 500)
 80005de:	f000 f888 	bl	80006f2 <millis>
 80005e2:	4602      	mov	r2, r0
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ec:	d307      	bcc.n	80005fe <apMain+0x32>
    {
      pre_time1 = millis();
 80005ee:	f000 f880 	bl	80006f2 <millis>
 80005f2:	60f8      	str	r0, [r7, #12]
      //ledToggle(_DEF_LED1);
      gpio_out_toggle(GPIOA, GPIO_PIN_5);
 80005f4:	2120      	movs	r1, #32
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f000 fb0b 	bl	8000c14 <gpio_out_toggle>
      blinkOn = true;
      nextmill = millis() + g_LEDOnTime;
    }
    */
    /* UART TESET - ERROR */
    if (uartAvailable(_DEF_UART1) > 0)
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fcd6 	bl	8000fb0 <uartAvailable>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0e9      	beq.n	80005de <apMain+0x12>
    {
      uint8_t rx_data;
      // 데이터를 읽어온다
      rx_data = uartRead(_DEF_UART1);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fcee 	bl	8000fec <uartRead>
 8000610:	4603      	mov	r3, r0
 8000612:	71fb      	strb	r3, [r7, #7]

      uartPrintf(_DEF_UART1, "Rx : 0x%X, %c\n", rx_data, rx_data);
 8000614:	79fa      	ldrb	r2, [r7, #7]
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4902      	ldr	r1, [pc, #8]	; (8000624 <apMain+0x58>)
 800061a:	2000      	movs	r0, #0
 800061c:	f000 fd28 	bl	8001070 <uartPrintf>
    if(millis()-pre_time1 >= 500)
 8000620:	e7dd      	b.n	80005de <apMain+0x12>
 8000622:	bf00      	nop
 8000624:	0800bff4 	.word	0x0800bff4

08000628 <bspInit>:
#include "usb_device.h"

void SystemClock_Config(void);

bool bspInit(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
  HAL_Init();
 800062e:	f000 fea4 	bl	800137a <HAL_Init>
  SystemClock_Config();
 8000632:	f000 f865 	bl	8000700 <SystemClock_Config>

  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <bspInit+0xb0>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <bspInit+0xb0>)
 800063c:	f043 0320 	orr.w	r3, r3, #32
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <bspInit+0xb0>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0320 	and.w	r3, r3, #32
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <bspInit+0xb0>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <bspInit+0xb0>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <bspInit+0xb0>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /* USB - RESET 시 장치관리자 해제 연결 안될 시 */

  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
  // PA12(USB_DP) 출력 설정
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 8000676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800067c:	2311      	movs	r3, #17
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4619      	mov	r1, r3
 800068e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000692:	f001 f8d5 	bl	8001840 <HAL_GPIO_Init>

  //회로에 PULL UP 이 걸려있다면 - 내리고
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a0:	f001 fa50 	bl	8001b44 <HAL_GPIO_WritePin>
  delay(100);
 80006a4:	2064      	movs	r0, #100	; 0x64
 80006a6:	f000 f819 	bl	80006dc <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f001 fa46 	bl	8001b44 <HAL_GPIO_WritePin>

  // INPUT 으로 다시 변경
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	4619      	mov	r1, r3
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c6:	f001 f8bb 	bl	8001840 <HAL_GPIO_Init>

  MX_USB_Device_Init();
 80006ca:	f00a fa37 	bl	800ab3c <MX_USB_Device_Init>

  return true;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000

080006dc <delay>:

void delay(uint32_t time_ms)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(time_ms);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 feb9 	bl	800145c <HAL_Delay>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <millis>:

uint32_t millis(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80006f6:	f000 fea5 	bl	8001444 <HAL_GetTick>
 80006fa:	4603      	mov	r3, r0
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	bd80      	pop	{r7, pc}

08000700 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0318 	add.w	r3, r7, #24
 800070a:	2238      	movs	r2, #56	; 0x38
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f00a ffe0 	bl	800b6d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000726:	f002 ff59 	bl	80035dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800072a:	2309      	movs	r3, #9
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073c:	2303      	movs	r3, #3
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0318 	add.w	r3, r7, #24
 8000758:	4618      	mov	r0, r3
 800075a:	f003 f875 	bl	8003848 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000764:	f000 f818 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2303      	movs	r3, #3
 800076e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2101      	movs	r1, #1
 8000780:	4618      	mov	r0, r3
 8000782:	f003 fb73 	bl	8003e6c <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800078c:	f000 f804 	bl	8000798 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	; 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <Error_Handler>:


void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_MspInit+0x44>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b2:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <HAL_MspInit+0x44>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <HAL_MspInit+0x44>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_MspInit+0x44>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_MspInit+0x44>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	6593      	str	r3, [r2, #88]	; 0x58
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x44>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007de:	f002 ffa1 	bl	8003724 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f4:	e7fe      	b.n	80007f4 <NMI_Handler+0x4>

080007f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <MemManage_Handler+0x4>

08000802 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <UsageFault_Handler+0x4>

0800080e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083c:	f000 fdf0 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <USB_LP_IRQHandler+0x10>)
 800084a:	f001 fa83 	bl	8001d54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200028e4 	.word	0x200028e4

08000858 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <USART1_IRQHandler+0x10>)
 800085e:	f004 f9e5 	bl	8004c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000348 	.word	0x20000348

0800086c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <_sbrk+0x5c>)
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <_sbrk+0x60>)
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <_sbrk+0x64>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <_sbrk+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d207      	bcs.n	80008ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800089c:	f00a ff22 	bl	800b6e4 <__errno>
 80008a0:	4603      	mov	r3, r0
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	e009      	b.n	80008c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <_sbrk+0x64>)
 80008bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20020000 	.word	0x20020000
 80008cc:	00000400 	.word	0x00000400
 80008d0:	200001f8 	.word	0x200001f8
 80008d4:	20002f28 	.word	0x20002f28

080008d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <SystemInit+0x20>)
 80008de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <SystemInit+0x20>)
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000900:	f7ff ffea 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <LoopForever+0x6>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	; (800093c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <LoopForever+0xe>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	; (8000948 <LoopForever+0x16>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800092a:	f00a fee1 	bl	800b6f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092e:	f00a fe8d 	bl	800b64c <main>

08000932 <LoopForever>:

LoopForever:
  b LoopForever
 8000932:	e7fe      	b.n	8000932 <LoopForever>
  ldr   r0, =_estack
 8000934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000940:	0800c0d8 	.word	0x0800c0d8
  ldr r2, =_sbss
 8000944:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000948:	20002f28 	.word	0x20002f28

0800094c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC1_2_IRQHandler>

0800094e <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800094e:	b480      	push	{r7}
 8000950:	b087      	sub	sp, #28
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800095a:	2301      	movs	r3, #1
 800095c:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2201      	movs	r2, #1
 8000974:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	68ba      	ldr	r2, [r7, #8]
 800097a:	611a      	str	r2, [r3, #16]

  return ret;
 800097c:	7dfb      	ldrb	r3, [r7, #23]
}
 800097e:	4618      	mov	r0, r3
 8000980:	371c      	adds	r7, #28
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <qbufferWrite>:

  return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800098a:	b480      	push	{r7}
 800098c:	b08b      	sub	sp, #44	; 0x2c
 800098e:	af00      	add	r7, sp, #0
 8000990:	60f8      	str	r0, [r7, #12]
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000996:	2301      	movs	r3, #1
 8000998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t next_in;


  for (int i=0; i<length; i++)
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
 80009a0:	e043      	b.n	8000a2a <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	6892      	ldr	r2, [r2, #8]
 80009ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80009b0:	fb01 f202 	mul.w	r2, r1, r2
 80009b4:	1a9b      	subs	r3, r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d02c      	beq.n	8000a1c <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	691b      	ldr	r3, [r3, #16]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d024      	beq.n	8000a14 <qbufferWrite+0x8a>
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d021      	beq.n	8000a14 <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	691a      	ldr	r2, [r3, #16]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	68f9      	ldr	r1, [r7, #12]
 80009da:	68c9      	ldr	r1, [r1, #12]
 80009dc:	fb01 f303 	mul.w	r3, r1, r3
 80009e0:	4413      	add	r3, r2
 80009e2:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
 80009e8:	e00a      	b.n	8000a00 <qbufferWrite+0x76>
        {
          p_buf[i] = p_data[i];
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	68ba      	ldr	r2, [r7, #8]
 80009ee:	441a      	add	r2, r3
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	6979      	ldr	r1, [r7, #20]
 80009f4:	440b      	add	r3, r1
 80009f6:	7812      	ldrb	r2, [r2, #0]
 80009f8:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3301      	adds	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d8ef      	bhi.n	80009ea <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	4413      	add	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	e003      	b.n	8000a24 <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a22:	e006      	b.n	8000a32 <qbufferWrite+0xa8>
  for (int i=0; i<length; i++)
 8000a24:	6a3b      	ldr	r3, [r7, #32]
 8000a26:	3301      	adds	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
 8000a2a:	6a3b      	ldr	r3, [r7, #32]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d8b7      	bhi.n	80009a2 <qbufferWrite+0x18>
    }
  }

  return ret;
 8000a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	372c      	adds	r7, #44	; 0x2c
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b089      	sub	sp, #36	; 0x24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	77fb      	strb	r3, [r7, #31]


  for (int i=0; i<length; i++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	e041      	b.n	8000adc <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	691b      	ldr	r3, [r3, #16]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d024      	beq.n	8000aaa <qbufferRead+0x68>
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d021      	beq.n	8000aaa <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	691a      	ldr	r2, [r3, #16]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	68f9      	ldr	r1, [r7, #12]
 8000a70:	68c9      	ldr	r1, [r1, #12]
 8000a72:	fb01 f303 	mul.w	r3, r1, r3
 8000a76:	4413      	add	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	e00a      	b.n	8000a96 <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	441a      	add	r2, r3
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	68b9      	ldr	r1, [r7, #8]
 8000a8a:	440b      	add	r3, r1
 8000a8c:	7812      	ldrb	r2, [r2, #0]
 8000a8e:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3301      	adds	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	68da      	ldr	r2, [r3, #12]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d8ef      	bhi.n	8000a80 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	68ba      	ldr	r2, [r7, #8]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d00c      	beq.n	8000ad0 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	3301      	adds	r3, #1
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	6892      	ldr	r2, [r2, #8]
 8000ac0:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ac4:	fb01 f202 	mul.w	r2, r1, r2
 8000ac8:	1a9a      	subs	r2, r3, r2
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	e002      	b.n	8000ad6 <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	77fb      	strb	r3, [r7, #31]
      break;
 8000ad4:	e006      	b.n	8000ae4 <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d8b9      	bhi.n	8000a58 <qbufferRead+0x16>
    }
  }

  return ret;
 8000ae4:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b085      	sub	sp, #20
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	6892      	ldr	r2, [r2, #8]
 8000b08:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b0c:	fb01 f202 	mul.w	r2, r1, r2
 8000b10:	1a9b      	subs	r3, r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]

  return ret;
 8000b14:	68fb      	ldr	r3, [r7, #12]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <cdcInit>:


static bool is_init = false;

bool cdcInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  bool ret = true;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	71fb      	strb	r3, [r7, #7]


  ret = cdcIfInit();
 8000b2e:	f00a f95b 	bl	800ade8 <cdcIfInit>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	bf14      	ite	ne
 8000b38:	2301      	movne	r3, #1
 8000b3a:	2300      	moveq	r3, #0
 8000b3c:	71fb      	strb	r3, [r7, #7]

  is_init = ret;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <cdcInit+0x2c>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	7013      	strb	r3, [r2, #0]

  return ret;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200001fc 	.word	0x200001fc

08000b54 <ledInit>:




bool ledInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <ledInit+0x80>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <ledInit+0x80>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <ledInit+0x80>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
 8000b92:	e017      	b.n	8000bc4 <ledInit+0x70>
  {
    GPIO_InitStructure.Pin = led_tbl[i].pin;
 8000b94:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <ledInit+0x84>)
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	4413      	add	r3, r2
 8000b9c:	889b      	ldrh	r3, [r3, #4]
 8000b9e:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <ledInit+0x84>)
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ba8:	f107 0208 	add.w	r2, r7, #8
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fe46 	bl	8001840 <HAL_GPIO_Init>

    ledOff(i);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 f80f 	bl	8000bdc <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	61fb      	str	r3, [r7, #28]
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	dde4      	ble.n	8000b94 <ledInit+0x40>
  }
  return true;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	0800c064 	.word	0x0800c064

08000bdc <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d10d      	bne.n	8000c08 <ledOff+0x2c>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <ledOff+0x34>)
 8000bf0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <ledOff+0x34>)
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	4413      	add	r3, r2
 8000bfc:	889b      	ldrh	r3, [r3, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4619      	mov	r1, r3
 8000c02:	f000 ff9f 	bl	8001b44 <HAL_GPIO_WritePin>
 8000c06:	e000      	b.n	8000c0a <ledOff+0x2e>
  if (ch >= LED_MAX_CH) return;
 8000c08:	bf00      	nop
}
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	0800c064 	.word	0x0800c064

08000c14 <gpio_out_toggle>:
  gpio->ODR &= ~(GPIO_Pin);
}

//
void gpio_out_toggle(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	807b      	strh	r3, [r7, #2]
  GPIO_TypeDef *gpio = (void*)GPIOA_BASE;
 8000c20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c24:	60fb      	str	r3, [r7, #12]
  gpio->ODR ^= GPIO_Pin;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	695a      	ldr	r2, [r3, #20]
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	405a      	eors	r2, r3
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	615a      	str	r2, [r3, #20]
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <resetInit>:
  }
}


bool resetInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  bool ret = true;
 8000c46:	2301      	movs	r3, #1
 8000c48:	71bb      	strb	r3, [r7, #6]
  bool is_debug = false;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	71fb      	strb	r3, [r7, #7]

#if 1
  // 만약 디버거가 연결된 경우
  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <resetInit+0x70>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <resetInit+0x1e>
  {
    is_debug = true;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	71fb      	strb	r3, [r7, #7]
  }

  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if (RCC->CSR & (1<<26) && is_debug != true)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <resetInit+0x74>)
 8000c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d018      	beq.n	8000c9e <resetInit+0x5e>
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f083 0301 	eor.w	r3, r3, #1
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d012      	beq.n	8000c9e <resetInit+0x5e>
  {
    rtcBackupRegWrite(RESET_REG_COUNT, rtcBackupRegRead(RESET_REG_COUNT) + 1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f000 f8af 	bl	8000ddc <rtcBackupRegRead>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	3301      	adds	r3, #1
 8000c82:	4619      	mov	r1, r3
 8000c84:	2001      	movs	r0, #1
 8000c86:	f000 f8b9 	bl	8000dfc <rtcBackupRegWrite>
    delay(500);
 8000c8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c8e:	f7ff fd25 	bl	80006dc <delay>
    reset_count = rtcBackupRegRead(RESET_REG_COUNT);
 8000c92:	2001      	movs	r0, #1
 8000c94:	f000 f8a2 	bl	8000ddc <rtcBackupRegRead>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <resetInit+0x78>)
 8000c9c:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  rtcBackupRegWrite(RESET_REG_COUNT, 0);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f000 f8ab 	bl	8000dfc <rtcBackupRegWrite>
#endif

  return ret;
 8000ca6:	79bb      	ldrb	r3, [r7, #6]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	e000edf0 	.word	0xe000edf0
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	20000200 	.word	0x20000200

08000cbc <resetGetCount>:

uint32_t resetGetCount(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return reset_count;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <resetGetCount+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000200 	.word	0x20000200

08000cd4 <resetToSystemBoot>:
    run_timeout_count = timeout;
  }
}

void resetToSystemBoot(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
  void (*SysMemBootJump)(void);
  volatile uint32_t addr = 0x1FFF0000; // System Boot Loader 주소
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <resetToSystemBoot+0x7c>)
 8000cdc:	603b      	str	r3, [r7, #0]


  HAL_RCC_DeInit();
 8000cde:	f002 fd31 	bl	8003744 <HAL_RCC_DeInit>

  SysTick->CTRL = 0;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <resetToSystemBoot+0x80>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <resetToSystemBoot+0x80>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
  SysTick->VAL  = 0;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <resetToSystemBoot+0x80>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]

  // 인터럽트
  for (int i=0;i<8;i++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	e016      	b.n	8000d28 <resetToSystemBoot+0x54>
  {
    NVIC->ICER[i]=0xFFFFFFFF;
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <resetToSystemBoot+0x84>)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3320      	adds	r3, #32
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NVIC->ICPR[i]=0xFFFFFFFF;
 8000d08:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <resetToSystemBoot+0x84>)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3360      	adds	r3, #96	; 0x60
 8000d0e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d16:	f3bf 8f4f 	dsb	sy
}
 8000d1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d1c:	f3bf 8f6f 	isb	sy
}
 8000d20:	bf00      	nop
  for (int i=0;i<8;i++)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	3301      	adds	r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2b07      	cmp	r3, #7
 8000d2c:	dde5      	ble.n	8000cfa <resetToSystemBoot+0x26>
    __DSB();
    __ISB();
  }

  SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	3304      	adds	r3, #4
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60bb      	str	r3, [r7, #8]

  // Main Stack 주소 셋팅
  __set_MSP(*(uint32_t *)addr);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f383 8808 	msr	MSP, r3
}
 8000d42:	bf00      	nop
  // Jump
  SysMemBootJump();
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4798      	blx	r3
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	1fff0000 	.word	0x1fff0000
 8000d54:	e000e010 	.word	0xe000e010
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  bool ret = true;
 8000d62:	2301      	movs	r3, #1
 8000d64:	71fb      	strb	r3, [r7, #7]


  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <rtcInit+0x74>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <rtcInit+0x74>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <rtcInit+0x74>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]


  hrtc.Instance = RTC;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <rtcInit+0x78>)
 8000d80:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <rtcInit+0x7c>)
 8000d82:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <rtcInit+0x78>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <rtcInit+0x78>)
 8000d8c:	227f      	movs	r2, #127	; 0x7f
 8000d8e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <rtcInit+0x78>)
 8000d92:	22ff      	movs	r2, #255	; 0xff
 8000d94:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <rtcInit+0x78>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <rtcInit+0x78>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <rtcInit+0x78>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <rtcInit+0x78>)
 8000daa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dae:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <rtcInit+0x78>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000db6:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <rtcInit+0x78>)
 8000db8:	f003 fcc2 	bl	8004740 <HAL_RTC_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <rtcInit+0x6a>
  {
    return false;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <rtcInit+0x6c>
  }

  return ret;
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	20000204 	.word	0x20000204
 8000dd8:	40002800 	.word	0x40002800

08000ddc <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	4804      	ldr	r0, [pc, #16]	; (8000df8 <rtcBackupRegRead+0x1c>)
 8000de8:	f003 fde0 	bl	80049ac <HAL_RTCEx_BKUPRead>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000204 	.word	0x20000204

08000dfc <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	4803      	ldr	r0, [pc, #12]	; (8000e18 <rtcBackupRegWrite+0x1c>)
 8000e0c:	f003 fdb6 	bl	800497c <HAL_RTCEx_BKUPWrite>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000204 	.word	0x20000204

08000e1c <HAL_RTC_MspInit>:




void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_RTC_MspInit+0x30>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d107      	bne.n	8000e3e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_RTC_MspInit+0x34>)
 8000e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <HAL_RTC_MspInit+0x34>)
 8000e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40002800 	.word	0x40002800
 8000e50:	40021000 	.word	0x40021000

08000e54 <uartInit>:
UART_HandleTypeDef huart1;



bool uartInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
  for(int i = 0; i <UART_MAX_CH; i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	e007      	b.n	8000e70 <uartInit+0x1c>
  {
    is_open[i] = false;
 8000e60:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <uartInit+0x30>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i <UART_MAX_CH; i++)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	ddf4      	ble.n	8000e60 <uartInit+0xc>
  }

  return true;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	2000022c 	.word	0x2000022c

08000e88 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  bool ret =false;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d176      	bne.n	8000f8c <uartOpen+0x104>
  {
    case _DEF_UART1:
      huart1.Instance = USART1;
 8000e9e:	4b3e      	ldr	r3, [pc, #248]	; (8000f98 <uartOpen+0x110>)
 8000ea0:	4a3e      	ldr	r2, [pc, #248]	; (8000f9c <uartOpen+0x114>)
 8000ea2:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 8000ea4:	4a3c      	ldr	r2, [pc, #240]	; (8000f98 <uartOpen+0x110>)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	6053      	str	r3, [r2, #4]
      huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <uartOpen+0x110>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb0:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <uartOpen+0x110>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8000eb6:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <uartOpen+0x110>)
 8000eb8:	220c      	movs	r2, #12
 8000eba:	615a      	str	r2, [r3, #20]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ebc:	4b36      	ldr	r3, [pc, #216]	; (8000f98 <uartOpen+0x110>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
      huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec2:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <uartOpen+0x110>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
      huart1.Init.Parity = UART_PARITY_NONE;
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <uartOpen+0x110>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <uartOpen+0x110>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <uartOpen+0x110>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <uartOpen+0x110>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	629a      	str	r2, [r3, #40]	; 0x28
      qbufferCreate(&qbuffer[ch],&rx_buf[ch], 256); // 수신 버퍼 생성
 8000ee0:	79fa      	ldrb	r2, [r7, #7]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4a2d      	ldr	r2, [pc, #180]	; (8000fa0 <uartOpen+0x118>)
 8000eec:	1898      	adds	r0, r3, r2
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	4a2c      	ldr	r2, [pc, #176]	; (8000fa4 <uartOpen+0x11c>)
 8000ef2:	4413      	add	r3, r2
 8000ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fd28 	bl	800094e <qbufferCreate>
      if (HAL_UART_Init(&huart1) != HAL_OK)
 8000efe:	4826      	ldr	r0, [pc, #152]	; (8000f98 <uartOpen+0x110>)
 8000f00:	f003 fd6a 	bl	80049d8 <HAL_UART_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <uartOpen+0x88>
      {
        ret = false;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e016      	b.n	8000f3e <uartOpen+0xb6>
      }
      else
      {
        ret = true;
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <uartOpen+0x120>)
 8000f18:	2101      	movs	r1, #1
 8000f1a:	54d1      	strb	r1, [r2, r3]
        // 수신용 데이터 버퍼 (rx_data)에 size 만큼 받아서 HAL_UART_RxCpltCallback 함수 호출
        if(HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[ch], 1) != HAL_OK)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	4a23      	ldr	r2, [pc, #140]	; (8000fac <uartOpen+0x124>)
 8000f20:	4413      	add	r3, r2
 8000f22:	2201      	movs	r2, #1
 8000f24:	4619      	mov	r1, r3
 8000f26:	481c      	ldr	r0, [pc, #112]	; (8000f98 <uartOpen+0x110>)
 8000f28:	f003 fe34 	bl	8004b94 <HAL_UART_Receive_IT>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d005      	beq.n	8000f3e <uartOpen+0xb6>
        {
         ret = false;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
         is_open[ch] = false;
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <uartOpen+0x120>)
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	54d1      	strb	r1, [r2, r3]
        }
      }
      if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4815      	ldr	r0, [pc, #84]	; (8000f98 <uartOpen+0x110>)
 8000f42:	f005 fda0 	bl	8006a86 <HAL_UARTEx_SetTxFifoThreshold>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d005      	beq.n	8000f58 <uartOpen+0xd0>
      {
        ret = false;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <uartOpen+0x120>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	480f      	ldr	r0, [pc, #60]	; (8000f98 <uartOpen+0x110>)
 8000f5c:	f005 fdd1 	bl	8006b02 <HAL_UARTEx_SetRxFifoThreshold>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d005      	beq.n	8000f72 <uartOpen+0xea>
      {
        ret = false;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <uartOpen+0x120>)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f72:	4809      	ldr	r0, [pc, #36]	; (8000f98 <uartOpen+0x110>)
 8000f74:	f005 fd4e 	bl	8006a14 <HAL_UARTEx_DisableFifoMode>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d005      	beq.n	8000f8a <uartOpen+0x102>
      {
        ret = false;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <uartOpen+0x120>)
 8000f86:	2100      	movs	r1, #0
 8000f88:	54d1      	strb	r1, [r2, r3]
      }
      break;
 8000f8a:	bf00      	nop
  }


  return ret;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000348 	.word	0x20000348
 8000f9c:	40013800 	.word	0x40013800
 8000fa0:	20000230 	.word	0x20000230
 8000fa4:	20000244 	.word	0x20000244
 8000fa8:	2000022c 	.word	0x2000022c
 8000fac:	20000344 	.word	0x20000344

08000fb0 <uartAvailable>:
{
  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10b      	bne.n	8000fdc <uartAvailable+0x2c>
  {
    case _DEF_UART1:
      ret = qbufferAvailable(&qbuffer[ch]);
 8000fc4:	79fa      	ldrb	r2, [r7, #7]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <uartAvailable+0x38>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fd8d 	bl	8000af2 <qbufferAvailable>
 8000fd8:	60f8      	str	r0, [r7, #12]
      break;
 8000fda:	bf00      	nop
  }

  return ret;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000230 	.word	0x20000230

08000fec <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
  switch(ch)
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10d      	bne.n	800101c <uartRead+0x30>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[ch],&ret,1);
 8001000:	79fa      	ldrb	r2, [r7, #7]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4a07      	ldr	r2, [pc, #28]	; (8001028 <uartRead+0x3c>)
 800100c:	4413      	add	r3, r2
 800100e:	f107 010f 	add.w	r1, r7, #15
 8001012:	2201      	movs	r2, #1
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fd14 	bl	8000a42 <qbufferRead>
      break;
 800101a:	bf00      	nop
  }

  return ret;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000230 	.word	0x20000230

0800102c <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;
  switch(ch)
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10e      	bne.n	8001062 <uartWrite+0x36>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	b29a      	uxth	r2, r3
 8001048:	2364      	movs	r3, #100	; 0x64
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <uartWrite+0x40>)
 800104e:	f003 fd13 	bl	8004a78 <HAL_UART_Transmit>
 8001052:	4603      	mov	r3, r0
 8001054:	74fb      	strb	r3, [r7, #19]
      if(status == HAL_OK)
 8001056:	7cfb      	ldrb	r3, [r7, #19]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <uartWrite+0x34>
      {
        ret = length;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	617b      	str	r3, [r7, #20]
      }
      break;
 8001060:	bf00      	nop
  }

  return ret;
 8001062:	697b      	ldr	r3, [r7, #20]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000348 	.word	0x20000348

08001070 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8001070:	b40e      	push	{r1, r2, r3}
 8001072:	b580      	push	{r7, lr}
 8001074:	b0c7      	sub	sp, #284	; 0x11c
 8001076:	af00      	add	r7, sp, #0
 8001078:	4602      	mov	r2, r0
 800107a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800107e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001082:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8001084:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001088:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800108c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001090:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8001092:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001096:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800109a:	f107 0010 	add.w	r0, r7, #16
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80010a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a8:	f00a fb06 	bl	800b6b8 <vsniprintf>
 80010ac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 80010b0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80010b4:	f107 0110 	add.w	r1, r7, #16
 80010b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010bc:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ffb2 	bl	800102c <uartWrite>
 80010c8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 80010cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80010d6:	46bd      	mov	sp, r7
 80010d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010dc:	b003      	add	sp, #12
 80010de:	4770      	bx	lr

080010e0 <HAL_UART_ErrorCallback>:

  return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
  {

  }
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a08      	ldr	r2, [pc, #32]	; (8001124 <HAL_UART_RxCpltCallback+0x30>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d109      	bne.n	800111a <HAL_UART_RxCpltCallback+0x26>
  {
    // 빠르게 송신시 1 바이트 사용시 인터럽트가 많이 걸려서 처리가 늦어져 overrun (덮어쓰기 에러) , 데이터 손실 에러 발생 가능
    // 고속의 송수신 - DMA 방식을 사용
    qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
 8001106:	2201      	movs	r2, #1
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <HAL_UART_RxCpltCallback+0x34>)
 800110a:	4808      	ldr	r0, [pc, #32]	; (800112c <HAL_UART_RxCpltCallback+0x38>)
 800110c:	f7ff fc3d 	bl	800098a <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[_DEF_UART1], 1);
 8001110:	2201      	movs	r2, #1
 8001112:	4905      	ldr	r1, [pc, #20]	; (8001128 <HAL_UART_RxCpltCallback+0x34>)
 8001114:	4806      	ldr	r0, [pc, #24]	; (8001130 <HAL_UART_RxCpltCallback+0x3c>)
 8001116:	f003 fd3d 	bl	8004b94 <HAL_UART_Receive_IT>
  }
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40013800 	.word	0x40013800
 8001128:	20000344 	.word	0x20000344
 800112c:	20000230 	.word	0x20000230
 8001130:	20000348 	.word	0x20000348

08001134 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b09e      	sub	sp, #120	; 0x78
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	2254      	movs	r2, #84	; 0x54
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f00a fabd 	bl	800b6d4 <memset>
  if(uartHandle->Instance==USART1)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <HAL_UART_MspInit+0xb4>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d13d      	bne.n	80011e0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001164:	2301      	movs	r3, #1
 8001166:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4618      	mov	r0, r3
 8001172:	f003 f897 	bl	80042a4 <HAL_RCCEx_PeriphCLKConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800117c:	f7ff fb0c 	bl	8000798 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <HAL_UART_MspInit+0xb8>)
 8001182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001184:	4a19      	ldr	r2, [pc, #100]	; (80011ec <HAL_UART_MspInit+0xb8>)
 8001186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118a:	6613      	str	r3, [r2, #96]	; 0x60
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_UART_MspInit+0xb8>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_UART_MspInit+0xb8>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	4a13      	ldr	r2, [pc, #76]	; (80011ec <HAL_UART_MspInit+0xb8>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_UART_MspInit+0xb8>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC4_USART1_TX_Pin|PC5_USART1_RX_Pin;
 80011b0:	2330      	movs	r3, #48	; 0x30
 80011b2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011c0:	2307      	movs	r3, #7
 80011c2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011c8:	4619      	mov	r1, r3
 80011ca:	4809      	ldr	r0, [pc, #36]	; (80011f0 <HAL_UART_MspInit+0xbc>)
 80011cc:	f000 fb38 	bl	8001840 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	2025      	movs	r0, #37	; 0x25
 80011d6:	f000 fa3e 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011da:	2025      	movs	r0, #37	; 0x25
 80011dc:	f000 fa55 	bl	800168a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80011e0:	bf00      	nop
 80011e2:	3778      	adds	r7, #120	; 0x78
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40013800 	.word	0x40013800
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48000800 	.word	0x48000800

080011f4 <usbInit>:
#endif



bool usbInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
  bool ret = true;
 80011fa:	2301      	movs	r3, #1
 80011fc:	71fb      	strb	r3, [r7, #7]


#ifdef _USE_HW_CLI
  cliAdd("usb", cliCmd);
#endif
  return ret;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <usbBegin>:
{
  return is_usb_mode;
}

bool usbBegin(UsbMode usb_mode)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]


#if HW_USE_CDC == 1

  if (usb_mode == USB_CDC_MODE)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d12a      	bne.n	8001276 <usbBegin+0x6a>
  {
    if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 8001220:	2200      	movs	r2, #0
 8001222:	4919      	ldr	r1, [pc, #100]	; (8001288 <usbBegin+0x7c>)
 8001224:	4819      	ldr	r0, [pc, #100]	; (800128c <usbBegin+0x80>)
 8001226:	f008 fb69 	bl	80098fc <USBD_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <usbBegin+0x28>
    {
      return false;
 8001230:	2300      	movs	r3, #0
 8001232:	e024      	b.n	800127e <usbBegin+0x72>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001234:	4916      	ldr	r1, [pc, #88]	; (8001290 <usbBegin+0x84>)
 8001236:	4815      	ldr	r0, [pc, #84]	; (800128c <usbBegin+0x80>)
 8001238:	f008 fb90 	bl	800995c <USBD_RegisterClass>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <usbBegin+0x3a>
    {
      return false;
 8001242:	2300      	movs	r3, #0
 8001244:	e01b      	b.n	800127e <usbBegin+0x72>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8001246:	4913      	ldr	r1, [pc, #76]	; (8001294 <usbBegin+0x88>)
 8001248:	4810      	ldr	r0, [pc, #64]	; (800128c <usbBegin+0x80>)
 800124a:	f008 fae1 	bl	8009810 <USBD_CDC_RegisterInterface>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <usbBegin+0x4c>
    {
      return false;
 8001254:	2300      	movs	r3, #0
 8001256:	e012      	b.n	800127e <usbBegin+0x72>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <usbBegin+0x80>)
 800125a:	f008 fba6 	bl	80099aa <USBD_Start>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <usbBegin+0x5c>
    {
      return false;
 8001264:	2300      	movs	r3, #0
 8001266:	e00a      	b.n	800127e <usbBegin+0x72>
    }


    cdcInit();
 8001268:	f7ff fc5c 	bl	8000b24 <cdcInit>

    is_usb_mode = USB_CDC_MODE;
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <usbBegin+0x8c>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
    ret = true;
 8001272:	2301      	movs	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
    ret = true;
  }
#endif


  is_init = ret;
 8001276:	4a09      	ldr	r2, [pc, #36]	; (800129c <usbBegin+0x90>)
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	7013      	strb	r3, [r2, #0]

  return ret;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000138 	.word	0x20000138
 800128c:	200003e8 	.word	0x200003e8
 8001290:	20000018 	.word	0x20000018
 8001294:	20000124 	.word	0x20000124
 8001298:	200003dd 	.word	0x200003dd
 800129c:	200003dc 	.word	0x200003dc

080012a0 <hwInit>:
 *      Author: mm940
 */
#include "hw.h"

bool hwInit(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
  bool ret = true;
 80012a6:	2301      	movs	r3, #1
 80012a8:	71fb      	strb	r3, [r7, #7]

  ret &= bspInit();
 80012aa:	f7ff f9bd 	bl	8000628 <bspInit>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bf14      	ite	ne
 80012ba:	2301      	movne	r3, #1
 80012bc:	2300      	moveq	r3, #0
 80012be:	71fb      	strb	r3, [r7, #7]
  ret &= rtcInit();
 80012c0:	f7ff fd4c 	bl	8000d5c <rtcInit>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf14      	ite	ne
 80012d0:	2301      	movne	r3, #1
 80012d2:	2300      	moveq	r3, #0
 80012d4:	71fb      	strb	r3, [r7, #7]
#ifdef _USE_HW_RESET
  ret &= resetInit();
 80012d6:	f7ff fcb3 	bl	8000c40 <resetInit>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	bf14      	ite	ne
 80012e6:	2301      	movne	r3, #1
 80012e8:	2300      	moveq	r3, #0
 80012ea:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef _USE_HW_RESET
  if (resetGetCount() == 2)
 80012ec:	f7ff fce6 	bl	8000cbc <resetGetCount>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d101      	bne.n	80012fa <hwInit+0x5a>
  {
    // Jump To SystemBootloader
    resetToSystemBoot();
 80012f6:	f7ff fced 	bl	8000cd4 <resetToSystemBoot>
  }
#endif

  ret &= ledInit();
 80012fa:	f7ff fc2b 	bl	8000b54 <ledInit>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	4013      	ands	r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	bf14      	ite	ne
 800130a:	2301      	movne	r3, #1
 800130c:	2300      	moveq	r3, #0
 800130e:	71fb      	strb	r3, [r7, #7]
  ret &= usbInit();
 8001310:	f7ff ff70 	bl	80011f4 <usbInit>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf14      	ite	ne
 8001320:	2301      	movne	r3, #1
 8001322:	2300      	moveq	r3, #0
 8001324:	71fb      	strb	r3, [r7, #7]
  ret &= usbBegin(USB_CDC_MODE);
 8001326:	2001      	movs	r0, #1
 8001328:	f7ff ff70 	bl	800120c <usbBegin>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4013      	ands	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf14      	ite	ne
 8001338:	2301      	movne	r3, #1
 800133a:	2300      	moveq	r3, #0
 800133c:	71fb      	strb	r3, [r7, #7]
  ret &= uartInit();
 800133e:	f7ff fd89 	bl	8000e54 <uartInit>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	4013      	ands	r3, r2
 800134a:	2b00      	cmp	r3, #0
 800134c:	bf14      	ite	ne
 800134e:	2301      	movne	r3, #1
 8001350:	2300      	moveq	r3, #0
 8001352:	71fb      	strb	r3, [r7, #7]
  ret &= uartOpen(_DEF_UART1, 115200);
 8001354:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff fd95 	bl	8000e88 <uartOpen>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4013      	ands	r3, r2
 8001366:	2b00      	cmp	r3, #0
 8001368:	bf14      	ite	ne
 800136a:	2301      	movne	r3, #1
 800136c:	2300      	moveq	r3, #0
 800136e:	71fb      	strb	r3, [r7, #7]

  return ret;
 8001370:	79fb      	ldrb	r3, [r7, #7]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001384:	2003      	movs	r0, #3
 8001386:	f000 f95b 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138a:	200f      	movs	r0, #15
 800138c:	f000 f80e 	bl	80013ac <HAL_InitTick>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	71fb      	strb	r3, [r7, #7]
 800139a:	e001      	b.n	80013a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800139c:	f7ff fa04 	bl	80007a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a0:	79fb      	ldrb	r3, [r7, #7]

}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <HAL_InitTick+0x68>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d022      	beq.n	8001406 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_InitTick+0x6c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <HAL_InitTick+0x68>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f966 	bl	80016a6 <HAL_SYSTICK_Config>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10f      	bne.n	8001400 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b0f      	cmp	r3, #15
 80013e4:	d809      	bhi.n	80013fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e6:	2200      	movs	r2, #0
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	f04f 30ff 	mov.w	r0, #4294967295
 80013ee:	f000 f932 	bl	8001656 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_InitTick+0x70>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	e007      	b.n	800140a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	e004      	b.n	800140a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e001      	b.n	800140a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000008 	.word	0x20000008
 8001418:	20000000 	.word	0x20000000
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_IncTick+0x1c>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_IncTick+0x20>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4413      	add	r3, r2
 800142e:	4a03      	ldr	r2, [pc, #12]	; (800143c <HAL_IncTick+0x1c>)
 8001430:	6013      	str	r3, [r2, #0]
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	200003e0 	.word	0x200003e0
 8001440:	20000008 	.word	0x20000008

08001444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <HAL_GetTick+0x14>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	200003e0 	.word	0x200003e0

0800145c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff ffee 	bl	8001444 <HAL_GetTick>
 8001468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001474:	d004      	beq.n	8001480 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_Delay+0x40>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	4413      	add	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001480:	bf00      	nop
 8001482:	f7ff ffdf 	bl	8001444 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	429a      	cmp	r2, r3
 8001490:	d8f7      	bhi.n	8001482 <HAL_Delay+0x26>
  {
  }
}
 8001492:	bf00      	nop
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000008 	.word	0x20000008

080014a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db0b      	blt.n	800152e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4907      	ldr	r1, [pc, #28]	; (800153c <__NVIC_EnableIRQ+0x38>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2001      	movs	r0, #1
 8001526:	fa00 f202 	lsl.w	r2, r0, r2
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100

08001540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	; (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	; (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f1c3 0307 	rsb	r3, r3, #7
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf28      	it	cs
 80015b2:	2304      	movcs	r3, #4
 80015b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3304      	adds	r3, #4
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d902      	bls.n	80015c4 <NVIC_EncodePriority+0x30>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3b03      	subs	r3, #3
 80015c2:	e000      	b.n	80015c6 <NVIC_EncodePriority+0x32>
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	4313      	orrs	r3, r2
         );
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800160c:	d301      	bcc.n	8001612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160e:	2301      	movs	r3, #1
 8001610:	e00f      	b.n	8001632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <SysTick_Config+0x40>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161a:	210f      	movs	r1, #15
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f7ff ff8e 	bl	8001540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <SysTick_Config+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <SysTick_Config+0x40>)
 800162c:	2207      	movs	r2, #7
 800162e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	e000e010 	.word	0xe000e010

08001640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff29 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001664:	f7ff ff40 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 8001668:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff ff90 	bl	8001594 <NVIC_EncodePriority>
 8001674:	4602      	mov	r2, r0
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff5f 	bl	8001540 <__NVIC_SetPriority>
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff33 	bl	8001504 <__NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffa4 	bl	80015fc <SysTick_Config>
 80016b4:	4603      	mov	r3, r0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016be:	b480      	push	{r7}
 80016c0:	b085      	sub	sp, #20
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d005      	beq.n	80016e2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2204      	movs	r2, #4
 80016da:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e037      	b.n	8001752 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 020e 	bic.w	r2, r2, #14
 80016f0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001700:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f003 021f 	and.w	r2, r3, #31
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	2101      	movs	r1, #1
 8001720:	fa01 f202 	lsl.w	r2, r1, r2
 8001724:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800172e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00c      	beq.n	8001752 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001742:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001746:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001750:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d00d      	beq.n	80017a4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2204      	movs	r2, #4
 800178c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e047      	b.n	8001834 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 020e 	bic.w	r2, r2, #14
 80017b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0201 	bic.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00c      	beq.n	8001814 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001808:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001812:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
    }
  }
  return status;
 8001834:	7bfb      	ldrb	r3, [r7, #15]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800184e:	e15a      	b.n	8001b06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2101      	movs	r1, #1
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	4013      	ands	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 814c 	beq.w	8001b00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d005      	beq.n	8001880 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800187c:	2b02      	cmp	r3, #2
 800187e:	d130      	bne.n	80018e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	2203      	movs	r2, #3
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018b6:	2201      	movs	r2, #1
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	f003 0201 	and.w	r2, r3, #1
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d017      	beq.n	800191e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d123      	bne.n	8001972 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	08da      	lsrs	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3208      	adds	r2, #8
 8001932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	08da      	lsrs	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3208      	adds	r2, #8
 800196c:	6939      	ldr	r1, [r7, #16]
 800196e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	2203      	movs	r2, #3
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0203 	and.w	r2, r3, #3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80a6 	beq.w	8001b00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b4:	4b5b      	ldr	r3, [pc, #364]	; (8001b24 <HAL_GPIO_Init+0x2e4>)
 80019b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b8:	4a5a      	ldr	r2, [pc, #360]	; (8001b24 <HAL_GPIO_Init+0x2e4>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6613      	str	r3, [r2, #96]	; 0x60
 80019c0:	4b58      	ldr	r3, [pc, #352]	; (8001b24 <HAL_GPIO_Init+0x2e4>)
 80019c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019cc:	4a56      	ldr	r2, [pc, #344]	; (8001b28 <HAL_GPIO_Init+0x2e8>)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019f6:	d01f      	beq.n	8001a38 <HAL_GPIO_Init+0x1f8>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a4c      	ldr	r2, [pc, #304]	; (8001b2c <HAL_GPIO_Init+0x2ec>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d019      	beq.n	8001a34 <HAL_GPIO_Init+0x1f4>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a4b      	ldr	r2, [pc, #300]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d013      	beq.n	8001a30 <HAL_GPIO_Init+0x1f0>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a4a      	ldr	r2, [pc, #296]	; (8001b34 <HAL_GPIO_Init+0x2f4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d00d      	beq.n	8001a2c <HAL_GPIO_Init+0x1ec>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a49      	ldr	r2, [pc, #292]	; (8001b38 <HAL_GPIO_Init+0x2f8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d007      	beq.n	8001a28 <HAL_GPIO_Init+0x1e8>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a48      	ldr	r2, [pc, #288]	; (8001b3c <HAL_GPIO_Init+0x2fc>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d101      	bne.n	8001a24 <HAL_GPIO_Init+0x1e4>
 8001a20:	2305      	movs	r3, #5
 8001a22:	e00a      	b.n	8001a3a <HAL_GPIO_Init+0x1fa>
 8001a24:	2306      	movs	r3, #6
 8001a26:	e008      	b.n	8001a3a <HAL_GPIO_Init+0x1fa>
 8001a28:	2304      	movs	r3, #4
 8001a2a:	e006      	b.n	8001a3a <HAL_GPIO_Init+0x1fa>
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e004      	b.n	8001a3a <HAL_GPIO_Init+0x1fa>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x1fa>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_GPIO_Init+0x1fa>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	f002 0203 	and.w	r2, r2, #3
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	4093      	lsls	r3, r2
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a4a:	4937      	ldr	r1, [pc, #220]	; (8001b28 <HAL_GPIO_Init+0x2e8>)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a58:	4b39      	ldr	r3, [pc, #228]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a7c:	4a30      	ldr	r2, [pc, #192]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aa6:	4a26      	ldr	r2, [pc, #152]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001aac:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001afa:	4a11      	ldr	r2, [pc, #68]	; (8001b40 <HAL_GPIO_Init+0x300>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3301      	adds	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f47f ae9d 	bne.w	8001850 <HAL_GPIO_Init+0x10>
  }
}
 8001b16:	bf00      	nop
 8001b18:	bf00      	nop
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	48000400 	.word	0x48000400
 8001b30:	48000800 	.word	0x48000800
 8001b34:	48000c00 	.word	0x48000c00
 8001b38:	48001000 	.word	0x48001000
 8001b3c:	48001400 	.word	0x48001400
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b54:	787b      	ldrb	r3, [r7, #1]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e0c0      	b.n	8001d08 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f009 fa52 	bl	800b044 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f005 f84c 	bl	8006c4a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
 8001bb6:	e03e      	b.n	8001c36 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3311      	adds	r3, #17
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bcc:	7bfa      	ldrb	r2, [r7, #15]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	440b      	add	r3, r1
 8001bda:	3310      	adds	r3, #16
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	440b      	add	r3, r1
 8001bee:	3313      	adds	r3, #19
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	3320      	adds	r3, #32
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	3324      	adds	r3, #36	; 0x24
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	440b      	add	r3, r1
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	3301      	adds	r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	791b      	ldrb	r3, [r3, #4]
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d3bb      	bcc.n	8001bb8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	e044      	b.n	8001cd0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c46:	7bfa      	ldrb	r2, [r7, #15]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	440b      	add	r3, r1
 8001c54:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	440b      	add	r3, r1
 8001c6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	440b      	add	r3, r1
 8001c96:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	791b      	ldrb	r3, [r3, #4]
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d3b5      	bcc.n	8001c46 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ce6:	f004 ffcb 	bl	8006c80 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7a9b      	ldrb	r3, [r3, #10]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d102      	bne.n	8001d06 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f001 fc41 	bl	8003588 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_PCD_Start+0x16>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e012      	b.n	8001d4c <HAL_PCD_Start+0x3c>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f004 ff72 	bl	8006c1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f007 fa32 	bl	80091a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f007 fa37 	bl	80091d4 <USB_ReadInterrupts>
 8001d66:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 fb04 	bl	8002380 <PCD_EP_ISR_Handler>

    return;
 8001d78:	e110      	b.n	8001f9c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d96:	b292      	uxth	r2, r2
 8001d98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f009 f9e2 	bl	800b166 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001da2:	2100      	movs	r1, #0
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f8fc 	bl	8001fa2 <HAL_PCD_SetAddress>

    return;
 8001daa:	e0f7      	b.n	8001f9c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00c      	beq.n	8001dd0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001dce:	e0e5      	b.n	8001f9c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00c      	beq.n	8001df4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dec:	b292      	uxth	r2, r2
 8001dee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001df2:	e0d3      	b.n	8001f9c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d034      	beq.n	8001e68 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0204 	bic.w	r2, r2, #4
 8001e10:	b292      	uxth	r2, r2
 8001e12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0208 	bic.w	r2, r2, #8
 8001e28:	b292      	uxth	r2, r2
 8001e2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d107      	bne.n	8001e48 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e40:	2100      	movs	r1, #0
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f009 fb82 	bl	800b54c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f009 f9c5 	bl	800b1d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e60:	b292      	uxth	r2, r2
 8001e62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e66:	e099      	b.n	8001f9c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d027      	beq.n	8001ec2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0208 	orr.w	r2, r2, #8
 8001e84:	b292      	uxth	r2, r2
 8001e86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0204 	orr.w	r2, r2, #4
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f009 f972 	bl	800b1a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001ec0:	e06c      	b.n	8001f9c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d040      	beq.n	8001f4e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ede:	b292      	uxth	r2, r2
 8001ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d12b      	bne.n	8001f46 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0204 	orr.w	r2, r2, #4
 8001f00:	b292      	uxth	r2, r2
 8001f02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0208 	orr.w	r2, r2, #8
 8001f18:	b292      	uxth	r2, r2
 8001f1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f009 fb04 	bl	800b54c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001f44:	e02a      	b.n	8001f9c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f009 f92c 	bl	800b1a4 <HAL_PCD_SuspendCallback>
    return;
 8001f4c:	e026      	b.n	8001f9c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00f      	beq.n	8001f78 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f6a:	b292      	uxth	r2, r2
 8001f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f009 f8ea 	bl	800b14a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f76:	e011      	b.n	8001f9c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00c      	beq.n	8001f9c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f94:	b292      	uxth	r2, r2
 8001f96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f9a:	bf00      	nop
  }
}
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_PCD_SetAddress+0x1a>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e012      	b.n	8001fe2 <HAL_PCD_SetAddress+0x40>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	78fa      	ldrb	r2, [r7, #3]
 8001fc8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f007 f8d3 	bl	800917e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	4608      	mov	r0, r1
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	70fb      	strb	r3, [r7, #3]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	803b      	strh	r3, [r7, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da0e      	bge.n	800202e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	f003 0207 	and.w	r2, r3, #7
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	3310      	adds	r3, #16
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	705a      	strb	r2, [r3, #1]
 800202c:	e00e      	b.n	800204c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	f003 0207 	and.w	r2, r3, #7
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	b2da      	uxtb	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002058:	883a      	ldrh	r2, [r7, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	78ba      	ldrb	r2, [r7, #2]
 8002062:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002064:	78bb      	ldrb	r3, [r7, #2]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d102      	bne.n	8002070 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_PCD_EP_Open+0x94>
 800207a:	2302      	movs	r3, #2
 800207c:	e00e      	b.n	800209c <HAL_PCD_EP_Open+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68f9      	ldr	r1, [r7, #12]
 800208c:	4618      	mov	r0, r3
 800208e:	f004 fe15 	bl	8006cbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800209a:	7afb      	ldrb	r3, [r7, #11]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	da0e      	bge.n	80020d6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	f003 0207 	and.w	r2, r3, #7
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	3310      	adds	r3, #16
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	705a      	strb	r2, [r3, #1]
 80020d4:	e00e      	b.n	80020f4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	f003 0207 	and.w	r2, r3, #7
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_PCD_EP_Close+0x6a>
 800210a:	2302      	movs	r3, #2
 800210c:	e00e      	b.n	800212c <HAL_PCD_EP_Close+0x88>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68f9      	ldr	r1, [r7, #12]
 800211c:	4618      	mov	r0, r3
 800211e:	f005 f991 	bl	8007444 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	460b      	mov	r3, r1
 8002142:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002144:	7afb      	ldrb	r3, [r7, #11]
 8002146:	f003 0207 	and.w	r2, r3, #7
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4413      	add	r3, r2
 800215a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2200      	movs	r2, #0
 8002172:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002174:	7afb      	ldrb	r3, [r7, #11]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	b2da      	uxtb	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6979      	ldr	r1, [r7, #20]
 8002186:	4618      	mov	r0, r3
 8002188:	f005 fb49 	bl	800781e <USB_EPStartXfer>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	f003 0207 	and.w	r2, r3, #7
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	440b      	add	r3, r1
 80021b4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80021b8:	681b      	ldr	r3, [r3, #0]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
 80021d2:	460b      	mov	r3, r1
 80021d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021d6:	7afb      	ldrb	r3, [r7, #11]
 80021d8:	f003 0207 	and.w	r2, r3, #7
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	3310      	adds	r3, #16
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4413      	add	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2200      	movs	r2, #0
 800220a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2201      	movs	r2, #1
 8002210:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002212:	7afb      	ldrb	r3, [r7, #11]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	b2da      	uxtb	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6979      	ldr	r1, [r7, #20]
 8002224:	4618      	mov	r0, r3
 8002226:	f005 fafa 	bl	800781e <USB_EPStartXfer>

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	7912      	ldrb	r2, [r2, #4]
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e03e      	b.n	80022d0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002256:	2b00      	cmp	r3, #0
 8002258:	da0e      	bge.n	8002278 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 0207 	and.w	r2, r3, #7
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	3310      	adds	r3, #16
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	705a      	strb	r2, [r3, #1]
 8002276:	e00c      	b.n	8002292 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_PCD_EP_SetStall+0x7e>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e00e      	b.n	80022d0 <HAL_PCD_EP_SetStall+0x9c>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68f9      	ldr	r1, [r7, #12]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f006 fe5d 	bl	8008f80 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	7912      	ldrb	r2, [r2, #4]
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e040      	b.n	8002378 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	da0e      	bge.n	800231c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	f003 0207 	and.w	r2, r3, #7
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	3310      	adds	r3, #16
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	705a      	strb	r2, [r3, #1]
 800231a:	e00e      	b.n	800233a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	f003 0207 	and.w	r2, r3, #7
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	b2da      	uxtb	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_PCD_EP_ClrStall+0x82>
 8002356:	2302      	movs	r3, #2
 8002358:	e00e      	b.n	8002378 <HAL_PCD_EP_ClrStall+0xa0>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68f9      	ldr	r1, [r7, #12]
 8002368:	4618      	mov	r0, r3
 800236a:	f006 fe5a 	bl	8009022 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b096      	sub	sp, #88	; 0x58
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002388:	e3ae      	b.n	8002ae8 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002392:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002396:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80023a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 8170 	bne.w	800268e <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d14d      	bne.n	8002456 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ca:	81fb      	strh	r3, [r7, #14]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	89fb      	ldrh	r3, [r7, #14]
 80023d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023da:	b29b      	uxth	r3, r3
 80023dc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3310      	adds	r3, #16
 80023e2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	4413      	add	r3, r2
 80023fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800240a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800240c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	441a      	add	r2, r3
 8002416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002418:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800241a:	2100      	movs	r1, #0
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f008 fe7a 	bl	800b116 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	7b1b      	ldrb	r3, [r3, #12]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 835d 	beq.w	8002ae8 <PCD_EP_ISR_Handler+0x768>
 800242e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f040 8358 	bne.w	8002ae8 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7b1b      	ldrb	r3, [r3, #12]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002442:	b2da      	uxtb	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	b292      	uxth	r2, r2
 800244a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	731a      	strb	r2, [r3, #12]
 8002454:	e348      	b.n	8002ae8 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800245c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002468:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800246c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002470:	2b00      	cmp	r3, #0
 8002472:	d032      	beq.n	80024da <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247c:	b29b      	uxth	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4413      	add	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	4413      	add	r3, r2
 800248e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800249a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80024a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80024aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ac:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f006 fee2 	bl	8009278 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024c0:	4013      	ands	r3, r2
 80024c2:	823b      	strh	r3, [r7, #16]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	8a3a      	ldrh	r2, [r7, #16]
 80024ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024ce:	b292      	uxth	r2, r2
 80024d0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f008 fdf2 	bl	800b0bc <HAL_PCD_SetupStageCallback>
 80024d8:	e306      	b.n	8002ae8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024da:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f280 8302 	bge.w	8002ae8 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024f0:	4013      	ands	r3, r2
 80024f2:	83fb      	strh	r3, [r7, #30]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	8bfa      	ldrh	r2, [r7, #30]
 80024fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024fe:	b292      	uxth	r2, r2
 8002500:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	4413      	add	r3, r2
 800251c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002528:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800252a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d019      	beq.n	8002566 <PCD_EP_ISR_Handler+0x1e6>
 8002532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d015      	beq.n	8002566 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002540:	6959      	ldr	r1, [r3, #20]
 8002542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002544:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002548:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800254a:	b29b      	uxth	r3, r3
 800254c:	f006 fe94 	bl	8009278 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	441a      	add	r2, r3
 800255a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800255e:	2100      	movs	r1, #0
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f008 fdbd 	bl	800b0e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002570:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002578:	2b00      	cmp	r3, #0
 800257a:	f040 82b5 	bne.w	8002ae8 <PCD_EP_ISR_Handler+0x768>
 800257e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002582:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002586:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800258a:	f000 82ad 	beq.w	8002ae8 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800259c:	b29b      	uxth	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	4413      	add	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	801a      	strh	r2, [r3, #0]
 80025be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b3e      	cmp	r3, #62	; 0x3e
 80025c4:	d91d      	bls.n	8002602 <PCD_EP_ISR_Handler+0x282>
 80025c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	647b      	str	r3, [r7, #68]	; 0x44
 80025ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <PCD_EP_ISR_Handler+0x260>
 80025da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025dc:	3b01      	subs	r3, #1
 80025de:	647b      	str	r3, [r7, #68]	; 0x44
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	029b      	lsls	r3, r3, #10
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	4313      	orrs	r3, r2
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	801a      	strh	r2, [r3, #0]
 8002600:	e026      	b.n	8002650 <PCD_EP_ISR_Handler+0x2d0>
 8002602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10a      	bne.n	8002620 <PCD_EP_ISR_Handler+0x2a0>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002618:	b29a      	uxth	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	e017      	b.n	8002650 <PCD_EP_ISR_Handler+0x2d0>
 8002620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	647b      	str	r3, [r7, #68]	; 0x44
 8002628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <PCD_EP_ISR_Handler+0x2ba>
 8002634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002636:	3301      	adds	r3, #1
 8002638:	647b      	str	r3, [r7, #68]	; 0x44
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29a      	uxth	r2, r3
 8002640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002642:	b29b      	uxth	r3, r3
 8002644:	029b      	lsls	r3, r3, #10
 8002646:	b29b      	uxth	r3, r3
 8002648:	4313      	orrs	r3, r2
 800264a:	b29a      	uxth	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800265c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002660:	827b      	strh	r3, [r7, #18]
 8002662:	8a7b      	ldrh	r3, [r7, #18]
 8002664:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002668:	827b      	strh	r3, [r7, #18]
 800266a:	8a7b      	ldrh	r3, [r7, #18]
 800266c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002670:	827b      	strh	r3, [r7, #18]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	8a7b      	ldrh	r3, [r7, #18]
 8002678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800267c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002688:	b29b      	uxth	r3, r3
 800268a:	8013      	strh	r3, [r2, #0]
 800268c:	e22c      	b.n	8002ae8 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026a2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f280 80f6 	bge.w	8002898 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	b29a      	uxth	r2, r3
 80026be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026c2:	4013      	ands	r3, r2
 80026c4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80026da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026de:	b292      	uxth	r2, r2
 80026e0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80026e2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80026f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fa:	7b1b      	ldrb	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d123      	bne.n	8002748 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002708:	b29b      	uxth	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	4413      	add	r3, r2
 800271a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002724:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002728:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 808e 	beq.w	800284e <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002738:	6959      	ldr	r1, [r3, #20]
 800273a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273c:	88da      	ldrh	r2, [r3, #6]
 800273e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002742:	f006 fd99 	bl	8009278 <USB_ReadPMA>
 8002746:	e082      	b.n	800284e <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274a:	78db      	ldrb	r3, [r3, #3]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d10a      	bne.n	8002766 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002750:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002754:	461a      	mov	r2, r3
 8002756:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f9d3 	bl	8002b04 <HAL_PCD_EP_DB_Receive>
 800275e:	4603      	mov	r3, r0
 8002760:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002764:	e073      	b.n	800284e <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800277c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002780:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	441a      	add	r2, r3
 8002792:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800279a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800279e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d022      	beq.n	800280a <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	4413      	add	r3, r2
 80027de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80027ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d02c      	beq.n	800284e <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fa:	6959      	ldr	r1, [r3, #20]
 80027fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fe:	891a      	ldrh	r2, [r3, #8]
 8002800:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002804:	f006 fd38 	bl	8009278 <USB_ReadPMA>
 8002808:	e021      	b.n	800284e <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002812:	b29b      	uxth	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	4413      	add	r3, r2
 8002824:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800282e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002832:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002840:	6959      	ldr	r1, [r3, #20]
 8002842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002844:	895a      	ldrh	r2, [r3, #10]
 8002846:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800284a:	f006 fd15 	bl	8009278 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800284e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002856:	441a      	add	r2, r3
 8002858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800285c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002864:	441a      	add	r2, r3
 8002866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002868:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800286a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <PCD_EP_ISR_Handler+0x4fe>
 8002872:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	429a      	cmp	r2, r3
 800287c:	d206      	bcs.n	800288c <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800287e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f008 fc2b 	bl	800b0e0 <HAL_PCD_DataOutStageCallback>
 800288a:	e005      	b.n	8002898 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002892:	4618      	mov	r0, r3
 8002894:	f004 ffc3 	bl	800781e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002898:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8121 	beq.w	8002ae8 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80028a6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	3310      	adds	r3, #16
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	441a      	add	r2, r3
 80028e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80028ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80028f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f8:	78db      	ldrb	r3, [r3, #3]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	f040 80a2 	bne.w	8002a44 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8002900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002902:	2200      	movs	r2, #0
 8002904:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002908:	7b1b      	ldrb	r3, [r3, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8093 	beq.w	8002a36 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002910:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d046      	beq.n	80029aa <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800291c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291e:	785b      	ldrb	r3, [r3, #1]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d126      	bne.n	8002972 <PCD_EP_ISR_Handler+0x5f2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002932:	b29b      	uxth	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	4413      	add	r3, r2
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
 800293c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	00da      	lsls	r2, r3, #3
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	4413      	add	r3, r2
 8002946:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002956:	b29a      	uxth	r2, r3
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	801a      	strh	r2, [r3, #0]
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	b29b      	uxth	r3, r3
 8002962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800296a:	b29a      	uxth	r2, r3
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	801a      	strh	r2, [r3, #0]
 8002970:	e061      	b.n	8002a36 <PCD_EP_ISR_Handler+0x6b6>
 8002972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002974:	785b      	ldrb	r3, [r3, #1]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d15d      	bne.n	8002a36 <PCD_EP_ISR_Handler+0x6b6>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002988:	b29b      	uxth	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	4413      	add	r3, r2
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	00da      	lsls	r2, r3, #3
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	4413      	add	r3, r2
 800299c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	2200      	movs	r2, #0
 80029a6:	801a      	strh	r2, [r3, #0]
 80029a8:	e045      	b.n	8002a36 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b2:	785b      	ldrb	r3, [r3, #1]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d126      	bne.n	8002a06 <PCD_EP_ISR_Handler+0x686>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029cc:	4413      	add	r3, r2
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
 80029d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	00da      	lsls	r2, r3, #3
 80029d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d8:	4413      	add	r3, r2
 80029da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
 80029e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ee:	801a      	strh	r2, [r3, #0]
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a02:	801a      	strh	r2, [r3, #0]
 8002a04:	e017      	b.n	8002a36 <PCD_EP_ISR_Handler+0x6b6>
 8002a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a08:	785b      	ldrb	r3, [r3, #1]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d113      	bne.n	8002a36 <PCD_EP_ISR_Handler+0x6b6>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1c:	4413      	add	r3, r2
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	00da      	lsls	r2, r3, #3
 8002a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a28:	4413      	add	r3, r2
 8002a2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a32:	2200      	movs	r2, #0
 8002a34:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f008 fb6a 	bl	800b116 <HAL_PCD_DataInStageCallback>
 8002a42:	e051      	b.n	8002ae8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002a44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d144      	bne.n	8002ada <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4413      	add	r3, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a74:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d907      	bls.n	8002a94 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8002a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a86:	699a      	ldr	r2, [r3, #24]
 8002a88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a8c:	1ad2      	subs	r2, r2, r3
 8002a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a90:	619a      	str	r2, [r3, #24]
 8002a92:	e002      	b.n	8002a9a <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a96:	2200      	movs	r2, #0
 8002a98:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f008 fb34 	bl	800b116 <HAL_PCD_DataInStageCallback>
 8002aae:	e01b      	b.n	8002ae8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ab8:	441a      	add	r2, r3
 8002aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002abc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac0:	69da      	ldr	r2, [r3, #28]
 8002ac2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ac6:	441a      	add	r2, r3
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aca:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 fea3 	bl	800781e <USB_EPStartXfer>
 8002ad8:	e006      	b.n	8002ae8 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ada:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ade:	461a      	mov	r2, r3
 8002ae0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f917 	bl	8002d16 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	b21b      	sxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f6ff ac48 	blt.w	800238a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3758      	adds	r7, #88	; 0x58
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b12:	88fb      	ldrh	r3, [r7, #6]
 8002b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d07c      	beq.n	8002c16 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	4413      	add	r3, r2
 8002b36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b40:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	8b7b      	ldrh	r3, [r7, #26]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d306      	bcc.n	8002b5a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	699a      	ldr	r2, [r3, #24]
 8002b50:	8b7b      	ldrh	r3, [r7, #26]
 8002b52:	1ad2      	subs	r2, r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	619a      	str	r2, [r3, #24]
 8002b58:	e002      	b.n	8002b60 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d123      	bne.n	8002bb0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b82:	833b      	strh	r3, [r7, #24]
 8002b84:	8b3b      	ldrh	r3, [r7, #24]
 8002b86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b8a:	833b      	strh	r3, [r7, #24]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	441a      	add	r2, r3
 8002b9a:	8b3b      	ldrh	r3, [r7, #24]
 8002b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d01f      	beq.n	8002bfa <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd4:	82fb      	strh	r3, [r7, #22]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	441a      	add	r2, r3
 8002be4:	8afb      	ldrh	r3, [r7, #22]
 8002be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bfa:	8b7b      	ldrh	r3, [r7, #26]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8085 	beq.w	8002d0c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	6959      	ldr	r1, [r3, #20]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	891a      	ldrh	r2, [r3, #8]
 8002c0e:	8b7b      	ldrh	r3, [r7, #26]
 8002c10:	f006 fb32 	bl	8009278 <USB_ReadPMA>
 8002c14:	e07a      	b.n	8002d0c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c3a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	8b7b      	ldrh	r3, [r7, #26]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d306      	bcc.n	8002c54 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	8b7b      	ldrh	r3, [r7, #26]
 8002c4c:	1ad2      	subs	r2, r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	619a      	str	r2, [r3, #24]
 8002c52:	e002      	b.n	8002c5a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2200      	movs	r2, #0
 8002c58:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d123      	bne.n	8002caa <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7c:	83fb      	strh	r3, [r7, #30]
 8002c7e:	8bfb      	ldrh	r3, [r7, #30]
 8002c80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c84:	83fb      	strh	r3, [r7, #30]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	441a      	add	r2, r3
 8002c94:	8bfb      	ldrh	r3, [r7, #30]
 8002c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d11f      	bne.n	8002cf4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cce:	83bb      	strh	r3, [r7, #28]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	441a      	add	r2, r3
 8002cde:	8bbb      	ldrh	r3, [r7, #28]
 8002ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cf4:	8b7b      	ldrh	r3, [r7, #26]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	6959      	ldr	r1, [r3, #20]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	895a      	ldrh	r2, [r3, #10]
 8002d06:	8b7b      	ldrh	r3, [r7, #26]
 8002d08:	f006 fab6 	bl	8009278 <USB_ReadPMA>
    }
  }

  return count;
 8002d0c:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b0a4      	sub	sp, #144	; 0x90
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	4613      	mov	r3, r2
 8002d22:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 81db 	beq.w	80030e6 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d54:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d907      	bls.n	8002d74 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	699a      	ldr	r2, [r3, #24]
 8002d68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d6c:	1ad2      	subs	r2, r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	619a      	str	r2, [r3, #24]
 8002d72:	e002      	b.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2200      	movs	r2, #0
 8002d78:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f040 80b9 	bne.w	8002ef6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	785b      	ldrb	r3, [r3, #1]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d126      	bne.n	8002dda <HAL_PCD_EP_DB_Transmit+0xc4>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da0:	4413      	add	r3, r2
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	00da      	lsls	r2, r3, #3
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	4413      	add	r3, r2
 8002dae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc2:	801a      	strh	r2, [r3, #0]
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	801a      	strh	r2, [r3, #0]
 8002dd8:	e01a      	b.n	8002e10 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	785b      	ldrb	r3, [r3, #1]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d116      	bne.n	8002e10 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	637b      	str	r3, [r7, #52]	; 0x34
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df6:	4413      	add	r3, r2
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	00da      	lsls	r2, r3, #3
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	4413      	add	r3, r2
 8002e04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e08:	633b      	str	r3, [r7, #48]	; 0x30
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	785b      	ldrb	r3, [r3, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d126      	bne.n	8002e6c <HAL_PCD_EP_DB_Transmit+0x156>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	4413      	add	r3, r2
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	00da      	lsls	r2, r3, #3
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	801a      	strh	r2, [r3, #0]
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	801a      	strh	r2, [r3, #0]
 8002e6a:	e017      	b.n	8002e9c <HAL_PCD_EP_DB_Transmit+0x186>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	785b      	ldrb	r3, [r3, #1]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d113      	bne.n	8002e9c <HAL_PCD_EP_DB_Transmit+0x186>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	461a      	mov	r2, r3
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	4413      	add	r3, r2
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	00da      	lsls	r2, r3, #3
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	4413      	add	r3, r2
 8002e90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e94:	623b      	str	r3, [r7, #32]
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f008 f937 	bl	800b116 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 82fa 	beq.w	80034a8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ece:	82fb      	strh	r3, [r7, #22]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	441a      	add	r2, r3
 8002ede:	8afb      	ldrh	r3, [r7, #22]
 8002ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	8013      	strh	r3, [r2, #0]
 8002ef4:	e2d8      	b.n	80034a8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d021      	beq.n	8002f44 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	441a      	add	r2, r3
 8002f2c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	f040 82ac 	bne.w	80034a8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f58:	441a      	add	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f66:	441a      	add	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	6a1a      	ldr	r2, [r3, #32]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d30b      	bcc.n	8002f90 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	6a1a      	ldr	r2, [r3, #32]
 8002f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f88:	1ad2      	subs	r2, r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	621a      	str	r2, [r3, #32]
 8002f8e:	e017      	b.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d108      	bne.n	8002faa <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002f98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fa8:	e00a      	b.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	785b      	ldrb	r3, [r3, #1]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d165      	bne.n	8003094 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fdc:	4413      	add	r3, r2
 8002fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	00da      	lsls	r2, r3, #3
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe8:	4413      	add	r3, r2
 8002fea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	801a      	strh	r2, [r3, #0]
 8003000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003004:	2b3e      	cmp	r3, #62	; 0x3e
 8003006:	d91d      	bls.n	8003044 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800300c:	095b      	lsrs	r3, r3, #5
 800300e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2b00      	cmp	r3, #0
 800301a:	d102      	bne.n	8003022 <HAL_PCD_EP_DB_Transmit+0x30c>
 800301c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800301e:	3b01      	subs	r3, #1
 8003020:	64bb      	str	r3, [r7, #72]	; 0x48
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29a      	uxth	r2, r3
 8003028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800302a:	b29b      	uxth	r3, r3
 800302c:	029b      	lsls	r3, r3, #10
 800302e:	b29b      	uxth	r3, r3
 8003030:	4313      	orrs	r3, r2
 8003032:	b29b      	uxth	r3, r3
 8003034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800303c:	b29a      	uxth	r2, r3
 800303e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003040:	801a      	strh	r2, [r3, #0]
 8003042:	e044      	b.n	80030ce <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <HAL_PCD_EP_DB_Transmit+0x34c>
 800304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800305a:	b29a      	uxth	r2, r3
 800305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305e:	801a      	strh	r2, [r3, #0]
 8003060:	e035      	b.n	80030ce <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	64bb      	str	r3, [r7, #72]	; 0x48
 800306a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_PCD_EP_DB_Transmit+0x366>
 8003076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003078:	3301      	adds	r3, #1
 800307a:	64bb      	str	r3, [r7, #72]	; 0x48
 800307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	b29a      	uxth	r2, r3
 8003082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003084:	b29b      	uxth	r3, r3
 8003086:	029b      	lsls	r3, r3, #10
 8003088:	b29b      	uxth	r3, r3
 800308a:	4313      	orrs	r3, r2
 800308c:	b29a      	uxth	r2, r3
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	e01c      	b.n	80030ce <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	785b      	ldrb	r3, [r3, #1]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d118      	bne.n	80030ce <HAL_PCD_EP_DB_Transmit+0x3b8>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	647b      	str	r3, [r7, #68]	; 0x44
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b0:	4413      	add	r3, r2
 80030b2:	647b      	str	r3, [r7, #68]	; 0x44
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	00da      	lsls	r2, r3, #3
 80030ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030bc:	4413      	add	r3, r2
 80030be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030c2:	643b      	str	r3, [r7, #64]	; 0x40
 80030c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030cc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	6959      	ldr	r1, [r3, #20]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	891a      	ldrh	r2, [r3, #8]
 80030da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030de:	b29b      	uxth	r3, r3
 80030e0:	f006 f888 	bl	80091f4 <USB_WritePMA>
 80030e4:	e1e0      	b.n	80034a8 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800310a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003116:	429a      	cmp	r2, r3
 8003118:	d307      	bcc.n	800312a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003122:	1ad2      	subs	r2, r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	619a      	str	r2, [r3, #24]
 8003128:	e002      	b.n	8003130 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2200      	movs	r2, #0
 800312e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f040 80c0 	bne.w	80032ba <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	785b      	ldrb	r3, [r3, #1]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d126      	bne.n	8003190 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003150:	b29b      	uxth	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003156:	4413      	add	r3, r2
 8003158:	67fb      	str	r3, [r7, #124]	; 0x7c
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	00da      	lsls	r2, r3, #3
 8003160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003162:	4413      	add	r3, r2
 8003164:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003168:	67bb      	str	r3, [r7, #120]	; 0x78
 800316a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003174:	b29a      	uxth	r2, r3
 8003176:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003178:	801a      	strh	r2, [r3, #0]
 800317a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	b29b      	uxth	r3, r3
 8003180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003188:	b29a      	uxth	r2, r3
 800318a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800318c:	801a      	strh	r2, [r3, #0]
 800318e:	e01a      	b.n	80031c6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	785b      	ldrb	r3, [r3, #1]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d116      	bne.n	80031c6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	667b      	str	r3, [r7, #100]	; 0x64
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ac:	4413      	add	r3, r2
 80031ae:	667b      	str	r3, [r7, #100]	; 0x64
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	00da      	lsls	r2, r3, #3
 80031b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031b8:	4413      	add	r3, r2
 80031ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031be:	663b      	str	r3, [r7, #96]	; 0x60
 80031c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031c2:	2200      	movs	r2, #0
 80031c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	677b      	str	r3, [r7, #116]	; 0x74
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d12b      	bne.n	800322c <HAL_PCD_EP_DB_Transmit+0x516>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e8:	4413      	add	r3, r2
 80031ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	00da      	lsls	r2, r3, #3
 80031f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f4:	4413      	add	r3, r2
 80031f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	b29b      	uxth	r3, r3
 8003206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800320a:	b29a      	uxth	r2, r3
 800320c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003210:	801a      	strh	r2, [r3, #0]
 8003212:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800321e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003222:	b29a      	uxth	r2, r3
 8003224:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003228:	801a      	strh	r2, [r3, #0]
 800322a:	e017      	b.n	800325c <HAL_PCD_EP_DB_Transmit+0x546>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	785b      	ldrb	r3, [r3, #1]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d113      	bne.n	800325c <HAL_PCD_EP_DB_Transmit+0x546>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800323c:	b29b      	uxth	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003242:	4413      	add	r3, r2
 8003244:	677b      	str	r3, [r7, #116]	; 0x74
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	00da      	lsls	r2, r3, #3
 800324c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800324e:	4413      	add	r3, r2
 8003250:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003254:	673b      	str	r3, [r7, #112]	; 0x70
 8003256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003258:	2200      	movs	r2, #0
 800325a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	4619      	mov	r1, r3
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f007 ff57 	bl	800b116 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326e:	2b00      	cmp	r3, #0
 8003270:	f040 811a 	bne.w	80034a8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	b29b      	uxth	r3, r3
 8003286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800328a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	441a      	add	r2, r3
 80032a0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80032a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	8013      	strh	r3, [r2, #0]
 80032b8:	e0f6      	b.n	80034a8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d121      	bne.n	8003308 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	441a      	add	r2, r3
 80032f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003304:	b29b      	uxth	r3, r3
 8003306:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800330e:	2b01      	cmp	r3, #1
 8003310:	f040 80ca 	bne.w	80034a8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800331c:	441a      	add	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	69da      	ldr	r2, [r3, #28]
 8003326:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800332a:	441a      	add	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	6a1a      	ldr	r2, [r3, #32]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	429a      	cmp	r2, r3
 800333a:	d30b      	bcc.n	8003354 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	6a1a      	ldr	r2, [r3, #32]
 8003348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800334c:	1ad2      	subs	r2, r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	621a      	str	r2, [r3, #32]
 8003352:	e017      	b.n	8003384 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d108      	bne.n	800336e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800335c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003360:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800336c:	e00a      	b.n	8003384 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2200      	movs	r2, #0
 800337a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	657b      	str	r3, [r7, #84]	; 0x54
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	785b      	ldrb	r3, [r3, #1]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d165      	bne.n	800345e <HAL_PCD_EP_DB_Transmit+0x748>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a6:	4413      	add	r3, r2
 80033a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	00da      	lsls	r2, r3, #3
 80033b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b2:	4413      	add	r3, r2
 80033b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80033ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c8:	801a      	strh	r2, [r3, #0]
 80033ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ce:	2b3e      	cmp	r3, #62	; 0x3e
 80033d0:	d91d      	bls.n	800340e <HAL_PCD_EP_DB_Transmit+0x6f8>
 80033d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80033da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <HAL_PCD_EP_DB_Transmit+0x6d6>
 80033e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033e8:	3b01      	subs	r3, #1
 80033ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	029b      	lsls	r3, r3, #10
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	4313      	orrs	r3, r2
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003406:	b29a      	uxth	r2, r3
 8003408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800340a:	801a      	strh	r2, [r3, #0]
 800340c:	e041      	b.n	8003492 <HAL_PCD_EP_DB_Transmit+0x77c>
 800340e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10a      	bne.n	800342c <HAL_PCD_EP_DB_Transmit+0x716>
 8003416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	b29b      	uxth	r3, r3
 800341c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003424:	b29a      	uxth	r2, r3
 8003426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003428:	801a      	strh	r2, [r3, #0]
 800342a:	e032      	b.n	8003492 <HAL_PCD_EP_DB_Transmit+0x77c>
 800342c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	66bb      	str	r3, [r7, #104]	; 0x68
 8003434:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <HAL_PCD_EP_DB_Transmit+0x730>
 8003440:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003442:	3301      	adds	r3, #1
 8003444:	66bb      	str	r3, [r7, #104]	; 0x68
 8003446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	b29a      	uxth	r2, r3
 800344c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800344e:	b29b      	uxth	r3, r3
 8003450:	029b      	lsls	r3, r3, #10
 8003452:	b29b      	uxth	r3, r3
 8003454:	4313      	orrs	r3, r2
 8003456:	b29a      	uxth	r2, r3
 8003458:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800345a:	801a      	strh	r2, [r3, #0]
 800345c:	e019      	b.n	8003492 <HAL_PCD_EP_DB_Transmit+0x77c>
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	785b      	ldrb	r3, [r3, #1]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d115      	bne.n	8003492 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800346e:	b29b      	uxth	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003474:	4413      	add	r3, r2
 8003476:	657b      	str	r3, [r7, #84]	; 0x54
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	00da      	lsls	r2, r3, #3
 800347e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003480:	4413      	add	r3, r2
 8003482:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003486:	653b      	str	r3, [r7, #80]	; 0x50
 8003488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800348c:	b29a      	uxth	r2, r3
 800348e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003490:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	6959      	ldr	r1, [r3, #20]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	895a      	ldrh	r2, [r3, #10]
 800349e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	f005 fea6 	bl	80091f4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c2:	82bb      	strh	r3, [r7, #20]
 80034c4:	8abb      	ldrh	r3, [r7, #20]
 80034c6:	f083 0310 	eor.w	r3, r3, #16
 80034ca:	82bb      	strh	r3, [r7, #20]
 80034cc:	8abb      	ldrh	r3, [r7, #20]
 80034ce:	f083 0320 	eor.w	r3, r3, #32
 80034d2:	82bb      	strh	r3, [r7, #20]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	441a      	add	r2, r3
 80034e2:	8abb      	ldrh	r3, [r7, #20]
 80034e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3790      	adds	r7, #144	; 0x90
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003502:	b480      	push	{r7}
 8003504:	b087      	sub	sp, #28
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	607b      	str	r3, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	817b      	strh	r3, [r7, #10]
 8003510:	4613      	mov	r3, r2
 8003512:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003514:	897b      	ldrh	r3, [r7, #10]
 8003516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003520:	897b      	ldrh	r3, [r7, #10]
 8003522:	f003 0207 	and.w	r2, r3, #7
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	3310      	adds	r3, #16
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	e009      	b.n	800354c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003538:	897a      	ldrh	r2, [r7, #10]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4413      	add	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800354c:	893b      	ldrh	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d107      	bne.n	8003562 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	b29a      	uxth	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	80da      	strh	r2, [r3, #6]
 8003560:	e00b      	b.n	800357a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2201      	movs	r2, #1
 8003566:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	b29a      	uxth	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	b29a      	uxth	r2, r3
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	f043 0302 	orr.w	r3, r3, #2
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d141      	bne.n	800366e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ea:	4b4b      	ldr	r3, [pc, #300]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f6:	d131      	bne.n	800365c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035f8:	4b47      	ldr	r3, [pc, #284]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035fe:	4a46      	ldr	r2, [pc, #280]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003604:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003608:	4b43      	ldr	r3, [pc, #268]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003610:	4a41      	ldr	r2, [pc, #260]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003616:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003618:	4b40      	ldr	r3, [pc, #256]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2232      	movs	r2, #50	; 0x32
 800361e:	fb02 f303 	mul.w	r3, r2, r3
 8003622:	4a3f      	ldr	r2, [pc, #252]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	0c9b      	lsrs	r3, r3, #18
 800362a:	3301      	adds	r3, #1
 800362c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800362e:	e002      	b.n	8003636 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3b01      	subs	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003636:	4b38      	ldr	r3, [pc, #224]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003642:	d102      	bne.n	800364a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f2      	bne.n	8003630 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800364a:	4b33      	ldr	r3, [pc, #204]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003656:	d158      	bne.n	800370a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e057      	b.n	800370c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800365c:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003662:	4a2d      	ldr	r2, [pc, #180]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003668:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800366c:	e04d      	b.n	800370a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003674:	d141      	bne.n	80036fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003676:	4b28      	ldr	r3, [pc, #160]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800367e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003682:	d131      	bne.n	80036e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003684:	4b24      	ldr	r3, [pc, #144]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800368a:	4a23      	ldr	r2, [pc, #140]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003690:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003694:	4b20      	ldr	r3, [pc, #128]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800369c:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036a4:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2232      	movs	r2, #50	; 0x32
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	0c9b      	lsrs	r3, r3, #18
 80036b6:	3301      	adds	r3, #1
 80036b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ba:	e002      	b.n	80036c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3b01      	subs	r3, #1
 80036c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ce:	d102      	bne.n	80036d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f2      	bne.n	80036bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e2:	d112      	bne.n	800370a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e011      	b.n	800370c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ee:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036f8:	e007      	b.n	800370a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036fa:	4b07      	ldr	r3, [pc, #28]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003702:	4a05      	ldr	r2, [pc, #20]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003708:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	40007000 	.word	0x40007000
 800371c:	20000000 	.word	0x20000000
 8003720:	431bde83 	.word	0x431bde83

08003724 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4a04      	ldr	r2, [pc, #16]	; (8003740 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800372e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003732:	6093      	str	r3, [r2, #8]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40007000 	.word	0x40007000

08003744 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800374a:	f7fd fe7b 	bl	8001444 <HAL_GetTick>
 800374e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003750:	4b39      	ldr	r3, [pc, #228]	; (8003838 <HAL_RCC_DeInit+0xf4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a38      	ldr	r2, [pc, #224]	; (8003838 <HAL_RCC_DeInit+0xf4>)
 8003756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800375c:	e008      	b.n	8003770 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375e:	f7fd fe71 	bl	8001444 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e05f      	b.n	8003830 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003770:	4b31      	ldr	r3, [pc, #196]	; (8003838 <HAL_RCC_DeInit+0xf4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 800377c:	4b2e      	ldr	r3, [pc, #184]	; (8003838 <HAL_RCC_DeInit+0xf4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a2d      	ldr	r2, [pc, #180]	; (8003838 <HAL_RCC_DeInit+0xf4>)
 8003782:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003786:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003788:	f7fd fe5c 	bl	8001444 <HAL_GetTick>
 800378c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 800378e:	4b2a      	ldr	r3, [pc, #168]	; (8003838 <HAL_RCC_DeInit+0xf4>)
 8003790:	2201      	movs	r2, #1
 8003792:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003794:	e00a      	b.n	80037ac <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003796:	f7fd fe55 	bl	8001444 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e041      	b.n	8003830 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80037ac:	4b22      	ldr	r3, [pc, #136]	; (8003838 <HAL_RCC_DeInit+0xf4>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 030c 	and.w	r3, r3, #12
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d1ee      	bne.n	8003796 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80037b8:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_RCC_DeInit+0xf8>)
 80037ba:	4a21      	ldr	r2, [pc, #132]	; (8003840 <HAL_RCC_DeInit+0xfc>)
 80037bc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037be:	4b21      	ldr	r3, [pc, #132]	; (8003844 <HAL_RCC_DeInit+0x100>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fd fdf2 	bl	80013ac <HAL_InitTick>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e02e      	b.n	8003830 <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 80037d2:	4b19      	ldr	r3, [pc, #100]	; (8003838 <HAL_RCC_DeInit+0xf4>)
 80037d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037d8:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <HAL_RCC_DeInit+0xf4>)
 80037dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037e0:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037e2:	f7fd fe2f 	bl	8001444 <HAL_GetTick>
 80037e6:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ea:	f7fd fe2b 	bl	8001444 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e019      	b.n	8003830 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <HAL_RCC_DeInit+0xf4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f0      	bne.n	80037ea <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCC_DeInit+0xf4>)
 800380a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800380e:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8003810:	4b09      	ldr	r3, [pc, #36]	; (8003838 <HAL_RCC_DeInit+0xf4>)
 8003812:	2200      	movs	r2, #0
 8003814:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8003816:	4b08      	ldr	r3, [pc, #32]	; (8003838 <HAL_RCC_DeInit+0xf4>)
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800381e:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_RCC_DeInit+0xf4>)
 8003820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <HAL_RCC_DeInit+0xf4>)
 8003826:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800382a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	20000000 	.word	0x20000000
 8003840:	00f42400 	.word	0x00f42400
 8003844:	20000004 	.word	0x20000004

08003848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e2fe      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d075      	beq.n	8003952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003866:	4b97      	ldr	r3, [pc, #604]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003870:	4b94      	ldr	r3, [pc, #592]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b0c      	cmp	r3, #12
 800387e:	d102      	bne.n	8003886 <HAL_RCC_OscConfig+0x3e>
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b03      	cmp	r3, #3
 8003884:	d002      	beq.n	800388c <HAL_RCC_OscConfig+0x44>
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d10b      	bne.n	80038a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388c:	4b8d      	ldr	r3, [pc, #564]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d05b      	beq.n	8003950 <HAL_RCC_OscConfig+0x108>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d157      	bne.n	8003950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e2d9      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ac:	d106      	bne.n	80038bc <HAL_RCC_OscConfig+0x74>
 80038ae:	4b85      	ldr	r3, [pc, #532]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a84      	ldr	r2, [pc, #528]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e01d      	b.n	80038f8 <HAL_RCC_OscConfig+0xb0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x98>
 80038c6:	4b7f      	ldr	r3, [pc, #508]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a7e      	ldr	r2, [pc, #504]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b7c      	ldr	r3, [pc, #496]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a7b      	ldr	r2, [pc, #492]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e00b      	b.n	80038f8 <HAL_RCC_OscConfig+0xb0>
 80038e0:	4b78      	ldr	r3, [pc, #480]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a77      	ldr	r2, [pc, #476]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	4b75      	ldr	r3, [pc, #468]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a74      	ldr	r2, [pc, #464]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80038f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d013      	beq.n	8003928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fd fda0 	bl	8001444 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003908:	f7fd fd9c 	bl	8001444 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	; 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e29e      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800391a:	4b6a      	ldr	r3, [pc, #424]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0xc0>
 8003926:	e014      	b.n	8003952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fd fd8c 	bl	8001444 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003930:	f7fd fd88 	bl	8001444 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	; 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e28a      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003942:	4b60      	ldr	r3, [pc, #384]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0xe8>
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d075      	beq.n	8003a4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800395e:	4b59      	ldr	r3, [pc, #356]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003968:	4b56      	ldr	r3, [pc, #344]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b0c      	cmp	r3, #12
 8003976:	d102      	bne.n	800397e <HAL_RCC_OscConfig+0x136>
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d002      	beq.n	8003984 <HAL_RCC_OscConfig+0x13c>
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b04      	cmp	r3, #4
 8003982:	d11f      	bne.n	80039c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003984:	4b4f      	ldr	r3, [pc, #316]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_RCC_OscConfig+0x154>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e25d      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399c:	4b49      	ldr	r3, [pc, #292]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	061b      	lsls	r3, r3, #24
 80039aa:	4946      	ldr	r1, [pc, #280]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039b0:	4b45      	ldr	r3, [pc, #276]	; (8003ac8 <HAL_RCC_OscConfig+0x280>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fd fcf9 	bl	80013ac <HAL_InitTick>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d043      	beq.n	8003a48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e249      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d023      	beq.n	8003a14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039cc:	4b3d      	ldr	r3, [pc, #244]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a3c      	ldr	r2, [pc, #240]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd fd34 	bl	8001444 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e0:	f7fd fd30 	bl	8001444 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e232      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f2:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fe:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	061b      	lsls	r3, r3, #24
 8003a0c:	492d      	ldr	r1, [pc, #180]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	604b      	str	r3, [r1, #4]
 8003a12:	e01a      	b.n	8003a4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a14:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a2a      	ldr	r2, [pc, #168]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fd fd10 	bl	8001444 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a28:	f7fd fd0c 	bl	8001444 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e20e      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a3a:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x1e0>
 8003a46:	e000      	b.n	8003a4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d041      	beq.n	8003ada <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d01c      	beq.n	8003a98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a5e:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a64:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6e:	f7fd fce9 	bl	8001444 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a76:	f7fd fce5 	bl	8001444 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e1e7      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0ef      	beq.n	8003a76 <HAL_RCC_OscConfig+0x22e>
 8003a96:	e020      	b.n	8003ada <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a98:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a9e:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa8:	f7fd fccc 	bl	8001444 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003aae:	e00d      	b.n	8003acc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab0:	f7fd fcc8 	bl	8001444 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d906      	bls.n	8003acc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e1ca      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003acc:	4b8c      	ldr	r3, [pc, #560]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1ea      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80a6 	beq.w	8003c34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aec:	4b84      	ldr	r3, [pc, #528]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_OscConfig+0x2b4>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <HAL_RCC_OscConfig+0x2b6>
 8003afc:	2300      	movs	r3, #0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b02:	4b7f      	ldr	r3, [pc, #508]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	4a7e      	ldr	r2, [pc, #504]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b0e:	4b7c      	ldr	r3, [pc, #496]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b1e:	4b79      	ldr	r3, [pc, #484]	; (8003d04 <HAL_RCC_OscConfig+0x4bc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d118      	bne.n	8003b5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b2a:	4b76      	ldr	r3, [pc, #472]	; (8003d04 <HAL_RCC_OscConfig+0x4bc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a75      	ldr	r2, [pc, #468]	; (8003d04 <HAL_RCC_OscConfig+0x4bc>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b36:	f7fd fc85 	bl	8001444 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3e:	f7fd fc81 	bl	8001444 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e183      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b50:	4b6c      	ldr	r3, [pc, #432]	; (8003d04 <HAL_RCC_OscConfig+0x4bc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d108      	bne.n	8003b76 <HAL_RCC_OscConfig+0x32e>
 8003b64:	4b66      	ldr	r3, [pc, #408]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	4a65      	ldr	r2, [pc, #404]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b74:	e024      	b.n	8003bc0 <HAL_RCC_OscConfig+0x378>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b05      	cmp	r3, #5
 8003b7c:	d110      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x358>
 8003b7e:	4b60      	ldr	r3, [pc, #384]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b84:	4a5e      	ldr	r2, [pc, #376]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b86:	f043 0304 	orr.w	r3, r3, #4
 8003b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b8e:	4b5c      	ldr	r3, [pc, #368]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	4a5a      	ldr	r2, [pc, #360]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b9e:	e00f      	b.n	8003bc0 <HAL_RCC_OscConfig+0x378>
 8003ba0:	4b57      	ldr	r3, [pc, #348]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	4a56      	ldr	r2, [pc, #344]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bb0:	4b53      	ldr	r3, [pc, #332]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	4a52      	ldr	r2, [pc, #328]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003bb8:	f023 0304 	bic.w	r3, r3, #4
 8003bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d016      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc8:	f7fd fc3c 	bl	8001444 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bce:	e00a      	b.n	8003be6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd0:	f7fd fc38 	bl	8001444 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e138      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be6:	4b46      	ldr	r3, [pc, #280]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ed      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x388>
 8003bf4:	e015      	b.n	8003c22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf6:	f7fd fc25 	bl	8001444 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7fd fc21 	bl	8001444 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e121      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c14:	4b3a      	ldr	r3, [pc, #232]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1ed      	bne.n	8003bfe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c22:	7ffb      	ldrb	r3, [r7, #31]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d105      	bne.n	8003c34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c28:	4b35      	ldr	r3, [pc, #212]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	4a34      	ldr	r2, [pc, #208]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d03c      	beq.n	8003cba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01c      	beq.n	8003c82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c48:	4b2d      	ldr	r3, [pc, #180]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c4e:	4a2c      	ldr	r2, [pc, #176]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7fd fbf4 	bl	8001444 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c60:	f7fd fbf0 	bl	8001444 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e0f2      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c72:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0ef      	beq.n	8003c60 <HAL_RCC_OscConfig+0x418>
 8003c80:	e01b      	b.n	8003cba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c82:	4b1f      	ldr	r3, [pc, #124]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c88:	4a1d      	ldr	r2, [pc, #116]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c92:	f7fd fbd7 	bl	8001444 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c9a:	f7fd fbd3 	bl	8001444 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e0d5      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1ef      	bne.n	8003c9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 80c9 	beq.w	8003e56 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 030c 	and.w	r3, r3, #12
 8003ccc:	2b0c      	cmp	r3, #12
 8003cce:	f000 8083 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d15e      	bne.n	8003d98 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cda:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a08      	ldr	r2, [pc, #32]	; (8003d00 <HAL_RCC_OscConfig+0x4b8>)
 8003ce0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce6:	f7fd fbad 	bl	8001444 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cec:	e00c      	b.n	8003d08 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cee:	f7fd fba9 	bl	8001444 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d905      	bls.n	8003d08 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e0ab      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d08:	4b55      	ldr	r3, [pc, #340]	; (8003e60 <HAL_RCC_OscConfig+0x618>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ec      	bne.n	8003cee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d14:	4b52      	ldr	r3, [pc, #328]	; (8003e60 <HAL_RCC_OscConfig+0x618>)
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	4b52      	ldr	r3, [pc, #328]	; (8003e64 <HAL_RCC_OscConfig+0x61c>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6a11      	ldr	r1, [r2, #32]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d24:	3a01      	subs	r2, #1
 8003d26:	0112      	lsls	r2, r2, #4
 8003d28:	4311      	orrs	r1, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d2e:	0212      	lsls	r2, r2, #8
 8003d30:	4311      	orrs	r1, r2
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d36:	0852      	lsrs	r2, r2, #1
 8003d38:	3a01      	subs	r2, #1
 8003d3a:	0552      	lsls	r2, r2, #21
 8003d3c:	4311      	orrs	r1, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d42:	0852      	lsrs	r2, r2, #1
 8003d44:	3a01      	subs	r2, #1
 8003d46:	0652      	lsls	r2, r2, #25
 8003d48:	4311      	orrs	r1, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d4e:	06d2      	lsls	r2, r2, #27
 8003d50:	430a      	orrs	r2, r1
 8003d52:	4943      	ldr	r1, [pc, #268]	; (8003e60 <HAL_RCC_OscConfig+0x618>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d58:	4b41      	ldr	r3, [pc, #260]	; (8003e60 <HAL_RCC_OscConfig+0x618>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a40      	ldr	r2, [pc, #256]	; (8003e60 <HAL_RCC_OscConfig+0x618>)
 8003d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d62:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d64:	4b3e      	ldr	r3, [pc, #248]	; (8003e60 <HAL_RCC_OscConfig+0x618>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4a3d      	ldr	r2, [pc, #244]	; (8003e60 <HAL_RCC_OscConfig+0x618>)
 8003d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd fb68 	bl	8001444 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fd fb64 	bl	8001444 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e066      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8a:	4b35      	ldr	r3, [pc, #212]	; (8003e60 <HAL_RCC_OscConfig+0x618>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x530>
 8003d96:	e05e      	b.n	8003e56 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d98:	4b31      	ldr	r3, [pc, #196]	; (8003e60 <HAL_RCC_OscConfig+0x618>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a30      	ldr	r2, [pc, #192]	; (8003e60 <HAL_RCC_OscConfig+0x618>)
 8003d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fd fb4e 	bl	8001444 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fd fb4a 	bl	8001444 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e04c      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dbe:	4b28      	ldr	r3, [pc, #160]	; (8003e60 <HAL_RCC_OscConfig+0x618>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003dca:	4b25      	ldr	r3, [pc, #148]	; (8003e60 <HAL_RCC_OscConfig+0x618>)
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	4924      	ldr	r1, [pc, #144]	; (8003e60 <HAL_RCC_OscConfig+0x618>)
 8003dd0:	4b25      	ldr	r3, [pc, #148]	; (8003e68 <HAL_RCC_OscConfig+0x620>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	60cb      	str	r3, [r1, #12]
 8003dd6:	e03e      	b.n	8003e56 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e039      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003de4:	4b1e      	ldr	r3, [pc, #120]	; (8003e60 <HAL_RCC_OscConfig+0x618>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f003 0203 	and.w	r2, r3, #3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d12c      	bne.n	8003e52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	3b01      	subs	r3, #1
 8003e04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d123      	bne.n	8003e52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d11b      	bne.n	8003e52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d113      	bne.n	8003e52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	3b01      	subs	r3, #1
 8003e38:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d109      	bne.n	8003e52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d001      	beq.n	8003e56 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000
 8003e64:	019f800c 	.word	0x019f800c
 8003e68:	feeefffc 	.word	0xfeeefffc

08003e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e11e      	b.n	80040c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e84:	4b91      	ldr	r3, [pc, #580]	; (80040cc <HAL_RCC_ClockConfig+0x260>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d910      	bls.n	8003eb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e92:	4b8e      	ldr	r3, [pc, #568]	; (80040cc <HAL_RCC_ClockConfig+0x260>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 020f 	bic.w	r2, r3, #15
 8003e9a:	498c      	ldr	r1, [pc, #560]	; (80040cc <HAL_RCC_ClockConfig+0x260>)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea2:	4b8a      	ldr	r3, [pc, #552]	; (80040cc <HAL_RCC_ClockConfig+0x260>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e106      	b.n	80040c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d073      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d129      	bne.n	8003f1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ec8:	4b81      	ldr	r3, [pc, #516]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0f4      	b.n	80040c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ed8:	f000 f99e 	bl	8004218 <RCC_GetSysClockFreqFromPLLSource>
 8003edc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4a7c      	ldr	r2, [pc, #496]	; (80040d4 <HAL_RCC_ClockConfig+0x268>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d93f      	bls.n	8003f66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ee6:	4b7a      	ldr	r3, [pc, #488]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d033      	beq.n	8003f66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d12f      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f06:	4b72      	ldr	r3, [pc, #456]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f0e:	4a70      	ldr	r2, [pc, #448]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e024      	b.n	8003f66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d107      	bne.n	8003f34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f24:	4b6a      	ldr	r3, [pc, #424]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0c6      	b.n	80040c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f34:	4b66      	ldr	r3, [pc, #408]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0be      	b.n	80040c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f44:	f000 f8ce 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4a61      	ldr	r2, [pc, #388]	; (80040d4 <HAL_RCC_ClockConfig+0x268>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d909      	bls.n	8003f66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f52:	4b5f      	ldr	r3, [pc, #380]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f5a:	4a5d      	ldr	r2, [pc, #372]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f66:	4b5a      	ldr	r3, [pc, #360]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f023 0203 	bic.w	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4957      	ldr	r1, [pc, #348]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f78:	f7fd fa64 	bl	8001444 <HAL_GetTick>
 8003f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f80:	f7fd fa60 	bl	8001444 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e095      	b.n	80040c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f96:	4b4e      	ldr	r3, [pc, #312]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 020c 	and.w	r2, r3, #12
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d1eb      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d023      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fc0:	4b43      	ldr	r3, [pc, #268]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4a42      	ldr	r2, [pc, #264]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003fc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003fd8:	4b3d      	ldr	r3, [pc, #244]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003fe0:	4a3b      	ldr	r2, [pc, #236]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003fe2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fe6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe8:	4b39      	ldr	r3, [pc, #228]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4936      	ldr	r1, [pc, #216]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
 8003ffa:	e008      	b.n	800400e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d105      	bne.n	800400e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004002:	4b33      	ldr	r3, [pc, #204]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	4a32      	ldr	r2, [pc, #200]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8004008:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800400e:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <HAL_RCC_ClockConfig+0x260>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d21d      	bcs.n	8004058 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401c:	4b2b      	ldr	r3, [pc, #172]	; (80040cc <HAL_RCC_ClockConfig+0x260>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f023 020f 	bic.w	r2, r3, #15
 8004024:	4929      	ldr	r1, [pc, #164]	; (80040cc <HAL_RCC_ClockConfig+0x260>)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	4313      	orrs	r3, r2
 800402a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800402c:	f7fd fa0a 	bl	8001444 <HAL_GetTick>
 8004030:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	e00a      	b.n	800404a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004034:	f7fd fa06 	bl	8001444 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e03b      	b.n	80040c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b20      	ldr	r3, [pc, #128]	; (80040cc <HAL_RCC_ClockConfig+0x260>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d1ed      	bne.n	8004034 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004064:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4917      	ldr	r1, [pc, #92]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004082:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	490f      	ldr	r1, [pc, #60]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004096:	f000 f825 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 800409a:	4602      	mov	r2, r0
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <HAL_RCC_ClockConfig+0x264>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	490c      	ldr	r1, [pc, #48]	; (80040d8 <HAL_RCC_ClockConfig+0x26c>)
 80040a8:	5ccb      	ldrb	r3, [r1, r3]
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	fa22 f303 	lsr.w	r3, r2, r3
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <HAL_RCC_ClockConfig+0x270>)
 80040b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80040b6:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <HAL_RCC_ClockConfig+0x274>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fd f976 	bl	80013ac <HAL_InitTick>
 80040c0:	4603      	mov	r3, r0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40022000 	.word	0x40022000
 80040d0:	40021000 	.word	0x40021000
 80040d4:	04c4b400 	.word	0x04c4b400
 80040d8:	0800c04c 	.word	0x0800c04c
 80040dc:	20000000 	.word	0x20000000
 80040e0:	20000004 	.word	0x20000004

080040e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80040ea:	4b2c      	ldr	r3, [pc, #176]	; (800419c <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d102      	bne.n	80040fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040f6:	4b2a      	ldr	r3, [pc, #168]	; (80041a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	e047      	b.n	800418c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80040fc:	4b27      	ldr	r3, [pc, #156]	; (800419c <HAL_RCC_GetSysClockFreq+0xb8>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 030c 	and.w	r3, r3, #12
 8004104:	2b08      	cmp	r3, #8
 8004106:	d102      	bne.n	800410e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004108:	4b26      	ldr	r3, [pc, #152]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	e03e      	b.n	800418c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800410e:	4b23      	ldr	r3, [pc, #140]	; (800419c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b0c      	cmp	r3, #12
 8004118:	d136      	bne.n	8004188 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800411a:	4b20      	ldr	r3, [pc, #128]	; (800419c <HAL_RCC_GetSysClockFreq+0xb8>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004124:	4b1d      	ldr	r3, [pc, #116]	; (800419c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	3301      	adds	r3, #1
 8004130:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b03      	cmp	r3, #3
 8004136:	d10c      	bne.n	8004152 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004138:	4a1a      	ldr	r2, [pc, #104]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	4a16      	ldr	r2, [pc, #88]	; (800419c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004142:	68d2      	ldr	r2, [r2, #12]
 8004144:	0a12      	lsrs	r2, r2, #8
 8004146:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800414a:	fb02 f303 	mul.w	r3, r2, r3
 800414e:	617b      	str	r3, [r7, #20]
      break;
 8004150:	e00c      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004152:	4a13      	ldr	r2, [pc, #76]	; (80041a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	fbb2 f3f3 	udiv	r3, r2, r3
 800415a:	4a10      	ldr	r2, [pc, #64]	; (800419c <HAL_RCC_GetSysClockFreq+0xb8>)
 800415c:	68d2      	ldr	r2, [r2, #12]
 800415e:	0a12      	lsrs	r2, r2, #8
 8004160:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004164:	fb02 f303 	mul.w	r3, r2, r3
 8004168:	617b      	str	r3, [r7, #20]
      break;
 800416a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800416c:	4b0b      	ldr	r3, [pc, #44]	; (800419c <HAL_RCC_GetSysClockFreq+0xb8>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	0e5b      	lsrs	r3, r3, #25
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	3301      	adds	r3, #1
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	e001      	b.n	800418c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800418c:	693b      	ldr	r3, [r7, #16]
}
 800418e:	4618      	mov	r0, r3
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40021000 	.word	0x40021000
 80041a0:	00f42400 	.word	0x00f42400
 80041a4:	016e3600 	.word	0x016e3600

080041a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041ac:	4b03      	ldr	r3, [pc, #12]	; (80041bc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ae:	681b      	ldr	r3, [r3, #0]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000000 	.word	0x20000000

080041c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041c4:	f7ff fff0 	bl	80041a8 <HAL_RCC_GetHCLKFreq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	0a1b      	lsrs	r3, r3, #8
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	4904      	ldr	r1, [pc, #16]	; (80041e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041d6:	5ccb      	ldrb	r3, [r1, r3]
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40021000 	.word	0x40021000
 80041e8:	0800c05c 	.word	0x0800c05c

080041ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041f0:	f7ff ffda 	bl	80041a8 <HAL_RCC_GetHCLKFreq>
 80041f4:	4602      	mov	r2, r0
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	0adb      	lsrs	r3, r3, #11
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	4904      	ldr	r1, [pc, #16]	; (8004214 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004202:	5ccb      	ldrb	r3, [r1, r3]
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800420c:	4618      	mov	r0, r3
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40021000 	.word	0x40021000
 8004214:	0800c05c 	.word	0x0800c05c

08004218 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800421e:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004228:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	3301      	adds	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b03      	cmp	r3, #3
 800423a:	d10c      	bne.n	8004256 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800423c:	4a17      	ldr	r2, [pc, #92]	; (800429c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	4a14      	ldr	r2, [pc, #80]	; (8004298 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004246:	68d2      	ldr	r2, [r2, #12]
 8004248:	0a12      	lsrs	r2, r2, #8
 800424a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	617b      	str	r3, [r7, #20]
    break;
 8004254:	e00c      	b.n	8004270 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004256:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	fbb2 f3f3 	udiv	r3, r2, r3
 800425e:	4a0e      	ldr	r2, [pc, #56]	; (8004298 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004260:	68d2      	ldr	r2, [r2, #12]
 8004262:	0a12      	lsrs	r2, r2, #8
 8004264:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004268:	fb02 f303 	mul.w	r3, r2, r3
 800426c:	617b      	str	r3, [r7, #20]
    break;
 800426e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004270:	4b09      	ldr	r3, [pc, #36]	; (8004298 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	0e5b      	lsrs	r3, r3, #25
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	3301      	adds	r3, #1
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	fbb2 f3f3 	udiv	r3, r2, r3
 8004288:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800428a:	687b      	ldr	r3, [r7, #4]
}
 800428c:	4618      	mov	r0, r3
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	40021000 	.word	0x40021000
 800429c:	016e3600 	.word	0x016e3600
 80042a0:	00f42400 	.word	0x00f42400

080042a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042ac:	2300      	movs	r3, #0
 80042ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042b0:	2300      	movs	r3, #0
 80042b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8098 	beq.w	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042c2:	2300      	movs	r3, #0
 80042c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c6:	4b43      	ldr	r3, [pc, #268]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10d      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d2:	4b40      	ldr	r3, [pc, #256]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d6:	4a3f      	ldr	r2, [pc, #252]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042dc:	6593      	str	r3, [r2, #88]	; 0x58
 80042de:	4b3d      	ldr	r3, [pc, #244]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e6:	60bb      	str	r3, [r7, #8]
 80042e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ea:	2301      	movs	r3, #1
 80042ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042ee:	4b3a      	ldr	r3, [pc, #232]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a39      	ldr	r2, [pc, #228]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042fa:	f7fd f8a3 	bl	8001444 <HAL_GetTick>
 80042fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004300:	e009      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004302:	f7fd f89f 	bl	8001444 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d902      	bls.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	74fb      	strb	r3, [r7, #19]
        break;
 8004314:	e005      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004316:	4b30      	ldr	r3, [pc, #192]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0ef      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004322:	7cfb      	ldrb	r3, [r7, #19]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d159      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004328:	4b2a      	ldr	r3, [pc, #168]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004332:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01e      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	429a      	cmp	r2, r3
 8004342:	d019      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004344:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004350:	4b20      	ldr	r3, [pc, #128]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	4a1f      	ldr	r2, [pc, #124]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004360:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	4a1b      	ldr	r2, [pc, #108]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004370:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004382:	f7fd f85f 	bl	8001444 <HAL_GetTick>
 8004386:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004388:	e00b      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438a:	f7fd f85b 	bl	8001444 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f241 3288 	movw	r2, #5000	; 0x1388
 8004398:	4293      	cmp	r3, r2
 800439a:	d902      	bls.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	74fb      	strb	r3, [r7, #19]
            break;
 80043a0:	e006      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a2:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0ec      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10b      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043b6:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c4:	4903      	ldr	r1, [pc, #12]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043cc:	e008      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043ce:	7cfb      	ldrb	r3, [r7, #19]
 80043d0:	74bb      	strb	r3, [r7, #18]
 80043d2:	e005      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043dc:	7cfb      	ldrb	r3, [r7, #19]
 80043de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043e0:	7c7b      	ldrb	r3, [r7, #17]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d105      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e6:	4ba7      	ldr	r3, [pc, #668]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ea:	4aa6      	ldr	r2, [pc, #664]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043fe:	4ba1      	ldr	r3, [pc, #644]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f023 0203 	bic.w	r2, r3, #3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	499d      	ldr	r1, [pc, #628]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004420:	4b98      	ldr	r3, [pc, #608]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f023 020c 	bic.w	r2, r3, #12
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	4995      	ldr	r1, [pc, #596]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004442:	4b90      	ldr	r3, [pc, #576]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	498c      	ldr	r1, [pc, #560]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004464:	4b87      	ldr	r3, [pc, #540]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	4984      	ldr	r1, [pc, #528]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004486:	4b7f      	ldr	r3, [pc, #508]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	497b      	ldr	r1, [pc, #492]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044a8:	4b76      	ldr	r3, [pc, #472]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	4973      	ldr	r1, [pc, #460]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044ca:	4b6e      	ldr	r3, [pc, #440]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	496a      	ldr	r1, [pc, #424]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044ec:	4b65      	ldr	r3, [pc, #404]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	4962      	ldr	r1, [pc, #392]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800450e:	4b5d      	ldr	r3, [pc, #372]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	4959      	ldr	r1, [pc, #356]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004530:	4b54      	ldr	r3, [pc, #336]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004536:	f023 0203 	bic.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	4951      	ldr	r1, [pc, #324]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004552:	4b4c      	ldr	r3, [pc, #304]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004558:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	4948      	ldr	r1, [pc, #288]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004570:	2b00      	cmp	r3, #0
 8004572:	d015      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004574:	4b43      	ldr	r3, [pc, #268]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	4940      	ldr	r1, [pc, #256]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004592:	d105      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004594:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4a3a      	ldr	r2, [pc, #232]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800459e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d015      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045ac:	4b35      	ldr	r3, [pc, #212]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ba:	4932      	ldr	r1, [pc, #200]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ca:	d105      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045cc:	4b2d      	ldr	r3, [pc, #180]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4a2c      	ldr	r2, [pc, #176]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d015      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045e4:	4b27      	ldr	r3, [pc, #156]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	4924      	ldr	r1, [pc, #144]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004602:	d105      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004604:	4b1f      	ldr	r3, [pc, #124]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a1e      	ldr	r2, [pc, #120]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800460a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800460e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d015      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800461c:	4b19      	ldr	r3, [pc, #100]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462a:	4916      	ldr	r1, [pc, #88]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463a:	d105      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800463c:	4b11      	ldr	r3, [pc, #68]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4a10      	ldr	r2, [pc, #64]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004646:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d019      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004654:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	4908      	ldr	r1, [pc, #32]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004672:	d109      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004674:	4b03      	ldr	r3, [pc, #12]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a02      	ldr	r2, [pc, #8]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800467e:	60d3      	str	r3, [r2, #12]
 8004680:	e002      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d015      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004694:	4b29      	ldr	r3, [pc, #164]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	4926      	ldr	r1, [pc, #152]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046b2:	d105      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80046b4:	4b21      	ldr	r3, [pc, #132]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4a20      	ldr	r2, [pc, #128]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d015      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80046cc:	4b1b      	ldr	r3, [pc, #108]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046da:	4918      	ldr	r1, [pc, #96]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ea:	d105      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80046ec:	4b13      	ldr	r3, [pc, #76]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4a12      	ldr	r2, [pc, #72]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d015      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004704:	4b0d      	ldr	r3, [pc, #52]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800470a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004712:	490a      	ldr	r1, [pc, #40]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004722:	d105      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4a04      	ldr	r2, [pc, #16]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800472a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800472e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004730:	7cbb      	ldrb	r3, [r7, #18]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40021000 	.word	0x40021000

08004740 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d070      	beq.n	8004834 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fc fb58 	bl	8000e1c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	2b10      	cmp	r3, #16
 8004780:	d04f      	beq.n	8004822 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	22ca      	movs	r2, #202	; 0xca
 8004788:	625a      	str	r2, [r3, #36]	; 0x24
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2253      	movs	r2, #83	; 0x53
 8004790:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f878 	bl	8004888 <RTC_EnterInitMode>
 8004798:	4603      	mov	r3, r0
 800479a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d126      	bne.n	80047f0 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80047b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b4:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6999      	ldr	r1, [r3, #24]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68d9      	ldr	r1, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	041a      	lsls	r2, r3, #16
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f884 	bl	80048f4 <RTC_ExitInitMode>
 80047ec:	4603      	mov	r3, r0
 80047ee:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d110      	bne.n	8004818 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1a      	ldr	r2, [r3, #32]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	22ff      	movs	r2, #255	; 0xff
 800481e:	625a      	str	r2, [r3, #36]	; 0x24
 8004820:	e001      	b.n	8004826 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d103      	bne.n	8004834 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a0d      	ldr	r2, [pc, #52]	; (8004884 <HAL_RTC_WaitForSynchro+0x44>)
 800484e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004850:	f7fc fdf8 	bl	8001444 <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8004856:	e009      	b.n	800486c <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004858:	f7fc fdf4 	bl	8001444 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004866:	d901      	bls.n	800486c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e007      	b.n	800487c <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0ee      	beq.n	8004858 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	0001005f 	.word	0x0001005f

08004888 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d123      	bne.n	80048ea <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048b0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80048b2:	f7fc fdc7 	bl	8001444 <HAL_GetTick>
 80048b6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80048b8:	e00d      	b.n	80048d6 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80048ba:	f7fc fdc3 	bl	8001444 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048c8:	d905      	bls.n	80048d6 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2203      	movs	r2, #3
 80048d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <RTC_EnterInitMode+0x62>
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d1e7      	bne.n	80048ba <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800490e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10c      	bne.n	8004938 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff ff8e 	bl	8004840 <HAL_RTC_WaitForSynchro>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d022      	beq.n	8004970 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2203      	movs	r2, #3
 800492e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	73fb      	strb	r3, [r7, #15]
 8004936:	e01b      	b.n	8004970 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0220 	bic.w	r2, r2, #32
 8004946:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff ff79 	bl	8004840 <HAL_RTC_WaitForSynchro>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2203      	movs	r2, #3
 8004958:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0220 	orr.w	r2, r2, #32
 800496e:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004970:	7bfb      	ldrb	r3, [r7, #15]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified TAMP Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 8004988:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <HAL_RTCEx_BKUPWrite+0x2c>)
 800498a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	4413      	add	r3, r2
 8004994:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	601a      	str	r2, [r3, #0]
}
 800499c:	bf00      	nop
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	40002500 	.word	0x40002500

080049ac <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB to
  *          specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 80049b6:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <HAL_RTCEx_BKUPRead+0x28>)
 80049b8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4413      	add	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	40002500 	.word	0x40002500

080049d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e042      	b.n	8004a70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d106      	bne.n	8004a02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7fc fb99 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2224      	movs	r2, #36	; 0x24
 8004a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0201 	bic.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 ff38 	bl	8005898 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fc39 	bl	80052a0 <UART_SetConfig>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e01b      	b.n	8004a70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 ffb7 	bl	80059dc <UART_CheckIdleState>
 8004a6e:	4603      	mov	r3, r0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08a      	sub	sp, #40	; 0x28
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	4613      	mov	r3, r2
 8004a86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d17b      	bne.n	8004b8a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_UART_Transmit+0x26>
 8004a98:	88fb      	ldrh	r3, [r7, #6]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e074      	b.n	8004b8c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2221      	movs	r2, #33	; 0x21
 8004aae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ab2:	f7fc fcc7 	bl	8001444 <HAL_GetTick>
 8004ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	88fa      	ldrh	r2, [r7, #6]
 8004abc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	88fa      	ldrh	r2, [r7, #6]
 8004ac4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad0:	d108      	bne.n	8004ae4 <HAL_UART_Transmit+0x6c>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d104      	bne.n	8004ae4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	e003      	b.n	8004aec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004aec:	e030      	b.n	8004b50 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2200      	movs	r2, #0
 8004af6:	2180      	movs	r1, #128	; 0x80
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f001 f819 	bl	8005b30 <UART_WaitOnFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e03d      	b.n	8004b8c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10b      	bne.n	8004b2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	3302      	adds	r3, #2
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	e007      	b.n	8004b3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	781a      	ldrb	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1c8      	bne.n	8004aee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2200      	movs	r2, #0
 8004b64:	2140      	movs	r1, #64	; 0x40
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 ffe2 	bl	8005b30 <UART_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d005      	beq.n	8004b7e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e006      	b.n	8004b8c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	e000      	b.n	8004b8c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004b8a:	2302      	movs	r3, #2
  }
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3720      	adds	r7, #32
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	; 0x28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d137      	bne.n	8004c1c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_UART_Receive_IT+0x24>
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e030      	b.n	8004c1e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <HAL_UART_Receive_IT+0x94>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d01f      	beq.n	8004c0c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d018      	beq.n	8004c0c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	613b      	str	r3, [r7, #16]
   return(result);
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	623b      	str	r3, [r7, #32]
 8004bfa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	69f9      	ldr	r1, [r7, #28]
 8004bfe:	6a3a      	ldr	r2, [r7, #32]
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e6      	bne.n	8004bda <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fffa 	bl	8005c0c <UART_Start_Receive_IT>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	e000      	b.n	8004c1e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c1c:	2302      	movs	r3, #2
  }
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3728      	adds	r7, #40	; 0x28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40008000 	.word	0x40008000

08004c2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b0ba      	sub	sp, #232	; 0xe8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004c56:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004c60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d11b      	bne.n	8004ca0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d015      	beq.n	8004ca0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d105      	bne.n	8004c8c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d009      	beq.n	8004ca0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 82e3 	beq.w	800525c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4798      	blx	r3
      }
      return;
 8004c9e:	e2dd      	b.n	800525c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ca0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8123 	beq.w	8004ef0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004caa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004cae:	4b8d      	ldr	r3, [pc, #564]	; (8004ee4 <HAL_UART_IRQHandler+0x2b8>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004cb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004cba:	4b8b      	ldr	r3, [pc, #556]	; (8004ee8 <HAL_UART_IRQHandler+0x2bc>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 8116 	beq.w	8004ef0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d011      	beq.n	8004cf4 <HAL_UART_IRQHandler+0xc8>
 8004cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00b      	beq.n	8004cf4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	f043 0201 	orr.w	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d011      	beq.n	8004d24 <HAL_UART_IRQHandler+0xf8>
 8004d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00b      	beq.n	8004d24 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2202      	movs	r2, #2
 8004d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	f043 0204 	orr.w	r2, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d011      	beq.n	8004d54 <HAL_UART_IRQHandler+0x128>
 8004d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00b      	beq.n	8004d54 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2204      	movs	r2, #4
 8004d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4a:	f043 0202 	orr.w	r2, r3, #2
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d017      	beq.n	8004d90 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d105      	bne.n	8004d78 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004d6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004d70:	4b5c      	ldr	r3, [pc, #368]	; (8004ee4 <HAL_UART_IRQHandler+0x2b8>)
 8004d72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00b      	beq.n	8004d90 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d86:	f043 0208 	orr.w	r2, r3, #8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d012      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x196>
 8004d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00c      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004db0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db8:	f043 0220 	orr.w	r2, r3, #32
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 8249 	beq.w	8005260 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d013      	beq.n	8004e02 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d105      	bne.n	8004df2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d005      	beq.n	8004e26 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d054      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f001 f812 	bl	8005e50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	d146      	bne.n	8004ec8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3308      	adds	r3, #8
 8004e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3308      	adds	r3, #8
 8004e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1d9      	bne.n	8004e3a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d017      	beq.n	8004ec0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e96:	4a15      	ldr	r2, [pc, #84]	; (8004eec <HAL_UART_IRQHandler+0x2c0>)
 8004e98:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fc fc65 	bl	8001770 <HAL_DMA_Abort_IT>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d019      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004eba:	4610      	mov	r0, r2
 8004ebc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ebe:	e00f      	b.n	8004ee0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7fc f90d 	bl	80010e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec6:	e00b      	b.n	8004ee0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7fc f909 	bl	80010e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ece:	e007      	b.n	8004ee0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7fc f905 	bl	80010e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004ede:	e1bf      	b.n	8005260 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee0:	bf00      	nop
    return;
 8004ee2:	e1bd      	b.n	8005260 <HAL_UART_IRQHandler+0x634>
 8004ee4:	10000001 	.word	0x10000001
 8004ee8:	04000120 	.word	0x04000120
 8004eec:	08005f1d 	.word	0x08005f1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	f040 8153 	bne.w	80051a0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 814c 	beq.w	80051a0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 8145 	beq.w	80051a0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2210      	movs	r2, #16
 8004f1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	f040 80bb 	bne.w	80050a4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 818f 	beq.w	8005264 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f50:	429a      	cmp	r2, r3
 8004f52:	f080 8187 	bcs.w	8005264 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f040 8087 	bne.w	8005082 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fa2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004faa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1da      	bne.n	8004f74 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fd0:	f023 0301 	bic.w	r3, r3, #1
 8004fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3308      	adds	r3, #8
 8004fde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fe2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e1      	bne.n	8004fbe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3308      	adds	r3, #8
 8005000:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800500a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800500c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800501e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005020:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005022:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005024:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800502c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1e3      	bne.n	8004ffa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005048:	e853 3f00 	ldrex	r3, [r3]
 800504c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800504e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005050:	f023 0310 	bic.w	r3, r3, #16
 8005054:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005062:	65bb      	str	r3, [r7, #88]	; 0x58
 8005064:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005068:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e4      	bne.n	8005040 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800507c:	4618      	mov	r0, r3
 800507e:	f7fc fb1e 	bl	80016be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2202      	movs	r2, #2
 8005086:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005094:	b29b      	uxth	r3, r3
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	b29b      	uxth	r3, r3
 800509a:	4619      	mov	r1, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f8f3 	bl	8005288 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050a2:	e0df      	b.n	8005264 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 80d1 	beq.w	8005268 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80050c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 80cc 	beq.w	8005268 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050f2:	647b      	str	r3, [r7, #68]	; 0x44
 80050f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e4      	bne.n	80050d0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3308      	adds	r3, #8
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	623b      	str	r3, [r7, #32]
   return(result);
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3308      	adds	r3, #8
 800512a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800512e:	633a      	str	r2, [r7, #48]	; 0x30
 8005130:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e1      	bne.n	8005106 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	60fb      	str	r3, [r7, #12]
   return(result);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0310 	bic.w	r3, r3, #16
 800516a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	69b9      	ldr	r1, [r7, #24]
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	617b      	str	r3, [r7, #20]
   return(result);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e4      	bne.n	8005156 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f875 	bl	8005288 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800519e:	e063      	b.n	8005268 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00e      	beq.n	80051ca <HAL_UART_IRQHandler+0x59e>
 80051ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f001 fc08 	bl	80069d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051c8:	e051      	b.n	800526e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80051ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d014      	beq.n	8005200 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80051d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d105      	bne.n	80051ee <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80051e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d008      	beq.n	8005200 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d03a      	beq.n	800526c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	4798      	blx	r3
    }
    return;
 80051fe:	e035      	b.n	800526c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	d009      	beq.n	8005220 <HAL_UART_IRQHandler+0x5f4>
 800520c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fe95 	bl	8005f48 <UART_EndTransmit_IT>
    return;
 800521e:	e026      	b.n	800526e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <HAL_UART_IRQHandler+0x614>
 800522c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005230:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f001 fbe1 	bl	8006a00 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800523e:	e016      	b.n	800526e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d010      	beq.n	800526e <HAL_UART_IRQHandler+0x642>
 800524c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005250:	2b00      	cmp	r3, #0
 8005252:	da0c      	bge.n	800526e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f001 fbc9 	bl	80069ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800525a:	e008      	b.n	800526e <HAL_UART_IRQHandler+0x642>
      return;
 800525c:	bf00      	nop
 800525e:	e006      	b.n	800526e <HAL_UART_IRQHandler+0x642>
    return;
 8005260:	bf00      	nop
 8005262:	e004      	b.n	800526e <HAL_UART_IRQHandler+0x642>
      return;
 8005264:	bf00      	nop
 8005266:	e002      	b.n	800526e <HAL_UART_IRQHandler+0x642>
      return;
 8005268:	bf00      	nop
 800526a:	e000      	b.n	800526e <HAL_UART_IRQHandler+0x642>
    return;
 800526c:	bf00      	nop
  }
}
 800526e:	37e8      	adds	r7, #232	; 0xe8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a4:	b08c      	sub	sp, #48	; 0x30
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	431a      	orrs	r2, r3
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	431a      	orrs	r2, r3
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	4baa      	ldr	r3, [pc, #680]	; (8005578 <UART_SetConfig+0x2d8>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052d8:	430b      	orrs	r3, r1
 80052da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a9f      	ldr	r2, [pc, #636]	; (800557c <UART_SetConfig+0x2dc>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d004      	beq.n	800530c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005308:	4313      	orrs	r3, r2
 800530a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005316:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005320:	430b      	orrs	r3, r1
 8005322:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	f023 010f 	bic.w	r1, r3, #15
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a90      	ldr	r2, [pc, #576]	; (8005580 <UART_SetConfig+0x2e0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d125      	bne.n	8005390 <UART_SetConfig+0xf0>
 8005344:	4b8f      	ldr	r3, [pc, #572]	; (8005584 <UART_SetConfig+0x2e4>)
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	2b03      	cmp	r3, #3
 8005350:	d81a      	bhi.n	8005388 <UART_SetConfig+0xe8>
 8005352:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <UART_SetConfig+0xb8>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	08005369 	.word	0x08005369
 800535c:	08005379 	.word	0x08005379
 8005360:	08005371 	.word	0x08005371
 8005364:	08005381 	.word	0x08005381
 8005368:	2301      	movs	r3, #1
 800536a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800536e:	e116      	b.n	800559e <UART_SetConfig+0x2fe>
 8005370:	2302      	movs	r3, #2
 8005372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005376:	e112      	b.n	800559e <UART_SetConfig+0x2fe>
 8005378:	2304      	movs	r3, #4
 800537a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800537e:	e10e      	b.n	800559e <UART_SetConfig+0x2fe>
 8005380:	2308      	movs	r3, #8
 8005382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005386:	e10a      	b.n	800559e <UART_SetConfig+0x2fe>
 8005388:	2310      	movs	r3, #16
 800538a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800538e:	e106      	b.n	800559e <UART_SetConfig+0x2fe>
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a7c      	ldr	r2, [pc, #496]	; (8005588 <UART_SetConfig+0x2e8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d138      	bne.n	800540c <UART_SetConfig+0x16c>
 800539a:	4b7a      	ldr	r3, [pc, #488]	; (8005584 <UART_SetConfig+0x2e4>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a0:	f003 030c 	and.w	r3, r3, #12
 80053a4:	2b0c      	cmp	r3, #12
 80053a6:	d82d      	bhi.n	8005404 <UART_SetConfig+0x164>
 80053a8:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <UART_SetConfig+0x110>)
 80053aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ae:	bf00      	nop
 80053b0:	080053e5 	.word	0x080053e5
 80053b4:	08005405 	.word	0x08005405
 80053b8:	08005405 	.word	0x08005405
 80053bc:	08005405 	.word	0x08005405
 80053c0:	080053f5 	.word	0x080053f5
 80053c4:	08005405 	.word	0x08005405
 80053c8:	08005405 	.word	0x08005405
 80053cc:	08005405 	.word	0x08005405
 80053d0:	080053ed 	.word	0x080053ed
 80053d4:	08005405 	.word	0x08005405
 80053d8:	08005405 	.word	0x08005405
 80053dc:	08005405 	.word	0x08005405
 80053e0:	080053fd 	.word	0x080053fd
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ea:	e0d8      	b.n	800559e <UART_SetConfig+0x2fe>
 80053ec:	2302      	movs	r3, #2
 80053ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053f2:	e0d4      	b.n	800559e <UART_SetConfig+0x2fe>
 80053f4:	2304      	movs	r3, #4
 80053f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053fa:	e0d0      	b.n	800559e <UART_SetConfig+0x2fe>
 80053fc:	2308      	movs	r3, #8
 80053fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005402:	e0cc      	b.n	800559e <UART_SetConfig+0x2fe>
 8005404:	2310      	movs	r3, #16
 8005406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800540a:	e0c8      	b.n	800559e <UART_SetConfig+0x2fe>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a5e      	ldr	r2, [pc, #376]	; (800558c <UART_SetConfig+0x2ec>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d125      	bne.n	8005462 <UART_SetConfig+0x1c2>
 8005416:	4b5b      	ldr	r3, [pc, #364]	; (8005584 <UART_SetConfig+0x2e4>)
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005420:	2b30      	cmp	r3, #48	; 0x30
 8005422:	d016      	beq.n	8005452 <UART_SetConfig+0x1b2>
 8005424:	2b30      	cmp	r3, #48	; 0x30
 8005426:	d818      	bhi.n	800545a <UART_SetConfig+0x1ba>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d00a      	beq.n	8005442 <UART_SetConfig+0x1a2>
 800542c:	2b20      	cmp	r3, #32
 800542e:	d814      	bhi.n	800545a <UART_SetConfig+0x1ba>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <UART_SetConfig+0x19a>
 8005434:	2b10      	cmp	r3, #16
 8005436:	d008      	beq.n	800544a <UART_SetConfig+0x1aa>
 8005438:	e00f      	b.n	800545a <UART_SetConfig+0x1ba>
 800543a:	2300      	movs	r3, #0
 800543c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005440:	e0ad      	b.n	800559e <UART_SetConfig+0x2fe>
 8005442:	2302      	movs	r3, #2
 8005444:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005448:	e0a9      	b.n	800559e <UART_SetConfig+0x2fe>
 800544a:	2304      	movs	r3, #4
 800544c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005450:	e0a5      	b.n	800559e <UART_SetConfig+0x2fe>
 8005452:	2308      	movs	r3, #8
 8005454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005458:	e0a1      	b.n	800559e <UART_SetConfig+0x2fe>
 800545a:	2310      	movs	r3, #16
 800545c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005460:	e09d      	b.n	800559e <UART_SetConfig+0x2fe>
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a4a      	ldr	r2, [pc, #296]	; (8005590 <UART_SetConfig+0x2f0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d125      	bne.n	80054b8 <UART_SetConfig+0x218>
 800546c:	4b45      	ldr	r3, [pc, #276]	; (8005584 <UART_SetConfig+0x2e4>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005472:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005476:	2bc0      	cmp	r3, #192	; 0xc0
 8005478:	d016      	beq.n	80054a8 <UART_SetConfig+0x208>
 800547a:	2bc0      	cmp	r3, #192	; 0xc0
 800547c:	d818      	bhi.n	80054b0 <UART_SetConfig+0x210>
 800547e:	2b80      	cmp	r3, #128	; 0x80
 8005480:	d00a      	beq.n	8005498 <UART_SetConfig+0x1f8>
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d814      	bhi.n	80054b0 <UART_SetConfig+0x210>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <UART_SetConfig+0x1f0>
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d008      	beq.n	80054a0 <UART_SetConfig+0x200>
 800548e:	e00f      	b.n	80054b0 <UART_SetConfig+0x210>
 8005490:	2300      	movs	r3, #0
 8005492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005496:	e082      	b.n	800559e <UART_SetConfig+0x2fe>
 8005498:	2302      	movs	r3, #2
 800549a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800549e:	e07e      	b.n	800559e <UART_SetConfig+0x2fe>
 80054a0:	2304      	movs	r3, #4
 80054a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054a6:	e07a      	b.n	800559e <UART_SetConfig+0x2fe>
 80054a8:	2308      	movs	r3, #8
 80054aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ae:	e076      	b.n	800559e <UART_SetConfig+0x2fe>
 80054b0:	2310      	movs	r3, #16
 80054b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054b6:	e072      	b.n	800559e <UART_SetConfig+0x2fe>
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a35      	ldr	r2, [pc, #212]	; (8005594 <UART_SetConfig+0x2f4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d12a      	bne.n	8005518 <UART_SetConfig+0x278>
 80054c2:	4b30      	ldr	r3, [pc, #192]	; (8005584 <UART_SetConfig+0x2e4>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d0:	d01a      	beq.n	8005508 <UART_SetConfig+0x268>
 80054d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d6:	d81b      	bhi.n	8005510 <UART_SetConfig+0x270>
 80054d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054dc:	d00c      	beq.n	80054f8 <UART_SetConfig+0x258>
 80054de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e2:	d815      	bhi.n	8005510 <UART_SetConfig+0x270>
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <UART_SetConfig+0x250>
 80054e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ec:	d008      	beq.n	8005500 <UART_SetConfig+0x260>
 80054ee:	e00f      	b.n	8005510 <UART_SetConfig+0x270>
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054f6:	e052      	b.n	800559e <UART_SetConfig+0x2fe>
 80054f8:	2302      	movs	r3, #2
 80054fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054fe:	e04e      	b.n	800559e <UART_SetConfig+0x2fe>
 8005500:	2304      	movs	r3, #4
 8005502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005506:	e04a      	b.n	800559e <UART_SetConfig+0x2fe>
 8005508:	2308      	movs	r3, #8
 800550a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800550e:	e046      	b.n	800559e <UART_SetConfig+0x2fe>
 8005510:	2310      	movs	r3, #16
 8005512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005516:	e042      	b.n	800559e <UART_SetConfig+0x2fe>
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a17      	ldr	r2, [pc, #92]	; (800557c <UART_SetConfig+0x2dc>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d13a      	bne.n	8005598 <UART_SetConfig+0x2f8>
 8005522:	4b18      	ldr	r3, [pc, #96]	; (8005584 <UART_SetConfig+0x2e4>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005528:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800552c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005530:	d01a      	beq.n	8005568 <UART_SetConfig+0x2c8>
 8005532:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005536:	d81b      	bhi.n	8005570 <UART_SetConfig+0x2d0>
 8005538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800553c:	d00c      	beq.n	8005558 <UART_SetConfig+0x2b8>
 800553e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005542:	d815      	bhi.n	8005570 <UART_SetConfig+0x2d0>
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <UART_SetConfig+0x2b0>
 8005548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554c:	d008      	beq.n	8005560 <UART_SetConfig+0x2c0>
 800554e:	e00f      	b.n	8005570 <UART_SetConfig+0x2d0>
 8005550:	2300      	movs	r3, #0
 8005552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005556:	e022      	b.n	800559e <UART_SetConfig+0x2fe>
 8005558:	2302      	movs	r3, #2
 800555a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800555e:	e01e      	b.n	800559e <UART_SetConfig+0x2fe>
 8005560:	2304      	movs	r3, #4
 8005562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005566:	e01a      	b.n	800559e <UART_SetConfig+0x2fe>
 8005568:	2308      	movs	r3, #8
 800556a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800556e:	e016      	b.n	800559e <UART_SetConfig+0x2fe>
 8005570:	2310      	movs	r3, #16
 8005572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005576:	e012      	b.n	800559e <UART_SetConfig+0x2fe>
 8005578:	cfff69f3 	.word	0xcfff69f3
 800557c:	40008000 	.word	0x40008000
 8005580:	40013800 	.word	0x40013800
 8005584:	40021000 	.word	0x40021000
 8005588:	40004400 	.word	0x40004400
 800558c:	40004800 	.word	0x40004800
 8005590:	40004c00 	.word	0x40004c00
 8005594:	40005000 	.word	0x40005000
 8005598:	2310      	movs	r3, #16
 800559a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4aae      	ldr	r2, [pc, #696]	; (800585c <UART_SetConfig+0x5bc>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	f040 8097 	bne.w	80056d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d823      	bhi.n	80055fa <UART_SetConfig+0x35a>
 80055b2:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <UART_SetConfig+0x318>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	080055dd 	.word	0x080055dd
 80055bc:	080055fb 	.word	0x080055fb
 80055c0:	080055e5 	.word	0x080055e5
 80055c4:	080055fb 	.word	0x080055fb
 80055c8:	080055eb 	.word	0x080055eb
 80055cc:	080055fb 	.word	0x080055fb
 80055d0:	080055fb 	.word	0x080055fb
 80055d4:	080055fb 	.word	0x080055fb
 80055d8:	080055f3 	.word	0x080055f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055dc:	f7fe fdf0 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 80055e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055e2:	e010      	b.n	8005606 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055e4:	4b9e      	ldr	r3, [pc, #632]	; (8005860 <UART_SetConfig+0x5c0>)
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055e8:	e00d      	b.n	8005606 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ea:	f7fe fd7b 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 80055ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055f0:	e009      	b.n	8005606 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055f8:	e005      	b.n	8005606 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005604:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 8130 	beq.w	800586e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	4a94      	ldr	r2, [pc, #592]	; (8005864 <UART_SetConfig+0x5c4>)
 8005614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005618:	461a      	mov	r2, r3
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005620:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	4413      	add	r3, r2
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	429a      	cmp	r2, r3
 8005630:	d305      	bcc.n	800563e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	429a      	cmp	r2, r3
 800563c:	d903      	bls.n	8005646 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005644:	e113      	b.n	800586e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	2200      	movs	r2, #0
 800564a:	60bb      	str	r3, [r7, #8]
 800564c:	60fa      	str	r2, [r7, #12]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	4a84      	ldr	r2, [pc, #528]	; (8005864 <UART_SetConfig+0x5c4>)
 8005654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005658:	b29b      	uxth	r3, r3
 800565a:	2200      	movs	r2, #0
 800565c:	603b      	str	r3, [r7, #0]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005664:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005668:	f7fa fe2a 	bl	80002c0 <__aeabi_uldivmod>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4610      	mov	r0, r2
 8005672:	4619      	mov	r1, r3
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	020b      	lsls	r3, r1, #8
 800567e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005682:	0202      	lsls	r2, r0, #8
 8005684:	6979      	ldr	r1, [r7, #20]
 8005686:	6849      	ldr	r1, [r1, #4]
 8005688:	0849      	lsrs	r1, r1, #1
 800568a:	2000      	movs	r0, #0
 800568c:	460c      	mov	r4, r1
 800568e:	4605      	mov	r5, r0
 8005690:	eb12 0804 	adds.w	r8, r2, r4
 8005694:	eb43 0905 	adc.w	r9, r3, r5
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	469a      	mov	sl, r3
 80056a0:	4693      	mov	fp, r2
 80056a2:	4652      	mov	r2, sl
 80056a4:	465b      	mov	r3, fp
 80056a6:	4640      	mov	r0, r8
 80056a8:	4649      	mov	r1, r9
 80056aa:	f7fa fe09 	bl	80002c0 <__aeabi_uldivmod>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4613      	mov	r3, r2
 80056b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056bc:	d308      	bcc.n	80056d0 <UART_SetConfig+0x430>
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056c4:	d204      	bcs.n	80056d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6a3a      	ldr	r2, [r7, #32]
 80056cc:	60da      	str	r2, [r3, #12]
 80056ce:	e0ce      	b.n	800586e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80056d6:	e0ca      	b.n	800586e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e0:	d166      	bne.n	80057b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80056e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d827      	bhi.n	800573a <UART_SetConfig+0x49a>
 80056ea:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <UART_SetConfig+0x450>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	08005715 	.word	0x08005715
 80056f4:	0800571d 	.word	0x0800571d
 80056f8:	08005725 	.word	0x08005725
 80056fc:	0800573b 	.word	0x0800573b
 8005700:	0800572b 	.word	0x0800572b
 8005704:	0800573b 	.word	0x0800573b
 8005708:	0800573b 	.word	0x0800573b
 800570c:	0800573b 	.word	0x0800573b
 8005710:	08005733 	.word	0x08005733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005714:	f7fe fd54 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 8005718:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800571a:	e014      	b.n	8005746 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800571c:	f7fe fd66 	bl	80041ec <HAL_RCC_GetPCLK2Freq>
 8005720:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005722:	e010      	b.n	8005746 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005724:	4b4e      	ldr	r3, [pc, #312]	; (8005860 <UART_SetConfig+0x5c0>)
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005728:	e00d      	b.n	8005746 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800572a:	f7fe fcdb 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 800572e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005730:	e009      	b.n	8005746 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005736:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005738:	e005      	b.n	8005746 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005744:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8090 	beq.w	800586e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	4a44      	ldr	r2, [pc, #272]	; (8005864 <UART_SetConfig+0x5c4>)
 8005754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005758:	461a      	mov	r2, r3
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005760:	005a      	lsls	r2, r3, #1
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	085b      	lsrs	r3, r3, #1
 8005768:	441a      	add	r2, r3
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005772:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	2b0f      	cmp	r3, #15
 8005778:	d916      	bls.n	80057a8 <UART_SetConfig+0x508>
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005780:	d212      	bcs.n	80057a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	b29b      	uxth	r3, r3
 8005786:	f023 030f 	bic.w	r3, r3, #15
 800578a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	085b      	lsrs	r3, r3, #1
 8005790:	b29b      	uxth	r3, r3
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	b29a      	uxth	r2, r3
 8005798:	8bfb      	ldrh	r3, [r7, #30]
 800579a:	4313      	orrs	r3, r2
 800579c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	8bfa      	ldrh	r2, [r7, #30]
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	e062      	b.n	800586e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80057ae:	e05e      	b.n	800586e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d828      	bhi.n	800580a <UART_SetConfig+0x56a>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <UART_SetConfig+0x520>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057e5 	.word	0x080057e5
 80057c4:	080057ed 	.word	0x080057ed
 80057c8:	080057f5 	.word	0x080057f5
 80057cc:	0800580b 	.word	0x0800580b
 80057d0:	080057fb 	.word	0x080057fb
 80057d4:	0800580b 	.word	0x0800580b
 80057d8:	0800580b 	.word	0x0800580b
 80057dc:	0800580b 	.word	0x0800580b
 80057e0:	08005803 	.word	0x08005803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e4:	f7fe fcec 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 80057e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057ea:	e014      	b.n	8005816 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ec:	f7fe fcfe 	bl	80041ec <HAL_RCC_GetPCLK2Freq>
 80057f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057f2:	e010      	b.n	8005816 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057f4:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <UART_SetConfig+0x5c0>)
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057f8:	e00d      	b.n	8005816 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057fa:	f7fe fc73 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 80057fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005800:	e009      	b.n	8005816 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005808:	e005      	b.n	8005816 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005814:	bf00      	nop
    }

    if (pclk != 0U)
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	2b00      	cmp	r3, #0
 800581a:	d028      	beq.n	800586e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	4a10      	ldr	r2, [pc, #64]	; (8005864 <UART_SetConfig+0x5c4>)
 8005822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005826:	461a      	mov	r2, r3
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	fbb3 f2f2 	udiv	r2, r3, r2
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	441a      	add	r2, r3
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	fbb2 f3f3 	udiv	r3, r2, r3
 800583e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	2b0f      	cmp	r3, #15
 8005844:	d910      	bls.n	8005868 <UART_SetConfig+0x5c8>
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584c:	d20c      	bcs.n	8005868 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	b29a      	uxth	r2, r3
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60da      	str	r2, [r3, #12]
 8005858:	e009      	b.n	800586e <UART_SetConfig+0x5ce>
 800585a:	bf00      	nop
 800585c:	40008000 	.word	0x40008000
 8005860:	00f42400 	.word	0x00f42400
 8005864:	0800c06c 	.word	0x0800c06c
      }
      else
      {
        ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2201      	movs	r2, #1
 8005872:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2201      	movs	r2, #1
 800587a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2200      	movs	r2, #0
 8005882:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2200      	movs	r2, #0
 8005888:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800588a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800588e:	4618      	mov	r0, r3
 8005890:	3730      	adds	r7, #48	; 0x30
 8005892:	46bd      	mov	sp, r7
 8005894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01a      	beq.n	80059ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005996:	d10a      	bne.n	80059ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	605a      	str	r2, [r3, #4]
  }
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b098      	sub	sp, #96	; 0x60
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059ec:	f7fb fd2a 	bl	8001444 <HAL_GetTick>
 80059f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d12f      	bne.n	8005a60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f88e 	bl	8005b30 <UART_WaitOnFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d022      	beq.n	8005a60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a38:	647b      	str	r3, [r7, #68]	; 0x44
 8005a3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e6      	bne.n	8005a1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e063      	b.n	8005b28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d149      	bne.n	8005b02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a76:	2200      	movs	r2, #0
 8005a78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f857 	bl	8005b30 <UART_WaitOnFlagUntilTimeout>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d03c      	beq.n	8005b02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	623b      	str	r3, [r7, #32]
   return(result);
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8005aa8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e6      	bne.n	8005a88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3308      	adds	r3, #8
 8005ac0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ada:	61fa      	str	r2, [r7, #28]
 8005adc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	69b9      	ldr	r1, [r7, #24]
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e5      	bne.n	8005aba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e012      	b.n	8005b28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3758      	adds	r7, #88	; 0x58
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b40:	e04f      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d04b      	beq.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b4a:	f7fb fc7b 	bl	8001444 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d302      	bcc.n	8005b60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e04e      	b.n	8005c02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d037      	beq.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b80      	cmp	r3, #128	; 0x80
 8005b76:	d034      	beq.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b40      	cmp	r3, #64	; 0x40
 8005b7c:	d031      	beq.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d110      	bne.n	8005bae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2208      	movs	r2, #8
 8005b92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f95b 	bl	8005e50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e029      	b.n	8005c02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bbc:	d111      	bne.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f941 	bl	8005e50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e00f      	b.n	8005c02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4013      	ands	r3, r2
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	bf0c      	ite	eq
 8005bf2:	2301      	moveq	r3, #1
 8005bf4:	2300      	movne	r3, #0
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d0a0      	beq.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b0a3      	sub	sp, #140	; 0x8c
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	4613      	mov	r3, r2
 8005c18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	88fa      	ldrh	r2, [r7, #6]
 8005c24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	d10e      	bne.n	8005c5e <UART_Start_Receive_IT+0x52>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <UART_Start_Receive_IT+0x48>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c52:	e02d      	b.n	8005cb0 <UART_Start_Receive_IT+0xa4>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	22ff      	movs	r2, #255	; 0xff
 8005c58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c5c:	e028      	b.n	8005cb0 <UART_Start_Receive_IT+0xa4>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10d      	bne.n	8005c82 <UART_Start_Receive_IT+0x76>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <UART_Start_Receive_IT+0x6c>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	22ff      	movs	r2, #255	; 0xff
 8005c72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c76:	e01b      	b.n	8005cb0 <UART_Start_Receive_IT+0xa4>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	227f      	movs	r2, #127	; 0x7f
 8005c7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c80:	e016      	b.n	8005cb0 <UART_Start_Receive_IT+0xa4>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c8a:	d10d      	bne.n	8005ca8 <UART_Start_Receive_IT+0x9c>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d104      	bne.n	8005c9e <UART_Start_Receive_IT+0x92>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	227f      	movs	r2, #127	; 0x7f
 8005c98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c9c:	e008      	b.n	8005cb0 <UART_Start_Receive_IT+0xa4>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	223f      	movs	r2, #63	; 0x3f
 8005ca2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ca6:	e003      	b.n	8005cb0 <UART_Start_Receive_IT+0xa4>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2222      	movs	r2, #34	; 0x22
 8005cbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cd2:	f043 0301 	orr.w	r3, r3, #1
 8005cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3308      	adds	r3, #8
 8005ce0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005ce4:	673a      	str	r2, [r7, #112]	; 0x70
 8005ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005cea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005cec:	e841 2300 	strex	r3, r2, [r1]
 8005cf0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005cf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e3      	bne.n	8005cc0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d00:	d14f      	bne.n	8005da2 <UART_Start_Receive_IT+0x196>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d08:	88fa      	ldrh	r2, [r7, #6]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d349      	bcc.n	8005da2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d16:	d107      	bne.n	8005d28 <UART_Start_Receive_IT+0x11c>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d103      	bne.n	8005d28 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a47      	ldr	r2, [pc, #284]	; (8005e40 <UART_Start_Receive_IT+0x234>)
 8005d24:	675a      	str	r2, [r3, #116]	; 0x74
 8005d26:	e002      	b.n	8005d2e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4a46      	ldr	r2, [pc, #280]	; (8005e44 <UART_Start_Receive_IT+0x238>)
 8005d2c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d01a      	beq.n	8005d6c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d5a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d60:	e841 2300 	strex	r3, r2, [r1]
 8005d64:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1e4      	bne.n	8005d36 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3308      	adds	r3, #8
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d76:	e853 3f00 	ldrex	r3, [r3]
 8005d7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005d8c:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d94:	e841 2300 	strex	r3, r2, [r1]
 8005d98:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e5      	bne.n	8005d6c <UART_Start_Receive_IT+0x160>
 8005da0:	e046      	b.n	8005e30 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005daa:	d107      	bne.n	8005dbc <UART_Start_Receive_IT+0x1b0>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d103      	bne.n	8005dbc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4a24      	ldr	r2, [pc, #144]	; (8005e48 <UART_Start_Receive_IT+0x23c>)
 8005db8:	675a      	str	r2, [r3, #116]	; 0x74
 8005dba:	e002      	b.n	8005dc2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4a23      	ldr	r2, [pc, #140]	; (8005e4c <UART_Start_Receive_IT+0x240>)
 8005dc0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d019      	beq.n	8005dfe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	e853 3f00 	ldrex	r3, [r3]
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005dde:	677b      	str	r3, [r7, #116]	; 0x74
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005df0:	e841 2300 	strex	r3, r2, [r1]
 8005df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1e6      	bne.n	8005dca <UART_Start_Receive_IT+0x1be>
 8005dfc:	e018      	b.n	8005e30 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f043 0320 	orr.w	r3, r3, #32
 8005e12:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e1c:	623b      	str	r3, [r7, #32]
 8005e1e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	69f9      	ldr	r1, [r7, #28]
 8005e22:	6a3a      	ldr	r2, [r7, #32]
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e6      	bne.n	8005dfe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	378c      	adds	r7, #140	; 0x8c
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	08006671 	.word	0x08006671
 8005e44:	08006311 	.word	0x08006311
 8005e48:	08006159 	.word	0x08006159
 8005e4c:	08005fa1 	.word	0x08005fa1

08005e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b095      	sub	sp, #84	; 0x54
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e60:	e853 3f00 	ldrex	r3, [r3]
 8005e64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e76:	643b      	str	r3, [r7, #64]	; 0x40
 8005e78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e6      	bne.n	8005e58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3308      	adds	r3, #8
 8005e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	e853 3f00 	ldrex	r3, [r3]
 8005e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ea0:	f023 0301 	bic.w	r3, r3, #1
 8005ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3308      	adds	r3, #8
 8005eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e3      	bne.n	8005e8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d118      	bne.n	8005efc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f023 0310 	bic.w	r3, r3, #16
 8005ede:	647b      	str	r3, [r7, #68]	; 0x44
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6979      	ldr	r1, [r7, #20]
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e6      	bne.n	8005eca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005f10:	bf00      	nop
 8005f12:	3754      	adds	r7, #84	; 0x54
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f7fb f8d0 	bl	80010e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f40:	bf00      	nop
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	61bb      	str	r3, [r7, #24]
 8005f70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6979      	ldr	r1, [r7, #20]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e6      	bne.n	8005f50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff f96f 	bl	8005274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f96:	bf00      	nop
 8005f98:	3720      	adds	r7, #32
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b09c      	sub	sp, #112	; 0x70
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005fae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb8:	2b22      	cmp	r3, #34	; 0x22
 8005fba:	f040 80be 	bne.w	800613a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005fc8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005fcc:	b2d9      	uxtb	r1, r3
 8005fce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd8:	400a      	ands	r2, r1
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	f040 80a1 	bne.w	800614a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006018:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800601c:	66bb      	str	r3, [r7, #104]	; 0x68
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006026:	65bb      	str	r3, [r7, #88]	; 0x58
 8006028:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800602c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e6      	bne.n	8006008 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3308      	adds	r3, #8
 8006040:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800604a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604c:	f023 0301 	bic.w	r3, r3, #1
 8006050:	667b      	str	r3, [r7, #100]	; 0x64
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3308      	adds	r3, #8
 8006058:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800605a:	647a      	str	r2, [r7, #68]	; 0x44
 800605c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e5      	bne.n	800603a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2220      	movs	r2, #32
 8006072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a33      	ldr	r2, [pc, #204]	; (8006154 <UART_RxISR_8BIT+0x1b4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d01f      	beq.n	80060cc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d018      	beq.n	80060cc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	623b      	str	r3, [r7, #32]
   return(result);
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060ae:	663b      	str	r3, [r7, #96]	; 0x60
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	461a      	mov	r2, r3
 80060b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060b8:	633b      	str	r3, [r7, #48]	; 0x30
 80060ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e6      	bne.n	800609a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d12e      	bne.n	8006132 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0310 	bic.w	r3, r3, #16
 80060ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060f8:	61fb      	str	r3, [r7, #28]
 80060fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	69b9      	ldr	r1, [r7, #24]
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	617b      	str	r3, [r7, #20]
   return(result);
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e6      	bne.n	80060da <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f003 0310 	and.w	r3, r3, #16
 8006116:	2b10      	cmp	r3, #16
 8006118:	d103      	bne.n	8006122 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2210      	movs	r2, #16
 8006120:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff f8ac 	bl	8005288 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006130:	e00b      	b.n	800614a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fa ffde 	bl	80010f4 <HAL_UART_RxCpltCallback>
}
 8006138:	e007      	b.n	800614a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699a      	ldr	r2, [r3, #24]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0208 	orr.w	r2, r2, #8
 8006148:	619a      	str	r2, [r3, #24]
}
 800614a:	bf00      	nop
 800614c:	3770      	adds	r7, #112	; 0x70
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	40008000 	.word	0x40008000

08006158 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b09c      	sub	sp, #112	; 0x70
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006166:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006170:	2b22      	cmp	r3, #34	; 0x22
 8006172:	f040 80be 	bne.w	80062f2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006184:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006186:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800618a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800618e:	4013      	ands	r3, r2
 8006190:	b29a      	uxth	r2, r3
 8006192:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006194:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619a:	1c9a      	adds	r2, r3, #2
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f040 80a1 	bne.w	8006302 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80061ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061d4:	667b      	str	r3, [r7, #100]	; 0x64
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061de:	657b      	str	r3, [r7, #84]	; 0x54
 80061e0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e6      	bne.n	80061c0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3308      	adds	r3, #8
 80061f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	f023 0301 	bic.w	r3, r3, #1
 8006208:	663b      	str	r3, [r7, #96]	; 0x60
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006212:	643a      	str	r2, [r7, #64]	; 0x40
 8006214:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006218:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e5      	bne.n	80061f2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a33      	ldr	r2, [pc, #204]	; (800630c <UART_RxISR_16BIT+0x1b4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d01f      	beq.n	8006284 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d018      	beq.n	8006284 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006266:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006272:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e6      	bne.n	8006252 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d12e      	bne.n	80062ea <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	e853 3f00 	ldrex	r3, [r3]
 800629e:	60bb      	str	r3, [r7, #8]
   return(result);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f023 0310 	bic.w	r3, r3, #16
 80062a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062b0:	61bb      	str	r3, [r7, #24]
 80062b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	6979      	ldr	r1, [r7, #20]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	e841 2300 	strex	r3, r2, [r1]
 80062bc:	613b      	str	r3, [r7, #16]
   return(result);
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e6      	bne.n	8006292 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	f003 0310 	and.w	r3, r3, #16
 80062ce:	2b10      	cmp	r3, #16
 80062d0:	d103      	bne.n	80062da <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2210      	movs	r2, #16
 80062d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fe ffd0 	bl	8005288 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062e8:	e00b      	b.n	8006302 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fa ff02 	bl	80010f4 <HAL_UART_RxCpltCallback>
}
 80062f0:	e007      	b.n	8006302 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0208 	orr.w	r2, r2, #8
 8006300:	619a      	str	r2, [r3, #24]
}
 8006302:	bf00      	nop
 8006304:	3770      	adds	r7, #112	; 0x70
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	40008000 	.word	0x40008000

08006310 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b0ac      	sub	sp, #176	; 0xb0
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800631e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006346:	2b22      	cmp	r3, #34	; 0x22
 8006348:	f040 8182 	bne.w	8006650 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006352:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006356:	e125      	b.n	80065a4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006362:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006366:	b2d9      	uxtb	r1, r3
 8006368:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800636c:	b2da      	uxtb	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006372:	400a      	ands	r2, r1
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800639e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d053      	beq.n	8006452 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d011      	beq.n	80063da <UART_RxISR_8BIT_FIFOEN+0xca>
 80063b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00b      	beq.n	80063da <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2201      	movs	r2, #1
 80063c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d0:	f043 0201 	orr.w	r2, r3, #1
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d011      	beq.n	800640a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80063e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00b      	beq.n	800640a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2202      	movs	r2, #2
 80063f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006400:	f043 0204 	orr.w	r2, r3, #4
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800640a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b00      	cmp	r3, #0
 8006414:	d011      	beq.n	800643a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00b      	beq.n	800643a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2204      	movs	r2, #4
 8006428:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006430:	f043 0202 	orr.w	r2, r3, #2
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006440:	2b00      	cmp	r3, #0
 8006442:	d006      	beq.n	8006452 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fa fe4b 	bl	80010e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	f040 80a2 	bne.w	80065a4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800646e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006482:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006484:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006488:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e4      	bne.n	8006460 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3308      	adds	r3, #8
 800649c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80064a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064be:	66ba      	str	r2, [r7, #104]	; 0x68
 80064c0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80064c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80064cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e1      	bne.n	8006496 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a5f      	ldr	r2, [pc, #380]	; (8006668 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d021      	beq.n	8006534 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d01a      	beq.n	8006534 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006506:	e853 3f00 	ldrex	r3, [r3]
 800650a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800650c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800650e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006520:	657b      	str	r3, [r7, #84]	; 0x54
 8006522:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006526:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800652e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e4      	bne.n	80064fe <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006538:	2b01      	cmp	r3, #1
 800653a:	d130      	bne.n	800659e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	f023 0310 	bic.w	r3, r3, #16
 8006556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006564:	643b      	str	r3, [r7, #64]	; 0x40
 8006566:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006568:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800656a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800656c:	e841 2300 	strex	r3, r2, [r1]
 8006570:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e4      	bne.n	8006542 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	f003 0310 	and.w	r3, r3, #16
 8006582:	2b10      	cmp	r3, #16
 8006584:	d103      	bne.n	800658e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2210      	movs	r2, #16
 800658c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006594:	4619      	mov	r1, r3
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7fe fe76 	bl	8005288 <HAL_UARTEx_RxEventCallback>
 800659c:	e002      	b.n	80065a4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fa fda8 	bl	80010f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80065a4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d006      	beq.n	80065ba <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80065ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065b0:	f003 0320 	and.w	r3, r3, #32
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f47f aecf 	bne.w	8006358 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80065c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d049      	beq.n	8006660 <UART_RxISR_8BIT_FIFOEN+0x350>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80065d2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d242      	bcs.n	8006660 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3308      	adds	r3, #8
 80065e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3308      	adds	r3, #8
 80065fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80065fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006600:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e3      	bne.n	80065da <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a15      	ldr	r2, [pc, #84]	; (800666c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006616:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	60bb      	str	r3, [r7, #8]
   return(result);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f043 0320 	orr.w	r3, r3, #32
 800662c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800663a:	61bb      	str	r3, [r7, #24]
 800663c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	6979      	ldr	r1, [r7, #20]
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	613b      	str	r3, [r7, #16]
   return(result);
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e4      	bne.n	8006618 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800664e:	e007      	b.n	8006660 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699a      	ldr	r2, [r3, #24]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0208 	orr.w	r2, r2, #8
 800665e:	619a      	str	r2, [r3, #24]
}
 8006660:	bf00      	nop
 8006662:	37b0      	adds	r7, #176	; 0xb0
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40008000 	.word	0x40008000
 800666c:	08005fa1 	.word	0x08005fa1

08006670 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b0ae      	sub	sp, #184	; 0xb8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800667e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a6:	2b22      	cmp	r3, #34	; 0x22
 80066a8:	f040 8186 	bne.w	80069b8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80066b2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80066b6:	e129      	b.n	800690c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80066ca:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80066ce:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80066d2:	4013      	ands	r3, r2
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e0:	1c9a      	adds	r2, r3, #2
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006702:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	2b00      	cmp	r3, #0
 800670c:	d053      	beq.n	80067b6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800670e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d011      	beq.n	800673e <UART_RxISR_16BIT_FIFOEN+0xce>
 800671a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00b      	beq.n	800673e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2201      	movs	r2, #1
 800672c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006734:	f043 0201 	orr.w	r2, r3, #1
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800673e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d011      	beq.n	800676e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800674a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00b      	beq.n	800676e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2202      	movs	r2, #2
 800675c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006764:	f043 0204 	orr.w	r2, r3, #4
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800676e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	2b00      	cmp	r3, #0
 8006778:	d011      	beq.n	800679e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800677a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00b      	beq.n	800679e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2204      	movs	r2, #4
 800678c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006794:	f043 0202 	orr.w	r2, r3, #2
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d006      	beq.n	80067b6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7fa fc99 	bl	80010e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f040 80a4 	bne.w	800690c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	461a      	mov	r2, r3
 80067e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067ea:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1e2      	bne.n	80067c4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3308      	adds	r3, #8
 8006804:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006808:	e853 3f00 	ldrex	r3, [r3]
 800680c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800680e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3308      	adds	r3, #8
 8006822:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006826:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006828:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800682c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e1      	bne.n	80067fe <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a5f      	ldr	r2, [pc, #380]	; (80069d0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d021      	beq.n	800689c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d01a      	beq.n	800689c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006876:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800687a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006888:	65bb      	str	r3, [r7, #88]	; 0x58
 800688a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800688e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e4      	bne.n	8006866 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d130      	bne.n	8006906 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ba:	f023 0310 	bic.w	r3, r3, #16
 80068be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068cc:	647b      	str	r3, [r7, #68]	; 0x44
 80068ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e4      	bne.n	80068aa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f003 0310 	and.w	r3, r3, #16
 80068ea:	2b10      	cmp	r3, #16
 80068ec:	d103      	bne.n	80068f6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2210      	movs	r2, #16
 80068f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fe fcc2 	bl	8005288 <HAL_UARTEx_RxEventCallback>
 8006904:	e002      	b.n	800690c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fa fbf4 	bl	80010f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800690c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006910:	2b00      	cmp	r3, #0
 8006912:	d006      	beq.n	8006922 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006914:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006918:	f003 0320 	and.w	r3, r3, #32
 800691c:	2b00      	cmp	r3, #0
 800691e:	f47f aecb 	bne.w	80066b8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006928:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800692c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006930:	2b00      	cmp	r3, #0
 8006932:	d049      	beq.n	80069c8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800693a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800693e:	429a      	cmp	r2, r3
 8006940:	d242      	bcs.n	80069c8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3308      	adds	r3, #8
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	623b      	str	r3, [r7, #32]
   return(result);
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3308      	adds	r3, #8
 8006962:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006966:	633a      	str	r2, [r7, #48]	; 0x30
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800696c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e3      	bne.n	8006942 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a15      	ldr	r2, [pc, #84]	; (80069d4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800697e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	60fb      	str	r3, [r7, #12]
   return(result);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f043 0320 	orr.w	r3, r3, #32
 8006994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069a2:	61fb      	str	r3, [r7, #28]
 80069a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	69b9      	ldr	r1, [r7, #24]
 80069a8:	69fa      	ldr	r2, [r7, #28]
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	617b      	str	r3, [r7, #20]
   return(result);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e4      	bne.n	8006980 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069b6:	e007      	b.n	80069c8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699a      	ldr	r2, [r3, #24]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0208 	orr.w	r2, r2, #8
 80069c6:	619a      	str	r2, [r3, #24]
}
 80069c8:	bf00      	nop
 80069ca:	37b8      	adds	r7, #184	; 0xb8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	40008000 	.word	0x40008000
 80069d4:	08006159 	.word	0x08006159

080069d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d101      	bne.n	8006a2a <HAL_UARTEx_DisableFifoMode+0x16>
 8006a26:	2302      	movs	r3, #2
 8006a28:	e027      	b.n	8006a7a <HAL_UARTEx_DisableFifoMode+0x66>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2224      	movs	r2, #36	; 0x24
 8006a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 0201 	bic.w	r2, r2, #1
 8006a50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e02d      	b.n	8006afa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2224      	movs	r2, #36	; 0x24
 8006aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0201 	bic.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f850 	bl	8006b80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d101      	bne.n	8006b1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b16:	2302      	movs	r3, #2
 8006b18:	e02d      	b.n	8006b76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2224      	movs	r2, #36	; 0x24
 8006b26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0201 	bic.w	r2, r2, #1
 8006b40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f812 	bl	8006b80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d108      	bne.n	8006ba2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ba0:	e031      	b.n	8006c06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ba2:	2308      	movs	r3, #8
 8006ba4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ba6:	2308      	movs	r3, #8
 8006ba8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	0e5b      	lsrs	r3, r3, #25
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	0f5b      	lsrs	r3, r3, #29
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bca:	7bbb      	ldrb	r3, [r7, #14]
 8006bcc:	7b3a      	ldrb	r2, [r7, #12]
 8006bce:	4911      	ldr	r1, [pc, #68]	; (8006c14 <UARTEx_SetNbDataToProcess+0x94>)
 8006bd0:	5c8a      	ldrb	r2, [r1, r2]
 8006bd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bd6:	7b3a      	ldrb	r2, [r7, #12]
 8006bd8:	490f      	ldr	r1, [pc, #60]	; (8006c18 <UARTEx_SetNbDataToProcess+0x98>)
 8006bda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	7b7a      	ldrb	r2, [r7, #13]
 8006bec:	4909      	ldr	r1, [pc, #36]	; (8006c14 <UARTEx_SetNbDataToProcess+0x94>)
 8006bee:	5c8a      	ldrb	r2, [r1, r2]
 8006bf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bf4:	7b7a      	ldrb	r2, [r7, #13]
 8006bf6:	4908      	ldr	r1, [pc, #32]	; (8006c18 <UARTEx_SetNbDataToProcess+0x98>)
 8006bf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006c06:	bf00      	nop
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	0800c084 	.word	0x0800c084
 8006c18:	0800c08c 	.word	0x0800c08c

08006c1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c2c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006c30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b085      	sub	sp, #20
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c52:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006c56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	43db      	mvns	r3, r3
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	4013      	ands	r3, r2
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	1d3b      	adds	r3, r7, #4
 8006c8a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b09d      	sub	sp, #116	; 0x74
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	78db      	ldrb	r3, [r3, #3]
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d81f      	bhi.n	8006d2e <USB_ActivateEndpoint+0x72>
 8006cee:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <USB_ActivateEndpoint+0x38>)
 8006cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf4:	08006d05 	.word	0x08006d05
 8006cf8:	08006d21 	.word	0x08006d21
 8006cfc:	08006d37 	.word	0x08006d37
 8006d00:	08006d13 	.word	0x08006d13
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006d04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006d10:	e012      	b.n	8006d38 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006d12:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d16:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006d1a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006d1e:	e00b      	b.n	8006d38 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006d20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d28:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006d2c:	e004      	b.n	8006d38 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006d34:	e000      	b.n	8006d38 <USB_ActivateEndpoint+0x7c>
      break;
 8006d36:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	441a      	add	r2, r3
 8006d42:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	b21b      	sxth	r3, r3
 8006d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d72:	b21a      	sxth	r2, r3
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	b21b      	sxth	r3, r3
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	b21b      	sxth	r3, r3
 8006d7e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	441a      	add	r2, r3
 8006d8c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	7b1b      	ldrb	r3, [r3, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f040 8178 	bne.w	800709e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	785b      	ldrb	r3, [r3, #1]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 8084 	beq.w	8006ec0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	4413      	add	r3, r2
 8006dca:	61bb      	str	r3, [r7, #24]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	00da      	lsls	r2, r3, #3
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	88db      	ldrh	r3, [r3, #6]
 8006de0:	085b      	lsrs	r3, r3, #1
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	827b      	strh	r3, [r7, #18]
 8006dfa:	8a7b      	ldrh	r3, [r7, #18]
 8006dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01b      	beq.n	8006e3c <USB_ActivateEndpoint+0x180>
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1a:	823b      	strh	r3, [r7, #16]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	441a      	add	r2, r3
 8006e26:	8a3b      	ldrh	r3, [r7, #16]
 8006e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	78db      	ldrb	r3, [r3, #3]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d020      	beq.n	8006e86 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e5a:	81bb      	strh	r3, [r7, #12]
 8006e5c:	89bb      	ldrh	r3, [r7, #12]
 8006e5e:	f083 0320 	eor.w	r3, r3, #32
 8006e62:	81bb      	strh	r3, [r7, #12]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	441a      	add	r2, r3
 8006e6e:	89bb      	ldrh	r3, [r7, #12]
 8006e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	8013      	strh	r3, [r2, #0]
 8006e84:	e2d5      	b.n	8007432 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9c:	81fb      	strh	r3, [r7, #14]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	441a      	add	r2, r3
 8006ea8:	89fb      	ldrh	r3, [r7, #14]
 8006eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	8013      	strh	r3, [r2, #0]
 8006ebe:	e2b8      	b.n	8007432 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	461a      	mov	r2, r3
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	4413      	add	r3, r2
 8006ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	00da      	lsls	r2, r3, #3
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	4413      	add	r3, r2
 8006ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	88db      	ldrh	r3, [r3, #6]
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f04:	4413      	add	r3, r2
 8006f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	00da      	lsls	r2, r3, #3
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	4413      	add	r3, r2
 8006f12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	801a      	strh	r2, [r3, #0]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f2e:	d91d      	bls.n	8006f6c <USB_ActivateEndpoint+0x2b0>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	095b      	lsrs	r3, r3, #5
 8006f36:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	f003 031f 	and.w	r3, r3, #31
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d102      	bne.n	8006f4a <USB_ActivateEndpoint+0x28e>
 8006f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f46:	3b01      	subs	r3, #1
 8006f48:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	029b      	lsls	r3, r3, #10
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	801a      	strh	r2, [r3, #0]
 8006f6a:	e026      	b.n	8006fba <USB_ActivateEndpoint+0x2fe>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10a      	bne.n	8006f8a <USB_ActivateEndpoint+0x2ce>
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	801a      	strh	r2, [r3, #0]
 8006f88:	e017      	b.n	8006fba <USB_ActivateEndpoint+0x2fe>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	085b      	lsrs	r3, r3, #1
 8006f90:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <USB_ActivateEndpoint+0x2e8>
 8006f9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	029b      	lsls	r3, r3, #10
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8006fc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d01b      	beq.n	800700a <USB_ActivateEndpoint+0x34e>
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe8:	843b      	strh	r3, [r7, #32]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	441a      	add	r2, r3
 8006ff4:	8c3b      	ldrh	r3, [r7, #32]
 8006ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007006:	b29b      	uxth	r3, r3
 8007008:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d124      	bne.n	800705c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007028:	83bb      	strh	r3, [r7, #28]
 800702a:	8bbb      	ldrh	r3, [r7, #28]
 800702c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007030:	83bb      	strh	r3, [r7, #28]
 8007032:	8bbb      	ldrh	r3, [r7, #28]
 8007034:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007038:	83bb      	strh	r3, [r7, #28]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	441a      	add	r2, r3
 8007044:	8bbb      	ldrh	r3, [r7, #28]
 8007046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800704a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800704e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007056:	b29b      	uxth	r3, r3
 8007058:	8013      	strh	r3, [r2, #0]
 800705a:	e1ea      	b.n	8007432 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	b29b      	uxth	r3, r3
 800706a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800706e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007072:	83fb      	strh	r3, [r7, #30]
 8007074:	8bfb      	ldrh	r3, [r7, #30]
 8007076:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800707a:	83fb      	strh	r3, [r7, #30]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	441a      	add	r2, r3
 8007086:	8bfb      	ldrh	r3, [r7, #30]
 8007088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800708c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007098:	b29b      	uxth	r3, r3
 800709a:	8013      	strh	r3, [r2, #0]
 800709c:	e1c9      	b.n	8007432 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	78db      	ldrb	r3, [r3, #3]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d11e      	bne.n	80070e4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070bc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	441a      	add	r2, r3
 80070ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80070ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070d6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80070da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070de:	b29b      	uxth	r3, r3
 80070e0:	8013      	strh	r3, [r2, #0]
 80070e2:	e01d      	b.n	8007120 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80070f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	441a      	add	r2, r3
 8007108:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800710c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800711c:	b29b      	uxth	r3, r3
 800711e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800712a:	b29b      	uxth	r3, r3
 800712c:	461a      	mov	r2, r3
 800712e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007130:	4413      	add	r3, r2
 8007132:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	00da      	lsls	r2, r3, #3
 800713a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800713c:	4413      	add	r3, r2
 800713e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007142:	65bb      	str	r3, [r7, #88]	; 0x58
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	891b      	ldrh	r3, [r3, #8]
 8007148:	085b      	lsrs	r3, r3, #1
 800714a:	b29b      	uxth	r3, r3
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	b29a      	uxth	r2, r3
 8007150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007152:	801a      	strh	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	657b      	str	r3, [r7, #84]	; 0x54
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800715e:	b29b      	uxth	r3, r3
 8007160:	461a      	mov	r2, r3
 8007162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007164:	4413      	add	r3, r2
 8007166:	657b      	str	r3, [r7, #84]	; 0x54
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	00da      	lsls	r2, r3, #3
 800716e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007170:	4413      	add	r3, r2
 8007172:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007176:	653b      	str	r3, [r7, #80]	; 0x50
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	895b      	ldrh	r3, [r3, #10]
 800717c:	085b      	lsrs	r3, r3, #1
 800717e:	b29b      	uxth	r3, r3
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007186:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	785b      	ldrb	r3, [r3, #1]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f040 8093 	bne.w	80072b8 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80071a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80071a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d01b      	beq.n	80071e6 <USB_ActivateEndpoint+0x52a>
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	441a      	add	r2, r3
 80071d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80071d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80071f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80071f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d01b      	beq.n	8007236 <USB_ActivateEndpoint+0x57a>
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	b29b      	uxth	r3, r3
 800720c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007214:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	441a      	add	r2, r3
 8007220:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800722a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800722e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007232:	b29b      	uxth	r3, r3
 8007234:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724c:	873b      	strh	r3, [r7, #56]	; 0x38
 800724e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007250:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007254:	873b      	strh	r3, [r7, #56]	; 0x38
 8007256:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007258:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800725c:	873b      	strh	r3, [r7, #56]	; 0x38
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	441a      	add	r2, r3
 8007268:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800726a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727a:	b29b      	uxth	r3, r3
 800727c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007294:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	441a      	add	r2, r3
 80072a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80072a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	8013      	strh	r3, [r2, #0]
 80072b6:	e0bc      	b.n	8007432 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80072c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d01d      	beq.n	8007310 <USB_ActivateEndpoint+0x654>
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	441a      	add	r2, r3
 80072f8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730c:	b29b      	uxth	r3, r3
 800730e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007320:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01d      	beq.n	8007368 <USB_ActivateEndpoint+0x6ac>
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800733e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007342:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	441a      	add	r2, r3
 8007350:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800735c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007360:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007364:	b29b      	uxth	r3, r3
 8007366:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	78db      	ldrb	r3, [r3, #3]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d024      	beq.n	80073ba <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	b29b      	uxth	r3, r3
 800737e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007386:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800738a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800738e:	f083 0320 	eor.w	r3, r3, #32
 8007392:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	441a      	add	r2, r3
 80073a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80073a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	8013      	strh	r3, [r2, #0]
 80073b8:	e01d      	b.n	80073f6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	441a      	add	r2, r3
 80073de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80073e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	b29b      	uxth	r3, r3
 8007404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	441a      	add	r2, r3
 800741a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800741e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800742a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742e:	b29b      	uxth	r3, r3
 8007430:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007432:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007436:	4618      	mov	r0, r3
 8007438:	3774      	adds	r7, #116	; 0x74
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop

08007444 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007444:	b480      	push	{r7}
 8007446:	b08d      	sub	sp, #52	; 0x34
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	7b1b      	ldrb	r3, [r3, #12]
 8007452:	2b00      	cmp	r3, #0
 8007454:	f040 808e 	bne.w	8007574 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	785b      	ldrb	r3, [r3, #1]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d044      	beq.n	80074ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	81bb      	strh	r3, [r7, #12]
 800746e:	89bb      	ldrh	r3, [r7, #12]
 8007470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	d01b      	beq.n	80074b0 <USB_DeactivateEndpoint+0x6c>
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b29b      	uxth	r3, r3
 8007486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800748a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748e:	817b      	strh	r3, [r7, #10]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	441a      	add	r2, r3
 800749a:	897b      	ldrh	r3, [r7, #10]
 800749c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	b29b      	uxth	r3, r3
 80074be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c6:	813b      	strh	r3, [r7, #8]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	441a      	add	r2, r3
 80074d2:	893b      	ldrh	r3, [r7, #8]
 80074d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	8013      	strh	r3, [r2, #0]
 80074e8:	e192      	b.n	8007810 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	827b      	strh	r3, [r7, #18]
 80074f8:	8a7b      	ldrh	r3, [r7, #18]
 80074fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d01b      	beq.n	800753a <USB_DeactivateEndpoint+0xf6>
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007518:	823b      	strh	r3, [r7, #16]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	441a      	add	r2, r3
 8007524:	8a3b      	ldrh	r3, [r7, #16]
 8007526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800752a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007536:	b29b      	uxth	r3, r3
 8007538:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4413      	add	r3, r2
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	b29b      	uxth	r3, r3
 8007548:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800754c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007550:	81fb      	strh	r3, [r7, #14]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	441a      	add	r2, r3
 800755c:	89fb      	ldrh	r3, [r7, #14]
 800755e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800756a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800756e:	b29b      	uxth	r3, r3
 8007570:	8013      	strh	r3, [r2, #0]
 8007572:	e14d      	b.n	8007810 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	2b00      	cmp	r3, #0
 800757a:	f040 80a5 	bne.w	80076c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	843b      	strh	r3, [r7, #32]
 800758c:	8c3b      	ldrh	r3, [r7, #32]
 800758e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01b      	beq.n	80075ce <USB_DeactivateEndpoint+0x18a>
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ac:	83fb      	strh	r3, [r7, #30]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	441a      	add	r2, r3
 80075b8:	8bfb      	ldrh	r3, [r7, #30]
 80075ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	83bb      	strh	r3, [r7, #28]
 80075dc:	8bbb      	ldrh	r3, [r7, #28]
 80075de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d01b      	beq.n	800761e <USB_DeactivateEndpoint+0x1da>
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fc:	837b      	strh	r3, [r7, #26]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	441a      	add	r2, r3
 8007608:	8b7b      	ldrh	r3, [r7, #26]
 800760a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800760e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007616:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800761a:	b29b      	uxth	r3, r3
 800761c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	b29b      	uxth	r3, r3
 800762c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007634:	833b      	strh	r3, [r7, #24]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	441a      	add	r2, r3
 8007640:	8b3b      	ldrh	r3, [r7, #24]
 8007642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800764a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800764e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007652:	b29b      	uxth	r3, r3
 8007654:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766c:	82fb      	strh	r3, [r7, #22]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	441a      	add	r2, r3
 8007678:	8afb      	ldrh	r3, [r7, #22]
 800767a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800767e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768a:	b29b      	uxth	r3, r3
 800768c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	b29b      	uxth	r3, r3
 800769c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a4:	82bb      	strh	r3, [r7, #20]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	441a      	add	r2, r3
 80076b0:	8abb      	ldrh	r3, [r7, #20]
 80076b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	8013      	strh	r3, [r2, #0]
 80076c6:	e0a3      	b.n	8007810 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80076d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80076d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d01b      	beq.n	8007718 <USB_DeactivateEndpoint+0x2d4>
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	441a      	add	r2, r3
 8007702:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800770c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007714:	b29b      	uxth	r3, r3
 8007716:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007726:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	d01b      	beq.n	8007768 <USB_DeactivateEndpoint+0x324>
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	b29b      	uxth	r3, r3
 800773e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007746:	853b      	strh	r3, [r7, #40]	; 0x28
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	441a      	add	r2, r3
 8007752:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800775c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007760:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007764:	b29b      	uxth	r3, r3
 8007766:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	b29b      	uxth	r3, r3
 8007776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800777e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	441a      	add	r2, r3
 800778a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800778c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800779c:	b29b      	uxth	r3, r3
 800779e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	441a      	add	r2, r3
 80077c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	441a      	add	r2, r3
 80077fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800780c:	b29b      	uxth	r3, r3
 800780e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3734      	adds	r7, #52	; 0x34
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b0c2      	sub	sp, #264	; 0x108
 8007822:	af00      	add	r7, sp, #0
 8007824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007828:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800782c:	6018      	str	r0, [r3, #0]
 800782e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007836:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800783c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	785b      	ldrb	r3, [r3, #1]
 8007844:	2b01      	cmp	r3, #1
 8007846:	f040 86b7 	bne.w	80085b8 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800784a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	429a      	cmp	r2, r3
 8007864:	d908      	bls.n	8007878 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007876:	e007      	b.n	8007888 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800787c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	7b1b      	ldrb	r3, [r3, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d13a      	bne.n	800790e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6959      	ldr	r1, [r3, #20]
 80078a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	88da      	ldrh	r2, [r3, #6]
 80078b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80078ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80078be:	6800      	ldr	r0, [r0, #0]
 80078c0:	f001 fc98 	bl	80091f4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	613b      	str	r3, [r7, #16]
 80078d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078de:	b29b      	uxth	r3, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	4413      	add	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	00da      	lsls	r2, r3, #3
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	4413      	add	r3, r2
 80078fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	801a      	strh	r2, [r3, #0]
 800790a:	f000 be1f 	b.w	800854c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800790e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	78db      	ldrb	r3, [r3, #3]
 800791a:	2b02      	cmp	r3, #2
 800791c:	f040 8462 	bne.w	80081e4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6a1a      	ldr	r2, [r3, #32]
 800792c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	429a      	cmp	r2, r3
 800793a:	f240 83df 	bls.w	80080fc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800793e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007942:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800794c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	b29b      	uxth	r3, r3
 800795c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007964:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800796c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	441a      	add	r2, r3
 8007982:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800798a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800798e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007996:	b29b      	uxth	r3, r3
 8007998:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800799a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800799e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6a1a      	ldr	r2, [r3, #32]
 80079a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079aa:	1ad2      	subs	r2, r2, r3
 80079ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	881b      	ldrh	r3, [r3, #0]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 81c7 	beq.w	8007d6e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	633b      	str	r3, [r7, #48]	; 0x30
 80079ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d177      	bne.n	8007aec <USB_EPStartXfer+0x2ce>
 80079fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	461a      	mov	r2, r3
 8007a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1c:	4413      	add	r3, r2
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	00da      	lsls	r2, r3, #3
 8007a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a30:	4413      	add	r3, r2
 8007a32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a36:	627b      	str	r3, [r7, #36]	; 0x24
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	801a      	strh	r2, [r3, #0]
 8007a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a4c:	2b3e      	cmp	r3, #62	; 0x3e
 8007a4e:	d921      	bls.n	8007a94 <USB_EPStartXfer+0x276>
 8007a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a54:	095b      	lsrs	r3, r3, #5
 8007a56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5e:	f003 031f 	and.w	r3, r3, #31
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d104      	bne.n	8007a70 <USB_EPStartXfer+0x252>
 8007a66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	029b      	lsls	r3, r3, #10
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	4313      	orrs	r3, r2
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	801a      	strh	r2, [r3, #0]
 8007a92:	e050      	b.n	8007b36 <USB_EPStartXfer+0x318>
 8007a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10a      	bne.n	8007ab2 <USB_EPStartXfer+0x294>
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	801a      	strh	r2, [r3, #0]
 8007ab0:	e041      	b.n	8007b36 <USB_EPStartXfer+0x318>
 8007ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ab6:	085b      	lsrs	r3, r3, #1
 8007ab8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d004      	beq.n	8007ad2 <USB_EPStartXfer+0x2b4>
 8007ac8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007acc:	3301      	adds	r3, #1
 8007ace:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	029b      	lsls	r3, r3, #10
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	801a      	strh	r2, [r3, #0]
 8007aea:	e024      	b.n	8007b36 <USB_EPStartXfer+0x318>
 8007aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	785b      	ldrb	r3, [r3, #1]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d11c      	bne.n	8007b36 <USB_EPStartXfer+0x318>
 8007afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	4413      	add	r3, r2
 8007b12:	633b      	str	r3, [r7, #48]	; 0x30
 8007b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	00da      	lsls	r2, r3, #3
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	4413      	add	r3, r2
 8007b26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	895b      	ldrh	r3, [r3, #10]
 8007b42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6959      	ldr	r1, [r3, #20]
 8007b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007b60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b64:	6800      	ldr	r0, [r0, #0]
 8007b66:	f001 fb45 	bl	80091f4 <USB_WritePMA>
            ep->xfer_buff += len;
 8007b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	695a      	ldr	r2, [r3, #20]
 8007b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7a:	441a      	add	r2, r3
 8007b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6a1a      	ldr	r2, [r3, #32]
 8007b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d90f      	bls.n	8007bc4 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6a1a      	ldr	r2, [r3, #32]
 8007bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bb4:	1ad2      	subs	r2, r2, r3
 8007bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	621a      	str	r2, [r3, #32]
 8007bc2:	e00e      	b.n	8007be2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2200      	movs	r2, #0
 8007be0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	785b      	ldrb	r3, [r3, #1]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d177      	bne.n	8007ce2 <USB_EPStartXfer+0x4c4>
 8007bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	461a      	mov	r2, r3
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	4413      	add	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
 8007c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	00da      	lsls	r2, r3, #3
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	4413      	add	r3, r2
 8007c28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	801a      	strh	r2, [r3, #0]
 8007c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c42:	2b3e      	cmp	r3, #62	; 0x3e
 8007c44:	d921      	bls.n	8007c8a <USB_EPStartXfer+0x46c>
 8007c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c4a:	095b      	lsrs	r3, r3, #5
 8007c4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c54:	f003 031f 	and.w	r3, r3, #31
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d104      	bne.n	8007c66 <USB_EPStartXfer+0x448>
 8007c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c60:	3b01      	subs	r3, #1
 8007c62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	029b      	lsls	r3, r3, #10
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	4313      	orrs	r3, r2
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	801a      	strh	r2, [r3, #0]
 8007c88:	e056      	b.n	8007d38 <USB_EPStartXfer+0x51a>
 8007c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10a      	bne.n	8007ca8 <USB_EPStartXfer+0x48a>
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	801a      	strh	r2, [r3, #0]
 8007ca6:	e047      	b.n	8007d38 <USB_EPStartXfer+0x51a>
 8007ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cac:	085b      	lsrs	r3, r3, #1
 8007cae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d004      	beq.n	8007cc8 <USB_EPStartXfer+0x4aa>
 8007cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	029b      	lsls	r3, r3, #10
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	801a      	strh	r2, [r3, #0]
 8007ce0:	e02a      	b.n	8007d38 <USB_EPStartXfer+0x51a>
 8007ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	785b      	ldrb	r3, [r3, #1]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d122      	bne.n	8007d38 <USB_EPStartXfer+0x51a>
 8007cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	623b      	str	r3, [r7, #32]
 8007cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	461a      	mov	r2, r3
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	4413      	add	r3, r2
 8007d14:	623b      	str	r3, [r7, #32]
 8007d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	00da      	lsls	r2, r3, #3
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	4413      	add	r3, r2
 8007d28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d2c:	61fb      	str	r3, [r7, #28]
 8007d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	891b      	ldrh	r3, [r3, #8]
 8007d44:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6959      	ldr	r1, [r3, #20]
 8007d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007d5e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007d62:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007d66:	6800      	ldr	r0, [r0, #0]
 8007d68:	f001 fa44 	bl	80091f4 <USB_WritePMA>
 8007d6c:	e3ee      	b.n	800854c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	785b      	ldrb	r3, [r3, #1]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d177      	bne.n	8007e6e <USB_EPStartXfer+0x650>
 8007d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d9e:	4413      	add	r3, r2
 8007da0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	00da      	lsls	r2, r3, #3
 8007db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007db2:	4413      	add	r3, r2
 8007db4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007db8:	647b      	str	r3, [r7, #68]	; 0x44
 8007dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dc8:	801a      	strh	r2, [r3, #0]
 8007dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dce:	2b3e      	cmp	r3, #62	; 0x3e
 8007dd0:	d921      	bls.n	8007e16 <USB_EPStartXfer+0x5f8>
 8007dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd6:	095b      	lsrs	r3, r3, #5
 8007dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007de0:	f003 031f 	and.w	r3, r3, #31
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d104      	bne.n	8007df2 <USB_EPStartXfer+0x5d4>
 8007de8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dec:	3b01      	subs	r3, #1
 8007dee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	029b      	lsls	r3, r3, #10
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	4313      	orrs	r3, r2
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e12:	801a      	strh	r2, [r3, #0]
 8007e14:	e056      	b.n	8007ec4 <USB_EPStartXfer+0x6a6>
 8007e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10a      	bne.n	8007e34 <USB_EPStartXfer+0x616>
 8007e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e30:	801a      	strh	r2, [r3, #0]
 8007e32:	e047      	b.n	8007ec4 <USB_EPStartXfer+0x6a6>
 8007e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e38:	085b      	lsrs	r3, r3, #1
 8007e3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d004      	beq.n	8007e54 <USB_EPStartXfer+0x636>
 8007e4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e4e:	3301      	adds	r3, #1
 8007e50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	029b      	lsls	r3, r3, #10
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	4313      	orrs	r3, r2
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e6a:	801a      	strh	r2, [r3, #0]
 8007e6c:	e02a      	b.n	8007ec4 <USB_EPStartXfer+0x6a6>
 8007e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	785b      	ldrb	r3, [r3, #1]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d122      	bne.n	8007ec4 <USB_EPStartXfer+0x6a6>
 8007e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	653b      	str	r3, [r7, #80]	; 0x50
 8007e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e9e:	4413      	add	r3, r2
 8007ea0:	653b      	str	r3, [r7, #80]	; 0x50
 8007ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	00da      	lsls	r2, r3, #3
 8007eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ec2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	891b      	ldrh	r3, [r3, #8]
 8007ed0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6959      	ldr	r1, [r3, #20]
 8007ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007eea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007eee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007ef2:	6800      	ldr	r0, [r0, #0]
 8007ef4:	f001 f97e 	bl	80091f4 <USB_WritePMA>
            ep->xfer_buff += len;
 8007ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	695a      	ldr	r2, [r3, #20]
 8007f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f08:	441a      	add	r2, r3
 8007f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6a1a      	ldr	r2, [r3, #32]
 8007f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d90f      	bls.n	8007f52 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6a1a      	ldr	r2, [r3, #32]
 8007f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f42:	1ad2      	subs	r2, r2, r3
 8007f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	621a      	str	r2, [r3, #32]
 8007f50:	e00e      	b.n	8007f70 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8007f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	785b      	ldrb	r3, [r3, #1]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d177      	bne.n	800807c <USB_EPStartXfer+0x85e>
 8007f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	461a      	mov	r2, r3
 8007faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fac:	4413      	add	r3, r2
 8007fae:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	00da      	lsls	r2, r3, #3
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd6:	801a      	strh	r2, [r3, #0]
 8007fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fdc:	2b3e      	cmp	r3, #62	; 0x3e
 8007fde:	d921      	bls.n	8008024 <USB_EPStartXfer+0x806>
 8007fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe4:	095b      	lsrs	r3, r3, #5
 8007fe6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fee:	f003 031f 	and.w	r3, r3, #31
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d104      	bne.n	8008000 <USB_EPStartXfer+0x7e2>
 8007ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	b29a      	uxth	r2, r3
 8008006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800800a:	b29b      	uxth	r3, r3
 800800c:	029b      	lsls	r3, r3, #10
 800800e:	b29b      	uxth	r3, r3
 8008010:	4313      	orrs	r3, r2
 8008012:	b29b      	uxth	r3, r3
 8008014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800801c:	b29a      	uxth	r2, r3
 800801e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008020:	801a      	strh	r2, [r3, #0]
 8008022:	e050      	b.n	80080c6 <USB_EPStartXfer+0x8a8>
 8008024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <USB_EPStartXfer+0x824>
 800802c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29b      	uxth	r3, r3
 8008032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800803a:	b29a      	uxth	r2, r3
 800803c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803e:	801a      	strh	r2, [r3, #0]
 8008040:	e041      	b.n	80080c6 <USB_EPStartXfer+0x8a8>
 8008042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008046:	085b      	lsrs	r3, r3, #1
 8008048:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800804c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	d004      	beq.n	8008062 <USB_EPStartXfer+0x844>
 8008058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805c:	3301      	adds	r3, #1
 800805e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	b29a      	uxth	r2, r3
 8008068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800806c:	b29b      	uxth	r3, r3
 800806e:	029b      	lsls	r3, r3, #10
 8008070:	b29b      	uxth	r3, r3
 8008072:	4313      	orrs	r3, r2
 8008074:	b29a      	uxth	r2, r3
 8008076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008078:	801a      	strh	r2, [r3, #0]
 800807a:	e024      	b.n	80080c6 <USB_EPStartXfer+0x8a8>
 800807c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	785b      	ldrb	r3, [r3, #1]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d11c      	bne.n	80080c6 <USB_EPStartXfer+0x8a8>
 800808c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008090:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800809a:	b29b      	uxth	r3, r3
 800809c:	461a      	mov	r2, r3
 800809e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080a0:	4413      	add	r3, r2
 80080a2:	643b      	str	r3, [r7, #64]	; 0x40
 80080a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	00da      	lsls	r2, r3, #3
 80080b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080b4:	4413      	add	r3, r2
 80080b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80080c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	895b      	ldrh	r3, [r3, #10]
 80080d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6959      	ldr	r1, [r3, #20]
 80080e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80080ec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80080f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80080f4:	6800      	ldr	r0, [r0, #0]
 80080f6:	f001 f87d 	bl	80091f4 <USB_WritePMA>
 80080fa:	e227      	b.n	800854c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80080fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6a1b      	ldr	r3, [r3, #32]
 8008108:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800810c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008110:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	881b      	ldrh	r3, [r3, #0]
 8008128:	b29b      	uxth	r3, r3
 800812a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800812e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008132:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	441a      	add	r2, r3
 8008150:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800815c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008164:	b29b      	uxth	r3, r3
 8008166:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008182:	b29b      	uxth	r3, r3
 8008184:	461a      	mov	r2, r3
 8008186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008188:	4413      	add	r3, r2
 800818a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800818c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	00da      	lsls	r2, r3, #3
 800819a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800819c:	4413      	add	r3, r2
 800819e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80081a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80081ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	891b      	ldrh	r3, [r3, #8]
 80081ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6959      	ldr	r1, [r3, #20]
 80081ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80081d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80081d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80081dc:	6800      	ldr	r0, [r0, #0]
 80081de:	f001 f809 	bl	80091f4 <USB_WritePMA>
 80081e2:	e1b3      	b.n	800854c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80081e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6a1a      	ldr	r2, [r3, #32]
 80081f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f4:	1ad2      	subs	r2, r2, r3
 80081f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 80c6 	beq.w	80083b6 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800822a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800822e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	673b      	str	r3, [r7, #112]	; 0x70
 8008236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800823a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	785b      	ldrb	r3, [r3, #1]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d177      	bne.n	8008336 <USB_EPStartXfer+0xb18>
 8008246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	66bb      	str	r3, [r7, #104]	; 0x68
 8008252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008260:	b29b      	uxth	r3, r3
 8008262:	461a      	mov	r2, r3
 8008264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008266:	4413      	add	r3, r2
 8008268:	66bb      	str	r3, [r7, #104]	; 0x68
 800826a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800826e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	00da      	lsls	r2, r3, #3
 8008278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800827a:	4413      	add	r3, r2
 800827c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008280:	667b      	str	r3, [r7, #100]	; 0x64
 8008282:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800828c:	b29a      	uxth	r2, r3
 800828e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008290:	801a      	strh	r2, [r3, #0]
 8008292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008296:	2b3e      	cmp	r3, #62	; 0x3e
 8008298:	d921      	bls.n	80082de <USB_EPStartXfer+0xac0>
 800829a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800829e:	095b      	lsrs	r3, r3, #5
 80082a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80082a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082a8:	f003 031f 	and.w	r3, r3, #31
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d104      	bne.n	80082ba <USB_EPStartXfer+0xa9c>
 80082b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80082b4:	3b01      	subs	r3, #1
 80082b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80082ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082bc:	881b      	ldrh	r3, [r3, #0]
 80082be:	b29a      	uxth	r2, r3
 80082c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	029b      	lsls	r3, r3, #10
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	4313      	orrs	r3, r2
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082da:	801a      	strh	r2, [r3, #0]
 80082dc:	e050      	b.n	8008380 <USB_EPStartXfer+0xb62>
 80082de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10a      	bne.n	80082fc <USB_EPStartXfer+0xade>
 80082e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082f8:	801a      	strh	r2, [r3, #0]
 80082fa:	e041      	b.n	8008380 <USB_EPStartXfer+0xb62>
 80082fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008300:	085b      	lsrs	r3, r3, #1
 8008302:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d004      	beq.n	800831c <USB_EPStartXfer+0xafe>
 8008312:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008316:	3301      	adds	r3, #1
 8008318:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800831c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	b29a      	uxth	r2, r3
 8008322:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008326:	b29b      	uxth	r3, r3
 8008328:	029b      	lsls	r3, r3, #10
 800832a:	b29b      	uxth	r3, r3
 800832c:	4313      	orrs	r3, r2
 800832e:	b29a      	uxth	r2, r3
 8008330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008332:	801a      	strh	r2, [r3, #0]
 8008334:	e024      	b.n	8008380 <USB_EPStartXfer+0xb62>
 8008336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800833a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	785b      	ldrb	r3, [r3, #1]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d11c      	bne.n	8008380 <USB_EPStartXfer+0xb62>
 8008346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800834a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008354:	b29b      	uxth	r3, r3
 8008356:	461a      	mov	r2, r3
 8008358:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800835a:	4413      	add	r3, r2
 800835c:	673b      	str	r3, [r7, #112]	; 0x70
 800835e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	00da      	lsls	r2, r3, #3
 800836c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800836e:	4413      	add	r3, r2
 8008370:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008374:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800837a:	b29a      	uxth	r2, r3
 800837c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800837e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	895b      	ldrh	r3, [r3, #10]
 800838c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6959      	ldr	r1, [r3, #20]
 800839c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80083a6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80083aa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80083ae:	6800      	ldr	r0, [r0, #0]
 80083b0:	f000 ff20 	bl	80091f4 <USB_WritePMA>
 80083b4:	e0ca      	b.n	800854c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	785b      	ldrb	r3, [r3, #1]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d177      	bne.n	80084b6 <USB_EPStartXfer+0xc98>
 80083c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	461a      	mov	r2, r3
 80083e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083e6:	4413      	add	r3, r2
 80083e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	00da      	lsls	r2, r3, #3
 80083f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083fa:	4413      	add	r3, r2
 80083fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008400:	67bb      	str	r3, [r7, #120]	; 0x78
 8008402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	b29b      	uxth	r3, r3
 8008408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800840c:	b29a      	uxth	r2, r3
 800840e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008410:	801a      	strh	r2, [r3, #0]
 8008412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008416:	2b3e      	cmp	r3, #62	; 0x3e
 8008418:	d921      	bls.n	800845e <USB_EPStartXfer+0xc40>
 800841a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800841e:	095b      	lsrs	r3, r3, #5
 8008420:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008428:	f003 031f 	and.w	r3, r3, #31
 800842c:	2b00      	cmp	r3, #0
 800842e:	d104      	bne.n	800843a <USB_EPStartXfer+0xc1c>
 8008430:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008434:	3b01      	subs	r3, #1
 8008436:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800843a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	b29a      	uxth	r2, r3
 8008440:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008444:	b29b      	uxth	r3, r3
 8008446:	029b      	lsls	r3, r3, #10
 8008448:	b29b      	uxth	r3, r3
 800844a:	4313      	orrs	r3, r2
 800844c:	b29b      	uxth	r3, r3
 800844e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008456:	b29a      	uxth	r2, r3
 8008458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800845a:	801a      	strh	r2, [r3, #0]
 800845c:	e05c      	b.n	8008518 <USB_EPStartXfer+0xcfa>
 800845e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10a      	bne.n	800847c <USB_EPStartXfer+0xc5e>
 8008466:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29b      	uxth	r3, r3
 800846c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008474:	b29a      	uxth	r2, r3
 8008476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008478:	801a      	strh	r2, [r3, #0]
 800847a:	e04d      	b.n	8008518 <USB_EPStartXfer+0xcfa>
 800847c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008480:	085b      	lsrs	r3, r3, #1
 8008482:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	2b00      	cmp	r3, #0
 8008490:	d004      	beq.n	800849c <USB_EPStartXfer+0xc7e>
 8008492:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008496:	3301      	adds	r3, #1
 8008498:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800849c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	029b      	lsls	r3, r3, #10
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	4313      	orrs	r3, r2
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084b2:	801a      	strh	r2, [r3, #0]
 80084b4:	e030      	b.n	8008518 <USB_EPStartXfer+0xcfa>
 80084b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	785b      	ldrb	r3, [r3, #1]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d128      	bne.n	8008518 <USB_EPStartXfer+0xcfa>
 80084c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	461a      	mov	r2, r3
 80084e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084ea:	4413      	add	r3, r2
 80084ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	00da      	lsls	r2, r3, #3
 80084fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008502:	4413      	add	r3, r2
 8008504:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008508:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800850c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008510:	b29a      	uxth	r2, r3
 8008512:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008516:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	891b      	ldrh	r3, [r3, #8]
 8008524:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800852c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	6959      	ldr	r1, [r3, #20]
 8008534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008538:	b29b      	uxth	r3, r3
 800853a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800853e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008542:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008546:	6800      	ldr	r0, [r0, #0]
 8008548:	f000 fe54 	bl	80091f4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800854c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	b29b      	uxth	r3, r3
 800856a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800856e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008572:	817b      	strh	r3, [r7, #10]
 8008574:	897b      	ldrh	r3, [r7, #10]
 8008576:	f083 0310 	eor.w	r3, r3, #16
 800857a:	817b      	strh	r3, [r7, #10]
 800857c:	897b      	ldrh	r3, [r7, #10]
 800857e:	f083 0320 	eor.w	r3, r3, #32
 8008582:	817b      	strh	r3, [r7, #10]
 8008584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	441a      	add	r2, r3
 800859e:	897b      	ldrh	r3, [r7, #10]
 80085a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	8013      	strh	r3, [r2, #0]
 80085b4:	f000 bcde 	b.w	8008f74 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80085b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	7b1b      	ldrb	r3, [r3, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f040 80bb 	bne.w	8008740 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80085ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699a      	ldr	r2, [r3, #24]
 80085d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d917      	bls.n	8008616 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80085e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80085f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	699a      	ldr	r2, [r3, #24]
 8008602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008606:	1ad2      	subs	r2, r2, r3
 8008608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800860c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	619a      	str	r2, [r3, #24]
 8008614:	e00e      	b.n	8008634 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800861a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800862a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2200      	movs	r2, #0
 8008632:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008646:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008650:	b29b      	uxth	r3, r3
 8008652:	461a      	mov	r2, r3
 8008654:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008658:	4413      	add	r3, r2
 800865a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800865e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	00da      	lsls	r2, r3, #3
 800866c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008670:	4413      	add	r3, r2
 8008672:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800867a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	b29b      	uxth	r3, r3
 8008682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008686:	b29a      	uxth	r2, r3
 8008688:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800868c:	801a      	strh	r2, [r3, #0]
 800868e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008692:	2b3e      	cmp	r3, #62	; 0x3e
 8008694:	d924      	bls.n	80086e0 <USB_EPStartXfer+0xec2>
 8008696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800869a:	095b      	lsrs	r3, r3, #5
 800869c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086a4:	f003 031f 	and.w	r3, r3, #31
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d104      	bne.n	80086b6 <USB_EPStartXfer+0xe98>
 80086ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086b0:	3b01      	subs	r3, #1
 80086b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	b29a      	uxth	r2, r3
 80086be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	029b      	lsls	r3, r3, #10
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	4313      	orrs	r3, r2
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086da:	801a      	strh	r2, [r3, #0]
 80086dc:	f000 bc10 	b.w	8008f00 <USB_EPStartXfer+0x16e2>
 80086e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10c      	bne.n	8008702 <USB_EPStartXfer+0xee4>
 80086e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086ec:	881b      	ldrh	r3, [r3, #0]
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086fe:	801a      	strh	r2, [r3, #0]
 8008700:	e3fe      	b.n	8008f00 <USB_EPStartXfer+0x16e2>
 8008702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008706:	085b      	lsrs	r3, r3, #1
 8008708:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800870c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d004      	beq.n	8008722 <USB_EPStartXfer+0xf04>
 8008718:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800871c:	3301      	adds	r3, #1
 800871e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	b29a      	uxth	r2, r3
 800872a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800872e:	b29b      	uxth	r3, r3
 8008730:	029b      	lsls	r3, r3, #10
 8008732:	b29b      	uxth	r3, r3
 8008734:	4313      	orrs	r3, r2
 8008736:	b29a      	uxth	r2, r3
 8008738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800873c:	801a      	strh	r2, [r3, #0]
 800873e:	e3df      	b.n	8008f00 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	78db      	ldrb	r3, [r3, #3]
 800874c:	2b02      	cmp	r3, #2
 800874e:	f040 8218 	bne.w	8008b82 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	785b      	ldrb	r3, [r3, #1]
 800875e:	2b00      	cmp	r3, #0
 8008760:	f040 809d 	bne.w	800889e <USB_EPStartXfer+0x1080>
 8008764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008780:	b29b      	uxth	r3, r3
 8008782:	461a      	mov	r2, r3
 8008784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008788:	4413      	add	r3, r2
 800878a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800878e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	00da      	lsls	r2, r3, #3
 800879c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087a0:	4413      	add	r3, r2
 80087a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80087aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087bc:	801a      	strh	r2, [r3, #0]
 80087be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	2b3e      	cmp	r3, #62	; 0x3e
 80087cc:	d92b      	bls.n	8008826 <USB_EPStartXfer+0x1008>
 80087ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	095b      	lsrs	r3, r3, #5
 80087dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	f003 031f 	and.w	r3, r3, #31
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d104      	bne.n	80087fe <USB_EPStartXfer+0xfe0>
 80087f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f8:	3b01      	subs	r3, #1
 80087fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	b29a      	uxth	r2, r3
 8008806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800880a:	b29b      	uxth	r3, r3
 800880c:	029b      	lsls	r3, r3, #10
 800880e:	b29b      	uxth	r3, r3
 8008810:	4313      	orrs	r3, r2
 8008812:	b29b      	uxth	r3, r3
 8008814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800881c:	b29a      	uxth	r2, r3
 800881e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008822:	801a      	strh	r2, [r3, #0]
 8008824:	e070      	b.n	8008908 <USB_EPStartXfer+0x10ea>
 8008826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800882a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10c      	bne.n	8008850 <USB_EPStartXfer+0x1032>
 8008836:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b29b      	uxth	r3, r3
 800883e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008846:	b29a      	uxth	r2, r3
 8008848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800884c:	801a      	strh	r2, [r3, #0]
 800884e:	e05b      	b.n	8008908 <USB_EPStartXfer+0x10ea>
 8008850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	085b      	lsrs	r3, r3, #1
 800885e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	2b00      	cmp	r3, #0
 8008874:	d004      	beq.n	8008880 <USB_EPStartXfer+0x1062>
 8008876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800887a:	3301      	adds	r3, #1
 800887c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008880:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	b29a      	uxth	r2, r3
 8008888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800888c:	b29b      	uxth	r3, r3
 800888e:	029b      	lsls	r3, r3, #10
 8008890:	b29b      	uxth	r3, r3
 8008892:	4313      	orrs	r3, r2
 8008894:	b29a      	uxth	r2, r3
 8008896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800889a:	801a      	strh	r2, [r3, #0]
 800889c:	e034      	b.n	8008908 <USB_EPStartXfer+0x10ea>
 800889e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	785b      	ldrb	r3, [r3, #1]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d12c      	bne.n	8008908 <USB_EPStartXfer+0x10ea>
 80088ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	461a      	mov	r2, r3
 80088ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088d2:	4413      	add	r3, r2
 80088d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	00da      	lsls	r2, r3, #3
 80088e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088ea:	4413      	add	r3, r2
 80088ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80088f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	b29a      	uxth	r2, r3
 8008902:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008906:	801a      	strh	r2, [r3, #0]
 8008908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800891a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	785b      	ldrb	r3, [r3, #1]
 8008922:	2b00      	cmp	r3, #0
 8008924:	f040 809d 	bne.w	8008a62 <USB_EPStartXfer+0x1244>
 8008928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800892c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800893a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008944:	b29b      	uxth	r3, r3
 8008946:	461a      	mov	r2, r3
 8008948:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800894c:	4413      	add	r3, r2
 800894e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	00da      	lsls	r2, r3, #3
 8008960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008964:	4413      	add	r3, r2
 8008966:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800896a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800896e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	b29b      	uxth	r3, r3
 8008976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800897a:	b29a      	uxth	r2, r3
 800897c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008980:	801a      	strh	r2, [r3, #0]
 8008982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	2b3e      	cmp	r3, #62	; 0x3e
 8008990:	d92b      	bls.n	80089ea <USB_EPStartXfer+0x11cc>
 8008992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	095b      	lsrs	r3, r3, #5
 80089a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80089a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	f003 031f 	and.w	r3, r3, #31
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d104      	bne.n	80089c2 <USB_EPStartXfer+0x11a4>
 80089b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089bc:	3b01      	subs	r3, #1
 80089be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80089c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	029b      	lsls	r3, r3, #10
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	4313      	orrs	r3, r2
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089e6:	801a      	strh	r2, [r3, #0]
 80089e8:	e069      	b.n	8008abe <USB_EPStartXfer+0x12a0>
 80089ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10c      	bne.n	8008a14 <USB_EPStartXfer+0x11f6>
 80089fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a10:	801a      	strh	r2, [r3, #0]
 8008a12:	e054      	b.n	8008abe <USB_EPStartXfer+0x12a0>
 8008a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	085b      	lsrs	r3, r3, #1
 8008a22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d004      	beq.n	8008a44 <USB_EPStartXfer+0x1226>
 8008a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a3e:	3301      	adds	r3, #1
 8008a40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	029b      	lsls	r3, r3, #10
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	4313      	orrs	r3, r2
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a5e:	801a      	strh	r2, [r3, #0]
 8008a60:	e02d      	b.n	8008abe <USB_EPStartXfer+0x12a0>
 8008a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	785b      	ldrb	r3, [r3, #1]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d125      	bne.n	8008abe <USB_EPStartXfer+0x12a0>
 8008a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	461a      	mov	r2, r3
 8008a84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a88:	4413      	add	r3, r2
 8008a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	00da      	lsls	r2, r3, #3
 8008a9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008abc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 8218 	beq.w	8008f00 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008af0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d005      	beq.n	8008b08 <USB_EPStartXfer+0x12ea>
 8008afc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10d      	bne.n	8008b24 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008b08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f040 81f5 	bne.w	8008f00 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008b16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f040 81ee 	bne.w	8008f00 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b4a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	441a      	add	r2, r3
 8008b68:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	8013      	strh	r3, [r2, #0]
 8008b80:	e1be      	b.n	8008f00 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	78db      	ldrb	r3, [r3, #3]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	f040 81b4 	bne.w	8008efc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	699a      	ldr	r2, [r3, #24]
 8008ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d917      	bls.n	8008be0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	699a      	ldr	r2, [r3, #24]
 8008bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bd0:	1ad2      	subs	r2, r2, r3
 8008bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	619a      	str	r2, [r3, #24]
 8008bde:	e00e      	b.n	8008bfe <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	785b      	ldrb	r3, [r3, #1]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f040 8085 	bne.w	8008d1a <USB_EPStartXfer+0x14fc>
 8008c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c34:	4413      	add	r3, r2
 8008c36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	00da      	lsls	r2, r3, #3
 8008c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c68:	801a      	strh	r2, [r3, #0]
 8008c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c6e:	2b3e      	cmp	r3, #62	; 0x3e
 8008c70:	d923      	bls.n	8008cba <USB_EPStartXfer+0x149c>
 8008c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c76:	095b      	lsrs	r3, r3, #5
 8008c78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c80:	f003 031f 	and.w	r3, r3, #31
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d104      	bne.n	8008c92 <USB_EPStartXfer+0x1474>
 8008c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	029b      	lsls	r3, r3, #10
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cb6:	801a      	strh	r2, [r3, #0]
 8008cb8:	e060      	b.n	8008d7c <USB_EPStartXfer+0x155e>
 8008cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10c      	bne.n	8008cdc <USB_EPStartXfer+0x14be>
 8008cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cd8:	801a      	strh	r2, [r3, #0]
 8008cda:	e04f      	b.n	8008d7c <USB_EPStartXfer+0x155e>
 8008cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce0:	085b      	lsrs	r3, r3, #1
 8008ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d004      	beq.n	8008cfc <USB_EPStartXfer+0x14de>
 8008cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008cfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	029b      	lsls	r3, r3, #10
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d16:	801a      	strh	r2, [r3, #0]
 8008d18:	e030      	b.n	8008d7c <USB_EPStartXfer+0x155e>
 8008d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	785b      	ldrb	r3, [r3, #1]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d128      	bne.n	8008d7c <USB_EPStartXfer+0x155e>
 8008d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	461a      	mov	r2, r3
 8008d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d4e:	4413      	add	r3, r2
 8008d50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	00da      	lsls	r2, r3, #3
 8008d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d66:	4413      	add	r3, r2
 8008d68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008d7a:	801a      	strh	r2, [r3, #0]
 8008d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	785b      	ldrb	r3, [r3, #1]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f040 8085 	bne.w	8008ea6 <USB_EPStartXfer+0x1688>
 8008d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008da0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	461a      	mov	r2, r3
 8008dbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	00da      	lsls	r2, r3, #3
 8008dd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008dd8:	4413      	add	r3, r2
 8008dda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008dde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008de2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008df4:	801a      	strh	r2, [r3, #0]
 8008df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dfa:	2b3e      	cmp	r3, #62	; 0x3e
 8008dfc:	d923      	bls.n	8008e46 <USB_EPStartXfer+0x1628>
 8008dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e02:	095b      	lsrs	r3, r3, #5
 8008e04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e0c:	f003 031f 	and.w	r3, r3, #31
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d104      	bne.n	8008e1e <USB_EPStartXfer+0x1600>
 8008e14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	029b      	lsls	r3, r3, #10
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	4313      	orrs	r3, r2
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e42:	801a      	strh	r2, [r3, #0]
 8008e44:	e05c      	b.n	8008f00 <USB_EPStartXfer+0x16e2>
 8008e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10c      	bne.n	8008e68 <USB_EPStartXfer+0x164a>
 8008e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e64:	801a      	strh	r2, [r3, #0]
 8008e66:	e04b      	b.n	8008f00 <USB_EPStartXfer+0x16e2>
 8008e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e6c:	085b      	lsrs	r3, r3, #1
 8008e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d004      	beq.n	8008e88 <USB_EPStartXfer+0x166a>
 8008e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e82:	3301      	adds	r3, #1
 8008e84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e8c:	881b      	ldrh	r3, [r3, #0]
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	029b      	lsls	r3, r3, #10
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ea2:	801a      	strh	r2, [r3, #0]
 8008ea4:	e02c      	b.n	8008f00 <USB_EPStartXfer+0x16e2>
 8008ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	785b      	ldrb	r3, [r3, #1]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d124      	bne.n	8008f00 <USB_EPStartXfer+0x16e2>
 8008eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ecc:	4413      	add	r3, r2
 8008ece:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	00da      	lsls	r2, r3, #3
 8008ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008eea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ef8:	801a      	strh	r2, [r3, #0]
 8008efa:	e001      	b.n	8008f00 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e03a      	b.n	8008f76 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f26:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008f2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008f2e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f32:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008f36:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008f3a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f3e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	441a      	add	r2, r3
 8008f5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	785b      	ldrb	r3, [r3, #1]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d020      	beq.n	8008fd4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fa8:	81bb      	strh	r3, [r7, #12]
 8008faa:	89bb      	ldrh	r3, [r7, #12]
 8008fac:	f083 0310 	eor.w	r3, r3, #16
 8008fb0:	81bb      	strh	r3, [r7, #12]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	441a      	add	r2, r3
 8008fbc:	89bb      	ldrh	r3, [r7, #12]
 8008fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	8013      	strh	r3, [r2, #0]
 8008fd2:	e01f      	b.n	8009014 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4413      	add	r3, r2
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fea:	81fb      	strh	r3, [r7, #14]
 8008fec:	89fb      	ldrh	r3, [r7, #14]
 8008fee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ff2:	81fb      	strh	r3, [r7, #14]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	441a      	add	r2, r3
 8008ffe:	89fb      	ldrh	r3, [r7, #14]
 8009000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800900c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009010:	b29b      	uxth	r3, r3
 8009012:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009022:	b480      	push	{r7}
 8009024:	b087      	sub	sp, #28
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	7b1b      	ldrb	r3, [r3, #12]
 8009030:	2b00      	cmp	r3, #0
 8009032:	f040 809d 	bne.w	8009170 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	785b      	ldrb	r3, [r3, #1]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d04c      	beq.n	80090d8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	823b      	strh	r3, [r7, #16]
 800904c:	8a3b      	ldrh	r3, [r7, #16]
 800904e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009052:	2b00      	cmp	r3, #0
 8009054:	d01b      	beq.n	800908e <USB_EPClearStall+0x6c>
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	4413      	add	r3, r2
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	b29b      	uxth	r3, r3
 8009064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800906c:	81fb      	strh	r3, [r7, #14]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	441a      	add	r2, r3
 8009078:	89fb      	ldrh	r3, [r7, #14]
 800907a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800907e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009086:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800908a:	b29b      	uxth	r3, r3
 800908c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	78db      	ldrb	r3, [r3, #3]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d06c      	beq.n	8009170 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ac:	81bb      	strh	r3, [r7, #12]
 80090ae:	89bb      	ldrh	r3, [r7, #12]
 80090b0:	f083 0320 	eor.w	r3, r3, #32
 80090b4:	81bb      	strh	r3, [r7, #12]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	441a      	add	r2, r3
 80090c0:	89bb      	ldrh	r3, [r7, #12]
 80090c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	8013      	strh	r3, [r2, #0]
 80090d6:	e04b      	b.n	8009170 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	82fb      	strh	r3, [r7, #22]
 80090e6:	8afb      	ldrh	r3, [r7, #22]
 80090e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d01b      	beq.n	8009128 <USB_EPClearStall+0x106>
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4413      	add	r3, r2
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009106:	82bb      	strh	r3, [r7, #20]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	441a      	add	r2, r3
 8009112:	8abb      	ldrh	r3, [r7, #20]
 8009114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800911c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009124:	b29b      	uxth	r3, r3
 8009126:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4413      	add	r3, r2
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	b29b      	uxth	r3, r3
 8009136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800913a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800913e:	827b      	strh	r3, [r7, #18]
 8009140:	8a7b      	ldrh	r3, [r7, #18]
 8009142:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009146:	827b      	strh	r3, [r7, #18]
 8009148:	8a7b      	ldrh	r3, [r7, #18]
 800914a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800914e:	827b      	strh	r3, [r7, #18]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	441a      	add	r2, r3
 800915a:	8a7b      	ldrh	r3, [r7, #18]
 800915c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800916c:	b29b      	uxth	r3, r3
 800916e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	371c      	adds	r7, #28
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	460b      	mov	r3, r1
 8009188:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800918a:	78fb      	ldrb	r3, [r7, #3]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d103      	bne.n	8009198 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2280      	movs	r2, #128	; 0x80
 8009194:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b083      	sub	sp, #12
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091be:	b29a      	uxth	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80091e6:	68fb      	ldr	r3, [r7, #12]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b08b      	sub	sp, #44	; 0x2c
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	4611      	mov	r1, r2
 8009200:	461a      	mov	r2, r3
 8009202:	460b      	mov	r3, r1
 8009204:	80fb      	strh	r3, [r7, #6]
 8009206:	4613      	mov	r3, r2
 8009208:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800920a:	88bb      	ldrh	r3, [r7, #4]
 800920c:	3301      	adds	r3, #1
 800920e:	085b      	lsrs	r3, r3, #1
 8009210:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800921a:	88fa      	ldrh	r2, [r7, #6]
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	4413      	add	r3, r2
 8009220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009224:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
 800922a:	e01b      	b.n	8009264 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	3301      	adds	r3, #1
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	021b      	lsls	r3, r3, #8
 800923a:	b21a      	sxth	r2, r3
 800923c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009240:	4313      	orrs	r3, r2
 8009242:	b21b      	sxth	r3, r3
 8009244:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	8a7a      	ldrh	r2, [r7, #18]
 800924a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	3302      	adds	r3, #2
 8009250:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	3301      	adds	r3, #1
 8009256:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	3301      	adds	r3, #1
 800925c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	3b01      	subs	r3, #1
 8009262:	627b      	str	r3, [r7, #36]	; 0x24
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e0      	bne.n	800922c <USB_WritePMA+0x38>
  }
}
 800926a:	bf00      	nop
 800926c:	bf00      	nop
 800926e:	372c      	adds	r7, #44	; 0x2c
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009278:	b480      	push	{r7}
 800927a:	b08b      	sub	sp, #44	; 0x2c
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	4611      	mov	r1, r2
 8009284:	461a      	mov	r2, r3
 8009286:	460b      	mov	r3, r1
 8009288:	80fb      	strh	r3, [r7, #6]
 800928a:	4613      	mov	r3, r2
 800928c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800928e:	88bb      	ldrh	r3, [r7, #4]
 8009290:	085b      	lsrs	r3, r3, #1
 8009292:	b29b      	uxth	r3, r3
 8009294:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800929e:	88fa      	ldrh	r2, [r7, #6]
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	4413      	add	r3, r2
 80092a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092a8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
 80092ae:	e018      	b.n	80092e2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	881b      	ldrh	r3, [r3, #0]
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	3302      	adds	r3, #2
 80092bc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	3301      	adds	r3, #1
 80092ca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	0a1b      	lsrs	r3, r3, #8
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	3301      	adds	r3, #1
 80092da:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	3b01      	subs	r3, #1
 80092e0:	627b      	str	r3, [r7, #36]	; 0x24
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e3      	bne.n	80092b0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80092e8:	88bb      	ldrh	r3, [r7, #4]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d007      	beq.n	8009304 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	881b      	ldrh	r3, [r3, #0]
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	701a      	strb	r2, [r3, #0]
  }
}
 8009304:	bf00      	nop
 8009306:	372c      	adds	r7, #44	; 0x2c
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800931c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009320:	f002 f94a 	bl	800b5b8 <USBD_static_malloc>
 8009324:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d105      	bne.n	8009338 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009334:	2302      	movs	r3, #2
 8009336:	e066      	b.n	8009406 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	7c1b      	ldrb	r3, [r3, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d119      	bne.n	800937c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800934c:	2202      	movs	r2, #2
 800934e:	2181      	movs	r1, #129	; 0x81
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 ffd8 	bl	800b306 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800935c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009360:	2202      	movs	r2, #2
 8009362:	2101      	movs	r1, #1
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f001 ffce 	bl	800b306 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2210      	movs	r2, #16
 8009376:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800937a:	e016      	b.n	80093aa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800937c:	2340      	movs	r3, #64	; 0x40
 800937e:	2202      	movs	r2, #2
 8009380:	2181      	movs	r1, #129	; 0x81
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f001 ffbf 	bl	800b306 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800938e:	2340      	movs	r3, #64	; 0x40
 8009390:	2202      	movs	r2, #2
 8009392:	2101      	movs	r1, #1
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f001 ffb6 	bl	800b306 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2210      	movs	r2, #16
 80093a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80093aa:	2308      	movs	r3, #8
 80093ac:	2203      	movs	r2, #3
 80093ae:	2182      	movs	r1, #130	; 0x82
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f001 ffa8 	bl	800b306 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	7c1b      	ldrb	r3, [r3, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d109      	bne.n	80093f4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093ea:	2101      	movs	r1, #1
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f002 f879 	bl	800b4e4 <USBD_LL_PrepareReceive>
 80093f2:	e007      	b.n	8009404 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093fa:	2340      	movs	r3, #64	; 0x40
 80093fc:	2101      	movs	r1, #1
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f002 f870 	bl	800b4e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b082      	sub	sp, #8
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	460b      	mov	r3, r1
 8009418:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800941a:	2181      	movs	r1, #129	; 0x81
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f001 ff98 	bl	800b352 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009428:	2101      	movs	r1, #1
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f001 ff91 	bl	800b352 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009438:	2182      	movs	r1, #130	; 0x82
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f001 ff89 	bl	800b352 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00e      	beq.n	8009478 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800946a:	4618      	mov	r0, r3
 800946c:	f002 f8b2 	bl	800b5d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
	...

08009484 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009494:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009496:	2300      	movs	r3, #0
 8009498:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800949a:	2300      	movs	r3, #0
 800949c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d101      	bne.n	80094ac <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e0af      	b.n	800960c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d03f      	beq.n	8009538 <USBD_CDC_Setup+0xb4>
 80094b8:	2b20      	cmp	r3, #32
 80094ba:	f040 809f 	bne.w	80095fc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	88db      	ldrh	r3, [r3, #6]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d02e      	beq.n	8009524 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	b25b      	sxtb	r3, r3
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	da16      	bge.n	80094fe <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80094dc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	88d2      	ldrh	r2, [r2, #6]
 80094e2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	88db      	ldrh	r3, [r3, #6]
 80094e8:	2b07      	cmp	r3, #7
 80094ea:	bf28      	it	cs
 80094ec:	2307      	movcs	r3, #7
 80094ee:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	89fa      	ldrh	r2, [r7, #14]
 80094f4:	4619      	mov	r1, r3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f001 fa9f 	bl	800aa3a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80094fc:	e085      	b.n	800960a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	785a      	ldrb	r2, [r3, #1]
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	88db      	ldrh	r3, [r3, #6]
 800950c:	b2da      	uxtb	r2, r3
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009514:	6939      	ldr	r1, [r7, #16]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	88db      	ldrh	r3, [r3, #6]
 800951a:	461a      	mov	r2, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 fab8 	bl	800aa92 <USBD_CtlPrepareRx>
      break;
 8009522:	e072      	b.n	800960a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	7850      	ldrb	r0, [r2, #1]
 8009530:	2200      	movs	r2, #0
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	4798      	blx	r3
      break;
 8009536:	e068      	b.n	800960a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	785b      	ldrb	r3, [r3, #1]
 800953c:	2b0b      	cmp	r3, #11
 800953e:	d852      	bhi.n	80095e6 <USBD_CDC_Setup+0x162>
 8009540:	a201      	add	r2, pc, #4	; (adr r2, 8009548 <USBD_CDC_Setup+0xc4>)
 8009542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009546:	bf00      	nop
 8009548:	08009579 	.word	0x08009579
 800954c:	080095f5 	.word	0x080095f5
 8009550:	080095e7 	.word	0x080095e7
 8009554:	080095e7 	.word	0x080095e7
 8009558:	080095e7 	.word	0x080095e7
 800955c:	080095e7 	.word	0x080095e7
 8009560:	080095e7 	.word	0x080095e7
 8009564:	080095e7 	.word	0x080095e7
 8009568:	080095e7 	.word	0x080095e7
 800956c:	080095e7 	.word	0x080095e7
 8009570:	080095a3 	.word	0x080095a3
 8009574:	080095cd 	.word	0x080095cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b03      	cmp	r3, #3
 8009582:	d107      	bne.n	8009594 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009584:	f107 030a 	add.w	r3, r7, #10
 8009588:	2202      	movs	r2, #2
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f001 fa54 	bl	800aa3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009592:	e032      	b.n	80095fa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f001 f9de 	bl	800a958 <USBD_CtlError>
            ret = USBD_FAIL;
 800959c:	2303      	movs	r3, #3
 800959e:	75fb      	strb	r3, [r7, #23]
          break;
 80095a0:	e02b      	b.n	80095fa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d107      	bne.n	80095be <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80095ae:	f107 030d 	add.w	r3, r7, #13
 80095b2:	2201      	movs	r2, #1
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f001 fa3f 	bl	800aa3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095bc:	e01d      	b.n	80095fa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f001 f9c9 	bl	800a958 <USBD_CtlError>
            ret = USBD_FAIL;
 80095c6:	2303      	movs	r3, #3
 80095c8:	75fb      	strb	r3, [r7, #23]
          break;
 80095ca:	e016      	b.n	80095fa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	d00f      	beq.n	80095f8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f001 f9bc 	bl	800a958 <USBD_CtlError>
            ret = USBD_FAIL;
 80095e0:	2303      	movs	r3, #3
 80095e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80095e4:	e008      	b.n	80095f8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f001 f9b5 	bl	800a958 <USBD_CtlError>
          ret = USBD_FAIL;
 80095ee:	2303      	movs	r3, #3
 80095f0:	75fb      	strb	r3, [r7, #23]
          break;
 80095f2:	e002      	b.n	80095fa <USBD_CDC_Setup+0x176>
          break;
 80095f4:	bf00      	nop
 80095f6:	e008      	b.n	800960a <USBD_CDC_Setup+0x186>
          break;
 80095f8:	bf00      	nop
      }
      break;
 80095fa:	e006      	b.n	800960a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f001 f9aa 	bl	800a958 <USBD_CtlError>
      ret = USBD_FAIL;
 8009604:	2303      	movs	r3, #3
 8009606:	75fb      	strb	r3, [r7, #23]
      break;
 8009608:	bf00      	nop
  }

  return (uint8_t)ret;
 800960a:	7dfb      	ldrb	r3, [r7, #23]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009626:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009632:	2303      	movs	r3, #3
 8009634:	e04f      	b.n	80096d6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800963c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800963e:	78fa      	ldrb	r2, [r7, #3]
 8009640:	6879      	ldr	r1, [r7, #4]
 8009642:	4613      	mov	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	440b      	add	r3, r1
 800964c:	3318      	adds	r3, #24
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d029      	beq.n	80096a8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009654:	78fa      	ldrb	r2, [r7, #3]
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	4613      	mov	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	440b      	add	r3, r1
 8009662:	3318      	adds	r3, #24
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	78f9      	ldrb	r1, [r7, #3]
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	460b      	mov	r3, r1
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	440b      	add	r3, r1
 8009670:	00db      	lsls	r3, r3, #3
 8009672:	4403      	add	r3, r0
 8009674:	3320      	adds	r3, #32
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	fbb2 f1f3 	udiv	r1, r2, r3
 800967c:	fb01 f303 	mul.w	r3, r1, r3
 8009680:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009682:	2b00      	cmp	r3, #0
 8009684:	d110      	bne.n	80096a8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009686:	78fa      	ldrb	r2, [r7, #3]
 8009688:	6879      	ldr	r1, [r7, #4]
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	440b      	add	r3, r1
 8009694:	3318      	adds	r3, #24
 8009696:	2200      	movs	r2, #0
 8009698:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800969a:	78f9      	ldrb	r1, [r7, #3]
 800969c:	2300      	movs	r3, #0
 800969e:	2200      	movs	r2, #0
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f001 fefe 	bl	800b4a2 <USBD_LL_Transmit>
 80096a6:	e015      	b.n	80096d4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00b      	beq.n	80096d4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80096d0:	78fa      	ldrb	r2, [r7, #3]
 80096d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	460b      	mov	r3, r1
 80096e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d101      	bne.n	8009700 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e015      	b.n	800972c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009700:	78fb      	ldrb	r3, [r7, #3]
 8009702:	4619      	mov	r1, r3
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f001 ff0e 	bl	800b526 <USBD_LL_GetRxDataSize>
 800970a:	4602      	mov	r2, r0
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009726:	4611      	mov	r1, r2
 8009728:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009742:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800974a:	2303      	movs	r3, #3
 800974c:	e01b      	b.n	8009786 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d015      	beq.n	8009784 <USBD_CDC_EP0_RxReady+0x50>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800975e:	2bff      	cmp	r3, #255	; 0xff
 8009760:	d010      	beq.n	8009784 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009770:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009778:	b292      	uxth	r2, r2
 800977a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	22ff      	movs	r2, #255	; 0xff
 8009780:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
	...

08009790 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2243      	movs	r2, #67	; 0x43
 800979c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800979e:	4b03      	ldr	r3, [pc, #12]	; (80097ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr
 80097ac:	20000094 	.word	0x20000094

080097b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2243      	movs	r2, #67	; 0x43
 80097bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80097be:	4b03      	ldr	r3, [pc, #12]	; (80097cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	20000050 	.word	0x20000050

080097d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2243      	movs	r2, #67	; 0x43
 80097dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80097de:	4b03      	ldr	r3, [pc, #12]	; (80097ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	200000d8 	.word	0x200000d8

080097f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	220a      	movs	r2, #10
 80097fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80097fe:	4b03      	ldr	r3, [pc, #12]	; (800980c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	2000000c 	.word	0x2000000c

08009810 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d101      	bne.n	8009824 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009820:	2303      	movs	r3, #3
 8009822:	e004      	b.n	800982e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800983a:	b480      	push	{r7}
 800983c:	b087      	sub	sp, #28
 800983e:	af00      	add	r7, sp, #0
 8009840:	60f8      	str	r0, [r7, #12]
 8009842:	60b9      	str	r1, [r7, #8]
 8009844:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800984c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009854:	2303      	movs	r3, #3
 8009856:	e008      	b.n	800986a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	371c      	adds	r7, #28
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009876:	b480      	push	{r7}
 8009878:	b085      	sub	sp, #20
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009886:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800988e:	2303      	movs	r3, #3
 8009890:	e004      	b.n	800989c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	683a      	ldr	r2, [r7, #0]
 8009896:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3714      	adds	r7, #20
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d101      	bne.n	80098c6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80098c2:	2303      	movs	r3, #3
 80098c4:	e016      	b.n	80098f4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	7c1b      	ldrb	r3, [r3, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d109      	bne.n	80098e2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098d8:	2101      	movs	r1, #1
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f001 fe02 	bl	800b4e4 <USBD_LL_PrepareReceive>
 80098e0:	e007      	b.n	80098f2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098e8:	2340      	movs	r3, #64	; 0x40
 80098ea:	2101      	movs	r1, #1
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f001 fdf9 	bl	800b4e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	4613      	mov	r3, r2
 8009908:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009910:	2303      	movs	r3, #3
 8009912:	e01f      	b.n	8009954 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	79fa      	ldrb	r2, [r7, #7]
 8009946:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f001 fc61 	bl	800b210 <USBD_LL_Init>
 800994e:	4603      	mov	r3, r0
 8009950:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009952:	7dfb      	ldrb	r3, [r7, #23]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009966:	2300      	movs	r3, #0
 8009968:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009970:	2303      	movs	r3, #3
 8009972:	e016      	b.n	80099a2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00b      	beq.n	80099a0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800998e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009990:	f107 020e 	add.w	r2, r7, #14
 8009994:	4610      	mov	r0, r2
 8009996:	4798      	blx	r3
 8009998:	4602      	mov	r2, r0
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b082      	sub	sp, #8
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f001 fc8c 	bl	800b2d0 <USBD_LL_Start>
 80099b8:	4603      	mov	r3, r0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80099c2:	b480      	push	{r7}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80099e4:	2303      	movs	r3, #3
 80099e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d009      	beq.n	8009a06 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	78fa      	ldrb	r2, [r7, #3]
 80099fc:	4611      	mov	r1, r2
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	4798      	blx	r3
 8009a02:	4603      	mov	r3, r0
 8009a04:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d007      	beq.n	8009a36 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	78fa      	ldrb	r2, [r7, #3]
 8009a30:	4611      	mov	r1, r2
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	4798      	blx	r3
  }

  return USBD_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f000 ff46 	bl	800a8e4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009a66:	461a      	mov	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a74:	f003 031f 	and.w	r3, r3, #31
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d01a      	beq.n	8009ab2 <USBD_LL_SetupStage+0x72>
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d822      	bhi.n	8009ac6 <USBD_LL_SetupStage+0x86>
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <USBD_LL_SetupStage+0x4a>
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d00a      	beq.n	8009a9e <USBD_LL_SetupStage+0x5e>
 8009a88:	e01d      	b.n	8009ac6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f9ee 	bl	8009e74 <USBD_StdDevReq>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a9c:	e020      	b.n	8009ae0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fa52 	bl	8009f50 <USBD_StdItfReq>
 8009aac:	4603      	mov	r3, r0
 8009aae:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab0:	e016      	b.n	8009ae0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fa91 	bl	8009fe2 <USBD_StdEPReq>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ac4:	e00c      	b.n	8009ae0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009acc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f001 fc5b 	bl	800b390 <USBD_LL_StallEP>
 8009ada:	4603      	mov	r3, r0
 8009adc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ade:	bf00      	nop
  }

  return ret;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b086      	sub	sp, #24
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	60f8      	str	r0, [r7, #12]
 8009af2:	460b      	mov	r3, r1
 8009af4:	607a      	str	r2, [r7, #4]
 8009af6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009af8:	7afb      	ldrb	r3, [r7, #11]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d138      	bne.n	8009b70 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b0c:	2b03      	cmp	r3, #3
 8009b0e:	d14a      	bne.n	8009ba6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	689a      	ldr	r2, [r3, #8]
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d913      	bls.n	8009b44 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	689a      	ldr	r2, [r3, #8]
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	1ad2      	subs	r2, r2, r3
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	68da      	ldr	r2, [r3, #12]
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	4293      	cmp	r3, r2
 8009b34:	bf28      	it	cs
 8009b36:	4613      	movcs	r3, r2
 8009b38:	461a      	mov	r2, r3
 8009b3a:	6879      	ldr	r1, [r7, #4]
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f000 ffc5 	bl	800aacc <USBD_CtlContinueRx>
 8009b42:	e030      	b.n	8009ba6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	2b03      	cmp	r3, #3
 8009b4e:	d10b      	bne.n	8009b68 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d005      	beq.n	8009b68 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 ffc0 	bl	800aaee <USBD_CtlSendStatus>
 8009b6e:	e01a      	b.n	8009ba6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b03      	cmp	r3, #3
 8009b7a:	d114      	bne.n	8009ba6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00e      	beq.n	8009ba6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	7afa      	ldrb	r2, [r7, #11]
 8009b92:	4611      	mov	r1, r2
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	4798      	blx	r3
 8009b98:	4603      	mov	r3, r0
 8009b9a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009b9c:	7dfb      	ldrb	r3, [r7, #23]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
 8009ba4:	e000      	b.n	8009ba8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3718      	adds	r7, #24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b086      	sub	sp, #24
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	607a      	str	r2, [r7, #4]
 8009bbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009bbe:	7afb      	ldrb	r3, [r7, #11]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d16b      	bne.n	8009c9c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3314      	adds	r3, #20
 8009bc8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d156      	bne.n	8009c82 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	689a      	ldr	r2, [r3, #8]
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d914      	bls.n	8009c0a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	689a      	ldr	r2, [r3, #8]
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	1ad2      	subs	r2, r2, r3
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	6879      	ldr	r1, [r7, #4]
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f000 ff3a 	bl	800aa70 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2100      	movs	r1, #0
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f001 fc6e 	bl	800b4e4 <USBD_LL_PrepareReceive>
 8009c08:	e03b      	b.n	8009c82 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	68da      	ldr	r2, [r3, #12]
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d11c      	bne.n	8009c50 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d316      	bcc.n	8009c50 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d20f      	bcs.n	8009c50 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c30:	2200      	movs	r2, #0
 8009c32:	2100      	movs	r1, #0
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f000 ff1b 	bl	800aa70 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c42:	2300      	movs	r3, #0
 8009c44:	2200      	movs	r2, #0
 8009c46:	2100      	movs	r1, #0
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f001 fc4b 	bl	800b4e4 <USBD_LL_PrepareReceive>
 8009c4e:	e018      	b.n	8009c82 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b03      	cmp	r3, #3
 8009c5a:	d10b      	bne.n	8009c74 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d005      	beq.n	8009c74 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c74:	2180      	movs	r1, #128	; 0x80
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f001 fb8a 	bl	800b390 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 ff49 	bl	800ab14 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d122      	bne.n	8009cd2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f7ff fe98 	bl	80099c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009c9a:	e01a      	b.n	8009cd2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	2b03      	cmp	r3, #3
 8009ca6:	d114      	bne.n	8009cd2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cae:	695b      	ldr	r3, [r3, #20]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00e      	beq.n	8009cd2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	7afa      	ldrb	r2, [r7, #11]
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	4798      	blx	r3
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d001      	beq.n	8009cd2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	e000      	b.n	8009cd4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3718      	adds	r7, #24
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d101      	bne.n	8009d10 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e02f      	b.n	8009d70 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00f      	beq.n	8009d3a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d009      	beq.n	8009d3a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	6852      	ldr	r2, [r2, #4]
 8009d32:	b2d2      	uxtb	r2, r2
 8009d34:	4611      	mov	r1, r2
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d3a:	2340      	movs	r3, #64	; 0x40
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	2100      	movs	r1, #0
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f001 fae0 	bl	800b306 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2240      	movs	r2, #64	; 0x40
 8009d52:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d56:	2340      	movs	r3, #64	; 0x40
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2180      	movs	r1, #128	; 0x80
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f001 fad2 	bl	800b306 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2240      	movs	r2, #64	; 0x40
 8009d6c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3708      	adds	r7, #8
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	460b      	mov	r3, r1
 8009d82:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	78fa      	ldrb	r2, [r7, #3]
 8009d88:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2204      	movs	r2, #4
 8009db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	d106      	bne.n	8009de6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e012      	b.n	8009e30 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d10b      	bne.n	8009e2e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e1c:	69db      	ldr	r3, [r3, #28]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d005      	beq.n	8009e2e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e28:	69db      	ldr	r3, [r3, #28]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b087      	sub	sp, #28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009e56:	8a3b      	ldrh	r3, [r7, #16]
 8009e58:	021b      	lsls	r3, r3, #8
 8009e5a:	b21a      	sxth	r2, r3
 8009e5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	b21b      	sxth	r3, r3
 8009e64:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009e66:	89fb      	ldrh	r3, [r7, #14]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	371c      	adds	r7, #28
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e8a:	2b40      	cmp	r3, #64	; 0x40
 8009e8c:	d005      	beq.n	8009e9a <USBD_StdDevReq+0x26>
 8009e8e:	2b40      	cmp	r3, #64	; 0x40
 8009e90:	d853      	bhi.n	8009f3a <USBD_StdDevReq+0xc6>
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00b      	beq.n	8009eae <USBD_StdDevReq+0x3a>
 8009e96:	2b20      	cmp	r3, #32
 8009e98:	d14f      	bne.n	8009f3a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	4798      	blx	r3
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8009eac:	e04a      	b.n	8009f44 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	785b      	ldrb	r3, [r3, #1]
 8009eb2:	2b09      	cmp	r3, #9
 8009eb4:	d83b      	bhi.n	8009f2e <USBD_StdDevReq+0xba>
 8009eb6:	a201      	add	r2, pc, #4	; (adr r2, 8009ebc <USBD_StdDevReq+0x48>)
 8009eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebc:	08009f11 	.word	0x08009f11
 8009ec0:	08009f25 	.word	0x08009f25
 8009ec4:	08009f2f 	.word	0x08009f2f
 8009ec8:	08009f1b 	.word	0x08009f1b
 8009ecc:	08009f2f 	.word	0x08009f2f
 8009ed0:	08009eef 	.word	0x08009eef
 8009ed4:	08009ee5 	.word	0x08009ee5
 8009ed8:	08009f2f 	.word	0x08009f2f
 8009edc:	08009f07 	.word	0x08009f07
 8009ee0:	08009ef9 	.word	0x08009ef9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f9de 	bl	800a2a8 <USBD_GetDescriptor>
          break;
 8009eec:	e024      	b.n	8009f38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fb6d 	bl	800a5d0 <USBD_SetAddress>
          break;
 8009ef6:	e01f      	b.n	8009f38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fbac 	bl	800a658 <USBD_SetConfig>
 8009f00:	4603      	mov	r3, r0
 8009f02:	73fb      	strb	r3, [r7, #15]
          break;
 8009f04:	e018      	b.n	8009f38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f06:	6839      	ldr	r1, [r7, #0]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fc4b 	bl	800a7a4 <USBD_GetConfig>
          break;
 8009f0e:	e013      	b.n	8009f38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f10:	6839      	ldr	r1, [r7, #0]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fc7c 	bl	800a810 <USBD_GetStatus>
          break;
 8009f18:	e00e      	b.n	8009f38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 fcab 	bl	800a878 <USBD_SetFeature>
          break;
 8009f22:	e009      	b.n	8009f38 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fcba 	bl	800a8a0 <USBD_ClrFeature>
          break;
 8009f2c:	e004      	b.n	8009f38 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009f2e:	6839      	ldr	r1, [r7, #0]
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fd11 	bl	800a958 <USBD_CtlError>
          break;
 8009f36:	bf00      	nop
      }
      break;
 8009f38:	e004      	b.n	8009f44 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009f3a:	6839      	ldr	r1, [r7, #0]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fd0b 	bl	800a958 <USBD_CtlError>
      break;
 8009f42:	bf00      	nop
  }

  return ret;
 8009f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop

08009f50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f66:	2b40      	cmp	r3, #64	; 0x40
 8009f68:	d005      	beq.n	8009f76 <USBD_StdItfReq+0x26>
 8009f6a:	2b40      	cmp	r3, #64	; 0x40
 8009f6c:	d82f      	bhi.n	8009fce <USBD_StdItfReq+0x7e>
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <USBD_StdItfReq+0x26>
 8009f72:	2b20      	cmp	r3, #32
 8009f74:	d12b      	bne.n	8009fce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d81d      	bhi.n	8009fc0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	889b      	ldrh	r3, [r3, #4]
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d813      	bhi.n	8009fb6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	4798      	blx	r3
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	88db      	ldrh	r3, [r3, #6]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d110      	bne.n	8009fca <USBD_StdItfReq+0x7a>
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10d      	bne.n	8009fca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 fd9d 	bl	800aaee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009fb4:	e009      	b.n	8009fca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fccd 	bl	800a958 <USBD_CtlError>
          break;
 8009fbe:	e004      	b.n	8009fca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fcc8 	bl	800a958 <USBD_CtlError>
          break;
 8009fc8:	e000      	b.n	8009fcc <USBD_StdItfReq+0x7c>
          break;
 8009fca:	bf00      	nop
      }
      break;
 8009fcc:	e004      	b.n	8009fd8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009fce:	6839      	ldr	r1, [r7, #0]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fcc1 	bl	800a958 <USBD_CtlError>
      break;
 8009fd6:	bf00      	nop
  }

  return ret;
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b084      	sub	sp, #16
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	889b      	ldrh	r3, [r3, #4]
 8009ff4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ffe:	2b40      	cmp	r3, #64	; 0x40
 800a000:	d007      	beq.n	800a012 <USBD_StdEPReq+0x30>
 800a002:	2b40      	cmp	r3, #64	; 0x40
 800a004:	f200 8145 	bhi.w	800a292 <USBD_StdEPReq+0x2b0>
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00c      	beq.n	800a026 <USBD_StdEPReq+0x44>
 800a00c:	2b20      	cmp	r3, #32
 800a00e:	f040 8140 	bne.w	800a292 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	4798      	blx	r3
 800a020:	4603      	mov	r3, r0
 800a022:	73fb      	strb	r3, [r7, #15]
      break;
 800a024:	e13a      	b.n	800a29c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	785b      	ldrb	r3, [r3, #1]
 800a02a:	2b03      	cmp	r3, #3
 800a02c:	d007      	beq.n	800a03e <USBD_StdEPReq+0x5c>
 800a02e:	2b03      	cmp	r3, #3
 800a030:	f300 8129 	bgt.w	800a286 <USBD_StdEPReq+0x2a4>
 800a034:	2b00      	cmp	r3, #0
 800a036:	d07f      	beq.n	800a138 <USBD_StdEPReq+0x156>
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d03c      	beq.n	800a0b6 <USBD_StdEPReq+0xd4>
 800a03c:	e123      	b.n	800a286 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b02      	cmp	r3, #2
 800a048:	d002      	beq.n	800a050 <USBD_StdEPReq+0x6e>
 800a04a:	2b03      	cmp	r3, #3
 800a04c:	d016      	beq.n	800a07c <USBD_StdEPReq+0x9a>
 800a04e:	e02c      	b.n	800a0aa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a050:	7bbb      	ldrb	r3, [r7, #14]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00d      	beq.n	800a072 <USBD_StdEPReq+0x90>
 800a056:	7bbb      	ldrb	r3, [r7, #14]
 800a058:	2b80      	cmp	r3, #128	; 0x80
 800a05a:	d00a      	beq.n	800a072 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a05c:	7bbb      	ldrb	r3, [r7, #14]
 800a05e:	4619      	mov	r1, r3
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 f995 	bl	800b390 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a066:	2180      	movs	r1, #128	; 0x80
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 f991 	bl	800b390 <USBD_LL_StallEP>
 800a06e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a070:	e020      	b.n	800a0b4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fc6f 	bl	800a958 <USBD_CtlError>
              break;
 800a07a:	e01b      	b.n	800a0b4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	885b      	ldrh	r3, [r3, #2]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10e      	bne.n	800a0a2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00b      	beq.n	800a0a2 <USBD_StdEPReq+0xc0>
 800a08a:	7bbb      	ldrb	r3, [r7, #14]
 800a08c:	2b80      	cmp	r3, #128	; 0x80
 800a08e:	d008      	beq.n	800a0a2 <USBD_StdEPReq+0xc0>
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	88db      	ldrh	r3, [r3, #6]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d104      	bne.n	800a0a2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a098:	7bbb      	ldrb	r3, [r7, #14]
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f001 f977 	bl	800b390 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fd23 	bl	800aaee <USBD_CtlSendStatus>

              break;
 800a0a8:	e004      	b.n	800a0b4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a0aa:	6839      	ldr	r1, [r7, #0]
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 fc53 	bl	800a958 <USBD_CtlError>
              break;
 800a0b2:	bf00      	nop
          }
          break;
 800a0b4:	e0ec      	b.n	800a290 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d002      	beq.n	800a0c8 <USBD_StdEPReq+0xe6>
 800a0c2:	2b03      	cmp	r3, #3
 800a0c4:	d016      	beq.n	800a0f4 <USBD_StdEPReq+0x112>
 800a0c6:	e030      	b.n	800a12a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0c8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00d      	beq.n	800a0ea <USBD_StdEPReq+0x108>
 800a0ce:	7bbb      	ldrb	r3, [r7, #14]
 800a0d0:	2b80      	cmp	r3, #128	; 0x80
 800a0d2:	d00a      	beq.n	800a0ea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a0d4:	7bbb      	ldrb	r3, [r7, #14]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f001 f959 	bl	800b390 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0de:	2180      	movs	r1, #128	; 0x80
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f001 f955 	bl	800b390 <USBD_LL_StallEP>
 800a0e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0e8:	e025      	b.n	800a136 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a0ea:	6839      	ldr	r1, [r7, #0]
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 fc33 	bl	800a958 <USBD_CtlError>
              break;
 800a0f2:	e020      	b.n	800a136 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	885b      	ldrh	r3, [r3, #2]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d11b      	bne.n	800a134 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a0fc:	7bbb      	ldrb	r3, [r7, #14]
 800a0fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a102:	2b00      	cmp	r3, #0
 800a104:	d004      	beq.n	800a110 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a106:	7bbb      	ldrb	r3, [r7, #14]
 800a108:	4619      	mov	r1, r3
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f001 f95f 	bl	800b3ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fcec 	bl	800aaee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	6839      	ldr	r1, [r7, #0]
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	4798      	blx	r3
 800a124:	4603      	mov	r3, r0
 800a126:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a128:	e004      	b.n	800a134 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fc13 	bl	800a958 <USBD_CtlError>
              break;
 800a132:	e000      	b.n	800a136 <USBD_StdEPReq+0x154>
              break;
 800a134:	bf00      	nop
          }
          break;
 800a136:	e0ab      	b.n	800a290 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	2b02      	cmp	r3, #2
 800a142:	d002      	beq.n	800a14a <USBD_StdEPReq+0x168>
 800a144:	2b03      	cmp	r3, #3
 800a146:	d032      	beq.n	800a1ae <USBD_StdEPReq+0x1cc>
 800a148:	e097      	b.n	800a27a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a14a:	7bbb      	ldrb	r3, [r7, #14]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d007      	beq.n	800a160 <USBD_StdEPReq+0x17e>
 800a150:	7bbb      	ldrb	r3, [r7, #14]
 800a152:	2b80      	cmp	r3, #128	; 0x80
 800a154:	d004      	beq.n	800a160 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fbfd 	bl	800a958 <USBD_CtlError>
                break;
 800a15e:	e091      	b.n	800a284 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a164:	2b00      	cmp	r3, #0
 800a166:	da0b      	bge.n	800a180 <USBD_StdEPReq+0x19e>
 800a168:	7bbb      	ldrb	r3, [r7, #14]
 800a16a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a16e:	4613      	mov	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	3310      	adds	r3, #16
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	4413      	add	r3, r2
 800a17c:	3304      	adds	r3, #4
 800a17e:	e00b      	b.n	800a198 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a180:	7bbb      	ldrb	r3, [r7, #14]
 800a182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a186:	4613      	mov	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	4413      	add	r3, r2
 800a196:	3304      	adds	r3, #4
 800a198:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fc47 	bl	800aa3a <USBD_CtlSendData>
              break;
 800a1ac:	e06a      	b.n	800a284 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a1ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	da11      	bge.n	800a1da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a1b6:	7bbb      	ldrb	r3, [r7, #14]
 800a1b8:	f003 020f 	and.w	r2, r3, #15
 800a1bc:	6879      	ldr	r1, [r7, #4]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4413      	add	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	440b      	add	r3, r1
 800a1c8:	3324      	adds	r3, #36	; 0x24
 800a1ca:	881b      	ldrh	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d117      	bne.n	800a200 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fbc0 	bl	800a958 <USBD_CtlError>
                  break;
 800a1d8:	e054      	b.n	800a284 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a1da:	7bbb      	ldrb	r3, [r7, #14]
 800a1dc:	f003 020f 	and.w	r2, r3, #15
 800a1e0:	6879      	ldr	r1, [r7, #4]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	440b      	add	r3, r1
 800a1ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a1f0:	881b      	ldrh	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d104      	bne.n	800a200 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fbad 	bl	800a958 <USBD_CtlError>
                  break;
 800a1fe:	e041      	b.n	800a284 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a200:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a204:	2b00      	cmp	r3, #0
 800a206:	da0b      	bge.n	800a220 <USBD_StdEPReq+0x23e>
 800a208:	7bbb      	ldrb	r3, [r7, #14]
 800a20a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a20e:	4613      	mov	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4413      	add	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	3310      	adds	r3, #16
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	4413      	add	r3, r2
 800a21c:	3304      	adds	r3, #4
 800a21e:	e00b      	b.n	800a238 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a220:	7bbb      	ldrb	r3, [r7, #14]
 800a222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a226:	4613      	mov	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	4413      	add	r3, r2
 800a236:	3304      	adds	r3, #4
 800a238:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a23a:	7bbb      	ldrb	r3, [r7, #14]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d002      	beq.n	800a246 <USBD_StdEPReq+0x264>
 800a240:	7bbb      	ldrb	r3, [r7, #14]
 800a242:	2b80      	cmp	r3, #128	; 0x80
 800a244:	d103      	bne.n	800a24e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	2200      	movs	r2, #0
 800a24a:	601a      	str	r2, [r3, #0]
 800a24c:	e00e      	b.n	800a26c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a24e:	7bbb      	ldrb	r3, [r7, #14]
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f001 f8da 	bl	800b40c <USBD_LL_IsStallEP>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d003      	beq.n	800a266 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	2201      	movs	r2, #1
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	e002      	b.n	800a26c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2200      	movs	r2, #0
 800a26a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	2202      	movs	r2, #2
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fbe1 	bl	800aa3a <USBD_CtlSendData>
              break;
 800a278:	e004      	b.n	800a284 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a27a:	6839      	ldr	r1, [r7, #0]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 fb6b 	bl	800a958 <USBD_CtlError>
              break;
 800a282:	bf00      	nop
          }
          break;
 800a284:	e004      	b.n	800a290 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fb65 	bl	800a958 <USBD_CtlError>
          break;
 800a28e:	bf00      	nop
      }
      break;
 800a290:	e004      	b.n	800a29c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fb5f 	bl	800a958 <USBD_CtlError>
      break;
 800a29a:	bf00      	nop
  }

  return ret;
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
	...

0800a2a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	885b      	ldrh	r3, [r3, #2]
 800a2c2:	0a1b      	lsrs	r3, r3, #8
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	2b0e      	cmp	r3, #14
 800a2ca:	f200 8152 	bhi.w	800a572 <USBD_GetDescriptor+0x2ca>
 800a2ce:	a201      	add	r2, pc, #4	; (adr r2, 800a2d4 <USBD_GetDescriptor+0x2c>)
 800a2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d4:	0800a345 	.word	0x0800a345
 800a2d8:	0800a35d 	.word	0x0800a35d
 800a2dc:	0800a39d 	.word	0x0800a39d
 800a2e0:	0800a573 	.word	0x0800a573
 800a2e4:	0800a573 	.word	0x0800a573
 800a2e8:	0800a513 	.word	0x0800a513
 800a2ec:	0800a53f 	.word	0x0800a53f
 800a2f0:	0800a573 	.word	0x0800a573
 800a2f4:	0800a573 	.word	0x0800a573
 800a2f8:	0800a573 	.word	0x0800a573
 800a2fc:	0800a573 	.word	0x0800a573
 800a300:	0800a573 	.word	0x0800a573
 800a304:	0800a573 	.word	0x0800a573
 800a308:	0800a573 	.word	0x0800a573
 800a30c:	0800a311 	.word	0x0800a311
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a316:	69db      	ldr	r3, [r3, #28]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00b      	beq.n	800a334 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a322:	69db      	ldr	r3, [r3, #28]
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	7c12      	ldrb	r2, [r2, #16]
 800a328:	f107 0108 	add.w	r1, r7, #8
 800a32c:	4610      	mov	r0, r2
 800a32e:	4798      	blx	r3
 800a330:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a332:	e126      	b.n	800a582 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fb0e 	bl	800a958 <USBD_CtlError>
        err++;
 800a33c:	7afb      	ldrb	r3, [r7, #11]
 800a33e:	3301      	adds	r3, #1
 800a340:	72fb      	strb	r3, [r7, #11]
      break;
 800a342:	e11e      	b.n	800a582 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	7c12      	ldrb	r2, [r2, #16]
 800a350:	f107 0108 	add.w	r1, r7, #8
 800a354:	4610      	mov	r0, r2
 800a356:	4798      	blx	r3
 800a358:	60f8      	str	r0, [r7, #12]
      break;
 800a35a:	e112      	b.n	800a582 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	7c1b      	ldrb	r3, [r3, #16]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10d      	bne.n	800a380 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36c:	f107 0208 	add.w	r2, r7, #8
 800a370:	4610      	mov	r0, r2
 800a372:	4798      	blx	r3
 800a374:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3301      	adds	r3, #1
 800a37a:	2202      	movs	r2, #2
 800a37c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a37e:	e100      	b.n	800a582 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a388:	f107 0208 	add.w	r2, r7, #8
 800a38c:	4610      	mov	r0, r2
 800a38e:	4798      	blx	r3
 800a390:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	3301      	adds	r3, #1
 800a396:	2202      	movs	r2, #2
 800a398:	701a      	strb	r2, [r3, #0]
      break;
 800a39a:	e0f2      	b.n	800a582 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	885b      	ldrh	r3, [r3, #2]
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b05      	cmp	r3, #5
 800a3a4:	f200 80ac 	bhi.w	800a500 <USBD_GetDescriptor+0x258>
 800a3a8:	a201      	add	r2, pc, #4	; (adr r2, 800a3b0 <USBD_GetDescriptor+0x108>)
 800a3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ae:	bf00      	nop
 800a3b0:	0800a3c9 	.word	0x0800a3c9
 800a3b4:	0800a3fd 	.word	0x0800a3fd
 800a3b8:	0800a431 	.word	0x0800a431
 800a3bc:	0800a465 	.word	0x0800a465
 800a3c0:	0800a499 	.word	0x0800a499
 800a3c4:	0800a4cd 	.word	0x0800a4cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00b      	beq.n	800a3ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	7c12      	ldrb	r2, [r2, #16]
 800a3e0:	f107 0108 	add.w	r1, r7, #8
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	4798      	blx	r3
 800a3e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3ea:	e091      	b.n	800a510 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a3ec:	6839      	ldr	r1, [r7, #0]
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 fab2 	bl	800a958 <USBD_CtlError>
            err++;
 800a3f4:	7afb      	ldrb	r3, [r7, #11]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a3fa:	e089      	b.n	800a510 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00b      	beq.n	800a420 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	7c12      	ldrb	r2, [r2, #16]
 800a414:	f107 0108 	add.w	r1, r7, #8
 800a418:	4610      	mov	r0, r2
 800a41a:	4798      	blx	r3
 800a41c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a41e:	e077      	b.n	800a510 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fa98 	bl	800a958 <USBD_CtlError>
            err++;
 800a428:	7afb      	ldrb	r3, [r7, #11]
 800a42a:	3301      	adds	r3, #1
 800a42c:	72fb      	strb	r3, [r7, #11]
          break;
 800a42e:	e06f      	b.n	800a510 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00b      	beq.n	800a454 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	7c12      	ldrb	r2, [r2, #16]
 800a448:	f107 0108 	add.w	r1, r7, #8
 800a44c:	4610      	mov	r0, r2
 800a44e:	4798      	blx	r3
 800a450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a452:	e05d      	b.n	800a510 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a454:	6839      	ldr	r1, [r7, #0]
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 fa7e 	bl	800a958 <USBD_CtlError>
            err++;
 800a45c:	7afb      	ldrb	r3, [r7, #11]
 800a45e:	3301      	adds	r3, #1
 800a460:	72fb      	strb	r3, [r7, #11]
          break;
 800a462:	e055      	b.n	800a510 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00b      	beq.n	800a488 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	7c12      	ldrb	r2, [r2, #16]
 800a47c:	f107 0108 	add.w	r1, r7, #8
 800a480:	4610      	mov	r0, r2
 800a482:	4798      	blx	r3
 800a484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a486:	e043      	b.n	800a510 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fa64 	bl	800a958 <USBD_CtlError>
            err++;
 800a490:	7afb      	ldrb	r3, [r7, #11]
 800a492:	3301      	adds	r3, #1
 800a494:	72fb      	strb	r3, [r7, #11]
          break;
 800a496:	e03b      	b.n	800a510 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a49e:	695b      	ldr	r3, [r3, #20]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00b      	beq.n	800a4bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4aa:	695b      	ldr	r3, [r3, #20]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	7c12      	ldrb	r2, [r2, #16]
 800a4b0:	f107 0108 	add.w	r1, r7, #8
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	4798      	blx	r3
 800a4b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ba:	e029      	b.n	800a510 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fa4a 	bl	800a958 <USBD_CtlError>
            err++;
 800a4c4:	7afb      	ldrb	r3, [r7, #11]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ca:	e021      	b.n	800a510 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00b      	beq.n	800a4f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	7c12      	ldrb	r2, [r2, #16]
 800a4e4:	f107 0108 	add.w	r1, r7, #8
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	4798      	blx	r3
 800a4ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ee:	e00f      	b.n	800a510 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4f0:	6839      	ldr	r1, [r7, #0]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fa30 	bl	800a958 <USBD_CtlError>
            err++;
 800a4f8:	7afb      	ldrb	r3, [r7, #11]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a4fe:	e007      	b.n	800a510 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a500:	6839      	ldr	r1, [r7, #0]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fa28 	bl	800a958 <USBD_CtlError>
          err++;
 800a508:	7afb      	ldrb	r3, [r7, #11]
 800a50a:	3301      	adds	r3, #1
 800a50c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a50e:	bf00      	nop
      }
      break;
 800a510:	e037      	b.n	800a582 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	7c1b      	ldrb	r3, [r3, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d109      	bne.n	800a52e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a522:	f107 0208 	add.w	r2, r7, #8
 800a526:	4610      	mov	r0, r2
 800a528:	4798      	blx	r3
 800a52a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a52c:	e029      	b.n	800a582 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fa11 	bl	800a958 <USBD_CtlError>
        err++;
 800a536:	7afb      	ldrb	r3, [r7, #11]
 800a538:	3301      	adds	r3, #1
 800a53a:	72fb      	strb	r3, [r7, #11]
      break;
 800a53c:	e021      	b.n	800a582 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	7c1b      	ldrb	r3, [r3, #16]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10d      	bne.n	800a562 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54e:	f107 0208 	add.w	r2, r7, #8
 800a552:	4610      	mov	r0, r2
 800a554:	4798      	blx	r3
 800a556:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3301      	adds	r3, #1
 800a55c:	2207      	movs	r2, #7
 800a55e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a560:	e00f      	b.n	800a582 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f9f7 	bl	800a958 <USBD_CtlError>
        err++;
 800a56a:	7afb      	ldrb	r3, [r7, #11]
 800a56c:	3301      	adds	r3, #1
 800a56e:	72fb      	strb	r3, [r7, #11]
      break;
 800a570:	e007      	b.n	800a582 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a572:	6839      	ldr	r1, [r7, #0]
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f9ef 	bl	800a958 <USBD_CtlError>
      err++;
 800a57a:	7afb      	ldrb	r3, [r7, #11]
 800a57c:	3301      	adds	r3, #1
 800a57e:	72fb      	strb	r3, [r7, #11]
      break;
 800a580:	bf00      	nop
  }

  if (err != 0U)
 800a582:	7afb      	ldrb	r3, [r7, #11]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d11e      	bne.n	800a5c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	88db      	ldrh	r3, [r3, #6]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d016      	beq.n	800a5be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a590:	893b      	ldrh	r3, [r7, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00e      	beq.n	800a5b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	88da      	ldrh	r2, [r3, #6]
 800a59a:	893b      	ldrh	r3, [r7, #8]
 800a59c:	4293      	cmp	r3, r2
 800a59e:	bf28      	it	cs
 800a5a0:	4613      	movcs	r3, r2
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a5a6:	893b      	ldrh	r3, [r7, #8]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	68f9      	ldr	r1, [r7, #12]
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fa44 	bl	800aa3a <USBD_CtlSendData>
 800a5b2:	e009      	b.n	800a5c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f9ce 	bl	800a958 <USBD_CtlError>
 800a5bc:	e004      	b.n	800a5c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fa95 	bl	800aaee <USBD_CtlSendStatus>
 800a5c4:	e000      	b.n	800a5c8 <USBD_GetDescriptor+0x320>
    return;
 800a5c6:	bf00      	nop
  }
}
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop

0800a5d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	889b      	ldrh	r3, [r3, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d131      	bne.n	800a646 <USBD_SetAddress+0x76>
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	88db      	ldrh	r3, [r3, #6]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d12d      	bne.n	800a646 <USBD_SetAddress+0x76>
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	885b      	ldrh	r3, [r3, #2]
 800a5ee:	2b7f      	cmp	r3, #127	; 0x7f
 800a5f0:	d829      	bhi.n	800a646 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	885b      	ldrh	r3, [r3, #2]
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b03      	cmp	r3, #3
 800a608:	d104      	bne.n	800a614 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f9a3 	bl	800a958 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a612:	e01d      	b.n	800a650 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	7bfa      	ldrb	r2, [r7, #15]
 800a618:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	4619      	mov	r1, r3
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 ff1f 	bl	800b464 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fa61 	bl	800aaee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d004      	beq.n	800a63c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2202      	movs	r2, #2
 800a636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a63a:	e009      	b.n	800a650 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a644:	e004      	b.n	800a650 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f985 	bl	800a958 <USBD_CtlError>
  }
}
 800a64e:	bf00      	nop
 800a650:	bf00      	nop
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a662:	2300      	movs	r3, #0
 800a664:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	885b      	ldrh	r3, [r3, #2]
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	4b4c      	ldr	r3, [pc, #304]	; (800a7a0 <USBD_SetConfig+0x148>)
 800a66e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a670:	4b4b      	ldr	r3, [pc, #300]	; (800a7a0 <USBD_SetConfig+0x148>)
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d905      	bls.n	800a684 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a678:	6839      	ldr	r1, [r7, #0]
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f96c 	bl	800a958 <USBD_CtlError>
    return USBD_FAIL;
 800a680:	2303      	movs	r3, #3
 800a682:	e088      	b.n	800a796 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d002      	beq.n	800a696 <USBD_SetConfig+0x3e>
 800a690:	2b03      	cmp	r3, #3
 800a692:	d025      	beq.n	800a6e0 <USBD_SetConfig+0x88>
 800a694:	e071      	b.n	800a77a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a696:	4b42      	ldr	r3, [pc, #264]	; (800a7a0 <USBD_SetConfig+0x148>)
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d01c      	beq.n	800a6d8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a69e:	4b40      	ldr	r3, [pc, #256]	; (800a7a0 <USBD_SetConfig+0x148>)
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a6a8:	4b3d      	ldr	r3, [pc, #244]	; (800a7a0 <USBD_SetConfig+0x148>)
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7ff f992 	bl	80099d8 <USBD_SetClassConfig>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d004      	beq.n	800a6c8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a6be:	6839      	ldr	r1, [r7, #0]
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 f949 	bl	800a958 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a6c6:	e065      	b.n	800a794 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fa10 	bl	800aaee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2203      	movs	r2, #3
 800a6d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a6d6:	e05d      	b.n	800a794 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fa08 	bl	800aaee <USBD_CtlSendStatus>
      break;
 800a6de:	e059      	b.n	800a794 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a6e0:	4b2f      	ldr	r3, [pc, #188]	; (800a7a0 <USBD_SetConfig+0x148>)
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d112      	bne.n	800a70e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a6f0:	4b2b      	ldr	r3, [pc, #172]	; (800a7a0 <USBD_SetConfig+0x148>)
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a6fa:	4b29      	ldr	r3, [pc, #164]	; (800a7a0 <USBD_SetConfig+0x148>)
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	4619      	mov	r1, r3
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7ff f985 	bl	8009a10 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 f9f1 	bl	800aaee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a70c:	e042      	b.n	800a794 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a70e:	4b24      	ldr	r3, [pc, #144]	; (800a7a0 <USBD_SetConfig+0x148>)
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	461a      	mov	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d02a      	beq.n	800a772 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	b2db      	uxtb	r3, r3
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7ff f973 	bl	8009a10 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a72a:	4b1d      	ldr	r3, [pc, #116]	; (800a7a0 <USBD_SetConfig+0x148>)
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a734:	4b1a      	ldr	r3, [pc, #104]	; (800a7a0 <USBD_SetConfig+0x148>)
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	4619      	mov	r1, r3
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f7ff f94c 	bl	80099d8 <USBD_SetClassConfig>
 800a740:	4603      	mov	r3, r0
 800a742:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a744:	7bfb      	ldrb	r3, [r7, #15]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00f      	beq.n	800a76a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f903 	bl	800a958 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	b2db      	uxtb	r3, r3
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7ff f958 	bl	8009a10 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2202      	movs	r2, #2
 800a764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a768:	e014      	b.n	800a794 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 f9bf 	bl	800aaee <USBD_CtlSendStatus>
      break;
 800a770:	e010      	b.n	800a794 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f9bb 	bl	800aaee <USBD_CtlSendStatus>
      break;
 800a778:	e00c      	b.n	800a794 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a77a:	6839      	ldr	r1, [r7, #0]
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 f8eb 	bl	800a958 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a782:	4b07      	ldr	r3, [pc, #28]	; (800a7a0 <USBD_SetConfig+0x148>)
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f7ff f941 	bl	8009a10 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a78e:	2303      	movs	r3, #3
 800a790:	73fb      	strb	r3, [r7, #15]
      break;
 800a792:	bf00      	nop
  }

  return ret;
 800a794:	7bfb      	ldrb	r3, [r7, #15]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	200003e4 	.word	0x200003e4

0800a7a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	88db      	ldrh	r3, [r3, #6]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d004      	beq.n	800a7c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f8cd 	bl	800a958 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a7be:	e023      	b.n	800a808 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	dc02      	bgt.n	800a7d2 <USBD_GetConfig+0x2e>
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	dc03      	bgt.n	800a7d8 <USBD_GetConfig+0x34>
 800a7d0:	e015      	b.n	800a7fe <USBD_GetConfig+0x5a>
 800a7d2:	2b03      	cmp	r3, #3
 800a7d4:	d00b      	beq.n	800a7ee <USBD_GetConfig+0x4a>
 800a7d6:	e012      	b.n	800a7fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	3308      	adds	r3, #8
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 f927 	bl	800aa3a <USBD_CtlSendData>
        break;
 800a7ec:	e00c      	b.n	800a808 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f91f 	bl	800aa3a <USBD_CtlSendData>
        break;
 800a7fc:	e004      	b.n	800a808 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f8a9 	bl	800a958 <USBD_CtlError>
        break;
 800a806:	bf00      	nop
}
 800a808:	bf00      	nop
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a820:	b2db      	uxtb	r3, r3
 800a822:	3b01      	subs	r3, #1
 800a824:	2b02      	cmp	r3, #2
 800a826:	d81e      	bhi.n	800a866 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	88db      	ldrh	r3, [r3, #6]
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d004      	beq.n	800a83a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a830:	6839      	ldr	r1, [r7, #0]
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f890 	bl	800a958 <USBD_CtlError>
        break;
 800a838:	e01a      	b.n	800a870 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2201      	movs	r2, #1
 800a83e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a846:	2b00      	cmp	r3, #0
 800a848:	d005      	beq.n	800a856 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	f043 0202 	orr.w	r2, r3, #2
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	330c      	adds	r3, #12
 800a85a:	2202      	movs	r2, #2
 800a85c:	4619      	mov	r1, r3
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f8eb 	bl	800aa3a <USBD_CtlSendData>
      break;
 800a864:	e004      	b.n	800a870 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a866:	6839      	ldr	r1, [r7, #0]
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 f875 	bl	800a958 <USBD_CtlError>
      break;
 800a86e:	bf00      	nop
  }
}
 800a870:	bf00      	nop
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	885b      	ldrh	r3, [r3, #2]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d106      	bne.n	800a898 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f92b 	bl	800aaee <USBD_CtlSendStatus>
  }
}
 800a898:	bf00      	nop
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d80b      	bhi.n	800a8d0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	885b      	ldrh	r3, [r3, #2]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d10c      	bne.n	800a8da <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f910 	bl	800aaee <USBD_CtlSendStatus>
      }
      break;
 800a8ce:	e004      	b.n	800a8da <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f840 	bl	800a958 <USBD_CtlError>
      break;
 800a8d8:	e000      	b.n	800a8dc <USBD_ClrFeature+0x3c>
      break;
 800a8da:	bf00      	nop
  }
}
 800a8dc:	bf00      	nop
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	781a      	ldrb	r2, [r3, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	781a      	ldrb	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	3301      	adds	r3, #1
 800a90c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f7ff fa92 	bl	8009e38 <SWAPBYTE>
 800a914:	4603      	mov	r3, r0
 800a916:	461a      	mov	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	3301      	adds	r3, #1
 800a920:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	3301      	adds	r3, #1
 800a926:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f7ff fa85 	bl	8009e38 <SWAPBYTE>
 800a92e:	4603      	mov	r3, r0
 800a930:	461a      	mov	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	3301      	adds	r3, #1
 800a93a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	3301      	adds	r3, #1
 800a940:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f7ff fa78 	bl	8009e38 <SWAPBYTE>
 800a948:	4603      	mov	r3, r0
 800a94a:	461a      	mov	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	80da      	strh	r2, [r3, #6]
}
 800a950:	bf00      	nop
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a962:	2180      	movs	r1, #128	; 0x80
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fd13 	bl	800b390 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a96a:	2100      	movs	r1, #0
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fd0f 	bl	800b390 <USBD_LL_StallEP>
}
 800a972:	bf00      	nop
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b086      	sub	sp, #24
 800a97e:	af00      	add	r7, sp, #0
 800a980:	60f8      	str	r0, [r7, #12]
 800a982:	60b9      	str	r1, [r7, #8]
 800a984:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a986:	2300      	movs	r3, #0
 800a988:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d036      	beq.n	800a9fe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a994:	6938      	ldr	r0, [r7, #16]
 800a996:	f000 f836 	bl	800aa06 <USBD_GetLen>
 800a99a:	4603      	mov	r3, r0
 800a99c:	3301      	adds	r3, #1
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	005b      	lsls	r3, r3, #1
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a9a8:	7dfb      	ldrb	r3, [r7, #23]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	7812      	ldrb	r2, [r2, #0]
 800a9b2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a9b4:	7dfb      	ldrb	r3, [r7, #23]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a9ba:	7dfb      	ldrb	r3, [r7, #23]
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	4413      	add	r3, r2
 800a9c0:	2203      	movs	r2, #3
 800a9c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a9c4:	7dfb      	ldrb	r3, [r7, #23]
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a9ca:	e013      	b.n	800a9f4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a9cc:	7dfb      	ldrb	r3, [r7, #23]
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	693a      	ldr	r2, [r7, #16]
 800a9d4:	7812      	ldrb	r2, [r2, #0]
 800a9d6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	613b      	str	r3, [r7, #16]
    idx++;
 800a9de:	7dfb      	ldrb	r3, [r7, #23]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a9e4:	7dfb      	ldrb	r3, [r7, #23]
 800a9e6:	68ba      	ldr	r2, [r7, #8]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	701a      	strb	r2, [r3, #0]
    idx++;
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1e7      	bne.n	800a9cc <USBD_GetString+0x52>
 800a9fc:	e000      	b.n	800aa00 <USBD_GetString+0x86>
    return;
 800a9fe:	bf00      	nop
  }
}
 800aa00:	3718      	adds	r7, #24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b085      	sub	sp, #20
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aa16:	e005      	b.n	800aa24 <USBD_GetLen+0x1e>
  {
    len++;
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	3301      	adds	r3, #1
 800aa22:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1f5      	bne.n	800aa18 <USBD_GetLen+0x12>
  }

  return len;
 800aa2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3714      	adds	r7, #20
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	60f8      	str	r0, [r7, #12]
 800aa42:	60b9      	str	r1, [r7, #8]
 800aa44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2202      	movs	r2, #2
 800aa4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	2100      	movs	r1, #0
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f000 fd1e 	bl	800b4a2 <USBD_LL_Transmit>

  return USBD_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	2100      	movs	r1, #0
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f000 fd0d 	bl	800b4a2 <USBD_LL_Transmit>

  return USBD_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	60f8      	str	r0, [r7, #12]
 800aa9a:	60b9      	str	r1, [r7, #8]
 800aa9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2203      	movs	r2, #3
 800aaa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	2100      	movs	r1, #0
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f000 fd11 	bl	800b4e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	2100      	movs	r1, #0
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f000 fd00 	bl	800b4e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b082      	sub	sp, #8
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2204      	movs	r2, #4
 800aafa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aafe:	2300      	movs	r3, #0
 800ab00:	2200      	movs	r2, #0
 800ab02:	2100      	movs	r1, #0
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fccc 	bl	800b4a2 <USBD_LL_Transmit>

  return USBD_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2205      	movs	r2, #5
 800ab20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab24:	2300      	movs	r3, #0
 800ab26:	2200      	movs	r2, #0
 800ab28:	2100      	movs	r1, #0
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 fcda 	bl	800b4e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
	...

0800ab3c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ab40:	2200      	movs	r2, #0
 800ab42:	4912      	ldr	r1, [pc, #72]	; (800ab8c <MX_USB_Device_Init+0x50>)
 800ab44:	4812      	ldr	r0, [pc, #72]	; (800ab90 <MX_USB_Device_Init+0x54>)
 800ab46:	f7fe fed9 	bl	80098fc <USBD_Init>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d001      	beq.n	800ab54 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ab50:	f7f5 fe22 	bl	8000798 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ab54:	490f      	ldr	r1, [pc, #60]	; (800ab94 <MX_USB_Device_Init+0x58>)
 800ab56:	480e      	ldr	r0, [pc, #56]	; (800ab90 <MX_USB_Device_Init+0x54>)
 800ab58:	f7fe ff00 	bl	800995c <USBD_RegisterClass>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800ab62:	f7f5 fe19 	bl	8000798 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ab66:	490c      	ldr	r1, [pc, #48]	; (800ab98 <MX_USB_Device_Init+0x5c>)
 800ab68:	4809      	ldr	r0, [pc, #36]	; (800ab90 <MX_USB_Device_Init+0x54>)
 800ab6a:	f7fe fe51 	bl	8009810 <USBD_CDC_RegisterInterface>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d001      	beq.n	800ab78 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800ab74:	f7f5 fe10 	bl	8000798 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ab78:	4805      	ldr	r0, [pc, #20]	; (800ab90 <MX_USB_Device_Init+0x54>)
 800ab7a:	f7fe ff16 	bl	80099aa <USBD_Start>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d001      	beq.n	800ab88 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800ab84:	f7f5 fe08 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ab88:	bf00      	nop
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	20000138 	.word	0x20000138
 800ab90:	200003e8 	.word	0x200003e8
 800ab94:	20000018 	.word	0x20000018
 800ab98:	20000124 	.word	0x20000124

0800ab9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aba0:	2200      	movs	r2, #0
 800aba2:	4905      	ldr	r1, [pc, #20]	; (800abb8 <CDC_Init_FS+0x1c>)
 800aba4:	4805      	ldr	r0, [pc, #20]	; (800abbc <CDC_Init_FS+0x20>)
 800aba6:	f7fe fe48 	bl	800983a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800abaa:	4905      	ldr	r1, [pc, #20]	; (800abc0 <CDC_Init_FS+0x24>)
 800abac:	4803      	ldr	r0, [pc, #12]	; (800abbc <CDC_Init_FS+0x20>)
 800abae:	f7fe fe62 	bl	8009876 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800abb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	20001ee4 	.word	0x20001ee4
 800abbc:	200003e8 	.word	0x200003e8
 800abc0:	200016e4 	.word	0x200016e4

0800abc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800abc4:	b480      	push	{r7}
 800abc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800abc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800abca:	4618      	mov	r0, r3
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	4603      	mov	r3, r0
 800abdc:	6039      	str	r1, [r7, #0]
 800abde:	71fb      	strb	r3, [r7, #7]
 800abe0:	4613      	mov	r3, r2
 800abe2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	60fb      	str	r3, [r7, #12]

  switch(cmd)
 800abe8:	79fb      	ldrb	r3, [r7, #7]
 800abea:	2b23      	cmp	r3, #35	; 0x23
 800abec:	f200 80af 	bhi.w	800ad4e <CDC_Control_FS+0x17a>
 800abf0:	a201      	add	r2, pc, #4	; (adr r2, 800abf8 <CDC_Control_FS+0x24>)
 800abf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf6:	bf00      	nop
 800abf8:	0800ad4f 	.word	0x0800ad4f
 800abfc:	0800ad4f 	.word	0x0800ad4f
 800ac00:	0800ad4f 	.word	0x0800ad4f
 800ac04:	0800ad4f 	.word	0x0800ad4f
 800ac08:	0800ad4f 	.word	0x0800ad4f
 800ac0c:	0800ad4f 	.word	0x0800ad4f
 800ac10:	0800ad4f 	.word	0x0800ad4f
 800ac14:	0800ad4f 	.word	0x0800ad4f
 800ac18:	0800ad4f 	.word	0x0800ad4f
 800ac1c:	0800ad4f 	.word	0x0800ad4f
 800ac20:	0800ad4f 	.word	0x0800ad4f
 800ac24:	0800ad4f 	.word	0x0800ad4f
 800ac28:	0800ad4f 	.word	0x0800ad4f
 800ac2c:	0800ad4f 	.word	0x0800ad4f
 800ac30:	0800ad4f 	.word	0x0800ad4f
 800ac34:	0800ad4f 	.word	0x0800ad4f
 800ac38:	0800ad4f 	.word	0x0800ad4f
 800ac3c:	0800ad4f 	.word	0x0800ad4f
 800ac40:	0800ad4f 	.word	0x0800ad4f
 800ac44:	0800ad4f 	.word	0x0800ad4f
 800ac48:	0800ad4f 	.word	0x0800ad4f
 800ac4c:	0800ad4f 	.word	0x0800ad4f
 800ac50:	0800ad4f 	.word	0x0800ad4f
 800ac54:	0800ad4f 	.word	0x0800ad4f
 800ac58:	0800ad4f 	.word	0x0800ad4f
 800ac5c:	0800ad4f 	.word	0x0800ad4f
 800ac60:	0800ad4f 	.word	0x0800ad4f
 800ac64:	0800ad4f 	.word	0x0800ad4f
 800ac68:	0800ad4f 	.word	0x0800ad4f
 800ac6c:	0800ad4f 	.word	0x0800ad4f
 800ac70:	0800ad4f 	.word	0x0800ad4f
 800ac74:	0800ad4f 	.word	0x0800ad4f
 800ac78:	0800ac89 	.word	0x0800ac89
 800ac7c:	0800ace3 	.word	0x0800ace3
 800ac80:	0800ad37 	.word	0x0800ad37
 800ac84:	0800ad4f 	.word	0x0800ad4f
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	4b34      	ldr	r3, [pc, #208]	; (800ad60 <CDC_Control_FS+0x18c>)
 800ac90:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 800ac92:	4b33      	ldr	r3, [pc, #204]	; (800ad60 <CDC_Control_FS+0x18c>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	3201      	adds	r2, #1
 800ac9a:	7812      	ldrb	r2, [r2, #0]
 800ac9c:	0212      	lsls	r2, r2, #8
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	4a2f      	ldr	r2, [pc, #188]	; (800ad60 <CDC_Control_FS+0x18c>)
 800aca2:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 800aca4:	4b2e      	ldr	r3, [pc, #184]	; (800ad60 <CDC_Control_FS+0x18c>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	683a      	ldr	r2, [r7, #0]
 800acaa:	3202      	adds	r2, #2
 800acac:	7812      	ldrb	r2, [r2, #0]
 800acae:	0412      	lsls	r2, r2, #16
 800acb0:	4313      	orrs	r3, r2
 800acb2:	4a2b      	ldr	r2, [pc, #172]	; (800ad60 <CDC_Control_FS+0x18c>)
 800acb4:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 800acb6:	4b2a      	ldr	r3, [pc, #168]	; (800ad60 <CDC_Control_FS+0x18c>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	683a      	ldr	r2, [r7, #0]
 800acbc:	3203      	adds	r2, #3
 800acbe:	7812      	ldrb	r2, [r2, #0]
 800acc0:	0612      	lsls	r2, r2, #24
 800acc2:	4313      	orrs	r3, r2
 800acc4:	4a26      	ldr	r2, [pc, #152]	; (800ad60 <CDC_Control_FS+0x18c>)
 800acc6:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	791a      	ldrb	r2, [r3, #4]
 800accc:	4b24      	ldr	r3, [pc, #144]	; (800ad60 <CDC_Control_FS+0x18c>)
 800acce:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	795a      	ldrb	r2, [r3, #5]
 800acd4:	4b22      	ldr	r3, [pc, #136]	; (800ad60 <CDC_Control_FS+0x18c>)
 800acd6:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	799a      	ldrb	r2, [r3, #6]
 800acdc:	4b20      	ldr	r3, [pc, #128]	; (800ad60 <CDC_Control_FS+0x18c>)
 800acde:	719a      	strb	r2, [r3, #6]

    break;
 800ace0:	e036      	b.n	800ad50 <CDC_Control_FS+0x17c>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800ace2:	4b1f      	ldr	r3, [pc, #124]	; (800ad60 <CDC_Control_FS+0x18c>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 800acec:	4b1c      	ldr	r3, [pc, #112]	; (800ad60 <CDC_Control_FS+0x18c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	0a1a      	lsrs	r2, r3, #8
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	3301      	adds	r3, #1
 800acf6:	b2d2      	uxtb	r2, r2
 800acf8:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 800acfa:	4b19      	ldr	r3, [pc, #100]	; (800ad60 <CDC_Control_FS+0x18c>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	0c1a      	lsrs	r2, r3, #16
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	3302      	adds	r3, #2
 800ad04:	b2d2      	uxtb	r2, r2
 800ad06:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 800ad08:	4b15      	ldr	r3, [pc, #84]	; (800ad60 <CDC_Control_FS+0x18c>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	0e1a      	lsrs	r2, r3, #24
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	3303      	adds	r3, #3
 800ad12:	b2d2      	uxtb	r2, r2
 800ad14:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	3304      	adds	r3, #4
 800ad1a:	4a11      	ldr	r2, [pc, #68]	; (800ad60 <CDC_Control_FS+0x18c>)
 800ad1c:	7912      	ldrb	r2, [r2, #4]
 800ad1e:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	3305      	adds	r3, #5
 800ad24:	4a0e      	ldr	r2, [pc, #56]	; (800ad60 <CDC_Control_FS+0x18c>)
 800ad26:	7952      	ldrb	r2, [r2, #5]
 800ad28:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	3306      	adds	r3, #6
 800ad2e:	4a0c      	ldr	r2, [pc, #48]	; (800ad60 <CDC_Control_FS+0x18c>)
 800ad30:	7992      	ldrb	r2, [r2, #6]
 800ad32:	701a      	strb	r2, [r3, #0]

    break;
 800ad34:	e00c      	b.n	800ad50 <CDC_Control_FS+0x17c>

    case CDC_SET_CONTROL_LINE_STATE:
      is_opened = req->wValue & 0x01;   // 0 bit: DTR, 1 bit: RTS
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	885b      	ldrh	r3, [r3, #2]
 800ad3a:	f003 0301 	and.w	r3, r3, #1
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	bf14      	ite	ne
 800ad42:	2301      	movne	r3, #1
 800ad44:	2300      	moveq	r3, #0
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	4b06      	ldr	r3, [pc, #24]	; (800ad64 <CDC_Control_FS+0x190>)
 800ad4a:	701a      	strb	r2, [r3, #0]

    break;
 800ad4c:	e000      	b.n	800ad50 <CDC_Control_FS+0x17c>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ad4e:	bf00      	nop
  }

  return (USBD_OK);
 800ad50:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3714      	adds	r7, #20
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	2000011c 	.word	0x2000011c
 800ad64:	200016e0 	.word	0x200016e0

0800ad68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ad68:	b590      	push	{r4, r7, lr}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  qbufferWrite(&q_rx, Buf, *Len);
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	461a      	mov	r2, r3
 800ad78:	6879      	ldr	r1, [r7, #4]
 800ad7a:	480f      	ldr	r0, [pc, #60]	; (800adb8 <CDC_Receive_FS+0x50>)
 800ad7c:	f7f5 fe05 	bl	800098a <qbufferWrite>


  uint32_t buf_len;

  buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 800ad80:	4b0d      	ldr	r3, [pc, #52]	; (800adb8 <CDC_Receive_FS+0x50>)
 800ad82:	689c      	ldr	r4, [r3, #8]
 800ad84:	480c      	ldr	r0, [pc, #48]	; (800adb8 <CDC_Receive_FS+0x50>)
 800ad86:	f7f5 feb4 	bl	8000af2 <qbufferAvailable>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	1ae3      	subs	r3, r4, r3
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	60fb      	str	r3, [r7, #12]

  if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b3f      	cmp	r3, #63	; 0x3f
 800ad96:	d907      	bls.n	800ada8 <CDC_Receive_FS+0x40>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ad98:	6879      	ldr	r1, [r7, #4]
 800ad9a:	4808      	ldr	r0, [pc, #32]	; (800adbc <CDC_Receive_FS+0x54>)
 800ad9c:	f7fe fd6b 	bl	8009876 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ada0:	4806      	ldr	r0, [pc, #24]	; (800adbc <CDC_Receive_FS+0x54>)
 800ada2:	f7fe fd81 	bl	80098a8 <USBD_CDC_ReceivePacket>
 800ada6:	e002      	b.n	800adae <CDC_Receive_FS+0x46>
  }
  else
  {
    is_rx_full = true;
 800ada8:	4b05      	ldr	r3, [pc, #20]	; (800adc0 <CDC_Receive_FS+0x58>)
 800adaa:	2201      	movs	r2, #1
 800adac:	701a      	strb	r2, [r3, #0]
  }

    return (USBD_OK);
 800adae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd90      	pop	{r4, r7, pc}
 800adb8:	200006b8 	.word	0x200006b8
 800adbc:	200003e8 	.word	0x200003e8
 800adc0:	200016e1 	.word	0x200016e1

0800adc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b087      	sub	sp, #28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	4613      	mov	r3, r2
 800add0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800add6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800adda:	4618      	mov	r0, r3
 800addc:	371c      	adds	r7, #28
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
	...

0800ade8 <cdcIfInit>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool cdcIfInit(void)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	af00      	add	r7, sp, #0
  is_opened = false;
 800adec:	4b08      	ldr	r3, [pc, #32]	; (800ae10 <cdcIfInit+0x28>)
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]
  qbufferCreate(&q_rx, q_rx_buf, 2048);
 800adf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adf6:	4907      	ldr	r1, [pc, #28]	; (800ae14 <cdcIfInit+0x2c>)
 800adf8:	4807      	ldr	r0, [pc, #28]	; (800ae18 <cdcIfInit+0x30>)
 800adfa:	f7f5 fda8 	bl	800094e <qbufferCreate>
  qbufferCreate(&q_tx, q_tx_buf, 2048);
 800adfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae02:	4906      	ldr	r1, [pc, #24]	; (800ae1c <cdcIfInit+0x34>)
 800ae04:	4806      	ldr	r0, [pc, #24]	; (800ae20 <cdcIfInit+0x38>)
 800ae06:	f7f5 fda2 	bl	800094e <qbufferCreate>

  return true;
 800ae0a:	2301      	movs	r3, #1
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	200016e0 	.word	0x200016e0
 800ae14:	200006e0 	.word	0x200006e0
 800ae18:	200006b8 	.word	0x200006b8
 800ae1c:	20000ee0 	.word	0x20000ee0
 800ae20:	200006cc 	.word	0x200006cc

0800ae24 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	6039      	str	r1, [r7, #0]
 800ae2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	2212      	movs	r2, #18
 800ae34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ae36:	4b03      	ldr	r3, [pc, #12]	; (800ae44 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr
 800ae44:	20000158 	.word	0x20000158

0800ae48 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	4603      	mov	r3, r0
 800ae50:	6039      	str	r1, [r7, #0]
 800ae52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2204      	movs	r2, #4
 800ae58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ae5a:	4b03      	ldr	r3, [pc, #12]	; (800ae68 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr
 800ae68:	2000016c 	.word	0x2000016c

0800ae6c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	6039      	str	r1, [r7, #0]
 800ae76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae78:	79fb      	ldrb	r3, [r7, #7]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d105      	bne.n	800ae8a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	4907      	ldr	r1, [pc, #28]	; (800aea0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ae82:	4808      	ldr	r0, [pc, #32]	; (800aea4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ae84:	f7ff fd79 	bl	800a97a <USBD_GetString>
 800ae88:	e004      	b.n	800ae94 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	4904      	ldr	r1, [pc, #16]	; (800aea0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ae8e:	4805      	ldr	r0, [pc, #20]	; (800aea4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ae90:	f7ff fd73 	bl	800a97a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae94:	4b02      	ldr	r3, [pc, #8]	; (800aea0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	200026e4 	.word	0x200026e4
 800aea4:	0800c004 	.word	0x0800c004

0800aea8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	4603      	mov	r3, r0
 800aeb0:	6039      	str	r1, [r7, #0]
 800aeb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	4904      	ldr	r1, [pc, #16]	; (800aec8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800aeb8:	4804      	ldr	r0, [pc, #16]	; (800aecc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800aeba:	f7ff fd5e 	bl	800a97a <USBD_GetString>
  return USBD_StrDesc;
 800aebe:	4b02      	ldr	r3, [pc, #8]	; (800aec8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	200026e4 	.word	0x200026e4
 800aecc:	0800c01c 	.word	0x0800c01c

0800aed0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	4603      	mov	r3, r0
 800aed8:	6039      	str	r1, [r7, #0]
 800aeda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	221a      	movs	r2, #26
 800aee0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aee2:	f000 f843 	bl	800af6c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800aee6:	4b02      	ldr	r3, [pc, #8]	; (800aef0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	20000170 	.word	0x20000170

0800aef4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	4603      	mov	r3, r0
 800aefc:	6039      	str	r1, [r7, #0]
 800aefe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800af00:	79fb      	ldrb	r3, [r7, #7]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d105      	bne.n	800af12 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800af06:	683a      	ldr	r2, [r7, #0]
 800af08:	4907      	ldr	r1, [pc, #28]	; (800af28 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800af0a:	4808      	ldr	r0, [pc, #32]	; (800af2c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800af0c:	f7ff fd35 	bl	800a97a <USBD_GetString>
 800af10:	e004      	b.n	800af1c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800af12:	683a      	ldr	r2, [r7, #0]
 800af14:	4904      	ldr	r1, [pc, #16]	; (800af28 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800af16:	4805      	ldr	r0, [pc, #20]	; (800af2c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800af18:	f7ff fd2f 	bl	800a97a <USBD_GetString>
  }
  return USBD_StrDesc;
 800af1c:	4b02      	ldr	r3, [pc, #8]	; (800af28 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	200026e4 	.word	0x200026e4
 800af2c:	0800c030 	.word	0x0800c030

0800af30 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	4603      	mov	r3, r0
 800af38:	6039      	str	r1, [r7, #0]
 800af3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af3c:	79fb      	ldrb	r3, [r7, #7]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d105      	bne.n	800af4e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	4907      	ldr	r1, [pc, #28]	; (800af64 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800af46:	4808      	ldr	r0, [pc, #32]	; (800af68 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800af48:	f7ff fd17 	bl	800a97a <USBD_GetString>
 800af4c:	e004      	b.n	800af58 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	4904      	ldr	r1, [pc, #16]	; (800af64 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800af52:	4805      	ldr	r0, [pc, #20]	; (800af68 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800af54:	f7ff fd11 	bl	800a97a <USBD_GetString>
  }
  return USBD_StrDesc;
 800af58:	4b02      	ldr	r3, [pc, #8]	; (800af64 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	200026e4 	.word	0x200026e4
 800af68:	0800c03c 	.word	0x0800c03c

0800af6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800af72:	4b0f      	ldr	r3, [pc, #60]	; (800afb0 <Get_SerialNum+0x44>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800af78:	4b0e      	ldr	r3, [pc, #56]	; (800afb4 <Get_SerialNum+0x48>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800af7e:	4b0e      	ldr	r3, [pc, #56]	; (800afb8 <Get_SerialNum+0x4c>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4413      	add	r3, r2
 800af8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d009      	beq.n	800afa6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800af92:	2208      	movs	r2, #8
 800af94:	4909      	ldr	r1, [pc, #36]	; (800afbc <Get_SerialNum+0x50>)
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f000 f814 	bl	800afc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800af9c:	2204      	movs	r2, #4
 800af9e:	4908      	ldr	r1, [pc, #32]	; (800afc0 <Get_SerialNum+0x54>)
 800afa0:	68b8      	ldr	r0, [r7, #8]
 800afa2:	f000 f80f 	bl	800afc4 <IntToUnicode>
  }
}
 800afa6:	bf00      	nop
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	1fff7590 	.word	0x1fff7590
 800afb4:	1fff7594 	.word	0x1fff7594
 800afb8:	1fff7598 	.word	0x1fff7598
 800afbc:	20000172 	.word	0x20000172
 800afc0:	20000182 	.word	0x20000182

0800afc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b087      	sub	sp, #28
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	4613      	mov	r3, r2
 800afd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800afd6:	2300      	movs	r3, #0
 800afd8:	75fb      	strb	r3, [r7, #23]
 800afda:	e027      	b.n	800b02c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	0f1b      	lsrs	r3, r3, #28
 800afe0:	2b09      	cmp	r3, #9
 800afe2:	d80b      	bhi.n	800affc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	0f1b      	lsrs	r3, r3, #28
 800afe8:	b2da      	uxtb	r2, r3
 800afea:	7dfb      	ldrb	r3, [r7, #23]
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	4619      	mov	r1, r3
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	440b      	add	r3, r1
 800aff4:	3230      	adds	r2, #48	; 0x30
 800aff6:	b2d2      	uxtb	r2, r2
 800aff8:	701a      	strb	r2, [r3, #0]
 800affa:	e00a      	b.n	800b012 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	0f1b      	lsrs	r3, r3, #28
 800b000:	b2da      	uxtb	r2, r3
 800b002:	7dfb      	ldrb	r3, [r7, #23]
 800b004:	005b      	lsls	r3, r3, #1
 800b006:	4619      	mov	r1, r3
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	440b      	add	r3, r1
 800b00c:	3237      	adds	r2, #55	; 0x37
 800b00e:	b2d2      	uxtb	r2, r2
 800b010:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	011b      	lsls	r3, r3, #4
 800b016:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b018:	7dfb      	ldrb	r3, [r7, #23]
 800b01a:	005b      	lsls	r3, r3, #1
 800b01c:	3301      	adds	r3, #1
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	4413      	add	r3, r2
 800b022:	2200      	movs	r2, #0
 800b024:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b026:	7dfb      	ldrb	r3, [r7, #23]
 800b028:	3301      	adds	r3, #1
 800b02a:	75fb      	strb	r3, [r7, #23]
 800b02c:	7dfa      	ldrb	r2, [r7, #23]
 800b02e:	79fb      	ldrb	r3, [r7, #7]
 800b030:	429a      	cmp	r2, r3
 800b032:	d3d3      	bcc.n	800afdc <IntToUnicode+0x18>
  }
}
 800b034:	bf00      	nop
 800b036:	bf00      	nop
 800b038:	371c      	adds	r7, #28
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
	...

0800b044 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b098      	sub	sp, #96	; 0x60
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b04c:	f107 030c 	add.w	r3, r7, #12
 800b050:	2254      	movs	r2, #84	; 0x54
 800b052:	2100      	movs	r1, #0
 800b054:	4618      	mov	r0, r3
 800b056:	f000 fb3d 	bl	800b6d4 <memset>
  if(pcdHandle->Instance==USB)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a15      	ldr	r2, [pc, #84]	; (800b0b4 <HAL_PCD_MspInit+0x70>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d123      	bne.n	800b0ac <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b068:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800b06a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b06e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b070:	f107 030c 	add.w	r3, r7, #12
 800b074:	4618      	mov	r0, r3
 800b076:	f7f9 f915 	bl	80042a4 <HAL_RCCEx_PeriphCLKConfig>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d001      	beq.n	800b084 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800b080:	f7f5 fb8a 	bl	8000798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b084:	4b0c      	ldr	r3, [pc, #48]	; (800b0b8 <HAL_PCD_MspInit+0x74>)
 800b086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b088:	4a0b      	ldr	r2, [pc, #44]	; (800b0b8 <HAL_PCD_MspInit+0x74>)
 800b08a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b08e:	6593      	str	r3, [r2, #88]	; 0x58
 800b090:	4b09      	ldr	r3, [pc, #36]	; (800b0b8 <HAL_PCD_MspInit+0x74>)
 800b092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b098:	60bb      	str	r3, [r7, #8]
 800b09a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b09c:	2200      	movs	r2, #0
 800b09e:	2100      	movs	r1, #0
 800b0a0:	2014      	movs	r0, #20
 800b0a2:	f7f6 fad8 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b0a6:	2014      	movs	r0, #20
 800b0a8:	f7f6 faef 	bl	800168a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b0ac:	bf00      	nop
 800b0ae:	3760      	adds	r7, #96	; 0x60
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	40005c00 	.word	0x40005c00
 800b0b8:	40021000 	.word	0x40021000

0800b0bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	4610      	mov	r0, r2
 800b0d4:	f7fe fcb4 	bl	8009a40 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b0d8:	bf00      	nop
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b0f2:	78fa      	ldrb	r2, [r7, #3]
 800b0f4:	6879      	ldr	r1, [r7, #4]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	4413      	add	r3, r2
 800b0fc:	00db      	lsls	r3, r3, #3
 800b0fe:	440b      	add	r3, r1
 800b100:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	78fb      	ldrb	r3, [r7, #3]
 800b108:	4619      	mov	r1, r3
 800b10a:	f7fe fcee 	bl	8009aea <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b10e:	bf00      	nop
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b082      	sub	sp, #8
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
 800b11e:	460b      	mov	r3, r1
 800b120:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b128:	78fa      	ldrb	r2, [r7, #3]
 800b12a:	6879      	ldr	r1, [r7, #4]
 800b12c:	4613      	mov	r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	00db      	lsls	r3, r3, #3
 800b134:	440b      	add	r3, r1
 800b136:	3324      	adds	r3, #36	; 0x24
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	78fb      	ldrb	r3, [r7, #3]
 800b13c:	4619      	mov	r1, r3
 800b13e:	f7fe fd37 	bl	8009bb0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b142:	bf00      	nop
 800b144:	3708      	adds	r7, #8
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b082      	sub	sp, #8
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b158:	4618      	mov	r0, r3
 800b15a:	f7fe fe4b 	bl	8009df4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b15e:	bf00      	nop
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b084      	sub	sp, #16
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b16e:	2301      	movs	r3, #1
 800b170:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	795b      	ldrb	r3, [r3, #5]
 800b176:	2b02      	cmp	r3, #2
 800b178:	d001      	beq.n	800b17e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b17a:	f7f5 fb0d 	bl	8000798 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b184:	7bfa      	ldrb	r2, [r7, #15]
 800b186:	4611      	mov	r1, r2
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fe fdf5 	bl	8009d78 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b194:	4618      	mov	r0, r3
 800b196:	f7fe fda1 	bl	8009cdc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b19a:	bf00      	nop
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
	...

0800b1a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fe fdf0 	bl	8009d98 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	7a5b      	ldrb	r3, [r3, #9]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d005      	beq.n	800b1cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1c0:	4b04      	ldr	r3, [pc, #16]	; (800b1d4 <HAL_PCD_SuspendCallback+0x30>)
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	4a03      	ldr	r2, [pc, #12]	; (800b1d4 <HAL_PCD_SuspendCallback+0x30>)
 800b1c6:	f043 0306 	orr.w	r3, r3, #6
 800b1ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b1cc:	bf00      	nop
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	e000ed00 	.word	0xe000ed00

0800b1d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	7a5b      	ldrb	r3, [r3, #9]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d007      	beq.n	800b1f8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1e8:	4b08      	ldr	r3, [pc, #32]	; (800b20c <HAL_PCD_ResumeCallback+0x34>)
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	4a07      	ldr	r2, [pc, #28]	; (800b20c <HAL_PCD_ResumeCallback+0x34>)
 800b1ee:	f023 0306 	bic.w	r3, r3, #6
 800b1f2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b1f4:	f000 f9f8 	bl	800b5e8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fe fde0 	bl	8009dc4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b204:	bf00      	nop
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	e000ed00 	.word	0xe000ed00

0800b210 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b218:	4a2b      	ldr	r2, [pc, #172]	; (800b2c8 <USBD_LL_Init+0xb8>)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	4a29      	ldr	r2, [pc, #164]	; (800b2c8 <USBD_LL_Init+0xb8>)
 800b224:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b228:	4b27      	ldr	r3, [pc, #156]	; (800b2c8 <USBD_LL_Init+0xb8>)
 800b22a:	4a28      	ldr	r2, [pc, #160]	; (800b2cc <USBD_LL_Init+0xbc>)
 800b22c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b22e:	4b26      	ldr	r3, [pc, #152]	; (800b2c8 <USBD_LL_Init+0xb8>)
 800b230:	2208      	movs	r2, #8
 800b232:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b234:	4b24      	ldr	r3, [pc, #144]	; (800b2c8 <USBD_LL_Init+0xb8>)
 800b236:	2202      	movs	r2, #2
 800b238:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b23a:	4b23      	ldr	r3, [pc, #140]	; (800b2c8 <USBD_LL_Init+0xb8>)
 800b23c:	2202      	movs	r2, #2
 800b23e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b240:	4b21      	ldr	r3, [pc, #132]	; (800b2c8 <USBD_LL_Init+0xb8>)
 800b242:	2200      	movs	r2, #0
 800b244:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b246:	4b20      	ldr	r3, [pc, #128]	; (800b2c8 <USBD_LL_Init+0xb8>)
 800b248:	2200      	movs	r2, #0
 800b24a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b24c:	4b1e      	ldr	r3, [pc, #120]	; (800b2c8 <USBD_LL_Init+0xb8>)
 800b24e:	2200      	movs	r2, #0
 800b250:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b252:	4b1d      	ldr	r3, [pc, #116]	; (800b2c8 <USBD_LL_Init+0xb8>)
 800b254:	2200      	movs	r2, #0
 800b256:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b258:	481b      	ldr	r0, [pc, #108]	; (800b2c8 <USBD_LL_Init+0xb8>)
 800b25a:	f7f6 fc8b 	bl	8001b74 <HAL_PCD_Init>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b264:	f7f5 fa98 	bl	8000798 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b26e:	2318      	movs	r3, #24
 800b270:	2200      	movs	r2, #0
 800b272:	2100      	movs	r1, #0
 800b274:	f7f8 f945 	bl	8003502 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b27e:	2358      	movs	r3, #88	; 0x58
 800b280:	2200      	movs	r2, #0
 800b282:	2180      	movs	r1, #128	; 0x80
 800b284:	f7f8 f93d 	bl	8003502 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b28e:	23c0      	movs	r3, #192	; 0xc0
 800b290:	2200      	movs	r2, #0
 800b292:	2181      	movs	r1, #129	; 0x81
 800b294:	f7f8 f935 	bl	8003502 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b29e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	2101      	movs	r1, #1
 800b2a6:	f7f8 f92c 	bl	8003502 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b2b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	2182      	movs	r1, #130	; 0x82
 800b2b8:	f7f8 f923 	bl	8003502 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	200028e4 	.word	0x200028e4
 800b2cc:	40005c00 	.word	0x40005c00

0800b2d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7f6 fd12 	bl	8001d10 <HAL_PCD_Start>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f000 f97e 	bl	800b5f4 <USBD_Get_USB_Status>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b084      	sub	sp, #16
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	4608      	mov	r0, r1
 800b310:	4611      	mov	r1, r2
 800b312:	461a      	mov	r2, r3
 800b314:	4603      	mov	r3, r0
 800b316:	70fb      	strb	r3, [r7, #3]
 800b318:	460b      	mov	r3, r1
 800b31a:	70bb      	strb	r3, [r7, #2]
 800b31c:	4613      	mov	r3, r2
 800b31e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b324:	2300      	movs	r3, #0
 800b326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b32e:	78bb      	ldrb	r3, [r7, #2]
 800b330:	883a      	ldrh	r2, [r7, #0]
 800b332:	78f9      	ldrb	r1, [r7, #3]
 800b334:	f7f6 fe59 	bl	8001fea <HAL_PCD_EP_Open>
 800b338:	4603      	mov	r3, r0
 800b33a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 f958 	bl	800b5f4 <USBD_Get_USB_Status>
 800b344:	4603      	mov	r3, r0
 800b346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b348:	7bbb      	ldrb	r3, [r7, #14]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b352:	b580      	push	{r7, lr}
 800b354:	b084      	sub	sp, #16
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
 800b35a:	460b      	mov	r3, r1
 800b35c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b36c:	78fa      	ldrb	r2, [r7, #3]
 800b36e:	4611      	mov	r1, r2
 800b370:	4618      	mov	r0, r3
 800b372:	f7f6 fe97 	bl	80020a4 <HAL_PCD_EP_Close>
 800b376:	4603      	mov	r3, r0
 800b378:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
 800b37c:	4618      	mov	r0, r3
 800b37e:	f000 f939 	bl	800b5f4 <USBD_Get_USB_Status>
 800b382:	4603      	mov	r3, r0
 800b384:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b386:	7bbb      	ldrb	r3, [r7, #14]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	460b      	mov	r3, r1
 800b39a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b3aa:	78fa      	ldrb	r2, [r7, #3]
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7f6 ff40 	bl	8002234 <HAL_PCD_EP_SetStall>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3b8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f000 f91a 	bl	800b5f4 <USBD_Get_USB_Status>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b084      	sub	sp, #16
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b3e8:	78fa      	ldrb	r2, [r7, #3]
 800b3ea:	4611      	mov	r1, r2
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7f6 ff73 	bl	80022d8 <HAL_PCD_EP_ClrStall>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3f6:	7bfb      	ldrb	r3, [r7, #15]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f000 f8fb 	bl	800b5f4 <USBD_Get_USB_Status>
 800b3fe:	4603      	mov	r3, r0
 800b400:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b402:	7bbb      	ldrb	r3, [r7, #14]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3710      	adds	r7, #16
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b41e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b424:	2b00      	cmp	r3, #0
 800b426:	da0b      	bge.n	800b440 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b428:	78fb      	ldrb	r3, [r7, #3]
 800b42a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b42e:	68f9      	ldr	r1, [r7, #12]
 800b430:	4613      	mov	r3, r2
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	4413      	add	r3, r2
 800b436:	00db      	lsls	r3, r3, #3
 800b438:	440b      	add	r3, r1
 800b43a:	3312      	adds	r3, #18
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	e00b      	b.n	800b458 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b440:	78fb      	ldrb	r3, [r7, #3]
 800b442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b446:	68f9      	ldr	r1, [r7, #12]
 800b448:	4613      	mov	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	4413      	add	r3, r2
 800b44e:	00db      	lsls	r3, r3, #3
 800b450:	440b      	add	r3, r1
 800b452:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800b456:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	460b      	mov	r3, r1
 800b46e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b470:	2300      	movs	r3, #0
 800b472:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b474:	2300      	movs	r3, #0
 800b476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b47e:	78fa      	ldrb	r2, [r7, #3]
 800b480:	4611      	mov	r1, r2
 800b482:	4618      	mov	r0, r3
 800b484:	f7f6 fd8d 	bl	8001fa2 <HAL_PCD_SetAddress>
 800b488:	4603      	mov	r3, r0
 800b48a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 f8b0 	bl	800b5f4 <USBD_Get_USB_Status>
 800b494:	4603      	mov	r3, r0
 800b496:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b498:	7bbb      	ldrb	r3, [r7, #14]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b086      	sub	sp, #24
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	607a      	str	r2, [r7, #4]
 800b4ac:	603b      	str	r3, [r7, #0]
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b4c0:	7af9      	ldrb	r1, [r7, #11]
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	f7f6 fe7e 	bl	80021c6 <HAL_PCD_EP_Transmit>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4ce:	7dfb      	ldrb	r3, [r7, #23]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f000 f88f 	bl	800b5f4 <USBD_Get_USB_Status>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b4da:	7dbb      	ldrb	r3, [r7, #22]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3718      	adds	r7, #24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b086      	sub	sp, #24
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	607a      	str	r2, [r7, #4]
 800b4ee:	603b      	str	r3, [r7, #0]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b502:	7af9      	ldrb	r1, [r7, #11]
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	f7f6 fe14 	bl	8002134 <HAL_PCD_EP_Receive>
 800b50c:	4603      	mov	r3, r0
 800b50e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b510:	7dfb      	ldrb	r3, [r7, #23]
 800b512:	4618      	mov	r0, r3
 800b514:	f000 f86e 	bl	800b5f4 <USBD_Get_USB_Status>
 800b518:	4603      	mov	r3, r0
 800b51a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b51c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3718      	adds	r7, #24
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b082      	sub	sp, #8
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	460b      	mov	r3, r1
 800b530:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b538:	78fa      	ldrb	r2, [r7, #3]
 800b53a:	4611      	mov	r1, r2
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7f6 fe2a 	bl	8002196 <HAL_PCD_EP_GetRxCount>
 800b542:	4603      	mov	r3, r0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	460b      	mov	r3, r1
 800b556:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b558:	78fb      	ldrb	r3, [r7, #3]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d002      	beq.n	800b564 <HAL_PCDEx_LPM_Callback+0x18>
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d013      	beq.n	800b58a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b562:	e023      	b.n	800b5ac <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	7a5b      	ldrb	r3, [r3, #9]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d007      	beq.n	800b57c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b56c:	f000 f83c 	bl	800b5e8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b570:	4b10      	ldr	r3, [pc, #64]	; (800b5b4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	4a0f      	ldr	r2, [pc, #60]	; (800b5b4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b576:	f023 0306 	bic.w	r3, r3, #6
 800b57a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b582:	4618      	mov	r0, r3
 800b584:	f7fe fc1e 	bl	8009dc4 <USBD_LL_Resume>
    break;
 800b588:	e010      	b.n	800b5ac <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b590:	4618      	mov	r0, r3
 800b592:	f7fe fc01 	bl	8009d98 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	7a5b      	ldrb	r3, [r3, #9]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d005      	beq.n	800b5aa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b59e:	4b05      	ldr	r3, [pc, #20]	; (800b5b4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	4a04      	ldr	r2, [pc, #16]	; (800b5b4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b5a4:	f043 0306 	orr.w	r3, r3, #6
 800b5a8:	6113      	str	r3, [r2, #16]
    break;
 800b5aa:	bf00      	nop
}
 800b5ac:	bf00      	nop
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	e000ed00 	.word	0xe000ed00

0800b5b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b5c0:	4b03      	ldr	r3, [pc, #12]	; (800b5d0 <USBD_static_malloc+0x18>)
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	370c      	adds	r7, #12
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	20002bc0 	.word	0x20002bc0

0800b5d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]

}
 800b5dc:	bf00      	nop
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b5ec:	f7f5 f888 	bl	8000700 <SystemClock_Config>
}
 800b5f0:	bf00      	nop
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5fe:	2300      	movs	r3, #0
 800b600:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b602:	79fb      	ldrb	r3, [r7, #7]
 800b604:	2b03      	cmp	r3, #3
 800b606:	d817      	bhi.n	800b638 <USBD_Get_USB_Status+0x44>
 800b608:	a201      	add	r2, pc, #4	; (adr r2, 800b610 <USBD_Get_USB_Status+0x1c>)
 800b60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b60e:	bf00      	nop
 800b610:	0800b621 	.word	0x0800b621
 800b614:	0800b627 	.word	0x0800b627
 800b618:	0800b62d 	.word	0x0800b62d
 800b61c:	0800b633 	.word	0x0800b633
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	73fb      	strb	r3, [r7, #15]
    break;
 800b624:	e00b      	b.n	800b63e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b626:	2303      	movs	r3, #3
 800b628:	73fb      	strb	r3, [r7, #15]
    break;
 800b62a:	e008      	b.n	800b63e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b62c:	2301      	movs	r3, #1
 800b62e:	73fb      	strb	r3, [r7, #15]
    break;
 800b630:	e005      	b.n	800b63e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b632:	2303      	movs	r3, #3
 800b634:	73fb      	strb	r3, [r7, #15]
    break;
 800b636:	e002      	b.n	800b63e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b638:	2303      	movs	r3, #3
 800b63a:	73fb      	strb	r3, [r7, #15]
    break;
 800b63c:	bf00      	nop
  }
  return usb_status;
 800b63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3714      	adds	r7, #20
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <main>:


#include "main.h"

int main(void)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	af00      	add	r7, sp, #0
  hwInit();
 800b650:	f7f5 fe26 	bl	80012a0 <hwInit>
  apInit();
 800b654:	f7f4 ffb2 	bl	80005bc <apInit>

  apMain();
 800b658:	f7f4 ffb8 	bl	80005cc <apMain>
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	bd80      	pop	{r7, pc}

0800b662 <_vsniprintf_r>:
 800b662:	b530      	push	{r4, r5, lr}
 800b664:	4614      	mov	r4, r2
 800b666:	2c00      	cmp	r4, #0
 800b668:	b09b      	sub	sp, #108	; 0x6c
 800b66a:	4605      	mov	r5, r0
 800b66c:	461a      	mov	r2, r3
 800b66e:	da05      	bge.n	800b67c <_vsniprintf_r+0x1a>
 800b670:	238b      	movs	r3, #139	; 0x8b
 800b672:	6003      	str	r3, [r0, #0]
 800b674:	f04f 30ff 	mov.w	r0, #4294967295
 800b678:	b01b      	add	sp, #108	; 0x6c
 800b67a:	bd30      	pop	{r4, r5, pc}
 800b67c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b680:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b684:	bf14      	ite	ne
 800b686:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b68a:	4623      	moveq	r3, r4
 800b68c:	9302      	str	r3, [sp, #8]
 800b68e:	9305      	str	r3, [sp, #20]
 800b690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b694:	9100      	str	r1, [sp, #0]
 800b696:	9104      	str	r1, [sp, #16]
 800b698:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b69c:	4669      	mov	r1, sp
 800b69e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b6a0:	f000 f99e 	bl	800b9e0 <_svfiprintf_r>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	bfbc      	itt	lt
 800b6a8:	238b      	movlt	r3, #139	; 0x8b
 800b6aa:	602b      	strlt	r3, [r5, #0]
 800b6ac:	2c00      	cmp	r4, #0
 800b6ae:	d0e3      	beq.n	800b678 <_vsniprintf_r+0x16>
 800b6b0:	9b00      	ldr	r3, [sp, #0]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	701a      	strb	r2, [r3, #0]
 800b6b6:	e7df      	b.n	800b678 <_vsniprintf_r+0x16>

0800b6b8 <vsniprintf>:
 800b6b8:	b507      	push	{r0, r1, r2, lr}
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	460a      	mov	r2, r1
 800b6c0:	4601      	mov	r1, r0
 800b6c2:	4803      	ldr	r0, [pc, #12]	; (800b6d0 <vsniprintf+0x18>)
 800b6c4:	6800      	ldr	r0, [r0, #0]
 800b6c6:	f7ff ffcc 	bl	800b662 <_vsniprintf_r>
 800b6ca:	b003      	add	sp, #12
 800b6cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6d0:	200001d8 	.word	0x200001d8

0800b6d4 <memset>:
 800b6d4:	4402      	add	r2, r0
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d100      	bne.n	800b6de <memset+0xa>
 800b6dc:	4770      	bx	lr
 800b6de:	f803 1b01 	strb.w	r1, [r3], #1
 800b6e2:	e7f9      	b.n	800b6d8 <memset+0x4>

0800b6e4 <__errno>:
 800b6e4:	4b01      	ldr	r3, [pc, #4]	; (800b6ec <__errno+0x8>)
 800b6e6:	6818      	ldr	r0, [r3, #0]
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	200001d8 	.word	0x200001d8

0800b6f0 <__libc_init_array>:
 800b6f0:	b570      	push	{r4, r5, r6, lr}
 800b6f2:	4d0d      	ldr	r5, [pc, #52]	; (800b728 <__libc_init_array+0x38>)
 800b6f4:	4c0d      	ldr	r4, [pc, #52]	; (800b72c <__libc_init_array+0x3c>)
 800b6f6:	1b64      	subs	r4, r4, r5
 800b6f8:	10a4      	asrs	r4, r4, #2
 800b6fa:	2600      	movs	r6, #0
 800b6fc:	42a6      	cmp	r6, r4
 800b6fe:	d109      	bne.n	800b714 <__libc_init_array+0x24>
 800b700:	4d0b      	ldr	r5, [pc, #44]	; (800b730 <__libc_init_array+0x40>)
 800b702:	4c0c      	ldr	r4, [pc, #48]	; (800b734 <__libc_init_array+0x44>)
 800b704:	f000 fc6a 	bl	800bfdc <_init>
 800b708:	1b64      	subs	r4, r4, r5
 800b70a:	10a4      	asrs	r4, r4, #2
 800b70c:	2600      	movs	r6, #0
 800b70e:	42a6      	cmp	r6, r4
 800b710:	d105      	bne.n	800b71e <__libc_init_array+0x2e>
 800b712:	bd70      	pop	{r4, r5, r6, pc}
 800b714:	f855 3b04 	ldr.w	r3, [r5], #4
 800b718:	4798      	blx	r3
 800b71a:	3601      	adds	r6, #1
 800b71c:	e7ee      	b.n	800b6fc <__libc_init_array+0xc>
 800b71e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b722:	4798      	blx	r3
 800b724:	3601      	adds	r6, #1
 800b726:	e7f2      	b.n	800b70e <__libc_init_array+0x1e>
 800b728:	0800c0d0 	.word	0x0800c0d0
 800b72c:	0800c0d0 	.word	0x0800c0d0
 800b730:	0800c0d0 	.word	0x0800c0d0
 800b734:	0800c0d4 	.word	0x0800c0d4

0800b738 <__retarget_lock_acquire_recursive>:
 800b738:	4770      	bx	lr

0800b73a <__retarget_lock_release_recursive>:
 800b73a:	4770      	bx	lr

0800b73c <_free_r>:
 800b73c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b73e:	2900      	cmp	r1, #0
 800b740:	d044      	beq.n	800b7cc <_free_r+0x90>
 800b742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b746:	9001      	str	r0, [sp, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	f1a1 0404 	sub.w	r4, r1, #4
 800b74e:	bfb8      	it	lt
 800b750:	18e4      	addlt	r4, r4, r3
 800b752:	f000 f8df 	bl	800b914 <__malloc_lock>
 800b756:	4a1e      	ldr	r2, [pc, #120]	; (800b7d0 <_free_r+0x94>)
 800b758:	9801      	ldr	r0, [sp, #4]
 800b75a:	6813      	ldr	r3, [r2, #0]
 800b75c:	b933      	cbnz	r3, 800b76c <_free_r+0x30>
 800b75e:	6063      	str	r3, [r4, #4]
 800b760:	6014      	str	r4, [r2, #0]
 800b762:	b003      	add	sp, #12
 800b764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b768:	f000 b8da 	b.w	800b920 <__malloc_unlock>
 800b76c:	42a3      	cmp	r3, r4
 800b76e:	d908      	bls.n	800b782 <_free_r+0x46>
 800b770:	6825      	ldr	r5, [r4, #0]
 800b772:	1961      	adds	r1, r4, r5
 800b774:	428b      	cmp	r3, r1
 800b776:	bf01      	itttt	eq
 800b778:	6819      	ldreq	r1, [r3, #0]
 800b77a:	685b      	ldreq	r3, [r3, #4]
 800b77c:	1949      	addeq	r1, r1, r5
 800b77e:	6021      	streq	r1, [r4, #0]
 800b780:	e7ed      	b.n	800b75e <_free_r+0x22>
 800b782:	461a      	mov	r2, r3
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	b10b      	cbz	r3, 800b78c <_free_r+0x50>
 800b788:	42a3      	cmp	r3, r4
 800b78a:	d9fa      	bls.n	800b782 <_free_r+0x46>
 800b78c:	6811      	ldr	r1, [r2, #0]
 800b78e:	1855      	adds	r5, r2, r1
 800b790:	42a5      	cmp	r5, r4
 800b792:	d10b      	bne.n	800b7ac <_free_r+0x70>
 800b794:	6824      	ldr	r4, [r4, #0]
 800b796:	4421      	add	r1, r4
 800b798:	1854      	adds	r4, r2, r1
 800b79a:	42a3      	cmp	r3, r4
 800b79c:	6011      	str	r1, [r2, #0]
 800b79e:	d1e0      	bne.n	800b762 <_free_r+0x26>
 800b7a0:	681c      	ldr	r4, [r3, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	6053      	str	r3, [r2, #4]
 800b7a6:	440c      	add	r4, r1
 800b7a8:	6014      	str	r4, [r2, #0]
 800b7aa:	e7da      	b.n	800b762 <_free_r+0x26>
 800b7ac:	d902      	bls.n	800b7b4 <_free_r+0x78>
 800b7ae:	230c      	movs	r3, #12
 800b7b0:	6003      	str	r3, [r0, #0]
 800b7b2:	e7d6      	b.n	800b762 <_free_r+0x26>
 800b7b4:	6825      	ldr	r5, [r4, #0]
 800b7b6:	1961      	adds	r1, r4, r5
 800b7b8:	428b      	cmp	r3, r1
 800b7ba:	bf04      	itt	eq
 800b7bc:	6819      	ldreq	r1, [r3, #0]
 800b7be:	685b      	ldreq	r3, [r3, #4]
 800b7c0:	6063      	str	r3, [r4, #4]
 800b7c2:	bf04      	itt	eq
 800b7c4:	1949      	addeq	r1, r1, r5
 800b7c6:	6021      	streq	r1, [r4, #0]
 800b7c8:	6054      	str	r4, [r2, #4]
 800b7ca:	e7ca      	b.n	800b762 <_free_r+0x26>
 800b7cc:	b003      	add	sp, #12
 800b7ce:	bd30      	pop	{r4, r5, pc}
 800b7d0:	20002f20 	.word	0x20002f20

0800b7d4 <sbrk_aligned>:
 800b7d4:	b570      	push	{r4, r5, r6, lr}
 800b7d6:	4e0e      	ldr	r6, [pc, #56]	; (800b810 <sbrk_aligned+0x3c>)
 800b7d8:	460c      	mov	r4, r1
 800b7da:	6831      	ldr	r1, [r6, #0]
 800b7dc:	4605      	mov	r5, r0
 800b7de:	b911      	cbnz	r1, 800b7e6 <sbrk_aligned+0x12>
 800b7e0:	f000 fba6 	bl	800bf30 <_sbrk_r>
 800b7e4:	6030      	str	r0, [r6, #0]
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	f000 fba1 	bl	800bf30 <_sbrk_r>
 800b7ee:	1c43      	adds	r3, r0, #1
 800b7f0:	d00a      	beq.n	800b808 <sbrk_aligned+0x34>
 800b7f2:	1cc4      	adds	r4, r0, #3
 800b7f4:	f024 0403 	bic.w	r4, r4, #3
 800b7f8:	42a0      	cmp	r0, r4
 800b7fa:	d007      	beq.n	800b80c <sbrk_aligned+0x38>
 800b7fc:	1a21      	subs	r1, r4, r0
 800b7fe:	4628      	mov	r0, r5
 800b800:	f000 fb96 	bl	800bf30 <_sbrk_r>
 800b804:	3001      	adds	r0, #1
 800b806:	d101      	bne.n	800b80c <sbrk_aligned+0x38>
 800b808:	f04f 34ff 	mov.w	r4, #4294967295
 800b80c:	4620      	mov	r0, r4
 800b80e:	bd70      	pop	{r4, r5, r6, pc}
 800b810:	20002f24 	.word	0x20002f24

0800b814 <_malloc_r>:
 800b814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b818:	1ccd      	adds	r5, r1, #3
 800b81a:	f025 0503 	bic.w	r5, r5, #3
 800b81e:	3508      	adds	r5, #8
 800b820:	2d0c      	cmp	r5, #12
 800b822:	bf38      	it	cc
 800b824:	250c      	movcc	r5, #12
 800b826:	2d00      	cmp	r5, #0
 800b828:	4607      	mov	r7, r0
 800b82a:	db01      	blt.n	800b830 <_malloc_r+0x1c>
 800b82c:	42a9      	cmp	r1, r5
 800b82e:	d905      	bls.n	800b83c <_malloc_r+0x28>
 800b830:	230c      	movs	r3, #12
 800b832:	603b      	str	r3, [r7, #0]
 800b834:	2600      	movs	r6, #0
 800b836:	4630      	mov	r0, r6
 800b838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b83c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b910 <_malloc_r+0xfc>
 800b840:	f000 f868 	bl	800b914 <__malloc_lock>
 800b844:	f8d8 3000 	ldr.w	r3, [r8]
 800b848:	461c      	mov	r4, r3
 800b84a:	bb5c      	cbnz	r4, 800b8a4 <_malloc_r+0x90>
 800b84c:	4629      	mov	r1, r5
 800b84e:	4638      	mov	r0, r7
 800b850:	f7ff ffc0 	bl	800b7d4 <sbrk_aligned>
 800b854:	1c43      	adds	r3, r0, #1
 800b856:	4604      	mov	r4, r0
 800b858:	d155      	bne.n	800b906 <_malloc_r+0xf2>
 800b85a:	f8d8 4000 	ldr.w	r4, [r8]
 800b85e:	4626      	mov	r6, r4
 800b860:	2e00      	cmp	r6, #0
 800b862:	d145      	bne.n	800b8f0 <_malloc_r+0xdc>
 800b864:	2c00      	cmp	r4, #0
 800b866:	d048      	beq.n	800b8fa <_malloc_r+0xe6>
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	4631      	mov	r1, r6
 800b86c:	4638      	mov	r0, r7
 800b86e:	eb04 0903 	add.w	r9, r4, r3
 800b872:	f000 fb5d 	bl	800bf30 <_sbrk_r>
 800b876:	4581      	cmp	r9, r0
 800b878:	d13f      	bne.n	800b8fa <_malloc_r+0xe6>
 800b87a:	6821      	ldr	r1, [r4, #0]
 800b87c:	1a6d      	subs	r5, r5, r1
 800b87e:	4629      	mov	r1, r5
 800b880:	4638      	mov	r0, r7
 800b882:	f7ff ffa7 	bl	800b7d4 <sbrk_aligned>
 800b886:	3001      	adds	r0, #1
 800b888:	d037      	beq.n	800b8fa <_malloc_r+0xe6>
 800b88a:	6823      	ldr	r3, [r4, #0]
 800b88c:	442b      	add	r3, r5
 800b88e:	6023      	str	r3, [r4, #0]
 800b890:	f8d8 3000 	ldr.w	r3, [r8]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d038      	beq.n	800b90a <_malloc_r+0xf6>
 800b898:	685a      	ldr	r2, [r3, #4]
 800b89a:	42a2      	cmp	r2, r4
 800b89c:	d12b      	bne.n	800b8f6 <_malloc_r+0xe2>
 800b89e:	2200      	movs	r2, #0
 800b8a0:	605a      	str	r2, [r3, #4]
 800b8a2:	e00f      	b.n	800b8c4 <_malloc_r+0xb0>
 800b8a4:	6822      	ldr	r2, [r4, #0]
 800b8a6:	1b52      	subs	r2, r2, r5
 800b8a8:	d41f      	bmi.n	800b8ea <_malloc_r+0xd6>
 800b8aa:	2a0b      	cmp	r2, #11
 800b8ac:	d917      	bls.n	800b8de <_malloc_r+0xca>
 800b8ae:	1961      	adds	r1, r4, r5
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	6025      	str	r5, [r4, #0]
 800b8b4:	bf18      	it	ne
 800b8b6:	6059      	strne	r1, [r3, #4]
 800b8b8:	6863      	ldr	r3, [r4, #4]
 800b8ba:	bf08      	it	eq
 800b8bc:	f8c8 1000 	streq.w	r1, [r8]
 800b8c0:	5162      	str	r2, [r4, r5]
 800b8c2:	604b      	str	r3, [r1, #4]
 800b8c4:	4638      	mov	r0, r7
 800b8c6:	f104 060b 	add.w	r6, r4, #11
 800b8ca:	f000 f829 	bl	800b920 <__malloc_unlock>
 800b8ce:	f026 0607 	bic.w	r6, r6, #7
 800b8d2:	1d23      	adds	r3, r4, #4
 800b8d4:	1af2      	subs	r2, r6, r3
 800b8d6:	d0ae      	beq.n	800b836 <_malloc_r+0x22>
 800b8d8:	1b9b      	subs	r3, r3, r6
 800b8da:	50a3      	str	r3, [r4, r2]
 800b8dc:	e7ab      	b.n	800b836 <_malloc_r+0x22>
 800b8de:	42a3      	cmp	r3, r4
 800b8e0:	6862      	ldr	r2, [r4, #4]
 800b8e2:	d1dd      	bne.n	800b8a0 <_malloc_r+0x8c>
 800b8e4:	f8c8 2000 	str.w	r2, [r8]
 800b8e8:	e7ec      	b.n	800b8c4 <_malloc_r+0xb0>
 800b8ea:	4623      	mov	r3, r4
 800b8ec:	6864      	ldr	r4, [r4, #4]
 800b8ee:	e7ac      	b.n	800b84a <_malloc_r+0x36>
 800b8f0:	4634      	mov	r4, r6
 800b8f2:	6876      	ldr	r6, [r6, #4]
 800b8f4:	e7b4      	b.n	800b860 <_malloc_r+0x4c>
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	e7cc      	b.n	800b894 <_malloc_r+0x80>
 800b8fa:	230c      	movs	r3, #12
 800b8fc:	603b      	str	r3, [r7, #0]
 800b8fe:	4638      	mov	r0, r7
 800b900:	f000 f80e 	bl	800b920 <__malloc_unlock>
 800b904:	e797      	b.n	800b836 <_malloc_r+0x22>
 800b906:	6025      	str	r5, [r4, #0]
 800b908:	e7dc      	b.n	800b8c4 <_malloc_r+0xb0>
 800b90a:	605b      	str	r3, [r3, #4]
 800b90c:	deff      	udf	#255	; 0xff
 800b90e:	bf00      	nop
 800b910:	20002f20 	.word	0x20002f20

0800b914 <__malloc_lock>:
 800b914:	4801      	ldr	r0, [pc, #4]	; (800b91c <__malloc_lock+0x8>)
 800b916:	f7ff bf0f 	b.w	800b738 <__retarget_lock_acquire_recursive>
 800b91a:	bf00      	nop
 800b91c:	20002f1c 	.word	0x20002f1c

0800b920 <__malloc_unlock>:
 800b920:	4801      	ldr	r0, [pc, #4]	; (800b928 <__malloc_unlock+0x8>)
 800b922:	f7ff bf0a 	b.w	800b73a <__retarget_lock_release_recursive>
 800b926:	bf00      	nop
 800b928:	20002f1c 	.word	0x20002f1c

0800b92c <__ssputs_r>:
 800b92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b930:	688e      	ldr	r6, [r1, #8]
 800b932:	461f      	mov	r7, r3
 800b934:	42be      	cmp	r6, r7
 800b936:	680b      	ldr	r3, [r1, #0]
 800b938:	4682      	mov	sl, r0
 800b93a:	460c      	mov	r4, r1
 800b93c:	4690      	mov	r8, r2
 800b93e:	d82c      	bhi.n	800b99a <__ssputs_r+0x6e>
 800b940:	898a      	ldrh	r2, [r1, #12]
 800b942:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b946:	d026      	beq.n	800b996 <__ssputs_r+0x6a>
 800b948:	6965      	ldr	r5, [r4, #20]
 800b94a:	6909      	ldr	r1, [r1, #16]
 800b94c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b950:	eba3 0901 	sub.w	r9, r3, r1
 800b954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b958:	1c7b      	adds	r3, r7, #1
 800b95a:	444b      	add	r3, r9
 800b95c:	106d      	asrs	r5, r5, #1
 800b95e:	429d      	cmp	r5, r3
 800b960:	bf38      	it	cc
 800b962:	461d      	movcc	r5, r3
 800b964:	0553      	lsls	r3, r2, #21
 800b966:	d527      	bpl.n	800b9b8 <__ssputs_r+0x8c>
 800b968:	4629      	mov	r1, r5
 800b96a:	f7ff ff53 	bl	800b814 <_malloc_r>
 800b96e:	4606      	mov	r6, r0
 800b970:	b360      	cbz	r0, 800b9cc <__ssputs_r+0xa0>
 800b972:	6921      	ldr	r1, [r4, #16]
 800b974:	464a      	mov	r2, r9
 800b976:	f000 faeb 	bl	800bf50 <memcpy>
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b984:	81a3      	strh	r3, [r4, #12]
 800b986:	6126      	str	r6, [r4, #16]
 800b988:	6165      	str	r5, [r4, #20]
 800b98a:	444e      	add	r6, r9
 800b98c:	eba5 0509 	sub.w	r5, r5, r9
 800b990:	6026      	str	r6, [r4, #0]
 800b992:	60a5      	str	r5, [r4, #8]
 800b994:	463e      	mov	r6, r7
 800b996:	42be      	cmp	r6, r7
 800b998:	d900      	bls.n	800b99c <__ssputs_r+0x70>
 800b99a:	463e      	mov	r6, r7
 800b99c:	6820      	ldr	r0, [r4, #0]
 800b99e:	4632      	mov	r2, r6
 800b9a0:	4641      	mov	r1, r8
 800b9a2:	f000 faab 	bl	800befc <memmove>
 800b9a6:	68a3      	ldr	r3, [r4, #8]
 800b9a8:	1b9b      	subs	r3, r3, r6
 800b9aa:	60a3      	str	r3, [r4, #8]
 800b9ac:	6823      	ldr	r3, [r4, #0]
 800b9ae:	4433      	add	r3, r6
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	2000      	movs	r0, #0
 800b9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b8:	462a      	mov	r2, r5
 800b9ba:	f000 fad7 	bl	800bf6c <_realloc_r>
 800b9be:	4606      	mov	r6, r0
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d1e0      	bne.n	800b986 <__ssputs_r+0x5a>
 800b9c4:	6921      	ldr	r1, [r4, #16]
 800b9c6:	4650      	mov	r0, sl
 800b9c8:	f7ff feb8 	bl	800b73c <_free_r>
 800b9cc:	230c      	movs	r3, #12
 800b9ce:	f8ca 3000 	str.w	r3, [sl]
 800b9d2:	89a3      	ldrh	r3, [r4, #12]
 800b9d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9d8:	81a3      	strh	r3, [r4, #12]
 800b9da:	f04f 30ff 	mov.w	r0, #4294967295
 800b9de:	e7e9      	b.n	800b9b4 <__ssputs_r+0x88>

0800b9e0 <_svfiprintf_r>:
 800b9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e4:	4698      	mov	r8, r3
 800b9e6:	898b      	ldrh	r3, [r1, #12]
 800b9e8:	061b      	lsls	r3, r3, #24
 800b9ea:	b09d      	sub	sp, #116	; 0x74
 800b9ec:	4607      	mov	r7, r0
 800b9ee:	460d      	mov	r5, r1
 800b9f0:	4614      	mov	r4, r2
 800b9f2:	d50e      	bpl.n	800ba12 <_svfiprintf_r+0x32>
 800b9f4:	690b      	ldr	r3, [r1, #16]
 800b9f6:	b963      	cbnz	r3, 800ba12 <_svfiprintf_r+0x32>
 800b9f8:	2140      	movs	r1, #64	; 0x40
 800b9fa:	f7ff ff0b 	bl	800b814 <_malloc_r>
 800b9fe:	6028      	str	r0, [r5, #0]
 800ba00:	6128      	str	r0, [r5, #16]
 800ba02:	b920      	cbnz	r0, 800ba0e <_svfiprintf_r+0x2e>
 800ba04:	230c      	movs	r3, #12
 800ba06:	603b      	str	r3, [r7, #0]
 800ba08:	f04f 30ff 	mov.w	r0, #4294967295
 800ba0c:	e0d0      	b.n	800bbb0 <_svfiprintf_r+0x1d0>
 800ba0e:	2340      	movs	r3, #64	; 0x40
 800ba10:	616b      	str	r3, [r5, #20]
 800ba12:	2300      	movs	r3, #0
 800ba14:	9309      	str	r3, [sp, #36]	; 0x24
 800ba16:	2320      	movs	r3, #32
 800ba18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba20:	2330      	movs	r3, #48	; 0x30
 800ba22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bbc8 <_svfiprintf_r+0x1e8>
 800ba26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba2a:	f04f 0901 	mov.w	r9, #1
 800ba2e:	4623      	mov	r3, r4
 800ba30:	469a      	mov	sl, r3
 800ba32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba36:	b10a      	cbz	r2, 800ba3c <_svfiprintf_r+0x5c>
 800ba38:	2a25      	cmp	r2, #37	; 0x25
 800ba3a:	d1f9      	bne.n	800ba30 <_svfiprintf_r+0x50>
 800ba3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba40:	d00b      	beq.n	800ba5a <_svfiprintf_r+0x7a>
 800ba42:	465b      	mov	r3, fp
 800ba44:	4622      	mov	r2, r4
 800ba46:	4629      	mov	r1, r5
 800ba48:	4638      	mov	r0, r7
 800ba4a:	f7ff ff6f 	bl	800b92c <__ssputs_r>
 800ba4e:	3001      	adds	r0, #1
 800ba50:	f000 80a9 	beq.w	800bba6 <_svfiprintf_r+0x1c6>
 800ba54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba56:	445a      	add	r2, fp
 800ba58:	9209      	str	r2, [sp, #36]	; 0x24
 800ba5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f000 80a1 	beq.w	800bba6 <_svfiprintf_r+0x1c6>
 800ba64:	2300      	movs	r3, #0
 800ba66:	f04f 32ff 	mov.w	r2, #4294967295
 800ba6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba6e:	f10a 0a01 	add.w	sl, sl, #1
 800ba72:	9304      	str	r3, [sp, #16]
 800ba74:	9307      	str	r3, [sp, #28]
 800ba76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba7a:	931a      	str	r3, [sp, #104]	; 0x68
 800ba7c:	4654      	mov	r4, sl
 800ba7e:	2205      	movs	r2, #5
 800ba80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba84:	4850      	ldr	r0, [pc, #320]	; (800bbc8 <_svfiprintf_r+0x1e8>)
 800ba86:	f7f4 fbcb 	bl	8000220 <memchr>
 800ba8a:	9a04      	ldr	r2, [sp, #16]
 800ba8c:	b9d8      	cbnz	r0, 800bac6 <_svfiprintf_r+0xe6>
 800ba8e:	06d0      	lsls	r0, r2, #27
 800ba90:	bf44      	itt	mi
 800ba92:	2320      	movmi	r3, #32
 800ba94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba98:	0711      	lsls	r1, r2, #28
 800ba9a:	bf44      	itt	mi
 800ba9c:	232b      	movmi	r3, #43	; 0x2b
 800ba9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baa2:	f89a 3000 	ldrb.w	r3, [sl]
 800baa6:	2b2a      	cmp	r3, #42	; 0x2a
 800baa8:	d015      	beq.n	800bad6 <_svfiprintf_r+0xf6>
 800baaa:	9a07      	ldr	r2, [sp, #28]
 800baac:	4654      	mov	r4, sl
 800baae:	2000      	movs	r0, #0
 800bab0:	f04f 0c0a 	mov.w	ip, #10
 800bab4:	4621      	mov	r1, r4
 800bab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baba:	3b30      	subs	r3, #48	; 0x30
 800babc:	2b09      	cmp	r3, #9
 800babe:	d94d      	bls.n	800bb5c <_svfiprintf_r+0x17c>
 800bac0:	b1b0      	cbz	r0, 800baf0 <_svfiprintf_r+0x110>
 800bac2:	9207      	str	r2, [sp, #28]
 800bac4:	e014      	b.n	800baf0 <_svfiprintf_r+0x110>
 800bac6:	eba0 0308 	sub.w	r3, r0, r8
 800baca:	fa09 f303 	lsl.w	r3, r9, r3
 800bace:	4313      	orrs	r3, r2
 800bad0:	9304      	str	r3, [sp, #16]
 800bad2:	46a2      	mov	sl, r4
 800bad4:	e7d2      	b.n	800ba7c <_svfiprintf_r+0x9c>
 800bad6:	9b03      	ldr	r3, [sp, #12]
 800bad8:	1d19      	adds	r1, r3, #4
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	9103      	str	r1, [sp, #12]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	bfbb      	ittet	lt
 800bae2:	425b      	neglt	r3, r3
 800bae4:	f042 0202 	orrlt.w	r2, r2, #2
 800bae8:	9307      	strge	r3, [sp, #28]
 800baea:	9307      	strlt	r3, [sp, #28]
 800baec:	bfb8      	it	lt
 800baee:	9204      	strlt	r2, [sp, #16]
 800baf0:	7823      	ldrb	r3, [r4, #0]
 800baf2:	2b2e      	cmp	r3, #46	; 0x2e
 800baf4:	d10c      	bne.n	800bb10 <_svfiprintf_r+0x130>
 800baf6:	7863      	ldrb	r3, [r4, #1]
 800baf8:	2b2a      	cmp	r3, #42	; 0x2a
 800bafa:	d134      	bne.n	800bb66 <_svfiprintf_r+0x186>
 800bafc:	9b03      	ldr	r3, [sp, #12]
 800bafe:	1d1a      	adds	r2, r3, #4
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	9203      	str	r2, [sp, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	bfb8      	it	lt
 800bb08:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb0c:	3402      	adds	r4, #2
 800bb0e:	9305      	str	r3, [sp, #20]
 800bb10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bbd8 <_svfiprintf_r+0x1f8>
 800bb14:	7821      	ldrb	r1, [r4, #0]
 800bb16:	2203      	movs	r2, #3
 800bb18:	4650      	mov	r0, sl
 800bb1a:	f7f4 fb81 	bl	8000220 <memchr>
 800bb1e:	b138      	cbz	r0, 800bb30 <_svfiprintf_r+0x150>
 800bb20:	9b04      	ldr	r3, [sp, #16]
 800bb22:	eba0 000a 	sub.w	r0, r0, sl
 800bb26:	2240      	movs	r2, #64	; 0x40
 800bb28:	4082      	lsls	r2, r0
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	3401      	adds	r4, #1
 800bb2e:	9304      	str	r3, [sp, #16]
 800bb30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb34:	4825      	ldr	r0, [pc, #148]	; (800bbcc <_svfiprintf_r+0x1ec>)
 800bb36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb3a:	2206      	movs	r2, #6
 800bb3c:	f7f4 fb70 	bl	8000220 <memchr>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	d038      	beq.n	800bbb6 <_svfiprintf_r+0x1d6>
 800bb44:	4b22      	ldr	r3, [pc, #136]	; (800bbd0 <_svfiprintf_r+0x1f0>)
 800bb46:	bb1b      	cbnz	r3, 800bb90 <_svfiprintf_r+0x1b0>
 800bb48:	9b03      	ldr	r3, [sp, #12]
 800bb4a:	3307      	adds	r3, #7
 800bb4c:	f023 0307 	bic.w	r3, r3, #7
 800bb50:	3308      	adds	r3, #8
 800bb52:	9303      	str	r3, [sp, #12]
 800bb54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb56:	4433      	add	r3, r6
 800bb58:	9309      	str	r3, [sp, #36]	; 0x24
 800bb5a:	e768      	b.n	800ba2e <_svfiprintf_r+0x4e>
 800bb5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb60:	460c      	mov	r4, r1
 800bb62:	2001      	movs	r0, #1
 800bb64:	e7a6      	b.n	800bab4 <_svfiprintf_r+0xd4>
 800bb66:	2300      	movs	r3, #0
 800bb68:	3401      	adds	r4, #1
 800bb6a:	9305      	str	r3, [sp, #20]
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	f04f 0c0a 	mov.w	ip, #10
 800bb72:	4620      	mov	r0, r4
 800bb74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb78:	3a30      	subs	r2, #48	; 0x30
 800bb7a:	2a09      	cmp	r2, #9
 800bb7c:	d903      	bls.n	800bb86 <_svfiprintf_r+0x1a6>
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d0c6      	beq.n	800bb10 <_svfiprintf_r+0x130>
 800bb82:	9105      	str	r1, [sp, #20]
 800bb84:	e7c4      	b.n	800bb10 <_svfiprintf_r+0x130>
 800bb86:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e7f0      	b.n	800bb72 <_svfiprintf_r+0x192>
 800bb90:	ab03      	add	r3, sp, #12
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	462a      	mov	r2, r5
 800bb96:	4b0f      	ldr	r3, [pc, #60]	; (800bbd4 <_svfiprintf_r+0x1f4>)
 800bb98:	a904      	add	r1, sp, #16
 800bb9a:	4638      	mov	r0, r7
 800bb9c:	f3af 8000 	nop.w
 800bba0:	1c42      	adds	r2, r0, #1
 800bba2:	4606      	mov	r6, r0
 800bba4:	d1d6      	bne.n	800bb54 <_svfiprintf_r+0x174>
 800bba6:	89ab      	ldrh	r3, [r5, #12]
 800bba8:	065b      	lsls	r3, r3, #25
 800bbaa:	f53f af2d 	bmi.w	800ba08 <_svfiprintf_r+0x28>
 800bbae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbb0:	b01d      	add	sp, #116	; 0x74
 800bbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb6:	ab03      	add	r3, sp, #12
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	462a      	mov	r2, r5
 800bbbc:	4b05      	ldr	r3, [pc, #20]	; (800bbd4 <_svfiprintf_r+0x1f4>)
 800bbbe:	a904      	add	r1, sp, #16
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	f000 f879 	bl	800bcb8 <_printf_i>
 800bbc6:	e7eb      	b.n	800bba0 <_svfiprintf_r+0x1c0>
 800bbc8:	0800c094 	.word	0x0800c094
 800bbcc:	0800c09e 	.word	0x0800c09e
 800bbd0:	00000000 	.word	0x00000000
 800bbd4:	0800b92d 	.word	0x0800b92d
 800bbd8:	0800c09a 	.word	0x0800c09a

0800bbdc <_printf_common>:
 800bbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe0:	4616      	mov	r6, r2
 800bbe2:	4699      	mov	r9, r3
 800bbe4:	688a      	ldr	r2, [r1, #8]
 800bbe6:	690b      	ldr	r3, [r1, #16]
 800bbe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bbec:	4293      	cmp	r3, r2
 800bbee:	bfb8      	it	lt
 800bbf0:	4613      	movlt	r3, r2
 800bbf2:	6033      	str	r3, [r6, #0]
 800bbf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bbf8:	4607      	mov	r7, r0
 800bbfa:	460c      	mov	r4, r1
 800bbfc:	b10a      	cbz	r2, 800bc02 <_printf_common+0x26>
 800bbfe:	3301      	adds	r3, #1
 800bc00:	6033      	str	r3, [r6, #0]
 800bc02:	6823      	ldr	r3, [r4, #0]
 800bc04:	0699      	lsls	r1, r3, #26
 800bc06:	bf42      	ittt	mi
 800bc08:	6833      	ldrmi	r3, [r6, #0]
 800bc0a:	3302      	addmi	r3, #2
 800bc0c:	6033      	strmi	r3, [r6, #0]
 800bc0e:	6825      	ldr	r5, [r4, #0]
 800bc10:	f015 0506 	ands.w	r5, r5, #6
 800bc14:	d106      	bne.n	800bc24 <_printf_common+0x48>
 800bc16:	f104 0a19 	add.w	sl, r4, #25
 800bc1a:	68e3      	ldr	r3, [r4, #12]
 800bc1c:	6832      	ldr	r2, [r6, #0]
 800bc1e:	1a9b      	subs	r3, r3, r2
 800bc20:	42ab      	cmp	r3, r5
 800bc22:	dc26      	bgt.n	800bc72 <_printf_common+0x96>
 800bc24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc28:	1e13      	subs	r3, r2, #0
 800bc2a:	6822      	ldr	r2, [r4, #0]
 800bc2c:	bf18      	it	ne
 800bc2e:	2301      	movne	r3, #1
 800bc30:	0692      	lsls	r2, r2, #26
 800bc32:	d42b      	bmi.n	800bc8c <_printf_common+0xb0>
 800bc34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc38:	4649      	mov	r1, r9
 800bc3a:	4638      	mov	r0, r7
 800bc3c:	47c0      	blx	r8
 800bc3e:	3001      	adds	r0, #1
 800bc40:	d01e      	beq.n	800bc80 <_printf_common+0xa4>
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	6922      	ldr	r2, [r4, #16]
 800bc46:	f003 0306 	and.w	r3, r3, #6
 800bc4a:	2b04      	cmp	r3, #4
 800bc4c:	bf02      	ittt	eq
 800bc4e:	68e5      	ldreq	r5, [r4, #12]
 800bc50:	6833      	ldreq	r3, [r6, #0]
 800bc52:	1aed      	subeq	r5, r5, r3
 800bc54:	68a3      	ldr	r3, [r4, #8]
 800bc56:	bf0c      	ite	eq
 800bc58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc5c:	2500      	movne	r5, #0
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	bfc4      	itt	gt
 800bc62:	1a9b      	subgt	r3, r3, r2
 800bc64:	18ed      	addgt	r5, r5, r3
 800bc66:	2600      	movs	r6, #0
 800bc68:	341a      	adds	r4, #26
 800bc6a:	42b5      	cmp	r5, r6
 800bc6c:	d11a      	bne.n	800bca4 <_printf_common+0xc8>
 800bc6e:	2000      	movs	r0, #0
 800bc70:	e008      	b.n	800bc84 <_printf_common+0xa8>
 800bc72:	2301      	movs	r3, #1
 800bc74:	4652      	mov	r2, sl
 800bc76:	4649      	mov	r1, r9
 800bc78:	4638      	mov	r0, r7
 800bc7a:	47c0      	blx	r8
 800bc7c:	3001      	adds	r0, #1
 800bc7e:	d103      	bne.n	800bc88 <_printf_common+0xac>
 800bc80:	f04f 30ff 	mov.w	r0, #4294967295
 800bc84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc88:	3501      	adds	r5, #1
 800bc8a:	e7c6      	b.n	800bc1a <_printf_common+0x3e>
 800bc8c:	18e1      	adds	r1, r4, r3
 800bc8e:	1c5a      	adds	r2, r3, #1
 800bc90:	2030      	movs	r0, #48	; 0x30
 800bc92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc96:	4422      	add	r2, r4
 800bc98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bca0:	3302      	adds	r3, #2
 800bca2:	e7c7      	b.n	800bc34 <_printf_common+0x58>
 800bca4:	2301      	movs	r3, #1
 800bca6:	4622      	mov	r2, r4
 800bca8:	4649      	mov	r1, r9
 800bcaa:	4638      	mov	r0, r7
 800bcac:	47c0      	blx	r8
 800bcae:	3001      	adds	r0, #1
 800bcb0:	d0e6      	beq.n	800bc80 <_printf_common+0xa4>
 800bcb2:	3601      	adds	r6, #1
 800bcb4:	e7d9      	b.n	800bc6a <_printf_common+0x8e>
	...

0800bcb8 <_printf_i>:
 800bcb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcbc:	7e0f      	ldrb	r7, [r1, #24]
 800bcbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bcc0:	2f78      	cmp	r7, #120	; 0x78
 800bcc2:	4691      	mov	r9, r2
 800bcc4:	4680      	mov	r8, r0
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	469a      	mov	sl, r3
 800bcca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bcce:	d807      	bhi.n	800bce0 <_printf_i+0x28>
 800bcd0:	2f62      	cmp	r7, #98	; 0x62
 800bcd2:	d80a      	bhi.n	800bcea <_printf_i+0x32>
 800bcd4:	2f00      	cmp	r7, #0
 800bcd6:	f000 80d4 	beq.w	800be82 <_printf_i+0x1ca>
 800bcda:	2f58      	cmp	r7, #88	; 0x58
 800bcdc:	f000 80c0 	beq.w	800be60 <_printf_i+0x1a8>
 800bce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bce8:	e03a      	b.n	800bd60 <_printf_i+0xa8>
 800bcea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bcee:	2b15      	cmp	r3, #21
 800bcf0:	d8f6      	bhi.n	800bce0 <_printf_i+0x28>
 800bcf2:	a101      	add	r1, pc, #4	; (adr r1, 800bcf8 <_printf_i+0x40>)
 800bcf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bcf8:	0800bd51 	.word	0x0800bd51
 800bcfc:	0800bd65 	.word	0x0800bd65
 800bd00:	0800bce1 	.word	0x0800bce1
 800bd04:	0800bce1 	.word	0x0800bce1
 800bd08:	0800bce1 	.word	0x0800bce1
 800bd0c:	0800bce1 	.word	0x0800bce1
 800bd10:	0800bd65 	.word	0x0800bd65
 800bd14:	0800bce1 	.word	0x0800bce1
 800bd18:	0800bce1 	.word	0x0800bce1
 800bd1c:	0800bce1 	.word	0x0800bce1
 800bd20:	0800bce1 	.word	0x0800bce1
 800bd24:	0800be69 	.word	0x0800be69
 800bd28:	0800bd91 	.word	0x0800bd91
 800bd2c:	0800be23 	.word	0x0800be23
 800bd30:	0800bce1 	.word	0x0800bce1
 800bd34:	0800bce1 	.word	0x0800bce1
 800bd38:	0800be8b 	.word	0x0800be8b
 800bd3c:	0800bce1 	.word	0x0800bce1
 800bd40:	0800bd91 	.word	0x0800bd91
 800bd44:	0800bce1 	.word	0x0800bce1
 800bd48:	0800bce1 	.word	0x0800bce1
 800bd4c:	0800be2b 	.word	0x0800be2b
 800bd50:	682b      	ldr	r3, [r5, #0]
 800bd52:	1d1a      	adds	r2, r3, #4
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	602a      	str	r2, [r5, #0]
 800bd58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd60:	2301      	movs	r3, #1
 800bd62:	e09f      	b.n	800bea4 <_printf_i+0x1ec>
 800bd64:	6820      	ldr	r0, [r4, #0]
 800bd66:	682b      	ldr	r3, [r5, #0]
 800bd68:	0607      	lsls	r7, r0, #24
 800bd6a:	f103 0104 	add.w	r1, r3, #4
 800bd6e:	6029      	str	r1, [r5, #0]
 800bd70:	d501      	bpl.n	800bd76 <_printf_i+0xbe>
 800bd72:	681e      	ldr	r6, [r3, #0]
 800bd74:	e003      	b.n	800bd7e <_printf_i+0xc6>
 800bd76:	0646      	lsls	r6, r0, #25
 800bd78:	d5fb      	bpl.n	800bd72 <_printf_i+0xba>
 800bd7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bd7e:	2e00      	cmp	r6, #0
 800bd80:	da03      	bge.n	800bd8a <_printf_i+0xd2>
 800bd82:	232d      	movs	r3, #45	; 0x2d
 800bd84:	4276      	negs	r6, r6
 800bd86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd8a:	485a      	ldr	r0, [pc, #360]	; (800bef4 <_printf_i+0x23c>)
 800bd8c:	230a      	movs	r3, #10
 800bd8e:	e012      	b.n	800bdb6 <_printf_i+0xfe>
 800bd90:	682b      	ldr	r3, [r5, #0]
 800bd92:	6820      	ldr	r0, [r4, #0]
 800bd94:	1d19      	adds	r1, r3, #4
 800bd96:	6029      	str	r1, [r5, #0]
 800bd98:	0605      	lsls	r5, r0, #24
 800bd9a:	d501      	bpl.n	800bda0 <_printf_i+0xe8>
 800bd9c:	681e      	ldr	r6, [r3, #0]
 800bd9e:	e002      	b.n	800bda6 <_printf_i+0xee>
 800bda0:	0641      	lsls	r1, r0, #25
 800bda2:	d5fb      	bpl.n	800bd9c <_printf_i+0xe4>
 800bda4:	881e      	ldrh	r6, [r3, #0]
 800bda6:	4853      	ldr	r0, [pc, #332]	; (800bef4 <_printf_i+0x23c>)
 800bda8:	2f6f      	cmp	r7, #111	; 0x6f
 800bdaa:	bf0c      	ite	eq
 800bdac:	2308      	moveq	r3, #8
 800bdae:	230a      	movne	r3, #10
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdb6:	6865      	ldr	r5, [r4, #4]
 800bdb8:	60a5      	str	r5, [r4, #8]
 800bdba:	2d00      	cmp	r5, #0
 800bdbc:	bfa2      	ittt	ge
 800bdbe:	6821      	ldrge	r1, [r4, #0]
 800bdc0:	f021 0104 	bicge.w	r1, r1, #4
 800bdc4:	6021      	strge	r1, [r4, #0]
 800bdc6:	b90e      	cbnz	r6, 800bdcc <_printf_i+0x114>
 800bdc8:	2d00      	cmp	r5, #0
 800bdca:	d04b      	beq.n	800be64 <_printf_i+0x1ac>
 800bdcc:	4615      	mov	r5, r2
 800bdce:	fbb6 f1f3 	udiv	r1, r6, r3
 800bdd2:	fb03 6711 	mls	r7, r3, r1, r6
 800bdd6:	5dc7      	ldrb	r7, [r0, r7]
 800bdd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bddc:	4637      	mov	r7, r6
 800bdde:	42bb      	cmp	r3, r7
 800bde0:	460e      	mov	r6, r1
 800bde2:	d9f4      	bls.n	800bdce <_printf_i+0x116>
 800bde4:	2b08      	cmp	r3, #8
 800bde6:	d10b      	bne.n	800be00 <_printf_i+0x148>
 800bde8:	6823      	ldr	r3, [r4, #0]
 800bdea:	07de      	lsls	r6, r3, #31
 800bdec:	d508      	bpl.n	800be00 <_printf_i+0x148>
 800bdee:	6923      	ldr	r3, [r4, #16]
 800bdf0:	6861      	ldr	r1, [r4, #4]
 800bdf2:	4299      	cmp	r1, r3
 800bdf4:	bfde      	ittt	le
 800bdf6:	2330      	movle	r3, #48	; 0x30
 800bdf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bdfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be00:	1b52      	subs	r2, r2, r5
 800be02:	6122      	str	r2, [r4, #16]
 800be04:	f8cd a000 	str.w	sl, [sp]
 800be08:	464b      	mov	r3, r9
 800be0a:	aa03      	add	r2, sp, #12
 800be0c:	4621      	mov	r1, r4
 800be0e:	4640      	mov	r0, r8
 800be10:	f7ff fee4 	bl	800bbdc <_printf_common>
 800be14:	3001      	adds	r0, #1
 800be16:	d14a      	bne.n	800beae <_printf_i+0x1f6>
 800be18:	f04f 30ff 	mov.w	r0, #4294967295
 800be1c:	b004      	add	sp, #16
 800be1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be22:	6823      	ldr	r3, [r4, #0]
 800be24:	f043 0320 	orr.w	r3, r3, #32
 800be28:	6023      	str	r3, [r4, #0]
 800be2a:	4833      	ldr	r0, [pc, #204]	; (800bef8 <_printf_i+0x240>)
 800be2c:	2778      	movs	r7, #120	; 0x78
 800be2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800be32:	6823      	ldr	r3, [r4, #0]
 800be34:	6829      	ldr	r1, [r5, #0]
 800be36:	061f      	lsls	r7, r3, #24
 800be38:	f851 6b04 	ldr.w	r6, [r1], #4
 800be3c:	d402      	bmi.n	800be44 <_printf_i+0x18c>
 800be3e:	065f      	lsls	r7, r3, #25
 800be40:	bf48      	it	mi
 800be42:	b2b6      	uxthmi	r6, r6
 800be44:	07df      	lsls	r7, r3, #31
 800be46:	bf48      	it	mi
 800be48:	f043 0320 	orrmi.w	r3, r3, #32
 800be4c:	6029      	str	r1, [r5, #0]
 800be4e:	bf48      	it	mi
 800be50:	6023      	strmi	r3, [r4, #0]
 800be52:	b91e      	cbnz	r6, 800be5c <_printf_i+0x1a4>
 800be54:	6823      	ldr	r3, [r4, #0]
 800be56:	f023 0320 	bic.w	r3, r3, #32
 800be5a:	6023      	str	r3, [r4, #0]
 800be5c:	2310      	movs	r3, #16
 800be5e:	e7a7      	b.n	800bdb0 <_printf_i+0xf8>
 800be60:	4824      	ldr	r0, [pc, #144]	; (800bef4 <_printf_i+0x23c>)
 800be62:	e7e4      	b.n	800be2e <_printf_i+0x176>
 800be64:	4615      	mov	r5, r2
 800be66:	e7bd      	b.n	800bde4 <_printf_i+0x12c>
 800be68:	682b      	ldr	r3, [r5, #0]
 800be6a:	6826      	ldr	r6, [r4, #0]
 800be6c:	6961      	ldr	r1, [r4, #20]
 800be6e:	1d18      	adds	r0, r3, #4
 800be70:	6028      	str	r0, [r5, #0]
 800be72:	0635      	lsls	r5, r6, #24
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	d501      	bpl.n	800be7c <_printf_i+0x1c4>
 800be78:	6019      	str	r1, [r3, #0]
 800be7a:	e002      	b.n	800be82 <_printf_i+0x1ca>
 800be7c:	0670      	lsls	r0, r6, #25
 800be7e:	d5fb      	bpl.n	800be78 <_printf_i+0x1c0>
 800be80:	8019      	strh	r1, [r3, #0]
 800be82:	2300      	movs	r3, #0
 800be84:	6123      	str	r3, [r4, #16]
 800be86:	4615      	mov	r5, r2
 800be88:	e7bc      	b.n	800be04 <_printf_i+0x14c>
 800be8a:	682b      	ldr	r3, [r5, #0]
 800be8c:	1d1a      	adds	r2, r3, #4
 800be8e:	602a      	str	r2, [r5, #0]
 800be90:	681d      	ldr	r5, [r3, #0]
 800be92:	6862      	ldr	r2, [r4, #4]
 800be94:	2100      	movs	r1, #0
 800be96:	4628      	mov	r0, r5
 800be98:	f7f4 f9c2 	bl	8000220 <memchr>
 800be9c:	b108      	cbz	r0, 800bea2 <_printf_i+0x1ea>
 800be9e:	1b40      	subs	r0, r0, r5
 800bea0:	6060      	str	r0, [r4, #4]
 800bea2:	6863      	ldr	r3, [r4, #4]
 800bea4:	6123      	str	r3, [r4, #16]
 800bea6:	2300      	movs	r3, #0
 800bea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800beac:	e7aa      	b.n	800be04 <_printf_i+0x14c>
 800beae:	6923      	ldr	r3, [r4, #16]
 800beb0:	462a      	mov	r2, r5
 800beb2:	4649      	mov	r1, r9
 800beb4:	4640      	mov	r0, r8
 800beb6:	47d0      	blx	sl
 800beb8:	3001      	adds	r0, #1
 800beba:	d0ad      	beq.n	800be18 <_printf_i+0x160>
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	079b      	lsls	r3, r3, #30
 800bec0:	d413      	bmi.n	800beea <_printf_i+0x232>
 800bec2:	68e0      	ldr	r0, [r4, #12]
 800bec4:	9b03      	ldr	r3, [sp, #12]
 800bec6:	4298      	cmp	r0, r3
 800bec8:	bfb8      	it	lt
 800beca:	4618      	movlt	r0, r3
 800becc:	e7a6      	b.n	800be1c <_printf_i+0x164>
 800bece:	2301      	movs	r3, #1
 800bed0:	4632      	mov	r2, r6
 800bed2:	4649      	mov	r1, r9
 800bed4:	4640      	mov	r0, r8
 800bed6:	47d0      	blx	sl
 800bed8:	3001      	adds	r0, #1
 800beda:	d09d      	beq.n	800be18 <_printf_i+0x160>
 800bedc:	3501      	adds	r5, #1
 800bede:	68e3      	ldr	r3, [r4, #12]
 800bee0:	9903      	ldr	r1, [sp, #12]
 800bee2:	1a5b      	subs	r3, r3, r1
 800bee4:	42ab      	cmp	r3, r5
 800bee6:	dcf2      	bgt.n	800bece <_printf_i+0x216>
 800bee8:	e7eb      	b.n	800bec2 <_printf_i+0x20a>
 800beea:	2500      	movs	r5, #0
 800beec:	f104 0619 	add.w	r6, r4, #25
 800bef0:	e7f5      	b.n	800bede <_printf_i+0x226>
 800bef2:	bf00      	nop
 800bef4:	0800c0a5 	.word	0x0800c0a5
 800bef8:	0800c0b6 	.word	0x0800c0b6

0800befc <memmove>:
 800befc:	4288      	cmp	r0, r1
 800befe:	b510      	push	{r4, lr}
 800bf00:	eb01 0402 	add.w	r4, r1, r2
 800bf04:	d902      	bls.n	800bf0c <memmove+0x10>
 800bf06:	4284      	cmp	r4, r0
 800bf08:	4623      	mov	r3, r4
 800bf0a:	d807      	bhi.n	800bf1c <memmove+0x20>
 800bf0c:	1e43      	subs	r3, r0, #1
 800bf0e:	42a1      	cmp	r1, r4
 800bf10:	d008      	beq.n	800bf24 <memmove+0x28>
 800bf12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf1a:	e7f8      	b.n	800bf0e <memmove+0x12>
 800bf1c:	4402      	add	r2, r0
 800bf1e:	4601      	mov	r1, r0
 800bf20:	428a      	cmp	r2, r1
 800bf22:	d100      	bne.n	800bf26 <memmove+0x2a>
 800bf24:	bd10      	pop	{r4, pc}
 800bf26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf2e:	e7f7      	b.n	800bf20 <memmove+0x24>

0800bf30 <_sbrk_r>:
 800bf30:	b538      	push	{r3, r4, r5, lr}
 800bf32:	4d06      	ldr	r5, [pc, #24]	; (800bf4c <_sbrk_r+0x1c>)
 800bf34:	2300      	movs	r3, #0
 800bf36:	4604      	mov	r4, r0
 800bf38:	4608      	mov	r0, r1
 800bf3a:	602b      	str	r3, [r5, #0]
 800bf3c:	f7f4 fc96 	bl	800086c <_sbrk>
 800bf40:	1c43      	adds	r3, r0, #1
 800bf42:	d102      	bne.n	800bf4a <_sbrk_r+0x1a>
 800bf44:	682b      	ldr	r3, [r5, #0]
 800bf46:	b103      	cbz	r3, 800bf4a <_sbrk_r+0x1a>
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	bd38      	pop	{r3, r4, r5, pc}
 800bf4c:	20002f18 	.word	0x20002f18

0800bf50 <memcpy>:
 800bf50:	440a      	add	r2, r1
 800bf52:	4291      	cmp	r1, r2
 800bf54:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf58:	d100      	bne.n	800bf5c <memcpy+0xc>
 800bf5a:	4770      	bx	lr
 800bf5c:	b510      	push	{r4, lr}
 800bf5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf66:	4291      	cmp	r1, r2
 800bf68:	d1f9      	bne.n	800bf5e <memcpy+0xe>
 800bf6a:	bd10      	pop	{r4, pc}

0800bf6c <_realloc_r>:
 800bf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf70:	4680      	mov	r8, r0
 800bf72:	4614      	mov	r4, r2
 800bf74:	460e      	mov	r6, r1
 800bf76:	b921      	cbnz	r1, 800bf82 <_realloc_r+0x16>
 800bf78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	f7ff bc49 	b.w	800b814 <_malloc_r>
 800bf82:	b92a      	cbnz	r2, 800bf90 <_realloc_r+0x24>
 800bf84:	f7ff fbda 	bl	800b73c <_free_r>
 800bf88:	4625      	mov	r5, r4
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf90:	f000 f81b 	bl	800bfca <_malloc_usable_size_r>
 800bf94:	4284      	cmp	r4, r0
 800bf96:	4607      	mov	r7, r0
 800bf98:	d802      	bhi.n	800bfa0 <_realloc_r+0x34>
 800bf9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf9e:	d812      	bhi.n	800bfc6 <_realloc_r+0x5a>
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	4640      	mov	r0, r8
 800bfa4:	f7ff fc36 	bl	800b814 <_malloc_r>
 800bfa8:	4605      	mov	r5, r0
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d0ed      	beq.n	800bf8a <_realloc_r+0x1e>
 800bfae:	42bc      	cmp	r4, r7
 800bfb0:	4622      	mov	r2, r4
 800bfb2:	4631      	mov	r1, r6
 800bfb4:	bf28      	it	cs
 800bfb6:	463a      	movcs	r2, r7
 800bfb8:	f7ff ffca 	bl	800bf50 <memcpy>
 800bfbc:	4631      	mov	r1, r6
 800bfbe:	4640      	mov	r0, r8
 800bfc0:	f7ff fbbc 	bl	800b73c <_free_r>
 800bfc4:	e7e1      	b.n	800bf8a <_realloc_r+0x1e>
 800bfc6:	4635      	mov	r5, r6
 800bfc8:	e7df      	b.n	800bf8a <_realloc_r+0x1e>

0800bfca <_malloc_usable_size_r>:
 800bfca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfce:	1f18      	subs	r0, r3, #4
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	bfbc      	itt	lt
 800bfd4:	580b      	ldrlt	r3, [r1, r0]
 800bfd6:	18c0      	addlt	r0, r0, r3
 800bfd8:	4770      	bx	lr
	...

0800bfdc <_init>:
 800bfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfde:	bf00      	nop
 800bfe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfe2:	bc08      	pop	{r3}
 800bfe4:	469e      	mov	lr, r3
 800bfe6:	4770      	bx	lr

0800bfe8 <_fini>:
 800bfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfea:	bf00      	nop
 800bfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfee:	bc08      	pop	{r3}
 800bff0:	469e      	mov	lr, r3
 800bff2:	4770      	bx	lr
