
stm32g474_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010828  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  08010a08  08010a08  00020a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080110cc  080110cc  00030358  2**0
                  CONTENTS
  4 .ARM          00000008  080110cc  080110cc  000210cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080110d4  080110d4  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080110d4  080110d4  000210d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080110d8  080110d8  000210d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  080110dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00030358  2**0
                  CONTENTS
 10 .bss          000032e4  20000358  20000358  00030358  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000363c  2000363c  00030358  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001df82  00000000  00000000  000303cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000056a9  00000000  00000000  0004e34d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001878  00000000  00000000  000539f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000125f  00000000  00000000  00055270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ce38  00000000  00000000  000564cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026ae6  00000000  00000000  00083307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f845f  00000000  00000000  000a9ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000074bc  00000000  00000000  001a224c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001a9708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000358 	.word	0x20000358
 80001fc:	00000000 	.word	0x00000000
 8000200:	080109f0 	.word	0x080109f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000035c 	.word	0x2000035c
 800021c:	080109f0 	.word	0x080109f0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff33 	bl	8000b3c <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fca9 	bl	8000658 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc2a 	bl	8000564 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fca0 	bl	8000658 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff fae2 	bl	80002e8 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <apInit>:
static uint32_t g_LEDOffTime = 200;
static uint32_t nextmill = 0;
*/

void apInit(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  //uartOpen(_DEF_UART1, 115200);
  cliOpen(_DEF_UART1, 115200);
 8001004:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001008:	2000      	movs	r0, #0
 800100a:	f000 fc53 	bl	80018b4 <cliOpen>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}

08001012 <apMain>:

void apMain(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
  uint32_t pre_time1 = millis();
 8001018:	f000 f879 	bl	800110e <millis>
 800101c:	6078      	str	r0, [r7, #4]
  uint32_t pre_time2 = millis();
 800101e:	f000 f876 	bl	800110e <millis>
 8001022:	6038      	str	r0, [r7, #0]
          uartPrintf(_DEF_UART1,"Write Fail\n");
        }
      }
    }
    */
    cliMain();
 8001024:	f000 fcfe 	bl	8001a24 <cliMain>
 8001028:	e7fc      	b.n	8001024 <apMain+0x12>
	...

0800102c <bspInit>:
#include "usb_device.h"

void SystemClock_Config(void);

bool bspInit(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <bspInit+0xc8>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001036:	4a2f      	ldr	r2, [pc, #188]	; (80010f4 <bspInit+0xc8>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6613      	str	r3, [r2, #96]	; 0x60
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <bspInit+0xc8>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]


  HAL_Init();
 800104a:	f002 f991 	bl	8003370 <HAL_Init>
  SystemClock_Config();
 800104e:	f000 f865 	bl	800111c <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001052:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <bspInit+0xc8>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <bspInit+0xc8>)
 8001058:	f043 0320 	orr.w	r3, r3, #32
 800105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <bspInit+0xc8>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <bspInit+0xc8>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4a21      	ldr	r2, [pc, #132]	; (80010f4 <bspInit+0xc8>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <bspInit+0xc8>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  /* USB - RESET 시 장치관리자 해제 연결 안될 시 */

  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]
  // PA12(USB_DP) 출력 설정
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8001098:	2311      	movs	r3, #17
 800109a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ae:	f002 fbc1 	bl	8003834 <HAL_GPIO_Init>

  //회로에 PULL UP 이 걸려있다면 - 내리고
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010bc:	f002 fd3c 	bl	8003b38 <HAL_GPIO_WritePin>
  delay(100);
 80010c0:	2064      	movs	r0, #100	; 0x64
 80010c2:	f000 f819 	bl	80010f8 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d0:	f002 fd32 	bl	8003b38 <HAL_GPIO_WritePin>

  // INPUT 으로 다시 변경
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f002 fba7 	bl	8003834 <HAL_GPIO_Init>

  MX_USB_Device_Init();
 80010e6:	f00b fd3d 	bl	800cb64 <MX_USB_Device_Init>

  return true;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000

080010f8 <delay>:

void delay(uint32_t time_ms)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(time_ms);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f002 f9a5 	bl	8003450 <HAL_Delay>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <millis>:

uint32_t millis(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001112:	f002 f991 	bl	8003438 <HAL_GetTick>
 8001116:	4603      	mov	r3, r0
}
 8001118:	4618      	mov	r0, r3
 800111a:	bd80      	pop	{r7, pc}

0800111c <SystemClock_Config>:


void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b094      	sub	sp, #80	; 0x50
 8001120:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <SystemClock_Config+0xb0>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a29      	ldr	r2, [pc, #164]	; (80011cc <SystemClock_Config+0xb0>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <SystemClock_Config+0xb0>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0318 	add.w	r3, r7, #24
 800113e:	2238      	movs	r2, #56	; 0x38
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f00d fb6c 	bl	800e820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001156:	f44f 7000 	mov.w	r0, #512	; 0x200
 800115a:	f004 fa53 	bl	8005604 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800115e:	2309      	movs	r3, #9
 8001160:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001162:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001166:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001168:	2301      	movs	r3, #1
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116c:	2302      	movs	r3, #2
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001170:	2303      	movs	r3, #3
 8001172:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001174:	2302      	movs	r3, #2
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001178:	2308      	movs	r3, #8
 800117a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800117c:	2302      	movs	r3, #2
 800117e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001180:	2302      	movs	r3, #2
 8001182:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001184:	2302      	movs	r3, #2
 8001186:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0318 	add.w	r3, r7, #24
 800118c:	4618      	mov	r0, r3
 800118e:	f004 fb6f 	bl	8005870 <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001198:	f000 f81a 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	230f      	movs	r3, #15
 800119e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a0:	2303      	movs	r3, #3
 80011a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2101      	movs	r1, #1
 80011b4:	4618      	mov	r0, r3
 80011b6:	f004 fe6d 	bl	8005e94 <HAL_RCC_ClockConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80011c0:	f000 f806 	bl	80011d0 <Error_Handler>
  }
}
 80011c4:	bf00      	nop
 80011c6:	3750      	adds	r7, #80	; 0x50
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021000 	.word	0x40021000

080011d0 <Error_Handler>:


void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_MspInit+0x44>)
 80011e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ea:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <HAL_MspInit+0x44>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6613      	str	r3, [r2, #96]	; 0x60
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_MspInit+0x44>)
 80011f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_MspInit+0x44>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_MspInit+0x44>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6593      	str	r3, [r2, #88]	; 0x58
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_MspInit+0x44>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001216:	f004 fa99 	bl	800574c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	e7fe      	b.n	800122c <NMI_Handler+0x4>

0800122e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <MemManage_Handler+0x4>

0800123a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <UsageFault_Handler+0x4>

08001246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001274:	f002 f8ce 	bl	8003414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <USB_LP_IRQHandler+0x10>)
 8001282:	f002 fd7b 	bl	8003d7c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20002ff4 	.word	0x20002ff4

08001290 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <USART1_IRQHandler+0x10>)
 8001296:	f005 fcdd 	bl	8006c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000a58 	.word	0x20000a58

080012a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return 1;
 80012a8:	2301      	movs	r3, #1
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <_kill>:

int _kill(int pid, int sig)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012be:	f00d fb3b 	bl	800e938 <__errno>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2216      	movs	r2, #22
 80012c6:	601a      	str	r2, [r3, #0]
  return -1;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_exit>:

void _exit (int status)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffe7 	bl	80012b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012e6:	e7fe      	b.n	80012e6 <_exit+0x12>

080012e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	e00a      	b.n	8001310 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012fa:	f3af 8000 	nop.w
 80012fe:	4601      	mov	r1, r0
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	60ba      	str	r2, [r7, #8]
 8001306:	b2ca      	uxtb	r2, r1
 8001308:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	dbf0      	blt.n	80012fa <_read+0x12>
  }

  return len;
 8001318:	687b      	ldr	r3, [r7, #4]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	e009      	b.n	8001348 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	60ba      	str	r2, [r7, #8]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbf1      	blt.n	8001334 <_write+0x12>
  }
  return len;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_close>:

int _close(int file)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001382:	605a      	str	r2, [r3, #4]
  return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <_isatty>:

int _isatty(int file)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f00d faa0 	bl	800e938 <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20020000 	.word	0x20020000
 8001424:	00000400 	.word	0x00000400
 8001428:	20000374 	.word	0x20000374
 800142c:	20003640 	.word	0x20003640

08001430 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <SystemInit+0x20>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <SystemInit+0x20>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001456:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001458:	f7ff ffea 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <LoopForever+0x6>)
  ldr r1, =_edata
 800145e:	490d      	ldr	r1, [pc, #52]	; (8001494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <LoopForever+0xe>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001474:	4c0a      	ldr	r4, [pc, #40]	; (80014a0 <LoopForever+0x16>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001482:	f00d fa5f 	bl	800e944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001486:	f00c f991 	bl	800d7ac <main>

0800148a <LoopForever>:

LoopForever:
  b LoopForever
 800148a:	e7fe      	b.n	800148a <LoopForever>
  ldr   r0, =_estack
 800148c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8001498:	080110dc 	.word	0x080110dc
  ldr r2, =_sbss
 800149c:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 80014a0:	2000363c 	.word	0x2000363c

080014a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC1_2_IRQHandler>

080014a6 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b087      	sub	sp, #28
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80014b2:	2301      	movs	r3, #1
 80014b4:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2201      	movs	r2, #1
 80014cc:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	611a      	str	r2, [r3, #16]

  return ret;
 80014d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <qbufferWrite>:

  return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b08b      	sub	sp, #44	; 0x2c
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80014ee:	2301      	movs	r3, #1
 80014f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t next_in;


  for (int i=0; i<length; i++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
 80014f8:	e043      	b.n	8001582 <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	6892      	ldr	r2, [r2, #8]
 8001504:	fbb3 f1f2 	udiv	r1, r3, r2
 8001508:	fb01 f202 	mul.w	r2, r1, r2
 800150c:	1a9b      	subs	r3, r3, r2
 800150e:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	429a      	cmp	r2, r3
 8001518:	d02c      	beq.n	8001574 <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d024      	beq.n	800156c <qbufferWrite+0x8a>
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d021      	beq.n	800156c <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68f9      	ldr	r1, [r7, #12]
 8001532:	68c9      	ldr	r1, [r1, #12]
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	e00a      	b.n	8001558 <qbufferWrite+0x76>
        {
          p_buf[i] = p_data[i];
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	441a      	add	r2, r3
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	6979      	ldr	r1, [r7, #20]
 800154c:	440b      	add	r3, r1
 800154e:	7812      	ldrb	r2, [r2, #0]
 8001550:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	429a      	cmp	r2, r3
 8001560:	d8ef      	bhi.n	8001542 <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	4413      	add	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e003      	b.n	800157c <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800157a:	e006      	b.n	800158a <qbufferWrite+0xa8>
  for (int i=0; i<length; i++)
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	3301      	adds	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	429a      	cmp	r2, r3
 8001588:	d8b7      	bhi.n	80014fa <qbufferWrite+0x18>
    }
  }

  return ret;
 800158a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800158e:	4618      	mov	r0, r3
 8001590:	372c      	adds	r7, #44	; 0x2c
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800159a:	b480      	push	{r7}
 800159c:	b089      	sub	sp, #36	; 0x24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80015a6:	2301      	movs	r3, #1
 80015a8:	77fb      	strb	r3, [r7, #31]


  for (int i=0; i<length; i++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	e041      	b.n	8001634 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d024      	beq.n	8001602 <qbufferRead+0x68>
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d021      	beq.n	8001602 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	68f9      	ldr	r1, [r7, #12]
 80015c8:	68c9      	ldr	r1, [r1, #12]
 80015ca:	fb01 f303 	mul.w	r3, r1, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e00a      	b.n	80015ee <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	441a      	add	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	440b      	add	r3, r1
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3301      	adds	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d8ef      	bhi.n	80015d8 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	4413      	add	r3, r2
 8001600:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d00c      	beq.n	8001628 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	3301      	adds	r3, #1
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	6892      	ldr	r2, [r2, #8]
 8001618:	fbb3 f1f2 	udiv	r1, r3, r2
 800161c:	fb01 f202 	mul.w	r2, r1, r2
 8001620:	1a9a      	subs	r2, r3, r2
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	e002      	b.n	800162e <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 8001628:	2300      	movs	r3, #0
 800162a:	77fb      	strb	r3, [r7, #31]
      break;
 800162c:	e006      	b.n	800163c <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	3301      	adds	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	d8b9      	bhi.n	80015b0 <qbufferRead+0x16>
    }
  }

  return ret;
 800163c:	7ffb      	ldrb	r3, [r7, #31]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6892      	ldr	r2, [r2, #8]
 8001660:	fbb3 f1f2 	udiv	r1, r3, r2
 8001664:	fb01 f202 	mul.w	r2, r1, r2
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	60fb      	str	r3, [r7, #12]

  return ret;
 800166c:	68fb      	ldr	r3, [r7, #12]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <buttonInit>:
extern void buttonISR(void *arg);
extern bool buttonGetPin(uint8_t ch);


bool buttonInit(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
  bool ret = true;
 8001682:	2301      	movs	r3, #1
 8001684:	76fb      	strb	r3, [r7, #27]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001694:	4b40      	ldr	r3, [pc, #256]	; (8001798 <buttonInit+0x11c>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	4a3f      	ldr	r2, [pc, #252]	; (8001798 <buttonInit+0x11c>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a0:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <buttonInit+0x11c>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]

  for(int i=0; i < BTN_MAX_CH; i++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
 80016b8:	e011      	b.n	80016de <buttonInit+0x62>
  {
    GPIO_InitStruct.Pin = button_pin[i].pin;
 80016ba:	4938      	ldr	r1, [pc, #224]	; (800179c <buttonInit+0x120>)
 80016bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	3304      	adds	r3, #4
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(PC13_BLU_SW_GPIO_Port, &GPIO_InitStruct);
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4833      	ldr	r0, [pc, #204]	; (80017a0 <buttonInit+0x124>)
 80016d4:	f002 f8ae 	bl	8003834 <HAL_GPIO_Init>
  for(int i=0; i < BTN_MAX_CH; i++)
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	3301      	adds	r3, #1
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	ddea      	ble.n	80016ba <buttonInit+0x3e>
  }

  for(int i=0; i < BTN_MAX_CH; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
 80016e8:	e040      	b.n	800176c <buttonInit+0xf0>
  {
    button_tbl[i].pressed = 0;
 80016ea:	4a2e      	ldr	r2, [pc, #184]	; (80017a4 <buttonInit+0x128>)
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	212c      	movs	r1, #44	; 0x2c
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
    button_tbl[i].pressed_cnt = 0;
 80016fa:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <buttonInit+0x128>)
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	212c      	movs	r1, #44	; 0x2c
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	4413      	add	r3, r2
 8001706:	3302      	adds	r3, #2
 8001708:	2200      	movs	r2, #0
 800170a:	801a      	strh	r2, [r3, #0]
    button_tbl[i].pressed_event = 0;
 800170c:	4a25      	ldr	r2, [pc, #148]	; (80017a4 <buttonInit+0x128>)
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	212c      	movs	r1, #44	; 0x2c
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	4413      	add	r3, r2
 8001718:	3301      	adds	r3, #1
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]

    button_tbl[i].released = 0;
 800171e:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <buttonInit+0x128>)
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	212c      	movs	r1, #44	; 0x2c
 8001724:	fb01 f303 	mul.w	r3, r1, r3
 8001728:	4413      	add	r3, r2
 800172a:	330c      	adds	r3, #12
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released_event = 0;
 8001730:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <buttonInit+0x128>)
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	212c      	movs	r1, #44	; 0x2c
 8001736:	fb01 f303 	mul.w	r3, r1, r3
 800173a:	4413      	add	r3, r2
 800173c:	330d      	adds	r3, #13
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]

    button_tbl[i].repeat_cnt = 0;
 8001742:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <buttonInit+0x128>)
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	212c      	movs	r1, #44	; 0x2c
 8001748:	fb01 f303 	mul.w	r3, r1, r3
 800174c:	4413      	add	r3, r2
 800174e:	331c      	adds	r3, #28
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
    button_tbl[i].repeat_update = 0;
 8001754:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <buttonInit+0x128>)
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	212c      	movs	r1, #44	; 0x2c
 800175a:	fb01 f303 	mul.w	r3, r1, r3
 800175e:	4413      	add	r3, r2
 8001760:	3318      	adds	r3, #24
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
  for(int i=0; i < BTN_MAX_CH; i++)
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	3301      	adds	r3, #1
 800176a:	623b      	str	r3, [r7, #32]
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	2b00      	cmp	r3, #0
 8001770:	ddbb      	ble.n	80016ea <buttonInit+0x6e>
  }

  for (int i=0; i<BTN_EVENT_MAX; i++)
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	e007      	b.n	8001788 <buttonInit+0x10c>
  {
   event_tbl[i] = NULL;
 8001778:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <buttonInit+0x12c>)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	2100      	movs	r1, #0
 800177e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i=0; i<BTN_EVENT_MAX; i++)
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3301      	adds	r3, #1
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	2b07      	cmp	r3, #7
 800178c:	ddf4      	ble.n	8001778 <buttonInit+0xfc>
  }
  return ret;
 800178e:	7efb      	ldrb	r3, [r7, #27]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3728      	adds	r7, #40	; 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	08010cd0 	.word	0x08010cd0
 80017a0:	48000800 	.word	0x48000800
 80017a4:	20000378 	.word	0x20000378
 80017a8:	200003a4 	.word	0x200003a4

080017ac <cdcInit>:


static bool is_init = false;

bool cdcInit(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  bool ret = true;
 80017b2:	2301      	movs	r3, #1
 80017b4:	71fb      	strb	r3, [r7, #7]


  ret = cdcIfInit();
 80017b6:	f00b fb2b 	bl	800ce10 <cdcIfInit>
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]

  is_init = ret;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <cdcInit+0x24>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	7013      	strb	r3, [r2, #0]

  return ret;
 80017c4:	79fb      	ldrb	r3, [r7, #7]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200003c4 	.word	0x200003c4

080017d4 <cdcIsConnect>:
{
  return is_init;
}

bool cdcIsConnect(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  return cdcIfIsConnected();
 80017d8:	f00b fbaa 	bl	800cf30 <cdcIfIsConnected>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <cdcAvailable>:

uint32_t cdcAvailable(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
  return cdcIfAvailable();
 80017e6:	f00b fb31 	bl	800ce4c <cdcIfAvailable>
 80017ea:	4603      	mov	r3, r0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <cdcRead>:

uint8_t cdcRead(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  return cdcIfRead();
 80017f4:	f00b fb34 	bl	800ce60 <cdcIfRead>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}

080017fe <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  return cdcIfWrite(p_data, length);
 8001808:	6839      	ldr	r1, [r7, #0]
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f00b fb3a 	bl	800ce84 <cdcIfWrite>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <cliInit+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <cliInit+0x74>)
 8001828:	2200      	movs	r2, #0
 800182a:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <cliInit+0x74>)
 800182e:	2200      	movs	r2, #0
 8001830:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <cliInit+0x74>)
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <cliInit+0x74>)
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <cliInit+0x74>)
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <cliInit+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <cliInit+0x74>)
 8001854:	4a0f      	ldr	r2, [pc, #60]	; (8001894 <cliInit+0x78>)
 8001856:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <cliInit+0x74>)
 800185c:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <cliInit+0x7c>)
 800185e:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <cliInit+0x74>)
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <cliInit+0x80>)
 8001866:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <cliInit+0x74>)
 800186c:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <cliInit+0x84>)
 800186e:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 8001872:	4807      	ldr	r0, [pc, #28]	; (8001890 <cliInit+0x74>)
 8001874:	f000 fb5c 	bl	8001f30 <cliLineClean>


  cliAdd("help", cliShowList);
 8001878:	490a      	ldr	r1, [pc, #40]	; (80018a4 <cliInit+0x88>)
 800187a:	480b      	ldr	r0, [pc, #44]	; (80018a8 <cliInit+0x8c>)
 800187c:	f000 fdf2 	bl	8002464 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001880:	490a      	ldr	r1, [pc, #40]	; (80018ac <cliInit+0x90>)
 8001882:	480b      	ldr	r0, [pc, #44]	; (80018b0 <cliInit+0x94>)
 8001884:	f000 fdee 	bl	8002464 <cliAdd>

  return true;
 8001888:	2301      	movs	r3, #1
}
 800188a:	4618      	mov	r0, r3
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200003c8 	.word	0x200003c8
 8001894:	080022f5 	.word	0x080022f5
 8001898:	08002345 	.word	0x08002345
 800189c:	0800239d 	.word	0x0800239d
 80018a0:	080023e5 	.word	0x080023e5
 80018a4:	080024f9 	.word	0x080024f9
 80018a8:	08010a08 	.word	0x08010a08
 80018ac:	08002569 	.word	0x08002569
 80018b0:	08010a10 	.word	0x08010a10

080018b4 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 80018c0:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <cliOpen+0x38>)
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <cliOpen+0x38>)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	6839      	ldr	r1, [r7, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f001 f9a3 	bl	8002c1c <uartOpen>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <cliOpen+0x38>)
 80018dc:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 80018de:	4b03      	ldr	r3, [pc, #12]	; (80018ec <cliOpen+0x38>)
 80018e0:	7a1b      	ldrb	r3, [r3, #8]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200003c8 	.word	0x200003c8

080018f0 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 80018f8:	4b34      	ldr	r3, [pc, #208]	; (80019cc <cliShowLog+0xdc>)
 80018fa:	7a5b      	ldrb	r3, [r3, #9]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d061      	beq.n	80019c4 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7a98      	ldrb	r0, [r3, #10]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800190a:	461a      	mov	r2, r3
 800190c:	4930      	ldr	r1, [pc, #192]	; (80019d0 <cliShowLog+0xe0>)
 800190e:	f001 fa79 	bl	8002e04 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7a98      	ldrb	r0, [r3, #10]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800191c:	461a      	mov	r2, r3
 800191e:	492d      	ldr	r1, [pc, #180]	; (80019d4 <cliShowLog+0xe4>)
 8001920:	f001 fa70 	bl	8002e04 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7a98      	ldrb	r0, [r3, #10]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800192e:	461a      	mov	r2, r3
 8001930:	4929      	ldr	r1, [pc, #164]	; (80019d8 <cliShowLog+0xe8>)
 8001932:	f001 fa67 	bl	8002e04 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7a98      	ldrb	r0, [r3, #10]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001940:	461a      	mov	r2, r3
 8001942:	4926      	ldr	r1, [pc, #152]	; (80019dc <cliShowLog+0xec>)
 8001944:	f001 fa5e 	bl	8002e04 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7a98      	ldrb	r0, [r3, #10]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001952:	461a      	mov	r2, r3
 8001954:	4922      	ldr	r1, [pc, #136]	; (80019e0 <cliShowLog+0xf0>)
 8001956:	f001 fa55 	bl	8002e04 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7a98      	ldrb	r0, [r3, #10]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001964:	461a      	mov	r2, r3
 8001966:	491f      	ldr	r1, [pc, #124]	; (80019e4 <cliShowLog+0xf4>)
 8001968:	f001 fa4c 	bl	8002e04 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7a98      	ldrb	r0, [r3, #10]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001976:	461a      	mov	r2, r3
 8001978:	491b      	ldr	r1, [pc, #108]	; (80019e8 <cliShowLog+0xf8>)
 800197a:	f001 fa43 	bl	8002e04 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e012      	b.n	80019aa <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7a98      	ldrb	r0, [r3, #10]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4613      	mov	r3, r2
 800198c:	015b      	lsls	r3, r3, #5
 800198e:	4413      	add	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4913      	ldr	r1, [pc, #76]	; (80019ec <cliShowLog+0xfc>)
 80019a0:	f001 fa30 	bl	8002e04 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3301      	adds	r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80019b0:	461a      	mov	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4293      	cmp	r3, r2
 80019b6:	dbe5      	blt.n	8001984 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7a9b      	ldrb	r3, [r3, #10]
 80019bc:	490c      	ldr	r1, [pc, #48]	; (80019f0 <cliShowLog+0x100>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f001 fa20 	bl	8002e04 <uartPrintf>
  }
}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200003c8 	.word	0x200003c8
 80019d0:	08010a14 	.word	0x08010a14
 80019d4:	08010a24 	.word	0x08010a24
 80019d8:	08010a34 	.word	0x08010a34
 80019dc:	08010a44 	.word	0x08010a44
 80019e0:	08010a54 	.word	0x08010a54
 80019e4:	08010a64 	.word	0x08010a64
 80019e8:	08010a74 	.word	0x08010a74
 80019ec:	08010a84 	.word	0x08010a84
 80019f0:	08010a94 	.word	0x08010a94

080019f4 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4906      	ldr	r1, [pc, #24]	; (8001a1c <cliShowPrompt+0x28>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	f001 f9fe 	bl	8002e04 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4904      	ldr	r1, [pc, #16]	; (8001a20 <cliShowPrompt+0x2c>)
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 f9f8 	bl	8002e04 <uartPrintf>
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	08010a98 	.word	0x08010a98
 8001a20:	08010a9c 	.word	0x08010a9c

08001a24 <cliMain>:

bool cliMain(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <cliMain+0x40>)
 8001a2a:	7a1b      	ldrb	r3, [r3, #8]
 8001a2c:	f083 0301 	eor.w	r3, r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <cliMain+0x16>
  {
    return false;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e012      	b.n	8001a60 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <cliMain+0x40>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f001 f980 	bl	8002d44 <uartAvailable>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <cliMain+0x40>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f001 f996 	bl	8002d80 <uartRead>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4619      	mov	r1, r3
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <cliMain+0x40>)
 8001a5a:	f000 f805 	bl	8001a68 <cliUpdate>
  }

  return true;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200003c8 	.word	0x200003c8

08001a68 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001a80:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7c1b      	ldrb	r3, [r3, #16]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 816d 	bne.w	8001d66 <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a90:	d02a      	beq.n	8001ae8 <cliUpdate+0x80>
 8001a92:	2b7f      	cmp	r3, #127	; 0x7f
 8001a94:	f300 80da 	bgt.w	8001c4c <cliUpdate+0x1e4>
 8001a98:	2b1b      	cmp	r3, #27
 8001a9a:	d021      	beq.n	8001ae0 <cliUpdate+0x78>
 8001a9c:	2b1b      	cmp	r3, #27
 8001a9e:	f300 80d5 	bgt.w	8001c4c <cliUpdate+0x1e4>
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d062      	beq.n	8001b6c <cliUpdate+0x104>
 8001aa6:	2b0d      	cmp	r3, #13
 8001aa8:	f040 80d0 	bne.w	8001c4c <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fa54 	bl	8001f64 <cliLineAdd>
          cliRunCmd(p_cli);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fb1f 	bl	8002100 <cliRunCmd>
        }

        line->count = 0;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff8b 	bl	80019f4 <cliShowPrompt>
        break;
 8001ade:	e142      	b.n	8001d66 <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	741a      	strb	r2, [r3, #16]
        break;
 8001ae6:	e13e      	b.n	8001d66 <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001af4:	429a      	cmp	r2, r3
 8001af6:	f080 8131 	bcs.w	8001d5c <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b0e:	e013      	b.n	8001b38 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b16:	461a      	mov	r2, r3
 8001b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1a:	441a      	add	r2, r3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b22:	4619      	mov	r1, r3
 8001b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b26:	440b      	add	r3, r1
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	69f9      	ldr	r1, [r7, #28]
 8001b2c:	5c89      	ldrb	r1, [r1, r2]
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b34:	3301      	adds	r3, #1
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b38:	7efb      	ldrb	r3, [r7, #27]
 8001b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbe7      	blt.n	8001b10 <cliUpdate+0xa8>
          }

          line->count--;
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b56:	461a      	mov	r2, r3
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	498d      	ldr	r1, [pc, #564]	; (8001d98 <cliUpdate+0x330>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f001 f94d 	bl	8002e04 <uartPrintf>
        }
        break;
 8001b6a:	e0f7      	b.n	8001d5c <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d055      	beq.n	8001c22 <cliUpdate+0x1ba>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d050      	beq.n	8001c22 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d10e      	bne.n	8001bae <cliUpdate+0x146>
          {
            line->count--;
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	2100      	movs	r1, #0
 8001bac:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d231      	bcs.n	8001c22 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bd2:	e013      	b.n	8001bfc <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bda:	461a      	mov	r2, r3
 8001bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bde:	441a      	add	r2, r3
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be6:	4619      	mov	r1, r3
 8001be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bea:	440b      	add	r3, r1
 8001bec:	3b01      	subs	r3, #1
 8001bee:	69f9      	ldr	r1, [r7, #28]
 8001bf0:	5c89      	ldrb	r1, [r1, r2]
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bfc:	7ebb      	ldrb	r3, [r7, #26]
 8001bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbe7      	blt.n	8001bd4 <cliUpdate+0x16c>
            }

            line->count--;
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2100      	movs	r1, #0
 8001c20:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 8099 	beq.w	8001d60 <cliUpdate+0x2f8>
        {
          line->cursor--;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	4956      	ldr	r1, [pc, #344]	; (8001d9c <cliUpdate+0x334>)
 8001c44:	4618      	mov	r0, r3
 8001c46:	f001 f8dd 	bl	8002e04 <uartPrintf>
        }
        break;
 8001c4a:	e089      	b.n	8001d60 <cliUpdate+0x2f8>
      default:
        if ((line->count + 1) < line->buf_len)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c52:	3301      	adds	r3, #1
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	f280 8082 	bge.w	8001d64 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d124      	bne.n	8001cba <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	1cf9      	adds	r1, r7, #3
 8001c76:	2201      	movs	r2, #1
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f001 f8a1 	bl	8002dc0 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c84:	461a      	mov	r2, r3
 8001c86:	78f9      	ldrb	r1, [r7, #3]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c92:	3301      	adds	r3, #1
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d24c      	bcs.n	8001d64 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cde:	e013      	b.n	8001d08 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	1e5a      	subs	r2, r3, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	1acb      	subs	r3, r1, r3
 8001cfa:	69f9      	ldr	r1, [r7, #28]
 8001cfc:	5c89      	ldrb	r1, [r1, r2]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3301      	adds	r3, #1
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	7e7b      	ldrb	r3, [r7, #25]
 8001d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbe7      	blt.n	8001ce0 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d16:	461a      	mov	r2, r3
 8001d18:	78f9      	ldrb	r1, [r7, #3]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d24:	3301      	adds	r3, #1
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d34:	3301      	adds	r3, #1
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d44:	461a      	mov	r2, r3
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	2100      	movs	r1, #0
 8001d4a:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	4913      	ldr	r1, [pc, #76]	; (8001da0 <cliUpdate+0x338>)
 8001d54:	4618      	mov	r0, r3
 8001d56:	f001 f855 	bl	8002e04 <uartPrintf>
          }
        }
        break;
 8001d5a:	e003      	b.n	8001d64 <cliUpdate+0x2fc>
        break;
 8001d5c:	bf00      	nop
 8001d5e:	e002      	b.n	8001d66 <cliUpdate+0x2fe>
        break;
 8001d60:	bf00      	nop
 8001d62:	e000      	b.n	8001d66 <cliUpdate+0x2fe>
        break;
 8001d64:	bf00      	nop
    }
  }

  switch(p_cli->state)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	7c1b      	ldrb	r3, [r3, #16]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	f200 80d2 	bhi.w	8001f16 <cliUpdate+0x4ae>
 8001d72:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <cliUpdate+0x310>)
 8001d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d78:	08001d89 	.word	0x08001d89
 8001d7c:	08001d91 	.word	0x08001d91
 8001d80:	08001da5 	.word	0x08001da5
 8001d84:	08001f0d 	.word	0x08001f0d
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	741a      	strb	r2, [r3, #16]
      break;
 8001d8e:	e0c2      	b.n	8001f16 <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2203      	movs	r2, #3
 8001d94:	741a      	strb	r2, [r3, #16]
      break;
 8001d96:	e0be      	b.n	8001f16 <cliUpdate+0x4ae>
 8001d98:	08010aa4 	.word	0x08010aa4
 8001d9c:	08010aac 	.word	0x08010aac
 8001da0:	08010ab4 	.word	0x08010ab4

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	2b44      	cmp	r3, #68	; 0x44
 8001dae:	d11a      	bne.n	8001de6 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d015      	beq.n	8001de6 <cliUpdate+0x37e>
        {
          line->cursor--;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8001dca:	231b      	movs	r3, #27
 8001dcc:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001dce:	235b      	movs	r3, #91	; 0x5b
 8001dd0:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	f107 010c 	add.w	r1, r7, #12
 8001dde:	2203      	movs	r2, #3
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 ffed 	bl	8002dc0 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	2b43      	cmp	r3, #67	; 0x43
 8001dea:	d11d      	bne.n	8001e28 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d215      	bcs.n	8001e28 <cliUpdate+0x3c0>
        {
          line->cursor++;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e02:	3301      	adds	r3, #1
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 8001e0c:	231b      	movs	r3, #27
 8001e0e:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001e10:	235b      	movs	r3, #91	; 0x5b
 8001e12:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f107 010c 	add.w	r1, r7, #12
 8001e20:	2203      	movs	r2, #3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 ffcc 	bl	8002dc0 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	2b41      	cmp	r3, #65	; 0x41
 8001e2c:	d10c      	bne.n	8001e48 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8001e2e:	2101      	movs	r1, #1
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8db 	bl	8001fec <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f000 ffde 	bl	8002e04 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	2b42      	cmp	r3, #66	; 0x42
 8001e4c:	d10c      	bne.n	8001e68 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8001e4e:	2100      	movs	r1, #0
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f8cb 	bl	8001fec <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f000 ffce 	bl	8002e04 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	2b31      	cmp	r3, #49	; 0x31
 8001e6c:	d10f      	bne.n	8001e8e <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7818      	ldrb	r0, [r3, #0]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e78:	461a      	mov	r2, r3
 8001e7a:	492b      	ldr	r1, [pc, #172]	; (8001f28 <cliUpdate+0x4c0>)
 8001e7c:	f000 ffc2 	bl	8002e04 <uartPrintf>
        line->cursor = 0;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	2b34      	cmp	r3, #52	; 0x34
 8001e92:	d13f      	bne.n	8001f14 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d210      	bcs.n	8001ec6 <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	8afa      	ldrh	r2, [r7, #22]
 8001ebe:	491b      	ldr	r1, [pc, #108]	; (8001f2c <cliUpdate+0x4c4>)
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 ff9f 	bl	8002e04 <uartPrintf>
        }
        if (line->cursor > line->count)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d910      	bls.n	8001ef8 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	8afa      	ldrh	r2, [r7, #22]
 8001ef0:	490d      	ldr	r1, [pc, #52]	; (8001f28 <cliUpdate+0x4c0>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 ff86 	bl	8002e04 <uartPrintf>
        }
        line->cursor = line->count;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2204      	movs	r2, #4
 8001f08:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001f0a:	e003      	b.n	8001f14 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	741a      	strb	r2, [r3, #16]
      break;
 8001f12:	e000      	b.n	8001f16 <cliUpdate+0x4ae>
      break;
 8001f14:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff fcea 	bl	80018f0 <cliShowLog>

  return ret;
 8001f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3730      	adds	r7, #48	; 0x30
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	08010ac0 	.word	0x08010ac0
 8001f2c:	08010ac8 	.word	0x08010ac8

08001f30 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	223f      	movs	r2, #63	; 0x3f
 8001f4c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001f72:	461a      	mov	r2, r3
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	015b      	lsls	r3, r3, #5
 8001f7a:	4413      	add	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	440b      	add	r3, r1
 8001f82:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4610      	mov	r0, r2
 8001f8a:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001f8e:	2243      	movs	r2, #67	; 0x43
 8001f90:	4619      	mov	r1, r3
 8001f92:	f00c fd06 	bl	800e9a2 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d807      	bhi.n	8001fb0 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001fb6:	b25a      	sxtb	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	425a      	negs	r2, r3
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	f002 0203 	and.w	r2, r2, #3
 8001fd0:	bf58      	it	pl
 8001fd2:	4253      	negpl	r3, r2
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d076      	beq.n	80020f0 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7818      	ldrb	r0, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8002016:	461a      	mov	r2, r3
 8002018:	4937      	ldr	r1, [pc, #220]	; (80020f8 <cliLineChange+0x10c>)
 800201a:	f000 fef3 	bl	8002e04 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7818      	ldrb	r0, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8002032:	461a      	mov	r2, r3
 8002034:	4931      	ldr	r1, [pc, #196]	; (80020fc <cliLineChange+0x110>)
 8002036:	f000 fee5 	bl	8002e04 <uartPrintf>
  }


  if (key_up == true)
 800203a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d125      	bne.n	800208e <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002052:	b25a      	sxtb	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002060:	461a      	mov	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002068:	4413      	add	r3, r2
 800206a:	3b01      	subs	r3, #1
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8002072:	fb93 f1f2 	sdiv	r1, r3, r2
 8002076:	fb01 f202 	mul.w	r2, r1, r2
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	b25a      	sxtb	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e013      	b.n	80020b6 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002094:	3301      	adds	r3, #1
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800209c:	fb93 f1f2 	sdiv	r1, r3, r2
 80020a0:	fb01 f202 	mul.w	r2, r1, r2
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	b25a      	sxtb	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80020b4:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	015b      	lsls	r3, r3, #5
 80020c0:	4413      	add	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4413      	add	r3, r2
 80020c6:	4403      	add	r3, r0
 80020c8:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 80020cc:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 80020d0:	4611      	mov	r1, r2
 80020d2:	2243      	movs	r2, #67	; 0x43
 80020d4:	4618      	mov	r0, r3
 80020d6:	f00c fc64 	bl	800e9a2 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

  p_cli->hist_line_new = false;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 80020ee:	e000      	b.n	80020f2 <cliLineChange+0x106>
    return;
 80020f0:	bf00      	nop
}
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	08010ac0 	.word	0x08010ac0
 80020fc:	08010ad0 	.word	0x08010ad0

08002100 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002108:	2300      	movs	r3, #0
 800210a:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f851 	bl	80021b4 <cliParseArgs>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d046      	beq.n	80021a6 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8002118:	4825      	ldr	r0, [pc, #148]	; (80021b0 <cliRunCmd+0xb0>)
 800211a:	f000 f893 	bl	8002244 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002124:	4618      	mov	r0, r3
 8002126:	f000 f8b1 	bl	800228c <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	e033      	b.n	8002198 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	4413      	add	r3, r2
 8002148:	3304      	adds	r3, #4
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe f868 	bl	8000220 <strcmp>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d11d      	bne.n	8002192 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 800218c:	4610      	mov	r0, r2
 800218e:	4798      	blx	r3
        break;
 8002190:	e009      	b.n	80021a6 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3301      	adds	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800219e:	461a      	mov	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4293      	cmp	r3, r2
 80021a4:	dbc4      	blt.n	8002130 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 80021a6:	7afb      	ldrb	r3, [r7, #11]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	08010ad8 	.word	0x08010ad8

080021b4 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80021bc:	2300      	movs	r3, #0
 80021be:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80021d2:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80021da:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 80021dc:	8afb      	ldrh	r3, [r7, #22]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <cliParseArgs+0x8c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f107 0208 	add.w	r2, r7, #8
 80021f0:	4619      	mov	r1, r3
 80021f2:	6938      	ldr	r0, [r7, #16]
 80021f4:	f00c fb56 	bl	800e8a4 <strtok_r>
 80021f8:	61b8      	str	r0, [r7, #24]
 80021fa:	e010      	b.n	800221e <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 80021fc:	8afb      	ldrh	r3, [r7, #22]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	82fa      	strh	r2, [r7, #22]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <cliParseArgs+0x8c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f107 0208 	add.w	r2, r7, #8
 8002214:	4619      	mov	r1, r3
 8002216:	2000      	movs	r0, #0
 8002218:	f00c fb44 	bl	800e8a4 <strtok_r>
 800221c:	61b8      	str	r0, [r7, #24]
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1eb      	bne.n	80021fc <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	8afa      	ldrh	r2, [r7, #22]
 8002228:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 800222c:	8afb      	ldrh	r3, [r7, #22]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <cliParseArgs+0x82>
  {
    ret = true;
 8002232:	2301      	movs	r3, #1
 8002234:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8002236:	7ffb      	ldrb	r3, [r7, #31]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000004 	.word	0x20000004

08002244 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8002244:	b40f      	push	{r0, r1, r2, r3}
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <cliPrintf+0x44>)
 8002254:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f103 0011 	add.w	r0, r3, #17
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002264:	f00c face 	bl	800e804 <vsniprintf>
 8002268:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	7818      	ldrb	r0, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3311      	adds	r3, #17
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	4619      	mov	r1, r3
 8002276:	f000 fda3 	bl	8002dc0 <uartWrite>
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002284:	b004      	add	sp, #16
 8002286:	4770      	bx	lr
 8002288:	200003c8 	.word	0x200003c8

0800228c <cliToUpper>:

void cliToUpper(char *str)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002294:	2300      	movs	r3, #0
 8002296:	81fb      	strh	r3, [r7, #14]
 8002298:	e018      	b.n	80022cc <cliToUpper+0x40>
  {
    str_ch = str[i];
 800229a:	89fb      	ldrh	r3, [r7, #14]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80022a4:	7b7b      	ldrb	r3, [r7, #13]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d014      	beq.n	80022d4 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80022aa:	7b7b      	ldrb	r3, [r7, #13]
 80022ac:	2b60      	cmp	r3, #96	; 0x60
 80022ae:	d905      	bls.n	80022bc <cliToUpper+0x30>
 80022b0:	7b7b      	ldrb	r3, [r7, #13]
 80022b2:	2b7a      	cmp	r3, #122	; 0x7a
 80022b4:	d802      	bhi.n	80022bc <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 80022b6:	7b7b      	ldrb	r3, [r7, #13]
 80022b8:	3b20      	subs	r3, #32
 80022ba:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 80022bc:	89fb      	ldrh	r3, [r7, #14]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	7b7a      	ldrb	r2, [r7, #13]
 80022c4:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80022c6:	89fb      	ldrh	r3, [r7, #14]
 80022c8:	3301      	adds	r3, #1
 80022ca:	81fb      	strh	r3, [r7, #14]
 80022cc:	89fb      	ldrh	r3, [r7, #14]
 80022ce:	2b0f      	cmp	r3, #15
 80022d0:	d9e3      	bls.n	800229a <cliToUpper+0xe>
 80022d2:	e000      	b.n	80022d6 <cliToUpper+0x4a>
      break;
 80022d4:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 80022d6:	89fb      	ldrh	r3, [r7, #14]
 80022d8:	2b10      	cmp	r3, #16
 80022da:	d105      	bne.n	80022e8 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 80022dc:	89fb      	ldrh	r3, [r7, #14]
 80022de:	3b01      	subs	r3, #1
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
  }
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <cliArgsGetData+0x4c>)
 8002304:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	b29a      	uxth	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002310:	429a      	cmp	r2, r3
 8002312:	d301      	bcc.n	8002318 <cliArgsGetData+0x24>
  {
    return 0;
 8002314:	2300      	movs	r3, #0
 8002316:	e00e      	b.n	8002336 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f00c f930 	bl	800e590 <strtoul>
 8002330:	4603      	mov	r3, r0
 8002332:	60fb      	str	r3, [r7, #12]

  return ret;
 8002334:	68fb      	ldr	r3, [r7, #12]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	200003c8 	.word	0x200003c8

08002344 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002354:	4b10      	ldr	r3, [pc, #64]	; (8002398 <cliArgsGetFloat+0x54>)
 8002356:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	b29a      	uxth	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002362:	429a      	cmp	r2, r3
 8002364:	d302      	bcc.n	800236c <cliArgsGetFloat+0x28>
  {
    return 0;
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	e00d      	b.n	8002388 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2100      	movs	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f00c f82f 	bl	800e3e0 <strtof>
 8002382:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8002386:	68fb      	ldr	r3, [r7, #12]
}
 8002388:	ee07 3a90 	vmov	s15, r3
 800238c:	eeb0 0a67 	vmov.f32	s0, s15
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200003c8 	.word	0x200003c8

0800239c <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <cliArgsGetStr+0x44>)
 80023ac:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d301      	bcc.n	80023c0 <cliArgsGetStr+0x24>
  {
    return 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	e008      	b.n	80023d2 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60fb      	str	r3, [r7, #12]

  return ret;
 80023d0:	68fb      	ldr	r3, [r7, #12]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	200003c8 	.word	0x200003c8

080023e4 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <cliArgsIsStr+0x50>)
 80023f6:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002402:	429a      	cmp	r2, r3
 8002404:	d301      	bcc.n	800240a <cliArgsIsStr+0x26>
  {
    return 0;
 8002406:	2300      	movs	r3, #0
 8002408:	e010      	b.n	800242c <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4619      	mov	r1, r3
 800241a:	6838      	ldr	r0, [r7, #0]
 800241c:	f7fd ff00 	bl	8000220 <strcmp>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <cliArgsIsStr+0x46>
  {
    ret = true;
 8002426:	2301      	movs	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800242a:	7bfb      	ldrb	r3, [r7, #15]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200003c8 	.word	0x200003c8

08002438 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <cliKeepLoop+0x28>)
 8002440:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fc7c 	bl	8002d44 <uartAvailable>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <cliKeepLoop+0x1e>
  {
    return true;
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8002456:	2300      	movs	r3, #0
  }
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200003c8 	.word	0x200003c8

08002464 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800246e:	2301      	movs	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8002472:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <cliAdd+0x90>)
 8002474:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800247c:	2b0f      	cmp	r3, #15
 800247e:	d901      	bls.n	8002484 <cliAdd+0x20>
  {
    return false;
 8002480:	2300      	movs	r3, #0
 8002482:	e032      	b.n	80024ea <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800248a:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800248c:	89fa      	ldrh	r2, [r7, #14]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4413      	add	r3, r2
 800249e:	3304      	adds	r3, #4
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f00c fa75 	bl	800e992 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80024a8:	89fa      	ldrh	r2, [r7, #14]
 80024aa:	6939      	ldr	r1, [r7, #16]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80024be:	89fa      	ldrh	r2, [r7, #14]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	3304      	adds	r3, #4
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff feda 	bl	800228c <cliToUpper>

  p_cli->cmd_count++;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80024de:	3301      	adds	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200003c8 	.word	0x200003c8

080024f8 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002500:	4b15      	ldr	r3, [pc, #84]	; (8002558 <cliShowList+0x60>)
 8002502:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002504:	4815      	ldr	r0, [pc, #84]	; (800255c <cliShowList+0x64>)
 8002506:	f7ff fe9d 	bl	8002244 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800250a:	4815      	ldr	r0, [pc, #84]	; (8002560 <cliShowList+0x68>)
 800250c:	f7ff fe9a 	bl	8002244 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	e012      	b.n	800253c <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	4413      	add	r3, r2
 8002528:	3304      	adds	r3, #4
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fe8a 	bl	8002244 <cliPrintf>
    cliPrintf("\r\n");
 8002530:	480a      	ldr	r0, [pc, #40]	; (800255c <cliShowList+0x64>)
 8002532:	f7ff fe87 	bl	8002244 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3301      	adds	r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4293      	cmp	r3, r2
 8002548:	dbe5      	blt.n	8002516 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800254a:	4806      	ldr	r0, [pc, #24]	; (8002564 <cliShowList+0x6c>)
 800254c:	f7ff fe7a 	bl	8002244 <cliPrintf>
}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	200003c8 	.word	0x200003c8
 800255c:	08010ad8 	.word	0x08010ad8
 8002560:	08010adc 	.word	0x08010adc
 8002564:	08010afc 	.word	0x08010afc

08002568 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	; 0x30
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002570:	2310      	movs	r3, #16
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d103      	bne.n	8002590 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8002588:	4840      	ldr	r0, [pc, #256]	; (800268c <cliMemoryDump+0x124>)
 800258a:	f7ff fe5b 	bl	8002244 <cliPrintf>
 800258e:	e07a      	b.n	8002686 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b01      	cmp	r3, #1
 8002594:	dd09      	ble.n	80025aa <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	3304      	adds	r3, #4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2200      	movs	r2, #0
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f00b fff5 	bl	800e590 <strtoul>
 80025a6:	4603      	mov	r3, r0
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f00b ffec 	bl	800e590 <strtoul>
 80025b8:	4603      	mov	r3, r0
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 80025c0:	4833      	ldr	r0, [pc, #204]	; (8002690 <cliMemoryDump+0x128>)
 80025c2:	f7ff fe3f 	bl	8002244 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ca:	e058      	b.n	800267e <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d104      	bne.n	80025e0 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	4619      	mov	r1, r3
 80025da:	482e      	ldr	r0, [pc, #184]	; (8002694 <cliMemoryDump+0x12c>)
 80025dc:	f7ff fe32 	bl	8002244 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	482c      	ldr	r0, [pc, #176]	; (8002698 <cliMemoryDump+0x130>)
 80025e8:	f7ff fe2c 	bl	8002244 <cliPrintf>

    if ((idx%4) == 3)
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	425a      	negs	r2, r3
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	f002 0203 	and.w	r2, r2, #3
 80025f8:	bf58      	it	pl
 80025fa:	4253      	negpl	r3, r2
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d138      	bne.n	8002672 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8002600:	4826      	ldr	r0, [pc, #152]	; (800269c <cliMemoryDump+0x134>)
 8002602:	f7ff fe1f 	bl	8002244 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
 800260a:	e02c      	b.n	8002666 <cliMemoryDump+0xfe>
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002610:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	e01d      	b.n	8002654 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8002618:	f107 020c 	add.w	r2, r7, #12
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	4413      	add	r3, r2
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b1f      	cmp	r3, #31
 8002624:	d910      	bls.n	8002648 <cliMemoryDump+0xe0>
 8002626:	f107 020c 	add.w	r2, r7, #12
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	4413      	add	r3, r2
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b7e      	cmp	r3, #126	; 0x7e
 8002632:	d809      	bhi.n	8002648 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8002634:	f107 020c 	add.w	r2, r7, #12
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	4413      	add	r3, r2
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	4619      	mov	r1, r3
 8002640:	4817      	ldr	r0, [pc, #92]	; (80026a0 <cliMemoryDump+0x138>)
 8002642:	f7ff fdff 	bl	8002244 <cliPrintf>
 8002646:	e002      	b.n	800264e <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8002648:	4816      	ldr	r0, [pc, #88]	; (80026a4 <cliMemoryDump+0x13c>)
 800264a:	f7ff fdfb 	bl	8002244 <cliPrintf>
        for (i=0;i<4;i++)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3301      	adds	r3, #1
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	2b03      	cmp	r3, #3
 8002658:	ddde      	ble.n	8002618 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	3304      	adds	r3, #4
 800265e:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	3301      	adds	r3, #1
 8002664:	623b      	str	r3, [r7, #32]
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	2b03      	cmp	r3, #3
 800266a:	ddcf      	ble.n	800260c <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 800266c:	480e      	ldr	r0, [pc, #56]	; (80026a8 <cliMemoryDump+0x140>)
 800266e:	f7ff fde9 	bl	8002244 <cliPrintf>
    }
    addr++;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	3304      	adds	r3, #4
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8002678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267a:	3301      	adds	r3, #1
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800267e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	429a      	cmp	r2, r3
 8002684:	dba2      	blt.n	80025cc <cliMemoryDump+0x64>
  }
}
 8002686:	3730      	adds	r7, #48	; 0x30
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	08010b1c 	.word	0x08010b1c
 8002690:	08010b30 	.word	0x08010b30
 8002694:	08010b38 	.word	0x08010b38
 8002698:	08010b44 	.word	0x08010b44
 800269c:	08010b4c 	.word	0x08010b4c
 80026a0:	08010b50 	.word	0x08010b50
 80026a4:	08010b54 	.word	0x08010b54
 80026a8:	08010b58 	.word	0x08010b58

080026ac <flashInit>:


static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
  bool ret = true;
 80026b2:	2301      	movs	r3, #1
 80026b4:	71fb      	strb	r3, [r7, #7]

  return true;
 80026b6:	2301      	movs	r3, #1
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <ledInit>:
#ifdef _USE_HW_CLI
static void cliLed(cli_args_t *args);
#endif

bool ledInit(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 80026ca:	f107 0308 	add.w	r3, r7, #8
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]
 80026d8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	4b1c      	ldr	r3, [pc, #112]	; (800274c <ledInit+0x88>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026de:	4a1b      	ldr	r2, [pc, #108]	; (800274c <ledInit+0x88>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e6:	4b19      	ldr	r3, [pc, #100]	; (800274c <ledInit+0x88>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80026f2:	2301      	movs	r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	e017      	b.n	8002734 <ledInit+0x70>
  {
    GPIO_InitStructure.Pin = led_tbl[i].pin;
 8002704:	4a12      	ldr	r2, [pc, #72]	; (8002750 <ledInit+0x8c>)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	889b      	ldrh	r3, [r3, #4]
 800270e:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 8002710:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <ledInit+0x8c>)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002718:	f107 0208 	add.w	r2, r7, #8
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f001 f888 	bl	8003834 <HAL_GPIO_Init>

    ledOff(i);
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	4618      	mov	r0, r3
 800272a:	f000 f837 	bl	800279c <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3301      	adds	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b00      	cmp	r3, #0
 8002738:	dde4      	ble.n	8002704 <ledInit+0x40>
  }
#ifdef _USE_HW_CLI
  cliAdd("LED", cliLed);
 800273a:	4906      	ldr	r1, [pc, #24]	; (8002754 <ledInit+0x90>)
 800273c:	4806      	ldr	r0, [pc, #24]	; (8002758 <ledInit+0x94>)
 800273e:	f7ff fe91 	bl	8002464 <cliAdd>
#endif
  return true;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	08010cdc 	.word	0x08010cdc
 8002754:	0800280d 	.word	0x0800280d
 8002758:	08010b68 	.word	0x08010b68

0800275c <ledOn>:


void ledOn(uint8_t ch)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d111      	bne.n	8002790 <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <ledOn+0x3c>)
 8002770:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	4a08      	ldr	r2, [pc, #32]	; (8002798 <ledOn+0x3c>)
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	8899      	ldrh	r1, [r3, #4]
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	4a05      	ldr	r2, [pc, #20]	; (8002798 <ledOn+0x3c>)
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	799b      	ldrb	r3, [r3, #6]
 8002788:	461a      	mov	r2, r3
 800278a:	f001 f9d5 	bl	8003b38 <HAL_GPIO_WritePin>
 800278e:	e000      	b.n	8002792 <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 8002790:	bf00      	nop
}
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	08010cdc 	.word	0x08010cdc

0800279c <ledOff>:

void ledOff(uint8_t ch)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10d      	bne.n	80027c8 <ledOff+0x2c>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <ledOff+0x34>)
 80027b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	4a06      	ldr	r2, [pc, #24]	; (80027d0 <ledOff+0x34>)
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	889b      	ldrh	r3, [r3, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	4619      	mov	r1, r3
 80027c2:	f001 f9b9 	bl	8003b38 <HAL_GPIO_WritePin>
 80027c6:	e000      	b.n	80027ca <ledOff+0x2e>
  if (ch >= LED_MAX_CH) return;
 80027c8:	bf00      	nop
}
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	08010cdc 	.word	0x08010cdc

080027d4 <ledToggle>:

void ledToggle(uint8_t ch)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10d      	bne.n	8002800 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	4a08      	ldr	r2, [pc, #32]	; (8002808 <ledToggle+0x34>)
 80027e8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	4906      	ldr	r1, [pc, #24]	; (8002808 <ledToggle+0x34>)
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	889b      	ldrh	r3, [r3, #4]
 80027f6:	4619      	mov	r1, r3
 80027f8:	4610      	mov	r0, r2
 80027fa:	f001 f9b5 	bl	8003b68 <HAL_GPIO_TogglePin>
 80027fe:	e000      	b.n	8002802 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8002800:	bf00      	nop
}
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	08010cdc 	.word	0x08010cdc

0800280c <cliLed>:
  gpio->ODR ^= GPIO_Pin;
}

#ifdef _USE_HW_CLI
void cliLed(cli_args_t *args)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002814:	2300      	movs	r3, #0
 8002816:	75fb      	strb	r3, [r7, #23]

  if (args-> argc == 2 && args->isStr(0, "on") == true)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d11e      	bne.n	800285e <cliLed+0x52>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	4944      	ldr	r1, [pc, #272]	; (8002938 <cliLed+0x12c>)
 8002826:	2000      	movs	r0, #0
 8002828:	4798      	blx	r3
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d016      	beq.n	800285e <cliLed+0x52>
  {
    uint8_t led_ch;

    led_ch = args->getData(1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2001      	movs	r0, #1
 8002836:	4798      	blx	r3
 8002838:	4603      	mov	r3, r0
 800283a:	75bb      	strb	r3, [r7, #22]

    if(led_ch > 0)
 800283c:	7dbb      	ldrb	r3, [r7, #22]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <cliLed+0x46>
    {
      led_ch--;
 8002842:	7dbb      	ldrb	r3, [r7, #22]
 8002844:	3b01      	subs	r3, #1
 8002846:	75bb      	strb	r3, [r7, #22]
    }
    while(cliKeepLoop())
 8002848:	e003      	b.n	8002852 <cliLed+0x46>
    {
      ledOn(led_ch);
 800284a:	7dbb      	ldrb	r3, [r7, #22]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff85 	bl	800275c <ledOn>
    while(cliKeepLoop())
 8002852:	f7ff fdf1 	bl	8002438 <cliKeepLoop>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f6      	bne.n	800284a <cliLed+0x3e>
  {
 800285c:	e05a      	b.n	8002914 <cliLed+0x108>
    }
  }
  else if (args-> argc == 2 && args->isStr(0, "off") == true)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d11e      	bne.n	80028a4 <cliLed+0x98>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	4934      	ldr	r1, [pc, #208]	; (800293c <cliLed+0x130>)
 800286c:	2000      	movs	r0, #0
 800286e:	4798      	blx	r3
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <cliLed+0x98>
    {
      uint8_t led_ch;

      led_ch = args->getData(1);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2001      	movs	r0, #1
 800287c:	4798      	blx	r3
 800287e:	4603      	mov	r3, r0
 8002880:	757b      	strb	r3, [r7, #21]

      if(led_ch > 0)
 8002882:	7d7b      	ldrb	r3, [r7, #21]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <cliLed+0x8c>
      {
        led_ch--;
 8002888:	7d7b      	ldrb	r3, [r7, #21]
 800288a:	3b01      	subs	r3, #1
 800288c:	757b      	strb	r3, [r7, #21]
      }
      while(cliKeepLoop())
 800288e:	e003      	b.n	8002898 <cliLed+0x8c>
      {
        ledOff(led_ch);
 8002890:	7d7b      	ldrb	r3, [r7, #21]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff82 	bl	800279c <ledOff>
      while(cliKeepLoop())
 8002898:	f7ff fdce 	bl	8002438 <cliKeepLoop>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f6      	bne.n	8002890 <cliLed+0x84>
    {
 80028a2:	e037      	b.n	8002914 <cliLed+0x108>
      }
    }
  else if (args->argc == 3 && args->isStr(0, "toggle") == true)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d133      	bne.n	8002914 <cliLed+0x108>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	4923      	ldr	r1, [pc, #140]	; (8002940 <cliLed+0x134>)
 80028b2:	2000      	movs	r0, #0
 80028b4:	4798      	blx	r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d02b      	beq.n	8002914 <cliLed+0x108>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = args->getData(1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2001      	movs	r0, #1
 80028c2:	4798      	blx	r3
 80028c4:	4603      	mov	r3, r0
 80028c6:	753b      	strb	r3, [r7, #20]
    toggle_time = args->getData(2);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2002      	movs	r0, #2
 80028ce:	4798      	blx	r3
 80028d0:	4603      	mov	r3, r0
 80028d2:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 80028d4:	7d3b      	ldrb	r3, [r7, #20]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <cliLed+0xd4>
    {
      led_ch--;
 80028da:	7d3b      	ldrb	r3, [r7, #20]
 80028dc:	3b01      	subs	r3, #1
 80028de:	753b      	strb	r3, [r7, #20]
    }

    pre_time = millis();
 80028e0:	f7fe fc15 	bl	800110e <millis>
 80028e4:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 80028e6:	e00e      	b.n	8002906 <cliLed+0xfa>
    {
      if (millis()-pre_time >= toggle_time)
 80028e8:	f7fe fc11 	bl	800110e <millis>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d806      	bhi.n	8002906 <cliLed+0xfa>
      {
        pre_time = millis();
 80028f8:	f7fe fc09 	bl	800110e <millis>
 80028fc:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 80028fe:	7d3b      	ldrb	r3, [r7, #20]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff67 	bl	80027d4 <ledToggle>
    while(cliKeepLoop())
 8002906:	f7ff fd97 	bl	8002438 <cliKeepLoop>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1eb      	bne.n	80028e8 <cliLed+0xdc>
      }
    }
    ret = true;
 8002910:	2301      	movs	r3, #1
 8002912:	75fb      	strb	r3, [r7, #23]
  }
  if (ret != true)
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	f083 0301 	eor.w	r3, r3, #1
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <cliLed+0x124>
  {
    cliPrintf("led On/Off ch[1~%d]\n", LED_MAX_CH);
 8002920:	2101      	movs	r1, #1
 8002922:	4808      	ldr	r0, [pc, #32]	; (8002944 <cliLed+0x138>)
 8002924:	f7ff fc8e 	bl	8002244 <cliPrintf>
    cliPrintf("led toggle ch[1~%d] time(ms)\n", LED_MAX_CH);
 8002928:	2101      	movs	r1, #1
 800292a:	4807      	ldr	r0, [pc, #28]	; (8002948 <cliLed+0x13c>)
 800292c:	f7ff fc8a 	bl	8002244 <cliPrintf>
  }
}
 8002930:	bf00      	nop
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	08010b6c 	.word	0x08010b6c
 800293c:	08010b70 	.word	0x08010b70
 8002940:	08010b74 	.word	0x08010b74
 8002944:	08010b7c 	.word	0x08010b7c
 8002948:	08010b94 	.word	0x08010b94

0800294c <logInit>:
static osMutexId mutex_lock;
#endif


bool logInit(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
#ifdef _USE_HW_ROTS
  osMutexDef(mutex_lock);
  mutex_lock = osMutexCreate (osMutex(mutex_lock));
#endif

  return true;
 8002950:	2301      	movs	r3, #1
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <logPrintf>:

void logPrintf(const char *fmt, ...)
{
 800295c:	b40f      	push	{r0, r1, r2, r3}
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
#endif

  va_list args;
  int len;

  va_start(args, fmt);
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	603b      	str	r3, [r7, #0]
  len = vsnprintf(print_buf, 256, fmt, args);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002972:	4809      	ldr	r0, [pc, #36]	; (8002998 <logPrintf+0x3c>)
 8002974:	f00b ff46 	bl	800e804 <vsniprintf>
 8002978:	6078      	str	r0, [r7, #4]

  uartWrite(log_ch, (uint8_t *)print_buf, len);
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <logPrintf+0x40>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4905      	ldr	r1, [pc, #20]	; (8002998 <logPrintf+0x3c>)
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fa1c 	bl	8002dc0 <uartWrite>
  va_end(args);

#ifdef _USE_HW_ROTS
  osMutexRelease(mutex_lock);
#endif
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002992:	b004      	add	sp, #16
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000810 	.word	0x20000810
 800299c:	2000080c 	.word	0x2000080c

080029a0 <resetInit>:
  }
}


bool resetInit(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
  bool ret = true;
 80029a6:	2301      	movs	r3, #1
 80029a8:	71bb      	strb	r3, [r7, #6]
  bool is_debug = false;
 80029aa:	2300      	movs	r3, #0
 80029ac:	71fb      	strb	r3, [r7, #7]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 80029ae:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <resetInit+0x80>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <resetInit+0x1e>
  {
    is_debug = true;
 80029ba:	2301      	movs	r3, #1
 80029bc:	71fb      	strb	r3, [r7, #7]
  }

  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if (RCC->CSR & (1<<26) && is_debug != true)
 80029be:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <resetInit+0x84>)
 80029c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01f      	beq.n	8002a0c <resetInit+0x6c>
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	f083 0301 	eor.w	r3, r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d019      	beq.n	8002a0c <resetInit+0x6c>
  if(RCC->CSR & (1<<26))
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <resetInit+0x84>)
 80029da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d012      	beq.n	8002a0c <resetInit+0x6c>
  {
    rtcBackupRegWrite(RESET_REG_COUNT, rtcBackupRegRead(RESET_REG_COUNT) + 1);
 80029e6:	2001      	movs	r0, #1
 80029e8:	f000 f8a2 	bl	8002b30 <rtcBackupRegRead>
 80029ec:	4603      	mov	r3, r0
 80029ee:	3301      	adds	r3, #1
 80029f0:	4619      	mov	r1, r3
 80029f2:	2001      	movs	r0, #1
 80029f4:	f000 f8ac 	bl	8002b50 <rtcBackupRegWrite>
    delay(500);
 80029f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029fc:	f7fe fb7c 	bl	80010f8 <delay>
    reset_count = rtcBackupRegRead(RESET_REG_COUNT);
 8002a00:	2001      	movs	r0, #1
 8002a02:	f000 f895 	bl	8002b30 <rtcBackupRegRead>
 8002a06:	4603      	mov	r3, r0
 8002a08:	4a07      	ldr	r2, [pc, #28]	; (8002a28 <resetInit+0x88>)
 8002a0a:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  rtcBackupRegWrite(RESET_REG_COUNT, 0);
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f000 f89e 	bl	8002b50 <rtcBackupRegWrite>

  return ret;
 8002a14:	79bb      	ldrb	r3, [r7, #6]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	e000edf0 	.word	0xe000edf0
 8002a24:	40021000 	.word	0x40021000
 8002a28:	20000910 	.word	0x20000910

08002a2c <resetGetCount>:

uint32_t resetGetCount(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return reset_count;
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <resetGetCount+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000910 	.word	0x20000910

08002a44 <resetToSystemBoot>:
    run_timeout_count = timeout;
  }
}

void resetToSystemBoot(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
  void (*SysMemBootJump)(void);
  volatile uint32_t addr = 0x1FFF0000; // System Boot Loader 주소
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <resetToSystemBoot+0x7c>)
 8002a4c:	603b      	str	r3, [r7, #0]


  HAL_RCC_DeInit();
 8002a4e:	f002 fe8d 	bl	800576c <HAL_RCC_DeInit>

  SysTick->CTRL = 0;
 8002a52:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <resetToSystemBoot+0x80>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8002a58:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <resetToSystemBoot+0x80>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	605a      	str	r2, [r3, #4]
  SysTick->VAL  = 0;
 8002a5e:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <resetToSystemBoot+0x80>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]

  // 인터럽트
  for (int i=0;i<8;i++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e016      	b.n	8002a98 <resetToSystemBoot+0x54>
  {
    NVIC->ICER[i]=0xFFFFFFFF;
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <resetToSystemBoot+0x84>)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	3320      	adds	r3, #32
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295
 8002a74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NVIC->ICPR[i]=0xFFFFFFFF;
 8002a78:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <resetToSystemBoot+0x84>)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3360      	adds	r3, #96	; 0x60
 8002a7e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a86:	f3bf 8f4f 	dsb	sy
}
 8002a8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a8c:	f3bf 8f6f 	isb	sy
}
 8002a90:	bf00      	nop
  for (int i=0;i<8;i++)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3301      	adds	r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b07      	cmp	r3, #7
 8002a9c:	dde5      	ble.n	8002a6a <resetToSystemBoot+0x26>
    __DSB();
    __ISB();
  }

  SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60bb      	str	r3, [r7, #8]

  // Main Stack 주소 셋팅
  __set_MSP(*(uint32_t *)addr);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f383 8808 	msr	MSP, r3
}
 8002ab2:	bf00      	nop
  // Jump
  SysMemBootJump();
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4798      	blx	r3
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	1fff0000 	.word	0x1fff0000
 8002ac4:	e000e010 	.word	0xe000e010
 8002ac8:	e000e100 	.word	0xe000e100

08002acc <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
  bool ret = true;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	71fb      	strb	r3, [r7, #7]


  hrtc.Instance = RTC;
 8002ad6:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <rtcInit+0x5c>)
 8002ad8:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <rtcInit+0x60>)
 8002ada:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <rtcInit+0x5c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <rtcInit+0x5c>)
 8002ae4:	227f      	movs	r2, #127	; 0x7f
 8002ae6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <rtcInit+0x5c>)
 8002aea:	22ff      	movs	r2, #255	; 0xff
 8002aec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <rtcInit+0x5c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <rtcInit+0x5c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <rtcInit+0x5c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <rtcInit+0x5c>)
 8002b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b06:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002b08:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <rtcInit+0x5c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b0e:	4806      	ldr	r0, [pc, #24]	; (8002b28 <rtcInit+0x5c>)
 8002b10:	f003 fe2a 	bl	8006768 <HAL_RTC_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <rtcInit+0x52>
  {
    return false;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e000      	b.n	8002b20 <rtcInit+0x54>
  }

  return ret;
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000914 	.word	0x20000914
 8002b2c:	40002800 	.word	0x40002800

08002b30 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4804      	ldr	r0, [pc, #16]	; (8002b4c <rtcBackupRegRead+0x1c>)
 8002b3c:	f003 ff4a 	bl	80069d4 <HAL_RTCEx_BKUPRead>
 8002b40:	4603      	mov	r3, r0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000914 	.word	0x20000914

08002b50 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4803      	ldr	r0, [pc, #12]	; (8002b6c <rtcBackupRegWrite+0x1c>)
 8002b60:	f003 ff20 	bl	80069a4 <HAL_RTCEx_BKUPWrite>
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000914 	.word	0x20000914

08002b70 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b098      	sub	sp, #96	; 0x60
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	2254      	movs	r2, #84	; 0x54
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f00b fe4d 	bl	800e820 <memset>
  if(rtcHandle->Instance==RTC)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a15      	ldr	r2, [pc, #84]	; (8002be0 <HAL_RTC_MspInit+0x70>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d123      	bne.n	8002bd8 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b94:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f003 fb93 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002bac:	f7fe fb10 	bl	80011d0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <HAL_RTC_MspInit+0x74>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	4a0b      	ldr	r2, [pc, #44]	; (8002be4 <HAL_RTC_MspInit+0x74>)
 8002bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <HAL_RTC_MspInit+0x74>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <HAL_RTC_MspInit+0x74>)
 8002bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bca:	6593      	str	r3, [r2, #88]	; 0x58
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RTC_MspInit+0x74>)
 8002bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002bd8:	bf00      	nop
 8002bda:	3760      	adds	r7, #96	; 0x60
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40002800 	.word	0x40002800
 8002be4:	40021000 	.word	0x40021000

08002be8 <uartInit>:
UART_HandleTypeDef huart1;



bool uartInit(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
  for(int i = 0; i <UART_MAX_CH; i++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	e007      	b.n	8002c04 <uartInit+0x1c>
  {
    is_open[i] = false;
 8002bf4:	4a08      	ldr	r2, [pc, #32]	; (8002c18 <uartInit+0x30>)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i <UART_MAX_CH; i++)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3301      	adds	r3, #1
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	ddf4      	ble.n	8002bf4 <uartInit+0xc>
  }

  return true;
 8002c0a:	2301      	movs	r3, #1
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	2000093c 	.word	0x2000093c

08002c1c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
  bool ret =false;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d176      	bne.n	8002d20 <uartOpen+0x104>
  {
    case _DEF_UART1:
      huart1.Instance = USART1;
 8002c32:	4b3e      	ldr	r3, [pc, #248]	; (8002d2c <uartOpen+0x110>)
 8002c34:	4a3e      	ldr	r2, [pc, #248]	; (8002d30 <uartOpen+0x114>)
 8002c36:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 8002c38:	4a3c      	ldr	r2, [pc, #240]	; (8002d2c <uartOpen+0x110>)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6053      	str	r3, [r2, #4]
      huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <uartOpen+0x110>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c44:	4b39      	ldr	r3, [pc, #228]	; (8002d2c <uartOpen+0x110>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	619a      	str	r2, [r3, #24]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8002c4a:	4b38      	ldr	r3, [pc, #224]	; (8002d2c <uartOpen+0x110>)
 8002c4c:	220c      	movs	r2, #12
 8002c4e:	615a      	str	r2, [r3, #20]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c50:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <uartOpen+0x110>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]
      huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c56:	4b35      	ldr	r3, [pc, #212]	; (8002d2c <uartOpen+0x110>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	621a      	str	r2, [r3, #32]
      huart1.Init.Parity = UART_PARITY_NONE;
 8002c5c:	4b33      	ldr	r3, [pc, #204]	; (8002d2c <uartOpen+0x110>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8002c62:	4b32      	ldr	r3, [pc, #200]	; (8002d2c <uartOpen+0x110>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	60da      	str	r2, [r3, #12]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c68:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <uartOpen+0x110>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c6e:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <uartOpen+0x110>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
      qbufferCreate(&qbuffer[ch],&rx_buf[ch], 256); // 수신 버퍼 생성
 8002c74:	79fa      	ldrb	r2, [r7, #7]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4a2d      	ldr	r2, [pc, #180]	; (8002d34 <uartOpen+0x118>)
 8002c80:	1898      	adds	r0, r3, r2
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	4a2c      	ldr	r2, [pc, #176]	; (8002d38 <uartOpen+0x11c>)
 8002c86:	4413      	add	r3, r2
 8002c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f7fe fc0a 	bl	80014a6 <qbufferCreate>
      if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c92:	4826      	ldr	r0, [pc, #152]	; (8002d2c <uartOpen+0x110>)
 8002c94:	f003 feb4 	bl	8006a00 <HAL_UART_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <uartOpen+0x88>
      {
        ret = false;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
 8002ca2:	e016      	b.n	8002cd2 <uartOpen+0xb6>
      }
      else
      {
        ret = true;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	4a24      	ldr	r2, [pc, #144]	; (8002d3c <uartOpen+0x120>)
 8002cac:	2101      	movs	r1, #1
 8002cae:	54d1      	strb	r1, [r2, r3]
        // 수신용 데이터 버퍼 (rx_data)에 size 만큼 받아서 HAL_UART_RxCpltCallback 함수 호출
        if(HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[ch], 1) != HAL_OK)
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	4a23      	ldr	r2, [pc, #140]	; (8002d40 <uartOpen+0x124>)
 8002cb4:	4413      	add	r3, r2
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4619      	mov	r1, r3
 8002cba:	481c      	ldr	r0, [pc, #112]	; (8002d2c <uartOpen+0x110>)
 8002cbc:	f003 ff7e 	bl	8006bbc <HAL_UART_Receive_IT>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <uartOpen+0xb6>
        {
         ret = false;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	73fb      	strb	r3, [r7, #15]
         is_open[ch] = false;
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <uartOpen+0x120>)
 8002cce:	2100      	movs	r1, #0
 8002cd0:	54d1      	strb	r1, [r2, r3]
        }
      }
      if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4815      	ldr	r0, [pc, #84]	; (8002d2c <uartOpen+0x110>)
 8002cd6:	f005 feea 	bl	8008aae <HAL_UARTEx_SetTxFifoThreshold>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <uartOpen+0xd0>
      {
        ret = false;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <uartOpen+0x120>)
 8002ce8:	2100      	movs	r1, #0
 8002cea:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cec:	2100      	movs	r1, #0
 8002cee:	480f      	ldr	r0, [pc, #60]	; (8002d2c <uartOpen+0x110>)
 8002cf0:	f005 ff1b 	bl	8008b2a <HAL_UARTEx_SetRxFifoThreshold>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <uartOpen+0xea>
      {
        ret = false;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	4a0e      	ldr	r2, [pc, #56]	; (8002d3c <uartOpen+0x120>)
 8002d02:	2100      	movs	r1, #0
 8002d04:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d06:	4809      	ldr	r0, [pc, #36]	; (8002d2c <uartOpen+0x110>)
 8002d08:	f005 fe98 	bl	8008a3c <HAL_UARTEx_DisableFifoMode>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <uartOpen+0x102>
      {
        ret = false;
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <uartOpen+0x120>)
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	54d1      	strb	r1, [r2, r3]
      }
      break;
 8002d1e:	bf00      	nop
  }


  return ret;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000a58 	.word	0x20000a58
 8002d30:	40013800 	.word	0x40013800
 8002d34:	20000940 	.word	0x20000940
 8002d38:	20000954 	.word	0x20000954
 8002d3c:	2000093c 	.word	0x2000093c
 8002d40:	20000a54 	.word	0x20000a54

08002d44 <uartAvailable>:
{
  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10b      	bne.n	8002d70 <uartAvailable+0x2c>
  {
    case _DEF_UART1:
      ret = qbufferAvailable(&qbuffer[ch]);
 8002d58:	79fa      	ldrb	r2, [r7, #7]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4a06      	ldr	r2, [pc, #24]	; (8002d7c <uartAvailable+0x38>)
 8002d64:	4413      	add	r3, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe fc6f 	bl	800164a <qbufferAvailable>
 8002d6c:	60f8      	str	r0, [r7, #12]
      break;
 8002d6e:	bf00      	nop
  }

  return ret;
 8002d70:	68fb      	ldr	r3, [r7, #12]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000940 	.word	0x20000940

08002d80 <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	73fb      	strb	r3, [r7, #15]
  switch(ch)
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10d      	bne.n	8002db0 <uartRead+0x30>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[ch],&ret,1);
 8002d94:	79fa      	ldrb	r2, [r7, #7]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <uartRead+0x3c>)
 8002da0:	4413      	add	r3, r2
 8002da2:	f107 010f 	add.w	r1, r7, #15
 8002da6:	2201      	movs	r2, #1
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe fbf6 	bl	800159a <qbufferRead>
      break;
 8002dae:	bf00      	nop
  }

  return ret;
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000940 	.word	0x20000940

08002dc0 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;
  switch(ch)
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10e      	bne.n	8002df6 <uartWrite+0x36>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	2364      	movs	r3, #100	; 0x64
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	4807      	ldr	r0, [pc, #28]	; (8002e00 <uartWrite+0x40>)
 8002de2:	f003 fe5d 	bl	8006aa0 <HAL_UART_Transmit>
 8002de6:	4603      	mov	r3, r0
 8002de8:	74fb      	strb	r3, [r7, #19]
      if(status == HAL_OK)
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <uartWrite+0x34>
      {
        ret = length;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	617b      	str	r3, [r7, #20]
      }
      break;
 8002df4:	bf00      	nop
  }

  return ret;
 8002df6:	697b      	ldr	r3, [r7, #20]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000a58 	.word	0x20000a58

08002e04 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8002e04:	b40e      	push	{r1, r2, r3}
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b0c7      	sub	sp, #284	; 0x11c
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e12:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002e16:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8002e18:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8002e1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e24:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8002e26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e2e:	f107 0010 	add.w	r0, r7, #16
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e3c:	f00b fce2 	bl	800e804 <vsniprintf>
 8002e40:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8002e44:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002e48:	f107 0110 	add.w	r1, r7, #16
 8002e4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e50:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ffb2 	bl	8002dc0 <uartWrite>
 8002e5c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8002e60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e70:	b003      	add	sp, #12
 8002e72:	4770      	bx	lr

08002e74 <HAL_UART_ErrorCallback>:

  return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
  {

  }
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a08      	ldr	r2, [pc, #32]	; (8002eb8 <HAL_UART_RxCpltCallback+0x30>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d109      	bne.n	8002eae <HAL_UART_RxCpltCallback+0x26>
  {
    // 빠르게 송신시 1 바이트 사용시 인터럽트가 많이 걸려서 처리가 늦어져 overrun (덮어쓰기 에러) , 데이터 손실 에러 발생 가능
    // 고속의 송수신 - DMA 방식을 사용
    qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4907      	ldr	r1, [pc, #28]	; (8002ebc <HAL_UART_RxCpltCallback+0x34>)
 8002e9e:	4808      	ldr	r0, [pc, #32]	; (8002ec0 <HAL_UART_RxCpltCallback+0x38>)
 8002ea0:	f7fe fb1f 	bl	80014e2 <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[_DEF_UART1], 1);
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	4905      	ldr	r1, [pc, #20]	; (8002ebc <HAL_UART_RxCpltCallback+0x34>)
 8002ea8:	4806      	ldr	r0, [pc, #24]	; (8002ec4 <HAL_UART_RxCpltCallback+0x3c>)
 8002eaa:	f003 fe87 	bl	8006bbc <HAL_UART_Receive_IT>
  }
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	20000a54 	.word	0x20000a54
 8002ec0:	20000940 	.word	0x20000940
 8002ec4:	20000a58 	.word	0x20000a58

08002ec8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b09e      	sub	sp, #120	; 0x78
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ee0:	f107 0310 	add.w	r3, r7, #16
 8002ee4:	2254      	movs	r2, #84	; 0x54
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f00b fc99 	bl	800e820 <memset>
  if(uartHandle->Instance==USART1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a22      	ldr	r2, [pc, #136]	; (8002f7c <HAL_UART_MspInit+0xb4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d13d      	bne.n	8002f74 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f00:	f107 0310 	add.w	r3, r7, #16
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 f9e1 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f10:	f7fe f95e 	bl	80011d0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_UART_MspInit+0xb8>)
 8002f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f18:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_UART_MspInit+0xb8>)
 8002f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f1e:	6613      	str	r3, [r2, #96]	; 0x60
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <HAL_UART_MspInit+0xb8>)
 8002f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <HAL_UART_MspInit+0xb8>)
 8002f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f30:	4a13      	ldr	r2, [pc, #76]	; (8002f80 <HAL_UART_MspInit+0xb8>)
 8002f32:	f043 0304 	orr.w	r3, r3, #4
 8002f36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_UART_MspInit+0xb8>)
 8002f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC4_USART1_TX_Pin|PC5_USART1_RX_Pin;
 8002f44:	2330      	movs	r3, #48	; 0x30
 8002f46:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f54:	2307      	movs	r3, #7
 8002f56:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4809      	ldr	r0, [pc, #36]	; (8002f84 <HAL_UART_MspInit+0xbc>)
 8002f60:	f000 fc68 	bl	8003834 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f64:	2200      	movs	r2, #0
 8002f66:	2100      	movs	r1, #0
 8002f68:	2025      	movs	r0, #37	; 0x25
 8002f6a:	f000 fb6e 	bl	800364a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f6e:	2025      	movs	r0, #37	; 0x25
 8002f70:	f000 fb85 	bl	800367e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f74:	bf00      	nop
 8002f76:	3778      	adds	r7, #120	; 0x78
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40013800 	.word	0x40013800
 8002f80:	40021000 	.word	0x40021000
 8002f84:	48000800 	.word	0x48000800

08002f88 <usbInit>:
#endif



bool usbInit(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
  bool ret = true;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	71fb      	strb	r3, [r7, #7]


#ifdef _USE_HW_CLI
  cliAdd("usb", cliCmd);
 8002f92:	4904      	ldr	r1, [pc, #16]	; (8002fa4 <usbInit+0x1c>)
 8002f94:	4804      	ldr	r0, [pc, #16]	; (8002fa8 <usbInit+0x20>)
 8002f96:	f7ff fa65 	bl	8002464 <cliAdd>
#endif
  return ret;
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	08003091 	.word	0x08003091
 8002fa8:	08010bb4 	.word	0x08010bb4

08002fac <usbIsOpen>:
    USBD_DeInit(&hUsbDeviceFS);
  }
}

bool usbIsOpen(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  return cdcIsConnect();
 8002fb0:	f7fe fc10 	bl	80017d4 <cdcIsConnect>
 8002fb4:	4603      	mov	r3, r0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <usbIsConnect>:

bool usbIsConnect(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.pClassData == NULL)
 8002fc0:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <usbIsConnect+0x3c>)
 8002fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <usbIsConnect+0x12>
  {
    return false;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e00e      	b.n	8002fec <usbIsConnect+0x30>
  }
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <usbIsConnect+0x3c>)
 8002fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d001      	beq.n	8002fde <usbIsConnect+0x22>
  {
    return false;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e006      	b.n	8002fec <usbIsConnect+0x30>
  }
  if (hUsbDeviceFS.dev_config == 0)
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <usbIsConnect+0x3c>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <usbIsConnect+0x2e>
  {
    return false;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e000      	b.n	8002fec <usbIsConnect+0x30>
  }

  return true;
 8002fea:	2301      	movs	r3, #1
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20000af8 	.word	0x20000af8

08002ffc <usbBegin>:
{
  return is_usb_mode;
}

bool usbBegin(UsbMode usb_mode)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]


#if HW_USE_CDC == 1

  if (usb_mode == USB_CDC_MODE)
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d12a      	bne.n	8003066 <usbBegin+0x6a>
  {
    if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 8003010:	2200      	movs	r2, #0
 8003012:	4919      	ldr	r1, [pc, #100]	; (8003078 <usbBegin+0x7c>)
 8003014:	4819      	ldr	r0, [pc, #100]	; (800307c <usbBegin+0x80>)
 8003016:	f008 fc85 	bl	800b924 <USBD_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <usbBegin+0x28>
    {
      return false;
 8003020:	2300      	movs	r3, #0
 8003022:	e024      	b.n	800306e <usbBegin+0x72>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003024:	4916      	ldr	r1, [pc, #88]	; (8003080 <usbBegin+0x84>)
 8003026:	4815      	ldr	r0, [pc, #84]	; (800307c <usbBegin+0x80>)
 8003028:	f008 fcac 	bl	800b984 <USBD_RegisterClass>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <usbBegin+0x3a>
    {
      return false;
 8003032:	2300      	movs	r3, #0
 8003034:	e01b      	b.n	800306e <usbBegin+0x72>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003036:	4913      	ldr	r1, [pc, #76]	; (8003084 <usbBegin+0x88>)
 8003038:	4810      	ldr	r0, [pc, #64]	; (800307c <usbBegin+0x80>)
 800303a:	f008 fbfd 	bl	800b838 <USBD_CDC_RegisterInterface>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <usbBegin+0x4c>
    {
      return false;
 8003044:	2300      	movs	r3, #0
 8003046:	e012      	b.n	800306e <usbBegin+0x72>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003048:	480c      	ldr	r0, [pc, #48]	; (800307c <usbBegin+0x80>)
 800304a:	f008 fcc2 	bl	800b9d2 <USBD_Start>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <usbBegin+0x5c>
    {
      return false;
 8003054:	2300      	movs	r3, #0
 8003056:	e00a      	b.n	800306e <usbBegin+0x72>
    }


    cdcInit();
 8003058:	f7fe fba8 	bl	80017ac <cdcInit>

    is_usb_mode = USB_CDC_MODE;
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <usbBegin+0x8c>)
 800305e:	2201      	movs	r2, #1
 8003060:	701a      	strb	r2, [r3, #0]
    ret = true;
 8003062:	2301      	movs	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
    ret = true;
  }
#endif


  is_init = ret;
 8003066:	4a09      	ldr	r2, [pc, #36]	; (800308c <usbBegin+0x90>)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	7013      	strb	r3, [r2, #0]

  return ret;
 800306c:	7bfb      	ldrb	r3, [r7, #15]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	2000013c 	.word	0x2000013c
 800307c:	20000af8 	.word	0x20000af8
 8003080:	2000001c 	.word	0x2000001c
 8003084:	20000128 	.word	0x20000128
 8003088:	20000aed 	.word	0x20000aed
 800308c:	20000aec 	.word	0x20000aec

08003090 <cliCmd>:


#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	; 0x28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003098:	2300      	movs	r3, #0
 800309a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (args->argc == 1 && args->isStr(0, "info") == true)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d129      	bne.n	80030fa <cliCmd+0x6a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	4959      	ldr	r1, [pc, #356]	; (8003210 <cliCmd+0x180>)
 80030ac:	2000      	movs	r0, #0
 80030ae:	4798      	blx	r3
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d021      	beq.n	80030fa <cliCmd+0x6a>
  {
    while(cliKeepLoop())
 80030b6:	e014      	b.n	80030e2 <cliCmd+0x52>
    {
      cliPrintf("USB Connect : %d\n", usbIsConnect());
 80030b8:	f7ff ff80 	bl	8002fbc <usbIsConnect>
 80030bc:	4603      	mov	r3, r0
 80030be:	4619      	mov	r1, r3
 80030c0:	4854      	ldr	r0, [pc, #336]	; (8003214 <cliCmd+0x184>)
 80030c2:	f7ff f8bf 	bl	8002244 <cliPrintf>
      cliPrintf("USB Open    : %d\n", usbIsOpen());
 80030c6:	f7ff ff71 	bl	8002fac <usbIsOpen>
 80030ca:	4603      	mov	r3, r0
 80030cc:	4619      	mov	r1, r3
 80030ce:	4852      	ldr	r0, [pc, #328]	; (8003218 <cliCmd+0x188>)
 80030d0:	f7ff f8b8 	bl	8002244 <cliPrintf>
      cliPrintf("\x1B[%dA", 2);
 80030d4:	2102      	movs	r1, #2
 80030d6:	4851      	ldr	r0, [pc, #324]	; (800321c <cliCmd+0x18c>)
 80030d8:	f7ff f8b4 	bl	8002244 <cliPrintf>
      delay(100);
 80030dc:	2064      	movs	r0, #100	; 0x64
 80030de:	f7fe f80b 	bl	80010f8 <delay>
    while(cliKeepLoop())
 80030e2:	f7ff f9a9 	bl	8002438 <cliKeepLoop>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e5      	bne.n	80030b8 <cliCmd+0x28>
    }
    cliPrintf("\x1B[%dB", 2);
 80030ec:	2102      	movs	r1, #2
 80030ee:	484c      	ldr	r0, [pc, #304]	; (8003220 <cliCmd+0x190>)
 80030f0:	f7ff f8a8 	bl	8002244 <cliPrintf>

    ret = true;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (args->argc == 1 && args->isStr(0, "tx") == true)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d130      	bne.n	8003164 <cliCmd+0xd4>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	4947      	ldr	r1, [pc, #284]	; (8003224 <cliCmd+0x194>)
 8003108:	2000      	movs	r0, #0
 800310a:	4798      	blx	r3
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d028      	beq.n	8003164 <cliCmd+0xd4>
  {
    uint32_t pre_time;
    uint32_t tx_cnt = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]

    while(cliKeepLoop())
 8003116:	e019      	b.n	800314c <cliCmd+0xbc>
    {
      if (millis()-pre_time >= 1000)
 8003118:	f7fd fff9 	bl	800110e <millis>
 800311c:	4602      	mov	r2, r0
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003126:	d30a      	bcc.n	800313e <cliCmd+0xae>
      {
        pre_time = millis();
 8003128:	f7fd fff1 	bl	800110e <millis>
 800312c:	6238      	str	r0, [r7, #32]
        logPrintf("tx : %d KB/s\n", tx_cnt/1024);
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	0a9b      	lsrs	r3, r3, #10
 8003132:	4619      	mov	r1, r3
 8003134:	483c      	ldr	r0, [pc, #240]	; (8003228 <cliCmd+0x198>)
 8003136:	f7ff fc11 	bl	800295c <logPrintf>
        tx_cnt = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
      }
      cdcWrite((uint8_t *)"123456789012345678901234567890\n", 31);
 800313e:	211f      	movs	r1, #31
 8003140:	483a      	ldr	r0, [pc, #232]	; (800322c <cliCmd+0x19c>)
 8003142:	f7fe fb5c 	bl	80017fe <cdcWrite>
      tx_cnt += 31;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	331f      	adds	r3, #31
 800314a:	61fb      	str	r3, [r7, #28]
    while(cliKeepLoop())
 800314c:	f7ff f974 	bl	8002438 <cliKeepLoop>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1e0      	bne.n	8003118 <cliCmd+0x88>
    }
    cliPrintf("\x1B[%dB", 2);
 8003156:	2102      	movs	r1, #2
 8003158:	4831      	ldr	r0, [pc, #196]	; (8003220 <cliCmd+0x190>)
 800315a:	f7ff f873 	bl	8002244 <cliPrintf>

    ret = true;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (args->argc == 1 && args->isStr(0, "rx") == true)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d13c      	bne.n	80031e6 <cliCmd+0x156>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	492f      	ldr	r1, [pc, #188]	; (8003230 <cliCmd+0x1a0>)
 8003172:	2000      	movs	r0, #0
 8003174:	4798      	blx	r3
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d034      	beq.n	80031e6 <cliCmd+0x156>
  {
    uint32_t pre_time;
    uint32_t rx_cnt = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
    uint32_t rx_len;

    while(cliKeepLoop())
 8003180:	e025      	b.n	80031ce <cliCmd+0x13e>
    {
      if (millis()-pre_time >= 1000)
 8003182:	f7fd ffc4 	bl	800110e <millis>
 8003186:	4602      	mov	r2, r0
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003190:	d30a      	bcc.n	80031a8 <cliCmd+0x118>
      {
        pre_time = millis();
 8003192:	f7fd ffbc 	bl	800110e <millis>
 8003196:	61b8      	str	r0, [r7, #24]
        logPrintf("rx : %d KB/s\n", rx_cnt/1024);
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	0a9b      	lsrs	r3, r3, #10
 800319c:	4619      	mov	r1, r3
 800319e:	4825      	ldr	r0, [pc, #148]	; (8003234 <cliCmd+0x1a4>)
 80031a0:	f7ff fbdc 	bl	800295c <logPrintf>
        rx_cnt = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
      }

      rx_len = cdcAvailable();
 80031a8:	f7fe fb1b 	bl	80017e2 <cdcAvailable>
 80031ac:	60f8      	str	r0, [r7, #12]

      for (int i=0; i<rx_len; i++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	e004      	b.n	80031be <cliCmd+0x12e>
      {
        cdcRead();
 80031b4:	f7fe fb1c 	bl	80017f0 <cdcRead>
      for (int i=0; i<rx_len; i++)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	3301      	adds	r3, #1
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d8f6      	bhi.n	80031b4 <cliCmd+0x124>
      }

      rx_cnt += rx_len;
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4413      	add	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
    while(cliKeepLoop())
 80031ce:	f7ff f933 	bl	8002438 <cliKeepLoop>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1d4      	bne.n	8003182 <cliCmd+0xf2>
    }
    cliPrintf("\x1B[%dB", 2);
 80031d8:	2102      	movs	r1, #2
 80031da:	4811      	ldr	r0, [pc, #68]	; (8003220 <cliCmd+0x190>)
 80031dc:	f7ff f832 	bl	8002244 <cliPrintf>

    ret = true;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (ret == false)
 80031e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031ea:	f083 0301 	eor.w	r3, r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <cliCmd+0x176>
  {
    cliPrintf("usb info\n");
 80031f4:	4810      	ldr	r0, [pc, #64]	; (8003238 <cliCmd+0x1a8>)
 80031f6:	f7ff f825 	bl	8002244 <cliPrintf>
    cliPrintf("usb tx\n");
 80031fa:	4810      	ldr	r0, [pc, #64]	; (800323c <cliCmd+0x1ac>)
 80031fc:	f7ff f822 	bl	8002244 <cliPrintf>
    cliPrintf("usb rx\n");
 8003200:	480f      	ldr	r0, [pc, #60]	; (8003240 <cliCmd+0x1b0>)
 8003202:	f7ff f81f 	bl	8002244 <cliPrintf>
  }
}
 8003206:	bf00      	nop
 8003208:	3728      	adds	r7, #40	; 0x28
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	08010bb8 	.word	0x08010bb8
 8003214:	08010bc0 	.word	0x08010bc0
 8003218:	08010bd4 	.word	0x08010bd4
 800321c:	08010be8 	.word	0x08010be8
 8003220:	08010bf0 	.word	0x08010bf0
 8003224:	08010bf8 	.word	0x08010bf8
 8003228:	08010bfc 	.word	0x08010bfc
 800322c:	08010c0c 	.word	0x08010c0c
 8003230:	08010c2c 	.word	0x08010c2c
 8003234:	08010c30 	.word	0x08010c30
 8003238:	08010c40 	.word	0x08010c40
 800323c:	08010c4c 	.word	0x08010c4c
 8003240:	08010c54 	.word	0x08010c54

08003244 <hwInit>:
 *      Author: mm940
 */
#include "hw.h"

bool hwInit(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
  bool ret = true;
 800324a:	2301      	movs	r3, #1
 800324c:	71fb      	strb	r3, [r7, #7]

  ret &= bspInit();
 800324e:	f7fd feed 	bl	800102c <bspInit>
 8003252:	4603      	mov	r3, r0
 8003254:	461a      	mov	r2, r3
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	71fb      	strb	r3, [r7, #7]
  ret &= rtcInit();
 8003264:	f7ff fc32 	bl	8002acc <rtcInit>
 8003268:	4603      	mov	r3, r0
 800326a:	461a      	mov	r2, r3
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	71fb      	strb	r3, [r7, #7]
#ifdef _USE_HW_RESET
  ret &= resetInit();
 800327a:	f7ff fb91 	bl	80029a0 <resetInit>
 800327e:	4603      	mov	r3, r0
 8003280:	461a      	mov	r2, r3
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	4013      	ands	r3, r2
 8003286:	2b00      	cmp	r3, #0
 8003288:	bf14      	ite	ne
 800328a:	2301      	movne	r3, #1
 800328c:	2300      	moveq	r3, #0
 800328e:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef _USE_HW_RESET
  if (resetGetCount() == 2)
 8003290:	f7ff fbcc 	bl	8002a2c <resetGetCount>
 8003294:	4603      	mov	r3, r0
 8003296:	2b02      	cmp	r3, #2
 8003298:	d101      	bne.n	800329e <hwInit+0x5a>
  {
    // Jump To SystemBootloader
    resetToSystemBoot();
 800329a:	f7ff fbd3 	bl	8002a44 <resetToSystemBoot>
  }
#endif
  ret &= flashInit();
 800329e:	f7ff fa05 	bl	80026ac <flashInit>
 80032a2:	4603      	mov	r3, r0
 80032a4:	461a      	mov	r2, r3
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	bf14      	ite	ne
 80032ae:	2301      	movne	r3, #1
 80032b0:	2300      	moveq	r3, #0
 80032b2:	71fb      	strb	r3, [r7, #7]
  ret &= buttonInit();
 80032b4:	f7fe f9e2 	bl	800167c <buttonInit>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf14      	ite	ne
 80032c4:	2301      	movne	r3, #1
 80032c6:	2300      	moveq	r3, #0
 80032c8:	71fb      	strb	r3, [r7, #7]
  ret &= ledInit();
 80032ca:	f7ff f9fb 	bl	80026c4 <ledInit>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	bf14      	ite	ne
 80032da:	2301      	movne	r3, #1
 80032dc:	2300      	moveq	r3, #0
 80032de:	71fb      	strb	r3, [r7, #7]
  ret &= usbInit();
 80032e0:	f7ff fe52 	bl	8002f88 <usbInit>
 80032e4:	4603      	mov	r3, r0
 80032e6:	461a      	mov	r2, r3
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	71fb      	strb	r3, [r7, #7]
  ret &= usbBegin(USB_CDC_MODE);
 80032f6:	2001      	movs	r0, #1
 80032f8:	f7ff fe80 	bl	8002ffc <usbBegin>
 80032fc:	4603      	mov	r3, r0
 80032fe:	461a      	mov	r2, r3
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	4013      	ands	r3, r2
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf14      	ite	ne
 8003308:	2301      	movne	r3, #1
 800330a:	2300      	moveq	r3, #0
 800330c:	71fb      	strb	r3, [r7, #7]
  ret &= uartInit();
 800330e:	f7ff fc6b 	bl	8002be8 <uartInit>
 8003312:	4603      	mov	r3, r0
 8003314:	461a      	mov	r2, r3
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	4013      	ands	r3, r2
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf14      	ite	ne
 800331e:	2301      	movne	r3, #1
 8003320:	2300      	moveq	r3, #0
 8003322:	71fb      	strb	r3, [r7, #7]
  ret &= logInit();
 8003324:	f7ff fb12 	bl	800294c <logInit>
 8003328:	4603      	mov	r3, r0
 800332a:	461a      	mov	r2, r3
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf14      	ite	ne
 8003334:	2301      	movne	r3, #1
 8003336:	2300      	moveq	r3, #0
 8003338:	71fb      	strb	r3, [r7, #7]
  ret &= cliInit();
 800333a:	f7fe fa6f 	bl	800181c <cliInit>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	bf14      	ite	ne
 800334a:	2301      	movne	r3, #1
 800334c:	2300      	moveq	r3, #0
 800334e:	71fb      	strb	r3, [r7, #7]
  /* Reset Test */
  uartPrintf(_DEF_UART1, "Reset Count : %d\n", resetGetCount());
 8003350:	f7ff fb6c 	bl	8002a2c <resetGetCount>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	4904      	ldr	r1, [pc, #16]	; (800336c <hwInit+0x128>)
 800335a:	2000      	movs	r0, #0
 800335c:	f7ff fd52 	bl	8002e04 <uartPrintf>
  return ret;
 8003360:	79fb      	ldrb	r3, [r7, #7]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	08010c5c 	.word	0x08010c5c

08003370 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800337a:	2003      	movs	r0, #3
 800337c:	f000 f95a 	bl	8003634 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003380:	200f      	movs	r0, #15
 8003382:	f000 f80d 	bl	80033a0 <HAL_InitTick>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	71fb      	strb	r3, [r7, #7]
 8003390:	e001      	b.n	8003396 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003392:	f7fd ff25 	bl	80011e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003396:	79fb      	ldrb	r3, [r7, #7]

}
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80033ac:	4b16      	ldr	r3, [pc, #88]	; (8003408 <HAL_InitTick+0x68>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d022      	beq.n	80033fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80033b4:	4b15      	ldr	r3, [pc, #84]	; (800340c <HAL_InitTick+0x6c>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b13      	ldr	r3, [pc, #76]	; (8003408 <HAL_InitTick+0x68>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f966 	bl	800369a <HAL_SYSTICK_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10f      	bne.n	80033f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b0f      	cmp	r3, #15
 80033d8:	d809      	bhi.n	80033ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033da:	2200      	movs	r2, #0
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	f04f 30ff 	mov.w	r0, #4294967295
 80033e2:	f000 f932 	bl	800364a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033e6:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <HAL_InitTick+0x70>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e007      	b.n	80033fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
 80033f2:	e004      	b.n	80033fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	e001      	b.n	80033fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	2000000c 	.word	0x2000000c
 800340c:	20000000 	.word	0x20000000
 8003410:	20000008 	.word	0x20000008

08003414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_IncTick+0x1c>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_IncTick+0x20>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4413      	add	r3, r2
 8003422:	4a03      	ldr	r2, [pc, #12]	; (8003430 <HAL_IncTick+0x1c>)
 8003424:	6013      	str	r3, [r2, #0]
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	20000af0 	.word	0x20000af0
 8003434:	2000000c 	.word	0x2000000c

08003438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return uwTick;
 800343c:	4b03      	ldr	r3, [pc, #12]	; (800344c <HAL_GetTick+0x14>)
 800343e:	681b      	ldr	r3, [r3, #0]
}
 8003440:	4618      	mov	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	20000af0 	.word	0x20000af0

08003450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003458:	f7ff ffee 	bl	8003438 <HAL_GetTick>
 800345c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d004      	beq.n	8003474 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <HAL_Delay+0x40>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4413      	add	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003474:	bf00      	nop
 8003476:	f7ff ffdf 	bl	8003438 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	429a      	cmp	r2, r3
 8003484:	d8f7      	bhi.n	8003476 <HAL_Delay+0x26>
  {
  }
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	2000000c 	.word	0x2000000c

08003494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b0:	4013      	ands	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c6:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	60d3      	str	r3, [r2, #12]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <__NVIC_GetPriorityGrouping+0x18>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	f003 0307 	and.w	r3, r3, #7
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	2b00      	cmp	r3, #0
 8003508:	db0b      	blt.n	8003522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	f003 021f 	and.w	r2, r3, #31
 8003510:	4907      	ldr	r1, [pc, #28]	; (8003530 <__NVIC_EnableIRQ+0x38>)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2001      	movs	r0, #1
 800351a:	fa00 f202 	lsl.w	r2, r0, r2
 800351e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	e000e100 	.word	0xe000e100

08003534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	6039      	str	r1, [r7, #0]
 800353e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	2b00      	cmp	r3, #0
 8003546:	db0a      	blt.n	800355e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	490c      	ldr	r1, [pc, #48]	; (8003580 <__NVIC_SetPriority+0x4c>)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	0112      	lsls	r2, r2, #4
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	440b      	add	r3, r1
 8003558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800355c:	e00a      	b.n	8003574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4908      	ldr	r1, [pc, #32]	; (8003584 <__NVIC_SetPriority+0x50>)
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	3b04      	subs	r3, #4
 800356c:	0112      	lsls	r2, r2, #4
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	440b      	add	r3, r1
 8003572:	761a      	strb	r2, [r3, #24]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000e100 	.word	0xe000e100
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	; 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f1c3 0307 	rsb	r3, r3, #7
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	bf28      	it	cs
 80035a6:	2304      	movcs	r3, #4
 80035a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d902      	bls.n	80035b8 <NVIC_EncodePriority+0x30>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3b03      	subs	r3, #3
 80035b6:	e000      	b.n	80035ba <NVIC_EncodePriority+0x32>
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	f04f 32ff 	mov.w	r2, #4294967295
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	401a      	ands	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d0:	f04f 31ff 	mov.w	r1, #4294967295
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	43d9      	mvns	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	4313      	orrs	r3, r2
         );
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3724      	adds	r7, #36	; 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003600:	d301      	bcc.n	8003606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003602:	2301      	movs	r3, #1
 8003604:	e00f      	b.n	8003626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <SysTick_Config+0x40>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360e:	210f      	movs	r1, #15
 8003610:	f04f 30ff 	mov.w	r0, #4294967295
 8003614:	f7ff ff8e 	bl	8003534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <SysTick_Config+0x40>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361e:	4b04      	ldr	r3, [pc, #16]	; (8003630 <SysTick_Config+0x40>)
 8003620:	2207      	movs	r2, #7
 8003622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	e000e010 	.word	0xe000e010

08003634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff29 	bl	8003494 <__NVIC_SetPriorityGrouping>
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	4603      	mov	r3, r0
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003658:	f7ff ff40 	bl	80034dc <__NVIC_GetPriorityGrouping>
 800365c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7ff ff90 	bl	8003588 <NVIC_EncodePriority>
 8003668:	4602      	mov	r2, r0
 800366a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff5f 	bl	8003534 <__NVIC_SetPriority>
}
 8003676:	bf00      	nop
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	4603      	mov	r3, r0
 8003686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff33 	bl	80034f8 <__NVIC_EnableIRQ>
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ffa4 	bl	80035f0 <SysTick_Config>
 80036a8:	4603      	mov	r3, r0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d005      	beq.n	80036d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2204      	movs	r2, #4
 80036ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	e037      	b.n	8003746 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 020e 	bic.w	r2, r2, #14
 80036e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0201 	bic.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f003 021f 	and.w	r2, r3, #31
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2101      	movs	r1, #1
 8003714:	fa01 f202 	lsl.w	r2, r1, r2
 8003718:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003722:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00c      	beq.n	8003746 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800373a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003744:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003756:	7bfb      	ldrb	r3, [r7, #15]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d00d      	beq.n	8003798 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2204      	movs	r2, #4
 8003780:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
 8003796:	e047      	b.n	8003828 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 020e 	bic.w	r2, r2, #14
 80037a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	f003 021f 	and.w	r2, r3, #31
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	2101      	movs	r1, #1
 80037d6:	fa01 f202 	lsl.w	r2, r1, r2
 80037da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003806:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4798      	blx	r3
    }
  }
  return status;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003842:	e15a      	b.n	8003afa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	2101      	movs	r1, #1
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	4013      	ands	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 814c 	beq.w	8003af4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	2b01      	cmp	r3, #1
 8003866:	d005      	beq.n	8003874 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003870:	2b02      	cmp	r3, #2
 8003872:	d130      	bne.n	80038d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	2203      	movs	r2, #3
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038aa:	2201      	movs	r2, #1
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4013      	ands	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	f003 0201 	and.w	r2, r3, #1
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d017      	beq.n	8003912 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	2203      	movs	r2, #3
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4013      	ands	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d123      	bne.n	8003966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	08da      	lsrs	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3208      	adds	r2, #8
 8003926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800392a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	220f      	movs	r2, #15
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	08da      	lsrs	r2, r3, #3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3208      	adds	r2, #8
 8003960:	6939      	ldr	r1, [r7, #16]
 8003962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	2203      	movs	r2, #3
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 0203 	and.w	r2, r3, #3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 80a6 	beq.w	8003af4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a8:	4b5b      	ldr	r3, [pc, #364]	; (8003b18 <HAL_GPIO_Init+0x2e4>)
 80039aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ac:	4a5a      	ldr	r2, [pc, #360]	; (8003b18 <HAL_GPIO_Init+0x2e4>)
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	6613      	str	r3, [r2, #96]	; 0x60
 80039b4:	4b58      	ldr	r3, [pc, #352]	; (8003b18 <HAL_GPIO_Init+0x2e4>)
 80039b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039c0:	4a56      	ldr	r2, [pc, #344]	; (8003b1c <HAL_GPIO_Init+0x2e8>)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	3302      	adds	r3, #2
 80039c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	220f      	movs	r2, #15
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4013      	ands	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039ea:	d01f      	beq.n	8003a2c <HAL_GPIO_Init+0x1f8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a4c      	ldr	r2, [pc, #304]	; (8003b20 <HAL_GPIO_Init+0x2ec>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d019      	beq.n	8003a28 <HAL_GPIO_Init+0x1f4>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a4b      	ldr	r2, [pc, #300]	; (8003b24 <HAL_GPIO_Init+0x2f0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d013      	beq.n	8003a24 <HAL_GPIO_Init+0x1f0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a4a      	ldr	r2, [pc, #296]	; (8003b28 <HAL_GPIO_Init+0x2f4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00d      	beq.n	8003a20 <HAL_GPIO_Init+0x1ec>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a49      	ldr	r2, [pc, #292]	; (8003b2c <HAL_GPIO_Init+0x2f8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d007      	beq.n	8003a1c <HAL_GPIO_Init+0x1e8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a48      	ldr	r2, [pc, #288]	; (8003b30 <HAL_GPIO_Init+0x2fc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d101      	bne.n	8003a18 <HAL_GPIO_Init+0x1e4>
 8003a14:	2305      	movs	r3, #5
 8003a16:	e00a      	b.n	8003a2e <HAL_GPIO_Init+0x1fa>
 8003a18:	2306      	movs	r3, #6
 8003a1a:	e008      	b.n	8003a2e <HAL_GPIO_Init+0x1fa>
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	e006      	b.n	8003a2e <HAL_GPIO_Init+0x1fa>
 8003a20:	2303      	movs	r3, #3
 8003a22:	e004      	b.n	8003a2e <HAL_GPIO_Init+0x1fa>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e002      	b.n	8003a2e <HAL_GPIO_Init+0x1fa>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <HAL_GPIO_Init+0x1fa>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	f002 0203 	and.w	r2, r2, #3
 8003a34:	0092      	lsls	r2, r2, #2
 8003a36:	4093      	lsls	r3, r2
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a3e:	4937      	ldr	r1, [pc, #220]	; (8003b1c <HAL_GPIO_Init+0x2e8>)
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	089b      	lsrs	r3, r3, #2
 8003a44:	3302      	adds	r3, #2
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a4c:	4b39      	ldr	r3, [pc, #228]	; (8003b34 <HAL_GPIO_Init+0x300>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a70:	4a30      	ldr	r2, [pc, #192]	; (8003b34 <HAL_GPIO_Init+0x300>)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a76:	4b2f      	ldr	r3, [pc, #188]	; (8003b34 <HAL_GPIO_Init+0x300>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a9a:	4a26      	ldr	r2, [pc, #152]	; (8003b34 <HAL_GPIO_Init+0x300>)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003aa0:	4b24      	ldr	r3, [pc, #144]	; (8003b34 <HAL_GPIO_Init+0x300>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4013      	ands	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ac4:	4a1b      	ldr	r2, [pc, #108]	; (8003b34 <HAL_GPIO_Init+0x300>)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003aca:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <HAL_GPIO_Init+0x300>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003aee:	4a11      	ldr	r2, [pc, #68]	; (8003b34 <HAL_GPIO_Init+0x300>)
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	3301      	adds	r3, #1
 8003af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f47f ae9d 	bne.w	8003844 <HAL_GPIO_Init+0x10>
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40010000 	.word	0x40010000
 8003b20:	48000400 	.word	0x48000400
 8003b24:	48000800 	.word	0x48000800
 8003b28:	48000c00 	.word	0x48000c00
 8003b2c:	48001000 	.word	0x48001000
 8003b30:	48001400 	.word	0x48001400
 8003b34:	40010400 	.word	0x40010400

08003b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]
 8003b44:	4613      	mov	r3, r2
 8003b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b48:	787b      	ldrb	r3, [r7, #1]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b4e:	887a      	ldrh	r2, [r7, #2]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b54:	e002      	b.n	8003b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b56:	887a      	ldrh	r2, [r7, #2]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	041a      	lsls	r2, r3, #16
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	43d9      	mvns	r1, r3
 8003b86:	887b      	ldrh	r3, [r7, #2]
 8003b88:	400b      	ands	r3, r1
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	619a      	str	r2, [r3, #24]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e0c0      	b.n	8003d30 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f009 faee 	bl	800d1a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2203      	movs	r2, #3
 8003bcc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f005 f84c 	bl	8008c72 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]
 8003bde:	e03e      	b.n	8003c5e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	440b      	add	r3, r1
 8003bee:	3311      	adds	r3, #17
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bf4:	7bfa      	ldrb	r2, [r7, #15]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	440b      	add	r3, r1
 8003c02:	3310      	adds	r3, #16
 8003c04:	7bfa      	ldrb	r2, [r7, #15]
 8003c06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c08:	7bfa      	ldrb	r2, [r7, #15]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	440b      	add	r3, r1
 8003c16:	3313      	adds	r3, #19
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c1c:	7bfa      	ldrb	r2, [r7, #15]
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	440b      	add	r3, r1
 8003c2a:	3320      	adds	r3, #32
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c30:	7bfa      	ldrb	r2, [r7, #15]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	440b      	add	r3, r1
 8003c3e:	3324      	adds	r3, #36	; 0x24
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	440b      	add	r3, r1
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	791b      	ldrb	r3, [r3, #4]
 8003c62:	7bfa      	ldrb	r2, [r7, #15]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d3bb      	bcc.n	8003be0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]
 8003c6c:	e044      	b.n	8003cf8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c6e:	7bfa      	ldrb	r2, [r7, #15]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	440b      	add	r3, r1
 8003c7c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c84:	7bfa      	ldrb	r2, [r7, #15]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	440b      	add	r3, r1
 8003c92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003c96:	7bfa      	ldrb	r2, [r7, #15]
 8003c98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c9a:	7bfa      	ldrb	r2, [r7, #15]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	440b      	add	r3, r1
 8003ca8:	f203 1353 	addw	r3, r3, #339	; 0x153
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cb0:	7bfa      	ldrb	r2, [r7, #15]
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	440b      	add	r3, r1
 8003cbe:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cc6:	7bfa      	ldrb	r2, [r7, #15]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	440b      	add	r3, r1
 8003cd4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cdc:	7bfa      	ldrb	r2, [r7, #15]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	440b      	add	r3, r1
 8003cea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	791b      	ldrb	r3, [r3, #4]
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d3b5      	bcc.n	8003c6e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003d0e:	f004 ffcb 	bl	8008ca8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	7a9b      	ldrb	r3, [r3, #10]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d102      	bne.n	8003d2e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f001 fc41 	bl	80055b0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d101      	bne.n	8003d4e <HAL_PCD_Start+0x16>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e012      	b.n	8003d74 <HAL_PCD_Start+0x3c>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f004 ff72 	bl	8008c44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f007 fa32 	bl	800b1ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f007 fa37 	bl	800b1fc <USB_ReadInterrupts>
 8003d8e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fb04 	bl	80043a8 <PCD_EP_ISR_Handler>

    return;
 8003da0:	e110      	b.n	8003fc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d013      	beq.n	8003dd4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dbe:	b292      	uxth	r2, r2
 8003dc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f009 fa7e 	bl	800d2c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003dca:	2100      	movs	r1, #0
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f8fc 	bl	8003fca <HAL_PCD_SetAddress>

    return;
 8003dd2:	e0f7      	b.n	8003fc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00c      	beq.n	8003df8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003df0:	b292      	uxth	r2, r2
 8003df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003df6:	e0e5      	b.n	8003fc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00c      	beq.n	8003e1c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e14:	b292      	uxth	r2, r2
 8003e16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003e1a:	e0d3      	b.n	8003fc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d034      	beq.n	8003e90 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0204 	bic.w	r2, r2, #4
 8003e38:	b292      	uxth	r2, r2
 8003e3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0208 	bic.w	r2, r2, #8
 8003e50:	b292      	uxth	r2, r2
 8003e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d107      	bne.n	8003e70 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e68:	2100      	movs	r1, #0
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f009 fc1e 	bl	800d6ac <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f009 fa61 	bl	800d338 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e88:	b292      	uxth	r2, r2
 8003e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003e8e:	e099      	b.n	8003fc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d027      	beq.n	8003eea <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0208 	orr.w	r2, r2, #8
 8003eac:	b292      	uxth	r2, r2
 8003eae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec4:	b292      	uxth	r2, r2
 8003ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0204 	orr.w	r2, r2, #4
 8003edc:	b292      	uxth	r2, r2
 8003ede:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f009 fa0e 	bl	800d304 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003ee8:	e06c      	b.n	8003fc4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d040      	beq.n	8003f76 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f06:	b292      	uxth	r2, r2
 8003f08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d12b      	bne.n	8003f6e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0204 	orr.w	r2, r2, #4
 8003f28:	b292      	uxth	r2, r2
 8003f2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0208 	orr.w	r2, r2, #8
 8003f40:	b292      	uxth	r2, r2
 8003f42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	089b      	lsrs	r3, r3, #2
 8003f5a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003f64:	2101      	movs	r1, #1
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f009 fba0 	bl	800d6ac <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003f6c:	e02a      	b.n	8003fc4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f009 f9c8 	bl	800d304 <HAL_PCD_SuspendCallback>
    return;
 8003f74:	e026      	b.n	8003fc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00f      	beq.n	8003fa0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f92:	b292      	uxth	r2, r2
 8003f94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f009 f986 	bl	800d2aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003f9e:	e011      	b.n	8003fc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00c      	beq.n	8003fc4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fbc:	b292      	uxth	r2, r2
 8003fbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003fc2:	bf00      	nop
  }
}
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_PCD_SetAddress+0x1a>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e012      	b.n	800400a <HAL_PCD_SetAddress+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	78fa      	ldrb	r2, [r7, #3]
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f007 f8d3 	bl	800b1a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	4608      	mov	r0, r1
 800401c:	4611      	mov	r1, r2
 800401e:	461a      	mov	r2, r3
 8004020:	4603      	mov	r3, r0
 8004022:	70fb      	strb	r3, [r7, #3]
 8004024:	460b      	mov	r3, r1
 8004026:	803b      	strh	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004034:	2b00      	cmp	r3, #0
 8004036:	da0e      	bge.n	8004056 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	f003 0207 	and.w	r2, r3, #7
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	3310      	adds	r3, #16
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4413      	add	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	705a      	strb	r2, [r3, #1]
 8004054:	e00e      	b.n	8004074 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	f003 0207 	and.w	r2, r3, #7
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4413      	add	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	b2da      	uxtb	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004080:	883a      	ldrh	r2, [r7, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	78ba      	ldrb	r2, [r7, #2]
 800408a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800408c:	78bb      	ldrb	r3, [r7, #2]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d102      	bne.n	8004098 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_PCD_EP_Open+0x94>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e00e      	b.n	80040c4 <HAL_PCD_EP_Open+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f004 fe15 	bl	8008ce4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80040c2:	7afb      	ldrb	r3, [r7, #11]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	da0e      	bge.n	80040fe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	f003 0207 	and.w	r2, r3, #7
 80040e6:	4613      	mov	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	3310      	adds	r3, #16
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	4413      	add	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	705a      	strb	r2, [r3, #1]
 80040fc:	e00e      	b.n	800411c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	f003 0207 	and.w	r2, r3, #7
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	4413      	add	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	b2da      	uxtb	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_PCD_EP_Close+0x6a>
 8004132:	2302      	movs	r3, #2
 8004134:	e00e      	b.n	8004154 <HAL_PCD_EP_Close+0x88>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68f9      	ldr	r1, [r7, #12]
 8004144:	4618      	mov	r0, r3
 8004146:	f005 f991 	bl	800946c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	460b      	mov	r3, r1
 800416a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800416c:	7afb      	ldrb	r3, [r7, #11]
 800416e:	f003 0207 	and.w	r2, r3, #7
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4413      	add	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2200      	movs	r2, #0
 8004194:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2200      	movs	r2, #0
 800419a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800419c:	7afb      	ldrb	r3, [r7, #11]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6979      	ldr	r1, [r7, #20]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f005 fb49 	bl	8009846 <USB_EPStartXfer>

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	460b      	mov	r3, r1
 80041c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041ca:	78fb      	ldrb	r3, [r7, #3]
 80041cc:	f003 0207 	and.w	r2, r3, #7
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	440b      	add	r3, r1
 80041dc:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80041e0:	681b      	ldr	r3, [r3, #0]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b086      	sub	sp, #24
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
 80041fa:	460b      	mov	r3, r1
 80041fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041fe:	7afb      	ldrb	r3, [r7, #11]
 8004200:	f003 0207 	and.w	r2, r3, #7
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	3310      	adds	r3, #16
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4413      	add	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2200      	movs	r2, #0
 8004232:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2201      	movs	r2, #1
 8004238:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800423a:	7afb      	ldrb	r3, [r7, #11]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	b2da      	uxtb	r2, r3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6979      	ldr	r1, [r7, #20]
 800424c:	4618      	mov	r0, r3
 800424e:	f005 fafa 	bl	8009846 <USB_EPStartXfer>

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	7912      	ldrb	r2, [r2, #4]
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e03e      	b.n	80042f8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800427a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800427e:	2b00      	cmp	r3, #0
 8004280:	da0e      	bge.n	80042a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	f003 0207 	and.w	r2, r3, #7
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	3310      	adds	r3, #16
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	705a      	strb	r2, [r3, #1]
 800429e:	e00c      	b.n	80042ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042a0:	78fa      	ldrb	r2, [r7, #3]
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	4413      	add	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_PCD_EP_SetStall+0x7e>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e00e      	b.n	80042f8 <HAL_PCD_EP_SetStall+0x9c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68f9      	ldr	r1, [r7, #12]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f006 fe5d 	bl	800afa8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	7912      	ldrb	r2, [r2, #4]
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e040      	b.n	80043a0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800431e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004322:	2b00      	cmp	r3, #0
 8004324:	da0e      	bge.n	8004344 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004326:	78fb      	ldrb	r3, [r7, #3]
 8004328:	f003 0207 	and.w	r2, r3, #7
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	3310      	adds	r3, #16
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	4413      	add	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	705a      	strb	r2, [r3, #1]
 8004342:	e00e      	b.n	8004362 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	f003 0207 	and.w	r2, r3, #7
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	4413      	add	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	b2da      	uxtb	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_PCD_EP_ClrStall+0x82>
 800437e:	2302      	movs	r3, #2
 8004380:	e00e      	b.n	80043a0 <HAL_PCD_EP_ClrStall+0xa0>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68f9      	ldr	r1, [r7, #12]
 8004390:	4618      	mov	r0, r3
 8004392:	f006 fe5a 	bl	800b04a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b096      	sub	sp, #88	; 0x58
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80043b0:	e3ae      	b.n	8004b10 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80043be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80043cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f040 8170 	bne.w	80046b6 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80043d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d14d      	bne.n	800447e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80043ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f2:	81fb      	strh	r3, [r7, #14]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	89fb      	ldrh	r3, [r7, #14]
 80043fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004402:	b29b      	uxth	r3, r3
 8004404:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3310      	adds	r3, #16
 800440a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004414:	b29b      	uxth	r3, r3
 8004416:	461a      	mov	r2, r3
 8004418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4413      	add	r3, r2
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	4413      	add	r3, r2
 8004426:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004432:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004436:	695a      	ldr	r2, [r3, #20]
 8004438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	441a      	add	r2, r3
 800443e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004440:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004442:	2100      	movs	r1, #0
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f008 ff16 	bl	800d276 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	7b1b      	ldrb	r3, [r3, #12]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 835d 	beq.w	8004b10 <PCD_EP_ISR_Handler+0x768>
 8004456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f040 8358 	bne.w	8004b10 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7b1b      	ldrb	r3, [r3, #12]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800446a:	b2da      	uxtb	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	b292      	uxth	r2, r2
 8004472:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	731a      	strb	r2, [r3, #12]
 800447c:	e348      	b.n	8004b10 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004484:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004490:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004498:	2b00      	cmp	r3, #0
 800449a:	d032      	beq.n	8004502 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4413      	add	r3, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	4413      	add	r3, r2
 80044b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044c2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80044ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80044d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	f006 fee2 	bl	800b2a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80044e8:	4013      	ands	r3, r2
 80044ea:	823b      	strh	r3, [r7, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	8a3a      	ldrh	r2, [r7, #16]
 80044f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044f6:	b292      	uxth	r2, r2
 80044f8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f008 fe8e 	bl	800d21c <HAL_PCD_SetupStageCallback>
 8004500:	e306      	b.n	8004b10 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004502:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004506:	2b00      	cmp	r3, #0
 8004508:	f280 8302 	bge.w	8004b10 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	b29a      	uxth	r2, r3
 8004514:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004518:	4013      	ands	r3, r2
 800451a:	83fb      	strh	r3, [r7, #30]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	8bfa      	ldrh	r2, [r7, #30]
 8004522:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004526:	b292      	uxth	r2, r2
 8004528:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004532:	b29b      	uxth	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4413      	add	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	4413      	add	r3, r2
 8004544:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800454e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004550:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d019      	beq.n	800458e <PCD_EP_ISR_Handler+0x1e6>
 800455a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d015      	beq.n	800458e <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004568:	6959      	ldr	r1, [r3, #20]
 800456a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800456c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800456e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004570:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004572:	b29b      	uxth	r3, r3
 8004574:	f006 fe94 	bl	800b2a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	441a      	add	r2, r3
 8004582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004584:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004586:	2100      	movs	r1, #0
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f008 fe59 	bl	800d240 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004598:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800459c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f040 82b5 	bne.w	8004b10 <PCD_EP_ISR_Handler+0x768>
 80045a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80045aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80045ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045b2:	f000 82ad 	beq.w	8004b10 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	61bb      	str	r3, [r7, #24]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	4413      	add	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	801a      	strh	r2, [r3, #0]
 80045e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b3e      	cmp	r3, #62	; 0x3e
 80045ec:	d91d      	bls.n	800462a <PCD_EP_ISR_Handler+0x282>
 80045ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	647b      	str	r3, [r7, #68]	; 0x44
 80045f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <PCD_EP_ISR_Handler+0x260>
 8004602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004604:	3b01      	subs	r3, #1
 8004606:	647b      	str	r3, [r7, #68]	; 0x44
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29a      	uxth	r2, r3
 800460e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004610:	b29b      	uxth	r3, r3
 8004612:	029b      	lsls	r3, r3, #10
 8004614:	b29b      	uxth	r3, r3
 8004616:	4313      	orrs	r3, r2
 8004618:	b29b      	uxth	r3, r3
 800461a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800461e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004622:	b29a      	uxth	r2, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	801a      	strh	r2, [r3, #0]
 8004628:	e026      	b.n	8004678 <PCD_EP_ISR_Handler+0x2d0>
 800462a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <PCD_EP_ISR_Handler+0x2a0>
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	b29b      	uxth	r3, r3
 8004638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800463c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004640:	b29a      	uxth	r2, r3
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	801a      	strh	r2, [r3, #0]
 8004646:	e017      	b.n	8004678 <PCD_EP_ISR_Handler+0x2d0>
 8004648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	085b      	lsrs	r3, r3, #1
 800464e:	647b      	str	r3, [r7, #68]	; 0x44
 8004650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <PCD_EP_ISR_Handler+0x2ba>
 800465c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800465e:	3301      	adds	r3, #1
 8004660:	647b      	str	r3, [r7, #68]	; 0x44
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29a      	uxth	r2, r3
 8004668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800466a:	b29b      	uxth	r3, r3
 800466c:	029b      	lsls	r3, r3, #10
 800466e:	b29b      	uxth	r3, r3
 8004670:	4313      	orrs	r3, r2
 8004672:	b29a      	uxth	r2, r3
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004688:	827b      	strh	r3, [r7, #18]
 800468a:	8a7b      	ldrh	r3, [r7, #18]
 800468c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004690:	827b      	strh	r3, [r7, #18]
 8004692:	8a7b      	ldrh	r3, [r7, #18]
 8004694:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004698:	827b      	strh	r3, [r7, #18]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	8a7b      	ldrh	r3, [r7, #18]
 80046a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	8013      	strh	r3, [r2, #0]
 80046b4:	e22c      	b.n	8004b10 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80046ca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f280 80f6 	bge.w	80048c0 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80046ea:	4013      	ands	r3, r2
 80046ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004702:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004706:	b292      	uxth	r2, r2
 8004708:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800470a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	4413      	add	r3, r2
 800471e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004722:	7b1b      	ldrb	r3, [r3, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d123      	bne.n	8004770 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004730:	b29b      	uxth	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	4413      	add	r3, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	4413      	add	r3, r2
 8004742:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800474c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004750:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 808e 	beq.w	8004876 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004760:	6959      	ldr	r1, [r3, #20]
 8004762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004764:	88da      	ldrh	r2, [r3, #6]
 8004766:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800476a:	f006 fd99 	bl	800b2a0 <USB_ReadPMA>
 800476e:	e082      	b.n	8004876 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004772:	78db      	ldrb	r3, [r3, #3]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d10a      	bne.n	800478e <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004778:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800477c:	461a      	mov	r2, r3
 800477e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f9d3 	bl	8004b2c <HAL_PCD_EP_DB_Receive>
 8004786:	4603      	mov	r3, r0
 8004788:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800478c:	e073      	b.n	8004876 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80047be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d022      	beq.n	8004832 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4413      	add	r3, r2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6812      	ldr	r2, [r2, #0]
 8004804:	4413      	add	r3, r2
 8004806:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004810:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004814:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004818:	2b00      	cmp	r3, #0
 800481a:	d02c      	beq.n	8004876 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004822:	6959      	ldr	r1, [r3, #20]
 8004824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004826:	891a      	ldrh	r2, [r3, #8]
 8004828:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800482c:	f006 fd38 	bl	800b2a0 <USB_ReadPMA>
 8004830:	e021      	b.n	8004876 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483a:	b29b      	uxth	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	4413      	add	r3, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6812      	ldr	r2, [r2, #0]
 800484a:	4413      	add	r3, r2
 800484c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004856:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800485a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004868:	6959      	ldr	r1, [r3, #20]
 800486a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800486c:	895a      	ldrh	r2, [r3, #10]
 800486e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004872:	f006 fd15 	bl	800b2a0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800487e:	441a      	add	r2, r3
 8004880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004882:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800488c:	441a      	add	r2, r3
 800488e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004890:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <PCD_EP_ISR_Handler+0x4fe>
 800489a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800489e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d206      	bcs.n	80048b4 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80048a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	4619      	mov	r1, r3
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f008 fcc7 	bl	800d240 <HAL_PCD_DataOutStageCallback>
 80048b2:	e005      	b.n	80048c0 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048ba:	4618      	mov	r0, r3
 80048bc:	f004 ffc3 	bl	8009846 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80048c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8121 	beq.w	8004b10 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80048ce:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	3310      	adds	r3, #16
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	4413      	add	r3, r2
 80048e0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80048f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800491a:	b29b      	uxth	r3, r3
 800491c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800491e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004920:	78db      	ldrb	r3, [r3, #3]
 8004922:	2b01      	cmp	r3, #1
 8004924:	f040 80a2 	bne.w	8004a6c <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8004928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800492a:	2200      	movs	r2, #0
 800492c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800492e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004930:	7b1b      	ldrb	r3, [r3, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8093 	beq.w	8004a5e <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004938:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d046      	beq.n	80049d2 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d126      	bne.n	800499a <PCD_EP_ISR_Handler+0x5f2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800495a:	b29b      	uxth	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	4413      	add	r3, r2
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
 8004964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	00da      	lsls	r2, r3, #3
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	4413      	add	r3, r2
 800496e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004972:	623b      	str	r3, [r7, #32]
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29b      	uxth	r3, r3
 800497a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800497e:	b29a      	uxth	r2, r3
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	801a      	strh	r2, [r3, #0]
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800498e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004992:	b29a      	uxth	r2, r3
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	801a      	strh	r2, [r3, #0]
 8004998:	e061      	b.n	8004a5e <PCD_EP_ISR_Handler+0x6b6>
 800499a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800499c:	785b      	ldrb	r3, [r3, #1]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d15d      	bne.n	8004a5e <PCD_EP_ISR_Handler+0x6b6>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	4413      	add	r3, r2
 80049b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	00da      	lsls	r2, r3, #3
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	4413      	add	r3, r2
 80049c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	2200      	movs	r2, #0
 80049ce:	801a      	strh	r2, [r3, #0]
 80049d0:	e045      	b.n	8004a5e <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049da:	785b      	ldrb	r3, [r3, #1]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d126      	bne.n	8004a2e <PCD_EP_ISR_Handler+0x686>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f4:	4413      	add	r3, r2
 80049f6:	637b      	str	r3, [r7, #52]	; 0x34
 80049f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	00da      	lsls	r2, r3, #3
 80049fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a00:	4413      	add	r3, r2
 8004a02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a06:	633b      	str	r3, [r7, #48]	; 0x30
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	801a      	strh	r2, [r3, #0]
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	801a      	strh	r2, [r3, #0]
 8004a2c:	e017      	b.n	8004a5e <PCD_EP_ISR_Handler+0x6b6>
 8004a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a30:	785b      	ldrb	r3, [r3, #1]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d113      	bne.n	8004a5e <PCD_EP_ISR_Handler+0x6b6>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a44:	4413      	add	r3, r2
 8004a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	00da      	lsls	r2, r3, #3
 8004a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a50:	4413      	add	r3, r2
 8004a52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a56:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f008 fc06 	bl	800d276 <HAL_PCD_DataInStageCallback>
 8004a6a:	e051      	b.n	8004b10 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004a6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d144      	bne.n	8004b02 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	4413      	add	r3, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	4413      	add	r3, r2
 8004a92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a9c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d907      	bls.n	8004abc <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8004aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aae:	699a      	ldr	r2, [r3, #24]
 8004ab0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ab4:	1ad2      	subs	r2, r2, r3
 8004ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab8:	619a      	str	r2, [r3, #24]
 8004aba:	e002      	b.n	8004ac2 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004abe:	2200      	movs	r2, #0
 8004ac0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f008 fbd0 	bl	800d276 <HAL_PCD_DataInStageCallback>
 8004ad6:	e01b      	b.n	8004b10 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ae0:	441a      	add	r2, r3
 8004ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae8:	69da      	ldr	r2, [r3, #28]
 8004aea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004aee:	441a      	add	r2, r3
 8004af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004afa:	4618      	mov	r0, r3
 8004afc:	f004 fea3 	bl	8009846 <USB_EPStartXfer>
 8004b00:	e006      	b.n	8004b10 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004b02:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b06:	461a      	mov	r2, r3
 8004b08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f917 	bl	8004d3e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	b21b      	sxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f6ff ac48 	blt.w	80043b2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3758      	adds	r7, #88	; 0x58
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d07c      	beq.n	8004c3e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4413      	add	r3, r2
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b68:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	8b7b      	ldrh	r3, [r7, #26]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d306      	bcc.n	8004b82 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	699a      	ldr	r2, [r3, #24]
 8004b78:	8b7b      	ldrh	r3, [r7, #26]
 8004b7a:	1ad2      	subs	r2, r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	619a      	str	r2, [r3, #24]
 8004b80:	e002      	b.n	8004b88 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2200      	movs	r2, #0
 8004b86:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d123      	bne.n	8004bd8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	461a      	mov	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004baa:	833b      	strh	r3, [r7, #24]
 8004bac:	8b3b      	ldrh	r3, [r7, #24]
 8004bae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bb2:	833b      	strh	r3, [r7, #24]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	8b3b      	ldrh	r3, [r7, #24]
 8004bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d01f      	beq.n	8004c22 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfc:	82fb      	strh	r3, [r7, #22]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	441a      	add	r2, r3
 8004c0c:	8afb      	ldrh	r3, [r7, #22]
 8004c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004c22:	8b7b      	ldrh	r3, [r7, #26]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8085 	beq.w	8004d34 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6959      	ldr	r1, [r3, #20]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	891a      	ldrh	r2, [r3, #8]
 8004c36:	8b7b      	ldrh	r3, [r7, #26]
 8004c38:	f006 fb32 	bl	800b2a0 <USB_ReadPMA>
 8004c3c:	e07a      	b.n	8004d34 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	4413      	add	r3, r2
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	4413      	add	r3, r2
 8004c58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c62:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	699a      	ldr	r2, [r3, #24]
 8004c68:	8b7b      	ldrh	r3, [r7, #26]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d306      	bcc.n	8004c7c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	8b7b      	ldrh	r3, [r7, #26]
 8004c74:	1ad2      	subs	r2, r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	619a      	str	r2, [r3, #24]
 8004c7a:	e002      	b.n	8004c82 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d123      	bne.n	8004cd2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca4:	83fb      	strh	r3, [r7, #30]
 8004ca6:	8bfb      	ldrh	r3, [r7, #30]
 8004ca8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cac:	83fb      	strh	r3, [r7, #30]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	441a      	add	r2, r3
 8004cbc:	8bfb      	ldrh	r3, [r7, #30]
 8004cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d11f      	bne.n	8004d1c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	83bb      	strh	r3, [r7, #28]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	441a      	add	r2, r3
 8004d06:	8bbb      	ldrh	r3, [r7, #28]
 8004d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004d1c:	8b7b      	ldrh	r3, [r7, #26]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	6959      	ldr	r1, [r3, #20]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	895a      	ldrh	r2, [r3, #10]
 8004d2e:	8b7b      	ldrh	r3, [r7, #26]
 8004d30:	f006 fab6 	bl	800b2a0 <USB_ReadPMA>
    }
  }

  return count;
 8004d34:	8b7b      	ldrh	r3, [r7, #26]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b0a4      	sub	sp, #144	; 0x90
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 81db 	beq.w	800510e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	461a      	mov	r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	6812      	ldr	r2, [r2, #0]
 8004d70:	4413      	add	r3, r2
 8004d72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d7c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d907      	bls.n	8004d9c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	699a      	ldr	r2, [r3, #24]
 8004d90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d94:	1ad2      	subs	r2, r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	619a      	str	r2, [r3, #24]
 8004d9a:	e002      	b.n	8004da2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f040 80b9 	bne.w	8004f1e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	785b      	ldrb	r3, [r3, #1]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d126      	bne.n	8004e02 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	4413      	add	r3, r2
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	00da      	lsls	r2, r3, #3
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	801a      	strh	r2, [r3, #0]
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	801a      	strh	r2, [r3, #0]
 8004e00:	e01a      	b.n	8004e38 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d116      	bne.n	8004e38 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1e:	4413      	add	r3, r2
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	00da      	lsls	r2, r3, #3
 8004e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e30:	633b      	str	r3, [r7, #48]	; 0x30
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	2200      	movs	r2, #0
 8004e36:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	785b      	ldrb	r3, [r3, #1]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d126      	bne.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x156>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	61fb      	str	r3, [r7, #28]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	00da      	lsls	r2, r3, #3
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	4413      	add	r3, r2
 8004e68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	801a      	strh	r2, [r3, #0]
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	e017      	b.n	8004ec4 <HAL_PCD_EP_DB_Transmit+0x186>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d113      	bne.n	8004ec4 <HAL_PCD_EP_DB_Transmit+0x186>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	4413      	add	r3, r2
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	00da      	lsls	r2, r3, #3
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ebc:	623b      	str	r3, [r7, #32]
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f008 f9d3 	bl	800d276 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 82fa 	beq.w	80054d0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	82fb      	strh	r3, [r7, #22]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	441a      	add	r2, r3
 8004f06:	8afb      	ldrh	r3, [r7, #22]
 8004f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	8013      	strh	r3, [r2, #0]
 8004f1c:	e2d8      	b.n	80054d0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f1e:	88fb      	ldrh	r3, [r7, #6]
 8004f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d021      	beq.n	8004f6c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	441a      	add	r2, r3
 8004f54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	f040 82ac 	bne.w	80054d0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	695a      	ldr	r2, [r3, #20]
 8004f7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f80:	441a      	add	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	69da      	ldr	r2, [r3, #28]
 8004f8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f8e:	441a      	add	r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	6a1a      	ldr	r2, [r3, #32]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d30b      	bcc.n	8004fb8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	6a1a      	ldr	r2, [r3, #32]
 8004fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fb0:	1ad2      	subs	r2, r2, r3
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	621a      	str	r2, [r3, #32]
 8004fb6:	e017      	b.n	8004fe8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d108      	bne.n	8004fd2 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004fc0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004fc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004fd0:	e00a      	b.n	8004fe8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	785b      	ldrb	r3, [r3, #1]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d165      	bne.n	80050bc <HAL_PCD_EP_DB_Transmit+0x37e>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005004:	4413      	add	r3, r2
 8005006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	00da      	lsls	r2, r3, #3
 800500e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005010:	4413      	add	r3, r2
 8005012:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005016:	63bb      	str	r3, [r7, #56]	; 0x38
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	b29b      	uxth	r3, r3
 800501e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005022:	b29a      	uxth	r2, r3
 8005024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005026:	801a      	strh	r2, [r3, #0]
 8005028:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800502c:	2b3e      	cmp	r3, #62	; 0x3e
 800502e:	d91d      	bls.n	800506c <HAL_PCD_EP_DB_Transmit+0x32e>
 8005030:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005034:	095b      	lsrs	r3, r3, #5
 8005036:	64bb      	str	r3, [r7, #72]	; 0x48
 8005038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	2b00      	cmp	r3, #0
 8005042:	d102      	bne.n	800504a <HAL_PCD_EP_DB_Transmit+0x30c>
 8005044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005046:	3b01      	subs	r3, #1
 8005048:	64bb      	str	r3, [r7, #72]	; 0x48
 800504a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29a      	uxth	r2, r3
 8005050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005052:	b29b      	uxth	r3, r3
 8005054:	029b      	lsls	r3, r3, #10
 8005056:	b29b      	uxth	r3, r3
 8005058:	4313      	orrs	r3, r2
 800505a:	b29b      	uxth	r3, r3
 800505c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005064:	b29a      	uxth	r2, r3
 8005066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005068:	801a      	strh	r2, [r3, #0]
 800506a:	e044      	b.n	80050f6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800506c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <HAL_PCD_EP_DB_Transmit+0x34c>
 8005074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005082:	b29a      	uxth	r2, r3
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	e035      	b.n	80050f6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800508a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800508e:	085b      	lsrs	r3, r3, #1
 8005090:	64bb      	str	r3, [r7, #72]	; 0x48
 8005092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_PCD_EP_DB_Transmit+0x366>
 800509e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a0:	3301      	adds	r3, #1
 80050a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	029b      	lsls	r3, r3, #10
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	4313      	orrs	r3, r2
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	801a      	strh	r2, [r3, #0]
 80050ba:	e01c      	b.n	80050f6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	785b      	ldrb	r3, [r3, #1]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d118      	bne.n	80050f6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	647b      	str	r3, [r7, #68]	; 0x44
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d8:	4413      	add	r3, r2
 80050da:	647b      	str	r3, [r7, #68]	; 0x44
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	00da      	lsls	r2, r3, #3
 80050e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050e4:	4413      	add	r3, r2
 80050e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050ea:	643b      	str	r3, [r7, #64]	; 0x40
 80050ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050f4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	6959      	ldr	r1, [r3, #20]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	891a      	ldrh	r2, [r3, #8]
 8005102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005106:	b29b      	uxth	r3, r3
 8005108:	f006 f888 	bl	800b21c <USB_WritePMA>
 800510c:	e1e0      	b.n	80054d0 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005116:	b29b      	uxth	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	4413      	add	r3, r2
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	6812      	ldr	r2, [r2, #0]
 8005126:	4413      	add	r3, r2
 8005128:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005132:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800513e:	429a      	cmp	r2, r3
 8005140:	d307      	bcc.n	8005152 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800514a:	1ad2      	subs	r2, r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	619a      	str	r2, [r3, #24]
 8005150:	e002      	b.n	8005158 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2200      	movs	r2, #0
 8005156:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f040 80c0 	bne.w	80052e2 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	785b      	ldrb	r3, [r3, #1]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d126      	bne.n	80051b8 <HAL_PCD_EP_DB_Transmit+0x47a>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005178:	b29b      	uxth	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800517e:	4413      	add	r3, r2
 8005180:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	00da      	lsls	r2, r3, #3
 8005188:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800518a:	4413      	add	r3, r2
 800518c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005190:	67bb      	str	r3, [r7, #120]	; 0x78
 8005192:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800519c:	b29a      	uxth	r2, r3
 800519e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051a0:	801a      	strh	r2, [r3, #0]
 80051a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051b4:	801a      	strh	r2, [r3, #0]
 80051b6:	e01a      	b.n	80051ee <HAL_PCD_EP_DB_Transmit+0x4b0>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	785b      	ldrb	r3, [r3, #1]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d116      	bne.n	80051ee <HAL_PCD_EP_DB_Transmit+0x4b0>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	667b      	str	r3, [r7, #100]	; 0x64
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	461a      	mov	r2, r3
 80051d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d4:	4413      	add	r3, r2
 80051d6:	667b      	str	r3, [r7, #100]	; 0x64
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	00da      	lsls	r2, r3, #3
 80051de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e0:	4413      	add	r3, r2
 80051e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051e6:	663b      	str	r3, [r7, #96]	; 0x60
 80051e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051ea:	2200      	movs	r2, #0
 80051ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	677b      	str	r3, [r7, #116]	; 0x74
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d12b      	bne.n	8005254 <HAL_PCD_EP_DB_Transmit+0x516>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800520a:	b29b      	uxth	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005210:	4413      	add	r3, r2
 8005212:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	00da      	lsls	r2, r3, #3
 800521a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521c:	4413      	add	r3, r2
 800521e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005222:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005226:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	b29b      	uxth	r3, r3
 800522e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005232:	b29a      	uxth	r2, r3
 8005234:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	b29b      	uxth	r3, r3
 8005242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800524a:	b29a      	uxth	r2, r3
 800524c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005250:	801a      	strh	r2, [r3, #0]
 8005252:	e017      	b.n	8005284 <HAL_PCD_EP_DB_Transmit+0x546>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d113      	bne.n	8005284 <HAL_PCD_EP_DB_Transmit+0x546>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005264:	b29b      	uxth	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800526a:	4413      	add	r3, r2
 800526c:	677b      	str	r3, [r7, #116]	; 0x74
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	00da      	lsls	r2, r3, #3
 8005274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005276:	4413      	add	r3, r2
 8005278:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800527c:	673b      	str	r3, [r7, #112]	; 0x70
 800527e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005280:	2200      	movs	r2, #0
 8005282:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	4619      	mov	r1, r3
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f007 fff3 	bl	800d276 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005290:	88fb      	ldrh	r3, [r7, #6]
 8005292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005296:	2b00      	cmp	r3, #0
 8005298:	f040 811a 	bne.w	80054d0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	441a      	add	r2, r3
 80052c8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80052cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052dc:	b29b      	uxth	r3, r3
 80052de:	8013      	strh	r3, [r2, #0]
 80052e0:	e0f6      	b.n	80054d0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d121      	bne.n	8005330 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005306:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	441a      	add	r2, r3
 8005318:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800531c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532c:	b29b      	uxth	r3, r3
 800532e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005336:	2b01      	cmp	r3, #1
 8005338:	f040 80ca 	bne.w	80054d0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	695a      	ldr	r2, [r3, #20]
 8005340:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005344:	441a      	add	r2, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	69da      	ldr	r2, [r3, #28]
 800534e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005352:	441a      	add	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	6a1a      	ldr	r2, [r3, #32]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	429a      	cmp	r2, r3
 8005362:	d30b      	bcc.n	800537c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	6a1a      	ldr	r2, [r3, #32]
 8005370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005374:	1ad2      	subs	r2, r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	621a      	str	r2, [r3, #32]
 800537a:	e017      	b.n	80053ac <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d108      	bne.n	8005396 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005384:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005388:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005394:	e00a      	b.n	80053ac <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2200      	movs	r2, #0
 80053a2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	657b      	str	r3, [r7, #84]	; 0x54
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	785b      	ldrb	r3, [r3, #1]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d165      	bne.n	8005486 <HAL_PCD_EP_DB_Transmit+0x748>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	461a      	mov	r2, r3
 80053cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ce:	4413      	add	r3, r2
 80053d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	00da      	lsls	r2, r3, #3
 80053d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053da:	4413      	add	r3, r2
 80053dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80053e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053f6:	2b3e      	cmp	r3, #62	; 0x3e
 80053f8:	d91d      	bls.n	8005436 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80053fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	66bb      	str	r3, [r7, #104]	; 0x68
 8005402:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800540e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005410:	3b01      	subs	r3, #1
 8005412:	66bb      	str	r3, [r7, #104]	; 0x68
 8005414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29a      	uxth	r2, r3
 800541a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800541c:	b29b      	uxth	r3, r3
 800541e:	029b      	lsls	r3, r3, #10
 8005420:	b29b      	uxth	r3, r3
 8005422:	4313      	orrs	r3, r2
 8005424:	b29b      	uxth	r3, r3
 8005426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542e:	b29a      	uxth	r2, r3
 8005430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	e041      	b.n	80054ba <HAL_PCD_EP_DB_Transmit+0x77c>
 8005436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <HAL_PCD_EP_DB_Transmit+0x716>
 800543e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800544c:	b29a      	uxth	r2, r3
 800544e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005450:	801a      	strh	r2, [r3, #0]
 8005452:	e032      	b.n	80054ba <HAL_PCD_EP_DB_Transmit+0x77c>
 8005454:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005458:	085b      	lsrs	r3, r3, #1
 800545a:	66bb      	str	r3, [r7, #104]	; 0x68
 800545c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <HAL_PCD_EP_DB_Transmit+0x730>
 8005468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800546a:	3301      	adds	r3, #1
 800546c:	66bb      	str	r3, [r7, #104]	; 0x68
 800546e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b29a      	uxth	r2, r3
 8005474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005476:	b29b      	uxth	r3, r3
 8005478:	029b      	lsls	r3, r3, #10
 800547a:	b29b      	uxth	r3, r3
 800547c:	4313      	orrs	r3, r2
 800547e:	b29a      	uxth	r2, r3
 8005480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005482:	801a      	strh	r2, [r3, #0]
 8005484:	e019      	b.n	80054ba <HAL_PCD_EP_DB_Transmit+0x77c>
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d115      	bne.n	80054ba <HAL_PCD_EP_DB_Transmit+0x77c>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005496:	b29b      	uxth	r3, r3
 8005498:	461a      	mov	r2, r3
 800549a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800549c:	4413      	add	r3, r2
 800549e:	657b      	str	r3, [r7, #84]	; 0x54
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	00da      	lsls	r2, r3, #3
 80054a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a8:	4413      	add	r3, r2
 80054aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054ae:	653b      	str	r3, [r7, #80]	; 0x50
 80054b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6959      	ldr	r1, [r3, #20]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	895a      	ldrh	r2, [r3, #10]
 80054c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	f005 fea6 	bl	800b21c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ea:	82bb      	strh	r3, [r7, #20]
 80054ec:	8abb      	ldrh	r3, [r7, #20]
 80054ee:	f083 0310 	eor.w	r3, r3, #16
 80054f2:	82bb      	strh	r3, [r7, #20]
 80054f4:	8abb      	ldrh	r3, [r7, #20]
 80054f6:	f083 0320 	eor.w	r3, r3, #32
 80054fa:	82bb      	strh	r3, [r7, #20]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	441a      	add	r2, r3
 800550a:	8abb      	ldrh	r3, [r7, #20]
 800550c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551c:	b29b      	uxth	r3, r3
 800551e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3790      	adds	r7, #144	; 0x90
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800552a:	b480      	push	{r7}
 800552c:	b087      	sub	sp, #28
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	607b      	str	r3, [r7, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	817b      	strh	r3, [r7, #10]
 8005538:	4613      	mov	r3, r2
 800553a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800553c:	897b      	ldrh	r3, [r7, #10]
 800553e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00b      	beq.n	8005560 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005548:	897b      	ldrh	r3, [r7, #10]
 800554a:	f003 0207 	and.w	r2, r3, #7
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	3310      	adds	r3, #16
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	e009      	b.n	8005574 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005560:	897a      	ldrh	r2, [r7, #10]
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4413      	add	r3, r2
 8005572:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005574:	893b      	ldrh	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d107      	bne.n	800558a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2200      	movs	r2, #0
 800557e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	b29a      	uxth	r2, r3
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	80da      	strh	r2, [r3, #6]
 8005588:	e00b      	b.n	80055a2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2201      	movs	r2, #1
 800558e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	b29a      	uxth	r2, r3
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	0c1b      	lsrs	r3, r3, #16
 800559c:	b29a      	uxth	r2, r3
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f043 0301 	orr.w	r3, r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f043 0302 	orr.w	r3, r3, #2
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d141      	bne.n	8005696 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005612:	4b4b      	ldr	r3, [pc, #300]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800561a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561e:	d131      	bne.n	8005684 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005620:	4b47      	ldr	r3, [pc, #284]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005626:	4a46      	ldr	r2, [pc, #280]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800562c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005630:	4b43      	ldr	r3, [pc, #268]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005638:	4a41      	ldr	r2, [pc, #260]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800563a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800563e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005640:	4b40      	ldr	r3, [pc, #256]	; (8005744 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2232      	movs	r2, #50	; 0x32
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	4a3f      	ldr	r2, [pc, #252]	; (8005748 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800564c:	fba2 2303 	umull	r2, r3, r2, r3
 8005650:	0c9b      	lsrs	r3, r3, #18
 8005652:	3301      	adds	r3, #1
 8005654:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005656:	e002      	b.n	800565e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3b01      	subs	r3, #1
 800565c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800565e:	4b38      	ldr	r3, [pc, #224]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566a:	d102      	bne.n	8005672 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1f2      	bne.n	8005658 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005672:	4b33      	ldr	r3, [pc, #204]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800567a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567e:	d158      	bne.n	8005732 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e057      	b.n	8005734 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005684:	4b2e      	ldr	r3, [pc, #184]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800568a:	4a2d      	ldr	r2, [pc, #180]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800568c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005690:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005694:	e04d      	b.n	8005732 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800569c:	d141      	bne.n	8005722 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800569e:	4b28      	ldr	r3, [pc, #160]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056aa:	d131      	bne.n	8005710 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056ac:	4b24      	ldr	r3, [pc, #144]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b2:	4a23      	ldr	r2, [pc, #140]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056bc:	4b20      	ldr	r3, [pc, #128]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056c4:	4a1e      	ldr	r2, [pc, #120]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056cc:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2232      	movs	r2, #50	; 0x32
 80056d2:	fb02 f303 	mul.w	r3, r2, r3
 80056d6:	4a1c      	ldr	r2, [pc, #112]	; (8005748 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056d8:	fba2 2303 	umull	r2, r3, r2, r3
 80056dc:	0c9b      	lsrs	r3, r3, #18
 80056de:	3301      	adds	r3, #1
 80056e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056e2:	e002      	b.n	80056ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ea:	4b15      	ldr	r3, [pc, #84]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f6:	d102      	bne.n	80056fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f2      	bne.n	80056e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056fe:	4b10      	ldr	r3, [pc, #64]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570a:	d112      	bne.n	8005732 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e011      	b.n	8005734 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005716:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800571c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005720:	e007      	b.n	8005732 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005722:	4b07      	ldr	r3, [pc, #28]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800572a:	4a05      	ldr	r2, [pc, #20]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800572c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005730:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	40007000 	.word	0x40007000
 8005744:	20000000 	.word	0x20000000
 8005748:	431bde83 	.word	0x431bde83

0800574c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005750:	4b05      	ldr	r3, [pc, #20]	; (8005768 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4a04      	ldr	r2, [pc, #16]	; (8005768 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800575a:	6093      	str	r3, [r2, #8]
}
 800575c:	bf00      	nop
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40007000 	.word	0x40007000

0800576c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005772:	f7fd fe61 	bl	8003438 <HAL_GetTick>
 8005776:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005778:	4b39      	ldr	r3, [pc, #228]	; (8005860 <HAL_RCC_DeInit+0xf4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a38      	ldr	r2, [pc, #224]	; (8005860 <HAL_RCC_DeInit+0xf4>)
 800577e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005782:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005784:	e008      	b.n	8005798 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005786:	f7fd fe57 	bl	8003438 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e05f      	b.n	8005858 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005798:	4b31      	ldr	r3, [pc, #196]	; (8005860 <HAL_RCC_DeInit+0xf4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 80057a4:	4b2e      	ldr	r3, [pc, #184]	; (8005860 <HAL_RCC_DeInit+0xf4>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	4a2d      	ldr	r2, [pc, #180]	; (8005860 <HAL_RCC_DeInit+0xf4>)
 80057aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ae:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057b0:	f7fd fe42 	bl	8003438 <HAL_GetTick>
 80057b4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 80057b6:	4b2a      	ldr	r3, [pc, #168]	; (8005860 <HAL_RCC_DeInit+0xf4>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80057bc:	e00a      	b.n	80057d4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057be:	f7fd fe3b 	bl	8003438 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e041      	b.n	8005858 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80057d4:	4b22      	ldr	r3, [pc, #136]	; (8005860 <HAL_RCC_DeInit+0xf4>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 030c 	and.w	r3, r3, #12
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d1ee      	bne.n	80057be <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80057e0:	4b20      	ldr	r3, [pc, #128]	; (8005864 <HAL_RCC_DeInit+0xf8>)
 80057e2:	4a21      	ldr	r2, [pc, #132]	; (8005868 <HAL_RCC_DeInit+0xfc>)
 80057e4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80057e6:	4b21      	ldr	r3, [pc, #132]	; (800586c <HAL_RCC_DeInit+0x100>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fd fdd8 	bl	80033a0 <HAL_InitTick>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e02e      	b.n	8005858 <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 80057fa:	4b19      	ldr	r3, [pc, #100]	; (8005860 <HAL_RCC_DeInit+0xf4>)
 80057fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005800:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8005802:	4b17      	ldr	r3, [pc, #92]	; (8005860 <HAL_RCC_DeInit+0xf4>)
 8005804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005808:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800580a:	f7fd fe15 	bl	8003438 <HAL_GetTick>
 800580e:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005810:	e008      	b.n	8005824 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005812:	f7fd fe11 	bl	8003438 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e019      	b.n	8005858 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005824:	4b0e      	ldr	r3, [pc, #56]	; (8005860 <HAL_RCC_DeInit+0xf4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1f0      	bne.n	8005812 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <HAL_RCC_DeInit+0xf4>)
 8005832:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005836:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8005838:	4b09      	ldr	r3, [pc, #36]	; (8005860 <HAL_RCC_DeInit+0xf4>)
 800583a:	2200      	movs	r2, #0
 800583c:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800583e:	4b08      	ldr	r3, [pc, #32]	; (8005860 <HAL_RCC_DeInit+0xf4>)
 8005840:	f04f 32ff 	mov.w	r2, #4294967295
 8005844:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8005846:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_RCC_DeInit+0xf4>)
 8005848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584c:	4a04      	ldr	r2, [pc, #16]	; (8005860 <HAL_RCC_DeInit+0xf4>)
 800584e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005852:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40021000 	.word	0x40021000
 8005864:	20000000 	.word	0x20000000
 8005868:	00f42400 	.word	0x00f42400
 800586c:	20000008 	.word	0x20000008

08005870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e2fe      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d075      	beq.n	800597a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800588e:	4b97      	ldr	r3, [pc, #604]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 030c 	and.w	r3, r3, #12
 8005896:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005898:	4b94      	ldr	r3, [pc, #592]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	2b0c      	cmp	r3, #12
 80058a6:	d102      	bne.n	80058ae <HAL_RCC_OscConfig+0x3e>
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d002      	beq.n	80058b4 <HAL_RCC_OscConfig+0x44>
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d10b      	bne.n	80058cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b4:	4b8d      	ldr	r3, [pc, #564]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d05b      	beq.n	8005978 <HAL_RCC_OscConfig+0x108>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d157      	bne.n	8005978 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e2d9      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d4:	d106      	bne.n	80058e4 <HAL_RCC_OscConfig+0x74>
 80058d6:	4b85      	ldr	r3, [pc, #532]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a84      	ldr	r2, [pc, #528]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 80058dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	e01d      	b.n	8005920 <HAL_RCC_OscConfig+0xb0>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058ec:	d10c      	bne.n	8005908 <HAL_RCC_OscConfig+0x98>
 80058ee:	4b7f      	ldr	r3, [pc, #508]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a7e      	ldr	r2, [pc, #504]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 80058f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	4b7c      	ldr	r3, [pc, #496]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a7b      	ldr	r2, [pc, #492]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	e00b      	b.n	8005920 <HAL_RCC_OscConfig+0xb0>
 8005908:	4b78      	ldr	r3, [pc, #480]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a77      	ldr	r2, [pc, #476]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 800590e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	4b75      	ldr	r3, [pc, #468]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a74      	ldr	r2, [pc, #464]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 800591a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800591e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d013      	beq.n	8005950 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005928:	f7fd fd86 	bl	8003438 <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005930:	f7fd fd82 	bl	8003438 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b64      	cmp	r3, #100	; 0x64
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e29e      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005942:	4b6a      	ldr	r3, [pc, #424]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0f0      	beq.n	8005930 <HAL_RCC_OscConfig+0xc0>
 800594e:	e014      	b.n	800597a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005950:	f7fd fd72 	bl	8003438 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005958:	f7fd fd6e 	bl	8003438 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b64      	cmp	r3, #100	; 0x64
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e28a      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800596a:	4b60      	ldr	r3, [pc, #384]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f0      	bne.n	8005958 <HAL_RCC_OscConfig+0xe8>
 8005976:	e000      	b.n	800597a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d075      	beq.n	8005a72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005986:	4b59      	ldr	r3, [pc, #356]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 030c 	and.w	r3, r3, #12
 800598e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005990:	4b56      	ldr	r3, [pc, #344]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f003 0303 	and.w	r3, r3, #3
 8005998:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	2b0c      	cmp	r3, #12
 800599e:	d102      	bne.n	80059a6 <HAL_RCC_OscConfig+0x136>
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d002      	beq.n	80059ac <HAL_RCC_OscConfig+0x13c>
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d11f      	bne.n	80059ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059ac:	4b4f      	ldr	r3, [pc, #316]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_RCC_OscConfig+0x154>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e25d      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c4:	4b49      	ldr	r3, [pc, #292]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	061b      	lsls	r3, r3, #24
 80059d2:	4946      	ldr	r1, [pc, #280]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059d8:	4b45      	ldr	r3, [pc, #276]	; (8005af0 <HAL_RCC_OscConfig+0x280>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fd fcdf 	bl	80033a0 <HAL_InitTick>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d043      	beq.n	8005a70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e249      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d023      	beq.n	8005a3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059f4:	4b3d      	ldr	r3, [pc, #244]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a3c      	ldr	r2, [pc, #240]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 80059fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fd fd1a 	bl	8003438 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a08:	f7fd fd16 	bl	8003438 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e232      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a1a:	4b34      	ldr	r3, [pc, #208]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0f0      	beq.n	8005a08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a26:	4b31      	ldr	r3, [pc, #196]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	061b      	lsls	r3, r3, #24
 8005a34:	492d      	ldr	r1, [pc, #180]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	604b      	str	r3, [r1, #4]
 8005a3a:	e01a      	b.n	8005a72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a3c:	4b2b      	ldr	r3, [pc, #172]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a2a      	ldr	r2, [pc, #168]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005a42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a48:	f7fd fcf6 	bl	8003438 <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a4e:	e008      	b.n	8005a62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a50:	f7fd fcf2 	bl	8003438 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e20e      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a62:	4b22      	ldr	r3, [pc, #136]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1f0      	bne.n	8005a50 <HAL_RCC_OscConfig+0x1e0>
 8005a6e:	e000      	b.n	8005a72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d041      	beq.n	8005b02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d01c      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a86:	4b19      	ldr	r3, [pc, #100]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a8c:	4a17      	ldr	r2, [pc, #92]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a96:	f7fd fccf 	bl	8003438 <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a9e:	f7fd fccb 	bl	8003438 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e1e7      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ab0:	4b0e      	ldr	r3, [pc, #56]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0ef      	beq.n	8005a9e <HAL_RCC_OscConfig+0x22e>
 8005abe:	e020      	b.n	8005b02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ac6:	4a09      	ldr	r2, [pc, #36]	; (8005aec <HAL_RCC_OscConfig+0x27c>)
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad0:	f7fd fcb2 	bl	8003438 <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ad6:	e00d      	b.n	8005af4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ad8:	f7fd fcae 	bl	8003438 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d906      	bls.n	8005af4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e1ca      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
 8005aea:	bf00      	nop
 8005aec:	40021000 	.word	0x40021000
 8005af0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005af4:	4b8c      	ldr	r3, [pc, #560]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1ea      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 80a6 	beq.w	8005c5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b10:	2300      	movs	r3, #0
 8005b12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b14:	4b84      	ldr	r3, [pc, #528]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_RCC_OscConfig+0x2b4>
 8005b20:	2301      	movs	r3, #1
 8005b22:	e000      	b.n	8005b26 <HAL_RCC_OscConfig+0x2b6>
 8005b24:	2300      	movs	r3, #0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00d      	beq.n	8005b46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b2a:	4b7f      	ldr	r3, [pc, #508]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2e:	4a7e      	ldr	r2, [pc, #504]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b34:	6593      	str	r3, [r2, #88]	; 0x58
 8005b36:	4b7c      	ldr	r3, [pc, #496]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b42:	2301      	movs	r3, #1
 8005b44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b46:	4b79      	ldr	r3, [pc, #484]	; (8005d2c <HAL_RCC_OscConfig+0x4bc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d118      	bne.n	8005b84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b52:	4b76      	ldr	r3, [pc, #472]	; (8005d2c <HAL_RCC_OscConfig+0x4bc>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a75      	ldr	r2, [pc, #468]	; (8005d2c <HAL_RCC_OscConfig+0x4bc>)
 8005b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b5e:	f7fd fc6b 	bl	8003438 <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b64:	e008      	b.n	8005b78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b66:	f7fd fc67 	bl	8003438 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e183      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b78:	4b6c      	ldr	r3, [pc, #432]	; (8005d2c <HAL_RCC_OscConfig+0x4bc>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0f0      	beq.n	8005b66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d108      	bne.n	8005b9e <HAL_RCC_OscConfig+0x32e>
 8005b8c:	4b66      	ldr	r3, [pc, #408]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b92:	4a65      	ldr	r2, [pc, #404]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b9c:	e024      	b.n	8005be8 <HAL_RCC_OscConfig+0x378>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	2b05      	cmp	r3, #5
 8005ba4:	d110      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x358>
 8005ba6:	4b60      	ldr	r3, [pc, #384]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bac:	4a5e      	ldr	r2, [pc, #376]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005bae:	f043 0304 	orr.w	r3, r3, #4
 8005bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bb6:	4b5c      	ldr	r3, [pc, #368]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bbc:	4a5a      	ldr	r2, [pc, #360]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bc6:	e00f      	b.n	8005be8 <HAL_RCC_OscConfig+0x378>
 8005bc8:	4b57      	ldr	r3, [pc, #348]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bce:	4a56      	ldr	r2, [pc, #344]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005bd0:	f023 0301 	bic.w	r3, r3, #1
 8005bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bd8:	4b53      	ldr	r3, [pc, #332]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bde:	4a52      	ldr	r2, [pc, #328]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005be0:	f023 0304 	bic.w	r3, r3, #4
 8005be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d016      	beq.n	8005c1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf0:	f7fd fc22 	bl	8003438 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bf6:	e00a      	b.n	8005c0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf8:	f7fd fc1e 	bl	8003438 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e138      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c0e:	4b46      	ldr	r3, [pc, #280]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0ed      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x388>
 8005c1c:	e015      	b.n	8005c4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c1e:	f7fd fc0b 	bl	8003438 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c24:	e00a      	b.n	8005c3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c26:	f7fd fc07 	bl	8003438 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e121      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c3c:	4b3a      	ldr	r3, [pc, #232]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1ed      	bne.n	8005c26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c4a:	7ffb      	ldrb	r3, [r7, #31]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d105      	bne.n	8005c5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c50:	4b35      	ldr	r3, [pc, #212]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c54:	4a34      	ldr	r2, [pc, #208]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d03c      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01c      	beq.n	8005caa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c70:	4b2d      	ldr	r3, [pc, #180]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c76:	4a2c      	ldr	r2, [pc, #176]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005c78:	f043 0301 	orr.w	r3, r3, #1
 8005c7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c80:	f7fd fbda 	bl	8003438 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c88:	f7fd fbd6 	bl	8003438 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e0f2      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c9a:	4b23      	ldr	r3, [pc, #140]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0ef      	beq.n	8005c88 <HAL_RCC_OscConfig+0x418>
 8005ca8:	e01b      	b.n	8005ce2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005caa:	4b1f      	ldr	r3, [pc, #124]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005cb2:	f023 0301 	bic.w	r3, r3, #1
 8005cb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cba:	f7fd fbbd 	bl	8003438 <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cc2:	f7fd fbb9 	bl	8003438 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e0d5      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cd4:	4b14      	ldr	r3, [pc, #80]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1ef      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 80c9 	beq.w	8005e7e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cec:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 030c 	and.w	r3, r3, #12
 8005cf4:	2b0c      	cmp	r3, #12
 8005cf6:	f000 8083 	beq.w	8005e00 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d15e      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d02:	4b09      	ldr	r3, [pc, #36]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a08      	ldr	r2, [pc, #32]	; (8005d28 <HAL_RCC_OscConfig+0x4b8>)
 8005d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0e:	f7fd fb93 	bl	8003438 <HAL_GetTick>
 8005d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d14:	e00c      	b.n	8005d30 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d16:	f7fd fb8f 	bl	8003438 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d905      	bls.n	8005d30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e0ab      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d30:	4b55      	ldr	r3, [pc, #340]	; (8005e88 <HAL_RCC_OscConfig+0x618>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1ec      	bne.n	8005d16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d3c:	4b52      	ldr	r3, [pc, #328]	; (8005e88 <HAL_RCC_OscConfig+0x618>)
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	4b52      	ldr	r3, [pc, #328]	; (8005e8c <HAL_RCC_OscConfig+0x61c>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6a11      	ldr	r1, [r2, #32]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d4c:	3a01      	subs	r2, #1
 8005d4e:	0112      	lsls	r2, r2, #4
 8005d50:	4311      	orrs	r1, r2
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005d56:	0212      	lsls	r2, r2, #8
 8005d58:	4311      	orrs	r1, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d5e:	0852      	lsrs	r2, r2, #1
 8005d60:	3a01      	subs	r2, #1
 8005d62:	0552      	lsls	r2, r2, #21
 8005d64:	4311      	orrs	r1, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d6a:	0852      	lsrs	r2, r2, #1
 8005d6c:	3a01      	subs	r2, #1
 8005d6e:	0652      	lsls	r2, r2, #25
 8005d70:	4311      	orrs	r1, r2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d76:	06d2      	lsls	r2, r2, #27
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	4943      	ldr	r1, [pc, #268]	; (8005e88 <HAL_RCC_OscConfig+0x618>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d80:	4b41      	ldr	r3, [pc, #260]	; (8005e88 <HAL_RCC_OscConfig+0x618>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a40      	ldr	r2, [pc, #256]	; (8005e88 <HAL_RCC_OscConfig+0x618>)
 8005d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d8c:	4b3e      	ldr	r3, [pc, #248]	; (8005e88 <HAL_RCC_OscConfig+0x618>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4a3d      	ldr	r2, [pc, #244]	; (8005e88 <HAL_RCC_OscConfig+0x618>)
 8005d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d98:	f7fd fb4e 	bl	8003438 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da0:	f7fd fb4a 	bl	8003438 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e066      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005db2:	4b35      	ldr	r3, [pc, #212]	; (8005e88 <HAL_RCC_OscConfig+0x618>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f0      	beq.n	8005da0 <HAL_RCC_OscConfig+0x530>
 8005dbe:	e05e      	b.n	8005e7e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc0:	4b31      	ldr	r3, [pc, #196]	; (8005e88 <HAL_RCC_OscConfig+0x618>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a30      	ldr	r2, [pc, #192]	; (8005e88 <HAL_RCC_OscConfig+0x618>)
 8005dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dcc:	f7fd fb34 	bl	8003438 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd4:	f7fd fb30 	bl	8003438 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e04c      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005de6:	4b28      	ldr	r3, [pc, #160]	; (8005e88 <HAL_RCC_OscConfig+0x618>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1f0      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005df2:	4b25      	ldr	r3, [pc, #148]	; (8005e88 <HAL_RCC_OscConfig+0x618>)
 8005df4:	68da      	ldr	r2, [r3, #12]
 8005df6:	4924      	ldr	r1, [pc, #144]	; (8005e88 <HAL_RCC_OscConfig+0x618>)
 8005df8:	4b25      	ldr	r3, [pc, #148]	; (8005e90 <HAL_RCC_OscConfig+0x620>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	60cb      	str	r3, [r1, #12]
 8005dfe:	e03e      	b.n	8005e7e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e039      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e0c:	4b1e      	ldr	r3, [pc, #120]	; (8005e88 <HAL_RCC_OscConfig+0x618>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f003 0203 	and.w	r2, r3, #3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d12c      	bne.n	8005e7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d123      	bne.n	8005e7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d11b      	bne.n	8005e7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d113      	bne.n	8005e7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d109      	bne.n	8005e7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e70:	085b      	lsrs	r3, r3, #1
 8005e72:	3b01      	subs	r3, #1
 8005e74:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d001      	beq.n	8005e7e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3720      	adds	r7, #32
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	019f800c 	.word	0x019f800c
 8005e90:	feeefffc 	.word	0xfeeefffc

08005e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e11e      	b.n	80060ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005eac:	4b91      	ldr	r3, [pc, #580]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d910      	bls.n	8005edc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eba:	4b8e      	ldr	r3, [pc, #568]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f023 020f 	bic.w	r2, r3, #15
 8005ec2:	498c      	ldr	r1, [pc, #560]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eca:	4b8a      	ldr	r3, [pc, #552]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d001      	beq.n	8005edc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e106      	b.n	80060ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d073      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d129      	bne.n	8005f44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ef0:	4b81      	ldr	r3, [pc, #516]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e0f4      	b.n	80060ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f00:	f000 f99e 	bl	8006240 <RCC_GetSysClockFreqFromPLLSource>
 8005f04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	4a7c      	ldr	r2, [pc, #496]	; (80060fc <HAL_RCC_ClockConfig+0x268>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d93f      	bls.n	8005f8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f0e:	4b7a      	ldr	r3, [pc, #488]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d009      	beq.n	8005f2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d033      	beq.n	8005f8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d12f      	bne.n	8005f8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f2e:	4b72      	ldr	r3, [pc, #456]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f36:	4a70      	ldr	r2, [pc, #448]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8005f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f3e:	2380      	movs	r3, #128	; 0x80
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	e024      	b.n	8005f8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d107      	bne.n	8005f5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f4c:	4b6a      	ldr	r3, [pc, #424]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d109      	bne.n	8005f6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e0c6      	b.n	80060ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f5c:	4b66      	ldr	r3, [pc, #408]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e0be      	b.n	80060ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005f6c:	f000 f8ce 	bl	800610c <HAL_RCC_GetSysClockFreq>
 8005f70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	4a61      	ldr	r2, [pc, #388]	; (80060fc <HAL_RCC_ClockConfig+0x268>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d909      	bls.n	8005f8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f7a:	4b5f      	ldr	r3, [pc, #380]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f82:	4a5d      	ldr	r2, [pc, #372]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8005f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f8a:	2380      	movs	r3, #128	; 0x80
 8005f8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f8e:	4b5a      	ldr	r3, [pc, #360]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f023 0203 	bic.w	r2, r3, #3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	4957      	ldr	r1, [pc, #348]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fa0:	f7fd fa4a 	bl	8003438 <HAL_GetTick>
 8005fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa6:	e00a      	b.n	8005fbe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fa8:	f7fd fa46 	bl	8003438 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e095      	b.n	80060ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fbe:	4b4e      	ldr	r3, [pc, #312]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 020c 	and.w	r2, r3, #12
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d1eb      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d023      	beq.n	8006024 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fe8:	4b43      	ldr	r3, [pc, #268]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	4a42      	ldr	r2, [pc, #264]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8005fee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ff2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d007      	beq.n	8006010 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006000:	4b3d      	ldr	r3, [pc, #244]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006008:	4a3b      	ldr	r2, [pc, #236]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 800600a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800600e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006010:	4b39      	ldr	r3, [pc, #228]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	4936      	ldr	r1, [pc, #216]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 800601e:	4313      	orrs	r3, r2
 8006020:	608b      	str	r3, [r1, #8]
 8006022:	e008      	b.n	8006036 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2b80      	cmp	r3, #128	; 0x80
 8006028:	d105      	bne.n	8006036 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800602a:	4b33      	ldr	r3, [pc, #204]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	4a32      	ldr	r2, [pc, #200]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 8006030:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006034:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006036:	4b2f      	ldr	r3, [pc, #188]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d21d      	bcs.n	8006080 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006044:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f023 020f 	bic.w	r2, r3, #15
 800604c:	4929      	ldr	r1, [pc, #164]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	4313      	orrs	r3, r2
 8006052:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006054:	f7fd f9f0 	bl	8003438 <HAL_GetTick>
 8006058:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800605a:	e00a      	b.n	8006072 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800605c:	f7fd f9ec 	bl	8003438 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	f241 3288 	movw	r2, #5000	; 0x1388
 800606a:	4293      	cmp	r3, r2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e03b      	b.n	80060ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006072:	4b20      	ldr	r3, [pc, #128]	; (80060f4 <HAL_RCC_ClockConfig+0x260>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d1ed      	bne.n	800605c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d008      	beq.n	800609e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800608c:	4b1a      	ldr	r3, [pc, #104]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	4917      	ldr	r1, [pc, #92]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 800609a:	4313      	orrs	r3, r2
 800609c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0308 	and.w	r3, r3, #8
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d009      	beq.n	80060be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060aa:	4b13      	ldr	r3, [pc, #76]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	490f      	ldr	r1, [pc, #60]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060be:	f000 f825 	bl	800610c <HAL_RCC_GetSysClockFreq>
 80060c2:	4602      	mov	r2, r0
 80060c4:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <HAL_RCC_ClockConfig+0x264>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	490c      	ldr	r1, [pc, #48]	; (8006100 <HAL_RCC_ClockConfig+0x26c>)
 80060d0:	5ccb      	ldrb	r3, [r1, r3]
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	fa22 f303 	lsr.w	r3, r2, r3
 80060da:	4a0a      	ldr	r2, [pc, #40]	; (8006104 <HAL_RCC_ClockConfig+0x270>)
 80060dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80060de:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <HAL_RCC_ClockConfig+0x274>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fd f95c 	bl	80033a0 <HAL_InitTick>
 80060e8:	4603      	mov	r3, r0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	40022000 	.word	0x40022000
 80060f8:	40021000 	.word	0x40021000
 80060fc:	04c4b400 	.word	0x04c4b400
 8006100:	08010cb8 	.word	0x08010cb8
 8006104:	20000000 	.word	0x20000000
 8006108:	20000008 	.word	0x20000008

0800610c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006112:	4b2c      	ldr	r3, [pc, #176]	; (80061c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 030c 	and.w	r3, r3, #12
 800611a:	2b04      	cmp	r3, #4
 800611c:	d102      	bne.n	8006124 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800611e:	4b2a      	ldr	r3, [pc, #168]	; (80061c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	e047      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006124:	4b27      	ldr	r3, [pc, #156]	; (80061c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f003 030c 	and.w	r3, r3, #12
 800612c:	2b08      	cmp	r3, #8
 800612e:	d102      	bne.n	8006136 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006130:	4b26      	ldr	r3, [pc, #152]	; (80061cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	e03e      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006136:	4b23      	ldr	r3, [pc, #140]	; (80061c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 030c 	and.w	r3, r3, #12
 800613e:	2b0c      	cmp	r3, #12
 8006140:	d136      	bne.n	80061b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006142:	4b20      	ldr	r3, [pc, #128]	; (80061c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800614c:	4b1d      	ldr	r3, [pc, #116]	; (80061c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	091b      	lsrs	r3, r3, #4
 8006152:	f003 030f 	and.w	r3, r3, #15
 8006156:	3301      	adds	r3, #1
 8006158:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b03      	cmp	r3, #3
 800615e:	d10c      	bne.n	800617a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006160:	4a1a      	ldr	r2, [pc, #104]	; (80061cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	fbb2 f3f3 	udiv	r3, r2, r3
 8006168:	4a16      	ldr	r2, [pc, #88]	; (80061c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800616a:	68d2      	ldr	r2, [r2, #12]
 800616c:	0a12      	lsrs	r2, r2, #8
 800616e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	617b      	str	r3, [r7, #20]
      break;
 8006178:	e00c      	b.n	8006194 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800617a:	4a13      	ldr	r2, [pc, #76]	; (80061c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006182:	4a10      	ldr	r2, [pc, #64]	; (80061c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006184:	68d2      	ldr	r2, [r2, #12]
 8006186:	0a12      	lsrs	r2, r2, #8
 8006188:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800618c:	fb02 f303 	mul.w	r3, r2, r3
 8006190:	617b      	str	r3, [r7, #20]
      break;
 8006192:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006194:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	0e5b      	lsrs	r3, r3, #25
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	3301      	adds	r3, #1
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	e001      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80061b4:	693b      	ldr	r3, [r7, #16]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	371c      	adds	r7, #28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40021000 	.word	0x40021000
 80061c8:	00f42400 	.word	0x00f42400
 80061cc:	016e3600 	.word	0x016e3600

080061d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061d4:	4b03      	ldr	r3, [pc, #12]	; (80061e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80061d6:	681b      	ldr	r3, [r3, #0]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20000000 	.word	0x20000000

080061e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80061ec:	f7ff fff0 	bl	80061d0 <HAL_RCC_GetHCLKFreq>
 80061f0:	4602      	mov	r2, r0
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <HAL_RCC_GetPCLK1Freq+0x24>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	0a1b      	lsrs	r3, r3, #8
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	4904      	ldr	r1, [pc, #16]	; (8006210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061fe:	5ccb      	ldrb	r3, [r1, r3]
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006208:	4618      	mov	r0, r3
 800620a:	bd80      	pop	{r7, pc}
 800620c:	40021000 	.word	0x40021000
 8006210:	08010cc8 	.word	0x08010cc8

08006214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006218:	f7ff ffda 	bl	80061d0 <HAL_RCC_GetHCLKFreq>
 800621c:	4602      	mov	r2, r0
 800621e:	4b06      	ldr	r3, [pc, #24]	; (8006238 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	0adb      	lsrs	r3, r3, #11
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	4904      	ldr	r1, [pc, #16]	; (800623c <HAL_RCC_GetPCLK2Freq+0x28>)
 800622a:	5ccb      	ldrb	r3, [r1, r3]
 800622c:	f003 031f 	and.w	r3, r3, #31
 8006230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006234:	4618      	mov	r0, r3
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40021000 	.word	0x40021000
 800623c:	08010cc8 	.word	0x08010cc8

08006240 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006246:	4b1e      	ldr	r3, [pc, #120]	; (80062c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006250:	4b1b      	ldr	r3, [pc, #108]	; (80062c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	091b      	lsrs	r3, r3, #4
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	3301      	adds	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	2b03      	cmp	r3, #3
 8006262:	d10c      	bne.n	800627e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006264:	4a17      	ldr	r2, [pc, #92]	; (80062c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	fbb2 f3f3 	udiv	r3, r2, r3
 800626c:	4a14      	ldr	r2, [pc, #80]	; (80062c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800626e:	68d2      	ldr	r2, [r2, #12]
 8006270:	0a12      	lsrs	r2, r2, #8
 8006272:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006276:	fb02 f303 	mul.w	r3, r2, r3
 800627a:	617b      	str	r3, [r7, #20]
    break;
 800627c:	e00c      	b.n	8006298 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800627e:	4a12      	ldr	r2, [pc, #72]	; (80062c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	fbb2 f3f3 	udiv	r3, r2, r3
 8006286:	4a0e      	ldr	r2, [pc, #56]	; (80062c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006288:	68d2      	ldr	r2, [r2, #12]
 800628a:	0a12      	lsrs	r2, r2, #8
 800628c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006290:	fb02 f303 	mul.w	r3, r2, r3
 8006294:	617b      	str	r3, [r7, #20]
    break;
 8006296:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006298:	4b09      	ldr	r3, [pc, #36]	; (80062c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	0e5b      	lsrs	r3, r3, #25
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	3301      	adds	r3, #1
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80062b2:	687b      	ldr	r3, [r7, #4]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	40021000 	.word	0x40021000
 80062c4:	016e3600 	.word	0x016e3600
 80062c8:	00f42400 	.word	0x00f42400

080062cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062d4:	2300      	movs	r3, #0
 80062d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062d8:	2300      	movs	r3, #0
 80062da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8098 	beq.w	800641a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062ea:	2300      	movs	r3, #0
 80062ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062ee:	4b43      	ldr	r3, [pc, #268]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10d      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062fa:	4b40      	ldr	r3, [pc, #256]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fe:	4a3f      	ldr	r2, [pc, #252]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006304:	6593      	str	r3, [r2, #88]	; 0x58
 8006306:	4b3d      	ldr	r3, [pc, #244]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800630e:	60bb      	str	r3, [r7, #8]
 8006310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006312:	2301      	movs	r3, #1
 8006314:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006316:	4b3a      	ldr	r3, [pc, #232]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a39      	ldr	r2, [pc, #228]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800631c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006320:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006322:	f7fd f889 	bl	8003438 <HAL_GetTick>
 8006326:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006328:	e009      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800632a:	f7fd f885 	bl	8003438 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d902      	bls.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	74fb      	strb	r3, [r7, #19]
        break;
 800633c:	e005      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800633e:	4b30      	ldr	r3, [pc, #192]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0ef      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800634a:	7cfb      	ldrb	r3, [r7, #19]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d159      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006350:	4b2a      	ldr	r3, [pc, #168]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800635a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d01e      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	429a      	cmp	r2, r3
 800636a:	d019      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800636c:	4b23      	ldr	r3, [pc, #140]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800636e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006376:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006378:	4b20      	ldr	r3, [pc, #128]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637e:	4a1f      	ldr	r2, [pc, #124]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006388:	4b1c      	ldr	r3, [pc, #112]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638e:	4a1b      	ldr	r2, [pc, #108]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006398:	4a18      	ldr	r2, [pc, #96]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d016      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063aa:	f7fd f845 	bl	8003438 <HAL_GetTick>
 80063ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063b0:	e00b      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b2:	f7fd f841 	bl	8003438 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d902      	bls.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	74fb      	strb	r3, [r7, #19]
            break;
 80063c8:	e006      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063ca:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0ec      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80063d8:	7cfb      	ldrb	r3, [r7, #19]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10b      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063de:	4b07      	ldr	r3, [pc, #28]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ec:	4903      	ldr	r1, [pc, #12]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80063f4:	e008      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063f6:	7cfb      	ldrb	r3, [r7, #19]
 80063f8:	74bb      	strb	r3, [r7, #18]
 80063fa:	e005      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063fc:	40021000 	.word	0x40021000
 8006400:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006404:	7cfb      	ldrb	r3, [r7, #19]
 8006406:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006408:	7c7b      	ldrb	r3, [r7, #17]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d105      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800640e:	4ba7      	ldr	r3, [pc, #668]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006412:	4aa6      	ldr	r2, [pc, #664]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006418:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006426:	4ba1      	ldr	r3, [pc, #644]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642c:	f023 0203 	bic.w	r2, r3, #3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	499d      	ldr	r1, [pc, #628]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006436:	4313      	orrs	r3, r2
 8006438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00a      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006448:	4b98      	ldr	r3, [pc, #608]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800644a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644e:	f023 020c 	bic.w	r2, r3, #12
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	4995      	ldr	r1, [pc, #596]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006458:	4313      	orrs	r3, r2
 800645a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800646a:	4b90      	ldr	r3, [pc, #576]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800646c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006470:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	498c      	ldr	r1, [pc, #560]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800647a:	4313      	orrs	r3, r2
 800647c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800648c:	4b87      	ldr	r3, [pc, #540]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800648e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006492:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	4984      	ldr	r1, [pc, #528]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800649c:	4313      	orrs	r3, r2
 800649e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064ae:	4b7f      	ldr	r3, [pc, #508]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	497b      	ldr	r1, [pc, #492]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0320 	and.w	r3, r3, #32
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00a      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064d0:	4b76      	ldr	r3, [pc, #472]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	4973      	ldr	r1, [pc, #460]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064f2:	4b6e      	ldr	r3, [pc, #440]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	496a      	ldr	r1, [pc, #424]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006514:	4b65      	ldr	r3, [pc, #404]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	4962      	ldr	r1, [pc, #392]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006536:	4b5d      	ldr	r3, [pc, #372]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	4959      	ldr	r1, [pc, #356]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006546:	4313      	orrs	r3, r2
 8006548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006558:	4b54      	ldr	r3, [pc, #336]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800655e:	f023 0203 	bic.w	r2, r3, #3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	4951      	ldr	r1, [pc, #324]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800657a:	4b4c      	ldr	r3, [pc, #304]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006580:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006588:	4948      	ldr	r1, [pc, #288]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006598:	2b00      	cmp	r3, #0
 800659a:	d015      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800659c:	4b43      	ldr	r3, [pc, #268]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800659e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	4940      	ldr	r1, [pc, #256]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ba:	d105      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065bc:	4b3b      	ldr	r3, [pc, #236]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	4a3a      	ldr	r2, [pc, #232]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d015      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065d4:	4b35      	ldr	r3, [pc, #212]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e2:	4932      	ldr	r1, [pc, #200]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065f2:	d105      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065f4:	4b2d      	ldr	r3, [pc, #180]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	4a2c      	ldr	r2, [pc, #176]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065fe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d015      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800660c:	4b27      	ldr	r3, [pc, #156]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800660e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006612:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	4924      	ldr	r1, [pc, #144]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661c:	4313      	orrs	r3, r2
 800661e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800662a:	d105      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800662c:	4b1f      	ldr	r3, [pc, #124]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	4a1e      	ldr	r2, [pc, #120]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006636:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d015      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006644:	4b19      	ldr	r3, [pc, #100]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006652:	4916      	ldr	r1, [pc, #88]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006654:	4313      	orrs	r3, r2
 8006656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800665e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006662:	d105      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006664:	4b11      	ldr	r3, [pc, #68]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	4a10      	ldr	r2, [pc, #64]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800666e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d019      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800667c:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006682:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	4908      	ldr	r1, [pc, #32]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800668c:	4313      	orrs	r3, r2
 800668e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800669a:	d109      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800669c:	4b03      	ldr	r3, [pc, #12]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	4a02      	ldr	r2, [pc, #8]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066a6:	60d3      	str	r3, [r2, #12]
 80066a8:	e002      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80066aa:	bf00      	nop
 80066ac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d015      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80066bc:	4b29      	ldr	r3, [pc, #164]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ca:	4926      	ldr	r1, [pc, #152]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066da:	d105      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80066dc:	4b21      	ldr	r3, [pc, #132]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	4a20      	ldr	r2, [pc, #128]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d015      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80066f4:	4b1b      	ldr	r3, [pc, #108]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006702:	4918      	ldr	r1, [pc, #96]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006704:	4313      	orrs	r3, r2
 8006706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800670e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006712:	d105      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006714:	4b13      	ldr	r3, [pc, #76]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	4a12      	ldr	r2, [pc, #72]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800671a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800671e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d015      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800672c:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800672e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006732:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800673a:	490a      	ldr	r1, [pc, #40]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800673c:	4313      	orrs	r3, r2
 800673e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006746:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800674a:	d105      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800674c:	4b05      	ldr	r3, [pc, #20]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	4a04      	ldr	r2, [pc, #16]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006756:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006758:	7cbb      	ldrb	r3, [r7, #18]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40021000 	.word	0x40021000

08006768 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d070      	beq.n	800685c <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fc f9ee 	bl	8002b70 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f003 0310 	and.w	r3, r3, #16
 80067a6:	2b10      	cmp	r3, #16
 80067a8:	d04f      	beq.n	800684a <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	22ca      	movs	r2, #202	; 0xca
 80067b0:	625a      	str	r2, [r3, #36]	; 0x24
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2253      	movs	r2, #83	; 0x53
 80067b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f878 	bl	80068b0 <RTC_EnterInitMode>
 80067c0:	4603      	mov	r3, r0
 80067c2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d126      	bne.n	8006818 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6812      	ldr	r2, [r2, #0]
 80067d4:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80067d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067dc:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6999      	ldr	r1, [r3, #24]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	431a      	orrs	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68d9      	ldr	r1, [r3, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	041a      	lsls	r2, r3, #16
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f884 	bl	800691c <RTC_ExitInitMode>
 8006814:	4603      	mov	r3, r0
 8006816:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8006818:	7bfb      	ldrb	r3, [r7, #15]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d110      	bne.n	8006840 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1a      	ldr	r2, [r3, #32]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	431a      	orrs	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	22ff      	movs	r2, #255	; 0xff
 8006846:	625a      	str	r2, [r3, #36]	; 0x24
 8006848:	e001      	b.n	800684e <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800684e:	7bfb      	ldrb	r3, [r7, #15]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d103      	bne.n	800685c <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800685c:	7bfb      	ldrb	r3, [r7, #15]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a0d      	ldr	r2, [pc, #52]	; (80068ac <HAL_RTC_WaitForSynchro+0x44>)
 8006876:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006878:	f7fc fdde 	bl	8003438 <HAL_GetTick>
 800687c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800687e:	e009      	b.n	8006894 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006880:	f7fc fdda 	bl	8003438 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800688e:	d901      	bls.n	8006894 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e007      	b.n	80068a4 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d0ee      	beq.n	8006880 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	0001005f 	.word	0x0001005f

080068b0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d123      	bne.n	8006912 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068d8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80068da:	f7fc fdad 	bl	8003438 <HAL_GetTick>
 80068de:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80068e0:	e00d      	b.n	80068fe <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80068e2:	f7fc fda9 	bl	8003438 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068f0:	d905      	bls.n	80068fe <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2203      	movs	r2, #3
 80068fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d102      	bne.n	8006912 <RTC_EnterInitMode+0x62>
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	2b03      	cmp	r3, #3
 8006910:	d1e7      	bne.n	80068e2 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006936:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	f003 0320 	and.w	r3, r3, #32
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10c      	bne.n	8006960 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff ff8e 	bl	8006868 <HAL_RTC_WaitForSynchro>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d022      	beq.n	8006998 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2203      	movs	r2, #3
 8006956:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	73fb      	strb	r3, [r7, #15]
 800695e:	e01b      	b.n	8006998 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0220 	bic.w	r2, r2, #32
 800696e:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff ff79 	bl	8006868 <HAL_RTC_WaitForSynchro>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2203      	movs	r2, #3
 8006980:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699a      	ldr	r2, [r3, #24]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0220 	orr.w	r2, r2, #32
 8006996:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified TAMP Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 80069b0:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <HAL_RTCEx_BKUPWrite+0x2c>)
 80069b2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	4413      	add	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	601a      	str	r2, [r3, #0]
}
 80069c4:	bf00      	nop
 80069c6:	371c      	adds	r7, #28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	40002500 	.word	0x40002500

080069d4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB to
  *          specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 80069de:	4b07      	ldr	r3, [pc, #28]	; (80069fc <HAL_RTCEx_BKUPRead+0x28>)
 80069e0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4413      	add	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	40002500 	.word	0x40002500

08006a00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e042      	b.n	8006a98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7fc fa4f 	bl	8002ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2224      	movs	r2, #36	; 0x24
 8006a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0201 	bic.w	r2, r2, #1
 8006a40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 ff38 	bl	80078c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fc39 	bl	80072c8 <UART_SetConfig>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e01b      	b.n	8006a98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689a      	ldr	r2, [r3, #8]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0201 	orr.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 ffb7 	bl	8007a04 <UART_CheckIdleState>
 8006a96:	4603      	mov	r3, r0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08a      	sub	sp, #40	; 0x28
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab6:	2b20      	cmp	r3, #32
 8006ab8:	d17b      	bne.n	8006bb2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <HAL_UART_Transmit+0x26>
 8006ac0:	88fb      	ldrh	r3, [r7, #6]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e074      	b.n	8006bb4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2221      	movs	r2, #33	; 0x21
 8006ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ada:	f7fc fcad 	bl	8003438 <HAL_GetTick>
 8006ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	88fa      	ldrh	r2, [r7, #6]
 8006ae4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	88fa      	ldrh	r2, [r7, #6]
 8006aec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af8:	d108      	bne.n	8006b0c <HAL_UART_Transmit+0x6c>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d104      	bne.n	8006b0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	e003      	b.n	8006b14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b10:	2300      	movs	r3, #0
 8006b12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b14:	e030      	b.n	8006b78 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2180      	movs	r1, #128	; 0x80
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f001 f819 	bl	8007b58 <UART_WaitOnFlagUntilTimeout>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e03d      	b.n	8006bb4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10b      	bne.n	8006b56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	3302      	adds	r3, #2
 8006b52:	61bb      	str	r3, [r7, #24]
 8006b54:	e007      	b.n	8006b66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	781a      	ldrb	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	3301      	adds	r3, #1
 8006b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1c8      	bne.n	8006b16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2140      	movs	r1, #64	; 0x40
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 ffe2 	bl	8007b58 <UART_WaitOnFlagUntilTimeout>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e006      	b.n	8006bb4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	e000      	b.n	8006bb4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006bb2:	2302      	movs	r3, #2
  }
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3720      	adds	r7, #32
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08a      	sub	sp, #40	; 0x28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	d137      	bne.n	8006c44 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <HAL_UART_Receive_IT+0x24>
 8006bda:	88fb      	ldrh	r3, [r7, #6]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e030      	b.n	8006c46 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a18      	ldr	r2, [pc, #96]	; (8006c50 <HAL_UART_Receive_IT+0x94>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d01f      	beq.n	8006c34 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d018      	beq.n	8006c34 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	623b      	str	r3, [r7, #32]
 8006c22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	69f9      	ldr	r1, [r7, #28]
 8006c26:	6a3a      	ldr	r2, [r7, #32]
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e6      	bne.n	8006c02 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c34:	88fb      	ldrh	r3, [r7, #6]
 8006c36:	461a      	mov	r2, r3
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 fffa 	bl	8007c34 <UART_Start_Receive_IT>
 8006c40:	4603      	mov	r3, r0
 8006c42:	e000      	b.n	8006c46 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c44:	2302      	movs	r3, #2
  }
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3728      	adds	r7, #40	; 0x28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	40008000 	.word	0x40008000

08006c54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b0ba      	sub	sp, #232	; 0xe8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c82:	4013      	ands	r3, r2
 8006c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d11b      	bne.n	8006cc8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d015      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d105      	bne.n	8006cb4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d009      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 82e3 	beq.w	8007284 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	4798      	blx	r3
      }
      return;
 8006cc6:	e2dd      	b.n	8007284 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 8123 	beq.w	8006f18 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006cd2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006cd6:	4b8d      	ldr	r3, [pc, #564]	; (8006f0c <HAL_UART_IRQHandler+0x2b8>)
 8006cd8:	4013      	ands	r3, r2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d106      	bne.n	8006cec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006cde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006ce2:	4b8b      	ldr	r3, [pc, #556]	; (8006f10 <HAL_UART_IRQHandler+0x2bc>)
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 8116 	beq.w	8006f18 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d011      	beq.n	8006d1c <HAL_UART_IRQHandler+0xc8>
 8006cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d12:	f043 0201 	orr.w	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d011      	beq.n	8006d4c <HAL_UART_IRQHandler+0xf8>
 8006d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d42:	f043 0204 	orr.w	r2, r3, #4
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d011      	beq.n	8006d7c <HAL_UART_IRQHandler+0x128>
 8006d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00b      	beq.n	8006d7c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2204      	movs	r2, #4
 8006d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d72:	f043 0202 	orr.w	r2, r3, #2
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d80:	f003 0308 	and.w	r3, r3, #8
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d017      	beq.n	8006db8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8c:	f003 0320 	and.w	r3, r3, #32
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d105      	bne.n	8006da0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d98:	4b5c      	ldr	r3, [pc, #368]	; (8006f0c <HAL_UART_IRQHandler+0x2b8>)
 8006d9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2208      	movs	r2, #8
 8006da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dae:	f043 0208 	orr.w	r2, r3, #8
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d012      	beq.n	8006dea <HAL_UART_IRQHandler+0x196>
 8006dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00c      	beq.n	8006dea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de0:	f043 0220 	orr.w	r2, r3, #32
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 8249 	beq.w	8007288 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d013      	beq.n	8006e2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d105      	bne.n	8006e1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d007      	beq.n	8006e2a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3e:	2b40      	cmp	r3, #64	; 0x40
 8006e40:	d005      	beq.n	8006e4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d054      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 f812 	bl	8007e78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5e:	2b40      	cmp	r3, #64	; 0x40
 8006e60:	d146      	bne.n	8006ef0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3308      	adds	r3, #8
 8006e8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ea6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1d9      	bne.n	8006e62 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d017      	beq.n	8006ee8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ebe:	4a15      	ldr	r2, [pc, #84]	; (8006f14 <HAL_UART_IRQHandler+0x2c0>)
 8006ec0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fc fc4b 	bl	8003764 <HAL_DMA_Abort_IT>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d019      	beq.n	8006f08 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee6:	e00f      	b.n	8006f08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fb ffc3 	bl	8002e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eee:	e00b      	b.n	8006f08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7fb ffbf 	bl	8002e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef6:	e007      	b.n	8006f08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7fb ffbb 	bl	8002e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006f06:	e1bf      	b.n	8007288 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f08:	bf00      	nop
    return;
 8006f0a:	e1bd      	b.n	8007288 <HAL_UART_IRQHandler+0x634>
 8006f0c:	10000001 	.word	0x10000001
 8006f10:	04000120 	.word	0x04000120
 8006f14:	08007f45 	.word	0x08007f45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	f040 8153 	bne.w	80071c8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f26:	f003 0310 	and.w	r3, r3, #16
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 814c 	beq.w	80071c8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f34:	f003 0310 	and.w	r3, r3, #16
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 8145 	beq.w	80071c8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2210      	movs	r2, #16
 8006f44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f50:	2b40      	cmp	r3, #64	; 0x40
 8006f52:	f040 80bb 	bne.w	80070cc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 818f 	beq.w	800728c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	f080 8187 	bcs.w	800728c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0320 	and.w	r3, r3, #32
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f040 8087 	bne.w	80070aa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1da      	bne.n	8006f9c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ff8:	f023 0301 	bic.w	r3, r3, #1
 8006ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3308      	adds	r3, #8
 8007006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800700a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800700e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007012:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800701c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e1      	bne.n	8006fe6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3308      	adds	r3, #8
 8007028:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3308      	adds	r3, #8
 8007042:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007046:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007048:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800704c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800704e:	e841 2300 	strex	r3, r2, [r1]
 8007052:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1e3      	bne.n	8007022 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2220      	movs	r2, #32
 800705e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007078:	f023 0310 	bic.w	r3, r3, #16
 800707c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	461a      	mov	r2, r3
 8007086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800708a:	65bb      	str	r3, [r7, #88]	; 0x58
 800708c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007090:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007092:	e841 2300 	strex	r3, r2, [r1]
 8007096:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1e4      	bne.n	8007068 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fc fb04 	bl	80036b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2202      	movs	r2, #2
 80070ae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070bc:	b29b      	uxth	r3, r3
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f8f3 	bl	80072b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070ca:	e0df      	b.n	800728c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070d8:	b29b      	uxth	r3, r3
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 80d1 	beq.w	8007290 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80070ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 80cc 	beq.w	8007290 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007108:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800710c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800711a:	647b      	str	r3, [r7, #68]	; 0x44
 800711c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007120:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e4      	bne.n	80070f8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3308      	adds	r3, #8
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	623b      	str	r3, [r7, #32]
   return(result);
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007144:	f023 0301 	bic.w	r3, r3, #1
 8007148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3308      	adds	r3, #8
 8007152:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007156:	633a      	str	r2, [r7, #48]	; 0x30
 8007158:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800715c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e1      	bne.n	800712e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	60fb      	str	r3, [r7, #12]
   return(result);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 0310 	bic.w	r3, r3, #16
 8007192:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80071a0:	61fb      	str	r3, [r7, #28]
 80071a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	69b9      	ldr	r1, [r7, #24]
 80071a6:	69fa      	ldr	r2, [r7, #28]
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	617b      	str	r3, [r7, #20]
   return(result);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e4      	bne.n	800717e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f875 	bl	80072b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071c6:	e063      	b.n	8007290 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00e      	beq.n	80071f2 <HAL_UART_IRQHandler+0x59e>
 80071d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d008      	beq.n	80071f2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f001 fc08 	bl	8008a00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071f0:	e051      	b.n	8007296 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80071f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d014      	beq.n	8007228 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80071fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007206:	2b00      	cmp	r3, #0
 8007208:	d105      	bne.n	8007216 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800720a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800720e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d008      	beq.n	8007228 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800721a:	2b00      	cmp	r3, #0
 800721c:	d03a      	beq.n	8007294 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	4798      	blx	r3
    }
    return;
 8007226:	e035      	b.n	8007294 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007230:	2b00      	cmp	r3, #0
 8007232:	d009      	beq.n	8007248 <HAL_UART_IRQHandler+0x5f4>
 8007234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fe95 	bl	8007f70 <UART_EndTransmit_IT>
    return;
 8007246:	e026      	b.n	8007296 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d009      	beq.n	8007268 <HAL_UART_IRQHandler+0x614>
 8007254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007258:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 fbe1 	bl	8008a28 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007266:	e016      	b.n	8007296 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d010      	beq.n	8007296 <HAL_UART_IRQHandler+0x642>
 8007274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007278:	2b00      	cmp	r3, #0
 800727a:	da0c      	bge.n	8007296 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 fbc9 	bl	8008a14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007282:	e008      	b.n	8007296 <HAL_UART_IRQHandler+0x642>
      return;
 8007284:	bf00      	nop
 8007286:	e006      	b.n	8007296 <HAL_UART_IRQHandler+0x642>
    return;
 8007288:	bf00      	nop
 800728a:	e004      	b.n	8007296 <HAL_UART_IRQHandler+0x642>
      return;
 800728c:	bf00      	nop
 800728e:	e002      	b.n	8007296 <HAL_UART_IRQHandler+0x642>
      return;
 8007290:	bf00      	nop
 8007292:	e000      	b.n	8007296 <HAL_UART_IRQHandler+0x642>
    return;
 8007294:	bf00      	nop
  }
}
 8007296:	37e8      	adds	r7, #232	; 0xe8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072cc:	b08c      	sub	sp, #48	; 0x30
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	431a      	orrs	r2, r3
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	4baa      	ldr	r3, [pc, #680]	; (80075a0 <UART_SetConfig+0x2d8>)
 80072f8:	4013      	ands	r3, r2
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	6812      	ldr	r2, [r2, #0]
 80072fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007300:	430b      	orrs	r3, r1
 8007302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a9f      	ldr	r2, [pc, #636]	; (80075a4 <UART_SetConfig+0x2dc>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d004      	beq.n	8007334 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007330:	4313      	orrs	r3, r2
 8007332:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800733e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	6812      	ldr	r2, [r2, #0]
 8007346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007348:	430b      	orrs	r3, r1
 800734a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	f023 010f 	bic.w	r1, r3, #15
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a90      	ldr	r2, [pc, #576]	; (80075a8 <UART_SetConfig+0x2e0>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d125      	bne.n	80073b8 <UART_SetConfig+0xf0>
 800736c:	4b8f      	ldr	r3, [pc, #572]	; (80075ac <UART_SetConfig+0x2e4>)
 800736e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	2b03      	cmp	r3, #3
 8007378:	d81a      	bhi.n	80073b0 <UART_SetConfig+0xe8>
 800737a:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <UART_SetConfig+0xb8>)
 800737c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007380:	08007391 	.word	0x08007391
 8007384:	080073a1 	.word	0x080073a1
 8007388:	08007399 	.word	0x08007399
 800738c:	080073a9 	.word	0x080073a9
 8007390:	2301      	movs	r3, #1
 8007392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007396:	e116      	b.n	80075c6 <UART_SetConfig+0x2fe>
 8007398:	2302      	movs	r3, #2
 800739a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800739e:	e112      	b.n	80075c6 <UART_SetConfig+0x2fe>
 80073a0:	2304      	movs	r3, #4
 80073a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a6:	e10e      	b.n	80075c6 <UART_SetConfig+0x2fe>
 80073a8:	2308      	movs	r3, #8
 80073aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ae:	e10a      	b.n	80075c6 <UART_SetConfig+0x2fe>
 80073b0:	2310      	movs	r3, #16
 80073b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b6:	e106      	b.n	80075c6 <UART_SetConfig+0x2fe>
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a7c      	ldr	r2, [pc, #496]	; (80075b0 <UART_SetConfig+0x2e8>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d138      	bne.n	8007434 <UART_SetConfig+0x16c>
 80073c2:	4b7a      	ldr	r3, [pc, #488]	; (80075ac <UART_SetConfig+0x2e4>)
 80073c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c8:	f003 030c 	and.w	r3, r3, #12
 80073cc:	2b0c      	cmp	r3, #12
 80073ce:	d82d      	bhi.n	800742c <UART_SetConfig+0x164>
 80073d0:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <UART_SetConfig+0x110>)
 80073d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d6:	bf00      	nop
 80073d8:	0800740d 	.word	0x0800740d
 80073dc:	0800742d 	.word	0x0800742d
 80073e0:	0800742d 	.word	0x0800742d
 80073e4:	0800742d 	.word	0x0800742d
 80073e8:	0800741d 	.word	0x0800741d
 80073ec:	0800742d 	.word	0x0800742d
 80073f0:	0800742d 	.word	0x0800742d
 80073f4:	0800742d 	.word	0x0800742d
 80073f8:	08007415 	.word	0x08007415
 80073fc:	0800742d 	.word	0x0800742d
 8007400:	0800742d 	.word	0x0800742d
 8007404:	0800742d 	.word	0x0800742d
 8007408:	08007425 	.word	0x08007425
 800740c:	2300      	movs	r3, #0
 800740e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007412:	e0d8      	b.n	80075c6 <UART_SetConfig+0x2fe>
 8007414:	2302      	movs	r3, #2
 8007416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800741a:	e0d4      	b.n	80075c6 <UART_SetConfig+0x2fe>
 800741c:	2304      	movs	r3, #4
 800741e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007422:	e0d0      	b.n	80075c6 <UART_SetConfig+0x2fe>
 8007424:	2308      	movs	r3, #8
 8007426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800742a:	e0cc      	b.n	80075c6 <UART_SetConfig+0x2fe>
 800742c:	2310      	movs	r3, #16
 800742e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007432:	e0c8      	b.n	80075c6 <UART_SetConfig+0x2fe>
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a5e      	ldr	r2, [pc, #376]	; (80075b4 <UART_SetConfig+0x2ec>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d125      	bne.n	800748a <UART_SetConfig+0x1c2>
 800743e:	4b5b      	ldr	r3, [pc, #364]	; (80075ac <UART_SetConfig+0x2e4>)
 8007440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007444:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007448:	2b30      	cmp	r3, #48	; 0x30
 800744a:	d016      	beq.n	800747a <UART_SetConfig+0x1b2>
 800744c:	2b30      	cmp	r3, #48	; 0x30
 800744e:	d818      	bhi.n	8007482 <UART_SetConfig+0x1ba>
 8007450:	2b20      	cmp	r3, #32
 8007452:	d00a      	beq.n	800746a <UART_SetConfig+0x1a2>
 8007454:	2b20      	cmp	r3, #32
 8007456:	d814      	bhi.n	8007482 <UART_SetConfig+0x1ba>
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <UART_SetConfig+0x19a>
 800745c:	2b10      	cmp	r3, #16
 800745e:	d008      	beq.n	8007472 <UART_SetConfig+0x1aa>
 8007460:	e00f      	b.n	8007482 <UART_SetConfig+0x1ba>
 8007462:	2300      	movs	r3, #0
 8007464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007468:	e0ad      	b.n	80075c6 <UART_SetConfig+0x2fe>
 800746a:	2302      	movs	r3, #2
 800746c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007470:	e0a9      	b.n	80075c6 <UART_SetConfig+0x2fe>
 8007472:	2304      	movs	r3, #4
 8007474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007478:	e0a5      	b.n	80075c6 <UART_SetConfig+0x2fe>
 800747a:	2308      	movs	r3, #8
 800747c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007480:	e0a1      	b.n	80075c6 <UART_SetConfig+0x2fe>
 8007482:	2310      	movs	r3, #16
 8007484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007488:	e09d      	b.n	80075c6 <UART_SetConfig+0x2fe>
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a4a      	ldr	r2, [pc, #296]	; (80075b8 <UART_SetConfig+0x2f0>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d125      	bne.n	80074e0 <UART_SetConfig+0x218>
 8007494:	4b45      	ldr	r3, [pc, #276]	; (80075ac <UART_SetConfig+0x2e4>)
 8007496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800749e:	2bc0      	cmp	r3, #192	; 0xc0
 80074a0:	d016      	beq.n	80074d0 <UART_SetConfig+0x208>
 80074a2:	2bc0      	cmp	r3, #192	; 0xc0
 80074a4:	d818      	bhi.n	80074d8 <UART_SetConfig+0x210>
 80074a6:	2b80      	cmp	r3, #128	; 0x80
 80074a8:	d00a      	beq.n	80074c0 <UART_SetConfig+0x1f8>
 80074aa:	2b80      	cmp	r3, #128	; 0x80
 80074ac:	d814      	bhi.n	80074d8 <UART_SetConfig+0x210>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <UART_SetConfig+0x1f0>
 80074b2:	2b40      	cmp	r3, #64	; 0x40
 80074b4:	d008      	beq.n	80074c8 <UART_SetConfig+0x200>
 80074b6:	e00f      	b.n	80074d8 <UART_SetConfig+0x210>
 80074b8:	2300      	movs	r3, #0
 80074ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074be:	e082      	b.n	80075c6 <UART_SetConfig+0x2fe>
 80074c0:	2302      	movs	r3, #2
 80074c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074c6:	e07e      	b.n	80075c6 <UART_SetConfig+0x2fe>
 80074c8:	2304      	movs	r3, #4
 80074ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ce:	e07a      	b.n	80075c6 <UART_SetConfig+0x2fe>
 80074d0:	2308      	movs	r3, #8
 80074d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074d6:	e076      	b.n	80075c6 <UART_SetConfig+0x2fe>
 80074d8:	2310      	movs	r3, #16
 80074da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074de:	e072      	b.n	80075c6 <UART_SetConfig+0x2fe>
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a35      	ldr	r2, [pc, #212]	; (80075bc <UART_SetConfig+0x2f4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d12a      	bne.n	8007540 <UART_SetConfig+0x278>
 80074ea:	4b30      	ldr	r3, [pc, #192]	; (80075ac <UART_SetConfig+0x2e4>)
 80074ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074f8:	d01a      	beq.n	8007530 <UART_SetConfig+0x268>
 80074fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074fe:	d81b      	bhi.n	8007538 <UART_SetConfig+0x270>
 8007500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007504:	d00c      	beq.n	8007520 <UART_SetConfig+0x258>
 8007506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800750a:	d815      	bhi.n	8007538 <UART_SetConfig+0x270>
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <UART_SetConfig+0x250>
 8007510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007514:	d008      	beq.n	8007528 <UART_SetConfig+0x260>
 8007516:	e00f      	b.n	8007538 <UART_SetConfig+0x270>
 8007518:	2300      	movs	r3, #0
 800751a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800751e:	e052      	b.n	80075c6 <UART_SetConfig+0x2fe>
 8007520:	2302      	movs	r3, #2
 8007522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007526:	e04e      	b.n	80075c6 <UART_SetConfig+0x2fe>
 8007528:	2304      	movs	r3, #4
 800752a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800752e:	e04a      	b.n	80075c6 <UART_SetConfig+0x2fe>
 8007530:	2308      	movs	r3, #8
 8007532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007536:	e046      	b.n	80075c6 <UART_SetConfig+0x2fe>
 8007538:	2310      	movs	r3, #16
 800753a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800753e:	e042      	b.n	80075c6 <UART_SetConfig+0x2fe>
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a17      	ldr	r2, [pc, #92]	; (80075a4 <UART_SetConfig+0x2dc>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d13a      	bne.n	80075c0 <UART_SetConfig+0x2f8>
 800754a:	4b18      	ldr	r3, [pc, #96]	; (80075ac <UART_SetConfig+0x2e4>)
 800754c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007550:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007554:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007558:	d01a      	beq.n	8007590 <UART_SetConfig+0x2c8>
 800755a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800755e:	d81b      	bhi.n	8007598 <UART_SetConfig+0x2d0>
 8007560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007564:	d00c      	beq.n	8007580 <UART_SetConfig+0x2b8>
 8007566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800756a:	d815      	bhi.n	8007598 <UART_SetConfig+0x2d0>
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <UART_SetConfig+0x2b0>
 8007570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007574:	d008      	beq.n	8007588 <UART_SetConfig+0x2c0>
 8007576:	e00f      	b.n	8007598 <UART_SetConfig+0x2d0>
 8007578:	2300      	movs	r3, #0
 800757a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800757e:	e022      	b.n	80075c6 <UART_SetConfig+0x2fe>
 8007580:	2302      	movs	r3, #2
 8007582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007586:	e01e      	b.n	80075c6 <UART_SetConfig+0x2fe>
 8007588:	2304      	movs	r3, #4
 800758a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800758e:	e01a      	b.n	80075c6 <UART_SetConfig+0x2fe>
 8007590:	2308      	movs	r3, #8
 8007592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007596:	e016      	b.n	80075c6 <UART_SetConfig+0x2fe>
 8007598:	2310      	movs	r3, #16
 800759a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800759e:	e012      	b.n	80075c6 <UART_SetConfig+0x2fe>
 80075a0:	cfff69f3 	.word	0xcfff69f3
 80075a4:	40008000 	.word	0x40008000
 80075a8:	40013800 	.word	0x40013800
 80075ac:	40021000 	.word	0x40021000
 80075b0:	40004400 	.word	0x40004400
 80075b4:	40004800 	.word	0x40004800
 80075b8:	40004c00 	.word	0x40004c00
 80075bc:	40005000 	.word	0x40005000
 80075c0:	2310      	movs	r3, #16
 80075c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4aae      	ldr	r2, [pc, #696]	; (8007884 <UART_SetConfig+0x5bc>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	f040 8097 	bne.w	8007700 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075d6:	2b08      	cmp	r3, #8
 80075d8:	d823      	bhi.n	8007622 <UART_SetConfig+0x35a>
 80075da:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <UART_SetConfig+0x318>)
 80075dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e0:	08007605 	.word	0x08007605
 80075e4:	08007623 	.word	0x08007623
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	08007623 	.word	0x08007623
 80075f0:	08007613 	.word	0x08007613
 80075f4:	08007623 	.word	0x08007623
 80075f8:	08007623 	.word	0x08007623
 80075fc:	08007623 	.word	0x08007623
 8007600:	0800761b 	.word	0x0800761b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007604:	f7fe fdf0 	bl	80061e8 <HAL_RCC_GetPCLK1Freq>
 8007608:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800760a:	e010      	b.n	800762e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800760c:	4b9e      	ldr	r3, [pc, #632]	; (8007888 <UART_SetConfig+0x5c0>)
 800760e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007610:	e00d      	b.n	800762e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007612:	f7fe fd7b 	bl	800610c <HAL_RCC_GetSysClockFreq>
 8007616:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007618:	e009      	b.n	800762e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800761a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007620:	e005      	b.n	800762e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800762c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 8130 	beq.w	8007896 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	4a94      	ldr	r2, [pc, #592]	; (800788c <UART_SetConfig+0x5c4>)
 800763c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007640:	461a      	mov	r2, r3
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	fbb3 f3f2 	udiv	r3, r3, r2
 8007648:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	4613      	mov	r3, r2
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	4413      	add	r3, r2
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	429a      	cmp	r2, r3
 8007658:	d305      	bcc.n	8007666 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	429a      	cmp	r2, r3
 8007664:	d903      	bls.n	800766e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800766c:	e113      	b.n	8007896 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	2200      	movs	r2, #0
 8007672:	60bb      	str	r3, [r7, #8]
 8007674:	60fa      	str	r2, [r7, #12]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	4a84      	ldr	r2, [pc, #528]	; (800788c <UART_SetConfig+0x5c4>)
 800767c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007680:	b29b      	uxth	r3, r3
 8007682:	2200      	movs	r2, #0
 8007684:	603b      	str	r3, [r7, #0]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800768c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007690:	f7f9 fb02 	bl	8000c98 <__aeabi_uldivmod>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4610      	mov	r0, r2
 800769a:	4619      	mov	r1, r3
 800769c:	f04f 0200 	mov.w	r2, #0
 80076a0:	f04f 0300 	mov.w	r3, #0
 80076a4:	020b      	lsls	r3, r1, #8
 80076a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076aa:	0202      	lsls	r2, r0, #8
 80076ac:	6979      	ldr	r1, [r7, #20]
 80076ae:	6849      	ldr	r1, [r1, #4]
 80076b0:	0849      	lsrs	r1, r1, #1
 80076b2:	2000      	movs	r0, #0
 80076b4:	460c      	mov	r4, r1
 80076b6:	4605      	mov	r5, r0
 80076b8:	eb12 0804 	adds.w	r8, r2, r4
 80076bc:	eb43 0905 	adc.w	r9, r3, r5
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	469a      	mov	sl, r3
 80076c8:	4693      	mov	fp, r2
 80076ca:	4652      	mov	r2, sl
 80076cc:	465b      	mov	r3, fp
 80076ce:	4640      	mov	r0, r8
 80076d0:	4649      	mov	r1, r9
 80076d2:	f7f9 fae1 	bl	8000c98 <__aeabi_uldivmod>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	4613      	mov	r3, r2
 80076dc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076e4:	d308      	bcc.n	80076f8 <UART_SetConfig+0x430>
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ec:	d204      	bcs.n	80076f8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6a3a      	ldr	r2, [r7, #32]
 80076f4:	60da      	str	r2, [r3, #12]
 80076f6:	e0ce      	b.n	8007896 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076fe:	e0ca      	b.n	8007896 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007708:	d166      	bne.n	80077d8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800770a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800770e:	2b08      	cmp	r3, #8
 8007710:	d827      	bhi.n	8007762 <UART_SetConfig+0x49a>
 8007712:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <UART_SetConfig+0x450>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	0800773d 	.word	0x0800773d
 800771c:	08007745 	.word	0x08007745
 8007720:	0800774d 	.word	0x0800774d
 8007724:	08007763 	.word	0x08007763
 8007728:	08007753 	.word	0x08007753
 800772c:	08007763 	.word	0x08007763
 8007730:	08007763 	.word	0x08007763
 8007734:	08007763 	.word	0x08007763
 8007738:	0800775b 	.word	0x0800775b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800773c:	f7fe fd54 	bl	80061e8 <HAL_RCC_GetPCLK1Freq>
 8007740:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007742:	e014      	b.n	800776e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007744:	f7fe fd66 	bl	8006214 <HAL_RCC_GetPCLK2Freq>
 8007748:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800774a:	e010      	b.n	800776e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800774c:	4b4e      	ldr	r3, [pc, #312]	; (8007888 <UART_SetConfig+0x5c0>)
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007750:	e00d      	b.n	800776e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007752:	f7fe fcdb 	bl	800610c <HAL_RCC_GetSysClockFreq>
 8007756:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007758:	e009      	b.n	800776e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800775a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007760:	e005      	b.n	800776e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800776c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 8090 	beq.w	8007896 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	4a44      	ldr	r2, [pc, #272]	; (800788c <UART_SetConfig+0x5c4>)
 800777c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007780:	461a      	mov	r2, r3
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	fbb3 f3f2 	udiv	r3, r3, r2
 8007788:	005a      	lsls	r2, r3, #1
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	085b      	lsrs	r3, r3, #1
 8007790:	441a      	add	r2, r3
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	fbb2 f3f3 	udiv	r3, r2, r3
 800779a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	2b0f      	cmp	r3, #15
 80077a0:	d916      	bls.n	80077d0 <UART_SetConfig+0x508>
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a8:	d212      	bcs.n	80077d0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	f023 030f 	bic.w	r3, r3, #15
 80077b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	085b      	lsrs	r3, r3, #1
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f003 0307 	and.w	r3, r3, #7
 80077be:	b29a      	uxth	r2, r3
 80077c0:	8bfb      	ldrh	r3, [r7, #30]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	8bfa      	ldrh	r2, [r7, #30]
 80077cc:	60da      	str	r2, [r3, #12]
 80077ce:	e062      	b.n	8007896 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80077d6:	e05e      	b.n	8007896 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d828      	bhi.n	8007832 <UART_SetConfig+0x56a>
 80077e0:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <UART_SetConfig+0x520>)
 80077e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e6:	bf00      	nop
 80077e8:	0800780d 	.word	0x0800780d
 80077ec:	08007815 	.word	0x08007815
 80077f0:	0800781d 	.word	0x0800781d
 80077f4:	08007833 	.word	0x08007833
 80077f8:	08007823 	.word	0x08007823
 80077fc:	08007833 	.word	0x08007833
 8007800:	08007833 	.word	0x08007833
 8007804:	08007833 	.word	0x08007833
 8007808:	0800782b 	.word	0x0800782b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800780c:	f7fe fcec 	bl	80061e8 <HAL_RCC_GetPCLK1Freq>
 8007810:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007812:	e014      	b.n	800783e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007814:	f7fe fcfe 	bl	8006214 <HAL_RCC_GetPCLK2Freq>
 8007818:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800781a:	e010      	b.n	800783e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800781c:	4b1a      	ldr	r3, [pc, #104]	; (8007888 <UART_SetConfig+0x5c0>)
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007820:	e00d      	b.n	800783e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007822:	f7fe fc73 	bl	800610c <HAL_RCC_GetSysClockFreq>
 8007826:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007828:	e009      	b.n	800783e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800782a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007830:	e005      	b.n	800783e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800783c:	bf00      	nop
    }

    if (pclk != 0U)
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	2b00      	cmp	r3, #0
 8007842:	d028      	beq.n	8007896 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	4a10      	ldr	r2, [pc, #64]	; (800788c <UART_SetConfig+0x5c4>)
 800784a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800784e:	461a      	mov	r2, r3
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	fbb3 f2f2 	udiv	r2, r3, r2
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	085b      	lsrs	r3, r3, #1
 800785c:	441a      	add	r2, r3
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	fbb2 f3f3 	udiv	r3, r2, r3
 8007866:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	2b0f      	cmp	r3, #15
 800786c:	d910      	bls.n	8007890 <UART_SetConfig+0x5c8>
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007874:	d20c      	bcs.n	8007890 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	b29a      	uxth	r2, r3
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60da      	str	r2, [r3, #12]
 8007880:	e009      	b.n	8007896 <UART_SetConfig+0x5ce>
 8007882:	bf00      	nop
 8007884:	40008000 	.word	0x40008000
 8007888:	00f42400 	.word	0x00f42400
 800788c:	08010ce4 	.word	0x08010ce4
      }
      else
      {
        ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2201      	movs	r2, #1
 800789a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2200      	movs	r2, #0
 80078aa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2200      	movs	r2, #0
 80078b0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80078b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3730      	adds	r7, #48	; 0x30
 80078ba:	46bd      	mov	sp, r7
 80078bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080078c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078cc:	f003 0308 	and.w	r3, r3, #8
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00a      	beq.n	80078ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00a      	beq.n	800792e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007932:	f003 0304 	and.w	r3, r3, #4
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007954:	f003 0310 	and.w	r3, r3, #16
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00a      	beq.n	8007972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799c:	2b00      	cmp	r3, #0
 800799e:	d01a      	beq.n	80079d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079be:	d10a      	bne.n	80079d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00a      	beq.n	80079f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	605a      	str	r2, [r3, #4]
  }
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b098      	sub	sp, #96	; 0x60
 8007a08:	af02      	add	r7, sp, #8
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a14:	f7fb fd10 	bl	8003438 <HAL_GetTick>
 8007a18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0308 	and.w	r3, r3, #8
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d12f      	bne.n	8007a88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a30:	2200      	movs	r2, #0
 8007a32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f88e 	bl	8007b58 <UART_WaitOnFlagUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d022      	beq.n	8007a88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a56:	653b      	str	r3, [r7, #80]	; 0x50
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a60:	647b      	str	r3, [r7, #68]	; 0x44
 8007a62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e6      	bne.n	8007a42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2220      	movs	r2, #32
 8007a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e063      	b.n	8007b50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0304 	and.w	r3, r3, #4
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d149      	bne.n	8007b2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f857 	bl	8007b58 <UART_WaitOnFlagUntilTimeout>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d03c      	beq.n	8007b2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	e853 3f00 	ldrex	r3, [r3]
 8007abc:	623b      	str	r3, [r7, #32]
   return(result);
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ace:	633b      	str	r3, [r7, #48]	; 0x30
 8007ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1e6      	bne.n	8007ab0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3308      	adds	r3, #8
 8007ae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f023 0301 	bic.w	r3, r3, #1
 8007af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3308      	adds	r3, #8
 8007b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b02:	61fa      	str	r2, [r7, #28]
 8007b04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	69b9      	ldr	r1, [r7, #24]
 8007b08:	69fa      	ldr	r2, [r7, #28]
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	617b      	str	r3, [r7, #20]
   return(result);
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e5      	bne.n	8007ae2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e012      	b.n	8007b50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2220      	movs	r2, #32
 8007b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3758      	adds	r7, #88	; 0x58
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	4613      	mov	r3, r2
 8007b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b68:	e04f      	b.n	8007c0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b70:	d04b      	beq.n	8007c0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b72:	f7fb fc61 	bl	8003438 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d302      	bcc.n	8007b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e04e      	b.n	8007c2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d037      	beq.n	8007c0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b80      	cmp	r3, #128	; 0x80
 8007b9e:	d034      	beq.n	8007c0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2b40      	cmp	r3, #64	; 0x40
 8007ba4:	d031      	beq.n	8007c0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	f003 0308 	and.w	r3, r3, #8
 8007bb0:	2b08      	cmp	r3, #8
 8007bb2:	d110      	bne.n	8007bd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2208      	movs	r2, #8
 8007bba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f95b 	bl	8007e78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2208      	movs	r2, #8
 8007bc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e029      	b.n	8007c2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007be4:	d111      	bne.n	8007c0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 f941 	bl	8007e78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e00f      	b.n	8007c2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	69da      	ldr	r2, [r3, #28]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	4013      	ands	r3, r2
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	bf0c      	ite	eq
 8007c1a:	2301      	moveq	r3, #1
 8007c1c:	2300      	movne	r3, #0
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	461a      	mov	r2, r3
 8007c22:	79fb      	ldrb	r3, [r7, #7]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d0a0      	beq.n	8007b6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b0a3      	sub	sp, #140	; 0x8c
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	88fa      	ldrh	r2, [r7, #6]
 8007c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	88fa      	ldrh	r2, [r7, #6]
 8007c54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c66:	d10e      	bne.n	8007c86 <UART_Start_Receive_IT+0x52>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d105      	bne.n	8007c7c <UART_Start_Receive_IT+0x48>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c7a:	e02d      	b.n	8007cd8 <UART_Start_Receive_IT+0xa4>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	22ff      	movs	r2, #255	; 0xff
 8007c80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c84:	e028      	b.n	8007cd8 <UART_Start_Receive_IT+0xa4>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10d      	bne.n	8007caa <UART_Start_Receive_IT+0x76>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d104      	bne.n	8007ca0 <UART_Start_Receive_IT+0x6c>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	22ff      	movs	r2, #255	; 0xff
 8007c9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c9e:	e01b      	b.n	8007cd8 <UART_Start_Receive_IT+0xa4>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	227f      	movs	r2, #127	; 0x7f
 8007ca4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ca8:	e016      	b.n	8007cd8 <UART_Start_Receive_IT+0xa4>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cb2:	d10d      	bne.n	8007cd0 <UART_Start_Receive_IT+0x9c>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d104      	bne.n	8007cc6 <UART_Start_Receive_IT+0x92>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	227f      	movs	r2, #127	; 0x7f
 8007cc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007cc4:	e008      	b.n	8007cd8 <UART_Start_Receive_IT+0xa4>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	223f      	movs	r2, #63	; 0x3f
 8007cca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007cce:	e003      	b.n	8007cd8 <UART_Start_Receive_IT+0xa4>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2222      	movs	r2, #34	; 0x22
 8007ce4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3308      	adds	r3, #8
 8007cee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cfa:	f043 0301 	orr.w	r3, r3, #1
 8007cfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3308      	adds	r3, #8
 8007d08:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007d0c:	673a      	str	r2, [r7, #112]	; 0x70
 8007d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d10:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007d12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007d14:	e841 2300 	strex	r3, r2, [r1]
 8007d18:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007d1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e3      	bne.n	8007ce8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d28:	d14f      	bne.n	8007dca <UART_Start_Receive_IT+0x196>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d30:	88fa      	ldrh	r2, [r7, #6]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d349      	bcc.n	8007dca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d3e:	d107      	bne.n	8007d50 <UART_Start_Receive_IT+0x11c>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d103      	bne.n	8007d50 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4a47      	ldr	r2, [pc, #284]	; (8007e68 <UART_Start_Receive_IT+0x234>)
 8007d4c:	675a      	str	r2, [r3, #116]	; 0x74
 8007d4e:	e002      	b.n	8007d56 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4a46      	ldr	r2, [pc, #280]	; (8007e6c <UART_Start_Receive_IT+0x238>)
 8007d54:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d01a      	beq.n	8007d94 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d82:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e4      	bne.n	8007d5e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3308      	adds	r3, #8
 8007d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007daa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3308      	adds	r3, #8
 8007db2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007db4:	64ba      	str	r2, [r7, #72]	; 0x48
 8007db6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e5      	bne.n	8007d94 <UART_Start_Receive_IT+0x160>
 8007dc8:	e046      	b.n	8007e58 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd2:	d107      	bne.n	8007de4 <UART_Start_Receive_IT+0x1b0>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d103      	bne.n	8007de4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4a24      	ldr	r2, [pc, #144]	; (8007e70 <UART_Start_Receive_IT+0x23c>)
 8007de0:	675a      	str	r2, [r3, #116]	; 0x74
 8007de2:	e002      	b.n	8007dea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4a23      	ldr	r2, [pc, #140]	; (8007e74 <UART_Start_Receive_IT+0x240>)
 8007de8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d019      	beq.n	8007e26 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007e06:	677b      	str	r3, [r7, #116]	; 0x74
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e10:	637b      	str	r3, [r7, #52]	; 0x34
 8007e12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e18:	e841 2300 	strex	r3, r2, [r1]
 8007e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1e6      	bne.n	8007df2 <UART_Start_Receive_IT+0x1be>
 8007e24:	e018      	b.n	8007e58 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	e853 3f00 	ldrex	r3, [r3]
 8007e32:	613b      	str	r3, [r7, #16]
   return(result);
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	f043 0320 	orr.w	r3, r3, #32
 8007e3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	461a      	mov	r2, r3
 8007e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e44:	623b      	str	r3, [r7, #32]
 8007e46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e48:	69f9      	ldr	r1, [r7, #28]
 8007e4a:	6a3a      	ldr	r2, [r7, #32]
 8007e4c:	e841 2300 	strex	r3, r2, [r1]
 8007e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1e6      	bne.n	8007e26 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	378c      	adds	r7, #140	; 0x8c
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	08008699 	.word	0x08008699
 8007e6c:	08008339 	.word	0x08008339
 8007e70:	08008181 	.word	0x08008181
 8007e74:	08007fc9 	.word	0x08007fc9

08007e78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b095      	sub	sp, #84	; 0x54
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e88:	e853 3f00 	ldrex	r3, [r3]
 8007e8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8007ea0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ea4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ea6:	e841 2300 	strex	r3, r2, [r1]
 8007eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e6      	bne.n	8007e80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3308      	adds	r3, #8
 8007eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	e853 3f00 	ldrex	r3, [r3]
 8007ec0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ec8:	f023 0301 	bic.w	r3, r3, #1
 8007ecc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ed6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ed8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e3      	bne.n	8007eb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d118      	bne.n	8007f24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	e853 3f00 	ldrex	r3, [r3]
 8007efe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	f023 0310 	bic.w	r3, r3, #16
 8007f06:	647b      	str	r3, [r7, #68]	; 0x44
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f10:	61bb      	str	r3, [r7, #24]
 8007f12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f14:	6979      	ldr	r1, [r7, #20]
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	e841 2300 	strex	r3, r2, [r1]
 8007f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1e6      	bne.n	8007ef2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007f38:	bf00      	nop
 8007f3a:	3754      	adds	r7, #84	; 0x54
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f7fa ff86 	bl	8002e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f68:	bf00      	nop
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f8c:	61fb      	str	r3, [r7, #28]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	61bb      	str	r3, [r7, #24]
 8007f98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	6979      	ldr	r1, [r7, #20]
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e6      	bne.n	8007f78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2220      	movs	r2, #32
 8007fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7ff f96f 	bl	800729c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fbe:	bf00      	nop
 8007fc0:	3720      	adds	r7, #32
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
	...

08007fc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b09c      	sub	sp, #112	; 0x70
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007fd6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fe0:	2b22      	cmp	r3, #34	; 0x22
 8007fe2:	f040 80be 	bne.w	8008162 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ff0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007ff4:	b2d9      	uxtb	r1, r3
 8007ff6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008000:	400a      	ands	r2, r1
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008016:	b29b      	uxth	r3, r3
 8008018:	3b01      	subs	r3, #1
 800801a:	b29a      	uxth	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008028:	b29b      	uxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	f040 80a1 	bne.w	8008172 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008038:	e853 3f00 	ldrex	r3, [r3]
 800803c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800803e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008040:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008044:	66bb      	str	r3, [r7, #104]	; 0x68
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800804e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008050:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008052:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800805c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1e6      	bne.n	8008030 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3308      	adds	r3, #8
 8008068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008074:	f023 0301 	bic.w	r3, r3, #1
 8008078:	667b      	str	r3, [r7, #100]	; 0x64
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3308      	adds	r3, #8
 8008080:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008082:	647a      	str	r2, [r7, #68]	; 0x44
 8008084:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800808a:	e841 2300 	strex	r3, r2, [r1]
 800808e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1e5      	bne.n	8008062 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2220      	movs	r2, #32
 800809a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a33      	ldr	r2, [pc, #204]	; (800817c <UART_RxISR_8BIT+0x1b4>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d01f      	beq.n	80080f4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d018      	beq.n	80080f4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	623b      	str	r3, [r7, #32]
   return(result);
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080d6:	663b      	str	r3, [r7, #96]	; 0x60
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	461a      	mov	r2, r3
 80080de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080e0:	633b      	str	r3, [r7, #48]	; 0x30
 80080e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e6      	bne.n	80080c2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d12e      	bne.n	800815a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	e853 3f00 	ldrex	r3, [r3]
 800810e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0310 	bic.w	r3, r3, #16
 8008116:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	461a      	mov	r2, r3
 800811e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008120:	61fb      	str	r3, [r7, #28]
 8008122:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	69b9      	ldr	r1, [r7, #24]
 8008126:	69fa      	ldr	r2, [r7, #28]
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	617b      	str	r3, [r7, #20]
   return(result);
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e6      	bne.n	8008102 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	f003 0310 	and.w	r3, r3, #16
 800813e:	2b10      	cmp	r3, #16
 8008140:	d103      	bne.n	800814a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2210      	movs	r2, #16
 8008148:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7ff f8ac 	bl	80072b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008158:	e00b      	b.n	8008172 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7fa fe94 	bl	8002e88 <HAL_UART_RxCpltCallback>
}
 8008160:	e007      	b.n	8008172 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	699a      	ldr	r2, [r3, #24]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f042 0208 	orr.w	r2, r2, #8
 8008170:	619a      	str	r2, [r3, #24]
}
 8008172:	bf00      	nop
 8008174:	3770      	adds	r7, #112	; 0x70
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	40008000 	.word	0x40008000

08008180 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b09c      	sub	sp, #112	; 0x70
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800818e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008198:	2b22      	cmp	r3, #34	; 0x22
 800819a:	f040 80be 	bne.w	800831a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ac:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80081ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80081b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80081b6:	4013      	ands	r3, r2
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c2:	1c9a      	adds	r2, r3, #2
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	3b01      	subs	r3, #1
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f040 80a1 	bne.w	800832a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081f0:	e853 3f00 	ldrex	r3, [r3]
 80081f4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80081f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081fc:	667b      	str	r3, [r7, #100]	; 0x64
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008206:	657b      	str	r3, [r7, #84]	; 0x54
 8008208:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800820c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e6      	bne.n	80081e8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3308      	adds	r3, #8
 8008220:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008224:	e853 3f00 	ldrex	r3, [r3]
 8008228:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	f023 0301 	bic.w	r3, r3, #1
 8008230:	663b      	str	r3, [r7, #96]	; 0x60
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3308      	adds	r3, #8
 8008238:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800823a:	643a      	str	r2, [r7, #64]	; 0x40
 800823c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008242:	e841 2300 	strex	r3, r2, [r1]
 8008246:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e5      	bne.n	800821a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2220      	movs	r2, #32
 8008252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a33      	ldr	r2, [pc, #204]	; (8008334 <UART_RxISR_16BIT+0x1b4>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d01f      	beq.n	80082ac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d018      	beq.n	80082ac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	e853 3f00 	ldrex	r3, [r3]
 8008286:	61fb      	str	r3, [r7, #28]
   return(result);
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800828e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	461a      	mov	r2, r3
 8008296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800829a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800829e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a0:	e841 2300 	strex	r3, r2, [r1]
 80082a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1e6      	bne.n	800827a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d12e      	bne.n	8008312 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	e853 3f00 	ldrex	r3, [r3]
 80082c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f023 0310 	bic.w	r3, r3, #16
 80082ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	461a      	mov	r2, r3
 80082d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082d8:	61bb      	str	r3, [r7, #24]
 80082da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082dc:	6979      	ldr	r1, [r7, #20]
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	e841 2300 	strex	r3, r2, [r1]
 80082e4:	613b      	str	r3, [r7, #16]
   return(result);
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1e6      	bne.n	80082ba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	f003 0310 	and.w	r3, r3, #16
 80082f6:	2b10      	cmp	r3, #16
 80082f8:	d103      	bne.n	8008302 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2210      	movs	r2, #16
 8008300:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7fe ffd0 	bl	80072b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008310:	e00b      	b.n	800832a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7fa fdb8 	bl	8002e88 <HAL_UART_RxCpltCallback>
}
 8008318:	e007      	b.n	800832a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	699a      	ldr	r2, [r3, #24]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f042 0208 	orr.w	r2, r2, #8
 8008328:	619a      	str	r2, [r3, #24]
}
 800832a:	bf00      	nop
 800832c:	3770      	adds	r7, #112	; 0x70
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	40008000 	.word	0x40008000

08008338 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b0ac      	sub	sp, #176	; 0xb0
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008346:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800836e:	2b22      	cmp	r3, #34	; 0x22
 8008370:	f040 8182 	bne.w	8008678 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800837a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800837e:	e125      	b.n	80085cc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008386:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800838a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800838e:	b2d9      	uxtb	r1, r3
 8008390:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008394:	b2da      	uxtb	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800839a:	400a      	ands	r2, r1
 800839c:	b2d2      	uxtb	r2, r2
 800839e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a4:	1c5a      	adds	r2, r3, #1
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	3b01      	subs	r3, #1
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80083c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083ca:	f003 0307 	and.w	r3, r3, #7
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d053      	beq.n	800847a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d011      	beq.n	8008402 <UART_RxISR_8BIT_FIFOEN+0xca>
 80083de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80083e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00b      	beq.n	8008402 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2201      	movs	r2, #1
 80083f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f8:	f043 0201 	orr.w	r2, r3, #1
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d011      	beq.n	8008432 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800840e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00b      	beq.n	8008432 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2202      	movs	r2, #2
 8008420:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008428:	f043 0204 	orr.w	r2, r3, #4
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008436:	f003 0304 	and.w	r3, r3, #4
 800843a:	2b00      	cmp	r3, #0
 800843c:	d011      	beq.n	8008462 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800843e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00b      	beq.n	8008462 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2204      	movs	r2, #4
 8008450:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008458:	f043 0202 	orr.w	r2, r3, #2
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008468:	2b00      	cmp	r3, #0
 800846a:	d006      	beq.n	800847a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7fa fd01 	bl	8002e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008480:	b29b      	uxth	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	f040 80a2 	bne.w	80085cc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800849c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	461a      	mov	r2, r3
 80084a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084ac:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80084b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80084b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e4      	bne.n	8008488 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3308      	adds	r3, #8
 80084c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084c8:	e853 3f00 	ldrex	r3, [r3]
 80084cc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80084ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084d4:	f023 0301 	bic.w	r3, r3, #1
 80084d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3308      	adds	r3, #8
 80084e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084e6:	66ba      	str	r2, [r7, #104]	; 0x68
 80084e8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80084ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80084f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e1      	bne.n	80084be <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2220      	movs	r2, #32
 80084fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a5f      	ldr	r2, [pc, #380]	; (8008690 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d021      	beq.n	800855c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d01a      	beq.n	800855c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800852e:	e853 3f00 	ldrex	r3, [r3]
 8008532:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008536:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800853a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008548:	657b      	str	r3, [r7, #84]	; 0x54
 800854a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800854e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e4      	bne.n	8008526 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008560:	2b01      	cmp	r3, #1
 8008562:	d130      	bne.n	80085c6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008572:	e853 3f00 	ldrex	r3, [r3]
 8008576:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	f023 0310 	bic.w	r3, r3, #16
 800857e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800858c:	643b      	str	r3, [r7, #64]	; 0x40
 800858e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008590:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008594:	e841 2300 	strex	r3, r2, [r1]
 8008598:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800859a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e4      	bne.n	800856a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	f003 0310 	and.w	r3, r3, #16
 80085aa:	2b10      	cmp	r3, #16
 80085ac:	d103      	bne.n	80085b6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2210      	movs	r2, #16
 80085b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7fe fe76 	bl	80072b0 <HAL_UARTEx_RxEventCallback>
 80085c4:	e002      	b.n	80085cc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7fa fc5e 	bl	8002e88 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085cc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d006      	beq.n	80085e2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80085d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085d8:	f003 0320 	and.w	r3, r3, #32
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f47f aecf 	bne.w	8008380 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085e8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80085ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d049      	beq.n	8008688 <UART_RxISR_8BIT_FIFOEN+0x350>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80085fa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80085fe:	429a      	cmp	r2, r3
 8008600:	d242      	bcs.n	8008688 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3308      	adds	r3, #8
 8008608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	61fb      	str	r3, [r7, #28]
   return(result);
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3308      	adds	r3, #8
 8008622:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008626:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008628:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800862c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800862e:	e841 2300 	strex	r3, r2, [r1]
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1e3      	bne.n	8008602 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a15      	ldr	r2, [pc, #84]	; (8008694 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800863e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	60bb      	str	r3, [r7, #8]
   return(result);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f043 0320 	orr.w	r3, r3, #32
 8008654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	461a      	mov	r2, r3
 800865e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008662:	61bb      	str	r3, [r7, #24]
 8008664:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	6979      	ldr	r1, [r7, #20]
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	613b      	str	r3, [r7, #16]
   return(result);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e4      	bne.n	8008640 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008676:	e007      	b.n	8008688 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699a      	ldr	r2, [r3, #24]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0208 	orr.w	r2, r2, #8
 8008686:	619a      	str	r2, [r3, #24]
}
 8008688:	bf00      	nop
 800868a:	37b0      	adds	r7, #176	; 0xb0
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40008000 	.word	0x40008000
 8008694:	08007fc9 	.word	0x08007fc9

08008698 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b0ae      	sub	sp, #184	; 0xb8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	69db      	ldr	r3, [r3, #28]
 80086b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086ce:	2b22      	cmp	r3, #34	; 0x22
 80086d0:	f040 8186 	bne.w	80089e0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086da:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086de:	e129      	b.n	8008934 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80086f2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80086f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80086fa:	4013      	ands	r3, r2
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008702:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008708:	1c9a      	adds	r2, r3, #2
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008714:	b29b      	uxth	r3, r3
 8008716:	3b01      	subs	r3, #1
 8008718:	b29a      	uxth	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800872a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	2b00      	cmp	r3, #0
 8008734:	d053      	beq.n	80087de <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	d011      	beq.n	8008766 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00b      	beq.n	8008766 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2201      	movs	r2, #1
 8008754:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800875c:	f043 0201 	orr.w	r2, r3, #1
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008766:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b00      	cmp	r3, #0
 8008770:	d011      	beq.n	8008796 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00b      	beq.n	8008796 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2202      	movs	r2, #2
 8008784:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800878c:	f043 0204 	orr.w	r2, r3, #4
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008796:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800879a:	f003 0304 	and.w	r3, r3, #4
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d011      	beq.n	80087c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80087a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00b      	beq.n	80087c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2204      	movs	r2, #4
 80087b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087bc:	f043 0202 	orr.w	r2, r3, #2
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d006      	beq.n	80087de <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7fa fb4f 	bl	8002e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f040 80a4 	bne.w	8008934 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	461a      	mov	r2, r3
 800880a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800880e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008812:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008814:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008816:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e2      	bne.n	80087ec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3308      	adds	r3, #8
 800882c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008830:	e853 3f00 	ldrex	r3, [r3]
 8008834:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800883c:	f023 0301 	bic.w	r3, r3, #1
 8008840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3308      	adds	r3, #8
 800884a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800884e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008850:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008852:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008854:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008856:	e841 2300 	strex	r3, r2, [r1]
 800885a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800885c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1e1      	bne.n	8008826 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2220      	movs	r2, #32
 8008866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a5f      	ldr	r2, [pc, #380]	; (80089f8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d021      	beq.n	80088c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d01a      	beq.n	80088c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008896:	e853 3f00 	ldrex	r3, [r3]
 800889a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800889c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800889e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80088b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088b8:	e841 2300 	strex	r3, r2, [r1]
 80088bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e4      	bne.n	800888e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d130      	bne.n	800892e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088da:	e853 3f00 	ldrex	r3, [r3]
 80088de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e2:	f023 0310 	bic.w	r3, r3, #16
 80088e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088f4:	647b      	str	r3, [r7, #68]	; 0x44
 80088f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088fc:	e841 2300 	strex	r3, r2, [r1]
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1e4      	bne.n	80088d2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	f003 0310 	and.w	r3, r3, #16
 8008912:	2b10      	cmp	r3, #16
 8008914:	d103      	bne.n	800891e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2210      	movs	r2, #16
 800891c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7fe fcc2 	bl	80072b0 <HAL_UARTEx_RxEventCallback>
 800892c:	e002      	b.n	8008934 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7fa faaa 	bl	8002e88 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008934:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008938:	2b00      	cmp	r3, #0
 800893a:	d006      	beq.n	800894a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800893c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008940:	f003 0320 	and.w	r3, r3, #32
 8008944:	2b00      	cmp	r3, #0
 8008946:	f47f aecb 	bne.w	80086e0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008950:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008954:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008958:	2b00      	cmp	r3, #0
 800895a:	d049      	beq.n	80089f0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008962:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008966:	429a      	cmp	r2, r3
 8008968:	d242      	bcs.n	80089f0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3308      	adds	r3, #8
 8008970:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	e853 3f00 	ldrex	r3, [r3]
 8008978:	623b      	str	r3, [r7, #32]
   return(result);
 800897a:	6a3b      	ldr	r3, [r7, #32]
 800897c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3308      	adds	r3, #8
 800898a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800898e:	633a      	str	r2, [r7, #48]	; 0x30
 8008990:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008996:	e841 2300 	strex	r3, r2, [r1]
 800899a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1e3      	bne.n	800896a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a15      	ldr	r2, [pc, #84]	; (80089fc <UART_RxISR_16BIT_FIFOEN+0x364>)
 80089a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	e853 3f00 	ldrex	r3, [r3]
 80089b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f043 0320 	orr.w	r3, r3, #32
 80089bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	461a      	mov	r2, r3
 80089c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089ca:	61fb      	str	r3, [r7, #28]
 80089cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ce:	69b9      	ldr	r1, [r7, #24]
 80089d0:	69fa      	ldr	r2, [r7, #28]
 80089d2:	e841 2300 	strex	r3, r2, [r1]
 80089d6:	617b      	str	r3, [r7, #20]
   return(result);
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1e4      	bne.n	80089a8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089de:	e007      	b.n	80089f0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	699a      	ldr	r2, [r3, #24]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f042 0208 	orr.w	r2, r2, #8
 80089ee:	619a      	str	r2, [r3, #24]
}
 80089f0:	bf00      	nop
 80089f2:	37b8      	adds	r7, #184	; 0xb8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	40008000 	.word	0x40008000
 80089fc:	08008181 	.word	0x08008181

08008a00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d101      	bne.n	8008a52 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a4e:	2302      	movs	r3, #2
 8008a50:	e027      	b.n	8008aa2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2224      	movs	r2, #36	; 0x24
 8008a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0201 	bic.w	r2, r2, #1
 8008a78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d101      	bne.n	8008ac6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e02d      	b.n	8008b22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2224      	movs	r2, #36	; 0x24
 8008ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 0201 	bic.w	r2, r2, #1
 8008aec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f850 	bl	8008ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d101      	bne.n	8008b42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b3e:	2302      	movs	r3, #2
 8008b40:	e02d      	b.n	8008b9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2224      	movs	r2, #36	; 0x24
 8008b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f022 0201 	bic.w	r2, r2, #1
 8008b68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f812 	bl	8008ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d108      	bne.n	8008bca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bc8:	e031      	b.n	8008c2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bca:	2308      	movs	r3, #8
 8008bcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008bce:	2308      	movs	r3, #8
 8008bd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	0e5b      	lsrs	r3, r3, #25
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	f003 0307 	and.w	r3, r3, #7
 8008be0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	0f5b      	lsrs	r3, r3, #29
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	f003 0307 	and.w	r3, r3, #7
 8008bf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bf2:	7bbb      	ldrb	r3, [r7, #14]
 8008bf4:	7b3a      	ldrb	r2, [r7, #12]
 8008bf6:	4911      	ldr	r1, [pc, #68]	; (8008c3c <UARTEx_SetNbDataToProcess+0x94>)
 8008bf8:	5c8a      	ldrb	r2, [r1, r2]
 8008bfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bfe:	7b3a      	ldrb	r2, [r7, #12]
 8008c00:	490f      	ldr	r1, [pc, #60]	; (8008c40 <UARTEx_SetNbDataToProcess+0x98>)
 8008c02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c04:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
 8008c12:	7b7a      	ldrb	r2, [r7, #13]
 8008c14:	4909      	ldr	r1, [pc, #36]	; (8008c3c <UARTEx_SetNbDataToProcess+0x94>)
 8008c16:	5c8a      	ldrb	r2, [r1, r2]
 8008c18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c1c:	7b7a      	ldrb	r2, [r7, #13]
 8008c1e:	4908      	ldr	r1, [pc, #32]	; (8008c40 <UARTEx_SetNbDataToProcess+0x98>)
 8008c20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c22:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c2e:	bf00      	nop
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	08010cfc 	.word	0x08010cfc
 8008c40:	08010d04 	.word	0x08010d04

08008c44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008c54:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008c58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b085      	sub	sp, #20
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008c7a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008c7e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	43db      	mvns	r3, r3
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	4013      	ands	r3, r2
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	1d3b      	adds	r3, r7, #4
 8008cb2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3714      	adds	r7, #20
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b09d      	sub	sp, #116	; 0x74
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	78db      	ldrb	r3, [r3, #3]
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d81f      	bhi.n	8008d56 <USB_ActivateEndpoint+0x72>
 8008d16:	a201      	add	r2, pc, #4	; (adr r2, 8008d1c <USB_ActivateEndpoint+0x38>)
 8008d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1c:	08008d2d 	.word	0x08008d2d
 8008d20:	08008d49 	.word	0x08008d49
 8008d24:	08008d5f 	.word	0x08008d5f
 8008d28:	08008d3b 	.word	0x08008d3b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008d2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008d38:	e012      	b.n	8008d60 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008d3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008d3e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008d42:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008d46:	e00b      	b.n	8008d60 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008d48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008d4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008d54:	e004      	b.n	8008d60 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008d5c:	e000      	b.n	8008d60 <USB_ActivateEndpoint+0x7c>
      break;
 8008d5e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	441a      	add	r2, r3
 8008d6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	881b      	ldrh	r3, [r3, #0]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	b21b      	sxth	r3, r3
 8008d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d9a:	b21a      	sxth	r2, r3
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	b21b      	sxth	r3, r3
 8008da2:	4313      	orrs	r3, r2
 8008da4:	b21b      	sxth	r3, r3
 8008da6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	441a      	add	r2, r3
 8008db4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	7b1b      	ldrb	r3, [r3, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f040 8178 	bne.w	80090c6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	785b      	ldrb	r3, [r3, #1]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f000 8084 	beq.w	8008ee8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	61bb      	str	r3, [r7, #24]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	461a      	mov	r2, r3
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	4413      	add	r3, r2
 8008df2:	61bb      	str	r3, [r7, #24]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	00da      	lsls	r2, r3, #3
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e02:	617b      	str	r3, [r7, #20]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	88db      	ldrh	r3, [r3, #6]
 8008e08:	085b      	lsrs	r3, r3, #1
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	827b      	strh	r3, [r7, #18]
 8008e22:	8a7b      	ldrh	r3, [r7, #18]
 8008e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01b      	beq.n	8008e64 <USB_ActivateEndpoint+0x180>
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	881b      	ldrh	r3, [r3, #0]
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e42:	823b      	strh	r3, [r7, #16]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	441a      	add	r2, r3
 8008e4e:	8a3b      	ldrh	r3, [r7, #16]
 8008e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	78db      	ldrb	r3, [r3, #3]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d020      	beq.n	8008eae <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e82:	81bb      	strh	r3, [r7, #12]
 8008e84:	89bb      	ldrh	r3, [r7, #12]
 8008e86:	f083 0320 	eor.w	r3, r3, #32
 8008e8a:	81bb      	strh	r3, [r7, #12]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	441a      	add	r2, r3
 8008e96:	89bb      	ldrh	r3, [r7, #12]
 8008e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	8013      	strh	r3, [r2, #0]
 8008eac:	e2d5      	b.n	800945a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ec4:	81fb      	strh	r3, [r7, #14]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	441a      	add	r2, r3
 8008ed0:	89fb      	ldrh	r3, [r7, #14]
 8008ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	8013      	strh	r3, [r2, #0]
 8008ee6:	e2b8      	b.n	800945a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	633b      	str	r3, [r7, #48]	; 0x30
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	4413      	add	r3, r2
 8008efa:	633b      	str	r3, [r7, #48]	; 0x30
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	00da      	lsls	r2, r3, #3
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	4413      	add	r3, r2
 8008f06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	88db      	ldrh	r3, [r3, #6]
 8008f10:	085b      	lsrs	r3, r3, #1
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	461a      	mov	r2, r3
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	4413      	add	r3, r2
 8008f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	00da      	lsls	r2, r3, #3
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	4413      	add	r3, r2
 8008f3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	801a      	strh	r2, [r3, #0]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	2b3e      	cmp	r3, #62	; 0x3e
 8008f56:	d91d      	bls.n	8008f94 <USB_ActivateEndpoint+0x2b0>
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	095b      	lsrs	r3, r3, #5
 8008f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	f003 031f 	and.w	r3, r3, #31
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d102      	bne.n	8008f72 <USB_ActivateEndpoint+0x28e>
 8008f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	029b      	lsls	r3, r3, #10
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	4313      	orrs	r3, r2
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f90:	801a      	strh	r2, [r3, #0]
 8008f92:	e026      	b.n	8008fe2 <USB_ActivateEndpoint+0x2fe>
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10a      	bne.n	8008fb2 <USB_ActivateEndpoint+0x2ce>
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	801a      	strh	r2, [r3, #0]
 8008fb0:	e017      	b.n	8008fe2 <USB_ActivateEndpoint+0x2fe>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	085b      	lsrs	r3, r3, #1
 8008fb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d002      	beq.n	8008fcc <USB_ActivateEndpoint+0x2e8>
 8008fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fc8:	3301      	adds	r3, #1
 8008fca:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	029b      	lsls	r3, r3, #10
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	847b      	strh	r3, [r7, #34]	; 0x22
 8008ff0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d01b      	beq.n	8009032 <USB_ActivateEndpoint+0x34e>
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4413      	add	r3, r2
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	b29b      	uxth	r3, r3
 8009008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800900c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009010:	843b      	strh	r3, [r7, #32]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	441a      	add	r2, r3
 800901c:	8c3b      	ldrh	r3, [r7, #32]
 800901e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009026:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800902a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800902e:	b29b      	uxth	r3, r3
 8009030:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d124      	bne.n	8009084 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4413      	add	r3, r2
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	b29b      	uxth	r3, r3
 8009048:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800904c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009050:	83bb      	strh	r3, [r7, #28]
 8009052:	8bbb      	ldrh	r3, [r7, #28]
 8009054:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009058:	83bb      	strh	r3, [r7, #28]
 800905a:	8bbb      	ldrh	r3, [r7, #28]
 800905c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009060:	83bb      	strh	r3, [r7, #28]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	441a      	add	r2, r3
 800906c:	8bbb      	ldrh	r3, [r7, #28]
 800906e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800907a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800907e:	b29b      	uxth	r3, r3
 8009080:	8013      	strh	r3, [r2, #0]
 8009082:	e1ea      	b.n	800945a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	b29b      	uxth	r3, r3
 8009092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800909a:	83fb      	strh	r3, [r7, #30]
 800909c:	8bfb      	ldrh	r3, [r7, #30]
 800909e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80090a2:	83fb      	strh	r3, [r7, #30]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	441a      	add	r2, r3
 80090ae:	8bfb      	ldrh	r3, [r7, #30]
 80090b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	8013      	strh	r3, [r2, #0]
 80090c4:	e1c9      	b.n	800945a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	78db      	ldrb	r3, [r3, #3]
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d11e      	bne.n	800910c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090e4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	441a      	add	r2, r3
 80090f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80090f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009106:	b29b      	uxth	r3, r3
 8009108:	8013      	strh	r3, [r2, #0]
 800910a:	e01d      	b.n	8009148 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	b29b      	uxth	r3, r3
 800911a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800911e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009122:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	441a      	add	r2, r3
 8009130:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800913c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009144:	b29b      	uxth	r3, r3
 8009146:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009152:	b29b      	uxth	r3, r3
 8009154:	461a      	mov	r2, r3
 8009156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009158:	4413      	add	r3, r2
 800915a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	00da      	lsls	r2, r3, #3
 8009162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009164:	4413      	add	r3, r2
 8009166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800916a:	65bb      	str	r3, [r7, #88]	; 0x58
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	891b      	ldrh	r3, [r3, #8]
 8009170:	085b      	lsrs	r3, r3, #1
 8009172:	b29b      	uxth	r3, r3
 8009174:	005b      	lsls	r3, r3, #1
 8009176:	b29a      	uxth	r2, r3
 8009178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800917a:	801a      	strh	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	657b      	str	r3, [r7, #84]	; 0x54
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009186:	b29b      	uxth	r3, r3
 8009188:	461a      	mov	r2, r3
 800918a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800918c:	4413      	add	r3, r2
 800918e:	657b      	str	r3, [r7, #84]	; 0x54
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	00da      	lsls	r2, r3, #3
 8009196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009198:	4413      	add	r3, r2
 800919a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800919e:	653b      	str	r3, [r7, #80]	; 0x50
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	895b      	ldrh	r3, [r3, #10]
 80091a4:	085b      	lsrs	r3, r3, #1
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	785b      	ldrb	r3, [r3, #1]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f040 8093 	bne.w	80092e0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	881b      	ldrh	r3, [r3, #0]
 80091c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80091ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80091ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d01b      	beq.n	800920e <USB_ActivateEndpoint+0x52a>
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	441a      	add	r2, r3
 80091f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80091fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800920a:	b29b      	uxth	r3, r3
 800920c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800921c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800921e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009222:	2b00      	cmp	r3, #0
 8009224:	d01b      	beq.n	800925e <USB_ActivateEndpoint+0x57a>
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	881b      	ldrh	r3, [r3, #0]
 8009232:	b29b      	uxth	r3, r3
 8009234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	441a      	add	r2, r3
 8009248:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800924a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800924e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009256:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800925a:	b29b      	uxth	r3, r3
 800925c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	b29b      	uxth	r3, r3
 800926c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009274:	873b      	strh	r3, [r7, #56]	; 0x38
 8009276:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009278:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800927c:	873b      	strh	r3, [r7, #56]	; 0x38
 800927e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009280:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009284:	873b      	strh	r3, [r7, #56]	; 0x38
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	441a      	add	r2, r3
 8009290:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800929a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800929e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	441a      	add	r2, r3
 80092c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80092ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092da:	b29b      	uxth	r3, r3
 80092dc:	8013      	strh	r3, [r2, #0]
 80092de:	e0bc      	b.n	800945a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	881b      	ldrh	r3, [r3, #0]
 80092ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80092f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80092f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d01d      	beq.n	8009338 <USB_ActivateEndpoint+0x654>
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	881b      	ldrh	r3, [r3, #0]
 8009308:	b29b      	uxth	r3, r3
 800930a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800930e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009312:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	441a      	add	r2, r3
 8009320:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800932c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009334:	b29b      	uxth	r3, r3
 8009336:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009348:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800934c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009350:	2b00      	cmp	r3, #0
 8009352:	d01d      	beq.n	8009390 <USB_ActivateEndpoint+0x6ac>
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	b29b      	uxth	r3, r3
 8009362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	441a      	add	r2, r3
 8009378:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800937c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009388:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800938c:	b29b      	uxth	r3, r3
 800938e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	78db      	ldrb	r3, [r3, #3]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d024      	beq.n	80093e2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	881b      	ldrh	r3, [r3, #0]
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80093b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80093b6:	f083 0320 	eor.w	r3, r3, #32
 80093ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	441a      	add	r2, r3
 80093c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80093cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093dc:	b29b      	uxth	r3, r3
 80093de:	8013      	strh	r3, [r2, #0]
 80093e0:	e01d      	b.n	800941e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	881b      	ldrh	r3, [r3, #0]
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	441a      	add	r2, r3
 8009406:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800940a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800940e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800941a:	b29b      	uxth	r3, r3
 800941c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	b29b      	uxth	r3, r3
 800942c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009434:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	441a      	add	r2, r3
 8009442:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800944a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800944e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009456:	b29b      	uxth	r3, r3
 8009458:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800945a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800945e:	4618      	mov	r0, r3
 8009460:	3774      	adds	r7, #116	; 0x74
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop

0800946c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800946c:	b480      	push	{r7}
 800946e:	b08d      	sub	sp, #52	; 0x34
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	7b1b      	ldrb	r3, [r3, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f040 808e 	bne.w	800959c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	785b      	ldrb	r3, [r3, #1]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d044      	beq.n	8009512 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4413      	add	r3, r2
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	81bb      	strh	r3, [r7, #12]
 8009496:	89bb      	ldrh	r3, [r7, #12]
 8009498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949c:	2b00      	cmp	r3, #0
 800949e:	d01b      	beq.n	80094d8 <USB_DeactivateEndpoint+0x6c>
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b6:	817b      	strh	r3, [r7, #10]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	441a      	add	r2, r3
 80094c2:	897b      	ldrh	r3, [r7, #10]
 80094c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	881b      	ldrh	r3, [r3, #0]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ee:	813b      	strh	r3, [r7, #8]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	441a      	add	r2, r3
 80094fa:	893b      	ldrh	r3, [r7, #8]
 80094fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800950c:	b29b      	uxth	r3, r3
 800950e:	8013      	strh	r3, [r2, #0]
 8009510:	e192      	b.n	8009838 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	827b      	strh	r3, [r7, #18]
 8009520:	8a7b      	ldrh	r3, [r7, #18]
 8009522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d01b      	beq.n	8009562 <USB_DeactivateEndpoint+0xf6>
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	881b      	ldrh	r3, [r3, #0]
 8009536:	b29b      	uxth	r3, r3
 8009538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800953c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009540:	823b      	strh	r3, [r7, #16]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	441a      	add	r2, r3
 800954c:	8a3b      	ldrh	r3, [r7, #16]
 800954e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800955a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800955e:	b29b      	uxth	r3, r3
 8009560:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	b29b      	uxth	r3, r3
 8009570:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009578:	81fb      	strh	r3, [r7, #14]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	441a      	add	r2, r3
 8009584:	89fb      	ldrh	r3, [r7, #14]
 8009586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800958a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800958e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009596:	b29b      	uxth	r3, r3
 8009598:	8013      	strh	r3, [r2, #0]
 800959a:	e14d      	b.n	8009838 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	785b      	ldrb	r3, [r3, #1]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f040 80a5 	bne.w	80096f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	881b      	ldrh	r3, [r3, #0]
 80095b2:	843b      	strh	r3, [r7, #32]
 80095b4:	8c3b      	ldrh	r3, [r7, #32]
 80095b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d01b      	beq.n	80095f6 <USB_DeactivateEndpoint+0x18a>
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4413      	add	r3, r2
 80095c8:	881b      	ldrh	r3, [r3, #0]
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d4:	83fb      	strh	r3, [r7, #30]
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	441a      	add	r2, r3
 80095e0:	8bfb      	ldrh	r3, [r7, #30]
 80095e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	881b      	ldrh	r3, [r3, #0]
 8009602:	83bb      	strh	r3, [r7, #28]
 8009604:	8bbb      	ldrh	r3, [r7, #28]
 8009606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960a:	2b00      	cmp	r3, #0
 800960c:	d01b      	beq.n	8009646 <USB_DeactivateEndpoint+0x1da>
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	b29b      	uxth	r3, r3
 800961c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009624:	837b      	strh	r3, [r7, #26]
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	441a      	add	r2, r3
 8009630:	8b7b      	ldrh	r3, [r7, #26]
 8009632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800963a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800963e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009642:	b29b      	uxth	r3, r3
 8009644:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	b29b      	uxth	r3, r3
 8009654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800965c:	833b      	strh	r3, [r7, #24]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	441a      	add	r2, r3
 8009668:	8b3b      	ldrh	r3, [r7, #24]
 800966a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800966e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009676:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800967a:	b29b      	uxth	r3, r3
 800967c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	881b      	ldrh	r3, [r3, #0]
 800968a:	b29b      	uxth	r3, r3
 800968c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009694:	82fb      	strh	r3, [r7, #22]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	441a      	add	r2, r3
 80096a0:	8afb      	ldrh	r3, [r7, #22]
 80096a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096cc:	82bb      	strh	r3, [r7, #20]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	441a      	add	r2, r3
 80096d8:	8abb      	ldrh	r3, [r7, #20]
 80096da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	8013      	strh	r3, [r2, #0]
 80096ee:	e0a3      	b.n	8009838 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	4413      	add	r3, r2
 80096fa:	881b      	ldrh	r3, [r3, #0]
 80096fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80096fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009704:	2b00      	cmp	r3, #0
 8009706:	d01b      	beq.n	8009740 <USB_DeactivateEndpoint+0x2d4>
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	4413      	add	r3, r2
 8009712:	881b      	ldrh	r3, [r3, #0]
 8009714:	b29b      	uxth	r3, r3
 8009716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800971a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800971e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	441a      	add	r2, r3
 800972a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800972c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800973c:	b29b      	uxth	r3, r3
 800973e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	881b      	ldrh	r3, [r3, #0]
 800974c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800974e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009754:	2b00      	cmp	r3, #0
 8009756:	d01b      	beq.n	8009790 <USB_DeactivateEndpoint+0x324>
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	4413      	add	r3, r2
 8009762:	881b      	ldrh	r3, [r3, #0]
 8009764:	b29b      	uxth	r3, r3
 8009766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800976a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800976e:	853b      	strh	r3, [r7, #40]	; 0x28
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	441a      	add	r2, r3
 800977a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800977c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009788:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800978c:	b29b      	uxth	r3, r3
 800978e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	b29b      	uxth	r3, r3
 800979e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	441a      	add	r2, r3
 80097b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80097b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80097c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	881b      	ldrh	r3, [r3, #0]
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	441a      	add	r2, r3
 80097ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	881b      	ldrh	r3, [r3, #0]
 800980c:	b29b      	uxth	r3, r3
 800980e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009816:	847b      	strh	r3, [r7, #34]	; 0x22
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	441a      	add	r2, r3
 8009822:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800982c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009834:	b29b      	uxth	r3, r3
 8009836:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3734      	adds	r7, #52	; 0x34
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b0c2      	sub	sp, #264	; 0x108
 800984a:	af00      	add	r7, sp, #0
 800984c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009854:	6018      	str	r0, [r3, #0]
 8009856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800985a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800985e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	785b      	ldrb	r3, [r3, #1]
 800986c:	2b01      	cmp	r3, #1
 800986e:	f040 86b7 	bne.w	800a5e0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	699a      	ldr	r2, [r3, #24]
 800987e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	429a      	cmp	r2, r3
 800988c:	d908      	bls.n	80098a0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800988e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800989e:	e007      	b.n	80098b0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80098a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80098b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	7b1b      	ldrb	r3, [r3, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d13a      	bne.n	8009936 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80098c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6959      	ldr	r1, [r3, #20]
 80098cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	88da      	ldrh	r2, [r3, #6]
 80098d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098dc:	b29b      	uxth	r3, r3
 80098de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80098e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80098e6:	6800      	ldr	r0, [r0, #0]
 80098e8:	f001 fc98 	bl	800b21c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80098ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	613b      	str	r3, [r7, #16]
 80098f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009906:	b29b      	uxth	r3, r3
 8009908:	461a      	mov	r2, r3
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	4413      	add	r3, r2
 800990e:	613b      	str	r3, [r7, #16]
 8009910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	00da      	lsls	r2, r3, #3
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	4413      	add	r3, r2
 8009922:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009926:	60fb      	str	r3, [r7, #12]
 8009928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800992c:	b29a      	uxth	r2, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	801a      	strh	r2, [r3, #0]
 8009932:	f000 be1f 	b.w	800a574 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800993a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	78db      	ldrb	r3, [r3, #3]
 8009942:	2b02      	cmp	r3, #2
 8009944:	f040 8462 	bne.w	800a20c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800994c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	6a1a      	ldr	r2, [r3, #32]
 8009954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	429a      	cmp	r2, r3
 8009962:	f240 83df 	bls.w	800a124 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800996a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	b29b      	uxth	r3, r3
 8009984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800998c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009994:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800999e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	441a      	add	r2, r3
 80099aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80099ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80099ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099be:	b29b      	uxth	r3, r3
 80099c0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80099c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6a1a      	ldr	r2, [r3, #32]
 80099ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099d2:	1ad2      	subs	r2, r2, r3
 80099d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80099e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	881b      	ldrh	r3, [r3, #0]
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 81c7 	beq.w	8009d96 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	633b      	str	r3, [r7, #48]	; 0x30
 8009a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	785b      	ldrb	r3, [r3, #1]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d177      	bne.n	8009b14 <USB_EPStartXfer+0x2ce>
 8009a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	461a      	mov	r2, r3
 8009a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a44:	4413      	add	r3, r2
 8009a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	00da      	lsls	r2, r3, #3
 8009a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a58:	4413      	add	r3, r2
 8009a5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8009a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6e:	801a      	strh	r2, [r3, #0]
 8009a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a74:	2b3e      	cmp	r3, #62	; 0x3e
 8009a76:	d921      	bls.n	8009abc <USB_EPStartXfer+0x276>
 8009a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a7c:	095b      	lsrs	r3, r3, #5
 8009a7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a86:	f003 031f 	and.w	r3, r3, #31
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d104      	bne.n	8009a98 <USB_EPStartXfer+0x252>
 8009a8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009a92:	3b01      	subs	r3, #1
 8009a94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	881b      	ldrh	r3, [r3, #0]
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	029b      	lsls	r3, r3, #10
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	801a      	strh	r2, [r3, #0]
 8009aba:	e050      	b.n	8009b5e <USB_EPStartXfer+0x318>
 8009abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10a      	bne.n	8009ada <USB_EPStartXfer+0x294>
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac6:	881b      	ldrh	r3, [r3, #0]
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	801a      	strh	r2, [r3, #0]
 8009ad8:	e041      	b.n	8009b5e <USB_EPStartXfer+0x318>
 8009ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ade:	085b      	lsrs	r3, r3, #1
 8009ae0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae8:	f003 0301 	and.w	r3, r3, #1
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d004      	beq.n	8009afa <USB_EPStartXfer+0x2b4>
 8009af0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009af4:	3301      	adds	r3, #1
 8009af6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	881b      	ldrh	r3, [r3, #0]
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	029b      	lsls	r3, r3, #10
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	801a      	strh	r2, [r3, #0]
 8009b12:	e024      	b.n	8009b5e <USB_EPStartXfer+0x318>
 8009b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	785b      	ldrb	r3, [r3, #1]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d11c      	bne.n	8009b5e <USB_EPStartXfer+0x318>
 8009b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	461a      	mov	r2, r3
 8009b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b38:	4413      	add	r3, r2
 8009b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8009b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	00da      	lsls	r2, r3, #3
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	895b      	ldrh	r3, [r3, #10]
 8009b6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6959      	ldr	r1, [r3, #20]
 8009b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009b84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009b88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009b8c:	6800      	ldr	r0, [r0, #0]
 8009b8e:	f001 fb45 	bl	800b21c <USB_WritePMA>
            ep->xfer_buff += len;
 8009b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	695a      	ldr	r2, [r3, #20]
 8009b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ba2:	441a      	add	r2, r3
 8009ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	6a1a      	ldr	r2, [r3, #32]
 8009bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d90f      	bls.n	8009bec <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6a1a      	ldr	r2, [r3, #32]
 8009bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bdc:	1ad2      	subs	r2, r2, r3
 8009bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	621a      	str	r2, [r3, #32]
 8009bea:	e00e      	b.n	8009c0a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6a1b      	ldr	r3, [r3, #32]
 8009bf8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2200      	movs	r2, #0
 8009c08:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	785b      	ldrb	r3, [r3, #1]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d177      	bne.n	8009d0a <USB_EPStartXfer+0x4c4>
 8009c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	61bb      	str	r3, [r7, #24]
 8009c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	461a      	mov	r2, r3
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	61bb      	str	r3, [r7, #24]
 8009c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	00da      	lsls	r2, r3, #3
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c54:	617b      	str	r3, [r7, #20]
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	881b      	ldrh	r3, [r3, #0]
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	801a      	strh	r2, [r3, #0]
 8009c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c6a:	2b3e      	cmp	r3, #62	; 0x3e
 8009c6c:	d921      	bls.n	8009cb2 <USB_EPStartXfer+0x46c>
 8009c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c72:	095b      	lsrs	r3, r3, #5
 8009c74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c7c:	f003 031f 	and.w	r3, r3, #31
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d104      	bne.n	8009c8e <USB_EPStartXfer+0x448>
 8009c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	881b      	ldrh	r3, [r3, #0]
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	029b      	lsls	r3, r3, #10
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	801a      	strh	r2, [r3, #0]
 8009cb0:	e056      	b.n	8009d60 <USB_EPStartXfer+0x51a>
 8009cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10a      	bne.n	8009cd0 <USB_EPStartXfer+0x48a>
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	801a      	strh	r2, [r3, #0]
 8009cce:	e047      	b.n	8009d60 <USB_EPStartXfer+0x51a>
 8009cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cd4:	085b      	lsrs	r3, r3, #1
 8009cd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d004      	beq.n	8009cf0 <USB_EPStartXfer+0x4aa>
 8009ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cea:	3301      	adds	r3, #1
 8009cec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	881b      	ldrh	r3, [r3, #0]
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	029b      	lsls	r3, r3, #10
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	4313      	orrs	r3, r2
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	801a      	strh	r2, [r3, #0]
 8009d08:	e02a      	b.n	8009d60 <USB_EPStartXfer+0x51a>
 8009d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	785b      	ldrb	r3, [r3, #1]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d122      	bne.n	8009d60 <USB_EPStartXfer+0x51a>
 8009d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	623b      	str	r3, [r7, #32]
 8009d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	461a      	mov	r2, r3
 8009d38:	6a3b      	ldr	r3, [r7, #32]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	623b      	str	r3, [r7, #32]
 8009d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	00da      	lsls	r2, r3, #3
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d54:	61fb      	str	r3, [r7, #28]
 8009d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	891b      	ldrh	r3, [r3, #8]
 8009d6c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	6959      	ldr	r1, [r3, #20]
 8009d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009d86:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009d8a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009d8e:	6800      	ldr	r0, [r0, #0]
 8009d90:	f001 fa44 	bl	800b21c <USB_WritePMA>
 8009d94:	e3ee      	b.n	800a574 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	785b      	ldrb	r3, [r3, #1]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d177      	bne.n	8009e96 <USB_EPStartXfer+0x650>
 8009da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009db6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dc6:	4413      	add	r3, r2
 8009dc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	00da      	lsls	r2, r3, #3
 8009dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dda:	4413      	add	r3, r2
 8009ddc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009de0:	647b      	str	r3, [r7, #68]	; 0x44
 8009de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009de4:	881b      	ldrh	r3, [r3, #0]
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009df0:	801a      	strh	r2, [r3, #0]
 8009df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009df6:	2b3e      	cmp	r3, #62	; 0x3e
 8009df8:	d921      	bls.n	8009e3e <USB_EPStartXfer+0x5f8>
 8009dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dfe:	095b      	lsrs	r3, r3, #5
 8009e00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e08:	f003 031f 	and.w	r3, r3, #31
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d104      	bne.n	8009e1a <USB_EPStartXfer+0x5d4>
 8009e10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e14:	3b01      	subs	r3, #1
 8009e16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	029b      	lsls	r3, r3, #10
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e3a:	801a      	strh	r2, [r3, #0]
 8009e3c:	e056      	b.n	8009eec <USB_EPStartXfer+0x6a6>
 8009e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10a      	bne.n	8009e5c <USB_EPStartXfer+0x616>
 8009e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e58:	801a      	strh	r2, [r3, #0]
 8009e5a:	e047      	b.n	8009eec <USB_EPStartXfer+0x6a6>
 8009e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e60:	085b      	lsrs	r3, r3, #1
 8009e62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e6a:	f003 0301 	and.w	r3, r3, #1
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d004      	beq.n	8009e7c <USB_EPStartXfer+0x636>
 8009e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e76:	3301      	adds	r3, #1
 8009e78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	029b      	lsls	r3, r3, #10
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e92:	801a      	strh	r2, [r3, #0]
 8009e94:	e02a      	b.n	8009eec <USB_EPStartXfer+0x6a6>
 8009e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	785b      	ldrb	r3, [r3, #1]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d122      	bne.n	8009eec <USB_EPStartXfer+0x6a6>
 8009ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	653b      	str	r3, [r7, #80]	; 0x50
 8009eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ec6:	4413      	add	r3, r2
 8009ec8:	653b      	str	r3, [r7, #80]	; 0x50
 8009eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	00da      	lsls	r2, r3, #3
 8009ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eda:	4413      	add	r3, r2
 8009edc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	891b      	ldrh	r3, [r3, #8]
 8009ef8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	6959      	ldr	r1, [r3, #20]
 8009f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009f12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009f16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009f1a:	6800      	ldr	r0, [r0, #0]
 8009f1c:	f001 f97e 	bl	800b21c <USB_WritePMA>
            ep->xfer_buff += len;
 8009f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	695a      	ldr	r2, [r3, #20]
 8009f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f30:	441a      	add	r2, r3
 8009f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6a1a      	ldr	r2, [r3, #32]
 8009f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	691b      	ldr	r3, [r3, #16]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d90f      	bls.n	8009f7a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6a1a      	ldr	r2, [r3, #32]
 8009f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f6a:	1ad2      	subs	r2, r2, r3
 8009f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	621a      	str	r2, [r3, #32]
 8009f78:	e00e      	b.n	8009f98 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2200      	movs	r2, #0
 8009f96:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8009fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	785b      	ldrb	r3, [r3, #1]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d177      	bne.n	800a0a4 <USB_EPStartXfer+0x85e>
 8009fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	4413      	add	r3, r2
 8009fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	00da      	lsls	r2, r3, #3
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	4413      	add	r3, r2
 8009fea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009fee:	637b      	str	r3, [r7, #52]	; 0x34
 8009ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff2:	881b      	ldrh	r3, [r3, #0]
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffe:	801a      	strh	r2, [r3, #0]
 800a000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a004:	2b3e      	cmp	r3, #62	; 0x3e
 800a006:	d921      	bls.n	800a04c <USB_EPStartXfer+0x806>
 800a008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a00c:	095b      	lsrs	r3, r3, #5
 800a00e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a016:	f003 031f 	and.w	r3, r3, #31
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d104      	bne.n	800a028 <USB_EPStartXfer+0x7e2>
 800a01e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a022:	3b01      	subs	r3, #1
 800a024:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a032:	b29b      	uxth	r3, r3
 800a034:	029b      	lsls	r3, r3, #10
 800a036:	b29b      	uxth	r3, r3
 800a038:	4313      	orrs	r3, r2
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a044:	b29a      	uxth	r2, r3
 800a046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a048:	801a      	strh	r2, [r3, #0]
 800a04a:	e050      	b.n	800a0ee <USB_EPStartXfer+0x8a8>
 800a04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10a      	bne.n	800a06a <USB_EPStartXfer+0x824>
 800a054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	b29b      	uxth	r3, r3
 800a05a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a05e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a062:	b29a      	uxth	r2, r3
 800a064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a066:	801a      	strh	r2, [r3, #0]
 800a068:	e041      	b.n	800a0ee <USB_EPStartXfer+0x8a8>
 800a06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a06e:	085b      	lsrs	r3, r3, #1
 800a070:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d004      	beq.n	800a08a <USB_EPStartXfer+0x844>
 800a080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a084:	3301      	adds	r3, #1
 800a086:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	b29a      	uxth	r2, r3
 800a090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a094:	b29b      	uxth	r3, r3
 800a096:	029b      	lsls	r3, r3, #10
 800a098:	b29b      	uxth	r3, r3
 800a09a:	4313      	orrs	r3, r2
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a0:	801a      	strh	r2, [r3, #0]
 800a0a2:	e024      	b.n	800a0ee <USB_EPStartXfer+0x8a8>
 800a0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	785b      	ldrb	r3, [r3, #1]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d11c      	bne.n	800a0ee <USB_EPStartXfer+0x8a8>
 800a0b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0c8:	4413      	add	r3, r2
 800a0ca:	643b      	str	r3, [r7, #64]	; 0x40
 800a0cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	00da      	lsls	r2, r3, #3
 800a0da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0dc:	4413      	add	r3, r2
 800a0de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	895b      	ldrh	r3, [r3, #10]
 800a0fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6959      	ldr	r1, [r3, #20]
 800a10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a10e:	b29b      	uxth	r3, r3
 800a110:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a114:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a118:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a11c:	6800      	ldr	r0, [r0, #0]
 800a11e:	f001 f87d 	bl	800b21c <USB_WritePMA>
 800a122:	e227      	b.n	800a574 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	6a1b      	ldr	r3, [r3, #32]
 800a130:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	881b      	ldrh	r3, [r3, #0]
 800a150:	b29b      	uxth	r3, r3
 800a152:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a15a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a16c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	441a      	add	r2, r3
 800a178:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a17c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a19c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1b0:	4413      	add	r3, r2
 800a1b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	00da      	lsls	r2, r3, #3
 800a1c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a1ca:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a1d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	891b      	ldrh	r3, [r3, #8]
 800a1e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a1e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6959      	ldr	r1, [r3, #20]
 800a1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a1fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a200:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a204:	6800      	ldr	r0, [r0, #0]
 800a206:	f001 f809 	bl	800b21c <USB_WritePMA>
 800a20a:	e1b3      	b.n	800a574 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a20c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	6a1a      	ldr	r2, [r3, #32]
 800a218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a21c:	1ad2      	subs	r2, r2, r3
 800a21e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a22a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a22e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4413      	add	r3, r2
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	b29b      	uxth	r3, r3
 800a248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f000 80c6 	beq.w	800a3de <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	673b      	str	r3, [r7, #112]	; 0x70
 800a25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	785b      	ldrb	r3, [r3, #1]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d177      	bne.n	800a35e <USB_EPStartXfer+0xb18>
 800a26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	66bb      	str	r3, [r7, #104]	; 0x68
 800a27a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a288:	b29b      	uxth	r3, r3
 800a28a:	461a      	mov	r2, r3
 800a28c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a28e:	4413      	add	r3, r2
 800a290:	66bb      	str	r3, [r7, #104]	; 0x68
 800a292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	00da      	lsls	r2, r3, #3
 800a2a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a2a8:	667b      	str	r3, [r7, #100]	; 0x64
 800a2aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2ac:	881b      	ldrh	r3, [r3, #0]
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2b8:	801a      	strh	r2, [r3, #0]
 800a2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2be:	2b3e      	cmp	r3, #62	; 0x3e
 800a2c0:	d921      	bls.n	800a306 <USB_EPStartXfer+0xac0>
 800a2c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2c6:	095b      	lsrs	r3, r3, #5
 800a2c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2d0:	f003 031f 	and.w	r3, r3, #31
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d104      	bne.n	800a2e2 <USB_EPStartXfer+0xa9c>
 800a2d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a2e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	029b      	lsls	r3, r3, #10
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a302:	801a      	strh	r2, [r3, #0]
 800a304:	e050      	b.n	800a3a8 <USB_EPStartXfer+0xb62>
 800a306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d10a      	bne.n	800a324 <USB_EPStartXfer+0xade>
 800a30e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a310:	881b      	ldrh	r3, [r3, #0]
 800a312:	b29b      	uxth	r3, r3
 800a314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a320:	801a      	strh	r2, [r3, #0]
 800a322:	e041      	b.n	800a3a8 <USB_EPStartXfer+0xb62>
 800a324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a328:	085b      	lsrs	r3, r3, #1
 800a32a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a332:	f003 0301 	and.w	r3, r3, #1
 800a336:	2b00      	cmp	r3, #0
 800a338:	d004      	beq.n	800a344 <USB_EPStartXfer+0xafe>
 800a33a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a33e:	3301      	adds	r3, #1
 800a340:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a346:	881b      	ldrh	r3, [r3, #0]
 800a348:	b29a      	uxth	r2, r3
 800a34a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a34e:	b29b      	uxth	r3, r3
 800a350:	029b      	lsls	r3, r3, #10
 800a352:	b29b      	uxth	r3, r3
 800a354:	4313      	orrs	r3, r2
 800a356:	b29a      	uxth	r2, r3
 800a358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a35a:	801a      	strh	r2, [r3, #0]
 800a35c:	e024      	b.n	800a3a8 <USB_EPStartXfer+0xb62>
 800a35e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	785b      	ldrb	r3, [r3, #1]
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d11c      	bne.n	800a3a8 <USB_EPStartXfer+0xb62>
 800a36e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	461a      	mov	r2, r3
 800a380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a382:	4413      	add	r3, r2
 800a384:	673b      	str	r3, [r7, #112]	; 0x70
 800a386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a38a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	00da      	lsls	r2, r3, #3
 800a394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a396:	4413      	add	r3, r2
 800a398:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a39c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a3a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	895b      	ldrh	r3, [r3, #10]
 800a3b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	6959      	ldr	r1, [r3, #20]
 800a3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a3ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a3d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a3d6:	6800      	ldr	r0, [r0, #0]
 800a3d8:	f000 ff20 	bl	800b21c <USB_WritePMA>
 800a3dc:	e0ca      	b.n	800a574 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a3de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	785b      	ldrb	r3, [r3, #1]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d177      	bne.n	800a4de <USB_EPStartXfer+0xc98>
 800a3ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a3fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a408:	b29b      	uxth	r3, r3
 800a40a:	461a      	mov	r2, r3
 800a40c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a40e:	4413      	add	r3, r2
 800a410:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	00da      	lsls	r2, r3, #3
 800a420:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a422:	4413      	add	r3, r2
 800a424:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a428:	67bb      	str	r3, [r7, #120]	; 0x78
 800a42a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a434:	b29a      	uxth	r2, r3
 800a436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a438:	801a      	strh	r2, [r3, #0]
 800a43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a43e:	2b3e      	cmp	r3, #62	; 0x3e
 800a440:	d921      	bls.n	800a486 <USB_EPStartXfer+0xc40>
 800a442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a446:	095b      	lsrs	r3, r3, #5
 800a448:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a450:	f003 031f 	and.w	r3, r3, #31
 800a454:	2b00      	cmp	r3, #0
 800a456:	d104      	bne.n	800a462 <USB_EPStartXfer+0xc1c>
 800a458:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a45c:	3b01      	subs	r3, #1
 800a45e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	b29a      	uxth	r2, r3
 800a468:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	029b      	lsls	r3, r3, #10
 800a470:	b29b      	uxth	r3, r3
 800a472:	4313      	orrs	r3, r2
 800a474:	b29b      	uxth	r3, r3
 800a476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a47a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a47e:	b29a      	uxth	r2, r3
 800a480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a482:	801a      	strh	r2, [r3, #0]
 800a484:	e05c      	b.n	800a540 <USB_EPStartXfer+0xcfa>
 800a486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10a      	bne.n	800a4a4 <USB_EPStartXfer+0xc5e>
 800a48e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a490:	881b      	ldrh	r3, [r3, #0]
 800a492:	b29b      	uxth	r3, r3
 800a494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4a0:	801a      	strh	r2, [r3, #0]
 800a4a2:	e04d      	b.n	800a540 <USB_EPStartXfer+0xcfa>
 800a4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a8:	085b      	lsrs	r3, r3, #1
 800a4aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4b2:	f003 0301 	and.w	r3, r3, #1
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d004      	beq.n	800a4c4 <USB_EPStartXfer+0xc7e>
 800a4ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a4be:	3301      	adds	r3, #1
 800a4c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a4c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4c6:	881b      	ldrh	r3, [r3, #0]
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	029b      	lsls	r3, r3, #10
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4da:	801a      	strh	r2, [r3, #0]
 800a4dc:	e030      	b.n	800a540 <USB_EPStartXfer+0xcfa>
 800a4de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	785b      	ldrb	r3, [r3, #1]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d128      	bne.n	800a540 <USB_EPStartXfer+0xcfa>
 800a4ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a4fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	461a      	mov	r2, r3
 800a50e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a512:	4413      	add	r3, r2
 800a514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a51c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	00da      	lsls	r2, r3, #3
 800a526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a52a:	4413      	add	r3, r2
 800a52c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a538:	b29a      	uxth	r2, r3
 800a53a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a53e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	891b      	ldrh	r3, [r3, #8]
 800a54c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	6959      	ldr	r1, [r3, #20]
 800a55c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a560:	b29b      	uxth	r3, r3
 800a562:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a566:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a56a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a56e:	6800      	ldr	r0, [r0, #0]
 800a570:	f000 fe54 	bl	800b21c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	b29b      	uxth	r3, r3
 800a592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a59a:	817b      	strh	r3, [r7, #10]
 800a59c:	897b      	ldrh	r3, [r7, #10]
 800a59e:	f083 0310 	eor.w	r3, r3, #16
 800a5a2:	817b      	strh	r3, [r7, #10]
 800a5a4:	897b      	ldrh	r3, [r7, #10]
 800a5a6:	f083 0320 	eor.w	r3, r3, #32
 800a5aa:	817b      	strh	r3, [r7, #10]
 800a5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	441a      	add	r2, r3
 800a5c6:	897b      	ldrh	r3, [r7, #10]
 800a5c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	8013      	strh	r3, [r2, #0]
 800a5dc:	f000 bcde 	b.w	800af9c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a5e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	7b1b      	ldrb	r3, [r3, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f040 80bb 	bne.w	800a768 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a5f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	699a      	ldr	r2, [r3, #24]
 800a5fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d917      	bls.n	800a63e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	699a      	ldr	r2, [r3, #24]
 800a62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a62e:	1ad2      	subs	r2, r2, r3
 800a630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	619a      	str	r2, [r3, #24]
 800a63c:	e00e      	b.n	800a65c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a63e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a64e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2200      	movs	r2, #0
 800a65a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a65c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a66a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a66e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a678:	b29b      	uxth	r3, r3
 800a67a:	461a      	mov	r2, r3
 800a67c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a680:	4413      	add	r3, r2
 800a682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a68a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	00da      	lsls	r2, r3, #3
 800a694:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a698:	4413      	add	r3, r2
 800a69a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a69e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a6a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6a6:	881b      	ldrh	r3, [r3, #0]
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6b4:	801a      	strh	r2, [r3, #0]
 800a6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ba:	2b3e      	cmp	r3, #62	; 0x3e
 800a6bc:	d924      	bls.n	800a708 <USB_EPStartXfer+0xec2>
 800a6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c2:	095b      	lsrs	r3, r3, #5
 800a6c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6cc:	f003 031f 	and.w	r3, r3, #31
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d104      	bne.n	800a6de <USB_EPStartXfer+0xe98>
 800a6d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a6de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	029b      	lsls	r3, r3, #10
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a702:	801a      	strh	r2, [r3, #0]
 800a704:	f000 bc10 	b.w	800af28 <USB_EPStartXfer+0x16e2>
 800a708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10c      	bne.n	800a72a <USB_EPStartXfer+0xee4>
 800a710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a714:	881b      	ldrh	r3, [r3, #0]
 800a716:	b29b      	uxth	r3, r3
 800a718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a71c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a720:	b29a      	uxth	r2, r3
 800a722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a726:	801a      	strh	r2, [r3, #0]
 800a728:	e3fe      	b.n	800af28 <USB_EPStartXfer+0x16e2>
 800a72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a72e:	085b      	lsrs	r3, r3, #1
 800a730:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a738:	f003 0301 	and.w	r3, r3, #1
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d004      	beq.n	800a74a <USB_EPStartXfer+0xf04>
 800a740:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a744:	3301      	adds	r3, #1
 800a746:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a74a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	b29a      	uxth	r2, r3
 800a752:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a756:	b29b      	uxth	r3, r3
 800a758:	029b      	lsls	r3, r3, #10
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	4313      	orrs	r3, r2
 800a75e:	b29a      	uxth	r2, r3
 800a760:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a764:	801a      	strh	r2, [r3, #0]
 800a766:	e3df      	b.n	800af28 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a76c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	78db      	ldrb	r3, [r3, #3]
 800a774:	2b02      	cmp	r3, #2
 800a776:	f040 8218 	bne.w	800abaa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a77a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a77e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	785b      	ldrb	r3, [r3, #1]
 800a786:	2b00      	cmp	r3, #0
 800a788:	f040 809d 	bne.w	800a8c6 <USB_EPStartXfer+0x1080>
 800a78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a79a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a7b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	00da      	lsls	r2, r3, #3
 800a7c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a7d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a7d6:	881b      	ldrh	r3, [r3, #0]
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a7e4:	801a      	strh	r2, [r3, #0]
 800a7e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	2b3e      	cmp	r3, #62	; 0x3e
 800a7f4:	d92b      	bls.n	800a84e <USB_EPStartXfer+0x1008>
 800a7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	095b      	lsrs	r3, r3, #5
 800a804:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a80c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	f003 031f 	and.w	r3, r3, #31
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d104      	bne.n	800a826 <USB_EPStartXfer+0xfe0>
 800a81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a820:	3b01      	subs	r3, #1
 800a822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a826:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a82a:	881b      	ldrh	r3, [r3, #0]
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a832:	b29b      	uxth	r3, r3
 800a834:	029b      	lsls	r3, r3, #10
 800a836:	b29b      	uxth	r3, r3
 800a838:	4313      	orrs	r3, r2
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a844:	b29a      	uxth	r2, r3
 800a846:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a84a:	801a      	strh	r2, [r3, #0]
 800a84c:	e070      	b.n	800a930 <USB_EPStartXfer+0x10ea>
 800a84e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10c      	bne.n	800a878 <USB_EPStartXfer+0x1032>
 800a85e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a862:	881b      	ldrh	r3, [r3, #0]
 800a864:	b29b      	uxth	r3, r3
 800a866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a86a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a86e:	b29a      	uxth	r2, r3
 800a870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a874:	801a      	strh	r2, [r3, #0]
 800a876:	e05b      	b.n	800a930 <USB_EPStartXfer+0x10ea>
 800a878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a87c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	085b      	lsrs	r3, r3, #1
 800a886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a88a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a88e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	f003 0301 	and.w	r3, r3, #1
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d004      	beq.n	800a8a8 <USB_EPStartXfer+0x1062>
 800a89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a8a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a8ac:	881b      	ldrh	r3, [r3, #0]
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	029b      	lsls	r3, r3, #10
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a8c2:	801a      	strh	r2, [r3, #0]
 800a8c4:	e034      	b.n	800a930 <USB_EPStartXfer+0x10ea>
 800a8c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	785b      	ldrb	r3, [r3, #1]
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d12c      	bne.n	800a930 <USB_EPStartXfer+0x10ea>
 800a8d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	00da      	lsls	r2, r3, #3
 800a90e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a912:	4413      	add	r3, r2
 800a914:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a91c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	b29a      	uxth	r2, r3
 800a92a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a92e:	801a      	strh	r2, [r3, #0]
 800a930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a93e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	785b      	ldrb	r3, [r3, #1]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f040 809d 	bne.w	800aa8a <USB_EPStartXfer+0x1244>
 800a950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a954:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a95e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	461a      	mov	r2, r3
 800a970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a974:	4413      	add	r3, r2
 800a976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a97a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a97e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	00da      	lsls	r2, r3, #3
 800a988:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a98c:	4413      	add	r3, r2
 800a98e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a992:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a996:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a9a8:	801a      	strh	r2, [r3, #0]
 800a9aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	2b3e      	cmp	r3, #62	; 0x3e
 800a9b8:	d92b      	bls.n	800aa12 <USB_EPStartXfer+0x11cc>
 800a9ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	095b      	lsrs	r3, r3, #5
 800a9c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a9cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	691b      	ldr	r3, [r3, #16]
 800a9d8:	f003 031f 	and.w	r3, r3, #31
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d104      	bne.n	800a9ea <USB_EPStartXfer+0x11a4>
 800a9e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a9ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a9ee:	881b      	ldrh	r3, [r3, #0]
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	029b      	lsls	r3, r3, #10
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa08:	b29a      	uxth	r2, r3
 800aa0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa0e:	801a      	strh	r2, [r3, #0]
 800aa10:	e069      	b.n	800aae6 <USB_EPStartXfer+0x12a0>
 800aa12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d10c      	bne.n	800aa3c <USB_EPStartXfer+0x11f6>
 800aa22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa38:	801a      	strh	r2, [r3, #0]
 800aa3a:	e054      	b.n	800aae6 <USB_EPStartXfer+0x12a0>
 800aa3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	085b      	lsrs	r3, r3, #1
 800aa4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aa4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	f003 0301 	and.w	r3, r3, #1
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d004      	beq.n	800aa6c <USB_EPStartXfer+0x1226>
 800aa62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa66:	3301      	adds	r3, #1
 800aa68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aa6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	029b      	lsls	r3, r3, #10
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	b29a      	uxth	r2, r3
 800aa82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa86:	801a      	strh	r2, [r3, #0]
 800aa88:	e02d      	b.n	800aae6 <USB_EPStartXfer+0x12a0>
 800aa8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	785b      	ldrb	r3, [r3, #1]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d125      	bne.n	800aae6 <USB_EPStartXfer+0x12a0>
 800aa9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aab0:	4413      	add	r3, r2
 800aab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	00da      	lsls	r2, r3, #3
 800aac4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aac8:	4413      	add	r3, r2
 800aaca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	b29a      	uxth	r2, r3
 800aae0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aae4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800aae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	69db      	ldr	r3, [r3, #28]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f000 8218 	beq.w	800af28 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800aaf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aafc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	4413      	add	r3, r2
 800ab12:	881b      	ldrh	r3, [r3, #0]
 800ab14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ab18:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ab1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d005      	beq.n	800ab30 <USB_EPStartXfer+0x12ea>
 800ab24:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ab28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10d      	bne.n	800ab4c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ab30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ab34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f040 81f5 	bne.w	800af28 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ab3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ab42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f040 81ee 	bne.w	800af28 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ab4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4413      	add	r3, r2
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab72:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800ab76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	441a      	add	r2, r3
 800ab90:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800ab94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aba0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	8013      	strh	r3, [r2, #0]
 800aba8:	e1be      	b.n	800af28 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800abaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	78db      	ldrb	r3, [r3, #3]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	f040 81b4 	bne.w	800af24 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800abbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	699a      	ldr	r2, [r3, #24]
 800abc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d917      	bls.n	800ac08 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800abd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800abe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	699a      	ldr	r2, [r3, #24]
 800abf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf8:	1ad2      	subs	r2, r2, r3
 800abfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	619a      	str	r2, [r3, #24]
 800ac06:	e00e      	b.n	800ac26 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800ac08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ac18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2200      	movs	r2, #0
 800ac24:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ac26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	785b      	ldrb	r3, [r3, #1]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f040 8085 	bne.w	800ad42 <USB_EPStartXfer+0x14fc>
 800ac38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	461a      	mov	r2, r3
 800ac58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac5c:	4413      	add	r3, r2
 800ac5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	00da      	lsls	r2, r3, #3
 800ac70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac74:	4413      	add	r3, r2
 800ac76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac82:	881b      	ldrh	r3, [r3, #0]
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac90:	801a      	strh	r2, [r3, #0]
 800ac92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac96:	2b3e      	cmp	r3, #62	; 0x3e
 800ac98:	d923      	bls.n	800ace2 <USB_EPStartXfer+0x149c>
 800ac9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac9e:	095b      	lsrs	r3, r3, #5
 800aca0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca8:	f003 031f 	and.w	r3, r3, #31
 800acac:	2b00      	cmp	r3, #0
 800acae:	d104      	bne.n	800acba <USB_EPStartXfer+0x1474>
 800acb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acb4:	3b01      	subs	r3, #1
 800acb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800acba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acbe:	881b      	ldrh	r3, [r3, #0]
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	029b      	lsls	r3, r3, #10
 800acca:	b29b      	uxth	r3, r3
 800accc:	4313      	orrs	r3, r2
 800acce:	b29b      	uxth	r3, r3
 800acd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acd8:	b29a      	uxth	r2, r3
 800acda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acde:	801a      	strh	r2, [r3, #0]
 800ace0:	e060      	b.n	800ada4 <USB_EPStartXfer+0x155e>
 800ace2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d10c      	bne.n	800ad04 <USB_EPStartXfer+0x14be>
 800acea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acee:	881b      	ldrh	r3, [r3, #0]
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad00:	801a      	strh	r2, [r3, #0]
 800ad02:	e04f      	b.n	800ada4 <USB_EPStartXfer+0x155e>
 800ad04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad08:	085b      	lsrs	r3, r3, #1
 800ad0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ad0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad12:	f003 0301 	and.w	r3, r3, #1
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d004      	beq.n	800ad24 <USB_EPStartXfer+0x14de>
 800ad1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad1e:	3301      	adds	r3, #1
 800ad20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ad24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	029b      	lsls	r3, r3, #10
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	4313      	orrs	r3, r2
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad3e:	801a      	strh	r2, [r3, #0]
 800ad40:	e030      	b.n	800ada4 <USB_EPStartXfer+0x155e>
 800ad42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	785b      	ldrb	r3, [r3, #1]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d128      	bne.n	800ada4 <USB_EPStartXfer+0x155e>
 800ad52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ad60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	461a      	mov	r2, r3
 800ad72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad76:	4413      	add	r3, r2
 800ad78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ad7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	00da      	lsls	r2, r3, #3
 800ad8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad8e:	4413      	add	r3, r2
 800ad90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ada2:	801a      	strh	r2, [r3, #0]
 800ada4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800adb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	785b      	ldrb	r3, [r3, #1]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f040 8085 	bne.w	800aece <USB_EPStartXfer+0x1688>
 800adc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800add2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	461a      	mov	r2, r3
 800ade4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ade8:	4413      	add	r3, r2
 800adea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800adee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	00da      	lsls	r2, r3, #3
 800adfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae00:	4413      	add	r3, r2
 800ae02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae1c:	801a      	strh	r2, [r3, #0]
 800ae1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae22:	2b3e      	cmp	r3, #62	; 0x3e
 800ae24:	d923      	bls.n	800ae6e <USB_EPStartXfer+0x1628>
 800ae26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2a:	095b      	lsrs	r3, r3, #5
 800ae2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae34:	f003 031f 	and.w	r3, r3, #31
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d104      	bne.n	800ae46 <USB_EPStartXfer+0x1600>
 800ae3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae40:	3b01      	subs	r3, #1
 800ae42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	029b      	lsls	r3, r3, #10
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae6a:	801a      	strh	r2, [r3, #0]
 800ae6c:	e05c      	b.n	800af28 <USB_EPStartXfer+0x16e2>
 800ae6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10c      	bne.n	800ae90 <USB_EPStartXfer+0x164a>
 800ae76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae7a:	881b      	ldrh	r3, [r3, #0]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae8c:	801a      	strh	r2, [r3, #0]
 800ae8e:	e04b      	b.n	800af28 <USB_EPStartXfer+0x16e2>
 800ae90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae94:	085b      	lsrs	r3, r3, #1
 800ae96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d004      	beq.n	800aeb0 <USB_EPStartXfer+0x166a>
 800aea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aeaa:	3301      	adds	r3, #1
 800aeac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aeb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aeb4:	881b      	ldrh	r3, [r3, #0]
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	029b      	lsls	r3, r3, #10
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	4313      	orrs	r3, r2
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aeca:	801a      	strh	r2, [r3, #0]
 800aecc:	e02c      	b.n	800af28 <USB_EPStartXfer+0x16e2>
 800aece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	785b      	ldrb	r3, [r3, #1]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d124      	bne.n	800af28 <USB_EPStartXfer+0x16e2>
 800aede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	461a      	mov	r2, r3
 800aef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aef4:	4413      	add	r3, r2
 800aef6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aefa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aefe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	00da      	lsls	r2, r3, #3
 800af08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800af0c:	4413      	add	r3, r2
 800af0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800af20:	801a      	strh	r2, [r3, #0]
 800af22:	e001      	b.n	800af28 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	e03a      	b.n	800af9e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800af28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4413      	add	r3, r2
 800af42:	881b      	ldrh	r3, [r3, #0]
 800af44:	b29b      	uxth	r3, r3
 800af46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af4e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800af52:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800af56:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800af5a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800af5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800af62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800af66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800af6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	441a      	add	r2, r3
 800af84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800af88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af98:	b29b      	uxth	r3, r3
 800af9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800af9c:	2300      	movs	r3, #0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	785b      	ldrb	r3, [r3, #1]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d020      	beq.n	800affc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	881b      	ldrh	r3, [r3, #0]
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afd0:	81bb      	strh	r3, [r7, #12]
 800afd2:	89bb      	ldrh	r3, [r7, #12]
 800afd4:	f083 0310 	eor.w	r3, r3, #16
 800afd8:	81bb      	strh	r3, [r7, #12]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	441a      	add	r2, r3
 800afe4:	89bb      	ldrh	r3, [r7, #12]
 800afe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	8013      	strh	r3, [r2, #0]
 800affa:	e01f      	b.n	800b03c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	4413      	add	r3, r2
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	b29b      	uxth	r3, r3
 800b00a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b012:	81fb      	strh	r3, [r7, #14]
 800b014:	89fb      	ldrh	r3, [r7, #14]
 800b016:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b01a:	81fb      	strh	r3, [r7, #14]
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	441a      	add	r2, r3
 800b026:	89fb      	ldrh	r3, [r7, #14]
 800b028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b02c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b038:	b29b      	uxth	r3, r3
 800b03a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3714      	adds	r7, #20
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b04a:	b480      	push	{r7}
 800b04c:	b087      	sub	sp, #28
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	7b1b      	ldrb	r3, [r3, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f040 809d 	bne.w	800b198 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	785b      	ldrb	r3, [r3, #1]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d04c      	beq.n	800b100 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	4413      	add	r3, r2
 800b070:	881b      	ldrh	r3, [r3, #0]
 800b072:	823b      	strh	r3, [r7, #16]
 800b074:	8a3b      	ldrh	r3, [r7, #16]
 800b076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d01b      	beq.n	800b0b6 <USB_EPClearStall+0x6c>
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4413      	add	r3, r2
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b094:	81fb      	strh	r3, [r7, #14]
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	441a      	add	r2, r3
 800b0a0:	89fb      	ldrh	r3, [r7, #14]
 800b0a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	78db      	ldrb	r3, [r3, #3]
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d06c      	beq.n	800b198 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	4413      	add	r3, r2
 800b0c8:	881b      	ldrh	r3, [r3, #0]
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0d4:	81bb      	strh	r3, [r7, #12]
 800b0d6:	89bb      	ldrh	r3, [r7, #12]
 800b0d8:	f083 0320 	eor.w	r3, r3, #32
 800b0dc:	81bb      	strh	r3, [r7, #12]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	441a      	add	r2, r3
 800b0e8:	89bb      	ldrh	r3, [r7, #12]
 800b0ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	8013      	strh	r3, [r2, #0]
 800b0fe:	e04b      	b.n	800b198 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	4413      	add	r3, r2
 800b10a:	881b      	ldrh	r3, [r3, #0]
 800b10c:	82fb      	strh	r3, [r7, #22]
 800b10e:	8afb      	ldrh	r3, [r7, #22]
 800b110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d01b      	beq.n	800b150 <USB_EPClearStall+0x106>
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	b29b      	uxth	r3, r3
 800b126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b12a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b12e:	82bb      	strh	r3, [r7, #20]
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	441a      	add	r2, r3
 800b13a:	8abb      	ldrh	r3, [r7, #20]
 800b13c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	4413      	add	r3, r2
 800b15a:	881b      	ldrh	r3, [r3, #0]
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b166:	827b      	strh	r3, [r7, #18]
 800b168:	8a7b      	ldrh	r3, [r7, #18]
 800b16a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b16e:	827b      	strh	r3, [r7, #18]
 800b170:	8a7b      	ldrh	r3, [r7, #18]
 800b172:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b176:	827b      	strh	r3, [r7, #18]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	441a      	add	r2, r3
 800b182:	8a7b      	ldrh	r3, [r7, #18]
 800b184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b18c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b194:	b29b      	uxth	r3, r3
 800b196:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	371c      	adds	r7, #28
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b1a6:	b480      	push	{r7}
 800b1a8:	b083      	sub	sp, #12
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b1b2:	78fb      	ldrb	r3, [r7, #3]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d103      	bne.n	800b1c0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2280      	movs	r2, #128	; 0x80
 800b1bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	370c      	adds	r7, #12
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr

0800b1ce <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b083      	sub	sp, #12
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b20e:	68fb      	ldr	r3, [r7, #12]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b08b      	sub	sp, #44	; 0x2c
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	4611      	mov	r1, r2
 800b228:	461a      	mov	r2, r3
 800b22a:	460b      	mov	r3, r1
 800b22c:	80fb      	strh	r3, [r7, #6]
 800b22e:	4613      	mov	r3, r2
 800b230:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b232:	88bb      	ldrh	r3, [r7, #4]
 800b234:	3301      	adds	r3, #1
 800b236:	085b      	lsrs	r3, r3, #1
 800b238:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b242:	88fa      	ldrh	r2, [r7, #6]
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	4413      	add	r3, r2
 800b248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b24c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	627b      	str	r3, [r7, #36]	; 0x24
 800b252:	e01b      	b.n	800b28c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	3301      	adds	r3, #1
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	021b      	lsls	r3, r3, #8
 800b262:	b21a      	sxth	r2, r3
 800b264:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b268:	4313      	orrs	r3, r2
 800b26a:	b21b      	sxth	r3, r3
 800b26c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b26e:	6a3b      	ldr	r3, [r7, #32]
 800b270:	8a7a      	ldrh	r2, [r7, #18]
 800b272:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b274:	6a3b      	ldr	r3, [r7, #32]
 800b276:	3302      	adds	r3, #2
 800b278:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	3301      	adds	r3, #1
 800b27e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	3301      	adds	r3, #1
 800b284:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b288:	3b01      	subs	r3, #1
 800b28a:	627b      	str	r3, [r7, #36]	; 0x24
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1e0      	bne.n	800b254 <USB_WritePMA+0x38>
  }
}
 800b292:	bf00      	nop
 800b294:	bf00      	nop
 800b296:	372c      	adds	r7, #44	; 0x2c
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b08b      	sub	sp, #44	; 0x2c
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	4611      	mov	r1, r2
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	80fb      	strh	r3, [r7, #6]
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b2b6:	88bb      	ldrh	r3, [r7, #4]
 800b2b8:	085b      	lsrs	r3, r3, #1
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b2c6:	88fa      	ldrh	r2, [r7, #6]
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2d0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b2d6:	e018      	b.n	800b30a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b2d8:	6a3b      	ldr	r3, [r7, #32]
 800b2da:	881b      	ldrh	r3, [r3, #0]
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b2e0:	6a3b      	ldr	r3, [r7, #32]
 800b2e2:	3302      	adds	r3, #2
 800b2e4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	b2da      	uxtb	r2, r3
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	0a1b      	lsrs	r3, r3, #8
 800b2f8:	b2da      	uxtb	r2, r3
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	3301      	adds	r3, #1
 800b302:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	3b01      	subs	r3, #1
 800b308:	627b      	str	r3, [r7, #36]	; 0x24
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1e3      	bne.n	800b2d8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b310:	88bb      	ldrh	r3, [r7, #4]
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	b29b      	uxth	r3, r3
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d007      	beq.n	800b32c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b31c:	6a3b      	ldr	r3, [r7, #32]
 800b31e:	881b      	ldrh	r3, [r3, #0]
 800b320:	b29b      	uxth	r3, r3
 800b322:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	b2da      	uxtb	r2, r3
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	701a      	strb	r2, [r3, #0]
  }
}
 800b32c:	bf00      	nop
 800b32e:	372c      	adds	r7, #44	; 0x2c
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	460b      	mov	r3, r1
 800b342:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b344:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b348:	f002 f9e6 	bl	800d718 <USBD_static_malloc>
 800b34c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d105      	bne.n	800b360 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b35c:	2302      	movs	r3, #2
 800b35e:	e066      	b.n	800b42e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	7c1b      	ldrb	r3, [r3, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d119      	bne.n	800b3a4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b370:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b374:	2202      	movs	r2, #2
 800b376:	2181      	movs	r1, #129	; 0x81
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f002 f874 	bl	800d466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2201      	movs	r2, #1
 800b382:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b384:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b388:	2202      	movs	r2, #2
 800b38a:	2101      	movs	r1, #1
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f002 f86a 	bl	800d466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2201      	movs	r2, #1
 800b396:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2210      	movs	r2, #16
 800b39e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b3a2:	e016      	b.n	800b3d2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b3a4:	2340      	movs	r3, #64	; 0x40
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	2181      	movs	r1, #129	; 0x81
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f002 f85b 	bl	800d466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b3b6:	2340      	movs	r3, #64	; 0x40
 800b3b8:	2202      	movs	r2, #2
 800b3ba:	2101      	movs	r1, #1
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f002 f852 	bl	800d466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2210      	movs	r2, #16
 800b3ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b3d2:	2308      	movs	r3, #8
 800b3d4:	2203      	movs	r2, #3
 800b3d6:	2182      	movs	r1, #130	; 0x82
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f002 f844 	bl	800d466 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	7c1b      	ldrb	r3, [r3, #16]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d109      	bne.n	800b41c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b40e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b412:	2101      	movs	r1, #1
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f002 f915 	bl	800d644 <USBD_LL_PrepareReceive>
 800b41a:	e007      	b.n	800b42c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b422:	2340      	movs	r3, #64	; 0x40
 800b424:	2101      	movs	r1, #1
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f002 f90c 	bl	800d644 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b082      	sub	sp, #8
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
 800b43e:	460b      	mov	r3, r1
 800b440:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b442:	2181      	movs	r1, #129	; 0x81
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f002 f834 	bl	800d4b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b450:	2101      	movs	r1, #1
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f002 f82d 	bl	800d4b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b460:	2182      	movs	r1, #130	; 0x82
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f002 f825 	bl	800d4b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00e      	beq.n	800b4a0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b492:	4618      	mov	r0, r3
 800b494:	f002 f94e 	bl	800d734 <USBD_static_free>
    pdev->pClassData = NULL;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3708      	adds	r7, #8
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
	...

0800b4ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4bc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d101      	bne.n	800b4d4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	e0af      	b.n	800b634 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d03f      	beq.n	800b560 <USBD_CDC_Setup+0xb4>
 800b4e0:	2b20      	cmp	r3, #32
 800b4e2:	f040 809f 	bne.w	800b624 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	88db      	ldrh	r3, [r3, #6]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d02e      	beq.n	800b54c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	b25b      	sxtb	r3, r3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	da16      	bge.n	800b526 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	683a      	ldr	r2, [r7, #0]
 800b502:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b504:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b506:	683a      	ldr	r2, [r7, #0]
 800b508:	88d2      	ldrh	r2, [r2, #6]
 800b50a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	88db      	ldrh	r3, [r3, #6]
 800b510:	2b07      	cmp	r3, #7
 800b512:	bf28      	it	cs
 800b514:	2307      	movcs	r3, #7
 800b516:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	89fa      	ldrh	r2, [r7, #14]
 800b51c:	4619      	mov	r1, r3
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f001 fa9f 	bl	800ca62 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b524:	e085      	b.n	800b632 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	785a      	ldrb	r2, [r3, #1]
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	88db      	ldrh	r3, [r3, #6]
 800b534:	b2da      	uxtb	r2, r3
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b53c:	6939      	ldr	r1, [r7, #16]
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	88db      	ldrh	r3, [r3, #6]
 800b542:	461a      	mov	r2, r3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f001 fab8 	bl	800caba <USBD_CtlPrepareRx>
      break;
 800b54a:	e072      	b.n	800b632 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	7850      	ldrb	r0, [r2, #1]
 800b558:	2200      	movs	r2, #0
 800b55a:	6839      	ldr	r1, [r7, #0]
 800b55c:	4798      	blx	r3
      break;
 800b55e:	e068      	b.n	800b632 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	785b      	ldrb	r3, [r3, #1]
 800b564:	2b0b      	cmp	r3, #11
 800b566:	d852      	bhi.n	800b60e <USBD_CDC_Setup+0x162>
 800b568:	a201      	add	r2, pc, #4	; (adr r2, 800b570 <USBD_CDC_Setup+0xc4>)
 800b56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56e:	bf00      	nop
 800b570:	0800b5a1 	.word	0x0800b5a1
 800b574:	0800b61d 	.word	0x0800b61d
 800b578:	0800b60f 	.word	0x0800b60f
 800b57c:	0800b60f 	.word	0x0800b60f
 800b580:	0800b60f 	.word	0x0800b60f
 800b584:	0800b60f 	.word	0x0800b60f
 800b588:	0800b60f 	.word	0x0800b60f
 800b58c:	0800b60f 	.word	0x0800b60f
 800b590:	0800b60f 	.word	0x0800b60f
 800b594:	0800b60f 	.word	0x0800b60f
 800b598:	0800b5cb 	.word	0x0800b5cb
 800b59c:	0800b5f5 	.word	0x0800b5f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	2b03      	cmp	r3, #3
 800b5aa:	d107      	bne.n	800b5bc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b5ac:	f107 030a 	add.w	r3, r7, #10
 800b5b0:	2202      	movs	r2, #2
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f001 fa54 	bl	800ca62 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5ba:	e032      	b.n	800b622 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b5bc:	6839      	ldr	r1, [r7, #0]
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f001 f9de 	bl	800c980 <USBD_CtlError>
            ret = USBD_FAIL;
 800b5c4:	2303      	movs	r3, #3
 800b5c6:	75fb      	strb	r3, [r7, #23]
          break;
 800b5c8:	e02b      	b.n	800b622 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b03      	cmp	r3, #3
 800b5d4:	d107      	bne.n	800b5e6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b5d6:	f107 030d 	add.w	r3, r7, #13
 800b5da:	2201      	movs	r2, #1
 800b5dc:	4619      	mov	r1, r3
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f001 fa3f 	bl	800ca62 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5e4:	e01d      	b.n	800b622 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b5e6:	6839      	ldr	r1, [r7, #0]
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f001 f9c9 	bl	800c980 <USBD_CtlError>
            ret = USBD_FAIL;
 800b5ee:	2303      	movs	r3, #3
 800b5f0:	75fb      	strb	r3, [r7, #23]
          break;
 800b5f2:	e016      	b.n	800b622 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b03      	cmp	r3, #3
 800b5fe:	d00f      	beq.n	800b620 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f001 f9bc 	bl	800c980 <USBD_CtlError>
            ret = USBD_FAIL;
 800b608:	2303      	movs	r3, #3
 800b60a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b60c:	e008      	b.n	800b620 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b60e:	6839      	ldr	r1, [r7, #0]
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f001 f9b5 	bl	800c980 <USBD_CtlError>
          ret = USBD_FAIL;
 800b616:	2303      	movs	r3, #3
 800b618:	75fb      	strb	r3, [r7, #23]
          break;
 800b61a:	e002      	b.n	800b622 <USBD_CDC_Setup+0x176>
          break;
 800b61c:	bf00      	nop
 800b61e:	e008      	b.n	800b632 <USBD_CDC_Setup+0x186>
          break;
 800b620:	bf00      	nop
      }
      break;
 800b622:	e006      	b.n	800b632 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f001 f9aa 	bl	800c980 <USBD_CtlError>
      ret = USBD_FAIL;
 800b62c:	2303      	movs	r3, #3
 800b62e:	75fb      	strb	r3, [r7, #23]
      break;
 800b630:	bf00      	nop
  }

  return (uint8_t)ret;
 800b632:	7dfb      	ldrb	r3, [r7, #23]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3718      	adds	r7, #24
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	460b      	mov	r3, r1
 800b646:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b64e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b656:	2b00      	cmp	r3, #0
 800b658:	d101      	bne.n	800b65e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b65a:	2303      	movs	r3, #3
 800b65c:	e04f      	b.n	800b6fe <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b664:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b666:	78fa      	ldrb	r2, [r7, #3]
 800b668:	6879      	ldr	r1, [r7, #4]
 800b66a:	4613      	mov	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	440b      	add	r3, r1
 800b674:	3318      	adds	r3, #24
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d029      	beq.n	800b6d0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b67c:	78fa      	ldrb	r2, [r7, #3]
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	4613      	mov	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4413      	add	r3, r2
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	440b      	add	r3, r1
 800b68a:	3318      	adds	r3, #24
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	78f9      	ldrb	r1, [r7, #3]
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	460b      	mov	r3, r1
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	440b      	add	r3, r1
 800b698:	00db      	lsls	r3, r3, #3
 800b69a:	4403      	add	r3, r0
 800b69c:	3320      	adds	r3, #32
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b6a4:	fb01 f303 	mul.w	r3, r1, r3
 800b6a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d110      	bne.n	800b6d0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b6ae:	78fa      	ldrb	r2, [r7, #3]
 800b6b0:	6879      	ldr	r1, [r7, #4]
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	4413      	add	r3, r2
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	440b      	add	r3, r1
 800b6bc:	3318      	adds	r3, #24
 800b6be:	2200      	movs	r2, #0
 800b6c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b6c2:	78f9      	ldrb	r1, [r7, #3]
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f001 ff9a 	bl	800d602 <USBD_LL_Transmit>
 800b6ce:	e015      	b.n	800b6fc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00b      	beq.n	800b6fc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b6f2:	68ba      	ldr	r2, [r7, #8]
 800b6f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b6f8:	78fa      	ldrb	r2, [r7, #3]
 800b6fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b706:	b580      	push	{r7, lr}
 800b708:	b084      	sub	sp, #16
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	460b      	mov	r3, r1
 800b710:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b718:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b720:	2b00      	cmp	r3, #0
 800b722:	d101      	bne.n	800b728 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b724:	2303      	movs	r3, #3
 800b726:	e015      	b.n	800b754 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b728:	78fb      	ldrb	r3, [r7, #3]
 800b72a:	4619      	mov	r1, r3
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f001 ffaa 	bl	800d686 <USBD_LL_GetRxDataSize>
 800b732:	4602      	mov	r2, r0
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b74e:	4611      	mov	r1, r2
 800b750:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b76a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d101      	bne.n	800b776 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b772:	2303      	movs	r3, #3
 800b774:	e01b      	b.n	800b7ae <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d015      	beq.n	800b7ac <USBD_CDC_EP0_RxReady+0x50>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b786:	2bff      	cmp	r3, #255	; 0xff
 800b788:	d010      	beq.n	800b7ac <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b798:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b7a0:	b292      	uxth	r2, r2
 800b7a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	22ff      	movs	r2, #255	; 0xff
 800b7a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
	...

0800b7b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2243      	movs	r2, #67	; 0x43
 800b7c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b7c6:	4b03      	ldr	r3, [pc, #12]	; (800b7d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr
 800b7d4:	20000098 	.word	0x20000098

0800b7d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2243      	movs	r2, #67	; 0x43
 800b7e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b7e6:	4b03      	ldr	r3, [pc, #12]	; (800b7f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	20000054 	.word	0x20000054

0800b7f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2243      	movs	r2, #67	; 0x43
 800b804:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b806:	4b03      	ldr	r3, [pc, #12]	; (800b814 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b808:	4618      	mov	r0, r3
 800b80a:	370c      	adds	r7, #12
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr
 800b814:	200000dc 	.word	0x200000dc

0800b818 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	220a      	movs	r2, #10
 800b824:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b826:	4b03      	ldr	r3, [pc, #12]	; (800b834 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b828:	4618      	mov	r0, r3
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr
 800b834:	20000010 	.word	0x20000010

0800b838 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d101      	bne.n	800b84c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b848:	2303      	movs	r3, #3
 800b84a:	e004      	b.n	800b856 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	370c      	adds	r7, #12
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b862:	b480      	push	{r7}
 800b864:	b087      	sub	sp, #28
 800b866:	af00      	add	r7, sp, #0
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	60b9      	str	r1, [r7, #8]
 800b86c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b874:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d101      	bne.n	800b880 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b87c:	2303      	movs	r3, #3
 800b87e:	e008      	b.n	800b892 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	371c      	adds	r7, #28
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr

0800b89e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b89e:	b480      	push	{r7}
 800b8a0:	b085      	sub	sp, #20
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d101      	bne.n	800b8ba <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	e004      	b.n	800b8c4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	683a      	ldr	r2, [r7, #0]
 800b8be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3714      	adds	r7, #20
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d101      	bne.n	800b8ee <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	e016      	b.n	800b91c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	7c1b      	ldrb	r3, [r3, #16]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d109      	bne.n	800b90a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b8fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b900:	2101      	movs	r1, #1
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f001 fe9e 	bl	800d644 <USBD_LL_PrepareReceive>
 800b908:	e007      	b.n	800b91a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b910:	2340      	movs	r3, #64	; 0x40
 800b912:	2101      	movs	r1, #1
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f001 fe95 	bl	800d644 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3710      	adds	r7, #16
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	4613      	mov	r3, r2
 800b930:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d101      	bne.n	800b93c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b938:	2303      	movs	r3, #3
 800b93a:	e01f      	b.n	800b97c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d003      	beq.n	800b962 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2201      	movs	r2, #1
 800b966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	79fa      	ldrb	r2, [r7, #7]
 800b96e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f001 fcfd 	bl	800d370 <USBD_LL_Init>
 800b976:	4603      	mov	r3, r0
 800b978:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b97a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3718      	adds	r7, #24
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b98e:	2300      	movs	r3, #0
 800b990:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d101      	bne.n	800b99c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b998:	2303      	movs	r3, #3
 800b99a:	e016      	b.n	800b9ca <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	683a      	ldr	r2, [r7, #0]
 800b9a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00b      	beq.n	800b9c8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b8:	f107 020e 	add.w	r2, r7, #14
 800b9bc:	4610      	mov	r0, r2
 800b9be:	4798      	blx	r3
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b9c8:	2300      	movs	r3, #0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b082      	sub	sp, #8
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f001 fd28 	bl	800d430 <USBD_LL_Start>
 800b9e0:	4603      	mov	r3, r0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b9ea:	b480      	push	{r7}
 800b9ec:	b083      	sub	sp, #12
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9f2:	2300      	movs	r3, #0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d009      	beq.n	800ba2e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	78fa      	ldrb	r2, [r7, #3]
 800ba24:	4611      	mov	r1, r2
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	4798      	blx	r3
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ba2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	460b      	mov	r3, r1
 800ba42:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d007      	beq.n	800ba5e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	78fa      	ldrb	r2, [r7, #3]
 800ba58:	4611      	mov	r1, r2
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	4798      	blx	r3
  }

  return USBD_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3708      	adds	r7, #8
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba78:	6839      	ldr	r1, [r7, #0]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f000 ff46 	bl	800c90c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ba8e:	461a      	mov	r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ba9c:	f003 031f 	and.w	r3, r3, #31
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	d01a      	beq.n	800bada <USBD_LL_SetupStage+0x72>
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	d822      	bhi.n	800baee <USBD_LL_SetupStage+0x86>
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d002      	beq.n	800bab2 <USBD_LL_SetupStage+0x4a>
 800baac:	2b01      	cmp	r3, #1
 800baae:	d00a      	beq.n	800bac6 <USBD_LL_SetupStage+0x5e>
 800bab0:	e01d      	b.n	800baee <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bab8:	4619      	mov	r1, r3
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 f9ee 	bl	800be9c <USBD_StdDevReq>
 800bac0:	4603      	mov	r3, r0
 800bac2:	73fb      	strb	r3, [r7, #15]
      break;
 800bac4:	e020      	b.n	800bb08 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bacc:	4619      	mov	r1, r3
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 fa52 	bl	800bf78 <USBD_StdItfReq>
 800bad4:	4603      	mov	r3, r0
 800bad6:	73fb      	strb	r3, [r7, #15]
      break;
 800bad8:	e016      	b.n	800bb08 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bae0:	4619      	mov	r1, r3
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fa91 	bl	800c00a <USBD_StdEPReq>
 800bae8:	4603      	mov	r3, r0
 800baea:	73fb      	strb	r3, [r7, #15]
      break;
 800baec:	e00c      	b.n	800bb08 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800baf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	4619      	mov	r1, r3
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f001 fcf7 	bl	800d4f0 <USBD_LL_StallEP>
 800bb02:	4603      	mov	r3, r0
 800bb04:	73fb      	strb	r3, [r7, #15]
      break;
 800bb06:	bf00      	nop
  }

  return ret;
 800bb08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b086      	sub	sp, #24
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	60f8      	str	r0, [r7, #12]
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	607a      	str	r2, [r7, #4]
 800bb1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bb20:	7afb      	ldrb	r3, [r7, #11]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d138      	bne.n	800bb98 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bb2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb34:	2b03      	cmp	r3, #3
 800bb36:	d14a      	bne.n	800bbce <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	689a      	ldr	r2, [r3, #8]
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d913      	bls.n	800bb6c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	689a      	ldr	r2, [r3, #8]
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	1ad2      	subs	r2, r2, r3
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	68da      	ldr	r2, [r3, #12]
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	bf28      	it	cs
 800bb5e:	4613      	movcs	r3, r2
 800bb60:	461a      	mov	r2, r3
 800bb62:	6879      	ldr	r1, [r7, #4]
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f000 ffc5 	bl	800caf4 <USBD_CtlContinueRx>
 800bb6a:	e030      	b.n	800bbce <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	2b03      	cmp	r3, #3
 800bb76:	d10b      	bne.n	800bb90 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb7e:	691b      	ldr	r3, [r3, #16]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d005      	beq.n	800bb90 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb8a:	691b      	ldr	r3, [r3, #16]
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f000 ffc0 	bl	800cb16 <USBD_CtlSendStatus>
 800bb96:	e01a      	b.n	800bbce <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	2b03      	cmp	r3, #3
 800bba2:	d114      	bne.n	800bbce <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbaa:	699b      	ldr	r3, [r3, #24]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00e      	beq.n	800bbce <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbb6:	699b      	ldr	r3, [r3, #24]
 800bbb8:	7afa      	ldrb	r2, [r7, #11]
 800bbba:	4611      	mov	r1, r2
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	4798      	blx	r3
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bbc4:	7dfb      	ldrb	r3, [r7, #23]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bbca:	7dfb      	ldrb	r3, [r7, #23]
 800bbcc:	e000      	b.n	800bbd0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3718      	adds	r7, #24
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	607a      	str	r2, [r7, #4]
 800bbe4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bbe6:	7afb      	ldrb	r3, [r7, #11]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d16b      	bne.n	800bcc4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	3314      	adds	r3, #20
 800bbf0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d156      	bne.n	800bcaa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	689a      	ldr	r2, [r3, #8]
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d914      	bls.n	800bc32 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	689a      	ldr	r2, [r3, #8]
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	1ad2      	subs	r2, r2, r3
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	6879      	ldr	r1, [r7, #4]
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f000 ff3a 	bl	800ca98 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc24:	2300      	movs	r3, #0
 800bc26:	2200      	movs	r2, #0
 800bc28:	2100      	movs	r1, #0
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f001 fd0a 	bl	800d644 <USBD_LL_PrepareReceive>
 800bc30:	e03b      	b.n	800bcaa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	68da      	ldr	r2, [r3, #12]
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d11c      	bne.n	800bc78 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	685a      	ldr	r2, [r3, #4]
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d316      	bcc.n	800bc78 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	685a      	ldr	r2, [r3, #4]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d20f      	bcs.n	800bc78 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc58:	2200      	movs	r2, #0
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f000 ff1b 	bl	800ca98 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	2100      	movs	r1, #0
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f001 fce7 	bl	800d644 <USBD_LL_PrepareReceive>
 800bc76:	e018      	b.n	800bcaa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	2b03      	cmp	r3, #3
 800bc82:	d10b      	bne.n	800bc9c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d005      	beq.n	800bc9c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc9c:	2180      	movs	r1, #128	; 0x80
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f001 fc26 	bl	800d4f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f000 ff49 	bl	800cb3c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d122      	bne.n	800bcfa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f7ff fe98 	bl	800b9ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bcc2:	e01a      	b.n	800bcfa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	2b03      	cmp	r3, #3
 800bcce:	d114      	bne.n	800bcfa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcd6:	695b      	ldr	r3, [r3, #20]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00e      	beq.n	800bcfa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bce2:	695b      	ldr	r3, [r3, #20]
 800bce4:	7afa      	ldrb	r2, [r7, #11]
 800bce6:	4611      	mov	r1, r2
 800bce8:	68f8      	ldr	r0, [r7, #12]
 800bcea:	4798      	blx	r3
 800bcec:	4603      	mov	r3, r0
 800bcee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d001      	beq.n	800bcfa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bcf6:	7dfb      	ldrb	r3, [r7, #23]
 800bcf8:	e000      	b.n	800bcfc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bcfa:	2300      	movs	r3, #0
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3718      	adds	r7, #24
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d101      	bne.n	800bd38 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bd34:	2303      	movs	r3, #3
 800bd36:	e02f      	b.n	800bd98 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d00f      	beq.n	800bd62 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d009      	beq.n	800bd62 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	6852      	ldr	r2, [r2, #4]
 800bd5a:	b2d2      	uxtb	r2, r2
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd62:	2340      	movs	r3, #64	; 0x40
 800bd64:	2200      	movs	r2, #0
 800bd66:	2100      	movs	r1, #0
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f001 fb7c 	bl	800d466 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2201      	movs	r2, #1
 800bd72:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2240      	movs	r2, #64	; 0x40
 800bd7a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd7e:	2340      	movs	r3, #64	; 0x40
 800bd80:	2200      	movs	r2, #0
 800bd82:	2180      	movs	r1, #128	; 0x80
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f001 fb6e 	bl	800d466 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2240      	movs	r2, #64	; 0x40
 800bd94:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	78fa      	ldrb	r2, [r7, #3]
 800bdb0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bdb2:	2300      	movs	r3, #0
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	370c      	adds	r7, #12
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdce:	b2da      	uxtb	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2204      	movs	r2, #4
 800bdda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	2b04      	cmp	r3, #4
 800bdfe:	d106      	bne.n	800be0e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800be06:	b2da      	uxtb	r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	370c      	adds	r7, #12
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d101      	bne.n	800be32 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800be2e:	2303      	movs	r3, #3
 800be30:	e012      	b.n	800be58 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	2b03      	cmp	r3, #3
 800be3c:	d10b      	bne.n	800be56 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be44:	69db      	ldr	r3, [r3, #28]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d005      	beq.n	800be56 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be50:	69db      	ldr	r3, [r3, #28]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be60:	b480      	push	{r7}
 800be62:	b087      	sub	sp, #28
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	3301      	adds	r3, #1
 800be76:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be7e:	8a3b      	ldrh	r3, [r7, #16]
 800be80:	021b      	lsls	r3, r3, #8
 800be82:	b21a      	sxth	r2, r3
 800be84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be88:	4313      	orrs	r3, r2
 800be8a:	b21b      	sxth	r3, r3
 800be8c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be8e:	89fb      	ldrh	r3, [r7, #14]
}
 800be90:	4618      	mov	r0, r3
 800be92:	371c      	adds	r7, #28
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bea6:	2300      	movs	r3, #0
 800bea8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800beb2:	2b40      	cmp	r3, #64	; 0x40
 800beb4:	d005      	beq.n	800bec2 <USBD_StdDevReq+0x26>
 800beb6:	2b40      	cmp	r3, #64	; 0x40
 800beb8:	d853      	bhi.n	800bf62 <USBD_StdDevReq+0xc6>
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00b      	beq.n	800bed6 <USBD_StdDevReq+0x3a>
 800bebe:	2b20      	cmp	r3, #32
 800bec0:	d14f      	bne.n	800bf62 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	4798      	blx	r3
 800bed0:	4603      	mov	r3, r0
 800bed2:	73fb      	strb	r3, [r7, #15]
      break;
 800bed4:	e04a      	b.n	800bf6c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	785b      	ldrb	r3, [r3, #1]
 800beda:	2b09      	cmp	r3, #9
 800bedc:	d83b      	bhi.n	800bf56 <USBD_StdDevReq+0xba>
 800bede:	a201      	add	r2, pc, #4	; (adr r2, 800bee4 <USBD_StdDevReq+0x48>)
 800bee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee4:	0800bf39 	.word	0x0800bf39
 800bee8:	0800bf4d 	.word	0x0800bf4d
 800beec:	0800bf57 	.word	0x0800bf57
 800bef0:	0800bf43 	.word	0x0800bf43
 800bef4:	0800bf57 	.word	0x0800bf57
 800bef8:	0800bf17 	.word	0x0800bf17
 800befc:	0800bf0d 	.word	0x0800bf0d
 800bf00:	0800bf57 	.word	0x0800bf57
 800bf04:	0800bf2f 	.word	0x0800bf2f
 800bf08:	0800bf21 	.word	0x0800bf21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f9de 	bl	800c2d0 <USBD_GetDescriptor>
          break;
 800bf14:	e024      	b.n	800bf60 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bf16:	6839      	ldr	r1, [r7, #0]
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 fb6d 	bl	800c5f8 <USBD_SetAddress>
          break;
 800bf1e:	e01f      	b.n	800bf60 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bf20:	6839      	ldr	r1, [r7, #0]
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 fbac 	bl	800c680 <USBD_SetConfig>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	73fb      	strb	r3, [r7, #15]
          break;
 800bf2c:	e018      	b.n	800bf60 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 fc4b 	bl	800c7cc <USBD_GetConfig>
          break;
 800bf36:	e013      	b.n	800bf60 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fc7c 	bl	800c838 <USBD_GetStatus>
          break;
 800bf40:	e00e      	b.n	800bf60 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf42:	6839      	ldr	r1, [r7, #0]
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fcab 	bl	800c8a0 <USBD_SetFeature>
          break;
 800bf4a:	e009      	b.n	800bf60 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fcba 	bl	800c8c8 <USBD_ClrFeature>
          break;
 800bf54:	e004      	b.n	800bf60 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bf56:	6839      	ldr	r1, [r7, #0]
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fd11 	bl	800c980 <USBD_CtlError>
          break;
 800bf5e:	bf00      	nop
      }
      break;
 800bf60:	e004      	b.n	800bf6c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bf62:	6839      	ldr	r1, [r7, #0]
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 fd0b 	bl	800c980 <USBD_CtlError>
      break;
 800bf6a:	bf00      	nop
  }

  return ret;
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop

0800bf78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf8e:	2b40      	cmp	r3, #64	; 0x40
 800bf90:	d005      	beq.n	800bf9e <USBD_StdItfReq+0x26>
 800bf92:	2b40      	cmp	r3, #64	; 0x40
 800bf94:	d82f      	bhi.n	800bff6 <USBD_StdItfReq+0x7e>
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d001      	beq.n	800bf9e <USBD_StdItfReq+0x26>
 800bf9a:	2b20      	cmp	r3, #32
 800bf9c:	d12b      	bne.n	800bff6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	2b02      	cmp	r3, #2
 800bfaa:	d81d      	bhi.n	800bfe8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	889b      	ldrh	r3, [r3, #4]
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d813      	bhi.n	800bfde <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	4798      	blx	r3
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	88db      	ldrh	r3, [r3, #6]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d110      	bne.n	800bff2 <USBD_StdItfReq+0x7a>
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10d      	bne.n	800bff2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fd9d 	bl	800cb16 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bfdc:	e009      	b.n	800bff2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bfde:	6839      	ldr	r1, [r7, #0]
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 fccd 	bl	800c980 <USBD_CtlError>
          break;
 800bfe6:	e004      	b.n	800bff2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bfe8:	6839      	ldr	r1, [r7, #0]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 fcc8 	bl	800c980 <USBD_CtlError>
          break;
 800bff0:	e000      	b.n	800bff4 <USBD_StdItfReq+0x7c>
          break;
 800bff2:	bf00      	nop
      }
      break;
 800bff4:	e004      	b.n	800c000 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bff6:	6839      	ldr	r1, [r7, #0]
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 fcc1 	bl	800c980 <USBD_CtlError>
      break;
 800bffe:	bf00      	nop
  }

  return ret;
 800c000:	7bfb      	ldrb	r3, [r7, #15]
}
 800c002:	4618      	mov	r0, r3
 800c004:	3710      	adds	r7, #16
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b084      	sub	sp, #16
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c014:	2300      	movs	r3, #0
 800c016:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	889b      	ldrh	r3, [r3, #4]
 800c01c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c026:	2b40      	cmp	r3, #64	; 0x40
 800c028:	d007      	beq.n	800c03a <USBD_StdEPReq+0x30>
 800c02a:	2b40      	cmp	r3, #64	; 0x40
 800c02c:	f200 8145 	bhi.w	800c2ba <USBD_StdEPReq+0x2b0>
 800c030:	2b00      	cmp	r3, #0
 800c032:	d00c      	beq.n	800c04e <USBD_StdEPReq+0x44>
 800c034:	2b20      	cmp	r3, #32
 800c036:	f040 8140 	bne.w	800c2ba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	6839      	ldr	r1, [r7, #0]
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	4798      	blx	r3
 800c048:	4603      	mov	r3, r0
 800c04a:	73fb      	strb	r3, [r7, #15]
      break;
 800c04c:	e13a      	b.n	800c2c4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	785b      	ldrb	r3, [r3, #1]
 800c052:	2b03      	cmp	r3, #3
 800c054:	d007      	beq.n	800c066 <USBD_StdEPReq+0x5c>
 800c056:	2b03      	cmp	r3, #3
 800c058:	f300 8129 	bgt.w	800c2ae <USBD_StdEPReq+0x2a4>
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d07f      	beq.n	800c160 <USBD_StdEPReq+0x156>
 800c060:	2b01      	cmp	r3, #1
 800c062:	d03c      	beq.n	800c0de <USBD_StdEPReq+0xd4>
 800c064:	e123      	b.n	800c2ae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	2b02      	cmp	r3, #2
 800c070:	d002      	beq.n	800c078 <USBD_StdEPReq+0x6e>
 800c072:	2b03      	cmp	r3, #3
 800c074:	d016      	beq.n	800c0a4 <USBD_StdEPReq+0x9a>
 800c076:	e02c      	b.n	800c0d2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c078:	7bbb      	ldrb	r3, [r7, #14]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00d      	beq.n	800c09a <USBD_StdEPReq+0x90>
 800c07e:	7bbb      	ldrb	r3, [r7, #14]
 800c080:	2b80      	cmp	r3, #128	; 0x80
 800c082:	d00a      	beq.n	800c09a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c084:	7bbb      	ldrb	r3, [r7, #14]
 800c086:	4619      	mov	r1, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f001 fa31 	bl	800d4f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c08e:	2180      	movs	r1, #128	; 0x80
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f001 fa2d 	bl	800d4f0 <USBD_LL_StallEP>
 800c096:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c098:	e020      	b.n	800c0dc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c09a:	6839      	ldr	r1, [r7, #0]
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 fc6f 	bl	800c980 <USBD_CtlError>
              break;
 800c0a2:	e01b      	b.n	800c0dc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	885b      	ldrh	r3, [r3, #2]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10e      	bne.n	800c0ca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0ac:	7bbb      	ldrb	r3, [r7, #14]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00b      	beq.n	800c0ca <USBD_StdEPReq+0xc0>
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	2b80      	cmp	r3, #128	; 0x80
 800c0b6:	d008      	beq.n	800c0ca <USBD_StdEPReq+0xc0>
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	88db      	ldrh	r3, [r3, #6]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d104      	bne.n	800c0ca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0c0:	7bbb      	ldrb	r3, [r7, #14]
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f001 fa13 	bl	800d4f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 fd23 	bl	800cb16 <USBD_CtlSendStatus>

              break;
 800c0d0:	e004      	b.n	800c0dc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 fc53 	bl	800c980 <USBD_CtlError>
              break;
 800c0da:	bf00      	nop
          }
          break;
 800c0dc:	e0ec      	b.n	800c2b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	d002      	beq.n	800c0f0 <USBD_StdEPReq+0xe6>
 800c0ea:	2b03      	cmp	r3, #3
 800c0ec:	d016      	beq.n	800c11c <USBD_StdEPReq+0x112>
 800c0ee:	e030      	b.n	800c152 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00d      	beq.n	800c112 <USBD_StdEPReq+0x108>
 800c0f6:	7bbb      	ldrb	r3, [r7, #14]
 800c0f8:	2b80      	cmp	r3, #128	; 0x80
 800c0fa:	d00a      	beq.n	800c112 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	4619      	mov	r1, r3
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f001 f9f5 	bl	800d4f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c106:	2180      	movs	r1, #128	; 0x80
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f001 f9f1 	bl	800d4f0 <USBD_LL_StallEP>
 800c10e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c110:	e025      	b.n	800c15e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c112:	6839      	ldr	r1, [r7, #0]
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fc33 	bl	800c980 <USBD_CtlError>
              break;
 800c11a:	e020      	b.n	800c15e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	885b      	ldrh	r3, [r3, #2]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d11b      	bne.n	800c15c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c124:	7bbb      	ldrb	r3, [r7, #14]
 800c126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d004      	beq.n	800c138 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c12e:	7bbb      	ldrb	r3, [r7, #14]
 800c130:	4619      	mov	r1, r3
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f001 f9fb 	bl	800d52e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 fcec 	bl	800cb16 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	6839      	ldr	r1, [r7, #0]
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	4798      	blx	r3
 800c14c:	4603      	mov	r3, r0
 800c14e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c150:	e004      	b.n	800c15c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c152:	6839      	ldr	r1, [r7, #0]
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fc13 	bl	800c980 <USBD_CtlError>
              break;
 800c15a:	e000      	b.n	800c15e <USBD_StdEPReq+0x154>
              break;
 800c15c:	bf00      	nop
          }
          break;
 800c15e:	e0ab      	b.n	800c2b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c166:	b2db      	uxtb	r3, r3
 800c168:	2b02      	cmp	r3, #2
 800c16a:	d002      	beq.n	800c172 <USBD_StdEPReq+0x168>
 800c16c:	2b03      	cmp	r3, #3
 800c16e:	d032      	beq.n	800c1d6 <USBD_StdEPReq+0x1cc>
 800c170:	e097      	b.n	800c2a2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c172:	7bbb      	ldrb	r3, [r7, #14]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d007      	beq.n	800c188 <USBD_StdEPReq+0x17e>
 800c178:	7bbb      	ldrb	r3, [r7, #14]
 800c17a:	2b80      	cmp	r3, #128	; 0x80
 800c17c:	d004      	beq.n	800c188 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fbfd 	bl	800c980 <USBD_CtlError>
                break;
 800c186:	e091      	b.n	800c2ac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c188:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	da0b      	bge.n	800c1a8 <USBD_StdEPReq+0x19e>
 800c190:	7bbb      	ldrb	r3, [r7, #14]
 800c192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c196:	4613      	mov	r3, r2
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	4413      	add	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	3310      	adds	r3, #16
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	3304      	adds	r3, #4
 800c1a6:	e00b      	b.n	800c1c0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1a8:	7bbb      	ldrb	r3, [r7, #14]
 800c1aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4413      	add	r3, r2
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	4413      	add	r3, r2
 800c1be:	3304      	adds	r3, #4
 800c1c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 fc47 	bl	800ca62 <USBD_CtlSendData>
              break;
 800c1d4:	e06a      	b.n	800c2ac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	da11      	bge.n	800c202 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1de:	7bbb      	ldrb	r3, [r7, #14]
 800c1e0:	f003 020f 	and.w	r2, r3, #15
 800c1e4:	6879      	ldr	r1, [r7, #4]
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	4413      	add	r3, r2
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	440b      	add	r3, r1
 800c1f0:	3324      	adds	r3, #36	; 0x24
 800c1f2:	881b      	ldrh	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d117      	bne.n	800c228 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c1f8:	6839      	ldr	r1, [r7, #0]
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fbc0 	bl	800c980 <USBD_CtlError>
                  break;
 800c200:	e054      	b.n	800c2ac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c202:	7bbb      	ldrb	r3, [r7, #14]
 800c204:	f003 020f 	and.w	r2, r3, #15
 800c208:	6879      	ldr	r1, [r7, #4]
 800c20a:	4613      	mov	r3, r2
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	4413      	add	r3, r2
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	440b      	add	r3, r1
 800c214:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c218:	881b      	ldrh	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d104      	bne.n	800c228 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c21e:	6839      	ldr	r1, [r7, #0]
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 fbad 	bl	800c980 <USBD_CtlError>
                  break;
 800c226:	e041      	b.n	800c2ac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c228:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	da0b      	bge.n	800c248 <USBD_StdEPReq+0x23e>
 800c230:	7bbb      	ldrb	r3, [r7, #14]
 800c232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c236:	4613      	mov	r3, r2
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	4413      	add	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	3310      	adds	r3, #16
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	4413      	add	r3, r2
 800c244:	3304      	adds	r3, #4
 800c246:	e00b      	b.n	800c260 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c248:	7bbb      	ldrb	r3, [r7, #14]
 800c24a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c24e:	4613      	mov	r3, r2
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	4413      	add	r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	4413      	add	r3, r2
 800c25e:	3304      	adds	r3, #4
 800c260:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c262:	7bbb      	ldrb	r3, [r7, #14]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <USBD_StdEPReq+0x264>
 800c268:	7bbb      	ldrb	r3, [r7, #14]
 800c26a:	2b80      	cmp	r3, #128	; 0x80
 800c26c:	d103      	bne.n	800c276 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	2200      	movs	r2, #0
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	e00e      	b.n	800c294 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c276:	7bbb      	ldrb	r3, [r7, #14]
 800c278:	4619      	mov	r1, r3
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f001 f976 	bl	800d56c <USBD_LL_IsStallEP>
 800c280:	4603      	mov	r3, r0
 800c282:	2b00      	cmp	r3, #0
 800c284:	d003      	beq.n	800c28e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	2201      	movs	r2, #1
 800c28a:	601a      	str	r2, [r3, #0]
 800c28c:	e002      	b.n	800c294 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	2200      	movs	r2, #0
 800c292:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	2202      	movs	r2, #2
 800c298:	4619      	mov	r1, r3
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 fbe1 	bl	800ca62 <USBD_CtlSendData>
              break;
 800c2a0:	e004      	b.n	800c2ac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c2a2:	6839      	ldr	r1, [r7, #0]
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 fb6b 	bl	800c980 <USBD_CtlError>
              break;
 800c2aa:	bf00      	nop
          }
          break;
 800c2ac:	e004      	b.n	800c2b8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 fb65 	bl	800c980 <USBD_CtlError>
          break;
 800c2b6:	bf00      	nop
      }
      break;
 800c2b8:	e004      	b.n	800c2c4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c2ba:	6839      	ldr	r1, [r7, #0]
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 fb5f 	bl	800c980 <USBD_CtlError>
      break;
 800c2c2:	bf00      	nop
  }

  return ret;
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	885b      	ldrh	r3, [r3, #2]
 800c2ea:	0a1b      	lsrs	r3, r3, #8
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	2b0e      	cmp	r3, #14
 800c2f2:	f200 8152 	bhi.w	800c59a <USBD_GetDescriptor+0x2ca>
 800c2f6:	a201      	add	r2, pc, #4	; (adr r2, 800c2fc <USBD_GetDescriptor+0x2c>)
 800c2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fc:	0800c36d 	.word	0x0800c36d
 800c300:	0800c385 	.word	0x0800c385
 800c304:	0800c3c5 	.word	0x0800c3c5
 800c308:	0800c59b 	.word	0x0800c59b
 800c30c:	0800c59b 	.word	0x0800c59b
 800c310:	0800c53b 	.word	0x0800c53b
 800c314:	0800c567 	.word	0x0800c567
 800c318:	0800c59b 	.word	0x0800c59b
 800c31c:	0800c59b 	.word	0x0800c59b
 800c320:	0800c59b 	.word	0x0800c59b
 800c324:	0800c59b 	.word	0x0800c59b
 800c328:	0800c59b 	.word	0x0800c59b
 800c32c:	0800c59b 	.word	0x0800c59b
 800c330:	0800c59b 	.word	0x0800c59b
 800c334:	0800c339 	.word	0x0800c339
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c33e:	69db      	ldr	r3, [r3, #28]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00b      	beq.n	800c35c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c34a:	69db      	ldr	r3, [r3, #28]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	7c12      	ldrb	r2, [r2, #16]
 800c350:	f107 0108 	add.w	r1, r7, #8
 800c354:	4610      	mov	r0, r2
 800c356:	4798      	blx	r3
 800c358:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c35a:	e126      	b.n	800c5aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 fb0e 	bl	800c980 <USBD_CtlError>
        err++;
 800c364:	7afb      	ldrb	r3, [r7, #11]
 800c366:	3301      	adds	r3, #1
 800c368:	72fb      	strb	r3, [r7, #11]
      break;
 800c36a:	e11e      	b.n	800c5aa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	7c12      	ldrb	r2, [r2, #16]
 800c378:	f107 0108 	add.w	r1, r7, #8
 800c37c:	4610      	mov	r0, r2
 800c37e:	4798      	blx	r3
 800c380:	60f8      	str	r0, [r7, #12]
      break;
 800c382:	e112      	b.n	800c5aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	7c1b      	ldrb	r3, [r3, #16]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10d      	bne.n	800c3a8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c394:	f107 0208 	add.w	r2, r7, #8
 800c398:	4610      	mov	r0, r2
 800c39a:	4798      	blx	r3
 800c39c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	2202      	movs	r2, #2
 800c3a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c3a6:	e100      	b.n	800c5aa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b0:	f107 0208 	add.w	r2, r7, #8
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	4798      	blx	r3
 800c3b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	2202      	movs	r2, #2
 800c3c0:	701a      	strb	r2, [r3, #0]
      break;
 800c3c2:	e0f2      	b.n	800c5aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	885b      	ldrh	r3, [r3, #2]
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	2b05      	cmp	r3, #5
 800c3cc:	f200 80ac 	bhi.w	800c528 <USBD_GetDescriptor+0x258>
 800c3d0:	a201      	add	r2, pc, #4	; (adr r2, 800c3d8 <USBD_GetDescriptor+0x108>)
 800c3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d6:	bf00      	nop
 800c3d8:	0800c3f1 	.word	0x0800c3f1
 800c3dc:	0800c425 	.word	0x0800c425
 800c3e0:	0800c459 	.word	0x0800c459
 800c3e4:	0800c48d 	.word	0x0800c48d
 800c3e8:	0800c4c1 	.word	0x0800c4c1
 800c3ec:	0800c4f5 	.word	0x0800c4f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00b      	beq.n	800c414 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	7c12      	ldrb	r2, [r2, #16]
 800c408:	f107 0108 	add.w	r1, r7, #8
 800c40c:	4610      	mov	r0, r2
 800c40e:	4798      	blx	r3
 800c410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c412:	e091      	b.n	800c538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c414:	6839      	ldr	r1, [r7, #0]
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 fab2 	bl	800c980 <USBD_CtlError>
            err++;
 800c41c:	7afb      	ldrb	r3, [r7, #11]
 800c41e:	3301      	adds	r3, #1
 800c420:	72fb      	strb	r3, [r7, #11]
          break;
 800c422:	e089      	b.n	800c538 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d00b      	beq.n	800c448 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	7c12      	ldrb	r2, [r2, #16]
 800c43c:	f107 0108 	add.w	r1, r7, #8
 800c440:	4610      	mov	r0, r2
 800c442:	4798      	blx	r3
 800c444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c446:	e077      	b.n	800c538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c448:	6839      	ldr	r1, [r7, #0]
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 fa98 	bl	800c980 <USBD_CtlError>
            err++;
 800c450:	7afb      	ldrb	r3, [r7, #11]
 800c452:	3301      	adds	r3, #1
 800c454:	72fb      	strb	r3, [r7, #11]
          break;
 800c456:	e06f      	b.n	800c538 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00b      	beq.n	800c47c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	7c12      	ldrb	r2, [r2, #16]
 800c470:	f107 0108 	add.w	r1, r7, #8
 800c474:	4610      	mov	r0, r2
 800c476:	4798      	blx	r3
 800c478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c47a:	e05d      	b.n	800c538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c47c:	6839      	ldr	r1, [r7, #0]
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 fa7e 	bl	800c980 <USBD_CtlError>
            err++;
 800c484:	7afb      	ldrb	r3, [r7, #11]
 800c486:	3301      	adds	r3, #1
 800c488:	72fb      	strb	r3, [r7, #11]
          break;
 800c48a:	e055      	b.n	800c538 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d00b      	beq.n	800c4b0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	7c12      	ldrb	r2, [r2, #16]
 800c4a4:	f107 0108 	add.w	r1, r7, #8
 800c4a8:	4610      	mov	r0, r2
 800c4aa:	4798      	blx	r3
 800c4ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ae:	e043      	b.n	800c538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4b0:	6839      	ldr	r1, [r7, #0]
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 fa64 	bl	800c980 <USBD_CtlError>
            err++;
 800c4b8:	7afb      	ldrb	r3, [r7, #11]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	72fb      	strb	r3, [r7, #11]
          break;
 800c4be:	e03b      	b.n	800c538 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4c6:	695b      	ldr	r3, [r3, #20]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00b      	beq.n	800c4e4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4d2:	695b      	ldr	r3, [r3, #20]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	7c12      	ldrb	r2, [r2, #16]
 800c4d8:	f107 0108 	add.w	r1, r7, #8
 800c4dc:	4610      	mov	r0, r2
 800c4de:	4798      	blx	r3
 800c4e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4e2:	e029      	b.n	800c538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4e4:	6839      	ldr	r1, [r7, #0]
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 fa4a 	bl	800c980 <USBD_CtlError>
            err++;
 800c4ec:	7afb      	ldrb	r3, [r7, #11]
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4f2:	e021      	b.n	800c538 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4fa:	699b      	ldr	r3, [r3, #24]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00b      	beq.n	800c518 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c506:	699b      	ldr	r3, [r3, #24]
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	7c12      	ldrb	r2, [r2, #16]
 800c50c:	f107 0108 	add.w	r1, r7, #8
 800c510:	4610      	mov	r0, r2
 800c512:	4798      	blx	r3
 800c514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c516:	e00f      	b.n	800c538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fa30 	bl	800c980 <USBD_CtlError>
            err++;
 800c520:	7afb      	ldrb	r3, [r7, #11]
 800c522:	3301      	adds	r3, #1
 800c524:	72fb      	strb	r3, [r7, #11]
          break;
 800c526:	e007      	b.n	800c538 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c528:	6839      	ldr	r1, [r7, #0]
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 fa28 	bl	800c980 <USBD_CtlError>
          err++;
 800c530:	7afb      	ldrb	r3, [r7, #11]
 800c532:	3301      	adds	r3, #1
 800c534:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c536:	bf00      	nop
      }
      break;
 800c538:	e037      	b.n	800c5aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	7c1b      	ldrb	r3, [r3, #16]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d109      	bne.n	800c556 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c54a:	f107 0208 	add.w	r2, r7, #8
 800c54e:	4610      	mov	r0, r2
 800c550:	4798      	blx	r3
 800c552:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c554:	e029      	b.n	800c5aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c556:	6839      	ldr	r1, [r7, #0]
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 fa11 	bl	800c980 <USBD_CtlError>
        err++;
 800c55e:	7afb      	ldrb	r3, [r7, #11]
 800c560:	3301      	adds	r3, #1
 800c562:	72fb      	strb	r3, [r7, #11]
      break;
 800c564:	e021      	b.n	800c5aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	7c1b      	ldrb	r3, [r3, #16]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d10d      	bne.n	800c58a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c576:	f107 0208 	add.w	r2, r7, #8
 800c57a:	4610      	mov	r0, r2
 800c57c:	4798      	blx	r3
 800c57e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	3301      	adds	r3, #1
 800c584:	2207      	movs	r2, #7
 800c586:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c588:	e00f      	b.n	800c5aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c58a:	6839      	ldr	r1, [r7, #0]
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f9f7 	bl	800c980 <USBD_CtlError>
        err++;
 800c592:	7afb      	ldrb	r3, [r7, #11]
 800c594:	3301      	adds	r3, #1
 800c596:	72fb      	strb	r3, [r7, #11]
      break;
 800c598:	e007      	b.n	800c5aa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c59a:	6839      	ldr	r1, [r7, #0]
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 f9ef 	bl	800c980 <USBD_CtlError>
      err++;
 800c5a2:	7afb      	ldrb	r3, [r7, #11]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	72fb      	strb	r3, [r7, #11]
      break;
 800c5a8:	bf00      	nop
  }

  if (err != 0U)
 800c5aa:	7afb      	ldrb	r3, [r7, #11]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d11e      	bne.n	800c5ee <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	88db      	ldrh	r3, [r3, #6]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d016      	beq.n	800c5e6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c5b8:	893b      	ldrh	r3, [r7, #8]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00e      	beq.n	800c5dc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	88da      	ldrh	r2, [r3, #6]
 800c5c2:	893b      	ldrh	r3, [r7, #8]
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	bf28      	it	cs
 800c5c8:	4613      	movcs	r3, r2
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5ce:	893b      	ldrh	r3, [r7, #8]
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	68f9      	ldr	r1, [r7, #12]
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 fa44 	bl	800ca62 <USBD_CtlSendData>
 800c5da:	e009      	b.n	800c5f0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5dc:	6839      	ldr	r1, [r7, #0]
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 f9ce 	bl	800c980 <USBD_CtlError>
 800c5e4:	e004      	b.n	800c5f0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fa95 	bl	800cb16 <USBD_CtlSendStatus>
 800c5ec:	e000      	b.n	800c5f0 <USBD_GetDescriptor+0x320>
    return;
 800c5ee:	bf00      	nop
  }
}
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop

0800c5f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	889b      	ldrh	r3, [r3, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d131      	bne.n	800c66e <USBD_SetAddress+0x76>
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	88db      	ldrh	r3, [r3, #6]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d12d      	bne.n	800c66e <USBD_SetAddress+0x76>
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	885b      	ldrh	r3, [r3, #2]
 800c616:	2b7f      	cmp	r3, #127	; 0x7f
 800c618:	d829      	bhi.n	800c66e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	885b      	ldrh	r3, [r3, #2]
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c624:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	2b03      	cmp	r3, #3
 800c630:	d104      	bne.n	800c63c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c632:	6839      	ldr	r1, [r7, #0]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 f9a3 	bl	800c980 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c63a:	e01d      	b.n	800c678 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	7bfa      	ldrb	r2, [r7, #15]
 800c640:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c644:	7bfb      	ldrb	r3, [r7, #15]
 800c646:	4619      	mov	r1, r3
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 ffbb 	bl	800d5c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 fa61 	bl	800cb16 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c654:	7bfb      	ldrb	r3, [r7, #15]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d004      	beq.n	800c664 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2202      	movs	r2, #2
 800c65e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c662:	e009      	b.n	800c678 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c66c:	e004      	b.n	800c678 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c66e:	6839      	ldr	r1, [r7, #0]
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 f985 	bl	800c980 <USBD_CtlError>
  }
}
 800c676:	bf00      	nop
 800c678:	bf00      	nop
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c68a:	2300      	movs	r3, #0
 800c68c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	885b      	ldrh	r3, [r3, #2]
 800c692:	b2da      	uxtb	r2, r3
 800c694:	4b4c      	ldr	r3, [pc, #304]	; (800c7c8 <USBD_SetConfig+0x148>)
 800c696:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c698:	4b4b      	ldr	r3, [pc, #300]	; (800c7c8 <USBD_SetConfig+0x148>)
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d905      	bls.n	800c6ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c6a0:	6839      	ldr	r1, [r7, #0]
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 f96c 	bl	800c980 <USBD_CtlError>
    return USBD_FAIL;
 800c6a8:	2303      	movs	r3, #3
 800c6aa:	e088      	b.n	800c7be <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d002      	beq.n	800c6be <USBD_SetConfig+0x3e>
 800c6b8:	2b03      	cmp	r3, #3
 800c6ba:	d025      	beq.n	800c708 <USBD_SetConfig+0x88>
 800c6bc:	e071      	b.n	800c7a2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6be:	4b42      	ldr	r3, [pc, #264]	; (800c7c8 <USBD_SetConfig+0x148>)
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d01c      	beq.n	800c700 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c6c6:	4b40      	ldr	r3, [pc, #256]	; (800c7c8 <USBD_SetConfig+0x148>)
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6d0:	4b3d      	ldr	r3, [pc, #244]	; (800c7c8 <USBD_SetConfig+0x148>)
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f7ff f992 	bl	800ba00 <USBD_SetClassConfig>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6e0:	7bfb      	ldrb	r3, [r7, #15]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d004      	beq.n	800c6f0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c6e6:	6839      	ldr	r1, [r7, #0]
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 f949 	bl	800c980 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6ee:	e065      	b.n	800c7bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 fa10 	bl	800cb16 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2203      	movs	r2, #3
 800c6fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c6fe:	e05d      	b.n	800c7bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 fa08 	bl	800cb16 <USBD_CtlSendStatus>
      break;
 800c706:	e059      	b.n	800c7bc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c708:	4b2f      	ldr	r3, [pc, #188]	; (800c7c8 <USBD_SetConfig+0x148>)
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d112      	bne.n	800c736 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2202      	movs	r2, #2
 800c714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c718:	4b2b      	ldr	r3, [pc, #172]	; (800c7c8 <USBD_SetConfig+0x148>)
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	461a      	mov	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c722:	4b29      	ldr	r3, [pc, #164]	; (800c7c8 <USBD_SetConfig+0x148>)
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	4619      	mov	r1, r3
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7ff f985 	bl	800ba38 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 f9f1 	bl	800cb16 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c734:	e042      	b.n	800c7bc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c736:	4b24      	ldr	r3, [pc, #144]	; (800c7c8 <USBD_SetConfig+0x148>)
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	429a      	cmp	r2, r3
 800c742:	d02a      	beq.n	800c79a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	4619      	mov	r1, r3
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f7ff f973 	bl	800ba38 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c752:	4b1d      	ldr	r3, [pc, #116]	; (800c7c8 <USBD_SetConfig+0x148>)
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	461a      	mov	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c75c:	4b1a      	ldr	r3, [pc, #104]	; (800c7c8 <USBD_SetConfig+0x148>)
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	4619      	mov	r1, r3
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f7ff f94c 	bl	800ba00 <USBD_SetClassConfig>
 800c768:	4603      	mov	r3, r0
 800c76a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c76c:	7bfb      	ldrb	r3, [r7, #15]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00f      	beq.n	800c792 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c772:	6839      	ldr	r1, [r7, #0]
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 f903 	bl	800c980 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	4619      	mov	r1, r3
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7ff f958 	bl	800ba38 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2202      	movs	r2, #2
 800c78c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c790:	e014      	b.n	800c7bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f9bf 	bl	800cb16 <USBD_CtlSendStatus>
      break;
 800c798:	e010      	b.n	800c7bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f9bb 	bl	800cb16 <USBD_CtlSendStatus>
      break;
 800c7a0:	e00c      	b.n	800c7bc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 f8eb 	bl	800c980 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7aa:	4b07      	ldr	r3, [pc, #28]	; (800c7c8 <USBD_SetConfig+0x148>)
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7ff f941 	bl	800ba38 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ba:	bf00      	nop
  }

  return ret;
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20000af4 	.word	0x20000af4

0800c7cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	88db      	ldrh	r3, [r3, #6]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d004      	beq.n	800c7e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7de:	6839      	ldr	r1, [r7, #0]
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f8cd 	bl	800c980 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7e6:	e023      	b.n	800c830 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	2b02      	cmp	r3, #2
 800c7f2:	dc02      	bgt.n	800c7fa <USBD_GetConfig+0x2e>
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	dc03      	bgt.n	800c800 <USBD_GetConfig+0x34>
 800c7f8:	e015      	b.n	800c826 <USBD_GetConfig+0x5a>
 800c7fa:	2b03      	cmp	r3, #3
 800c7fc:	d00b      	beq.n	800c816 <USBD_GetConfig+0x4a>
 800c7fe:	e012      	b.n	800c826 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	3308      	adds	r3, #8
 800c80a:	2201      	movs	r2, #1
 800c80c:	4619      	mov	r1, r3
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 f927 	bl	800ca62 <USBD_CtlSendData>
        break;
 800c814:	e00c      	b.n	800c830 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	3304      	adds	r3, #4
 800c81a:	2201      	movs	r2, #1
 800c81c:	4619      	mov	r1, r3
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f91f 	bl	800ca62 <USBD_CtlSendData>
        break;
 800c824:	e004      	b.n	800c830 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c826:	6839      	ldr	r1, [r7, #0]
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 f8a9 	bl	800c980 <USBD_CtlError>
        break;
 800c82e:	bf00      	nop
}
 800c830:	bf00      	nop
 800c832:	3708      	adds	r7, #8
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	3b01      	subs	r3, #1
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	d81e      	bhi.n	800c88e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	88db      	ldrh	r3, [r3, #6]
 800c854:	2b02      	cmp	r3, #2
 800c856:	d004      	beq.n	800c862 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c858:	6839      	ldr	r1, [r7, #0]
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 f890 	bl	800c980 <USBD_CtlError>
        break;
 800c860:	e01a      	b.n	800c898 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2201      	movs	r2, #1
 800c866:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d005      	beq.n	800c87e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	68db      	ldr	r3, [r3, #12]
 800c876:	f043 0202 	orr.w	r2, r3, #2
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	330c      	adds	r3, #12
 800c882:	2202      	movs	r2, #2
 800c884:	4619      	mov	r1, r3
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 f8eb 	bl	800ca62 <USBD_CtlSendData>
      break;
 800c88c:	e004      	b.n	800c898 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c88e:	6839      	ldr	r1, [r7, #0]
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 f875 	bl	800c980 <USBD_CtlError>
      break;
 800c896:	bf00      	nop
  }
}
 800c898:	bf00      	nop
 800c89a:	3708      	adds	r7, #8
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	885b      	ldrh	r3, [r3, #2]
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d106      	bne.n	800c8c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 f92b 	bl	800cb16 <USBD_CtlSendStatus>
  }
}
 800c8c0:	bf00      	nop
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d80b      	bhi.n	800c8f8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	885b      	ldrh	r3, [r3, #2]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d10c      	bne.n	800c902 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 f910 	bl	800cb16 <USBD_CtlSendStatus>
      }
      break;
 800c8f6:	e004      	b.n	800c902 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c8f8:	6839      	ldr	r1, [r7, #0]
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 f840 	bl	800c980 <USBD_CtlError>
      break;
 800c900:	e000      	b.n	800c904 <USBD_ClrFeature+0x3c>
      break;
 800c902:	bf00      	nop
  }
}
 800c904:	bf00      	nop
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	781a      	ldrb	r2, [r3, #0]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	3301      	adds	r3, #1
 800c926:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	781a      	ldrb	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	3301      	adds	r3, #1
 800c934:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f7ff fa92 	bl	800be60 <SWAPBYTE>
 800c93c:	4603      	mov	r3, r0
 800c93e:	461a      	mov	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	3301      	adds	r3, #1
 800c948:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	3301      	adds	r3, #1
 800c94e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c950:	68f8      	ldr	r0, [r7, #12]
 800c952:	f7ff fa85 	bl	800be60 <SWAPBYTE>
 800c956:	4603      	mov	r3, r0
 800c958:	461a      	mov	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	3301      	adds	r3, #1
 800c962:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	3301      	adds	r3, #1
 800c968:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c96a:	68f8      	ldr	r0, [r7, #12]
 800c96c:	f7ff fa78 	bl	800be60 <SWAPBYTE>
 800c970:	4603      	mov	r3, r0
 800c972:	461a      	mov	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	80da      	strh	r2, [r3, #6]
}
 800c978:	bf00      	nop
 800c97a:	3710      	adds	r7, #16
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c98a:	2180      	movs	r1, #128	; 0x80
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 fdaf 	bl	800d4f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c992:	2100      	movs	r1, #0
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 fdab 	bl	800d4f0 <USBD_LL_StallEP>
}
 800c99a:	bf00      	nop
 800c99c:	3708      	adds	r7, #8
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b086      	sub	sp, #24
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	60f8      	str	r0, [r7, #12]
 800c9aa:	60b9      	str	r1, [r7, #8]
 800c9ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d036      	beq.n	800ca26 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9bc:	6938      	ldr	r0, [r7, #16]
 800c9be:	f000 f836 	bl	800ca2e <USBD_GetLen>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	005b      	lsls	r3, r3, #1
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9d0:	7dfb      	ldrb	r3, [r7, #23]
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	7812      	ldrb	r2, [r2, #0]
 800c9da:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9dc:	7dfb      	ldrb	r3, [r7, #23]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c9e2:	7dfb      	ldrb	r3, [r7, #23]
 800c9e4:	68ba      	ldr	r2, [r7, #8]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	2203      	movs	r2, #3
 800c9ea:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9ec:	7dfb      	ldrb	r3, [r7, #23]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c9f2:	e013      	b.n	800ca1c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c9f4:	7dfb      	ldrb	r3, [r7, #23]
 800c9f6:	68ba      	ldr	r2, [r7, #8]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	693a      	ldr	r2, [r7, #16]
 800c9fc:	7812      	ldrb	r2, [r2, #0]
 800c9fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	3301      	adds	r3, #1
 800ca04:	613b      	str	r3, [r7, #16]
    idx++;
 800ca06:	7dfb      	ldrb	r3, [r7, #23]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca0c:	7dfb      	ldrb	r3, [r7, #23]
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	4413      	add	r3, r2
 800ca12:	2200      	movs	r2, #0
 800ca14:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca16:	7dfb      	ldrb	r3, [r7, #23]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d1e7      	bne.n	800c9f4 <USBD_GetString+0x52>
 800ca24:	e000      	b.n	800ca28 <USBD_GetString+0x86>
    return;
 800ca26:	bf00      	nop
  }
}
 800ca28:	3718      	adds	r7, #24
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}

0800ca2e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca2e:	b480      	push	{r7}
 800ca30:	b085      	sub	sp, #20
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca36:	2300      	movs	r3, #0
 800ca38:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca3e:	e005      	b.n	800ca4c <USBD_GetLen+0x1e>
  {
    len++;
 800ca40:	7bfb      	ldrb	r3, [r7, #15]
 800ca42:	3301      	adds	r3, #1
 800ca44:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d1f5      	bne.n	800ca40 <USBD_GetLen+0x12>
  }

  return len;
 800ca54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3714      	adds	r7, #20
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr

0800ca62 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b084      	sub	sp, #16
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	60f8      	str	r0, [r7, #12]
 800ca6a:	60b9      	str	r1, [r7, #8]
 800ca6c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2202      	movs	r2, #2
 800ca72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	68ba      	ldr	r2, [r7, #8]
 800ca86:	2100      	movs	r1, #0
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f000 fdba 	bl	800d602 <USBD_LL_Transmit>

  return USBD_OK;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3710      	adds	r7, #16
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	68ba      	ldr	r2, [r7, #8]
 800caa8:	2100      	movs	r1, #0
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f000 fda9 	bl	800d602 <USBD_LL_Transmit>

  return USBD_OK;
 800cab0:	2300      	movs	r3, #0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b084      	sub	sp, #16
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	60f8      	str	r0, [r7, #12]
 800cac2:	60b9      	str	r1, [r7, #8]
 800cac4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2203      	movs	r2, #3
 800caca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	2100      	movs	r1, #0
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f000 fdad 	bl	800d644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	2100      	movs	r1, #0
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	f000 fd9c 	bl	800d644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b082      	sub	sp, #8
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2204      	movs	r2, #4
 800cb22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb26:	2300      	movs	r3, #0
 800cb28:	2200      	movs	r2, #0
 800cb2a:	2100      	movs	r1, #0
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fd68 	bl	800d602 <USBD_LL_Transmit>

  return USBD_OK;
 800cb32:	2300      	movs	r3, #0
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2205      	movs	r2, #5
 800cb48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	2200      	movs	r2, #0
 800cb50:	2100      	movs	r1, #0
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 fd76 	bl	800d644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
	...

0800cb64 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800cb68:	2200      	movs	r2, #0
 800cb6a:	4912      	ldr	r1, [pc, #72]	; (800cbb4 <MX_USB_Device_Init+0x50>)
 800cb6c:	4812      	ldr	r0, [pc, #72]	; (800cbb8 <MX_USB_Device_Init+0x54>)
 800cb6e:	f7fe fed9 	bl	800b924 <USBD_Init>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d001      	beq.n	800cb7c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800cb78:	f7f4 fb2a 	bl	80011d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800cb7c:	490f      	ldr	r1, [pc, #60]	; (800cbbc <MX_USB_Device_Init+0x58>)
 800cb7e:	480e      	ldr	r0, [pc, #56]	; (800cbb8 <MX_USB_Device_Init+0x54>)
 800cb80:	f7fe ff00 	bl	800b984 <USBD_RegisterClass>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d001      	beq.n	800cb8e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800cb8a:	f7f4 fb21 	bl	80011d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800cb8e:	490c      	ldr	r1, [pc, #48]	; (800cbc0 <MX_USB_Device_Init+0x5c>)
 800cb90:	4809      	ldr	r0, [pc, #36]	; (800cbb8 <MX_USB_Device_Init+0x54>)
 800cb92:	f7fe fe51 	bl	800b838 <USBD_CDC_RegisterInterface>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d001      	beq.n	800cba0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800cb9c:	f7f4 fb18 	bl	80011d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800cba0:	4805      	ldr	r0, [pc, #20]	; (800cbb8 <MX_USB_Device_Init+0x54>)
 800cba2:	f7fe ff16 	bl	800b9d2 <USBD_Start>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d001      	beq.n	800cbb0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800cbac:	f7f4 fb10 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800cbb0:	bf00      	nop
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	2000013c 	.word	0x2000013c
 800cbb8:	20000af8 	.word	0x20000af8
 800cbbc:	2000001c 	.word	0x2000001c
 800cbc0:	20000128 	.word	0x20000128

0800cbc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cbc8:	2200      	movs	r2, #0
 800cbca:	4905      	ldr	r1, [pc, #20]	; (800cbe0 <CDC_Init_FS+0x1c>)
 800cbcc:	4805      	ldr	r0, [pc, #20]	; (800cbe4 <CDC_Init_FS+0x20>)
 800cbce:	f7fe fe48 	bl	800b862 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cbd2:	4905      	ldr	r1, [pc, #20]	; (800cbe8 <CDC_Init_FS+0x24>)
 800cbd4:	4803      	ldr	r0, [pc, #12]	; (800cbe4 <CDC_Init_FS+0x20>)
 800cbd6:	f7fe fe62 	bl	800b89e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cbda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	200025f4 	.word	0x200025f4
 800cbe4:	20000af8 	.word	0x20000af8
 800cbe8:	20001df4 	.word	0x20001df4

0800cbec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cbec:	b480      	push	{r7}
 800cbee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cbf0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr

0800cbfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b085      	sub	sp, #20
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	4603      	mov	r3, r0
 800cc04:	6039      	str	r1, [r7, #0]
 800cc06:	71fb      	strb	r3, [r7, #7]
 800cc08:	4613      	mov	r3, r2
 800cc0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	60fb      	str	r3, [r7, #12]

  switch(cmd)
 800cc10:	79fb      	ldrb	r3, [r7, #7]
 800cc12:	2b23      	cmp	r3, #35	; 0x23
 800cc14:	f200 80af 	bhi.w	800cd76 <CDC_Control_FS+0x17a>
 800cc18:	a201      	add	r2, pc, #4	; (adr r2, 800cc20 <CDC_Control_FS+0x24>)
 800cc1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc1e:	bf00      	nop
 800cc20:	0800cd77 	.word	0x0800cd77
 800cc24:	0800cd77 	.word	0x0800cd77
 800cc28:	0800cd77 	.word	0x0800cd77
 800cc2c:	0800cd77 	.word	0x0800cd77
 800cc30:	0800cd77 	.word	0x0800cd77
 800cc34:	0800cd77 	.word	0x0800cd77
 800cc38:	0800cd77 	.word	0x0800cd77
 800cc3c:	0800cd77 	.word	0x0800cd77
 800cc40:	0800cd77 	.word	0x0800cd77
 800cc44:	0800cd77 	.word	0x0800cd77
 800cc48:	0800cd77 	.word	0x0800cd77
 800cc4c:	0800cd77 	.word	0x0800cd77
 800cc50:	0800cd77 	.word	0x0800cd77
 800cc54:	0800cd77 	.word	0x0800cd77
 800cc58:	0800cd77 	.word	0x0800cd77
 800cc5c:	0800cd77 	.word	0x0800cd77
 800cc60:	0800cd77 	.word	0x0800cd77
 800cc64:	0800cd77 	.word	0x0800cd77
 800cc68:	0800cd77 	.word	0x0800cd77
 800cc6c:	0800cd77 	.word	0x0800cd77
 800cc70:	0800cd77 	.word	0x0800cd77
 800cc74:	0800cd77 	.word	0x0800cd77
 800cc78:	0800cd77 	.word	0x0800cd77
 800cc7c:	0800cd77 	.word	0x0800cd77
 800cc80:	0800cd77 	.word	0x0800cd77
 800cc84:	0800cd77 	.word	0x0800cd77
 800cc88:	0800cd77 	.word	0x0800cd77
 800cc8c:	0800cd77 	.word	0x0800cd77
 800cc90:	0800cd77 	.word	0x0800cd77
 800cc94:	0800cd77 	.word	0x0800cd77
 800cc98:	0800cd77 	.word	0x0800cd77
 800cc9c:	0800cd77 	.word	0x0800cd77
 800cca0:	0800ccb1 	.word	0x0800ccb1
 800cca4:	0800cd0b 	.word	0x0800cd0b
 800cca8:	0800cd5f 	.word	0x0800cd5f
 800ccac:	0800cd77 	.word	0x0800cd77
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	4b34      	ldr	r3, [pc, #208]	; (800cd88 <CDC_Control_FS+0x18c>)
 800ccb8:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 800ccba:	4b33      	ldr	r3, [pc, #204]	; (800cd88 <CDC_Control_FS+0x18c>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	683a      	ldr	r2, [r7, #0]
 800ccc0:	3201      	adds	r2, #1
 800ccc2:	7812      	ldrb	r2, [r2, #0]
 800ccc4:	0212      	lsls	r2, r2, #8
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	4a2f      	ldr	r2, [pc, #188]	; (800cd88 <CDC_Control_FS+0x18c>)
 800ccca:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 800cccc:	4b2e      	ldr	r3, [pc, #184]	; (800cd88 <CDC_Control_FS+0x18c>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	683a      	ldr	r2, [r7, #0]
 800ccd2:	3202      	adds	r2, #2
 800ccd4:	7812      	ldrb	r2, [r2, #0]
 800ccd6:	0412      	lsls	r2, r2, #16
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	4a2b      	ldr	r2, [pc, #172]	; (800cd88 <CDC_Control_FS+0x18c>)
 800ccdc:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 800ccde:	4b2a      	ldr	r3, [pc, #168]	; (800cd88 <CDC_Control_FS+0x18c>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	683a      	ldr	r2, [r7, #0]
 800cce4:	3203      	adds	r2, #3
 800cce6:	7812      	ldrb	r2, [r2, #0]
 800cce8:	0612      	lsls	r2, r2, #24
 800ccea:	4313      	orrs	r3, r2
 800ccec:	4a26      	ldr	r2, [pc, #152]	; (800cd88 <CDC_Control_FS+0x18c>)
 800ccee:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	791a      	ldrb	r2, [r3, #4]
 800ccf4:	4b24      	ldr	r3, [pc, #144]	; (800cd88 <CDC_Control_FS+0x18c>)
 800ccf6:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	795a      	ldrb	r2, [r3, #5]
 800ccfc:	4b22      	ldr	r3, [pc, #136]	; (800cd88 <CDC_Control_FS+0x18c>)
 800ccfe:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	799a      	ldrb	r2, [r3, #6]
 800cd04:	4b20      	ldr	r3, [pc, #128]	; (800cd88 <CDC_Control_FS+0x18c>)
 800cd06:	719a      	strb	r2, [r3, #6]

    break;
 800cd08:	e036      	b.n	800cd78 <CDC_Control_FS+0x17c>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800cd0a:	4b1f      	ldr	r3, [pc, #124]	; (800cd88 <CDC_Control_FS+0x18c>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	b2da      	uxtb	r2, r3
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 800cd14:	4b1c      	ldr	r3, [pc, #112]	; (800cd88 <CDC_Control_FS+0x18c>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	0a1a      	lsrs	r2, r3, #8
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	b2d2      	uxtb	r2, r2
 800cd20:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 800cd22:	4b19      	ldr	r3, [pc, #100]	; (800cd88 <CDC_Control_FS+0x18c>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	0c1a      	lsrs	r2, r3, #16
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	3302      	adds	r3, #2
 800cd2c:	b2d2      	uxtb	r2, r2
 800cd2e:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 800cd30:	4b15      	ldr	r3, [pc, #84]	; (800cd88 <CDC_Control_FS+0x18c>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	0e1a      	lsrs	r2, r3, #24
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	3303      	adds	r3, #3
 800cd3a:	b2d2      	uxtb	r2, r2
 800cd3c:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	3304      	adds	r3, #4
 800cd42:	4a11      	ldr	r2, [pc, #68]	; (800cd88 <CDC_Control_FS+0x18c>)
 800cd44:	7912      	ldrb	r2, [r2, #4]
 800cd46:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	3305      	adds	r3, #5
 800cd4c:	4a0e      	ldr	r2, [pc, #56]	; (800cd88 <CDC_Control_FS+0x18c>)
 800cd4e:	7952      	ldrb	r2, [r2, #5]
 800cd50:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	3306      	adds	r3, #6
 800cd56:	4a0c      	ldr	r2, [pc, #48]	; (800cd88 <CDC_Control_FS+0x18c>)
 800cd58:	7992      	ldrb	r2, [r2, #6]
 800cd5a:	701a      	strb	r2, [r3, #0]

    break;
 800cd5c:	e00c      	b.n	800cd78 <CDC_Control_FS+0x17c>

    case CDC_SET_CONTROL_LINE_STATE:
      is_opened = req->wValue & 0x01;   // 0 bit: DTR, 1 bit: RTS
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	885b      	ldrh	r3, [r3, #2]
 800cd62:	f003 0301 	and.w	r3, r3, #1
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	bf14      	ite	ne
 800cd6a:	2301      	movne	r3, #1
 800cd6c:	2300      	moveq	r3, #0
 800cd6e:	b2da      	uxtb	r2, r3
 800cd70:	4b06      	ldr	r3, [pc, #24]	; (800cd8c <CDC_Control_FS+0x190>)
 800cd72:	701a      	strb	r2, [r3, #0]

    break;
 800cd74:	e000      	b.n	800cd78 <CDC_Control_FS+0x17c>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd76:	bf00      	nop
  }

  return (USBD_OK);
 800cd78:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3714      	adds	r7, #20
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop
 800cd88:	20000120 	.word	0x20000120
 800cd8c:	20001df0 	.word	0x20001df0

0800cd90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cd90:	b590      	push	{r4, r7, lr}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  qbufferWrite(&q_rx, Buf, *Len);
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	461a      	mov	r2, r3
 800cda0:	6879      	ldr	r1, [r7, #4]
 800cda2:	480f      	ldr	r0, [pc, #60]	; (800cde0 <CDC_Receive_FS+0x50>)
 800cda4:	f7f4 fb9d 	bl	80014e2 <qbufferWrite>


  uint32_t buf_len;

  buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 800cda8:	4b0d      	ldr	r3, [pc, #52]	; (800cde0 <CDC_Receive_FS+0x50>)
 800cdaa:	689c      	ldr	r4, [r3, #8]
 800cdac:	480c      	ldr	r0, [pc, #48]	; (800cde0 <CDC_Receive_FS+0x50>)
 800cdae:	f7f4 fc4c 	bl	800164a <qbufferAvailable>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	1ae3      	subs	r3, r4, r3
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	60fb      	str	r3, [r7, #12]

  if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2b3f      	cmp	r3, #63	; 0x3f
 800cdbe:	d907      	bls.n	800cdd0 <CDC_Receive_FS+0x40>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cdc0:	6879      	ldr	r1, [r7, #4]
 800cdc2:	4808      	ldr	r0, [pc, #32]	; (800cde4 <CDC_Receive_FS+0x54>)
 800cdc4:	f7fe fd6b 	bl	800b89e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cdc8:	4806      	ldr	r0, [pc, #24]	; (800cde4 <CDC_Receive_FS+0x54>)
 800cdca:	f7fe fd81 	bl	800b8d0 <USBD_CDC_ReceivePacket>
 800cdce:	e002      	b.n	800cdd6 <CDC_Receive_FS+0x46>
  }
  else
  {
    is_rx_full = true;
 800cdd0:	4b05      	ldr	r3, [pc, #20]	; (800cde8 <CDC_Receive_FS+0x58>)
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	701a      	strb	r2, [r3, #0]
  }

    return (USBD_OK);
 800cdd6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3714      	adds	r7, #20
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd90      	pop	{r4, r7, pc}
 800cde0:	20000dc8 	.word	0x20000dc8
 800cde4:	20000af8 	.word	0x20000af8
 800cde8:	20001df1 	.word	0x20001df1

0800cdec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b087      	sub	sp, #28
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cdfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	371c      	adds	r7, #28
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr
	...

0800ce10 <cdcIfInit>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool cdcIfInit(void)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	af00      	add	r7, sp, #0
  is_opened = false;
 800ce14:	4b08      	ldr	r3, [pc, #32]	; (800ce38 <cdcIfInit+0x28>)
 800ce16:	2200      	movs	r2, #0
 800ce18:	701a      	strb	r2, [r3, #0]
  qbufferCreate(&q_rx, q_rx_buf, 2048);
 800ce1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce1e:	4907      	ldr	r1, [pc, #28]	; (800ce3c <cdcIfInit+0x2c>)
 800ce20:	4807      	ldr	r0, [pc, #28]	; (800ce40 <cdcIfInit+0x30>)
 800ce22:	f7f4 fb40 	bl	80014a6 <qbufferCreate>
  qbufferCreate(&q_tx, q_tx_buf, 2048);
 800ce26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce2a:	4906      	ldr	r1, [pc, #24]	; (800ce44 <cdcIfInit+0x34>)
 800ce2c:	4806      	ldr	r0, [pc, #24]	; (800ce48 <cdcIfInit+0x38>)
 800ce2e:	f7f4 fb3a 	bl	80014a6 <qbufferCreate>

  return true;
 800ce32:	2301      	movs	r3, #1
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	20001df0 	.word	0x20001df0
 800ce3c:	20000df0 	.word	0x20000df0
 800ce40:	20000dc8 	.word	0x20000dc8
 800ce44:	200015f0 	.word	0x200015f0
 800ce48:	20000ddc 	.word	0x20000ddc

0800ce4c <cdcIfAvailable>:

uint32_t cdcIfAvailable(void)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	af00      	add	r7, sp, #0
  return qbufferAvailable(&q_rx);
 800ce50:	4802      	ldr	r0, [pc, #8]	; (800ce5c <cdcIfAvailable+0x10>)
 800ce52:	f7f4 fbfa 	bl	800164a <qbufferAvailable>
 800ce56:	4603      	mov	r3, r0
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	20000dc8 	.word	0x20000dc8

0800ce60 <cdcIfRead>:

uint8_t cdcIfRead(void)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	71fb      	strb	r3, [r7, #7]

  qbufferRead(&q_rx, &ret, 1);
 800ce6a:	1dfb      	adds	r3, r7, #7
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	4619      	mov	r1, r3
 800ce70:	4803      	ldr	r0, [pc, #12]	; (800ce80 <cdcIfRead+0x20>)
 800ce72:	f7f4 fb92 	bl	800159a <qbufferRead>

  return ret;
 800ce76:	79fb      	ldrb	r3, [r7, #7]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3708      	adds	r7, #8
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	20000dc8 	.word	0x20000dc8

0800ce84 <cdcIfWrite>:

uint32_t cdcIfWrite(uint8_t *p_data, uint32_t length)
{
 800ce84:	b590      	push	{r4, r7, lr}
 800ce86:	b087      	sub	sp, #28
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
  uint32_t tx_len;
  uint32_t buf_len;
  uint32_t sent_len;


  if (cdcIfIsConnected() != true) return 0;
 800ce8e:	f000 f84f 	bl	800cf30 <cdcIfIsConnected>
 800ce92:	4603      	mov	r3, r0
 800ce94:	f083 0301 	eor.w	r3, r3, #1
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d001      	beq.n	800cea2 <cdcIfWrite+0x1e>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	e03f      	b.n	800cf22 <cdcIfWrite+0x9e>


  sent_len = 0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	613b      	str	r3, [r7, #16]

  pre_time = HAL_GetTick();
 800cea6:	f7f6 fac7 	bl	8003438 <HAL_GetTick>
 800ceaa:	60f8      	str	r0, [r7, #12]
  while(sent_len < length)
 800ceac:	e030      	b.n	800cf10 <cdcIfWrite+0x8c>
  {
    buf_len = (q_tx.len - qbufferAvailable(&q_tx)) - 1;
 800ceae:	4b1f      	ldr	r3, [pc, #124]	; (800cf2c <cdcIfWrite+0xa8>)
 800ceb0:	689c      	ldr	r4, [r3, #8]
 800ceb2:	481e      	ldr	r0, [pc, #120]	; (800cf2c <cdcIfWrite+0xa8>)
 800ceb4:	f7f4 fbc9 	bl	800164a <qbufferAvailable>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	1ae3      	subs	r3, r4, r3
 800cebc:	3b01      	subs	r3, #1
 800cebe:	60bb      	str	r3, [r7, #8]
    tx_len = length;
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	617b      	str	r3, [r7, #20]

    if (tx_len > buf_len)
 800cec4:	697a      	ldr	r2, [r7, #20]
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d901      	bls.n	800ced0 <cdcIfWrite+0x4c>
    {
      tx_len = buf_len;
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	617b      	str	r3, [r7, #20]
    }

    if (tx_len > 0)
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00c      	beq.n	800cef0 <cdcIfWrite+0x6c>
    {
      qbufferWrite(&q_tx, p_data, tx_len);
 800ced6:	697a      	ldr	r2, [r7, #20]
 800ced8:	6879      	ldr	r1, [r7, #4]
 800ceda:	4814      	ldr	r0, [pc, #80]	; (800cf2c <cdcIfWrite+0xa8>)
 800cedc:	f7f4 fb01 	bl	80014e2 <qbufferWrite>
      p_data += tx_len;
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	4413      	add	r3, r2
 800cee6:	607b      	str	r3, [r7, #4]
      sent_len += tx_len;
 800cee8:	693a      	ldr	r2, [r7, #16]
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	4413      	add	r3, r2
 800ceee:	613b      	str	r3, [r7, #16]
    }

    if (cdcIfIsConnected() != true)
 800cef0:	f000 f81e 	bl	800cf30 <cdcIfIsConnected>
 800cef4:	4603      	mov	r3, r0
 800cef6:	f083 0301 	eor.w	r3, r3, #1
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d10c      	bne.n	800cf1a <cdcIfWrite+0x96>
    {
      break;
    }

    if (millis()-pre_time >= 100)
 800cf00:	f7f4 f905 	bl	800110e <millis>
 800cf04:	4603      	mov	r3, r0
 800cf06:	461a      	mov	r2, r3
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	1ad3      	subs	r3, r2, r3
 800cf0c:	2b63      	cmp	r3, #99	; 0x63
 800cf0e:	d806      	bhi.n	800cf1e <cdcIfWrite+0x9a>
  while(sent_len < length)
 800cf10:	693a      	ldr	r2, [r7, #16]
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d3ca      	bcc.n	800ceae <cdcIfWrite+0x2a>
 800cf18:	e002      	b.n	800cf20 <cdcIfWrite+0x9c>
      break;
 800cf1a:	bf00      	nop
 800cf1c:	e000      	b.n	800cf20 <cdcIfWrite+0x9c>
    {
      break;
 800cf1e:	bf00      	nop
    }
  }

  return sent_len;
 800cf20:	693b      	ldr	r3, [r7, #16]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	371c      	adds	r7, #28
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd90      	pop	{r4, r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	20000ddc 	.word	0x20000ddc

0800cf30 <cdcIfIsConnected>:
{
  return LineCoding.bitrate;
}

bool cdcIfIsConnected(void)
{
 800cf30:	b480      	push	{r7}
 800cf32:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.pClassData == NULL)
 800cf34:	4b11      	ldr	r3, [pc, #68]	; (800cf7c <cdcIfIsConnected+0x4c>)
 800cf36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d101      	bne.n	800cf42 <cdcIfIsConnected+0x12>
  {
    return false;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	e017      	b.n	800cf72 <cdcIfIsConnected+0x42>
  }
  if (is_opened == false)
 800cf42:	4b0f      	ldr	r3, [pc, #60]	; (800cf80 <cdcIfIsConnected+0x50>)
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	f083 0301 	eor.w	r3, r3, #1
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d001      	beq.n	800cf54 <cdcIfIsConnected+0x24>
  {
    return false;
 800cf50:	2300      	movs	r3, #0
 800cf52:	e00e      	b.n	800cf72 <cdcIfIsConnected+0x42>
  }
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 800cf54:	4b09      	ldr	r3, [pc, #36]	; (800cf7c <cdcIfIsConnected+0x4c>)
 800cf56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	2b03      	cmp	r3, #3
 800cf5e:	d001      	beq.n	800cf64 <cdcIfIsConnected+0x34>
  {
    return false;
 800cf60:	2300      	movs	r3, #0
 800cf62:	e006      	b.n	800cf72 <cdcIfIsConnected+0x42>
  }
  if (hUsbDeviceFS.dev_config == 0)
 800cf64:	4b05      	ldr	r3, [pc, #20]	; (800cf7c <cdcIfIsConnected+0x4c>)
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d101      	bne.n	800cf70 <cdcIfIsConnected+0x40>
  {
    return false;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	e000      	b.n	800cf72 <cdcIfIsConnected+0x42>
  }

  return true;
 800cf70:	2301      	movs	r3, #1
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr
 800cf7c:	20000af8 	.word	0x20000af8
 800cf80:	20001df0 	.word	0x20001df0

0800cf84 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	6039      	str	r1, [r7, #0]
 800cf8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	2212      	movs	r2, #18
 800cf94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800cf96:	4b03      	ldr	r3, [pc, #12]	; (800cfa4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	2000015c 	.word	0x2000015c

0800cfa8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	4603      	mov	r3, r0
 800cfb0:	6039      	str	r1, [r7, #0]
 800cfb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	2204      	movs	r2, #4
 800cfb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cfba:	4b03      	ldr	r3, [pc, #12]	; (800cfc8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr
 800cfc8:	20000170 	.word	0x20000170

0800cfcc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	6039      	str	r1, [r7, #0]
 800cfd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cfd8:	79fb      	ldrb	r3, [r7, #7]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d105      	bne.n	800cfea <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cfde:	683a      	ldr	r2, [r7, #0]
 800cfe0:	4907      	ldr	r1, [pc, #28]	; (800d000 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cfe2:	4808      	ldr	r0, [pc, #32]	; (800d004 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cfe4:	f7ff fcdd 	bl	800c9a2 <USBD_GetString>
 800cfe8:	e004      	b.n	800cff4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cfea:	683a      	ldr	r2, [r7, #0]
 800cfec:	4904      	ldr	r1, [pc, #16]	; (800d000 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cfee:	4805      	ldr	r0, [pc, #20]	; (800d004 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cff0:	f7ff fcd7 	bl	800c9a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cff4:	4b02      	ldr	r3, [pc, #8]	; (800d000 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3708      	adds	r7, #8
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	20002df4 	.word	0x20002df4
 800d004:	08010c70 	.word	0x08010c70

0800d008 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	4603      	mov	r3, r0
 800d010:	6039      	str	r1, [r7, #0]
 800d012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d014:	683a      	ldr	r2, [r7, #0]
 800d016:	4904      	ldr	r1, [pc, #16]	; (800d028 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d018:	4804      	ldr	r0, [pc, #16]	; (800d02c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d01a:	f7ff fcc2 	bl	800c9a2 <USBD_GetString>
  return USBD_StrDesc;
 800d01e:	4b02      	ldr	r3, [pc, #8]	; (800d028 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d020:	4618      	mov	r0, r3
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	20002df4 	.word	0x20002df4
 800d02c:	08010c88 	.word	0x08010c88

0800d030 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	4603      	mov	r3, r0
 800d038:	6039      	str	r1, [r7, #0]
 800d03a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	221a      	movs	r2, #26
 800d040:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d042:	f000 f843 	bl	800d0cc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d046:	4b02      	ldr	r3, [pc, #8]	; (800d050 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	20000174 	.word	0x20000174

0800d054 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	4603      	mov	r3, r0
 800d05c:	6039      	str	r1, [r7, #0]
 800d05e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d060:	79fb      	ldrb	r3, [r7, #7]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d105      	bne.n	800d072 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d066:	683a      	ldr	r2, [r7, #0]
 800d068:	4907      	ldr	r1, [pc, #28]	; (800d088 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d06a:	4808      	ldr	r0, [pc, #32]	; (800d08c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d06c:	f7ff fc99 	bl	800c9a2 <USBD_GetString>
 800d070:	e004      	b.n	800d07c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d072:	683a      	ldr	r2, [r7, #0]
 800d074:	4904      	ldr	r1, [pc, #16]	; (800d088 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d076:	4805      	ldr	r0, [pc, #20]	; (800d08c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d078:	f7ff fc93 	bl	800c9a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d07c:	4b02      	ldr	r3, [pc, #8]	; (800d088 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	20002df4 	.word	0x20002df4
 800d08c:	08010c9c 	.word	0x08010c9c

0800d090 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	4603      	mov	r3, r0
 800d098:	6039      	str	r1, [r7, #0]
 800d09a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d09c:	79fb      	ldrb	r3, [r7, #7]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d105      	bne.n	800d0ae <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d0a2:	683a      	ldr	r2, [r7, #0]
 800d0a4:	4907      	ldr	r1, [pc, #28]	; (800d0c4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d0a6:	4808      	ldr	r0, [pc, #32]	; (800d0c8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d0a8:	f7ff fc7b 	bl	800c9a2 <USBD_GetString>
 800d0ac:	e004      	b.n	800d0b8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	4904      	ldr	r1, [pc, #16]	; (800d0c4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d0b2:	4805      	ldr	r0, [pc, #20]	; (800d0c8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d0b4:	f7ff fc75 	bl	800c9a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0b8:	4b02      	ldr	r3, [pc, #8]	; (800d0c4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	20002df4 	.word	0x20002df4
 800d0c8:	08010ca8 	.word	0x08010ca8

0800d0cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d0d2:	4b0f      	ldr	r3, [pc, #60]	; (800d110 <Get_SerialNum+0x44>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d0d8:	4b0e      	ldr	r3, [pc, #56]	; (800d114 <Get_SerialNum+0x48>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d0de:	4b0e      	ldr	r3, [pc, #56]	; (800d118 <Get_SerialNum+0x4c>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d009      	beq.n	800d106 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d0f2:	2208      	movs	r2, #8
 800d0f4:	4909      	ldr	r1, [pc, #36]	; (800d11c <Get_SerialNum+0x50>)
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f000 f814 	bl	800d124 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d0fc:	2204      	movs	r2, #4
 800d0fe:	4908      	ldr	r1, [pc, #32]	; (800d120 <Get_SerialNum+0x54>)
 800d100:	68b8      	ldr	r0, [r7, #8]
 800d102:	f000 f80f 	bl	800d124 <IntToUnicode>
  }
}
 800d106:	bf00      	nop
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	1fff7590 	.word	0x1fff7590
 800d114:	1fff7594 	.word	0x1fff7594
 800d118:	1fff7598 	.word	0x1fff7598
 800d11c:	20000176 	.word	0x20000176
 800d120:	20000186 	.word	0x20000186

0800d124 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d124:	b480      	push	{r7}
 800d126:	b087      	sub	sp, #28
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	4613      	mov	r3, r2
 800d130:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d132:	2300      	movs	r3, #0
 800d134:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d136:	2300      	movs	r3, #0
 800d138:	75fb      	strb	r3, [r7, #23]
 800d13a:	e027      	b.n	800d18c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	0f1b      	lsrs	r3, r3, #28
 800d140:	2b09      	cmp	r3, #9
 800d142:	d80b      	bhi.n	800d15c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	0f1b      	lsrs	r3, r3, #28
 800d148:	b2da      	uxtb	r2, r3
 800d14a:	7dfb      	ldrb	r3, [r7, #23]
 800d14c:	005b      	lsls	r3, r3, #1
 800d14e:	4619      	mov	r1, r3
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	440b      	add	r3, r1
 800d154:	3230      	adds	r2, #48	; 0x30
 800d156:	b2d2      	uxtb	r2, r2
 800d158:	701a      	strb	r2, [r3, #0]
 800d15a:	e00a      	b.n	800d172 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	0f1b      	lsrs	r3, r3, #28
 800d160:	b2da      	uxtb	r2, r3
 800d162:	7dfb      	ldrb	r3, [r7, #23]
 800d164:	005b      	lsls	r3, r3, #1
 800d166:	4619      	mov	r1, r3
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	440b      	add	r3, r1
 800d16c:	3237      	adds	r2, #55	; 0x37
 800d16e:	b2d2      	uxtb	r2, r2
 800d170:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	011b      	lsls	r3, r3, #4
 800d176:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d178:	7dfb      	ldrb	r3, [r7, #23]
 800d17a:	005b      	lsls	r3, r3, #1
 800d17c:	3301      	adds	r3, #1
 800d17e:	68ba      	ldr	r2, [r7, #8]
 800d180:	4413      	add	r3, r2
 800d182:	2200      	movs	r2, #0
 800d184:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d186:	7dfb      	ldrb	r3, [r7, #23]
 800d188:	3301      	adds	r3, #1
 800d18a:	75fb      	strb	r3, [r7, #23]
 800d18c:	7dfa      	ldrb	r2, [r7, #23]
 800d18e:	79fb      	ldrb	r3, [r7, #7]
 800d190:	429a      	cmp	r2, r3
 800d192:	d3d3      	bcc.n	800d13c <IntToUnicode+0x18>
  }
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop
 800d198:	371c      	adds	r7, #28
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr
	...

0800d1a4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b098      	sub	sp, #96	; 0x60
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d1ac:	f107 030c 	add.w	r3, r7, #12
 800d1b0:	2254      	movs	r2, #84	; 0x54
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f001 fb33 	bl	800e820 <memset>
  if(pcdHandle->Instance==USB)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a15      	ldr	r2, [pc, #84]	; (800d214 <HAL_PCD_MspInit+0x70>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d123      	bne.n	800d20c <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d1c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d1c8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800d1ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d1ce:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d1d0:	f107 030c 	add.w	r3, r7, #12
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7f9 f879 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d001      	beq.n	800d1e4 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800d1e0:	f7f3 fff6 	bl	80011d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d1e4:	4b0c      	ldr	r3, [pc, #48]	; (800d218 <HAL_PCD_MspInit+0x74>)
 800d1e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1e8:	4a0b      	ldr	r2, [pc, #44]	; (800d218 <HAL_PCD_MspInit+0x74>)
 800d1ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d1ee:	6593      	str	r3, [r2, #88]	; 0x58
 800d1f0:	4b09      	ldr	r3, [pc, #36]	; (800d218 <HAL_PCD_MspInit+0x74>)
 800d1f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1f8:	60bb      	str	r3, [r7, #8]
 800d1fa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	2100      	movs	r1, #0
 800d200:	2014      	movs	r0, #20
 800d202:	f7f6 fa22 	bl	800364a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d206:	2014      	movs	r0, #20
 800d208:	f7f6 fa39 	bl	800367e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d20c:	bf00      	nop
 800d20e:	3760      	adds	r7, #96	; 0x60
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	40005c00 	.word	0x40005c00
 800d218:	40021000 	.word	0x40021000

0800d21c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800d230:	4619      	mov	r1, r3
 800d232:	4610      	mov	r0, r2
 800d234:	f7fe fc18 	bl	800ba68 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d238:	bf00      	nop
 800d23a:	3708      	adds	r7, #8
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	460b      	mov	r3, r1
 800d24a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800d252:	78fa      	ldrb	r2, [r7, #3]
 800d254:	6879      	ldr	r1, [r7, #4]
 800d256:	4613      	mov	r3, r2
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	4413      	add	r3, r2
 800d25c:	00db      	lsls	r3, r3, #3
 800d25e:	440b      	add	r3, r1
 800d260:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	78fb      	ldrb	r3, [r7, #3]
 800d268:	4619      	mov	r1, r3
 800d26a:	f7fe fc52 	bl	800bb12 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d26e:	bf00      	nop
 800d270:	3708      	adds	r7, #8
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b082      	sub	sp, #8
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	460b      	mov	r3, r1
 800d280:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800d288:	78fa      	ldrb	r2, [r7, #3]
 800d28a:	6879      	ldr	r1, [r7, #4]
 800d28c:	4613      	mov	r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	4413      	add	r3, r2
 800d292:	00db      	lsls	r3, r3, #3
 800d294:	440b      	add	r3, r1
 800d296:	3324      	adds	r3, #36	; 0x24
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	78fb      	ldrb	r3, [r7, #3]
 800d29c:	4619      	mov	r1, r3
 800d29e:	f7fe fc9b 	bl	800bbd8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d2a2:	bf00      	nop
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b082      	sub	sp, #8
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fe fdaf 	bl	800be1c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d2be:	bf00      	nop
 800d2c0:	3708      	adds	r7, #8
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b084      	sub	sp, #16
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	795b      	ldrb	r3, [r3, #5]
 800d2d6:	2b02      	cmp	r3, #2
 800d2d8:	d001      	beq.n	800d2de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d2da:	f7f3 ff79 	bl	80011d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d2e4:	7bfa      	ldrb	r2, [r7, #15]
 800d2e6:	4611      	mov	r1, r2
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7fe fd59 	bl	800bda0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7fe fd05 	bl	800bd04 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d2fa:	bf00      	nop
 800d2fc:	3710      	adds	r7, #16
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
	...

0800d304 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d312:	4618      	mov	r0, r3
 800d314:	f7fe fd54 	bl	800bdc0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	7a5b      	ldrb	r3, [r3, #9]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d005      	beq.n	800d32c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d320:	4b04      	ldr	r3, [pc, #16]	; (800d334 <HAL_PCD_SuspendCallback+0x30>)
 800d322:	691b      	ldr	r3, [r3, #16]
 800d324:	4a03      	ldr	r2, [pc, #12]	; (800d334 <HAL_PCD_SuspendCallback+0x30>)
 800d326:	f043 0306 	orr.w	r3, r3, #6
 800d32a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d32c:	bf00      	nop
 800d32e:	3708      	adds	r7, #8
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	e000ed00 	.word	0xe000ed00

0800d338 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	7a5b      	ldrb	r3, [r3, #9]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d007      	beq.n	800d358 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d348:	4b08      	ldr	r3, [pc, #32]	; (800d36c <HAL_PCD_ResumeCallback+0x34>)
 800d34a:	691b      	ldr	r3, [r3, #16]
 800d34c:	4a07      	ldr	r2, [pc, #28]	; (800d36c <HAL_PCD_ResumeCallback+0x34>)
 800d34e:	f023 0306 	bic.w	r3, r3, #6
 800d352:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d354:	f000 f9f8 	bl	800d748 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d35e:	4618      	mov	r0, r3
 800d360:	f7fe fd44 	bl	800bdec <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d364:	bf00      	nop
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	e000ed00 	.word	0xe000ed00

0800d370 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d378:	4a2b      	ldr	r2, [pc, #172]	; (800d428 <USBD_LL_Init+0xb8>)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4a29      	ldr	r2, [pc, #164]	; (800d428 <USBD_LL_Init+0xb8>)
 800d384:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d388:	4b27      	ldr	r3, [pc, #156]	; (800d428 <USBD_LL_Init+0xb8>)
 800d38a:	4a28      	ldr	r2, [pc, #160]	; (800d42c <USBD_LL_Init+0xbc>)
 800d38c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d38e:	4b26      	ldr	r3, [pc, #152]	; (800d428 <USBD_LL_Init+0xb8>)
 800d390:	2208      	movs	r2, #8
 800d392:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d394:	4b24      	ldr	r3, [pc, #144]	; (800d428 <USBD_LL_Init+0xb8>)
 800d396:	2202      	movs	r2, #2
 800d398:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d39a:	4b23      	ldr	r3, [pc, #140]	; (800d428 <USBD_LL_Init+0xb8>)
 800d39c:	2202      	movs	r2, #2
 800d39e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d3a0:	4b21      	ldr	r3, [pc, #132]	; (800d428 <USBD_LL_Init+0xb8>)
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d3a6:	4b20      	ldr	r3, [pc, #128]	; (800d428 <USBD_LL_Init+0xb8>)
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d3ac:	4b1e      	ldr	r3, [pc, #120]	; (800d428 <USBD_LL_Init+0xb8>)
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d3b2:	4b1d      	ldr	r3, [pc, #116]	; (800d428 <USBD_LL_Init+0xb8>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d3b8:	481b      	ldr	r0, [pc, #108]	; (800d428 <USBD_LL_Init+0xb8>)
 800d3ba:	f7f6 fbef 	bl	8003b9c <HAL_PCD_Init>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d001      	beq.n	800d3c8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800d3c4:	f7f3 ff04 	bl	80011d0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3ce:	2318      	movs	r3, #24
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	2100      	movs	r1, #0
 800d3d4:	f7f8 f8a9 	bl	800552a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3de:	2358      	movs	r3, #88	; 0x58
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	2180      	movs	r1, #128	; 0x80
 800d3e4:	f7f8 f8a1 	bl	800552a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3ee:	23c0      	movs	r3, #192	; 0xc0
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	2181      	movs	r1, #129	; 0x81
 800d3f4:	f7f8 f899 	bl	800552a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3fe:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d402:	2200      	movs	r2, #0
 800d404:	2101      	movs	r1, #1
 800d406:	f7f8 f890 	bl	800552a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d410:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d414:	2200      	movs	r2, #0
 800d416:	2182      	movs	r1, #130	; 0x82
 800d418:	f7f8 f887 	bl	800552a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3708      	adds	r7, #8
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	20002ff4 	.word	0x20002ff4
 800d42c:	40005c00 	.word	0x40005c00

0800d430 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d438:	2300      	movs	r3, #0
 800d43a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d446:	4618      	mov	r0, r3
 800d448:	f7f6 fc76 	bl	8003d38 <HAL_PCD_Start>
 800d44c:	4603      	mov	r3, r0
 800d44e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d450:	7bfb      	ldrb	r3, [r7, #15]
 800d452:	4618      	mov	r0, r3
 800d454:	f000 f97e 	bl	800d754 <USBD_Get_USB_Status>
 800d458:	4603      	mov	r3, r0
 800d45a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d45c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d466:	b580      	push	{r7, lr}
 800d468:	b084      	sub	sp, #16
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
 800d46e:	4608      	mov	r0, r1
 800d470:	4611      	mov	r1, r2
 800d472:	461a      	mov	r2, r3
 800d474:	4603      	mov	r3, r0
 800d476:	70fb      	strb	r3, [r7, #3]
 800d478:	460b      	mov	r3, r1
 800d47a:	70bb      	strb	r3, [r7, #2]
 800d47c:	4613      	mov	r3, r2
 800d47e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d480:	2300      	movs	r3, #0
 800d482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d48e:	78bb      	ldrb	r3, [r7, #2]
 800d490:	883a      	ldrh	r2, [r7, #0]
 800d492:	78f9      	ldrb	r1, [r7, #3]
 800d494:	f7f6 fdbd 	bl	8004012 <HAL_PCD_EP_Open>
 800d498:	4603      	mov	r3, r0
 800d49a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f000 f958 	bl	800d754 <USBD_Get_USB_Status>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b084      	sub	sp, #16
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4cc:	78fa      	ldrb	r2, [r7, #3]
 800d4ce:	4611      	mov	r1, r2
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7f6 fdfb 	bl	80040cc <HAL_PCD_EP_Close>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4da:	7bfb      	ldrb	r3, [r7, #15]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f000 f939 	bl	800d754 <USBD_Get_USB_Status>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d500:	2300      	movs	r3, #0
 800d502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d50a:	78fa      	ldrb	r2, [r7, #3]
 800d50c:	4611      	mov	r1, r2
 800d50e:	4618      	mov	r0, r3
 800d510:	f7f6 fea4 	bl	800425c <HAL_PCD_EP_SetStall>
 800d514:	4603      	mov	r3, r0
 800d516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d518:	7bfb      	ldrb	r3, [r7, #15]
 800d51a:	4618      	mov	r0, r3
 800d51c:	f000 f91a 	bl	800d754 <USBD_Get_USB_Status>
 800d520:	4603      	mov	r3, r0
 800d522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d524:	7bbb      	ldrb	r3, [r7, #14]
}
 800d526:	4618      	mov	r0, r3
 800d528:	3710      	adds	r7, #16
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d52e:	b580      	push	{r7, lr}
 800d530:	b084      	sub	sp, #16
 800d532:	af00      	add	r7, sp, #0
 800d534:	6078      	str	r0, [r7, #4]
 800d536:	460b      	mov	r3, r1
 800d538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d53a:	2300      	movs	r3, #0
 800d53c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d53e:	2300      	movs	r3, #0
 800d540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d548:	78fa      	ldrb	r2, [r7, #3]
 800d54a:	4611      	mov	r1, r2
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7f6 fed7 	bl	8004300 <HAL_PCD_EP_ClrStall>
 800d552:	4603      	mov	r3, r0
 800d554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d556:	7bfb      	ldrb	r3, [r7, #15]
 800d558:	4618      	mov	r0, r3
 800d55a:	f000 f8fb 	bl	800d754 <USBD_Get_USB_Status>
 800d55e:	4603      	mov	r3, r0
 800d560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d562:	7bbb      	ldrb	r3, [r7, #14]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3710      	adds	r7, #16
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d57e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d584:	2b00      	cmp	r3, #0
 800d586:	da0b      	bge.n	800d5a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d588:	78fb      	ldrb	r3, [r7, #3]
 800d58a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d58e:	68f9      	ldr	r1, [r7, #12]
 800d590:	4613      	mov	r3, r2
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	4413      	add	r3, r2
 800d596:	00db      	lsls	r3, r3, #3
 800d598:	440b      	add	r3, r1
 800d59a:	3312      	adds	r3, #18
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	e00b      	b.n	800d5b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d5a0:	78fb      	ldrb	r3, [r7, #3]
 800d5a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d5a6:	68f9      	ldr	r1, [r7, #12]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	009b      	lsls	r3, r3, #2
 800d5ac:	4413      	add	r3, r2
 800d5ae:	00db      	lsls	r3, r3, #3
 800d5b0:	440b      	add	r3, r1
 800d5b2:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800d5b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3714      	adds	r7, #20
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d5de:	78fa      	ldrb	r2, [r7, #3]
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7f6 fcf1 	bl	8003fca <HAL_PCD_SetAddress>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5ec:	7bfb      	ldrb	r3, [r7, #15]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f000 f8b0 	bl	800d754 <USBD_Get_USB_Status>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b086      	sub	sp, #24
 800d606:	af00      	add	r7, sp, #0
 800d608:	60f8      	str	r0, [r7, #12]
 800d60a:	607a      	str	r2, [r7, #4]
 800d60c:	603b      	str	r3, [r7, #0]
 800d60e:	460b      	mov	r3, r1
 800d610:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d612:	2300      	movs	r3, #0
 800d614:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d616:	2300      	movs	r3, #0
 800d618:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d620:	7af9      	ldrb	r1, [r7, #11]
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	f7f6 fde2 	bl	80041ee <HAL_PCD_EP_Transmit>
 800d62a:	4603      	mov	r3, r0
 800d62c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d62e:	7dfb      	ldrb	r3, [r7, #23]
 800d630:	4618      	mov	r0, r3
 800d632:	f000 f88f 	bl	800d754 <USBD_Get_USB_Status>
 800d636:	4603      	mov	r3, r0
 800d638:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d63a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3718      	adds	r7, #24
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b086      	sub	sp, #24
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	607a      	str	r2, [r7, #4]
 800d64e:	603b      	str	r3, [r7, #0]
 800d650:	460b      	mov	r3, r1
 800d652:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d654:	2300      	movs	r3, #0
 800d656:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d658:	2300      	movs	r3, #0
 800d65a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d662:	7af9      	ldrb	r1, [r7, #11]
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	f7f6 fd78 	bl	800415c <HAL_PCD_EP_Receive>
 800d66c:	4603      	mov	r3, r0
 800d66e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d670:	7dfb      	ldrb	r3, [r7, #23]
 800d672:	4618      	mov	r0, r3
 800d674:	f000 f86e 	bl	800d754 <USBD_Get_USB_Status>
 800d678:	4603      	mov	r3, r0
 800d67a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d67c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3718      	adds	r7, #24
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b082      	sub	sp, #8
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
 800d68e:	460b      	mov	r3, r1
 800d690:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d698:	78fa      	ldrb	r2, [r7, #3]
 800d69a:	4611      	mov	r1, r2
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7f6 fd8e 	bl	80041be <HAL_PCD_EP_GetRxCount>
 800d6a2:	4603      	mov	r3, r0
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d6b8:	78fb      	ldrb	r3, [r7, #3]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d002      	beq.n	800d6c4 <HAL_PCDEx_LPM_Callback+0x18>
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d013      	beq.n	800d6ea <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d6c2:	e023      	b.n	800d70c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	7a5b      	ldrb	r3, [r3, #9]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d007      	beq.n	800d6dc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d6cc:	f000 f83c 	bl	800d748 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6d0:	4b10      	ldr	r3, [pc, #64]	; (800d714 <HAL_PCDEx_LPM_Callback+0x68>)
 800d6d2:	691b      	ldr	r3, [r3, #16]
 800d6d4:	4a0f      	ldr	r2, [pc, #60]	; (800d714 <HAL_PCDEx_LPM_Callback+0x68>)
 800d6d6:	f023 0306 	bic.w	r3, r3, #6
 800d6da:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7fe fb82 	bl	800bdec <USBD_LL_Resume>
    break;
 800d6e8:	e010      	b.n	800d70c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fe fb65 	bl	800bdc0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	7a5b      	ldrb	r3, [r3, #9]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d005      	beq.n	800d70a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6fe:	4b05      	ldr	r3, [pc, #20]	; (800d714 <HAL_PCDEx_LPM_Callback+0x68>)
 800d700:	691b      	ldr	r3, [r3, #16]
 800d702:	4a04      	ldr	r2, [pc, #16]	; (800d714 <HAL_PCDEx_LPM_Callback+0x68>)
 800d704:	f043 0306 	orr.w	r3, r3, #6
 800d708:	6113      	str	r3, [r2, #16]
    break;
 800d70a:	bf00      	nop
}
 800d70c:	bf00      	nop
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	e000ed00 	.word	0xe000ed00

0800d718 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d718:	b480      	push	{r7}
 800d71a:	b083      	sub	sp, #12
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d720:	4b03      	ldr	r3, [pc, #12]	; (800d730 <USBD_static_malloc+0x18>)
}
 800d722:	4618      	mov	r0, r3
 800d724:	370c      	adds	r7, #12
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	200032d0 	.word	0x200032d0

0800d734 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]

}
 800d73c:	bf00      	nop
 800d73e:	370c      	adds	r7, #12
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d74c:	f7f3 fce6 	bl	800111c <SystemClock_Config>
}
 800d750:	bf00      	nop
 800d752:	bd80      	pop	{r7, pc}

0800d754 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	4603      	mov	r3, r0
 800d75c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d75e:	2300      	movs	r3, #0
 800d760:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d762:	79fb      	ldrb	r3, [r7, #7]
 800d764:	2b03      	cmp	r3, #3
 800d766:	d817      	bhi.n	800d798 <USBD_Get_USB_Status+0x44>
 800d768:	a201      	add	r2, pc, #4	; (adr r2, 800d770 <USBD_Get_USB_Status+0x1c>)
 800d76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d76e:	bf00      	nop
 800d770:	0800d781 	.word	0x0800d781
 800d774:	0800d787 	.word	0x0800d787
 800d778:	0800d78d 	.word	0x0800d78d
 800d77c:	0800d793 	.word	0x0800d793
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	73fb      	strb	r3, [r7, #15]
    break;
 800d784:	e00b      	b.n	800d79e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d786:	2303      	movs	r3, #3
 800d788:	73fb      	strb	r3, [r7, #15]
    break;
 800d78a:	e008      	b.n	800d79e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d78c:	2301      	movs	r3, #1
 800d78e:	73fb      	strb	r3, [r7, #15]
    break;
 800d790:	e005      	b.n	800d79e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d792:	2303      	movs	r3, #3
 800d794:	73fb      	strb	r3, [r7, #15]
    break;
 800d796:	e002      	b.n	800d79e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d798:	2303      	movs	r3, #3
 800d79a:	73fb      	strb	r3, [r7, #15]
    break;
 800d79c:	bf00      	nop
  }
  return usb_status;
 800d79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3714      	adds	r7, #20
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <main>:


#include "main.h"

int main(void)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	af00      	add	r7, sp, #0
  hwInit();
 800d7b0:	f7f5 fd48 	bl	8003244 <hwInit>
  apInit();
 800d7b4:	f7f3 fc24 	bl	8001000 <apInit>

  apMain();
 800d7b8:	f7f3 fc2b 	bl	8001012 <apMain>
 800d7bc:	2300      	movs	r3, #0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	bd80      	pop	{r7, pc}

0800d7c2 <sulp>:
 800d7c2:	b570      	push	{r4, r5, r6, lr}
 800d7c4:	4604      	mov	r4, r0
 800d7c6:	460d      	mov	r5, r1
 800d7c8:	ec45 4b10 	vmov	d0, r4, r5
 800d7cc:	4616      	mov	r6, r2
 800d7ce:	f002 f8d3 	bl	800f978 <__ulp>
 800d7d2:	ec51 0b10 	vmov	r0, r1, d0
 800d7d6:	b17e      	cbz	r6, 800d7f8 <sulp+0x36>
 800d7d8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d7dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	dd09      	ble.n	800d7f8 <sulp+0x36>
 800d7e4:	051b      	lsls	r3, r3, #20
 800d7e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d7ea:	2400      	movs	r4, #0
 800d7ec:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d7f0:	4622      	mov	r2, r4
 800d7f2:	462b      	mov	r3, r5
 800d7f4:	f7f2 ff30 	bl	8000658 <__aeabi_dmul>
 800d7f8:	bd70      	pop	{r4, r5, r6, pc}
 800d7fa:	0000      	movs	r0, r0
 800d7fc:	0000      	movs	r0, r0
	...

0800d800 <_strtod_l>:
 800d800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d804:	ed2d 8b02 	vpush	{d8}
 800d808:	b09b      	sub	sp, #108	; 0x6c
 800d80a:	4604      	mov	r4, r0
 800d80c:	9213      	str	r2, [sp, #76]	; 0x4c
 800d80e:	2200      	movs	r2, #0
 800d810:	9216      	str	r2, [sp, #88]	; 0x58
 800d812:	460d      	mov	r5, r1
 800d814:	f04f 0800 	mov.w	r8, #0
 800d818:	f04f 0900 	mov.w	r9, #0
 800d81c:	460a      	mov	r2, r1
 800d81e:	9215      	str	r2, [sp, #84]	; 0x54
 800d820:	7811      	ldrb	r1, [r2, #0]
 800d822:	292b      	cmp	r1, #43	; 0x2b
 800d824:	d04c      	beq.n	800d8c0 <_strtod_l+0xc0>
 800d826:	d83a      	bhi.n	800d89e <_strtod_l+0x9e>
 800d828:	290d      	cmp	r1, #13
 800d82a:	d834      	bhi.n	800d896 <_strtod_l+0x96>
 800d82c:	2908      	cmp	r1, #8
 800d82e:	d834      	bhi.n	800d89a <_strtod_l+0x9a>
 800d830:	2900      	cmp	r1, #0
 800d832:	d03d      	beq.n	800d8b0 <_strtod_l+0xb0>
 800d834:	2200      	movs	r2, #0
 800d836:	920a      	str	r2, [sp, #40]	; 0x28
 800d838:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d83a:	7832      	ldrb	r2, [r6, #0]
 800d83c:	2a30      	cmp	r2, #48	; 0x30
 800d83e:	f040 80b4 	bne.w	800d9aa <_strtod_l+0x1aa>
 800d842:	7872      	ldrb	r2, [r6, #1]
 800d844:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d848:	2a58      	cmp	r2, #88	; 0x58
 800d84a:	d170      	bne.n	800d92e <_strtod_l+0x12e>
 800d84c:	9302      	str	r3, [sp, #8]
 800d84e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d850:	9301      	str	r3, [sp, #4]
 800d852:	ab16      	add	r3, sp, #88	; 0x58
 800d854:	9300      	str	r3, [sp, #0]
 800d856:	4a8e      	ldr	r2, [pc, #568]	; (800da90 <_strtod_l+0x290>)
 800d858:	ab17      	add	r3, sp, #92	; 0x5c
 800d85a:	a915      	add	r1, sp, #84	; 0x54
 800d85c:	4620      	mov	r0, r4
 800d85e:	f001 f971 	bl	800eb44 <__gethex>
 800d862:	f010 070f 	ands.w	r7, r0, #15
 800d866:	4605      	mov	r5, r0
 800d868:	d005      	beq.n	800d876 <_strtod_l+0x76>
 800d86a:	2f06      	cmp	r7, #6
 800d86c:	d12a      	bne.n	800d8c4 <_strtod_l+0xc4>
 800d86e:	3601      	adds	r6, #1
 800d870:	2300      	movs	r3, #0
 800d872:	9615      	str	r6, [sp, #84]	; 0x54
 800d874:	930a      	str	r3, [sp, #40]	; 0x28
 800d876:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d878:	2b00      	cmp	r3, #0
 800d87a:	f040 857f 	bne.w	800e37c <_strtod_l+0xb7c>
 800d87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d880:	b1db      	cbz	r3, 800d8ba <_strtod_l+0xba>
 800d882:	4642      	mov	r2, r8
 800d884:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d888:	ec43 2b10 	vmov	d0, r2, r3
 800d88c:	b01b      	add	sp, #108	; 0x6c
 800d88e:	ecbd 8b02 	vpop	{d8}
 800d892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d896:	2920      	cmp	r1, #32
 800d898:	d1cc      	bne.n	800d834 <_strtod_l+0x34>
 800d89a:	3201      	adds	r2, #1
 800d89c:	e7bf      	b.n	800d81e <_strtod_l+0x1e>
 800d89e:	292d      	cmp	r1, #45	; 0x2d
 800d8a0:	d1c8      	bne.n	800d834 <_strtod_l+0x34>
 800d8a2:	2101      	movs	r1, #1
 800d8a4:	910a      	str	r1, [sp, #40]	; 0x28
 800d8a6:	1c51      	adds	r1, r2, #1
 800d8a8:	9115      	str	r1, [sp, #84]	; 0x54
 800d8aa:	7852      	ldrb	r2, [r2, #1]
 800d8ac:	2a00      	cmp	r2, #0
 800d8ae:	d1c3      	bne.n	800d838 <_strtod_l+0x38>
 800d8b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8b2:	9515      	str	r5, [sp, #84]	; 0x54
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	f040 855f 	bne.w	800e378 <_strtod_l+0xb78>
 800d8ba:	4642      	mov	r2, r8
 800d8bc:	464b      	mov	r3, r9
 800d8be:	e7e3      	b.n	800d888 <_strtod_l+0x88>
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	e7ef      	b.n	800d8a4 <_strtod_l+0xa4>
 800d8c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d8c6:	b13a      	cbz	r2, 800d8d8 <_strtod_l+0xd8>
 800d8c8:	2135      	movs	r1, #53	; 0x35
 800d8ca:	a818      	add	r0, sp, #96	; 0x60
 800d8cc:	f002 f951 	bl	800fb72 <__copybits>
 800d8d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f001 fd24 	bl	800f320 <_Bfree>
 800d8d8:	3f01      	subs	r7, #1
 800d8da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d8dc:	2f04      	cmp	r7, #4
 800d8de:	d806      	bhi.n	800d8ee <_strtod_l+0xee>
 800d8e0:	e8df f007 	tbb	[pc, r7]
 800d8e4:	201d0314 	.word	0x201d0314
 800d8e8:	14          	.byte	0x14
 800d8e9:	00          	.byte	0x00
 800d8ea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800d8ee:	05e9      	lsls	r1, r5, #23
 800d8f0:	bf48      	it	mi
 800d8f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800d8f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d8fa:	0d1b      	lsrs	r3, r3, #20
 800d8fc:	051b      	lsls	r3, r3, #20
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1b9      	bne.n	800d876 <_strtod_l+0x76>
 800d902:	f001 f819 	bl	800e938 <__errno>
 800d906:	2322      	movs	r3, #34	; 0x22
 800d908:	6003      	str	r3, [r0, #0]
 800d90a:	e7b4      	b.n	800d876 <_strtod_l+0x76>
 800d90c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800d910:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d914:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d918:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d91c:	e7e7      	b.n	800d8ee <_strtod_l+0xee>
 800d91e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800da98 <_strtod_l+0x298>
 800d922:	e7e4      	b.n	800d8ee <_strtod_l+0xee>
 800d924:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d928:	f04f 38ff 	mov.w	r8, #4294967295
 800d92c:	e7df      	b.n	800d8ee <_strtod_l+0xee>
 800d92e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d930:	1c5a      	adds	r2, r3, #1
 800d932:	9215      	str	r2, [sp, #84]	; 0x54
 800d934:	785b      	ldrb	r3, [r3, #1]
 800d936:	2b30      	cmp	r3, #48	; 0x30
 800d938:	d0f9      	beq.n	800d92e <_strtod_l+0x12e>
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d09b      	beq.n	800d876 <_strtod_l+0x76>
 800d93e:	2301      	movs	r3, #1
 800d940:	f04f 0a00 	mov.w	sl, #0
 800d944:	9304      	str	r3, [sp, #16]
 800d946:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d948:	930b      	str	r3, [sp, #44]	; 0x2c
 800d94a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d94e:	46d3      	mov	fp, sl
 800d950:	220a      	movs	r2, #10
 800d952:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d954:	7806      	ldrb	r6, [r0, #0]
 800d956:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d95a:	b2d9      	uxtb	r1, r3
 800d95c:	2909      	cmp	r1, #9
 800d95e:	d926      	bls.n	800d9ae <_strtod_l+0x1ae>
 800d960:	494c      	ldr	r1, [pc, #304]	; (800da94 <_strtod_l+0x294>)
 800d962:	2201      	movs	r2, #1
 800d964:	f000 ff64 	bl	800e830 <strncmp>
 800d968:	2800      	cmp	r0, #0
 800d96a:	d030      	beq.n	800d9ce <_strtod_l+0x1ce>
 800d96c:	2000      	movs	r0, #0
 800d96e:	4632      	mov	r2, r6
 800d970:	9005      	str	r0, [sp, #20]
 800d972:	465e      	mov	r6, fp
 800d974:	4603      	mov	r3, r0
 800d976:	2a65      	cmp	r2, #101	; 0x65
 800d978:	d001      	beq.n	800d97e <_strtod_l+0x17e>
 800d97a:	2a45      	cmp	r2, #69	; 0x45
 800d97c:	d113      	bne.n	800d9a6 <_strtod_l+0x1a6>
 800d97e:	b91e      	cbnz	r6, 800d988 <_strtod_l+0x188>
 800d980:	9a04      	ldr	r2, [sp, #16]
 800d982:	4302      	orrs	r2, r0
 800d984:	d094      	beq.n	800d8b0 <_strtod_l+0xb0>
 800d986:	2600      	movs	r6, #0
 800d988:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d98a:	1c6a      	adds	r2, r5, #1
 800d98c:	9215      	str	r2, [sp, #84]	; 0x54
 800d98e:	786a      	ldrb	r2, [r5, #1]
 800d990:	2a2b      	cmp	r2, #43	; 0x2b
 800d992:	d074      	beq.n	800da7e <_strtod_l+0x27e>
 800d994:	2a2d      	cmp	r2, #45	; 0x2d
 800d996:	d078      	beq.n	800da8a <_strtod_l+0x28a>
 800d998:	f04f 0c00 	mov.w	ip, #0
 800d99c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d9a0:	2909      	cmp	r1, #9
 800d9a2:	d97f      	bls.n	800daa4 <_strtod_l+0x2a4>
 800d9a4:	9515      	str	r5, [sp, #84]	; 0x54
 800d9a6:	2700      	movs	r7, #0
 800d9a8:	e09e      	b.n	800dae8 <_strtod_l+0x2e8>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	e7c8      	b.n	800d940 <_strtod_l+0x140>
 800d9ae:	f1bb 0f08 	cmp.w	fp, #8
 800d9b2:	bfd8      	it	le
 800d9b4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d9b6:	f100 0001 	add.w	r0, r0, #1
 800d9ba:	bfda      	itte	le
 800d9bc:	fb02 3301 	mlale	r3, r2, r1, r3
 800d9c0:	9309      	strle	r3, [sp, #36]	; 0x24
 800d9c2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800d9c6:	f10b 0b01 	add.w	fp, fp, #1
 800d9ca:	9015      	str	r0, [sp, #84]	; 0x54
 800d9cc:	e7c1      	b.n	800d952 <_strtod_l+0x152>
 800d9ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9d0:	1c5a      	adds	r2, r3, #1
 800d9d2:	9215      	str	r2, [sp, #84]	; 0x54
 800d9d4:	785a      	ldrb	r2, [r3, #1]
 800d9d6:	f1bb 0f00 	cmp.w	fp, #0
 800d9da:	d037      	beq.n	800da4c <_strtod_l+0x24c>
 800d9dc:	9005      	str	r0, [sp, #20]
 800d9de:	465e      	mov	r6, fp
 800d9e0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d9e4:	2b09      	cmp	r3, #9
 800d9e6:	d912      	bls.n	800da0e <_strtod_l+0x20e>
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	e7c4      	b.n	800d976 <_strtod_l+0x176>
 800d9ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9ee:	1c5a      	adds	r2, r3, #1
 800d9f0:	9215      	str	r2, [sp, #84]	; 0x54
 800d9f2:	785a      	ldrb	r2, [r3, #1]
 800d9f4:	3001      	adds	r0, #1
 800d9f6:	2a30      	cmp	r2, #48	; 0x30
 800d9f8:	d0f8      	beq.n	800d9ec <_strtod_l+0x1ec>
 800d9fa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d9fe:	2b08      	cmp	r3, #8
 800da00:	f200 84c1 	bhi.w	800e386 <_strtod_l+0xb86>
 800da04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da06:	9005      	str	r0, [sp, #20]
 800da08:	2000      	movs	r0, #0
 800da0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800da0c:	4606      	mov	r6, r0
 800da0e:	3a30      	subs	r2, #48	; 0x30
 800da10:	f100 0301 	add.w	r3, r0, #1
 800da14:	d014      	beq.n	800da40 <_strtod_l+0x240>
 800da16:	9905      	ldr	r1, [sp, #20]
 800da18:	4419      	add	r1, r3
 800da1a:	9105      	str	r1, [sp, #20]
 800da1c:	4633      	mov	r3, r6
 800da1e:	eb00 0c06 	add.w	ip, r0, r6
 800da22:	210a      	movs	r1, #10
 800da24:	4563      	cmp	r3, ip
 800da26:	d113      	bne.n	800da50 <_strtod_l+0x250>
 800da28:	1833      	adds	r3, r6, r0
 800da2a:	2b08      	cmp	r3, #8
 800da2c:	f106 0601 	add.w	r6, r6, #1
 800da30:	4406      	add	r6, r0
 800da32:	dc1a      	bgt.n	800da6a <_strtod_l+0x26a>
 800da34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da36:	230a      	movs	r3, #10
 800da38:	fb03 2301 	mla	r3, r3, r1, r2
 800da3c:	9309      	str	r3, [sp, #36]	; 0x24
 800da3e:	2300      	movs	r3, #0
 800da40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800da42:	1c51      	adds	r1, r2, #1
 800da44:	9115      	str	r1, [sp, #84]	; 0x54
 800da46:	7852      	ldrb	r2, [r2, #1]
 800da48:	4618      	mov	r0, r3
 800da4a:	e7c9      	b.n	800d9e0 <_strtod_l+0x1e0>
 800da4c:	4658      	mov	r0, fp
 800da4e:	e7d2      	b.n	800d9f6 <_strtod_l+0x1f6>
 800da50:	2b08      	cmp	r3, #8
 800da52:	f103 0301 	add.w	r3, r3, #1
 800da56:	dc03      	bgt.n	800da60 <_strtod_l+0x260>
 800da58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800da5a:	434f      	muls	r7, r1
 800da5c:	9709      	str	r7, [sp, #36]	; 0x24
 800da5e:	e7e1      	b.n	800da24 <_strtod_l+0x224>
 800da60:	2b10      	cmp	r3, #16
 800da62:	bfd8      	it	le
 800da64:	fb01 fa0a 	mulle.w	sl, r1, sl
 800da68:	e7dc      	b.n	800da24 <_strtod_l+0x224>
 800da6a:	2e10      	cmp	r6, #16
 800da6c:	bfdc      	itt	le
 800da6e:	230a      	movle	r3, #10
 800da70:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800da74:	e7e3      	b.n	800da3e <_strtod_l+0x23e>
 800da76:	2300      	movs	r3, #0
 800da78:	9305      	str	r3, [sp, #20]
 800da7a:	2301      	movs	r3, #1
 800da7c:	e780      	b.n	800d980 <_strtod_l+0x180>
 800da7e:	f04f 0c00 	mov.w	ip, #0
 800da82:	1caa      	adds	r2, r5, #2
 800da84:	9215      	str	r2, [sp, #84]	; 0x54
 800da86:	78aa      	ldrb	r2, [r5, #2]
 800da88:	e788      	b.n	800d99c <_strtod_l+0x19c>
 800da8a:	f04f 0c01 	mov.w	ip, #1
 800da8e:	e7f8      	b.n	800da82 <_strtod_l+0x282>
 800da90:	08010d1c 	.word	0x08010d1c
 800da94:	08010d0c 	.word	0x08010d0c
 800da98:	7ff00000 	.word	0x7ff00000
 800da9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800da9e:	1c51      	adds	r1, r2, #1
 800daa0:	9115      	str	r1, [sp, #84]	; 0x54
 800daa2:	7852      	ldrb	r2, [r2, #1]
 800daa4:	2a30      	cmp	r2, #48	; 0x30
 800daa6:	d0f9      	beq.n	800da9c <_strtod_l+0x29c>
 800daa8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800daac:	2908      	cmp	r1, #8
 800daae:	f63f af7a 	bhi.w	800d9a6 <_strtod_l+0x1a6>
 800dab2:	3a30      	subs	r2, #48	; 0x30
 800dab4:	9208      	str	r2, [sp, #32]
 800dab6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dab8:	920c      	str	r2, [sp, #48]	; 0x30
 800daba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dabc:	1c57      	adds	r7, r2, #1
 800dabe:	9715      	str	r7, [sp, #84]	; 0x54
 800dac0:	7852      	ldrb	r2, [r2, #1]
 800dac2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800dac6:	f1be 0f09 	cmp.w	lr, #9
 800daca:	d938      	bls.n	800db3e <_strtod_l+0x33e>
 800dacc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dace:	1a7f      	subs	r7, r7, r1
 800dad0:	2f08      	cmp	r7, #8
 800dad2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800dad6:	dc03      	bgt.n	800dae0 <_strtod_l+0x2e0>
 800dad8:	9908      	ldr	r1, [sp, #32]
 800dada:	428f      	cmp	r7, r1
 800dadc:	bfa8      	it	ge
 800dade:	460f      	movge	r7, r1
 800dae0:	f1bc 0f00 	cmp.w	ip, #0
 800dae4:	d000      	beq.n	800dae8 <_strtod_l+0x2e8>
 800dae6:	427f      	negs	r7, r7
 800dae8:	2e00      	cmp	r6, #0
 800daea:	d14f      	bne.n	800db8c <_strtod_l+0x38c>
 800daec:	9904      	ldr	r1, [sp, #16]
 800daee:	4301      	orrs	r1, r0
 800daf0:	f47f aec1 	bne.w	800d876 <_strtod_l+0x76>
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	f47f aedb 	bne.w	800d8b0 <_strtod_l+0xb0>
 800dafa:	2a69      	cmp	r2, #105	; 0x69
 800dafc:	d029      	beq.n	800db52 <_strtod_l+0x352>
 800dafe:	dc26      	bgt.n	800db4e <_strtod_l+0x34e>
 800db00:	2a49      	cmp	r2, #73	; 0x49
 800db02:	d026      	beq.n	800db52 <_strtod_l+0x352>
 800db04:	2a4e      	cmp	r2, #78	; 0x4e
 800db06:	f47f aed3 	bne.w	800d8b0 <_strtod_l+0xb0>
 800db0a:	499b      	ldr	r1, [pc, #620]	; (800dd78 <_strtod_l+0x578>)
 800db0c:	a815      	add	r0, sp, #84	; 0x54
 800db0e:	f001 fa59 	bl	800efc4 <__match>
 800db12:	2800      	cmp	r0, #0
 800db14:	f43f aecc 	beq.w	800d8b0 <_strtod_l+0xb0>
 800db18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	2b28      	cmp	r3, #40	; 0x28
 800db1e:	d12f      	bne.n	800db80 <_strtod_l+0x380>
 800db20:	4996      	ldr	r1, [pc, #600]	; (800dd7c <_strtod_l+0x57c>)
 800db22:	aa18      	add	r2, sp, #96	; 0x60
 800db24:	a815      	add	r0, sp, #84	; 0x54
 800db26:	f001 fa61 	bl	800efec <__hexnan>
 800db2a:	2805      	cmp	r0, #5
 800db2c:	d128      	bne.n	800db80 <_strtod_l+0x380>
 800db2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800db30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800db34:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800db38:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800db3c:	e69b      	b.n	800d876 <_strtod_l+0x76>
 800db3e:	9f08      	ldr	r7, [sp, #32]
 800db40:	210a      	movs	r1, #10
 800db42:	fb01 2107 	mla	r1, r1, r7, r2
 800db46:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800db4a:	9208      	str	r2, [sp, #32]
 800db4c:	e7b5      	b.n	800daba <_strtod_l+0x2ba>
 800db4e:	2a6e      	cmp	r2, #110	; 0x6e
 800db50:	e7d9      	b.n	800db06 <_strtod_l+0x306>
 800db52:	498b      	ldr	r1, [pc, #556]	; (800dd80 <_strtod_l+0x580>)
 800db54:	a815      	add	r0, sp, #84	; 0x54
 800db56:	f001 fa35 	bl	800efc4 <__match>
 800db5a:	2800      	cmp	r0, #0
 800db5c:	f43f aea8 	beq.w	800d8b0 <_strtod_l+0xb0>
 800db60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db62:	4988      	ldr	r1, [pc, #544]	; (800dd84 <_strtod_l+0x584>)
 800db64:	3b01      	subs	r3, #1
 800db66:	a815      	add	r0, sp, #84	; 0x54
 800db68:	9315      	str	r3, [sp, #84]	; 0x54
 800db6a:	f001 fa2b 	bl	800efc4 <__match>
 800db6e:	b910      	cbnz	r0, 800db76 <_strtod_l+0x376>
 800db70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db72:	3301      	adds	r3, #1
 800db74:	9315      	str	r3, [sp, #84]	; 0x54
 800db76:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800dd94 <_strtod_l+0x594>
 800db7a:	f04f 0800 	mov.w	r8, #0
 800db7e:	e67a      	b.n	800d876 <_strtod_l+0x76>
 800db80:	4881      	ldr	r0, [pc, #516]	; (800dd88 <_strtod_l+0x588>)
 800db82:	f000 ff1d 	bl	800e9c0 <nan>
 800db86:	ec59 8b10 	vmov	r8, r9, d0
 800db8a:	e674      	b.n	800d876 <_strtod_l+0x76>
 800db8c:	9b05      	ldr	r3, [sp, #20]
 800db8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db90:	1afb      	subs	r3, r7, r3
 800db92:	f1bb 0f00 	cmp.w	fp, #0
 800db96:	bf08      	it	eq
 800db98:	46b3      	moveq	fp, r6
 800db9a:	2e10      	cmp	r6, #16
 800db9c:	9308      	str	r3, [sp, #32]
 800db9e:	4635      	mov	r5, r6
 800dba0:	bfa8      	it	ge
 800dba2:	2510      	movge	r5, #16
 800dba4:	f7f2 fcde 	bl	8000564 <__aeabi_ui2d>
 800dba8:	2e09      	cmp	r6, #9
 800dbaa:	4680      	mov	r8, r0
 800dbac:	4689      	mov	r9, r1
 800dbae:	dd13      	ble.n	800dbd8 <_strtod_l+0x3d8>
 800dbb0:	4b76      	ldr	r3, [pc, #472]	; (800dd8c <_strtod_l+0x58c>)
 800dbb2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dbb6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800dbba:	f7f2 fd4d 	bl	8000658 <__aeabi_dmul>
 800dbbe:	4680      	mov	r8, r0
 800dbc0:	4650      	mov	r0, sl
 800dbc2:	4689      	mov	r9, r1
 800dbc4:	f7f2 fcce 	bl	8000564 <__aeabi_ui2d>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	460b      	mov	r3, r1
 800dbcc:	4640      	mov	r0, r8
 800dbce:	4649      	mov	r1, r9
 800dbd0:	f7f2 fb8c 	bl	80002ec <__adddf3>
 800dbd4:	4680      	mov	r8, r0
 800dbd6:	4689      	mov	r9, r1
 800dbd8:	2e0f      	cmp	r6, #15
 800dbda:	dc38      	bgt.n	800dc4e <_strtod_l+0x44e>
 800dbdc:	9b08      	ldr	r3, [sp, #32]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	f43f ae49 	beq.w	800d876 <_strtod_l+0x76>
 800dbe4:	dd24      	ble.n	800dc30 <_strtod_l+0x430>
 800dbe6:	2b16      	cmp	r3, #22
 800dbe8:	dc0b      	bgt.n	800dc02 <_strtod_l+0x402>
 800dbea:	4968      	ldr	r1, [pc, #416]	; (800dd8c <_strtod_l+0x58c>)
 800dbec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dbf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbf4:	4642      	mov	r2, r8
 800dbf6:	464b      	mov	r3, r9
 800dbf8:	f7f2 fd2e 	bl	8000658 <__aeabi_dmul>
 800dbfc:	4680      	mov	r8, r0
 800dbfe:	4689      	mov	r9, r1
 800dc00:	e639      	b.n	800d876 <_strtod_l+0x76>
 800dc02:	9a08      	ldr	r2, [sp, #32]
 800dc04:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	db20      	blt.n	800dc4e <_strtod_l+0x44e>
 800dc0c:	4c5f      	ldr	r4, [pc, #380]	; (800dd8c <_strtod_l+0x58c>)
 800dc0e:	f1c6 060f 	rsb	r6, r6, #15
 800dc12:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800dc16:	4642      	mov	r2, r8
 800dc18:	464b      	mov	r3, r9
 800dc1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc1e:	f7f2 fd1b 	bl	8000658 <__aeabi_dmul>
 800dc22:	9b08      	ldr	r3, [sp, #32]
 800dc24:	1b9e      	subs	r6, r3, r6
 800dc26:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800dc2a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dc2e:	e7e3      	b.n	800dbf8 <_strtod_l+0x3f8>
 800dc30:	9b08      	ldr	r3, [sp, #32]
 800dc32:	3316      	adds	r3, #22
 800dc34:	db0b      	blt.n	800dc4e <_strtod_l+0x44e>
 800dc36:	9b05      	ldr	r3, [sp, #20]
 800dc38:	1bdf      	subs	r7, r3, r7
 800dc3a:	4b54      	ldr	r3, [pc, #336]	; (800dd8c <_strtod_l+0x58c>)
 800dc3c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800dc40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc44:	4640      	mov	r0, r8
 800dc46:	4649      	mov	r1, r9
 800dc48:	f7f2 fe30 	bl	80008ac <__aeabi_ddiv>
 800dc4c:	e7d6      	b.n	800dbfc <_strtod_l+0x3fc>
 800dc4e:	9b08      	ldr	r3, [sp, #32]
 800dc50:	1b75      	subs	r5, r6, r5
 800dc52:	441d      	add	r5, r3
 800dc54:	2d00      	cmp	r5, #0
 800dc56:	dd70      	ble.n	800dd3a <_strtod_l+0x53a>
 800dc58:	f015 030f 	ands.w	r3, r5, #15
 800dc5c:	d00a      	beq.n	800dc74 <_strtod_l+0x474>
 800dc5e:	494b      	ldr	r1, [pc, #300]	; (800dd8c <_strtod_l+0x58c>)
 800dc60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc64:	4642      	mov	r2, r8
 800dc66:	464b      	mov	r3, r9
 800dc68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc6c:	f7f2 fcf4 	bl	8000658 <__aeabi_dmul>
 800dc70:	4680      	mov	r8, r0
 800dc72:	4689      	mov	r9, r1
 800dc74:	f035 050f 	bics.w	r5, r5, #15
 800dc78:	d04d      	beq.n	800dd16 <_strtod_l+0x516>
 800dc7a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800dc7e:	dd22      	ble.n	800dcc6 <_strtod_l+0x4c6>
 800dc80:	2500      	movs	r5, #0
 800dc82:	46ab      	mov	fp, r5
 800dc84:	9509      	str	r5, [sp, #36]	; 0x24
 800dc86:	9505      	str	r5, [sp, #20]
 800dc88:	2322      	movs	r3, #34	; 0x22
 800dc8a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800dd94 <_strtod_l+0x594>
 800dc8e:	6023      	str	r3, [r4, #0]
 800dc90:	f04f 0800 	mov.w	r8, #0
 800dc94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	f43f aded 	beq.w	800d876 <_strtod_l+0x76>
 800dc9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dc9e:	4620      	mov	r0, r4
 800dca0:	f001 fb3e 	bl	800f320 <_Bfree>
 800dca4:	9905      	ldr	r1, [sp, #20]
 800dca6:	4620      	mov	r0, r4
 800dca8:	f001 fb3a 	bl	800f320 <_Bfree>
 800dcac:	4659      	mov	r1, fp
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f001 fb36 	bl	800f320 <_Bfree>
 800dcb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	f001 fb32 	bl	800f320 <_Bfree>
 800dcbc:	4629      	mov	r1, r5
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f001 fb2e 	bl	800f320 <_Bfree>
 800dcc4:	e5d7      	b.n	800d876 <_strtod_l+0x76>
 800dcc6:	4b32      	ldr	r3, [pc, #200]	; (800dd90 <_strtod_l+0x590>)
 800dcc8:	9304      	str	r3, [sp, #16]
 800dcca:	2300      	movs	r3, #0
 800dccc:	112d      	asrs	r5, r5, #4
 800dcce:	4640      	mov	r0, r8
 800dcd0:	4649      	mov	r1, r9
 800dcd2:	469a      	mov	sl, r3
 800dcd4:	2d01      	cmp	r5, #1
 800dcd6:	dc21      	bgt.n	800dd1c <_strtod_l+0x51c>
 800dcd8:	b10b      	cbz	r3, 800dcde <_strtod_l+0x4de>
 800dcda:	4680      	mov	r8, r0
 800dcdc:	4689      	mov	r9, r1
 800dcde:	492c      	ldr	r1, [pc, #176]	; (800dd90 <_strtod_l+0x590>)
 800dce0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800dce4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800dce8:	4642      	mov	r2, r8
 800dcea:	464b      	mov	r3, r9
 800dcec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcf0:	f7f2 fcb2 	bl	8000658 <__aeabi_dmul>
 800dcf4:	4b27      	ldr	r3, [pc, #156]	; (800dd94 <_strtod_l+0x594>)
 800dcf6:	460a      	mov	r2, r1
 800dcf8:	400b      	ands	r3, r1
 800dcfa:	4927      	ldr	r1, [pc, #156]	; (800dd98 <_strtod_l+0x598>)
 800dcfc:	428b      	cmp	r3, r1
 800dcfe:	4680      	mov	r8, r0
 800dd00:	d8be      	bhi.n	800dc80 <_strtod_l+0x480>
 800dd02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dd06:	428b      	cmp	r3, r1
 800dd08:	bf86      	itte	hi
 800dd0a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800dd9c <_strtod_l+0x59c>
 800dd0e:	f04f 38ff 	movhi.w	r8, #4294967295
 800dd12:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800dd16:	2300      	movs	r3, #0
 800dd18:	9304      	str	r3, [sp, #16]
 800dd1a:	e07b      	b.n	800de14 <_strtod_l+0x614>
 800dd1c:	07ea      	lsls	r2, r5, #31
 800dd1e:	d505      	bpl.n	800dd2c <_strtod_l+0x52c>
 800dd20:	9b04      	ldr	r3, [sp, #16]
 800dd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd26:	f7f2 fc97 	bl	8000658 <__aeabi_dmul>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	9a04      	ldr	r2, [sp, #16]
 800dd2e:	3208      	adds	r2, #8
 800dd30:	f10a 0a01 	add.w	sl, sl, #1
 800dd34:	106d      	asrs	r5, r5, #1
 800dd36:	9204      	str	r2, [sp, #16]
 800dd38:	e7cc      	b.n	800dcd4 <_strtod_l+0x4d4>
 800dd3a:	d0ec      	beq.n	800dd16 <_strtod_l+0x516>
 800dd3c:	426d      	negs	r5, r5
 800dd3e:	f015 020f 	ands.w	r2, r5, #15
 800dd42:	d00a      	beq.n	800dd5a <_strtod_l+0x55a>
 800dd44:	4b11      	ldr	r3, [pc, #68]	; (800dd8c <_strtod_l+0x58c>)
 800dd46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd4a:	4640      	mov	r0, r8
 800dd4c:	4649      	mov	r1, r9
 800dd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd52:	f7f2 fdab 	bl	80008ac <__aeabi_ddiv>
 800dd56:	4680      	mov	r8, r0
 800dd58:	4689      	mov	r9, r1
 800dd5a:	112d      	asrs	r5, r5, #4
 800dd5c:	d0db      	beq.n	800dd16 <_strtod_l+0x516>
 800dd5e:	2d1f      	cmp	r5, #31
 800dd60:	dd1e      	ble.n	800dda0 <_strtod_l+0x5a0>
 800dd62:	2500      	movs	r5, #0
 800dd64:	46ab      	mov	fp, r5
 800dd66:	9509      	str	r5, [sp, #36]	; 0x24
 800dd68:	9505      	str	r5, [sp, #20]
 800dd6a:	2322      	movs	r3, #34	; 0x22
 800dd6c:	f04f 0800 	mov.w	r8, #0
 800dd70:	f04f 0900 	mov.w	r9, #0
 800dd74:	6023      	str	r3, [r4, #0]
 800dd76:	e78d      	b.n	800dc94 <_strtod_l+0x494>
 800dd78:	08010d17 	.word	0x08010d17
 800dd7c:	08010d30 	.word	0x08010d30
 800dd80:	08010d0e 	.word	0x08010d0e
 800dd84:	08010d11 	.word	0x08010d11
 800dd88:	080110ca 	.word	0x080110ca
 800dd8c:	08010f88 	.word	0x08010f88
 800dd90:	08010f60 	.word	0x08010f60
 800dd94:	7ff00000 	.word	0x7ff00000
 800dd98:	7ca00000 	.word	0x7ca00000
 800dd9c:	7fefffff 	.word	0x7fefffff
 800dda0:	f015 0310 	ands.w	r3, r5, #16
 800dda4:	bf18      	it	ne
 800dda6:	236a      	movne	r3, #106	; 0x6a
 800dda8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800e14c <_strtod_l+0x94c>
 800ddac:	9304      	str	r3, [sp, #16]
 800ddae:	4640      	mov	r0, r8
 800ddb0:	4649      	mov	r1, r9
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	07ea      	lsls	r2, r5, #31
 800ddb6:	d504      	bpl.n	800ddc2 <_strtod_l+0x5c2>
 800ddb8:	e9da 2300 	ldrd	r2, r3, [sl]
 800ddbc:	f7f2 fc4c 	bl	8000658 <__aeabi_dmul>
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	106d      	asrs	r5, r5, #1
 800ddc4:	f10a 0a08 	add.w	sl, sl, #8
 800ddc8:	d1f4      	bne.n	800ddb4 <_strtod_l+0x5b4>
 800ddca:	b10b      	cbz	r3, 800ddd0 <_strtod_l+0x5d0>
 800ddcc:	4680      	mov	r8, r0
 800ddce:	4689      	mov	r9, r1
 800ddd0:	9b04      	ldr	r3, [sp, #16]
 800ddd2:	b1bb      	cbz	r3, 800de04 <_strtod_l+0x604>
 800ddd4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ddd8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	4649      	mov	r1, r9
 800dde0:	dd10      	ble.n	800de04 <_strtod_l+0x604>
 800dde2:	2b1f      	cmp	r3, #31
 800dde4:	f340 811e 	ble.w	800e024 <_strtod_l+0x824>
 800dde8:	2b34      	cmp	r3, #52	; 0x34
 800ddea:	bfde      	ittt	le
 800ddec:	f04f 33ff 	movle.w	r3, #4294967295
 800ddf0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ddf4:	4093      	lslle	r3, r2
 800ddf6:	f04f 0800 	mov.w	r8, #0
 800ddfa:	bfcc      	ite	gt
 800ddfc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800de00:	ea03 0901 	andle.w	r9, r3, r1
 800de04:	2200      	movs	r2, #0
 800de06:	2300      	movs	r3, #0
 800de08:	4640      	mov	r0, r8
 800de0a:	4649      	mov	r1, r9
 800de0c:	f7f2 fe8c 	bl	8000b28 <__aeabi_dcmpeq>
 800de10:	2800      	cmp	r0, #0
 800de12:	d1a6      	bne.n	800dd62 <_strtod_l+0x562>
 800de14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de16:	9300      	str	r3, [sp, #0]
 800de18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de1a:	4633      	mov	r3, r6
 800de1c:	465a      	mov	r2, fp
 800de1e:	4620      	mov	r0, r4
 800de20:	f001 fae6 	bl	800f3f0 <__s2b>
 800de24:	9009      	str	r0, [sp, #36]	; 0x24
 800de26:	2800      	cmp	r0, #0
 800de28:	f43f af2a 	beq.w	800dc80 <_strtod_l+0x480>
 800de2c:	9a08      	ldr	r2, [sp, #32]
 800de2e:	9b05      	ldr	r3, [sp, #20]
 800de30:	2a00      	cmp	r2, #0
 800de32:	eba3 0307 	sub.w	r3, r3, r7
 800de36:	bfa8      	it	ge
 800de38:	2300      	movge	r3, #0
 800de3a:	930c      	str	r3, [sp, #48]	; 0x30
 800de3c:	2500      	movs	r5, #0
 800de3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800de42:	9312      	str	r3, [sp, #72]	; 0x48
 800de44:	46ab      	mov	fp, r5
 800de46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de48:	4620      	mov	r0, r4
 800de4a:	6859      	ldr	r1, [r3, #4]
 800de4c:	f001 fa28 	bl	800f2a0 <_Balloc>
 800de50:	9005      	str	r0, [sp, #20]
 800de52:	2800      	cmp	r0, #0
 800de54:	f43f af18 	beq.w	800dc88 <_strtod_l+0x488>
 800de58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de5a:	691a      	ldr	r2, [r3, #16]
 800de5c:	3202      	adds	r2, #2
 800de5e:	f103 010c 	add.w	r1, r3, #12
 800de62:	0092      	lsls	r2, r2, #2
 800de64:	300c      	adds	r0, #12
 800de66:	f000 fd9c 	bl	800e9a2 <memcpy>
 800de6a:	ec49 8b10 	vmov	d0, r8, r9
 800de6e:	aa18      	add	r2, sp, #96	; 0x60
 800de70:	a917      	add	r1, sp, #92	; 0x5c
 800de72:	4620      	mov	r0, r4
 800de74:	f001 fdf0 	bl	800fa58 <__d2b>
 800de78:	ec49 8b18 	vmov	d8, r8, r9
 800de7c:	9016      	str	r0, [sp, #88]	; 0x58
 800de7e:	2800      	cmp	r0, #0
 800de80:	f43f af02 	beq.w	800dc88 <_strtod_l+0x488>
 800de84:	2101      	movs	r1, #1
 800de86:	4620      	mov	r0, r4
 800de88:	f001 fb4a 	bl	800f520 <__i2b>
 800de8c:	4683      	mov	fp, r0
 800de8e:	2800      	cmp	r0, #0
 800de90:	f43f aefa 	beq.w	800dc88 <_strtod_l+0x488>
 800de94:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800de96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800de98:	2e00      	cmp	r6, #0
 800de9a:	bfab      	itete	ge
 800de9c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800de9e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800dea0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800dea2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800dea6:	bfac      	ite	ge
 800dea8:	eb06 0a03 	addge.w	sl, r6, r3
 800deac:	1b9f      	sublt	r7, r3, r6
 800deae:	9b04      	ldr	r3, [sp, #16]
 800deb0:	1af6      	subs	r6, r6, r3
 800deb2:	4416      	add	r6, r2
 800deb4:	4ba0      	ldr	r3, [pc, #640]	; (800e138 <_strtod_l+0x938>)
 800deb6:	3e01      	subs	r6, #1
 800deb8:	429e      	cmp	r6, r3
 800deba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800debe:	f280 80c4 	bge.w	800e04a <_strtod_l+0x84a>
 800dec2:	1b9b      	subs	r3, r3, r6
 800dec4:	2b1f      	cmp	r3, #31
 800dec6:	eba2 0203 	sub.w	r2, r2, r3
 800deca:	f04f 0101 	mov.w	r1, #1
 800dece:	f300 80b0 	bgt.w	800e032 <_strtod_l+0x832>
 800ded2:	fa01 f303 	lsl.w	r3, r1, r3
 800ded6:	930e      	str	r3, [sp, #56]	; 0x38
 800ded8:	2300      	movs	r3, #0
 800deda:	930d      	str	r3, [sp, #52]	; 0x34
 800dedc:	eb0a 0602 	add.w	r6, sl, r2
 800dee0:	9b04      	ldr	r3, [sp, #16]
 800dee2:	45b2      	cmp	sl, r6
 800dee4:	4417      	add	r7, r2
 800dee6:	441f      	add	r7, r3
 800dee8:	4653      	mov	r3, sl
 800deea:	bfa8      	it	ge
 800deec:	4633      	movge	r3, r6
 800deee:	42bb      	cmp	r3, r7
 800def0:	bfa8      	it	ge
 800def2:	463b      	movge	r3, r7
 800def4:	2b00      	cmp	r3, #0
 800def6:	bfc2      	ittt	gt
 800def8:	1af6      	subgt	r6, r6, r3
 800defa:	1aff      	subgt	r7, r7, r3
 800defc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800df00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df02:	2b00      	cmp	r3, #0
 800df04:	dd17      	ble.n	800df36 <_strtod_l+0x736>
 800df06:	4659      	mov	r1, fp
 800df08:	461a      	mov	r2, r3
 800df0a:	4620      	mov	r0, r4
 800df0c:	f001 fbc8 	bl	800f6a0 <__pow5mult>
 800df10:	4683      	mov	fp, r0
 800df12:	2800      	cmp	r0, #0
 800df14:	f43f aeb8 	beq.w	800dc88 <_strtod_l+0x488>
 800df18:	4601      	mov	r1, r0
 800df1a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800df1c:	4620      	mov	r0, r4
 800df1e:	f001 fb15 	bl	800f54c <__multiply>
 800df22:	900b      	str	r0, [sp, #44]	; 0x2c
 800df24:	2800      	cmp	r0, #0
 800df26:	f43f aeaf 	beq.w	800dc88 <_strtod_l+0x488>
 800df2a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800df2c:	4620      	mov	r0, r4
 800df2e:	f001 f9f7 	bl	800f320 <_Bfree>
 800df32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df34:	9316      	str	r3, [sp, #88]	; 0x58
 800df36:	2e00      	cmp	r6, #0
 800df38:	f300 808c 	bgt.w	800e054 <_strtod_l+0x854>
 800df3c:	9b08      	ldr	r3, [sp, #32]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	dd08      	ble.n	800df54 <_strtod_l+0x754>
 800df42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800df44:	9905      	ldr	r1, [sp, #20]
 800df46:	4620      	mov	r0, r4
 800df48:	f001 fbaa 	bl	800f6a0 <__pow5mult>
 800df4c:	9005      	str	r0, [sp, #20]
 800df4e:	2800      	cmp	r0, #0
 800df50:	f43f ae9a 	beq.w	800dc88 <_strtod_l+0x488>
 800df54:	2f00      	cmp	r7, #0
 800df56:	dd08      	ble.n	800df6a <_strtod_l+0x76a>
 800df58:	9905      	ldr	r1, [sp, #20]
 800df5a:	463a      	mov	r2, r7
 800df5c:	4620      	mov	r0, r4
 800df5e:	f001 fbf9 	bl	800f754 <__lshift>
 800df62:	9005      	str	r0, [sp, #20]
 800df64:	2800      	cmp	r0, #0
 800df66:	f43f ae8f 	beq.w	800dc88 <_strtod_l+0x488>
 800df6a:	f1ba 0f00 	cmp.w	sl, #0
 800df6e:	dd08      	ble.n	800df82 <_strtod_l+0x782>
 800df70:	4659      	mov	r1, fp
 800df72:	4652      	mov	r2, sl
 800df74:	4620      	mov	r0, r4
 800df76:	f001 fbed 	bl	800f754 <__lshift>
 800df7a:	4683      	mov	fp, r0
 800df7c:	2800      	cmp	r0, #0
 800df7e:	f43f ae83 	beq.w	800dc88 <_strtod_l+0x488>
 800df82:	9a05      	ldr	r2, [sp, #20]
 800df84:	9916      	ldr	r1, [sp, #88]	; 0x58
 800df86:	4620      	mov	r0, r4
 800df88:	f001 fc6c 	bl	800f864 <__mdiff>
 800df8c:	4605      	mov	r5, r0
 800df8e:	2800      	cmp	r0, #0
 800df90:	f43f ae7a 	beq.w	800dc88 <_strtod_l+0x488>
 800df94:	68c3      	ldr	r3, [r0, #12]
 800df96:	930b      	str	r3, [sp, #44]	; 0x2c
 800df98:	2300      	movs	r3, #0
 800df9a:	60c3      	str	r3, [r0, #12]
 800df9c:	4659      	mov	r1, fp
 800df9e:	f001 fc45 	bl	800f82c <__mcmp>
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	da60      	bge.n	800e068 <_strtod_l+0x868>
 800dfa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfa8:	ea53 0308 	orrs.w	r3, r3, r8
 800dfac:	f040 8084 	bne.w	800e0b8 <_strtod_l+0x8b8>
 800dfb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d17f      	bne.n	800e0b8 <_strtod_l+0x8b8>
 800dfb8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dfbc:	0d1b      	lsrs	r3, r3, #20
 800dfbe:	051b      	lsls	r3, r3, #20
 800dfc0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dfc4:	d978      	bls.n	800e0b8 <_strtod_l+0x8b8>
 800dfc6:	696b      	ldr	r3, [r5, #20]
 800dfc8:	b913      	cbnz	r3, 800dfd0 <_strtod_l+0x7d0>
 800dfca:	692b      	ldr	r3, [r5, #16]
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	dd73      	ble.n	800e0b8 <_strtod_l+0x8b8>
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f001 fbbd 	bl	800f754 <__lshift>
 800dfda:	4659      	mov	r1, fp
 800dfdc:	4605      	mov	r5, r0
 800dfde:	f001 fc25 	bl	800f82c <__mcmp>
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	dd68      	ble.n	800e0b8 <_strtod_l+0x8b8>
 800dfe6:	9904      	ldr	r1, [sp, #16]
 800dfe8:	4a54      	ldr	r2, [pc, #336]	; (800e13c <_strtod_l+0x93c>)
 800dfea:	464b      	mov	r3, r9
 800dfec:	2900      	cmp	r1, #0
 800dfee:	f000 8084 	beq.w	800e0fa <_strtod_l+0x8fa>
 800dff2:	ea02 0109 	and.w	r1, r2, r9
 800dff6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dffa:	dc7e      	bgt.n	800e0fa <_strtod_l+0x8fa>
 800dffc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e000:	f77f aeb3 	ble.w	800dd6a <_strtod_l+0x56a>
 800e004:	4b4e      	ldr	r3, [pc, #312]	; (800e140 <_strtod_l+0x940>)
 800e006:	4640      	mov	r0, r8
 800e008:	4649      	mov	r1, r9
 800e00a:	2200      	movs	r2, #0
 800e00c:	f7f2 fb24 	bl	8000658 <__aeabi_dmul>
 800e010:	4b4a      	ldr	r3, [pc, #296]	; (800e13c <_strtod_l+0x93c>)
 800e012:	400b      	ands	r3, r1
 800e014:	4680      	mov	r8, r0
 800e016:	4689      	mov	r9, r1
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f47f ae3f 	bne.w	800dc9c <_strtod_l+0x49c>
 800e01e:	2322      	movs	r3, #34	; 0x22
 800e020:	6023      	str	r3, [r4, #0]
 800e022:	e63b      	b.n	800dc9c <_strtod_l+0x49c>
 800e024:	f04f 32ff 	mov.w	r2, #4294967295
 800e028:	fa02 f303 	lsl.w	r3, r2, r3
 800e02c:	ea03 0808 	and.w	r8, r3, r8
 800e030:	e6e8      	b.n	800de04 <_strtod_l+0x604>
 800e032:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e036:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e03a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e03e:	36e2      	adds	r6, #226	; 0xe2
 800e040:	fa01 f306 	lsl.w	r3, r1, r6
 800e044:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800e048:	e748      	b.n	800dedc <_strtod_l+0x6dc>
 800e04a:	2100      	movs	r1, #0
 800e04c:	2301      	movs	r3, #1
 800e04e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800e052:	e743      	b.n	800dedc <_strtod_l+0x6dc>
 800e054:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e056:	4632      	mov	r2, r6
 800e058:	4620      	mov	r0, r4
 800e05a:	f001 fb7b 	bl	800f754 <__lshift>
 800e05e:	9016      	str	r0, [sp, #88]	; 0x58
 800e060:	2800      	cmp	r0, #0
 800e062:	f47f af6b 	bne.w	800df3c <_strtod_l+0x73c>
 800e066:	e60f      	b.n	800dc88 <_strtod_l+0x488>
 800e068:	46ca      	mov	sl, r9
 800e06a:	d171      	bne.n	800e150 <_strtod_l+0x950>
 800e06c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e06e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e072:	b352      	cbz	r2, 800e0ca <_strtod_l+0x8ca>
 800e074:	4a33      	ldr	r2, [pc, #204]	; (800e144 <_strtod_l+0x944>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d12a      	bne.n	800e0d0 <_strtod_l+0x8d0>
 800e07a:	9b04      	ldr	r3, [sp, #16]
 800e07c:	4641      	mov	r1, r8
 800e07e:	b1fb      	cbz	r3, 800e0c0 <_strtod_l+0x8c0>
 800e080:	4b2e      	ldr	r3, [pc, #184]	; (800e13c <_strtod_l+0x93c>)
 800e082:	ea09 0303 	and.w	r3, r9, r3
 800e086:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e08a:	f04f 32ff 	mov.w	r2, #4294967295
 800e08e:	d81a      	bhi.n	800e0c6 <_strtod_l+0x8c6>
 800e090:	0d1b      	lsrs	r3, r3, #20
 800e092:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e096:	fa02 f303 	lsl.w	r3, r2, r3
 800e09a:	4299      	cmp	r1, r3
 800e09c:	d118      	bne.n	800e0d0 <_strtod_l+0x8d0>
 800e09e:	4b2a      	ldr	r3, [pc, #168]	; (800e148 <_strtod_l+0x948>)
 800e0a0:	459a      	cmp	sl, r3
 800e0a2:	d102      	bne.n	800e0aa <_strtod_l+0x8aa>
 800e0a4:	3101      	adds	r1, #1
 800e0a6:	f43f adef 	beq.w	800dc88 <_strtod_l+0x488>
 800e0aa:	4b24      	ldr	r3, [pc, #144]	; (800e13c <_strtod_l+0x93c>)
 800e0ac:	ea0a 0303 	and.w	r3, sl, r3
 800e0b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e0b4:	f04f 0800 	mov.w	r8, #0
 800e0b8:	9b04      	ldr	r3, [sp, #16]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1a2      	bne.n	800e004 <_strtod_l+0x804>
 800e0be:	e5ed      	b.n	800dc9c <_strtod_l+0x49c>
 800e0c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e0c4:	e7e9      	b.n	800e09a <_strtod_l+0x89a>
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	e7e7      	b.n	800e09a <_strtod_l+0x89a>
 800e0ca:	ea53 0308 	orrs.w	r3, r3, r8
 800e0ce:	d08a      	beq.n	800dfe6 <_strtod_l+0x7e6>
 800e0d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0d2:	b1e3      	cbz	r3, 800e10e <_strtod_l+0x90e>
 800e0d4:	ea13 0f0a 	tst.w	r3, sl
 800e0d8:	d0ee      	beq.n	800e0b8 <_strtod_l+0x8b8>
 800e0da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0dc:	9a04      	ldr	r2, [sp, #16]
 800e0de:	4640      	mov	r0, r8
 800e0e0:	4649      	mov	r1, r9
 800e0e2:	b1c3      	cbz	r3, 800e116 <_strtod_l+0x916>
 800e0e4:	f7ff fb6d 	bl	800d7c2 <sulp>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	460b      	mov	r3, r1
 800e0ec:	ec51 0b18 	vmov	r0, r1, d8
 800e0f0:	f7f2 f8fc 	bl	80002ec <__adddf3>
 800e0f4:	4680      	mov	r8, r0
 800e0f6:	4689      	mov	r9, r1
 800e0f8:	e7de      	b.n	800e0b8 <_strtod_l+0x8b8>
 800e0fa:	4013      	ands	r3, r2
 800e0fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e100:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e104:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e108:	f04f 38ff 	mov.w	r8, #4294967295
 800e10c:	e7d4      	b.n	800e0b8 <_strtod_l+0x8b8>
 800e10e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e110:	ea13 0f08 	tst.w	r3, r8
 800e114:	e7e0      	b.n	800e0d8 <_strtod_l+0x8d8>
 800e116:	f7ff fb54 	bl	800d7c2 <sulp>
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	ec51 0b18 	vmov	r0, r1, d8
 800e122:	f7f2 f8e1 	bl	80002e8 <__aeabi_dsub>
 800e126:	2200      	movs	r2, #0
 800e128:	2300      	movs	r3, #0
 800e12a:	4680      	mov	r8, r0
 800e12c:	4689      	mov	r9, r1
 800e12e:	f7f2 fcfb 	bl	8000b28 <__aeabi_dcmpeq>
 800e132:	2800      	cmp	r0, #0
 800e134:	d0c0      	beq.n	800e0b8 <_strtod_l+0x8b8>
 800e136:	e618      	b.n	800dd6a <_strtod_l+0x56a>
 800e138:	fffffc02 	.word	0xfffffc02
 800e13c:	7ff00000 	.word	0x7ff00000
 800e140:	39500000 	.word	0x39500000
 800e144:	000fffff 	.word	0x000fffff
 800e148:	7fefffff 	.word	0x7fefffff
 800e14c:	08010d48 	.word	0x08010d48
 800e150:	4659      	mov	r1, fp
 800e152:	4628      	mov	r0, r5
 800e154:	f001 fcda 	bl	800fb0c <__ratio>
 800e158:	ec57 6b10 	vmov	r6, r7, d0
 800e15c:	ee10 0a10 	vmov	r0, s0
 800e160:	2200      	movs	r2, #0
 800e162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e166:	4639      	mov	r1, r7
 800e168:	f7f2 fcf2 	bl	8000b50 <__aeabi_dcmple>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d071      	beq.n	800e254 <_strtod_l+0xa54>
 800e170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e172:	2b00      	cmp	r3, #0
 800e174:	d17c      	bne.n	800e270 <_strtod_l+0xa70>
 800e176:	f1b8 0f00 	cmp.w	r8, #0
 800e17a:	d15a      	bne.n	800e232 <_strtod_l+0xa32>
 800e17c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e180:	2b00      	cmp	r3, #0
 800e182:	d15d      	bne.n	800e240 <_strtod_l+0xa40>
 800e184:	4b90      	ldr	r3, [pc, #576]	; (800e3c8 <_strtod_l+0xbc8>)
 800e186:	2200      	movs	r2, #0
 800e188:	4630      	mov	r0, r6
 800e18a:	4639      	mov	r1, r7
 800e18c:	f7f2 fcd6 	bl	8000b3c <__aeabi_dcmplt>
 800e190:	2800      	cmp	r0, #0
 800e192:	d15c      	bne.n	800e24e <_strtod_l+0xa4e>
 800e194:	4630      	mov	r0, r6
 800e196:	4639      	mov	r1, r7
 800e198:	4b8c      	ldr	r3, [pc, #560]	; (800e3cc <_strtod_l+0xbcc>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	f7f2 fa5c 	bl	8000658 <__aeabi_dmul>
 800e1a0:	4606      	mov	r6, r0
 800e1a2:	460f      	mov	r7, r1
 800e1a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e1a8:	9606      	str	r6, [sp, #24]
 800e1aa:	9307      	str	r3, [sp, #28]
 800e1ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e1b4:	4b86      	ldr	r3, [pc, #536]	; (800e3d0 <_strtod_l+0xbd0>)
 800e1b6:	ea0a 0303 	and.w	r3, sl, r3
 800e1ba:	930d      	str	r3, [sp, #52]	; 0x34
 800e1bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e1be:	4b85      	ldr	r3, [pc, #532]	; (800e3d4 <_strtod_l+0xbd4>)
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	f040 8090 	bne.w	800e2e6 <_strtod_l+0xae6>
 800e1c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800e1ca:	ec49 8b10 	vmov	d0, r8, r9
 800e1ce:	f001 fbd3 	bl	800f978 <__ulp>
 800e1d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1d6:	ec51 0b10 	vmov	r0, r1, d0
 800e1da:	f7f2 fa3d 	bl	8000658 <__aeabi_dmul>
 800e1de:	4642      	mov	r2, r8
 800e1e0:	464b      	mov	r3, r9
 800e1e2:	f7f2 f883 	bl	80002ec <__adddf3>
 800e1e6:	460b      	mov	r3, r1
 800e1e8:	4979      	ldr	r1, [pc, #484]	; (800e3d0 <_strtod_l+0xbd0>)
 800e1ea:	4a7b      	ldr	r2, [pc, #492]	; (800e3d8 <_strtod_l+0xbd8>)
 800e1ec:	4019      	ands	r1, r3
 800e1ee:	4291      	cmp	r1, r2
 800e1f0:	4680      	mov	r8, r0
 800e1f2:	d944      	bls.n	800e27e <_strtod_l+0xa7e>
 800e1f4:	ee18 2a90 	vmov	r2, s17
 800e1f8:	4b78      	ldr	r3, [pc, #480]	; (800e3dc <_strtod_l+0xbdc>)
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d104      	bne.n	800e208 <_strtod_l+0xa08>
 800e1fe:	ee18 3a10 	vmov	r3, s16
 800e202:	3301      	adds	r3, #1
 800e204:	f43f ad40 	beq.w	800dc88 <_strtod_l+0x488>
 800e208:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800e3dc <_strtod_l+0xbdc>
 800e20c:	f04f 38ff 	mov.w	r8, #4294967295
 800e210:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e212:	4620      	mov	r0, r4
 800e214:	f001 f884 	bl	800f320 <_Bfree>
 800e218:	9905      	ldr	r1, [sp, #20]
 800e21a:	4620      	mov	r0, r4
 800e21c:	f001 f880 	bl	800f320 <_Bfree>
 800e220:	4659      	mov	r1, fp
 800e222:	4620      	mov	r0, r4
 800e224:	f001 f87c 	bl	800f320 <_Bfree>
 800e228:	4629      	mov	r1, r5
 800e22a:	4620      	mov	r0, r4
 800e22c:	f001 f878 	bl	800f320 <_Bfree>
 800e230:	e609      	b.n	800de46 <_strtod_l+0x646>
 800e232:	f1b8 0f01 	cmp.w	r8, #1
 800e236:	d103      	bne.n	800e240 <_strtod_l+0xa40>
 800e238:	f1b9 0f00 	cmp.w	r9, #0
 800e23c:	f43f ad95 	beq.w	800dd6a <_strtod_l+0x56a>
 800e240:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800e398 <_strtod_l+0xb98>
 800e244:	4f60      	ldr	r7, [pc, #384]	; (800e3c8 <_strtod_l+0xbc8>)
 800e246:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e24a:	2600      	movs	r6, #0
 800e24c:	e7ae      	b.n	800e1ac <_strtod_l+0x9ac>
 800e24e:	4f5f      	ldr	r7, [pc, #380]	; (800e3cc <_strtod_l+0xbcc>)
 800e250:	2600      	movs	r6, #0
 800e252:	e7a7      	b.n	800e1a4 <_strtod_l+0x9a4>
 800e254:	4b5d      	ldr	r3, [pc, #372]	; (800e3cc <_strtod_l+0xbcc>)
 800e256:	4630      	mov	r0, r6
 800e258:	4639      	mov	r1, r7
 800e25a:	2200      	movs	r2, #0
 800e25c:	f7f2 f9fc 	bl	8000658 <__aeabi_dmul>
 800e260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e262:	4606      	mov	r6, r0
 800e264:	460f      	mov	r7, r1
 800e266:	2b00      	cmp	r3, #0
 800e268:	d09c      	beq.n	800e1a4 <_strtod_l+0x9a4>
 800e26a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e26e:	e79d      	b.n	800e1ac <_strtod_l+0x9ac>
 800e270:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e3a0 <_strtod_l+0xba0>
 800e274:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e278:	ec57 6b17 	vmov	r6, r7, d7
 800e27c:	e796      	b.n	800e1ac <_strtod_l+0x9ac>
 800e27e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e282:	9b04      	ldr	r3, [sp, #16]
 800e284:	46ca      	mov	sl, r9
 800e286:	2b00      	cmp	r3, #0
 800e288:	d1c2      	bne.n	800e210 <_strtod_l+0xa10>
 800e28a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e28e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e290:	0d1b      	lsrs	r3, r3, #20
 800e292:	051b      	lsls	r3, r3, #20
 800e294:	429a      	cmp	r2, r3
 800e296:	d1bb      	bne.n	800e210 <_strtod_l+0xa10>
 800e298:	4630      	mov	r0, r6
 800e29a:	4639      	mov	r1, r7
 800e29c:	f7f2 fd14 	bl	8000cc8 <__aeabi_d2lz>
 800e2a0:	f7f2 f9ac 	bl	80005fc <__aeabi_l2d>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	4639      	mov	r1, r7
 800e2ac:	f7f2 f81c 	bl	80002e8 <__aeabi_dsub>
 800e2b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e2b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e2b6:	ea43 0308 	orr.w	r3, r3, r8
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	4606      	mov	r6, r0
 800e2be:	460f      	mov	r7, r1
 800e2c0:	d054      	beq.n	800e36c <_strtod_l+0xb6c>
 800e2c2:	a339      	add	r3, pc, #228	; (adr r3, 800e3a8 <_strtod_l+0xba8>)
 800e2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c8:	f7f2 fc38 	bl	8000b3c <__aeabi_dcmplt>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	f47f ace5 	bne.w	800dc9c <_strtod_l+0x49c>
 800e2d2:	a337      	add	r3, pc, #220	; (adr r3, 800e3b0 <_strtod_l+0xbb0>)
 800e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d8:	4630      	mov	r0, r6
 800e2da:	4639      	mov	r1, r7
 800e2dc:	f7f2 fc4c 	bl	8000b78 <__aeabi_dcmpgt>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	d095      	beq.n	800e210 <_strtod_l+0xa10>
 800e2e4:	e4da      	b.n	800dc9c <_strtod_l+0x49c>
 800e2e6:	9b04      	ldr	r3, [sp, #16]
 800e2e8:	b333      	cbz	r3, 800e338 <_strtod_l+0xb38>
 800e2ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e2f0:	d822      	bhi.n	800e338 <_strtod_l+0xb38>
 800e2f2:	a331      	add	r3, pc, #196	; (adr r3, 800e3b8 <_strtod_l+0xbb8>)
 800e2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f8:	4630      	mov	r0, r6
 800e2fa:	4639      	mov	r1, r7
 800e2fc:	f7f2 fc28 	bl	8000b50 <__aeabi_dcmple>
 800e300:	b1a0      	cbz	r0, 800e32c <_strtod_l+0xb2c>
 800e302:	4639      	mov	r1, r7
 800e304:	4630      	mov	r0, r6
 800e306:	f7f2 fc57 	bl	8000bb8 <__aeabi_d2uiz>
 800e30a:	2801      	cmp	r0, #1
 800e30c:	bf38      	it	cc
 800e30e:	2001      	movcc	r0, #1
 800e310:	f7f2 f928 	bl	8000564 <__aeabi_ui2d>
 800e314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e316:	4606      	mov	r6, r0
 800e318:	460f      	mov	r7, r1
 800e31a:	bb23      	cbnz	r3, 800e366 <_strtod_l+0xb66>
 800e31c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e320:	9010      	str	r0, [sp, #64]	; 0x40
 800e322:	9311      	str	r3, [sp, #68]	; 0x44
 800e324:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e328:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e32c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e32e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e330:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e334:	1a9b      	subs	r3, r3, r2
 800e336:	930f      	str	r3, [sp, #60]	; 0x3c
 800e338:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e33c:	eeb0 0a48 	vmov.f32	s0, s16
 800e340:	eef0 0a68 	vmov.f32	s1, s17
 800e344:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e348:	f001 fb16 	bl	800f978 <__ulp>
 800e34c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e350:	ec53 2b10 	vmov	r2, r3, d0
 800e354:	f7f2 f980 	bl	8000658 <__aeabi_dmul>
 800e358:	ec53 2b18 	vmov	r2, r3, d8
 800e35c:	f7f1 ffc6 	bl	80002ec <__adddf3>
 800e360:	4680      	mov	r8, r0
 800e362:	4689      	mov	r9, r1
 800e364:	e78d      	b.n	800e282 <_strtod_l+0xa82>
 800e366:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e36a:	e7db      	b.n	800e324 <_strtod_l+0xb24>
 800e36c:	a314      	add	r3, pc, #80	; (adr r3, 800e3c0 <_strtod_l+0xbc0>)
 800e36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e372:	f7f2 fbe3 	bl	8000b3c <__aeabi_dcmplt>
 800e376:	e7b3      	b.n	800e2e0 <_strtod_l+0xae0>
 800e378:	2300      	movs	r3, #0
 800e37a:	930a      	str	r3, [sp, #40]	; 0x28
 800e37c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e37e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e380:	6013      	str	r3, [r2, #0]
 800e382:	f7ff ba7c 	b.w	800d87e <_strtod_l+0x7e>
 800e386:	2a65      	cmp	r2, #101	; 0x65
 800e388:	f43f ab75 	beq.w	800da76 <_strtod_l+0x276>
 800e38c:	2a45      	cmp	r2, #69	; 0x45
 800e38e:	f43f ab72 	beq.w	800da76 <_strtod_l+0x276>
 800e392:	2301      	movs	r3, #1
 800e394:	f7ff bbaa 	b.w	800daec <_strtod_l+0x2ec>
 800e398:	00000000 	.word	0x00000000
 800e39c:	bff00000 	.word	0xbff00000
 800e3a0:	00000000 	.word	0x00000000
 800e3a4:	3ff00000 	.word	0x3ff00000
 800e3a8:	94a03595 	.word	0x94a03595
 800e3ac:	3fdfffff 	.word	0x3fdfffff
 800e3b0:	35afe535 	.word	0x35afe535
 800e3b4:	3fe00000 	.word	0x3fe00000
 800e3b8:	ffc00000 	.word	0xffc00000
 800e3bc:	41dfffff 	.word	0x41dfffff
 800e3c0:	94a03595 	.word	0x94a03595
 800e3c4:	3fcfffff 	.word	0x3fcfffff
 800e3c8:	3ff00000 	.word	0x3ff00000
 800e3cc:	3fe00000 	.word	0x3fe00000
 800e3d0:	7ff00000 	.word	0x7ff00000
 800e3d4:	7fe00000 	.word	0x7fe00000
 800e3d8:	7c9fffff 	.word	0x7c9fffff
 800e3dc:	7fefffff 	.word	0x7fefffff

0800e3e0 <strtof>:
 800e3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800e4a8 <strtof+0xc8>
 800e3e8:	4b2a      	ldr	r3, [pc, #168]	; (800e494 <strtof+0xb4>)
 800e3ea:	460a      	mov	r2, r1
 800e3ec:	ed2d 8b02 	vpush	{d8}
 800e3f0:	4601      	mov	r1, r0
 800e3f2:	f8d8 0000 	ldr.w	r0, [r8]
 800e3f6:	f7ff fa03 	bl	800d800 <_strtod_l>
 800e3fa:	ec55 4b10 	vmov	r4, r5, d0
 800e3fe:	ee10 2a10 	vmov	r2, s0
 800e402:	ee10 0a10 	vmov	r0, s0
 800e406:	462b      	mov	r3, r5
 800e408:	4629      	mov	r1, r5
 800e40a:	f7f2 fbbf 	bl	8000b8c <__aeabi_dcmpun>
 800e40e:	b190      	cbz	r0, 800e436 <strtof+0x56>
 800e410:	2d00      	cmp	r5, #0
 800e412:	4821      	ldr	r0, [pc, #132]	; (800e498 <strtof+0xb8>)
 800e414:	da09      	bge.n	800e42a <strtof+0x4a>
 800e416:	f000 fadb 	bl	800e9d0 <nanf>
 800e41a:	eeb1 8a40 	vneg.f32	s16, s0
 800e41e:	eeb0 0a48 	vmov.f32	s0, s16
 800e422:	ecbd 8b02 	vpop	{d8}
 800e426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e42a:	ecbd 8b02 	vpop	{d8}
 800e42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e432:	f000 bacd 	b.w	800e9d0 <nanf>
 800e436:	4620      	mov	r0, r4
 800e438:	4629      	mov	r1, r5
 800e43a:	f7f2 fbdd 	bl	8000bf8 <__aeabi_d2f>
 800e43e:	ee08 0a10 	vmov	s16, r0
 800e442:	eddf 7a16 	vldr	s15, [pc, #88]	; 800e49c <strtof+0xbc>
 800e446:	eeb0 7ac8 	vabs.f32	s14, s16
 800e44a:	eeb4 7a67 	vcmp.f32	s14, s15
 800e44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e452:	dd11      	ble.n	800e478 <strtof+0x98>
 800e454:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800e458:	4b11      	ldr	r3, [pc, #68]	; (800e4a0 <strtof+0xc0>)
 800e45a:	f04f 32ff 	mov.w	r2, #4294967295
 800e45e:	4620      	mov	r0, r4
 800e460:	4639      	mov	r1, r7
 800e462:	f7f2 fb93 	bl	8000b8c <__aeabi_dcmpun>
 800e466:	b980      	cbnz	r0, 800e48a <strtof+0xaa>
 800e468:	4b0d      	ldr	r3, [pc, #52]	; (800e4a0 <strtof+0xc0>)
 800e46a:	f04f 32ff 	mov.w	r2, #4294967295
 800e46e:	4620      	mov	r0, r4
 800e470:	4639      	mov	r1, r7
 800e472:	f7f2 fb6d 	bl	8000b50 <__aeabi_dcmple>
 800e476:	b940      	cbnz	r0, 800e48a <strtof+0xaa>
 800e478:	ee18 3a10 	vmov	r3, s16
 800e47c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e480:	d1cd      	bne.n	800e41e <strtof+0x3e>
 800e482:	4b08      	ldr	r3, [pc, #32]	; (800e4a4 <strtof+0xc4>)
 800e484:	402b      	ands	r3, r5
 800e486:	2b00      	cmp	r3, #0
 800e488:	d0c9      	beq.n	800e41e <strtof+0x3e>
 800e48a:	f8d8 3000 	ldr.w	r3, [r8]
 800e48e:	2222      	movs	r2, #34	; 0x22
 800e490:	601a      	str	r2, [r3, #0]
 800e492:	e7c4      	b.n	800e41e <strtof+0x3e>
 800e494:	2000019c 	.word	0x2000019c
 800e498:	080110ca 	.word	0x080110ca
 800e49c:	7f7fffff 	.word	0x7f7fffff
 800e4a0:	7fefffff 	.word	0x7fefffff
 800e4a4:	7ff00000 	.word	0x7ff00000
 800e4a8:	20000354 	.word	0x20000354

0800e4ac <_strtoul_l.constprop.0>:
 800e4ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4b0:	4f36      	ldr	r7, [pc, #216]	; (800e58c <_strtoul_l.constprop.0+0xe0>)
 800e4b2:	4686      	mov	lr, r0
 800e4b4:	460d      	mov	r5, r1
 800e4b6:	4628      	mov	r0, r5
 800e4b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4bc:	5d3e      	ldrb	r6, [r7, r4]
 800e4be:	f016 0608 	ands.w	r6, r6, #8
 800e4c2:	d1f8      	bne.n	800e4b6 <_strtoul_l.constprop.0+0xa>
 800e4c4:	2c2d      	cmp	r4, #45	; 0x2d
 800e4c6:	d130      	bne.n	800e52a <_strtoul_l.constprop.0+0x7e>
 800e4c8:	782c      	ldrb	r4, [r5, #0]
 800e4ca:	2601      	movs	r6, #1
 800e4cc:	1c85      	adds	r5, r0, #2
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d057      	beq.n	800e582 <_strtoul_l.constprop.0+0xd6>
 800e4d2:	2b10      	cmp	r3, #16
 800e4d4:	d109      	bne.n	800e4ea <_strtoul_l.constprop.0+0x3e>
 800e4d6:	2c30      	cmp	r4, #48	; 0x30
 800e4d8:	d107      	bne.n	800e4ea <_strtoul_l.constprop.0+0x3e>
 800e4da:	7828      	ldrb	r0, [r5, #0]
 800e4dc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e4e0:	2858      	cmp	r0, #88	; 0x58
 800e4e2:	d149      	bne.n	800e578 <_strtoul_l.constprop.0+0xcc>
 800e4e4:	786c      	ldrb	r4, [r5, #1]
 800e4e6:	2310      	movs	r3, #16
 800e4e8:	3502      	adds	r5, #2
 800e4ea:	f04f 38ff 	mov.w	r8, #4294967295
 800e4ee:	2700      	movs	r7, #0
 800e4f0:	fbb8 f8f3 	udiv	r8, r8, r3
 800e4f4:	fb03 f908 	mul.w	r9, r3, r8
 800e4f8:	ea6f 0909 	mvn.w	r9, r9
 800e4fc:	4638      	mov	r0, r7
 800e4fe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e502:	f1bc 0f09 	cmp.w	ip, #9
 800e506:	d815      	bhi.n	800e534 <_strtoul_l.constprop.0+0x88>
 800e508:	4664      	mov	r4, ip
 800e50a:	42a3      	cmp	r3, r4
 800e50c:	dd23      	ble.n	800e556 <_strtoul_l.constprop.0+0xaa>
 800e50e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800e512:	d007      	beq.n	800e524 <_strtoul_l.constprop.0+0x78>
 800e514:	4580      	cmp	r8, r0
 800e516:	d31b      	bcc.n	800e550 <_strtoul_l.constprop.0+0xa4>
 800e518:	d101      	bne.n	800e51e <_strtoul_l.constprop.0+0x72>
 800e51a:	45a1      	cmp	r9, r4
 800e51c:	db18      	blt.n	800e550 <_strtoul_l.constprop.0+0xa4>
 800e51e:	fb00 4003 	mla	r0, r0, r3, r4
 800e522:	2701      	movs	r7, #1
 800e524:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e528:	e7e9      	b.n	800e4fe <_strtoul_l.constprop.0+0x52>
 800e52a:	2c2b      	cmp	r4, #43	; 0x2b
 800e52c:	bf04      	itt	eq
 800e52e:	782c      	ldrbeq	r4, [r5, #0]
 800e530:	1c85      	addeq	r5, r0, #2
 800e532:	e7cc      	b.n	800e4ce <_strtoul_l.constprop.0+0x22>
 800e534:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e538:	f1bc 0f19 	cmp.w	ip, #25
 800e53c:	d801      	bhi.n	800e542 <_strtoul_l.constprop.0+0x96>
 800e53e:	3c37      	subs	r4, #55	; 0x37
 800e540:	e7e3      	b.n	800e50a <_strtoul_l.constprop.0+0x5e>
 800e542:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e546:	f1bc 0f19 	cmp.w	ip, #25
 800e54a:	d804      	bhi.n	800e556 <_strtoul_l.constprop.0+0xaa>
 800e54c:	3c57      	subs	r4, #87	; 0x57
 800e54e:	e7dc      	b.n	800e50a <_strtoul_l.constprop.0+0x5e>
 800e550:	f04f 37ff 	mov.w	r7, #4294967295
 800e554:	e7e6      	b.n	800e524 <_strtoul_l.constprop.0+0x78>
 800e556:	1c7b      	adds	r3, r7, #1
 800e558:	d106      	bne.n	800e568 <_strtoul_l.constprop.0+0xbc>
 800e55a:	2322      	movs	r3, #34	; 0x22
 800e55c:	f8ce 3000 	str.w	r3, [lr]
 800e560:	4638      	mov	r0, r7
 800e562:	b932      	cbnz	r2, 800e572 <_strtoul_l.constprop.0+0xc6>
 800e564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e568:	b106      	cbz	r6, 800e56c <_strtoul_l.constprop.0+0xc0>
 800e56a:	4240      	negs	r0, r0
 800e56c:	2a00      	cmp	r2, #0
 800e56e:	d0f9      	beq.n	800e564 <_strtoul_l.constprop.0+0xb8>
 800e570:	b107      	cbz	r7, 800e574 <_strtoul_l.constprop.0+0xc8>
 800e572:	1e69      	subs	r1, r5, #1
 800e574:	6011      	str	r1, [r2, #0]
 800e576:	e7f5      	b.n	800e564 <_strtoul_l.constprop.0+0xb8>
 800e578:	2430      	movs	r4, #48	; 0x30
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d1b5      	bne.n	800e4ea <_strtoul_l.constprop.0+0x3e>
 800e57e:	2308      	movs	r3, #8
 800e580:	e7b3      	b.n	800e4ea <_strtoul_l.constprop.0+0x3e>
 800e582:	2c30      	cmp	r4, #48	; 0x30
 800e584:	d0a9      	beq.n	800e4da <_strtoul_l.constprop.0+0x2e>
 800e586:	230a      	movs	r3, #10
 800e588:	e7af      	b.n	800e4ea <_strtoul_l.constprop.0+0x3e>
 800e58a:	bf00      	nop
 800e58c:	08010d71 	.word	0x08010d71

0800e590 <strtoul>:
 800e590:	4613      	mov	r3, r2
 800e592:	460a      	mov	r2, r1
 800e594:	4601      	mov	r1, r0
 800e596:	4802      	ldr	r0, [pc, #8]	; (800e5a0 <strtoul+0x10>)
 800e598:	6800      	ldr	r0, [r0, #0]
 800e59a:	f7ff bf87 	b.w	800e4ac <_strtoul_l.constprop.0>
 800e59e:	bf00      	nop
 800e5a0:	20000354 	.word	0x20000354

0800e5a4 <std>:
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	b510      	push	{r4, lr}
 800e5a8:	4604      	mov	r4, r0
 800e5aa:	e9c0 3300 	strd	r3, r3, [r0]
 800e5ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5b2:	6083      	str	r3, [r0, #8]
 800e5b4:	8181      	strh	r1, [r0, #12]
 800e5b6:	6643      	str	r3, [r0, #100]	; 0x64
 800e5b8:	81c2      	strh	r2, [r0, #14]
 800e5ba:	6183      	str	r3, [r0, #24]
 800e5bc:	4619      	mov	r1, r3
 800e5be:	2208      	movs	r2, #8
 800e5c0:	305c      	adds	r0, #92	; 0x5c
 800e5c2:	f000 f92d 	bl	800e820 <memset>
 800e5c6:	4b0d      	ldr	r3, [pc, #52]	; (800e5fc <std+0x58>)
 800e5c8:	6263      	str	r3, [r4, #36]	; 0x24
 800e5ca:	4b0d      	ldr	r3, [pc, #52]	; (800e600 <std+0x5c>)
 800e5cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5ce:	4b0d      	ldr	r3, [pc, #52]	; (800e604 <std+0x60>)
 800e5d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5d2:	4b0d      	ldr	r3, [pc, #52]	; (800e608 <std+0x64>)
 800e5d4:	6323      	str	r3, [r4, #48]	; 0x30
 800e5d6:	4b0d      	ldr	r3, [pc, #52]	; (800e60c <std+0x68>)
 800e5d8:	6224      	str	r4, [r4, #32]
 800e5da:	429c      	cmp	r4, r3
 800e5dc:	d006      	beq.n	800e5ec <std+0x48>
 800e5de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e5e2:	4294      	cmp	r4, r2
 800e5e4:	d002      	beq.n	800e5ec <std+0x48>
 800e5e6:	33d0      	adds	r3, #208	; 0xd0
 800e5e8:	429c      	cmp	r4, r3
 800e5ea:	d105      	bne.n	800e5f8 <std+0x54>
 800e5ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5f4:	f000 b9ca 	b.w	800e98c <__retarget_lock_init_recursive>
 800e5f8:	bd10      	pop	{r4, pc}
 800e5fa:	bf00      	nop
 800e5fc:	0800e729 	.word	0x0800e729
 800e600:	0800e74b 	.word	0x0800e74b
 800e604:	0800e783 	.word	0x0800e783
 800e608:	0800e7a7 	.word	0x0800e7a7
 800e60c:	200034f0 	.word	0x200034f0

0800e610 <stdio_exit_handler>:
 800e610:	4a02      	ldr	r2, [pc, #8]	; (800e61c <stdio_exit_handler+0xc>)
 800e612:	4903      	ldr	r1, [pc, #12]	; (800e620 <stdio_exit_handler+0x10>)
 800e614:	4803      	ldr	r0, [pc, #12]	; (800e624 <stdio_exit_handler+0x14>)
 800e616:	f000 b869 	b.w	800e6ec <_fwalk_sglue>
 800e61a:	bf00      	nop
 800e61c:	20000190 	.word	0x20000190
 800e620:	080102f1 	.word	0x080102f1
 800e624:	20000308 	.word	0x20000308

0800e628 <cleanup_stdio>:
 800e628:	6841      	ldr	r1, [r0, #4]
 800e62a:	4b0c      	ldr	r3, [pc, #48]	; (800e65c <cleanup_stdio+0x34>)
 800e62c:	4299      	cmp	r1, r3
 800e62e:	b510      	push	{r4, lr}
 800e630:	4604      	mov	r4, r0
 800e632:	d001      	beq.n	800e638 <cleanup_stdio+0x10>
 800e634:	f001 fe5c 	bl	80102f0 <_fflush_r>
 800e638:	68a1      	ldr	r1, [r4, #8]
 800e63a:	4b09      	ldr	r3, [pc, #36]	; (800e660 <cleanup_stdio+0x38>)
 800e63c:	4299      	cmp	r1, r3
 800e63e:	d002      	beq.n	800e646 <cleanup_stdio+0x1e>
 800e640:	4620      	mov	r0, r4
 800e642:	f001 fe55 	bl	80102f0 <_fflush_r>
 800e646:	68e1      	ldr	r1, [r4, #12]
 800e648:	4b06      	ldr	r3, [pc, #24]	; (800e664 <cleanup_stdio+0x3c>)
 800e64a:	4299      	cmp	r1, r3
 800e64c:	d004      	beq.n	800e658 <cleanup_stdio+0x30>
 800e64e:	4620      	mov	r0, r4
 800e650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e654:	f001 be4c 	b.w	80102f0 <_fflush_r>
 800e658:	bd10      	pop	{r4, pc}
 800e65a:	bf00      	nop
 800e65c:	200034f0 	.word	0x200034f0
 800e660:	20003558 	.word	0x20003558
 800e664:	200035c0 	.word	0x200035c0

0800e668 <global_stdio_init.part.0>:
 800e668:	b510      	push	{r4, lr}
 800e66a:	4b0b      	ldr	r3, [pc, #44]	; (800e698 <global_stdio_init.part.0+0x30>)
 800e66c:	4c0b      	ldr	r4, [pc, #44]	; (800e69c <global_stdio_init.part.0+0x34>)
 800e66e:	4a0c      	ldr	r2, [pc, #48]	; (800e6a0 <global_stdio_init.part.0+0x38>)
 800e670:	601a      	str	r2, [r3, #0]
 800e672:	4620      	mov	r0, r4
 800e674:	2200      	movs	r2, #0
 800e676:	2104      	movs	r1, #4
 800e678:	f7ff ff94 	bl	800e5a4 <std>
 800e67c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e680:	2201      	movs	r2, #1
 800e682:	2109      	movs	r1, #9
 800e684:	f7ff ff8e 	bl	800e5a4 <std>
 800e688:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e68c:	2202      	movs	r2, #2
 800e68e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e692:	2112      	movs	r1, #18
 800e694:	f7ff bf86 	b.w	800e5a4 <std>
 800e698:	20003628 	.word	0x20003628
 800e69c:	200034f0 	.word	0x200034f0
 800e6a0:	0800e611 	.word	0x0800e611

0800e6a4 <__sfp_lock_acquire>:
 800e6a4:	4801      	ldr	r0, [pc, #4]	; (800e6ac <__sfp_lock_acquire+0x8>)
 800e6a6:	f000 b972 	b.w	800e98e <__retarget_lock_acquire_recursive>
 800e6aa:	bf00      	nop
 800e6ac:	20003631 	.word	0x20003631

0800e6b0 <__sfp_lock_release>:
 800e6b0:	4801      	ldr	r0, [pc, #4]	; (800e6b8 <__sfp_lock_release+0x8>)
 800e6b2:	f000 b96d 	b.w	800e990 <__retarget_lock_release_recursive>
 800e6b6:	bf00      	nop
 800e6b8:	20003631 	.word	0x20003631

0800e6bc <__sinit>:
 800e6bc:	b510      	push	{r4, lr}
 800e6be:	4604      	mov	r4, r0
 800e6c0:	f7ff fff0 	bl	800e6a4 <__sfp_lock_acquire>
 800e6c4:	6a23      	ldr	r3, [r4, #32]
 800e6c6:	b11b      	cbz	r3, 800e6d0 <__sinit+0x14>
 800e6c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6cc:	f7ff bff0 	b.w	800e6b0 <__sfp_lock_release>
 800e6d0:	4b04      	ldr	r3, [pc, #16]	; (800e6e4 <__sinit+0x28>)
 800e6d2:	6223      	str	r3, [r4, #32]
 800e6d4:	4b04      	ldr	r3, [pc, #16]	; (800e6e8 <__sinit+0x2c>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d1f5      	bne.n	800e6c8 <__sinit+0xc>
 800e6dc:	f7ff ffc4 	bl	800e668 <global_stdio_init.part.0>
 800e6e0:	e7f2      	b.n	800e6c8 <__sinit+0xc>
 800e6e2:	bf00      	nop
 800e6e4:	0800e629 	.word	0x0800e629
 800e6e8:	20003628 	.word	0x20003628

0800e6ec <_fwalk_sglue>:
 800e6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6f0:	4607      	mov	r7, r0
 800e6f2:	4688      	mov	r8, r1
 800e6f4:	4614      	mov	r4, r2
 800e6f6:	2600      	movs	r6, #0
 800e6f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6fc:	f1b9 0901 	subs.w	r9, r9, #1
 800e700:	d505      	bpl.n	800e70e <_fwalk_sglue+0x22>
 800e702:	6824      	ldr	r4, [r4, #0]
 800e704:	2c00      	cmp	r4, #0
 800e706:	d1f7      	bne.n	800e6f8 <_fwalk_sglue+0xc>
 800e708:	4630      	mov	r0, r6
 800e70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e70e:	89ab      	ldrh	r3, [r5, #12]
 800e710:	2b01      	cmp	r3, #1
 800e712:	d907      	bls.n	800e724 <_fwalk_sglue+0x38>
 800e714:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e718:	3301      	adds	r3, #1
 800e71a:	d003      	beq.n	800e724 <_fwalk_sglue+0x38>
 800e71c:	4629      	mov	r1, r5
 800e71e:	4638      	mov	r0, r7
 800e720:	47c0      	blx	r8
 800e722:	4306      	orrs	r6, r0
 800e724:	3568      	adds	r5, #104	; 0x68
 800e726:	e7e9      	b.n	800e6fc <_fwalk_sglue+0x10>

0800e728 <__sread>:
 800e728:	b510      	push	{r4, lr}
 800e72a:	460c      	mov	r4, r1
 800e72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e730:	f000 f8de 	bl	800e8f0 <_read_r>
 800e734:	2800      	cmp	r0, #0
 800e736:	bfab      	itete	ge
 800e738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e73a:	89a3      	ldrhlt	r3, [r4, #12]
 800e73c:	181b      	addge	r3, r3, r0
 800e73e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e742:	bfac      	ite	ge
 800e744:	6563      	strge	r3, [r4, #84]	; 0x54
 800e746:	81a3      	strhlt	r3, [r4, #12]
 800e748:	bd10      	pop	{r4, pc}

0800e74a <__swrite>:
 800e74a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e74e:	461f      	mov	r7, r3
 800e750:	898b      	ldrh	r3, [r1, #12]
 800e752:	05db      	lsls	r3, r3, #23
 800e754:	4605      	mov	r5, r0
 800e756:	460c      	mov	r4, r1
 800e758:	4616      	mov	r6, r2
 800e75a:	d505      	bpl.n	800e768 <__swrite+0x1e>
 800e75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e760:	2302      	movs	r3, #2
 800e762:	2200      	movs	r2, #0
 800e764:	f000 f8b2 	bl	800e8cc <_lseek_r>
 800e768:	89a3      	ldrh	r3, [r4, #12]
 800e76a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e76e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e772:	81a3      	strh	r3, [r4, #12]
 800e774:	4632      	mov	r2, r6
 800e776:	463b      	mov	r3, r7
 800e778:	4628      	mov	r0, r5
 800e77a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e77e:	f000 b8c9 	b.w	800e914 <_write_r>

0800e782 <__sseek>:
 800e782:	b510      	push	{r4, lr}
 800e784:	460c      	mov	r4, r1
 800e786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e78a:	f000 f89f 	bl	800e8cc <_lseek_r>
 800e78e:	1c43      	adds	r3, r0, #1
 800e790:	89a3      	ldrh	r3, [r4, #12]
 800e792:	bf15      	itete	ne
 800e794:	6560      	strne	r0, [r4, #84]	; 0x54
 800e796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e79a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e79e:	81a3      	strheq	r3, [r4, #12]
 800e7a0:	bf18      	it	ne
 800e7a2:	81a3      	strhne	r3, [r4, #12]
 800e7a4:	bd10      	pop	{r4, pc}

0800e7a6 <__sclose>:
 800e7a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7aa:	f000 b87f 	b.w	800e8ac <_close_r>

0800e7ae <_vsniprintf_r>:
 800e7ae:	b530      	push	{r4, r5, lr}
 800e7b0:	4614      	mov	r4, r2
 800e7b2:	2c00      	cmp	r4, #0
 800e7b4:	b09b      	sub	sp, #108	; 0x6c
 800e7b6:	4605      	mov	r5, r0
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	da05      	bge.n	800e7c8 <_vsniprintf_r+0x1a>
 800e7bc:	238b      	movs	r3, #139	; 0x8b
 800e7be:	6003      	str	r3, [r0, #0]
 800e7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c4:	b01b      	add	sp, #108	; 0x6c
 800e7c6:	bd30      	pop	{r4, r5, pc}
 800e7c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e7cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e7d0:	bf14      	ite	ne
 800e7d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e7d6:	4623      	moveq	r3, r4
 800e7d8:	9302      	str	r3, [sp, #8]
 800e7da:	9305      	str	r3, [sp, #20]
 800e7dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e7e0:	9100      	str	r1, [sp, #0]
 800e7e2:	9104      	str	r1, [sp, #16]
 800e7e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e7e8:	4669      	mov	r1, sp
 800e7ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e7ec:	f001 fa6c 	bl	800fcc8 <_svfiprintf_r>
 800e7f0:	1c43      	adds	r3, r0, #1
 800e7f2:	bfbc      	itt	lt
 800e7f4:	238b      	movlt	r3, #139	; 0x8b
 800e7f6:	602b      	strlt	r3, [r5, #0]
 800e7f8:	2c00      	cmp	r4, #0
 800e7fa:	d0e3      	beq.n	800e7c4 <_vsniprintf_r+0x16>
 800e7fc:	9b00      	ldr	r3, [sp, #0]
 800e7fe:	2200      	movs	r2, #0
 800e800:	701a      	strb	r2, [r3, #0]
 800e802:	e7df      	b.n	800e7c4 <_vsniprintf_r+0x16>

0800e804 <vsniprintf>:
 800e804:	b507      	push	{r0, r1, r2, lr}
 800e806:	9300      	str	r3, [sp, #0]
 800e808:	4613      	mov	r3, r2
 800e80a:	460a      	mov	r2, r1
 800e80c:	4601      	mov	r1, r0
 800e80e:	4803      	ldr	r0, [pc, #12]	; (800e81c <vsniprintf+0x18>)
 800e810:	6800      	ldr	r0, [r0, #0]
 800e812:	f7ff ffcc 	bl	800e7ae <_vsniprintf_r>
 800e816:	b003      	add	sp, #12
 800e818:	f85d fb04 	ldr.w	pc, [sp], #4
 800e81c:	20000354 	.word	0x20000354

0800e820 <memset>:
 800e820:	4402      	add	r2, r0
 800e822:	4603      	mov	r3, r0
 800e824:	4293      	cmp	r3, r2
 800e826:	d100      	bne.n	800e82a <memset+0xa>
 800e828:	4770      	bx	lr
 800e82a:	f803 1b01 	strb.w	r1, [r3], #1
 800e82e:	e7f9      	b.n	800e824 <memset+0x4>

0800e830 <strncmp>:
 800e830:	b510      	push	{r4, lr}
 800e832:	b16a      	cbz	r2, 800e850 <strncmp+0x20>
 800e834:	3901      	subs	r1, #1
 800e836:	1884      	adds	r4, r0, r2
 800e838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e83c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e840:	429a      	cmp	r2, r3
 800e842:	d103      	bne.n	800e84c <strncmp+0x1c>
 800e844:	42a0      	cmp	r0, r4
 800e846:	d001      	beq.n	800e84c <strncmp+0x1c>
 800e848:	2a00      	cmp	r2, #0
 800e84a:	d1f5      	bne.n	800e838 <strncmp+0x8>
 800e84c:	1ad0      	subs	r0, r2, r3
 800e84e:	bd10      	pop	{r4, pc}
 800e850:	4610      	mov	r0, r2
 800e852:	e7fc      	b.n	800e84e <strncmp+0x1e>

0800e854 <__strtok_r>:
 800e854:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e856:	b908      	cbnz	r0, 800e85c <__strtok_r+0x8>
 800e858:	6810      	ldr	r0, [r2, #0]
 800e85a:	b188      	cbz	r0, 800e880 <__strtok_r+0x2c>
 800e85c:	4604      	mov	r4, r0
 800e85e:	4620      	mov	r0, r4
 800e860:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e864:	460f      	mov	r7, r1
 800e866:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e86a:	b91e      	cbnz	r6, 800e874 <__strtok_r+0x20>
 800e86c:	b965      	cbnz	r5, 800e888 <__strtok_r+0x34>
 800e86e:	6015      	str	r5, [r2, #0]
 800e870:	4628      	mov	r0, r5
 800e872:	e005      	b.n	800e880 <__strtok_r+0x2c>
 800e874:	42b5      	cmp	r5, r6
 800e876:	d1f6      	bne.n	800e866 <__strtok_r+0x12>
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d1f0      	bne.n	800e85e <__strtok_r+0xa>
 800e87c:	6014      	str	r4, [r2, #0]
 800e87e:	7003      	strb	r3, [r0, #0]
 800e880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e882:	461c      	mov	r4, r3
 800e884:	e00c      	b.n	800e8a0 <__strtok_r+0x4c>
 800e886:	b915      	cbnz	r5, 800e88e <__strtok_r+0x3a>
 800e888:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e88c:	460e      	mov	r6, r1
 800e88e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e892:	42ab      	cmp	r3, r5
 800e894:	d1f7      	bne.n	800e886 <__strtok_r+0x32>
 800e896:	2b00      	cmp	r3, #0
 800e898:	d0f3      	beq.n	800e882 <__strtok_r+0x2e>
 800e89a:	2300      	movs	r3, #0
 800e89c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e8a0:	6014      	str	r4, [r2, #0]
 800e8a2:	e7ed      	b.n	800e880 <__strtok_r+0x2c>

0800e8a4 <strtok_r>:
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	f7ff bfd5 	b.w	800e854 <__strtok_r>
	...

0800e8ac <_close_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	4d06      	ldr	r5, [pc, #24]	; (800e8c8 <_close_r+0x1c>)
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	4608      	mov	r0, r1
 800e8b6:	602b      	str	r3, [r5, #0]
 800e8b8:	f7f2 fd4f 	bl	800135a <_close>
 800e8bc:	1c43      	adds	r3, r0, #1
 800e8be:	d102      	bne.n	800e8c6 <_close_r+0x1a>
 800e8c0:	682b      	ldr	r3, [r5, #0]
 800e8c2:	b103      	cbz	r3, 800e8c6 <_close_r+0x1a>
 800e8c4:	6023      	str	r3, [r4, #0]
 800e8c6:	bd38      	pop	{r3, r4, r5, pc}
 800e8c8:	2000362c 	.word	0x2000362c

0800e8cc <_lseek_r>:
 800e8cc:	b538      	push	{r3, r4, r5, lr}
 800e8ce:	4d07      	ldr	r5, [pc, #28]	; (800e8ec <_lseek_r+0x20>)
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	4608      	mov	r0, r1
 800e8d4:	4611      	mov	r1, r2
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	602a      	str	r2, [r5, #0]
 800e8da:	461a      	mov	r2, r3
 800e8dc:	f7f2 fd64 	bl	80013a8 <_lseek>
 800e8e0:	1c43      	adds	r3, r0, #1
 800e8e2:	d102      	bne.n	800e8ea <_lseek_r+0x1e>
 800e8e4:	682b      	ldr	r3, [r5, #0]
 800e8e6:	b103      	cbz	r3, 800e8ea <_lseek_r+0x1e>
 800e8e8:	6023      	str	r3, [r4, #0]
 800e8ea:	bd38      	pop	{r3, r4, r5, pc}
 800e8ec:	2000362c 	.word	0x2000362c

0800e8f0 <_read_r>:
 800e8f0:	b538      	push	{r3, r4, r5, lr}
 800e8f2:	4d07      	ldr	r5, [pc, #28]	; (800e910 <_read_r+0x20>)
 800e8f4:	4604      	mov	r4, r0
 800e8f6:	4608      	mov	r0, r1
 800e8f8:	4611      	mov	r1, r2
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	602a      	str	r2, [r5, #0]
 800e8fe:	461a      	mov	r2, r3
 800e900:	f7f2 fcf2 	bl	80012e8 <_read>
 800e904:	1c43      	adds	r3, r0, #1
 800e906:	d102      	bne.n	800e90e <_read_r+0x1e>
 800e908:	682b      	ldr	r3, [r5, #0]
 800e90a:	b103      	cbz	r3, 800e90e <_read_r+0x1e>
 800e90c:	6023      	str	r3, [r4, #0]
 800e90e:	bd38      	pop	{r3, r4, r5, pc}
 800e910:	2000362c 	.word	0x2000362c

0800e914 <_write_r>:
 800e914:	b538      	push	{r3, r4, r5, lr}
 800e916:	4d07      	ldr	r5, [pc, #28]	; (800e934 <_write_r+0x20>)
 800e918:	4604      	mov	r4, r0
 800e91a:	4608      	mov	r0, r1
 800e91c:	4611      	mov	r1, r2
 800e91e:	2200      	movs	r2, #0
 800e920:	602a      	str	r2, [r5, #0]
 800e922:	461a      	mov	r2, r3
 800e924:	f7f2 fcfd 	bl	8001322 <_write>
 800e928:	1c43      	adds	r3, r0, #1
 800e92a:	d102      	bne.n	800e932 <_write_r+0x1e>
 800e92c:	682b      	ldr	r3, [r5, #0]
 800e92e:	b103      	cbz	r3, 800e932 <_write_r+0x1e>
 800e930:	6023      	str	r3, [r4, #0]
 800e932:	bd38      	pop	{r3, r4, r5, pc}
 800e934:	2000362c 	.word	0x2000362c

0800e938 <__errno>:
 800e938:	4b01      	ldr	r3, [pc, #4]	; (800e940 <__errno+0x8>)
 800e93a:	6818      	ldr	r0, [r3, #0]
 800e93c:	4770      	bx	lr
 800e93e:	bf00      	nop
 800e940:	20000354 	.word	0x20000354

0800e944 <__libc_init_array>:
 800e944:	b570      	push	{r4, r5, r6, lr}
 800e946:	4d0d      	ldr	r5, [pc, #52]	; (800e97c <__libc_init_array+0x38>)
 800e948:	4c0d      	ldr	r4, [pc, #52]	; (800e980 <__libc_init_array+0x3c>)
 800e94a:	1b64      	subs	r4, r4, r5
 800e94c:	10a4      	asrs	r4, r4, #2
 800e94e:	2600      	movs	r6, #0
 800e950:	42a6      	cmp	r6, r4
 800e952:	d109      	bne.n	800e968 <__libc_init_array+0x24>
 800e954:	4d0b      	ldr	r5, [pc, #44]	; (800e984 <__libc_init_array+0x40>)
 800e956:	4c0c      	ldr	r4, [pc, #48]	; (800e988 <__libc_init_array+0x44>)
 800e958:	f002 f84a 	bl	80109f0 <_init>
 800e95c:	1b64      	subs	r4, r4, r5
 800e95e:	10a4      	asrs	r4, r4, #2
 800e960:	2600      	movs	r6, #0
 800e962:	42a6      	cmp	r6, r4
 800e964:	d105      	bne.n	800e972 <__libc_init_array+0x2e>
 800e966:	bd70      	pop	{r4, r5, r6, pc}
 800e968:	f855 3b04 	ldr.w	r3, [r5], #4
 800e96c:	4798      	blx	r3
 800e96e:	3601      	adds	r6, #1
 800e970:	e7ee      	b.n	800e950 <__libc_init_array+0xc>
 800e972:	f855 3b04 	ldr.w	r3, [r5], #4
 800e976:	4798      	blx	r3
 800e978:	3601      	adds	r6, #1
 800e97a:	e7f2      	b.n	800e962 <__libc_init_array+0x1e>
 800e97c:	080110d4 	.word	0x080110d4
 800e980:	080110d4 	.word	0x080110d4
 800e984:	080110d4 	.word	0x080110d4
 800e988:	080110d8 	.word	0x080110d8

0800e98c <__retarget_lock_init_recursive>:
 800e98c:	4770      	bx	lr

0800e98e <__retarget_lock_acquire_recursive>:
 800e98e:	4770      	bx	lr

0800e990 <__retarget_lock_release_recursive>:
 800e990:	4770      	bx	lr

0800e992 <strcpy>:
 800e992:	4603      	mov	r3, r0
 800e994:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e998:	f803 2b01 	strb.w	r2, [r3], #1
 800e99c:	2a00      	cmp	r2, #0
 800e99e:	d1f9      	bne.n	800e994 <strcpy+0x2>
 800e9a0:	4770      	bx	lr

0800e9a2 <memcpy>:
 800e9a2:	440a      	add	r2, r1
 800e9a4:	4291      	cmp	r1, r2
 800e9a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9aa:	d100      	bne.n	800e9ae <memcpy+0xc>
 800e9ac:	4770      	bx	lr
 800e9ae:	b510      	push	{r4, lr}
 800e9b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9b8:	4291      	cmp	r1, r2
 800e9ba:	d1f9      	bne.n	800e9b0 <memcpy+0xe>
 800e9bc:	bd10      	pop	{r4, pc}
	...

0800e9c0 <nan>:
 800e9c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e9c8 <nan+0x8>
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop
 800e9c8:	00000000 	.word	0x00000000
 800e9cc:	7ff80000 	.word	0x7ff80000

0800e9d0 <nanf>:
 800e9d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e9d8 <nanf+0x8>
 800e9d4:	4770      	bx	lr
 800e9d6:	bf00      	nop
 800e9d8:	7fc00000 	.word	0x7fc00000

0800e9dc <_free_r>:
 800e9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9de:	2900      	cmp	r1, #0
 800e9e0:	d044      	beq.n	800ea6c <_free_r+0x90>
 800e9e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9e6:	9001      	str	r0, [sp, #4]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f1a1 0404 	sub.w	r4, r1, #4
 800e9ee:	bfb8      	it	lt
 800e9f0:	18e4      	addlt	r4, r4, r3
 800e9f2:	f000 fc49 	bl	800f288 <__malloc_lock>
 800e9f6:	4a1e      	ldr	r2, [pc, #120]	; (800ea70 <_free_r+0x94>)
 800e9f8:	9801      	ldr	r0, [sp, #4]
 800e9fa:	6813      	ldr	r3, [r2, #0]
 800e9fc:	b933      	cbnz	r3, 800ea0c <_free_r+0x30>
 800e9fe:	6063      	str	r3, [r4, #4]
 800ea00:	6014      	str	r4, [r2, #0]
 800ea02:	b003      	add	sp, #12
 800ea04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea08:	f000 bc44 	b.w	800f294 <__malloc_unlock>
 800ea0c:	42a3      	cmp	r3, r4
 800ea0e:	d908      	bls.n	800ea22 <_free_r+0x46>
 800ea10:	6825      	ldr	r5, [r4, #0]
 800ea12:	1961      	adds	r1, r4, r5
 800ea14:	428b      	cmp	r3, r1
 800ea16:	bf01      	itttt	eq
 800ea18:	6819      	ldreq	r1, [r3, #0]
 800ea1a:	685b      	ldreq	r3, [r3, #4]
 800ea1c:	1949      	addeq	r1, r1, r5
 800ea1e:	6021      	streq	r1, [r4, #0]
 800ea20:	e7ed      	b.n	800e9fe <_free_r+0x22>
 800ea22:	461a      	mov	r2, r3
 800ea24:	685b      	ldr	r3, [r3, #4]
 800ea26:	b10b      	cbz	r3, 800ea2c <_free_r+0x50>
 800ea28:	42a3      	cmp	r3, r4
 800ea2a:	d9fa      	bls.n	800ea22 <_free_r+0x46>
 800ea2c:	6811      	ldr	r1, [r2, #0]
 800ea2e:	1855      	adds	r5, r2, r1
 800ea30:	42a5      	cmp	r5, r4
 800ea32:	d10b      	bne.n	800ea4c <_free_r+0x70>
 800ea34:	6824      	ldr	r4, [r4, #0]
 800ea36:	4421      	add	r1, r4
 800ea38:	1854      	adds	r4, r2, r1
 800ea3a:	42a3      	cmp	r3, r4
 800ea3c:	6011      	str	r1, [r2, #0]
 800ea3e:	d1e0      	bne.n	800ea02 <_free_r+0x26>
 800ea40:	681c      	ldr	r4, [r3, #0]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	6053      	str	r3, [r2, #4]
 800ea46:	440c      	add	r4, r1
 800ea48:	6014      	str	r4, [r2, #0]
 800ea4a:	e7da      	b.n	800ea02 <_free_r+0x26>
 800ea4c:	d902      	bls.n	800ea54 <_free_r+0x78>
 800ea4e:	230c      	movs	r3, #12
 800ea50:	6003      	str	r3, [r0, #0]
 800ea52:	e7d6      	b.n	800ea02 <_free_r+0x26>
 800ea54:	6825      	ldr	r5, [r4, #0]
 800ea56:	1961      	adds	r1, r4, r5
 800ea58:	428b      	cmp	r3, r1
 800ea5a:	bf04      	itt	eq
 800ea5c:	6819      	ldreq	r1, [r3, #0]
 800ea5e:	685b      	ldreq	r3, [r3, #4]
 800ea60:	6063      	str	r3, [r4, #4]
 800ea62:	bf04      	itt	eq
 800ea64:	1949      	addeq	r1, r1, r5
 800ea66:	6021      	streq	r1, [r4, #0]
 800ea68:	6054      	str	r4, [r2, #4]
 800ea6a:	e7ca      	b.n	800ea02 <_free_r+0x26>
 800ea6c:	b003      	add	sp, #12
 800ea6e:	bd30      	pop	{r4, r5, pc}
 800ea70:	20003634 	.word	0x20003634

0800ea74 <rshift>:
 800ea74:	6903      	ldr	r3, [r0, #16]
 800ea76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ea7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ea82:	f100 0414 	add.w	r4, r0, #20
 800ea86:	dd45      	ble.n	800eb14 <rshift+0xa0>
 800ea88:	f011 011f 	ands.w	r1, r1, #31
 800ea8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ea90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ea94:	d10c      	bne.n	800eab0 <rshift+0x3c>
 800ea96:	f100 0710 	add.w	r7, r0, #16
 800ea9a:	4629      	mov	r1, r5
 800ea9c:	42b1      	cmp	r1, r6
 800ea9e:	d334      	bcc.n	800eb0a <rshift+0x96>
 800eaa0:	1a9b      	subs	r3, r3, r2
 800eaa2:	009b      	lsls	r3, r3, #2
 800eaa4:	1eea      	subs	r2, r5, #3
 800eaa6:	4296      	cmp	r6, r2
 800eaa8:	bf38      	it	cc
 800eaaa:	2300      	movcc	r3, #0
 800eaac:	4423      	add	r3, r4
 800eaae:	e015      	b.n	800eadc <rshift+0x68>
 800eab0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eab4:	f1c1 0820 	rsb	r8, r1, #32
 800eab8:	40cf      	lsrs	r7, r1
 800eaba:	f105 0e04 	add.w	lr, r5, #4
 800eabe:	46a1      	mov	r9, r4
 800eac0:	4576      	cmp	r6, lr
 800eac2:	46f4      	mov	ip, lr
 800eac4:	d815      	bhi.n	800eaf2 <rshift+0x7e>
 800eac6:	1a9a      	subs	r2, r3, r2
 800eac8:	0092      	lsls	r2, r2, #2
 800eaca:	3a04      	subs	r2, #4
 800eacc:	3501      	adds	r5, #1
 800eace:	42ae      	cmp	r6, r5
 800ead0:	bf38      	it	cc
 800ead2:	2200      	movcc	r2, #0
 800ead4:	18a3      	adds	r3, r4, r2
 800ead6:	50a7      	str	r7, [r4, r2]
 800ead8:	b107      	cbz	r7, 800eadc <rshift+0x68>
 800eada:	3304      	adds	r3, #4
 800eadc:	1b1a      	subs	r2, r3, r4
 800eade:	42a3      	cmp	r3, r4
 800eae0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eae4:	bf08      	it	eq
 800eae6:	2300      	moveq	r3, #0
 800eae8:	6102      	str	r2, [r0, #16]
 800eaea:	bf08      	it	eq
 800eaec:	6143      	streq	r3, [r0, #20]
 800eaee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaf2:	f8dc c000 	ldr.w	ip, [ip]
 800eaf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800eafa:	ea4c 0707 	orr.w	r7, ip, r7
 800eafe:	f849 7b04 	str.w	r7, [r9], #4
 800eb02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eb06:	40cf      	lsrs	r7, r1
 800eb08:	e7da      	b.n	800eac0 <rshift+0x4c>
 800eb0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800eb0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800eb12:	e7c3      	b.n	800ea9c <rshift+0x28>
 800eb14:	4623      	mov	r3, r4
 800eb16:	e7e1      	b.n	800eadc <rshift+0x68>

0800eb18 <__hexdig_fun>:
 800eb18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800eb1c:	2b09      	cmp	r3, #9
 800eb1e:	d802      	bhi.n	800eb26 <__hexdig_fun+0xe>
 800eb20:	3820      	subs	r0, #32
 800eb22:	b2c0      	uxtb	r0, r0
 800eb24:	4770      	bx	lr
 800eb26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800eb2a:	2b05      	cmp	r3, #5
 800eb2c:	d801      	bhi.n	800eb32 <__hexdig_fun+0x1a>
 800eb2e:	3847      	subs	r0, #71	; 0x47
 800eb30:	e7f7      	b.n	800eb22 <__hexdig_fun+0xa>
 800eb32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800eb36:	2b05      	cmp	r3, #5
 800eb38:	d801      	bhi.n	800eb3e <__hexdig_fun+0x26>
 800eb3a:	3827      	subs	r0, #39	; 0x27
 800eb3c:	e7f1      	b.n	800eb22 <__hexdig_fun+0xa>
 800eb3e:	2000      	movs	r0, #0
 800eb40:	4770      	bx	lr
	...

0800eb44 <__gethex>:
 800eb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb48:	4617      	mov	r7, r2
 800eb4a:	680a      	ldr	r2, [r1, #0]
 800eb4c:	b085      	sub	sp, #20
 800eb4e:	f102 0b02 	add.w	fp, r2, #2
 800eb52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800eb56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800eb5a:	4681      	mov	r9, r0
 800eb5c:	468a      	mov	sl, r1
 800eb5e:	9302      	str	r3, [sp, #8]
 800eb60:	32fe      	adds	r2, #254	; 0xfe
 800eb62:	eb02 030b 	add.w	r3, r2, fp
 800eb66:	46d8      	mov	r8, fp
 800eb68:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800eb6c:	9301      	str	r3, [sp, #4]
 800eb6e:	2830      	cmp	r0, #48	; 0x30
 800eb70:	d0f7      	beq.n	800eb62 <__gethex+0x1e>
 800eb72:	f7ff ffd1 	bl	800eb18 <__hexdig_fun>
 800eb76:	4604      	mov	r4, r0
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	d138      	bne.n	800ebee <__gethex+0xaa>
 800eb7c:	49a7      	ldr	r1, [pc, #668]	; (800ee1c <__gethex+0x2d8>)
 800eb7e:	2201      	movs	r2, #1
 800eb80:	4640      	mov	r0, r8
 800eb82:	f7ff fe55 	bl	800e830 <strncmp>
 800eb86:	4606      	mov	r6, r0
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	d169      	bne.n	800ec60 <__gethex+0x11c>
 800eb8c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800eb90:	465d      	mov	r5, fp
 800eb92:	f7ff ffc1 	bl	800eb18 <__hexdig_fun>
 800eb96:	2800      	cmp	r0, #0
 800eb98:	d064      	beq.n	800ec64 <__gethex+0x120>
 800eb9a:	465a      	mov	r2, fp
 800eb9c:	7810      	ldrb	r0, [r2, #0]
 800eb9e:	2830      	cmp	r0, #48	; 0x30
 800eba0:	4690      	mov	r8, r2
 800eba2:	f102 0201 	add.w	r2, r2, #1
 800eba6:	d0f9      	beq.n	800eb9c <__gethex+0x58>
 800eba8:	f7ff ffb6 	bl	800eb18 <__hexdig_fun>
 800ebac:	2301      	movs	r3, #1
 800ebae:	fab0 f480 	clz	r4, r0
 800ebb2:	0964      	lsrs	r4, r4, #5
 800ebb4:	465e      	mov	r6, fp
 800ebb6:	9301      	str	r3, [sp, #4]
 800ebb8:	4642      	mov	r2, r8
 800ebba:	4615      	mov	r5, r2
 800ebbc:	3201      	adds	r2, #1
 800ebbe:	7828      	ldrb	r0, [r5, #0]
 800ebc0:	f7ff ffaa 	bl	800eb18 <__hexdig_fun>
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	d1f8      	bne.n	800ebba <__gethex+0x76>
 800ebc8:	4994      	ldr	r1, [pc, #592]	; (800ee1c <__gethex+0x2d8>)
 800ebca:	2201      	movs	r2, #1
 800ebcc:	4628      	mov	r0, r5
 800ebce:	f7ff fe2f 	bl	800e830 <strncmp>
 800ebd2:	b978      	cbnz	r0, 800ebf4 <__gethex+0xb0>
 800ebd4:	b946      	cbnz	r6, 800ebe8 <__gethex+0xa4>
 800ebd6:	1c6e      	adds	r6, r5, #1
 800ebd8:	4632      	mov	r2, r6
 800ebda:	4615      	mov	r5, r2
 800ebdc:	3201      	adds	r2, #1
 800ebde:	7828      	ldrb	r0, [r5, #0]
 800ebe0:	f7ff ff9a 	bl	800eb18 <__hexdig_fun>
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	d1f8      	bne.n	800ebda <__gethex+0x96>
 800ebe8:	1b73      	subs	r3, r6, r5
 800ebea:	009e      	lsls	r6, r3, #2
 800ebec:	e004      	b.n	800ebf8 <__gethex+0xb4>
 800ebee:	2400      	movs	r4, #0
 800ebf0:	4626      	mov	r6, r4
 800ebf2:	e7e1      	b.n	800ebb8 <__gethex+0x74>
 800ebf4:	2e00      	cmp	r6, #0
 800ebf6:	d1f7      	bne.n	800ebe8 <__gethex+0xa4>
 800ebf8:	782b      	ldrb	r3, [r5, #0]
 800ebfa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ebfe:	2b50      	cmp	r3, #80	; 0x50
 800ec00:	d13d      	bne.n	800ec7e <__gethex+0x13a>
 800ec02:	786b      	ldrb	r3, [r5, #1]
 800ec04:	2b2b      	cmp	r3, #43	; 0x2b
 800ec06:	d02f      	beq.n	800ec68 <__gethex+0x124>
 800ec08:	2b2d      	cmp	r3, #45	; 0x2d
 800ec0a:	d031      	beq.n	800ec70 <__gethex+0x12c>
 800ec0c:	1c69      	adds	r1, r5, #1
 800ec0e:	f04f 0b00 	mov.w	fp, #0
 800ec12:	7808      	ldrb	r0, [r1, #0]
 800ec14:	f7ff ff80 	bl	800eb18 <__hexdig_fun>
 800ec18:	1e42      	subs	r2, r0, #1
 800ec1a:	b2d2      	uxtb	r2, r2
 800ec1c:	2a18      	cmp	r2, #24
 800ec1e:	d82e      	bhi.n	800ec7e <__gethex+0x13a>
 800ec20:	f1a0 0210 	sub.w	r2, r0, #16
 800ec24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ec28:	f7ff ff76 	bl	800eb18 <__hexdig_fun>
 800ec2c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ec30:	fa5f fc8c 	uxtb.w	ip, ip
 800ec34:	f1bc 0f18 	cmp.w	ip, #24
 800ec38:	d91d      	bls.n	800ec76 <__gethex+0x132>
 800ec3a:	f1bb 0f00 	cmp.w	fp, #0
 800ec3e:	d000      	beq.n	800ec42 <__gethex+0xfe>
 800ec40:	4252      	negs	r2, r2
 800ec42:	4416      	add	r6, r2
 800ec44:	f8ca 1000 	str.w	r1, [sl]
 800ec48:	b1dc      	cbz	r4, 800ec82 <__gethex+0x13e>
 800ec4a:	9b01      	ldr	r3, [sp, #4]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	bf14      	ite	ne
 800ec50:	f04f 0800 	movne.w	r8, #0
 800ec54:	f04f 0806 	moveq.w	r8, #6
 800ec58:	4640      	mov	r0, r8
 800ec5a:	b005      	add	sp, #20
 800ec5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec60:	4645      	mov	r5, r8
 800ec62:	4626      	mov	r6, r4
 800ec64:	2401      	movs	r4, #1
 800ec66:	e7c7      	b.n	800ebf8 <__gethex+0xb4>
 800ec68:	f04f 0b00 	mov.w	fp, #0
 800ec6c:	1ca9      	adds	r1, r5, #2
 800ec6e:	e7d0      	b.n	800ec12 <__gethex+0xce>
 800ec70:	f04f 0b01 	mov.w	fp, #1
 800ec74:	e7fa      	b.n	800ec6c <__gethex+0x128>
 800ec76:	230a      	movs	r3, #10
 800ec78:	fb03 0002 	mla	r0, r3, r2, r0
 800ec7c:	e7d0      	b.n	800ec20 <__gethex+0xdc>
 800ec7e:	4629      	mov	r1, r5
 800ec80:	e7e0      	b.n	800ec44 <__gethex+0x100>
 800ec82:	eba5 0308 	sub.w	r3, r5, r8
 800ec86:	3b01      	subs	r3, #1
 800ec88:	4621      	mov	r1, r4
 800ec8a:	2b07      	cmp	r3, #7
 800ec8c:	dc0a      	bgt.n	800eca4 <__gethex+0x160>
 800ec8e:	4648      	mov	r0, r9
 800ec90:	f000 fb06 	bl	800f2a0 <_Balloc>
 800ec94:	4604      	mov	r4, r0
 800ec96:	b940      	cbnz	r0, 800ecaa <__gethex+0x166>
 800ec98:	4b61      	ldr	r3, [pc, #388]	; (800ee20 <__gethex+0x2dc>)
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	21e4      	movs	r1, #228	; 0xe4
 800ec9e:	4861      	ldr	r0, [pc, #388]	; (800ee24 <__gethex+0x2e0>)
 800eca0:	f001 fb78 	bl	8010394 <__assert_func>
 800eca4:	3101      	adds	r1, #1
 800eca6:	105b      	asrs	r3, r3, #1
 800eca8:	e7ef      	b.n	800ec8a <__gethex+0x146>
 800ecaa:	f100 0a14 	add.w	sl, r0, #20
 800ecae:	2300      	movs	r3, #0
 800ecb0:	495a      	ldr	r1, [pc, #360]	; (800ee1c <__gethex+0x2d8>)
 800ecb2:	f8cd a004 	str.w	sl, [sp, #4]
 800ecb6:	469b      	mov	fp, r3
 800ecb8:	45a8      	cmp	r8, r5
 800ecba:	d342      	bcc.n	800ed42 <__gethex+0x1fe>
 800ecbc:	9801      	ldr	r0, [sp, #4]
 800ecbe:	f840 bb04 	str.w	fp, [r0], #4
 800ecc2:	eba0 000a 	sub.w	r0, r0, sl
 800ecc6:	1080      	asrs	r0, r0, #2
 800ecc8:	6120      	str	r0, [r4, #16]
 800ecca:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ecce:	4658      	mov	r0, fp
 800ecd0:	f000 fbd8 	bl	800f484 <__hi0bits>
 800ecd4:	683d      	ldr	r5, [r7, #0]
 800ecd6:	eba8 0000 	sub.w	r0, r8, r0
 800ecda:	42a8      	cmp	r0, r5
 800ecdc:	dd59      	ble.n	800ed92 <__gethex+0x24e>
 800ecde:	eba0 0805 	sub.w	r8, r0, r5
 800ece2:	4641      	mov	r1, r8
 800ece4:	4620      	mov	r0, r4
 800ece6:	f000 ff67 	bl	800fbb8 <__any_on>
 800ecea:	4683      	mov	fp, r0
 800ecec:	b1b8      	cbz	r0, 800ed1e <__gethex+0x1da>
 800ecee:	f108 33ff 	add.w	r3, r8, #4294967295
 800ecf2:	1159      	asrs	r1, r3, #5
 800ecf4:	f003 021f 	and.w	r2, r3, #31
 800ecf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ecfc:	f04f 0b01 	mov.w	fp, #1
 800ed00:	fa0b f202 	lsl.w	r2, fp, r2
 800ed04:	420a      	tst	r2, r1
 800ed06:	d00a      	beq.n	800ed1e <__gethex+0x1da>
 800ed08:	455b      	cmp	r3, fp
 800ed0a:	dd06      	ble.n	800ed1a <__gethex+0x1d6>
 800ed0c:	f1a8 0102 	sub.w	r1, r8, #2
 800ed10:	4620      	mov	r0, r4
 800ed12:	f000 ff51 	bl	800fbb8 <__any_on>
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d138      	bne.n	800ed8c <__gethex+0x248>
 800ed1a:	f04f 0b02 	mov.w	fp, #2
 800ed1e:	4641      	mov	r1, r8
 800ed20:	4620      	mov	r0, r4
 800ed22:	f7ff fea7 	bl	800ea74 <rshift>
 800ed26:	4446      	add	r6, r8
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	42b3      	cmp	r3, r6
 800ed2c:	da41      	bge.n	800edb2 <__gethex+0x26e>
 800ed2e:	4621      	mov	r1, r4
 800ed30:	4648      	mov	r0, r9
 800ed32:	f000 faf5 	bl	800f320 <_Bfree>
 800ed36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed38:	2300      	movs	r3, #0
 800ed3a:	6013      	str	r3, [r2, #0]
 800ed3c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ed40:	e78a      	b.n	800ec58 <__gethex+0x114>
 800ed42:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ed46:	2a2e      	cmp	r2, #46	; 0x2e
 800ed48:	d014      	beq.n	800ed74 <__gethex+0x230>
 800ed4a:	2b20      	cmp	r3, #32
 800ed4c:	d106      	bne.n	800ed5c <__gethex+0x218>
 800ed4e:	9b01      	ldr	r3, [sp, #4]
 800ed50:	f843 bb04 	str.w	fp, [r3], #4
 800ed54:	f04f 0b00 	mov.w	fp, #0
 800ed58:	9301      	str	r3, [sp, #4]
 800ed5a:	465b      	mov	r3, fp
 800ed5c:	7828      	ldrb	r0, [r5, #0]
 800ed5e:	9303      	str	r3, [sp, #12]
 800ed60:	f7ff feda 	bl	800eb18 <__hexdig_fun>
 800ed64:	9b03      	ldr	r3, [sp, #12]
 800ed66:	f000 000f 	and.w	r0, r0, #15
 800ed6a:	4098      	lsls	r0, r3
 800ed6c:	ea4b 0b00 	orr.w	fp, fp, r0
 800ed70:	3304      	adds	r3, #4
 800ed72:	e7a1      	b.n	800ecb8 <__gethex+0x174>
 800ed74:	45a8      	cmp	r8, r5
 800ed76:	d8e8      	bhi.n	800ed4a <__gethex+0x206>
 800ed78:	2201      	movs	r2, #1
 800ed7a:	4628      	mov	r0, r5
 800ed7c:	9303      	str	r3, [sp, #12]
 800ed7e:	f7ff fd57 	bl	800e830 <strncmp>
 800ed82:	4926      	ldr	r1, [pc, #152]	; (800ee1c <__gethex+0x2d8>)
 800ed84:	9b03      	ldr	r3, [sp, #12]
 800ed86:	2800      	cmp	r0, #0
 800ed88:	d1df      	bne.n	800ed4a <__gethex+0x206>
 800ed8a:	e795      	b.n	800ecb8 <__gethex+0x174>
 800ed8c:	f04f 0b03 	mov.w	fp, #3
 800ed90:	e7c5      	b.n	800ed1e <__gethex+0x1da>
 800ed92:	da0b      	bge.n	800edac <__gethex+0x268>
 800ed94:	eba5 0800 	sub.w	r8, r5, r0
 800ed98:	4621      	mov	r1, r4
 800ed9a:	4642      	mov	r2, r8
 800ed9c:	4648      	mov	r0, r9
 800ed9e:	f000 fcd9 	bl	800f754 <__lshift>
 800eda2:	eba6 0608 	sub.w	r6, r6, r8
 800eda6:	4604      	mov	r4, r0
 800eda8:	f100 0a14 	add.w	sl, r0, #20
 800edac:	f04f 0b00 	mov.w	fp, #0
 800edb0:	e7ba      	b.n	800ed28 <__gethex+0x1e4>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	42b3      	cmp	r3, r6
 800edb6:	dd73      	ble.n	800eea0 <__gethex+0x35c>
 800edb8:	1b9e      	subs	r6, r3, r6
 800edba:	42b5      	cmp	r5, r6
 800edbc:	dc34      	bgt.n	800ee28 <__gethex+0x2e4>
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2b02      	cmp	r3, #2
 800edc2:	d023      	beq.n	800ee0c <__gethex+0x2c8>
 800edc4:	2b03      	cmp	r3, #3
 800edc6:	d025      	beq.n	800ee14 <__gethex+0x2d0>
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d115      	bne.n	800edf8 <__gethex+0x2b4>
 800edcc:	42b5      	cmp	r5, r6
 800edce:	d113      	bne.n	800edf8 <__gethex+0x2b4>
 800edd0:	2d01      	cmp	r5, #1
 800edd2:	d10b      	bne.n	800edec <__gethex+0x2a8>
 800edd4:	9a02      	ldr	r2, [sp, #8]
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6013      	str	r3, [r2, #0]
 800edda:	2301      	movs	r3, #1
 800eddc:	6123      	str	r3, [r4, #16]
 800edde:	f8ca 3000 	str.w	r3, [sl]
 800ede2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ede4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ede8:	601c      	str	r4, [r3, #0]
 800edea:	e735      	b.n	800ec58 <__gethex+0x114>
 800edec:	1e69      	subs	r1, r5, #1
 800edee:	4620      	mov	r0, r4
 800edf0:	f000 fee2 	bl	800fbb8 <__any_on>
 800edf4:	2800      	cmp	r0, #0
 800edf6:	d1ed      	bne.n	800edd4 <__gethex+0x290>
 800edf8:	4621      	mov	r1, r4
 800edfa:	4648      	mov	r0, r9
 800edfc:	f000 fa90 	bl	800f320 <_Bfree>
 800ee00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee02:	2300      	movs	r3, #0
 800ee04:	6013      	str	r3, [r2, #0]
 800ee06:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ee0a:	e725      	b.n	800ec58 <__gethex+0x114>
 800ee0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d1f2      	bne.n	800edf8 <__gethex+0x2b4>
 800ee12:	e7df      	b.n	800edd4 <__gethex+0x290>
 800ee14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d1dc      	bne.n	800edd4 <__gethex+0x290>
 800ee1a:	e7ed      	b.n	800edf8 <__gethex+0x2b4>
 800ee1c:	08010d0c 	.word	0x08010d0c
 800ee20:	08010e79 	.word	0x08010e79
 800ee24:	08010e8a 	.word	0x08010e8a
 800ee28:	f106 38ff 	add.w	r8, r6, #4294967295
 800ee2c:	f1bb 0f00 	cmp.w	fp, #0
 800ee30:	d133      	bne.n	800ee9a <__gethex+0x356>
 800ee32:	f1b8 0f00 	cmp.w	r8, #0
 800ee36:	d004      	beq.n	800ee42 <__gethex+0x2fe>
 800ee38:	4641      	mov	r1, r8
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f000 febc 	bl	800fbb8 <__any_on>
 800ee40:	4683      	mov	fp, r0
 800ee42:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ee46:	2301      	movs	r3, #1
 800ee48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ee4c:	f008 081f 	and.w	r8, r8, #31
 800ee50:	fa03 f308 	lsl.w	r3, r3, r8
 800ee54:	4213      	tst	r3, r2
 800ee56:	4631      	mov	r1, r6
 800ee58:	4620      	mov	r0, r4
 800ee5a:	bf18      	it	ne
 800ee5c:	f04b 0b02 	orrne.w	fp, fp, #2
 800ee60:	1bad      	subs	r5, r5, r6
 800ee62:	f7ff fe07 	bl	800ea74 <rshift>
 800ee66:	687e      	ldr	r6, [r7, #4]
 800ee68:	f04f 0802 	mov.w	r8, #2
 800ee6c:	f1bb 0f00 	cmp.w	fp, #0
 800ee70:	d04a      	beq.n	800ef08 <__gethex+0x3c4>
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2b02      	cmp	r3, #2
 800ee76:	d016      	beq.n	800eea6 <__gethex+0x362>
 800ee78:	2b03      	cmp	r3, #3
 800ee7a:	d018      	beq.n	800eeae <__gethex+0x36a>
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d109      	bne.n	800ee94 <__gethex+0x350>
 800ee80:	f01b 0f02 	tst.w	fp, #2
 800ee84:	d006      	beq.n	800ee94 <__gethex+0x350>
 800ee86:	f8da 3000 	ldr.w	r3, [sl]
 800ee8a:	ea4b 0b03 	orr.w	fp, fp, r3
 800ee8e:	f01b 0f01 	tst.w	fp, #1
 800ee92:	d10f      	bne.n	800eeb4 <__gethex+0x370>
 800ee94:	f048 0810 	orr.w	r8, r8, #16
 800ee98:	e036      	b.n	800ef08 <__gethex+0x3c4>
 800ee9a:	f04f 0b01 	mov.w	fp, #1
 800ee9e:	e7d0      	b.n	800ee42 <__gethex+0x2fe>
 800eea0:	f04f 0801 	mov.w	r8, #1
 800eea4:	e7e2      	b.n	800ee6c <__gethex+0x328>
 800eea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eea8:	f1c3 0301 	rsb	r3, r3, #1
 800eeac:	930f      	str	r3, [sp, #60]	; 0x3c
 800eeae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d0ef      	beq.n	800ee94 <__gethex+0x350>
 800eeb4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eeb8:	f104 0214 	add.w	r2, r4, #20
 800eebc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800eec0:	9301      	str	r3, [sp, #4]
 800eec2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800eec6:	2300      	movs	r3, #0
 800eec8:	4694      	mov	ip, r2
 800eeca:	f852 1b04 	ldr.w	r1, [r2], #4
 800eece:	f1b1 3fff 	cmp.w	r1, #4294967295
 800eed2:	d01e      	beq.n	800ef12 <__gethex+0x3ce>
 800eed4:	3101      	adds	r1, #1
 800eed6:	f8cc 1000 	str.w	r1, [ip]
 800eeda:	f1b8 0f02 	cmp.w	r8, #2
 800eede:	f104 0214 	add.w	r2, r4, #20
 800eee2:	d13d      	bne.n	800ef60 <__gethex+0x41c>
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	3b01      	subs	r3, #1
 800eee8:	42ab      	cmp	r3, r5
 800eeea:	d10b      	bne.n	800ef04 <__gethex+0x3c0>
 800eeec:	1169      	asrs	r1, r5, #5
 800eeee:	2301      	movs	r3, #1
 800eef0:	f005 051f 	and.w	r5, r5, #31
 800eef4:	fa03 f505 	lsl.w	r5, r3, r5
 800eef8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eefc:	421d      	tst	r5, r3
 800eefe:	bf18      	it	ne
 800ef00:	f04f 0801 	movne.w	r8, #1
 800ef04:	f048 0820 	orr.w	r8, r8, #32
 800ef08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef0a:	601c      	str	r4, [r3, #0]
 800ef0c:	9b02      	ldr	r3, [sp, #8]
 800ef0e:	601e      	str	r6, [r3, #0]
 800ef10:	e6a2      	b.n	800ec58 <__gethex+0x114>
 800ef12:	4290      	cmp	r0, r2
 800ef14:	f842 3c04 	str.w	r3, [r2, #-4]
 800ef18:	d8d6      	bhi.n	800eec8 <__gethex+0x384>
 800ef1a:	68a2      	ldr	r2, [r4, #8]
 800ef1c:	4593      	cmp	fp, r2
 800ef1e:	db17      	blt.n	800ef50 <__gethex+0x40c>
 800ef20:	6861      	ldr	r1, [r4, #4]
 800ef22:	4648      	mov	r0, r9
 800ef24:	3101      	adds	r1, #1
 800ef26:	f000 f9bb 	bl	800f2a0 <_Balloc>
 800ef2a:	4682      	mov	sl, r0
 800ef2c:	b918      	cbnz	r0, 800ef36 <__gethex+0x3f2>
 800ef2e:	4b1b      	ldr	r3, [pc, #108]	; (800ef9c <__gethex+0x458>)
 800ef30:	4602      	mov	r2, r0
 800ef32:	2184      	movs	r1, #132	; 0x84
 800ef34:	e6b3      	b.n	800ec9e <__gethex+0x15a>
 800ef36:	6922      	ldr	r2, [r4, #16]
 800ef38:	3202      	adds	r2, #2
 800ef3a:	f104 010c 	add.w	r1, r4, #12
 800ef3e:	0092      	lsls	r2, r2, #2
 800ef40:	300c      	adds	r0, #12
 800ef42:	f7ff fd2e 	bl	800e9a2 <memcpy>
 800ef46:	4621      	mov	r1, r4
 800ef48:	4648      	mov	r0, r9
 800ef4a:	f000 f9e9 	bl	800f320 <_Bfree>
 800ef4e:	4654      	mov	r4, sl
 800ef50:	6922      	ldr	r2, [r4, #16]
 800ef52:	1c51      	adds	r1, r2, #1
 800ef54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ef58:	6121      	str	r1, [r4, #16]
 800ef5a:	2101      	movs	r1, #1
 800ef5c:	6151      	str	r1, [r2, #20]
 800ef5e:	e7bc      	b.n	800eeda <__gethex+0x396>
 800ef60:	6921      	ldr	r1, [r4, #16]
 800ef62:	4559      	cmp	r1, fp
 800ef64:	dd0b      	ble.n	800ef7e <__gethex+0x43a>
 800ef66:	2101      	movs	r1, #1
 800ef68:	4620      	mov	r0, r4
 800ef6a:	f7ff fd83 	bl	800ea74 <rshift>
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	3601      	adds	r6, #1
 800ef72:	42b3      	cmp	r3, r6
 800ef74:	f6ff aedb 	blt.w	800ed2e <__gethex+0x1ea>
 800ef78:	f04f 0801 	mov.w	r8, #1
 800ef7c:	e7c2      	b.n	800ef04 <__gethex+0x3c0>
 800ef7e:	f015 051f 	ands.w	r5, r5, #31
 800ef82:	d0f9      	beq.n	800ef78 <__gethex+0x434>
 800ef84:	9b01      	ldr	r3, [sp, #4]
 800ef86:	441a      	add	r2, r3
 800ef88:	f1c5 0520 	rsb	r5, r5, #32
 800ef8c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ef90:	f000 fa78 	bl	800f484 <__hi0bits>
 800ef94:	42a8      	cmp	r0, r5
 800ef96:	dbe6      	blt.n	800ef66 <__gethex+0x422>
 800ef98:	e7ee      	b.n	800ef78 <__gethex+0x434>
 800ef9a:	bf00      	nop
 800ef9c:	08010e79 	.word	0x08010e79

0800efa0 <L_shift>:
 800efa0:	f1c2 0208 	rsb	r2, r2, #8
 800efa4:	0092      	lsls	r2, r2, #2
 800efa6:	b570      	push	{r4, r5, r6, lr}
 800efa8:	f1c2 0620 	rsb	r6, r2, #32
 800efac:	6843      	ldr	r3, [r0, #4]
 800efae:	6804      	ldr	r4, [r0, #0]
 800efb0:	fa03 f506 	lsl.w	r5, r3, r6
 800efb4:	432c      	orrs	r4, r5
 800efb6:	40d3      	lsrs	r3, r2
 800efb8:	6004      	str	r4, [r0, #0]
 800efba:	f840 3f04 	str.w	r3, [r0, #4]!
 800efbe:	4288      	cmp	r0, r1
 800efc0:	d3f4      	bcc.n	800efac <L_shift+0xc>
 800efc2:	bd70      	pop	{r4, r5, r6, pc}

0800efc4 <__match>:
 800efc4:	b530      	push	{r4, r5, lr}
 800efc6:	6803      	ldr	r3, [r0, #0]
 800efc8:	3301      	adds	r3, #1
 800efca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efce:	b914      	cbnz	r4, 800efd6 <__match+0x12>
 800efd0:	6003      	str	r3, [r0, #0]
 800efd2:	2001      	movs	r0, #1
 800efd4:	bd30      	pop	{r4, r5, pc}
 800efd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efda:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800efde:	2d19      	cmp	r5, #25
 800efe0:	bf98      	it	ls
 800efe2:	3220      	addls	r2, #32
 800efe4:	42a2      	cmp	r2, r4
 800efe6:	d0f0      	beq.n	800efca <__match+0x6>
 800efe8:	2000      	movs	r0, #0
 800efea:	e7f3      	b.n	800efd4 <__match+0x10>

0800efec <__hexnan>:
 800efec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff0:	680b      	ldr	r3, [r1, #0]
 800eff2:	6801      	ldr	r1, [r0, #0]
 800eff4:	115e      	asrs	r6, r3, #5
 800eff6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800effa:	f013 031f 	ands.w	r3, r3, #31
 800effe:	b087      	sub	sp, #28
 800f000:	bf18      	it	ne
 800f002:	3604      	addne	r6, #4
 800f004:	2500      	movs	r5, #0
 800f006:	1f37      	subs	r7, r6, #4
 800f008:	4682      	mov	sl, r0
 800f00a:	4690      	mov	r8, r2
 800f00c:	9301      	str	r3, [sp, #4]
 800f00e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f012:	46b9      	mov	r9, r7
 800f014:	463c      	mov	r4, r7
 800f016:	9502      	str	r5, [sp, #8]
 800f018:	46ab      	mov	fp, r5
 800f01a:	784a      	ldrb	r2, [r1, #1]
 800f01c:	1c4b      	adds	r3, r1, #1
 800f01e:	9303      	str	r3, [sp, #12]
 800f020:	b342      	cbz	r2, 800f074 <__hexnan+0x88>
 800f022:	4610      	mov	r0, r2
 800f024:	9105      	str	r1, [sp, #20]
 800f026:	9204      	str	r2, [sp, #16]
 800f028:	f7ff fd76 	bl	800eb18 <__hexdig_fun>
 800f02c:	2800      	cmp	r0, #0
 800f02e:	d14f      	bne.n	800f0d0 <__hexnan+0xe4>
 800f030:	9a04      	ldr	r2, [sp, #16]
 800f032:	9905      	ldr	r1, [sp, #20]
 800f034:	2a20      	cmp	r2, #32
 800f036:	d818      	bhi.n	800f06a <__hexnan+0x7e>
 800f038:	9b02      	ldr	r3, [sp, #8]
 800f03a:	459b      	cmp	fp, r3
 800f03c:	dd13      	ble.n	800f066 <__hexnan+0x7a>
 800f03e:	454c      	cmp	r4, r9
 800f040:	d206      	bcs.n	800f050 <__hexnan+0x64>
 800f042:	2d07      	cmp	r5, #7
 800f044:	dc04      	bgt.n	800f050 <__hexnan+0x64>
 800f046:	462a      	mov	r2, r5
 800f048:	4649      	mov	r1, r9
 800f04a:	4620      	mov	r0, r4
 800f04c:	f7ff ffa8 	bl	800efa0 <L_shift>
 800f050:	4544      	cmp	r4, r8
 800f052:	d950      	bls.n	800f0f6 <__hexnan+0x10a>
 800f054:	2300      	movs	r3, #0
 800f056:	f1a4 0904 	sub.w	r9, r4, #4
 800f05a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f05e:	f8cd b008 	str.w	fp, [sp, #8]
 800f062:	464c      	mov	r4, r9
 800f064:	461d      	mov	r5, r3
 800f066:	9903      	ldr	r1, [sp, #12]
 800f068:	e7d7      	b.n	800f01a <__hexnan+0x2e>
 800f06a:	2a29      	cmp	r2, #41	; 0x29
 800f06c:	d155      	bne.n	800f11a <__hexnan+0x12e>
 800f06e:	3102      	adds	r1, #2
 800f070:	f8ca 1000 	str.w	r1, [sl]
 800f074:	f1bb 0f00 	cmp.w	fp, #0
 800f078:	d04f      	beq.n	800f11a <__hexnan+0x12e>
 800f07a:	454c      	cmp	r4, r9
 800f07c:	d206      	bcs.n	800f08c <__hexnan+0xa0>
 800f07e:	2d07      	cmp	r5, #7
 800f080:	dc04      	bgt.n	800f08c <__hexnan+0xa0>
 800f082:	462a      	mov	r2, r5
 800f084:	4649      	mov	r1, r9
 800f086:	4620      	mov	r0, r4
 800f088:	f7ff ff8a 	bl	800efa0 <L_shift>
 800f08c:	4544      	cmp	r4, r8
 800f08e:	d934      	bls.n	800f0fa <__hexnan+0x10e>
 800f090:	f1a8 0204 	sub.w	r2, r8, #4
 800f094:	4623      	mov	r3, r4
 800f096:	f853 1b04 	ldr.w	r1, [r3], #4
 800f09a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f09e:	429f      	cmp	r7, r3
 800f0a0:	d2f9      	bcs.n	800f096 <__hexnan+0xaa>
 800f0a2:	1b3b      	subs	r3, r7, r4
 800f0a4:	f023 0303 	bic.w	r3, r3, #3
 800f0a8:	3304      	adds	r3, #4
 800f0aa:	3e03      	subs	r6, #3
 800f0ac:	3401      	adds	r4, #1
 800f0ae:	42a6      	cmp	r6, r4
 800f0b0:	bf38      	it	cc
 800f0b2:	2304      	movcc	r3, #4
 800f0b4:	4443      	add	r3, r8
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f843 2b04 	str.w	r2, [r3], #4
 800f0bc:	429f      	cmp	r7, r3
 800f0be:	d2fb      	bcs.n	800f0b8 <__hexnan+0xcc>
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	b91b      	cbnz	r3, 800f0cc <__hexnan+0xe0>
 800f0c4:	4547      	cmp	r7, r8
 800f0c6:	d126      	bne.n	800f116 <__hexnan+0x12a>
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	603b      	str	r3, [r7, #0]
 800f0cc:	2005      	movs	r0, #5
 800f0ce:	e025      	b.n	800f11c <__hexnan+0x130>
 800f0d0:	3501      	adds	r5, #1
 800f0d2:	2d08      	cmp	r5, #8
 800f0d4:	f10b 0b01 	add.w	fp, fp, #1
 800f0d8:	dd06      	ble.n	800f0e8 <__hexnan+0xfc>
 800f0da:	4544      	cmp	r4, r8
 800f0dc:	d9c3      	bls.n	800f066 <__hexnan+0x7a>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f0e4:	2501      	movs	r5, #1
 800f0e6:	3c04      	subs	r4, #4
 800f0e8:	6822      	ldr	r2, [r4, #0]
 800f0ea:	f000 000f 	and.w	r0, r0, #15
 800f0ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f0f2:	6020      	str	r0, [r4, #0]
 800f0f4:	e7b7      	b.n	800f066 <__hexnan+0x7a>
 800f0f6:	2508      	movs	r5, #8
 800f0f8:	e7b5      	b.n	800f066 <__hexnan+0x7a>
 800f0fa:	9b01      	ldr	r3, [sp, #4]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d0df      	beq.n	800f0c0 <__hexnan+0xd4>
 800f100:	f1c3 0320 	rsb	r3, r3, #32
 800f104:	f04f 32ff 	mov.w	r2, #4294967295
 800f108:	40da      	lsrs	r2, r3
 800f10a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f10e:	4013      	ands	r3, r2
 800f110:	f846 3c04 	str.w	r3, [r6, #-4]
 800f114:	e7d4      	b.n	800f0c0 <__hexnan+0xd4>
 800f116:	3f04      	subs	r7, #4
 800f118:	e7d2      	b.n	800f0c0 <__hexnan+0xd4>
 800f11a:	2004      	movs	r0, #4
 800f11c:	b007      	add	sp, #28
 800f11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800f124 <sbrk_aligned>:
 800f124:	b570      	push	{r4, r5, r6, lr}
 800f126:	4e0e      	ldr	r6, [pc, #56]	; (800f160 <sbrk_aligned+0x3c>)
 800f128:	460c      	mov	r4, r1
 800f12a:	6831      	ldr	r1, [r6, #0]
 800f12c:	4605      	mov	r5, r0
 800f12e:	b911      	cbnz	r1, 800f136 <sbrk_aligned+0x12>
 800f130:	f001 f920 	bl	8010374 <_sbrk_r>
 800f134:	6030      	str	r0, [r6, #0]
 800f136:	4621      	mov	r1, r4
 800f138:	4628      	mov	r0, r5
 800f13a:	f001 f91b 	bl	8010374 <_sbrk_r>
 800f13e:	1c43      	adds	r3, r0, #1
 800f140:	d00a      	beq.n	800f158 <sbrk_aligned+0x34>
 800f142:	1cc4      	adds	r4, r0, #3
 800f144:	f024 0403 	bic.w	r4, r4, #3
 800f148:	42a0      	cmp	r0, r4
 800f14a:	d007      	beq.n	800f15c <sbrk_aligned+0x38>
 800f14c:	1a21      	subs	r1, r4, r0
 800f14e:	4628      	mov	r0, r5
 800f150:	f001 f910 	bl	8010374 <_sbrk_r>
 800f154:	3001      	adds	r0, #1
 800f156:	d101      	bne.n	800f15c <sbrk_aligned+0x38>
 800f158:	f04f 34ff 	mov.w	r4, #4294967295
 800f15c:	4620      	mov	r0, r4
 800f15e:	bd70      	pop	{r4, r5, r6, pc}
 800f160:	20003638 	.word	0x20003638

0800f164 <_malloc_r>:
 800f164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f168:	1ccd      	adds	r5, r1, #3
 800f16a:	f025 0503 	bic.w	r5, r5, #3
 800f16e:	3508      	adds	r5, #8
 800f170:	2d0c      	cmp	r5, #12
 800f172:	bf38      	it	cc
 800f174:	250c      	movcc	r5, #12
 800f176:	2d00      	cmp	r5, #0
 800f178:	4607      	mov	r7, r0
 800f17a:	db01      	blt.n	800f180 <_malloc_r+0x1c>
 800f17c:	42a9      	cmp	r1, r5
 800f17e:	d905      	bls.n	800f18c <_malloc_r+0x28>
 800f180:	230c      	movs	r3, #12
 800f182:	603b      	str	r3, [r7, #0]
 800f184:	2600      	movs	r6, #0
 800f186:	4630      	mov	r0, r6
 800f188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f18c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f260 <_malloc_r+0xfc>
 800f190:	f000 f87a 	bl	800f288 <__malloc_lock>
 800f194:	f8d8 3000 	ldr.w	r3, [r8]
 800f198:	461c      	mov	r4, r3
 800f19a:	bb5c      	cbnz	r4, 800f1f4 <_malloc_r+0x90>
 800f19c:	4629      	mov	r1, r5
 800f19e:	4638      	mov	r0, r7
 800f1a0:	f7ff ffc0 	bl	800f124 <sbrk_aligned>
 800f1a4:	1c43      	adds	r3, r0, #1
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	d155      	bne.n	800f256 <_malloc_r+0xf2>
 800f1aa:	f8d8 4000 	ldr.w	r4, [r8]
 800f1ae:	4626      	mov	r6, r4
 800f1b0:	2e00      	cmp	r6, #0
 800f1b2:	d145      	bne.n	800f240 <_malloc_r+0xdc>
 800f1b4:	2c00      	cmp	r4, #0
 800f1b6:	d048      	beq.n	800f24a <_malloc_r+0xe6>
 800f1b8:	6823      	ldr	r3, [r4, #0]
 800f1ba:	4631      	mov	r1, r6
 800f1bc:	4638      	mov	r0, r7
 800f1be:	eb04 0903 	add.w	r9, r4, r3
 800f1c2:	f001 f8d7 	bl	8010374 <_sbrk_r>
 800f1c6:	4581      	cmp	r9, r0
 800f1c8:	d13f      	bne.n	800f24a <_malloc_r+0xe6>
 800f1ca:	6821      	ldr	r1, [r4, #0]
 800f1cc:	1a6d      	subs	r5, r5, r1
 800f1ce:	4629      	mov	r1, r5
 800f1d0:	4638      	mov	r0, r7
 800f1d2:	f7ff ffa7 	bl	800f124 <sbrk_aligned>
 800f1d6:	3001      	adds	r0, #1
 800f1d8:	d037      	beq.n	800f24a <_malloc_r+0xe6>
 800f1da:	6823      	ldr	r3, [r4, #0]
 800f1dc:	442b      	add	r3, r5
 800f1de:	6023      	str	r3, [r4, #0]
 800f1e0:	f8d8 3000 	ldr.w	r3, [r8]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d038      	beq.n	800f25a <_malloc_r+0xf6>
 800f1e8:	685a      	ldr	r2, [r3, #4]
 800f1ea:	42a2      	cmp	r2, r4
 800f1ec:	d12b      	bne.n	800f246 <_malloc_r+0xe2>
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	605a      	str	r2, [r3, #4]
 800f1f2:	e00f      	b.n	800f214 <_malloc_r+0xb0>
 800f1f4:	6822      	ldr	r2, [r4, #0]
 800f1f6:	1b52      	subs	r2, r2, r5
 800f1f8:	d41f      	bmi.n	800f23a <_malloc_r+0xd6>
 800f1fa:	2a0b      	cmp	r2, #11
 800f1fc:	d917      	bls.n	800f22e <_malloc_r+0xca>
 800f1fe:	1961      	adds	r1, r4, r5
 800f200:	42a3      	cmp	r3, r4
 800f202:	6025      	str	r5, [r4, #0]
 800f204:	bf18      	it	ne
 800f206:	6059      	strne	r1, [r3, #4]
 800f208:	6863      	ldr	r3, [r4, #4]
 800f20a:	bf08      	it	eq
 800f20c:	f8c8 1000 	streq.w	r1, [r8]
 800f210:	5162      	str	r2, [r4, r5]
 800f212:	604b      	str	r3, [r1, #4]
 800f214:	4638      	mov	r0, r7
 800f216:	f104 060b 	add.w	r6, r4, #11
 800f21a:	f000 f83b 	bl	800f294 <__malloc_unlock>
 800f21e:	f026 0607 	bic.w	r6, r6, #7
 800f222:	1d23      	adds	r3, r4, #4
 800f224:	1af2      	subs	r2, r6, r3
 800f226:	d0ae      	beq.n	800f186 <_malloc_r+0x22>
 800f228:	1b9b      	subs	r3, r3, r6
 800f22a:	50a3      	str	r3, [r4, r2]
 800f22c:	e7ab      	b.n	800f186 <_malloc_r+0x22>
 800f22e:	42a3      	cmp	r3, r4
 800f230:	6862      	ldr	r2, [r4, #4]
 800f232:	d1dd      	bne.n	800f1f0 <_malloc_r+0x8c>
 800f234:	f8c8 2000 	str.w	r2, [r8]
 800f238:	e7ec      	b.n	800f214 <_malloc_r+0xb0>
 800f23a:	4623      	mov	r3, r4
 800f23c:	6864      	ldr	r4, [r4, #4]
 800f23e:	e7ac      	b.n	800f19a <_malloc_r+0x36>
 800f240:	4634      	mov	r4, r6
 800f242:	6876      	ldr	r6, [r6, #4]
 800f244:	e7b4      	b.n	800f1b0 <_malloc_r+0x4c>
 800f246:	4613      	mov	r3, r2
 800f248:	e7cc      	b.n	800f1e4 <_malloc_r+0x80>
 800f24a:	230c      	movs	r3, #12
 800f24c:	603b      	str	r3, [r7, #0]
 800f24e:	4638      	mov	r0, r7
 800f250:	f000 f820 	bl	800f294 <__malloc_unlock>
 800f254:	e797      	b.n	800f186 <_malloc_r+0x22>
 800f256:	6025      	str	r5, [r4, #0]
 800f258:	e7dc      	b.n	800f214 <_malloc_r+0xb0>
 800f25a:	605b      	str	r3, [r3, #4]
 800f25c:	deff      	udf	#255	; 0xff
 800f25e:	bf00      	nop
 800f260:	20003634 	.word	0x20003634

0800f264 <__ascii_mbtowc>:
 800f264:	b082      	sub	sp, #8
 800f266:	b901      	cbnz	r1, 800f26a <__ascii_mbtowc+0x6>
 800f268:	a901      	add	r1, sp, #4
 800f26a:	b142      	cbz	r2, 800f27e <__ascii_mbtowc+0x1a>
 800f26c:	b14b      	cbz	r3, 800f282 <__ascii_mbtowc+0x1e>
 800f26e:	7813      	ldrb	r3, [r2, #0]
 800f270:	600b      	str	r3, [r1, #0]
 800f272:	7812      	ldrb	r2, [r2, #0]
 800f274:	1e10      	subs	r0, r2, #0
 800f276:	bf18      	it	ne
 800f278:	2001      	movne	r0, #1
 800f27a:	b002      	add	sp, #8
 800f27c:	4770      	bx	lr
 800f27e:	4610      	mov	r0, r2
 800f280:	e7fb      	b.n	800f27a <__ascii_mbtowc+0x16>
 800f282:	f06f 0001 	mvn.w	r0, #1
 800f286:	e7f8      	b.n	800f27a <__ascii_mbtowc+0x16>

0800f288 <__malloc_lock>:
 800f288:	4801      	ldr	r0, [pc, #4]	; (800f290 <__malloc_lock+0x8>)
 800f28a:	f7ff bb80 	b.w	800e98e <__retarget_lock_acquire_recursive>
 800f28e:	bf00      	nop
 800f290:	20003630 	.word	0x20003630

0800f294 <__malloc_unlock>:
 800f294:	4801      	ldr	r0, [pc, #4]	; (800f29c <__malloc_unlock+0x8>)
 800f296:	f7ff bb7b 	b.w	800e990 <__retarget_lock_release_recursive>
 800f29a:	bf00      	nop
 800f29c:	20003630 	.word	0x20003630

0800f2a0 <_Balloc>:
 800f2a0:	b570      	push	{r4, r5, r6, lr}
 800f2a2:	69c6      	ldr	r6, [r0, #28]
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	460d      	mov	r5, r1
 800f2a8:	b976      	cbnz	r6, 800f2c8 <_Balloc+0x28>
 800f2aa:	2010      	movs	r0, #16
 800f2ac:	f001 f8a6 	bl	80103fc <malloc>
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	61e0      	str	r0, [r4, #28]
 800f2b4:	b920      	cbnz	r0, 800f2c0 <_Balloc+0x20>
 800f2b6:	4b18      	ldr	r3, [pc, #96]	; (800f318 <_Balloc+0x78>)
 800f2b8:	4818      	ldr	r0, [pc, #96]	; (800f31c <_Balloc+0x7c>)
 800f2ba:	216b      	movs	r1, #107	; 0x6b
 800f2bc:	f001 f86a 	bl	8010394 <__assert_func>
 800f2c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2c4:	6006      	str	r6, [r0, #0]
 800f2c6:	60c6      	str	r6, [r0, #12]
 800f2c8:	69e6      	ldr	r6, [r4, #28]
 800f2ca:	68f3      	ldr	r3, [r6, #12]
 800f2cc:	b183      	cbz	r3, 800f2f0 <_Balloc+0x50>
 800f2ce:	69e3      	ldr	r3, [r4, #28]
 800f2d0:	68db      	ldr	r3, [r3, #12]
 800f2d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f2d6:	b9b8      	cbnz	r0, 800f308 <_Balloc+0x68>
 800f2d8:	2101      	movs	r1, #1
 800f2da:	fa01 f605 	lsl.w	r6, r1, r5
 800f2de:	1d72      	adds	r2, r6, #5
 800f2e0:	0092      	lsls	r2, r2, #2
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	f001 f874 	bl	80103d0 <_calloc_r>
 800f2e8:	b160      	cbz	r0, 800f304 <_Balloc+0x64>
 800f2ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f2ee:	e00e      	b.n	800f30e <_Balloc+0x6e>
 800f2f0:	2221      	movs	r2, #33	; 0x21
 800f2f2:	2104      	movs	r1, #4
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	f001 f86b 	bl	80103d0 <_calloc_r>
 800f2fa:	69e3      	ldr	r3, [r4, #28]
 800f2fc:	60f0      	str	r0, [r6, #12]
 800f2fe:	68db      	ldr	r3, [r3, #12]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d1e4      	bne.n	800f2ce <_Balloc+0x2e>
 800f304:	2000      	movs	r0, #0
 800f306:	bd70      	pop	{r4, r5, r6, pc}
 800f308:	6802      	ldr	r2, [r0, #0]
 800f30a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f30e:	2300      	movs	r3, #0
 800f310:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f314:	e7f7      	b.n	800f306 <_Balloc+0x66>
 800f316:	bf00      	nop
 800f318:	08010eea 	.word	0x08010eea
 800f31c:	08010f01 	.word	0x08010f01

0800f320 <_Bfree>:
 800f320:	b570      	push	{r4, r5, r6, lr}
 800f322:	69c6      	ldr	r6, [r0, #28]
 800f324:	4605      	mov	r5, r0
 800f326:	460c      	mov	r4, r1
 800f328:	b976      	cbnz	r6, 800f348 <_Bfree+0x28>
 800f32a:	2010      	movs	r0, #16
 800f32c:	f001 f866 	bl	80103fc <malloc>
 800f330:	4602      	mov	r2, r0
 800f332:	61e8      	str	r0, [r5, #28]
 800f334:	b920      	cbnz	r0, 800f340 <_Bfree+0x20>
 800f336:	4b09      	ldr	r3, [pc, #36]	; (800f35c <_Bfree+0x3c>)
 800f338:	4809      	ldr	r0, [pc, #36]	; (800f360 <_Bfree+0x40>)
 800f33a:	218f      	movs	r1, #143	; 0x8f
 800f33c:	f001 f82a 	bl	8010394 <__assert_func>
 800f340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f344:	6006      	str	r6, [r0, #0]
 800f346:	60c6      	str	r6, [r0, #12]
 800f348:	b13c      	cbz	r4, 800f35a <_Bfree+0x3a>
 800f34a:	69eb      	ldr	r3, [r5, #28]
 800f34c:	6862      	ldr	r2, [r4, #4]
 800f34e:	68db      	ldr	r3, [r3, #12]
 800f350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f354:	6021      	str	r1, [r4, #0]
 800f356:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f35a:	bd70      	pop	{r4, r5, r6, pc}
 800f35c:	08010eea 	.word	0x08010eea
 800f360:	08010f01 	.word	0x08010f01

0800f364 <__multadd>:
 800f364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f368:	690d      	ldr	r5, [r1, #16]
 800f36a:	4607      	mov	r7, r0
 800f36c:	460c      	mov	r4, r1
 800f36e:	461e      	mov	r6, r3
 800f370:	f101 0c14 	add.w	ip, r1, #20
 800f374:	2000      	movs	r0, #0
 800f376:	f8dc 3000 	ldr.w	r3, [ip]
 800f37a:	b299      	uxth	r1, r3
 800f37c:	fb02 6101 	mla	r1, r2, r1, r6
 800f380:	0c1e      	lsrs	r6, r3, #16
 800f382:	0c0b      	lsrs	r3, r1, #16
 800f384:	fb02 3306 	mla	r3, r2, r6, r3
 800f388:	b289      	uxth	r1, r1
 800f38a:	3001      	adds	r0, #1
 800f38c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f390:	4285      	cmp	r5, r0
 800f392:	f84c 1b04 	str.w	r1, [ip], #4
 800f396:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f39a:	dcec      	bgt.n	800f376 <__multadd+0x12>
 800f39c:	b30e      	cbz	r6, 800f3e2 <__multadd+0x7e>
 800f39e:	68a3      	ldr	r3, [r4, #8]
 800f3a0:	42ab      	cmp	r3, r5
 800f3a2:	dc19      	bgt.n	800f3d8 <__multadd+0x74>
 800f3a4:	6861      	ldr	r1, [r4, #4]
 800f3a6:	4638      	mov	r0, r7
 800f3a8:	3101      	adds	r1, #1
 800f3aa:	f7ff ff79 	bl	800f2a0 <_Balloc>
 800f3ae:	4680      	mov	r8, r0
 800f3b0:	b928      	cbnz	r0, 800f3be <__multadd+0x5a>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	4b0c      	ldr	r3, [pc, #48]	; (800f3e8 <__multadd+0x84>)
 800f3b6:	480d      	ldr	r0, [pc, #52]	; (800f3ec <__multadd+0x88>)
 800f3b8:	21ba      	movs	r1, #186	; 0xba
 800f3ba:	f000 ffeb 	bl	8010394 <__assert_func>
 800f3be:	6922      	ldr	r2, [r4, #16]
 800f3c0:	3202      	adds	r2, #2
 800f3c2:	f104 010c 	add.w	r1, r4, #12
 800f3c6:	0092      	lsls	r2, r2, #2
 800f3c8:	300c      	adds	r0, #12
 800f3ca:	f7ff faea 	bl	800e9a2 <memcpy>
 800f3ce:	4621      	mov	r1, r4
 800f3d0:	4638      	mov	r0, r7
 800f3d2:	f7ff ffa5 	bl	800f320 <_Bfree>
 800f3d6:	4644      	mov	r4, r8
 800f3d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f3dc:	3501      	adds	r5, #1
 800f3de:	615e      	str	r6, [r3, #20]
 800f3e0:	6125      	str	r5, [r4, #16]
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3e8:	08010e79 	.word	0x08010e79
 800f3ec:	08010f01 	.word	0x08010f01

0800f3f0 <__s2b>:
 800f3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3f4:	460c      	mov	r4, r1
 800f3f6:	4615      	mov	r5, r2
 800f3f8:	461f      	mov	r7, r3
 800f3fa:	2209      	movs	r2, #9
 800f3fc:	3308      	adds	r3, #8
 800f3fe:	4606      	mov	r6, r0
 800f400:	fb93 f3f2 	sdiv	r3, r3, r2
 800f404:	2100      	movs	r1, #0
 800f406:	2201      	movs	r2, #1
 800f408:	429a      	cmp	r2, r3
 800f40a:	db09      	blt.n	800f420 <__s2b+0x30>
 800f40c:	4630      	mov	r0, r6
 800f40e:	f7ff ff47 	bl	800f2a0 <_Balloc>
 800f412:	b940      	cbnz	r0, 800f426 <__s2b+0x36>
 800f414:	4602      	mov	r2, r0
 800f416:	4b19      	ldr	r3, [pc, #100]	; (800f47c <__s2b+0x8c>)
 800f418:	4819      	ldr	r0, [pc, #100]	; (800f480 <__s2b+0x90>)
 800f41a:	21d3      	movs	r1, #211	; 0xd3
 800f41c:	f000 ffba 	bl	8010394 <__assert_func>
 800f420:	0052      	lsls	r2, r2, #1
 800f422:	3101      	adds	r1, #1
 800f424:	e7f0      	b.n	800f408 <__s2b+0x18>
 800f426:	9b08      	ldr	r3, [sp, #32]
 800f428:	6143      	str	r3, [r0, #20]
 800f42a:	2d09      	cmp	r5, #9
 800f42c:	f04f 0301 	mov.w	r3, #1
 800f430:	6103      	str	r3, [r0, #16]
 800f432:	dd16      	ble.n	800f462 <__s2b+0x72>
 800f434:	f104 0909 	add.w	r9, r4, #9
 800f438:	46c8      	mov	r8, r9
 800f43a:	442c      	add	r4, r5
 800f43c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f440:	4601      	mov	r1, r0
 800f442:	3b30      	subs	r3, #48	; 0x30
 800f444:	220a      	movs	r2, #10
 800f446:	4630      	mov	r0, r6
 800f448:	f7ff ff8c 	bl	800f364 <__multadd>
 800f44c:	45a0      	cmp	r8, r4
 800f44e:	d1f5      	bne.n	800f43c <__s2b+0x4c>
 800f450:	f1a5 0408 	sub.w	r4, r5, #8
 800f454:	444c      	add	r4, r9
 800f456:	1b2d      	subs	r5, r5, r4
 800f458:	1963      	adds	r3, r4, r5
 800f45a:	42bb      	cmp	r3, r7
 800f45c:	db04      	blt.n	800f468 <__s2b+0x78>
 800f45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f462:	340a      	adds	r4, #10
 800f464:	2509      	movs	r5, #9
 800f466:	e7f6      	b.n	800f456 <__s2b+0x66>
 800f468:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f46c:	4601      	mov	r1, r0
 800f46e:	3b30      	subs	r3, #48	; 0x30
 800f470:	220a      	movs	r2, #10
 800f472:	4630      	mov	r0, r6
 800f474:	f7ff ff76 	bl	800f364 <__multadd>
 800f478:	e7ee      	b.n	800f458 <__s2b+0x68>
 800f47a:	bf00      	nop
 800f47c:	08010e79 	.word	0x08010e79
 800f480:	08010f01 	.word	0x08010f01

0800f484 <__hi0bits>:
 800f484:	0c03      	lsrs	r3, r0, #16
 800f486:	041b      	lsls	r3, r3, #16
 800f488:	b9d3      	cbnz	r3, 800f4c0 <__hi0bits+0x3c>
 800f48a:	0400      	lsls	r0, r0, #16
 800f48c:	2310      	movs	r3, #16
 800f48e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f492:	bf04      	itt	eq
 800f494:	0200      	lsleq	r0, r0, #8
 800f496:	3308      	addeq	r3, #8
 800f498:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f49c:	bf04      	itt	eq
 800f49e:	0100      	lsleq	r0, r0, #4
 800f4a0:	3304      	addeq	r3, #4
 800f4a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f4a6:	bf04      	itt	eq
 800f4a8:	0080      	lsleq	r0, r0, #2
 800f4aa:	3302      	addeq	r3, #2
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	db05      	blt.n	800f4bc <__hi0bits+0x38>
 800f4b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f4b4:	f103 0301 	add.w	r3, r3, #1
 800f4b8:	bf08      	it	eq
 800f4ba:	2320      	moveq	r3, #32
 800f4bc:	4618      	mov	r0, r3
 800f4be:	4770      	bx	lr
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	e7e4      	b.n	800f48e <__hi0bits+0xa>

0800f4c4 <__lo0bits>:
 800f4c4:	6803      	ldr	r3, [r0, #0]
 800f4c6:	f013 0207 	ands.w	r2, r3, #7
 800f4ca:	d00c      	beq.n	800f4e6 <__lo0bits+0x22>
 800f4cc:	07d9      	lsls	r1, r3, #31
 800f4ce:	d422      	bmi.n	800f516 <__lo0bits+0x52>
 800f4d0:	079a      	lsls	r2, r3, #30
 800f4d2:	bf49      	itett	mi
 800f4d4:	085b      	lsrmi	r3, r3, #1
 800f4d6:	089b      	lsrpl	r3, r3, #2
 800f4d8:	6003      	strmi	r3, [r0, #0]
 800f4da:	2201      	movmi	r2, #1
 800f4dc:	bf5c      	itt	pl
 800f4de:	6003      	strpl	r3, [r0, #0]
 800f4e0:	2202      	movpl	r2, #2
 800f4e2:	4610      	mov	r0, r2
 800f4e4:	4770      	bx	lr
 800f4e6:	b299      	uxth	r1, r3
 800f4e8:	b909      	cbnz	r1, 800f4ee <__lo0bits+0x2a>
 800f4ea:	0c1b      	lsrs	r3, r3, #16
 800f4ec:	2210      	movs	r2, #16
 800f4ee:	b2d9      	uxtb	r1, r3
 800f4f0:	b909      	cbnz	r1, 800f4f6 <__lo0bits+0x32>
 800f4f2:	3208      	adds	r2, #8
 800f4f4:	0a1b      	lsrs	r3, r3, #8
 800f4f6:	0719      	lsls	r1, r3, #28
 800f4f8:	bf04      	itt	eq
 800f4fa:	091b      	lsreq	r3, r3, #4
 800f4fc:	3204      	addeq	r2, #4
 800f4fe:	0799      	lsls	r1, r3, #30
 800f500:	bf04      	itt	eq
 800f502:	089b      	lsreq	r3, r3, #2
 800f504:	3202      	addeq	r2, #2
 800f506:	07d9      	lsls	r1, r3, #31
 800f508:	d403      	bmi.n	800f512 <__lo0bits+0x4e>
 800f50a:	085b      	lsrs	r3, r3, #1
 800f50c:	f102 0201 	add.w	r2, r2, #1
 800f510:	d003      	beq.n	800f51a <__lo0bits+0x56>
 800f512:	6003      	str	r3, [r0, #0]
 800f514:	e7e5      	b.n	800f4e2 <__lo0bits+0x1e>
 800f516:	2200      	movs	r2, #0
 800f518:	e7e3      	b.n	800f4e2 <__lo0bits+0x1e>
 800f51a:	2220      	movs	r2, #32
 800f51c:	e7e1      	b.n	800f4e2 <__lo0bits+0x1e>
	...

0800f520 <__i2b>:
 800f520:	b510      	push	{r4, lr}
 800f522:	460c      	mov	r4, r1
 800f524:	2101      	movs	r1, #1
 800f526:	f7ff febb 	bl	800f2a0 <_Balloc>
 800f52a:	4602      	mov	r2, r0
 800f52c:	b928      	cbnz	r0, 800f53a <__i2b+0x1a>
 800f52e:	4b05      	ldr	r3, [pc, #20]	; (800f544 <__i2b+0x24>)
 800f530:	4805      	ldr	r0, [pc, #20]	; (800f548 <__i2b+0x28>)
 800f532:	f240 1145 	movw	r1, #325	; 0x145
 800f536:	f000 ff2d 	bl	8010394 <__assert_func>
 800f53a:	2301      	movs	r3, #1
 800f53c:	6144      	str	r4, [r0, #20]
 800f53e:	6103      	str	r3, [r0, #16]
 800f540:	bd10      	pop	{r4, pc}
 800f542:	bf00      	nop
 800f544:	08010e79 	.word	0x08010e79
 800f548:	08010f01 	.word	0x08010f01

0800f54c <__multiply>:
 800f54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f550:	4691      	mov	r9, r2
 800f552:	690a      	ldr	r2, [r1, #16]
 800f554:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f558:	429a      	cmp	r2, r3
 800f55a:	bfb8      	it	lt
 800f55c:	460b      	movlt	r3, r1
 800f55e:	460c      	mov	r4, r1
 800f560:	bfbc      	itt	lt
 800f562:	464c      	movlt	r4, r9
 800f564:	4699      	movlt	r9, r3
 800f566:	6927      	ldr	r7, [r4, #16]
 800f568:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f56c:	68a3      	ldr	r3, [r4, #8]
 800f56e:	6861      	ldr	r1, [r4, #4]
 800f570:	eb07 060a 	add.w	r6, r7, sl
 800f574:	42b3      	cmp	r3, r6
 800f576:	b085      	sub	sp, #20
 800f578:	bfb8      	it	lt
 800f57a:	3101      	addlt	r1, #1
 800f57c:	f7ff fe90 	bl	800f2a0 <_Balloc>
 800f580:	b930      	cbnz	r0, 800f590 <__multiply+0x44>
 800f582:	4602      	mov	r2, r0
 800f584:	4b44      	ldr	r3, [pc, #272]	; (800f698 <__multiply+0x14c>)
 800f586:	4845      	ldr	r0, [pc, #276]	; (800f69c <__multiply+0x150>)
 800f588:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f58c:	f000 ff02 	bl	8010394 <__assert_func>
 800f590:	f100 0514 	add.w	r5, r0, #20
 800f594:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f598:	462b      	mov	r3, r5
 800f59a:	2200      	movs	r2, #0
 800f59c:	4543      	cmp	r3, r8
 800f59e:	d321      	bcc.n	800f5e4 <__multiply+0x98>
 800f5a0:	f104 0314 	add.w	r3, r4, #20
 800f5a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f5a8:	f109 0314 	add.w	r3, r9, #20
 800f5ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f5b0:	9202      	str	r2, [sp, #8]
 800f5b2:	1b3a      	subs	r2, r7, r4
 800f5b4:	3a15      	subs	r2, #21
 800f5b6:	f022 0203 	bic.w	r2, r2, #3
 800f5ba:	3204      	adds	r2, #4
 800f5bc:	f104 0115 	add.w	r1, r4, #21
 800f5c0:	428f      	cmp	r7, r1
 800f5c2:	bf38      	it	cc
 800f5c4:	2204      	movcc	r2, #4
 800f5c6:	9201      	str	r2, [sp, #4]
 800f5c8:	9a02      	ldr	r2, [sp, #8]
 800f5ca:	9303      	str	r3, [sp, #12]
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d80c      	bhi.n	800f5ea <__multiply+0x9e>
 800f5d0:	2e00      	cmp	r6, #0
 800f5d2:	dd03      	ble.n	800f5dc <__multiply+0x90>
 800f5d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d05b      	beq.n	800f694 <__multiply+0x148>
 800f5dc:	6106      	str	r6, [r0, #16]
 800f5de:	b005      	add	sp, #20
 800f5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e4:	f843 2b04 	str.w	r2, [r3], #4
 800f5e8:	e7d8      	b.n	800f59c <__multiply+0x50>
 800f5ea:	f8b3 a000 	ldrh.w	sl, [r3]
 800f5ee:	f1ba 0f00 	cmp.w	sl, #0
 800f5f2:	d024      	beq.n	800f63e <__multiply+0xf2>
 800f5f4:	f104 0e14 	add.w	lr, r4, #20
 800f5f8:	46a9      	mov	r9, r5
 800f5fa:	f04f 0c00 	mov.w	ip, #0
 800f5fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f602:	f8d9 1000 	ldr.w	r1, [r9]
 800f606:	fa1f fb82 	uxth.w	fp, r2
 800f60a:	b289      	uxth	r1, r1
 800f60c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f610:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f614:	f8d9 2000 	ldr.w	r2, [r9]
 800f618:	4461      	add	r1, ip
 800f61a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f61e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f622:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f626:	b289      	uxth	r1, r1
 800f628:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f62c:	4577      	cmp	r7, lr
 800f62e:	f849 1b04 	str.w	r1, [r9], #4
 800f632:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f636:	d8e2      	bhi.n	800f5fe <__multiply+0xb2>
 800f638:	9a01      	ldr	r2, [sp, #4]
 800f63a:	f845 c002 	str.w	ip, [r5, r2]
 800f63e:	9a03      	ldr	r2, [sp, #12]
 800f640:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f644:	3304      	adds	r3, #4
 800f646:	f1b9 0f00 	cmp.w	r9, #0
 800f64a:	d021      	beq.n	800f690 <__multiply+0x144>
 800f64c:	6829      	ldr	r1, [r5, #0]
 800f64e:	f104 0c14 	add.w	ip, r4, #20
 800f652:	46ae      	mov	lr, r5
 800f654:	f04f 0a00 	mov.w	sl, #0
 800f658:	f8bc b000 	ldrh.w	fp, [ip]
 800f65c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f660:	fb09 220b 	mla	r2, r9, fp, r2
 800f664:	4452      	add	r2, sl
 800f666:	b289      	uxth	r1, r1
 800f668:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f66c:	f84e 1b04 	str.w	r1, [lr], #4
 800f670:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f674:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f678:	f8be 1000 	ldrh.w	r1, [lr]
 800f67c:	fb09 110a 	mla	r1, r9, sl, r1
 800f680:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f684:	4567      	cmp	r7, ip
 800f686:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f68a:	d8e5      	bhi.n	800f658 <__multiply+0x10c>
 800f68c:	9a01      	ldr	r2, [sp, #4]
 800f68e:	50a9      	str	r1, [r5, r2]
 800f690:	3504      	adds	r5, #4
 800f692:	e799      	b.n	800f5c8 <__multiply+0x7c>
 800f694:	3e01      	subs	r6, #1
 800f696:	e79b      	b.n	800f5d0 <__multiply+0x84>
 800f698:	08010e79 	.word	0x08010e79
 800f69c:	08010f01 	.word	0x08010f01

0800f6a0 <__pow5mult>:
 800f6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6a4:	4615      	mov	r5, r2
 800f6a6:	f012 0203 	ands.w	r2, r2, #3
 800f6aa:	4606      	mov	r6, r0
 800f6ac:	460f      	mov	r7, r1
 800f6ae:	d007      	beq.n	800f6c0 <__pow5mult+0x20>
 800f6b0:	4c25      	ldr	r4, [pc, #148]	; (800f748 <__pow5mult+0xa8>)
 800f6b2:	3a01      	subs	r2, #1
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f6ba:	f7ff fe53 	bl	800f364 <__multadd>
 800f6be:	4607      	mov	r7, r0
 800f6c0:	10ad      	asrs	r5, r5, #2
 800f6c2:	d03d      	beq.n	800f740 <__pow5mult+0xa0>
 800f6c4:	69f4      	ldr	r4, [r6, #28]
 800f6c6:	b97c      	cbnz	r4, 800f6e8 <__pow5mult+0x48>
 800f6c8:	2010      	movs	r0, #16
 800f6ca:	f000 fe97 	bl	80103fc <malloc>
 800f6ce:	4602      	mov	r2, r0
 800f6d0:	61f0      	str	r0, [r6, #28]
 800f6d2:	b928      	cbnz	r0, 800f6e0 <__pow5mult+0x40>
 800f6d4:	4b1d      	ldr	r3, [pc, #116]	; (800f74c <__pow5mult+0xac>)
 800f6d6:	481e      	ldr	r0, [pc, #120]	; (800f750 <__pow5mult+0xb0>)
 800f6d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f6dc:	f000 fe5a 	bl	8010394 <__assert_func>
 800f6e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f6e4:	6004      	str	r4, [r0, #0]
 800f6e6:	60c4      	str	r4, [r0, #12]
 800f6e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f6ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f6f0:	b94c      	cbnz	r4, 800f706 <__pow5mult+0x66>
 800f6f2:	f240 2171 	movw	r1, #625	; 0x271
 800f6f6:	4630      	mov	r0, r6
 800f6f8:	f7ff ff12 	bl	800f520 <__i2b>
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800f702:	4604      	mov	r4, r0
 800f704:	6003      	str	r3, [r0, #0]
 800f706:	f04f 0900 	mov.w	r9, #0
 800f70a:	07eb      	lsls	r3, r5, #31
 800f70c:	d50a      	bpl.n	800f724 <__pow5mult+0x84>
 800f70e:	4639      	mov	r1, r7
 800f710:	4622      	mov	r2, r4
 800f712:	4630      	mov	r0, r6
 800f714:	f7ff ff1a 	bl	800f54c <__multiply>
 800f718:	4639      	mov	r1, r7
 800f71a:	4680      	mov	r8, r0
 800f71c:	4630      	mov	r0, r6
 800f71e:	f7ff fdff 	bl	800f320 <_Bfree>
 800f722:	4647      	mov	r7, r8
 800f724:	106d      	asrs	r5, r5, #1
 800f726:	d00b      	beq.n	800f740 <__pow5mult+0xa0>
 800f728:	6820      	ldr	r0, [r4, #0]
 800f72a:	b938      	cbnz	r0, 800f73c <__pow5mult+0x9c>
 800f72c:	4622      	mov	r2, r4
 800f72e:	4621      	mov	r1, r4
 800f730:	4630      	mov	r0, r6
 800f732:	f7ff ff0b 	bl	800f54c <__multiply>
 800f736:	6020      	str	r0, [r4, #0]
 800f738:	f8c0 9000 	str.w	r9, [r0]
 800f73c:	4604      	mov	r4, r0
 800f73e:	e7e4      	b.n	800f70a <__pow5mult+0x6a>
 800f740:	4638      	mov	r0, r7
 800f742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f746:	bf00      	nop
 800f748:	08011050 	.word	0x08011050
 800f74c:	08010eea 	.word	0x08010eea
 800f750:	08010f01 	.word	0x08010f01

0800f754 <__lshift>:
 800f754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f758:	460c      	mov	r4, r1
 800f75a:	6849      	ldr	r1, [r1, #4]
 800f75c:	6923      	ldr	r3, [r4, #16]
 800f75e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f762:	68a3      	ldr	r3, [r4, #8]
 800f764:	4607      	mov	r7, r0
 800f766:	4691      	mov	r9, r2
 800f768:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f76c:	f108 0601 	add.w	r6, r8, #1
 800f770:	42b3      	cmp	r3, r6
 800f772:	db0b      	blt.n	800f78c <__lshift+0x38>
 800f774:	4638      	mov	r0, r7
 800f776:	f7ff fd93 	bl	800f2a0 <_Balloc>
 800f77a:	4605      	mov	r5, r0
 800f77c:	b948      	cbnz	r0, 800f792 <__lshift+0x3e>
 800f77e:	4602      	mov	r2, r0
 800f780:	4b28      	ldr	r3, [pc, #160]	; (800f824 <__lshift+0xd0>)
 800f782:	4829      	ldr	r0, [pc, #164]	; (800f828 <__lshift+0xd4>)
 800f784:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f788:	f000 fe04 	bl	8010394 <__assert_func>
 800f78c:	3101      	adds	r1, #1
 800f78e:	005b      	lsls	r3, r3, #1
 800f790:	e7ee      	b.n	800f770 <__lshift+0x1c>
 800f792:	2300      	movs	r3, #0
 800f794:	f100 0114 	add.w	r1, r0, #20
 800f798:	f100 0210 	add.w	r2, r0, #16
 800f79c:	4618      	mov	r0, r3
 800f79e:	4553      	cmp	r3, sl
 800f7a0:	db33      	blt.n	800f80a <__lshift+0xb6>
 800f7a2:	6920      	ldr	r0, [r4, #16]
 800f7a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f7a8:	f104 0314 	add.w	r3, r4, #20
 800f7ac:	f019 091f 	ands.w	r9, r9, #31
 800f7b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f7b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f7b8:	d02b      	beq.n	800f812 <__lshift+0xbe>
 800f7ba:	f1c9 0e20 	rsb	lr, r9, #32
 800f7be:	468a      	mov	sl, r1
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	6818      	ldr	r0, [r3, #0]
 800f7c4:	fa00 f009 	lsl.w	r0, r0, r9
 800f7c8:	4310      	orrs	r0, r2
 800f7ca:	f84a 0b04 	str.w	r0, [sl], #4
 800f7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7d2:	459c      	cmp	ip, r3
 800f7d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f7d8:	d8f3      	bhi.n	800f7c2 <__lshift+0x6e>
 800f7da:	ebac 0304 	sub.w	r3, ip, r4
 800f7de:	3b15      	subs	r3, #21
 800f7e0:	f023 0303 	bic.w	r3, r3, #3
 800f7e4:	3304      	adds	r3, #4
 800f7e6:	f104 0015 	add.w	r0, r4, #21
 800f7ea:	4584      	cmp	ip, r0
 800f7ec:	bf38      	it	cc
 800f7ee:	2304      	movcc	r3, #4
 800f7f0:	50ca      	str	r2, [r1, r3]
 800f7f2:	b10a      	cbz	r2, 800f7f8 <__lshift+0xa4>
 800f7f4:	f108 0602 	add.w	r6, r8, #2
 800f7f8:	3e01      	subs	r6, #1
 800f7fa:	4638      	mov	r0, r7
 800f7fc:	612e      	str	r6, [r5, #16]
 800f7fe:	4621      	mov	r1, r4
 800f800:	f7ff fd8e 	bl	800f320 <_Bfree>
 800f804:	4628      	mov	r0, r5
 800f806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f80a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f80e:	3301      	adds	r3, #1
 800f810:	e7c5      	b.n	800f79e <__lshift+0x4a>
 800f812:	3904      	subs	r1, #4
 800f814:	f853 2b04 	ldr.w	r2, [r3], #4
 800f818:	f841 2f04 	str.w	r2, [r1, #4]!
 800f81c:	459c      	cmp	ip, r3
 800f81e:	d8f9      	bhi.n	800f814 <__lshift+0xc0>
 800f820:	e7ea      	b.n	800f7f8 <__lshift+0xa4>
 800f822:	bf00      	nop
 800f824:	08010e79 	.word	0x08010e79
 800f828:	08010f01 	.word	0x08010f01

0800f82c <__mcmp>:
 800f82c:	b530      	push	{r4, r5, lr}
 800f82e:	6902      	ldr	r2, [r0, #16]
 800f830:	690c      	ldr	r4, [r1, #16]
 800f832:	1b12      	subs	r2, r2, r4
 800f834:	d10e      	bne.n	800f854 <__mcmp+0x28>
 800f836:	f100 0314 	add.w	r3, r0, #20
 800f83a:	3114      	adds	r1, #20
 800f83c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f840:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f844:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f848:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f84c:	42a5      	cmp	r5, r4
 800f84e:	d003      	beq.n	800f858 <__mcmp+0x2c>
 800f850:	d305      	bcc.n	800f85e <__mcmp+0x32>
 800f852:	2201      	movs	r2, #1
 800f854:	4610      	mov	r0, r2
 800f856:	bd30      	pop	{r4, r5, pc}
 800f858:	4283      	cmp	r3, r0
 800f85a:	d3f3      	bcc.n	800f844 <__mcmp+0x18>
 800f85c:	e7fa      	b.n	800f854 <__mcmp+0x28>
 800f85e:	f04f 32ff 	mov.w	r2, #4294967295
 800f862:	e7f7      	b.n	800f854 <__mcmp+0x28>

0800f864 <__mdiff>:
 800f864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f868:	460c      	mov	r4, r1
 800f86a:	4606      	mov	r6, r0
 800f86c:	4611      	mov	r1, r2
 800f86e:	4620      	mov	r0, r4
 800f870:	4690      	mov	r8, r2
 800f872:	f7ff ffdb 	bl	800f82c <__mcmp>
 800f876:	1e05      	subs	r5, r0, #0
 800f878:	d110      	bne.n	800f89c <__mdiff+0x38>
 800f87a:	4629      	mov	r1, r5
 800f87c:	4630      	mov	r0, r6
 800f87e:	f7ff fd0f 	bl	800f2a0 <_Balloc>
 800f882:	b930      	cbnz	r0, 800f892 <__mdiff+0x2e>
 800f884:	4b3a      	ldr	r3, [pc, #232]	; (800f970 <__mdiff+0x10c>)
 800f886:	4602      	mov	r2, r0
 800f888:	f240 2137 	movw	r1, #567	; 0x237
 800f88c:	4839      	ldr	r0, [pc, #228]	; (800f974 <__mdiff+0x110>)
 800f88e:	f000 fd81 	bl	8010394 <__assert_func>
 800f892:	2301      	movs	r3, #1
 800f894:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f89c:	bfa4      	itt	ge
 800f89e:	4643      	movge	r3, r8
 800f8a0:	46a0      	movge	r8, r4
 800f8a2:	4630      	mov	r0, r6
 800f8a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f8a8:	bfa6      	itte	ge
 800f8aa:	461c      	movge	r4, r3
 800f8ac:	2500      	movge	r5, #0
 800f8ae:	2501      	movlt	r5, #1
 800f8b0:	f7ff fcf6 	bl	800f2a0 <_Balloc>
 800f8b4:	b920      	cbnz	r0, 800f8c0 <__mdiff+0x5c>
 800f8b6:	4b2e      	ldr	r3, [pc, #184]	; (800f970 <__mdiff+0x10c>)
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	f240 2145 	movw	r1, #581	; 0x245
 800f8be:	e7e5      	b.n	800f88c <__mdiff+0x28>
 800f8c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f8c4:	6926      	ldr	r6, [r4, #16]
 800f8c6:	60c5      	str	r5, [r0, #12]
 800f8c8:	f104 0914 	add.w	r9, r4, #20
 800f8cc:	f108 0514 	add.w	r5, r8, #20
 800f8d0:	f100 0e14 	add.w	lr, r0, #20
 800f8d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f8d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f8dc:	f108 0210 	add.w	r2, r8, #16
 800f8e0:	46f2      	mov	sl, lr
 800f8e2:	2100      	movs	r1, #0
 800f8e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800f8e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f8ec:	fa11 f88b 	uxtah	r8, r1, fp
 800f8f0:	b299      	uxth	r1, r3
 800f8f2:	0c1b      	lsrs	r3, r3, #16
 800f8f4:	eba8 0801 	sub.w	r8, r8, r1
 800f8f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f8fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f900:	fa1f f888 	uxth.w	r8, r8
 800f904:	1419      	asrs	r1, r3, #16
 800f906:	454e      	cmp	r6, r9
 800f908:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f90c:	f84a 3b04 	str.w	r3, [sl], #4
 800f910:	d8e8      	bhi.n	800f8e4 <__mdiff+0x80>
 800f912:	1b33      	subs	r3, r6, r4
 800f914:	3b15      	subs	r3, #21
 800f916:	f023 0303 	bic.w	r3, r3, #3
 800f91a:	3304      	adds	r3, #4
 800f91c:	3415      	adds	r4, #21
 800f91e:	42a6      	cmp	r6, r4
 800f920:	bf38      	it	cc
 800f922:	2304      	movcc	r3, #4
 800f924:	441d      	add	r5, r3
 800f926:	4473      	add	r3, lr
 800f928:	469e      	mov	lr, r3
 800f92a:	462e      	mov	r6, r5
 800f92c:	4566      	cmp	r6, ip
 800f92e:	d30e      	bcc.n	800f94e <__mdiff+0xea>
 800f930:	f10c 0203 	add.w	r2, ip, #3
 800f934:	1b52      	subs	r2, r2, r5
 800f936:	f022 0203 	bic.w	r2, r2, #3
 800f93a:	3d03      	subs	r5, #3
 800f93c:	45ac      	cmp	ip, r5
 800f93e:	bf38      	it	cc
 800f940:	2200      	movcc	r2, #0
 800f942:	4413      	add	r3, r2
 800f944:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f948:	b17a      	cbz	r2, 800f96a <__mdiff+0x106>
 800f94a:	6107      	str	r7, [r0, #16]
 800f94c:	e7a4      	b.n	800f898 <__mdiff+0x34>
 800f94e:	f856 8b04 	ldr.w	r8, [r6], #4
 800f952:	fa11 f288 	uxtah	r2, r1, r8
 800f956:	1414      	asrs	r4, r2, #16
 800f958:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f95c:	b292      	uxth	r2, r2
 800f95e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f962:	f84e 2b04 	str.w	r2, [lr], #4
 800f966:	1421      	asrs	r1, r4, #16
 800f968:	e7e0      	b.n	800f92c <__mdiff+0xc8>
 800f96a:	3f01      	subs	r7, #1
 800f96c:	e7ea      	b.n	800f944 <__mdiff+0xe0>
 800f96e:	bf00      	nop
 800f970:	08010e79 	.word	0x08010e79
 800f974:	08010f01 	.word	0x08010f01

0800f978 <__ulp>:
 800f978:	b082      	sub	sp, #8
 800f97a:	ed8d 0b00 	vstr	d0, [sp]
 800f97e:	9a01      	ldr	r2, [sp, #4]
 800f980:	4b0f      	ldr	r3, [pc, #60]	; (800f9c0 <__ulp+0x48>)
 800f982:	4013      	ands	r3, r2
 800f984:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f988:	2b00      	cmp	r3, #0
 800f98a:	dc08      	bgt.n	800f99e <__ulp+0x26>
 800f98c:	425b      	negs	r3, r3
 800f98e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f992:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f996:	da04      	bge.n	800f9a2 <__ulp+0x2a>
 800f998:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f99c:	4113      	asrs	r3, r2
 800f99e:	2200      	movs	r2, #0
 800f9a0:	e008      	b.n	800f9b4 <__ulp+0x3c>
 800f9a2:	f1a2 0314 	sub.w	r3, r2, #20
 800f9a6:	2b1e      	cmp	r3, #30
 800f9a8:	bfda      	itte	le
 800f9aa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f9ae:	40da      	lsrle	r2, r3
 800f9b0:	2201      	movgt	r2, #1
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	4610      	mov	r0, r2
 800f9b8:	ec41 0b10 	vmov	d0, r0, r1
 800f9bc:	b002      	add	sp, #8
 800f9be:	4770      	bx	lr
 800f9c0:	7ff00000 	.word	0x7ff00000

0800f9c4 <__b2d>:
 800f9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9c8:	6906      	ldr	r6, [r0, #16]
 800f9ca:	f100 0814 	add.w	r8, r0, #20
 800f9ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f9d2:	1f37      	subs	r7, r6, #4
 800f9d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f9d8:	4610      	mov	r0, r2
 800f9da:	f7ff fd53 	bl	800f484 <__hi0bits>
 800f9de:	f1c0 0320 	rsb	r3, r0, #32
 800f9e2:	280a      	cmp	r0, #10
 800f9e4:	600b      	str	r3, [r1, #0]
 800f9e6:	491b      	ldr	r1, [pc, #108]	; (800fa54 <__b2d+0x90>)
 800f9e8:	dc15      	bgt.n	800fa16 <__b2d+0x52>
 800f9ea:	f1c0 0c0b 	rsb	ip, r0, #11
 800f9ee:	fa22 f30c 	lsr.w	r3, r2, ip
 800f9f2:	45b8      	cmp	r8, r7
 800f9f4:	ea43 0501 	orr.w	r5, r3, r1
 800f9f8:	bf34      	ite	cc
 800f9fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f9fe:	2300      	movcs	r3, #0
 800fa00:	3015      	adds	r0, #21
 800fa02:	fa02 f000 	lsl.w	r0, r2, r0
 800fa06:	fa23 f30c 	lsr.w	r3, r3, ip
 800fa0a:	4303      	orrs	r3, r0
 800fa0c:	461c      	mov	r4, r3
 800fa0e:	ec45 4b10 	vmov	d0, r4, r5
 800fa12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa16:	45b8      	cmp	r8, r7
 800fa18:	bf3a      	itte	cc
 800fa1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa1e:	f1a6 0708 	subcc.w	r7, r6, #8
 800fa22:	2300      	movcs	r3, #0
 800fa24:	380b      	subs	r0, #11
 800fa26:	d012      	beq.n	800fa4e <__b2d+0x8a>
 800fa28:	f1c0 0120 	rsb	r1, r0, #32
 800fa2c:	fa23 f401 	lsr.w	r4, r3, r1
 800fa30:	4082      	lsls	r2, r0
 800fa32:	4322      	orrs	r2, r4
 800fa34:	4547      	cmp	r7, r8
 800fa36:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800fa3a:	bf8c      	ite	hi
 800fa3c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fa40:	2200      	movls	r2, #0
 800fa42:	4083      	lsls	r3, r0
 800fa44:	40ca      	lsrs	r2, r1
 800fa46:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fa4a:	4313      	orrs	r3, r2
 800fa4c:	e7de      	b.n	800fa0c <__b2d+0x48>
 800fa4e:	ea42 0501 	orr.w	r5, r2, r1
 800fa52:	e7db      	b.n	800fa0c <__b2d+0x48>
 800fa54:	3ff00000 	.word	0x3ff00000

0800fa58 <__d2b>:
 800fa58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fa5c:	460f      	mov	r7, r1
 800fa5e:	2101      	movs	r1, #1
 800fa60:	ec59 8b10 	vmov	r8, r9, d0
 800fa64:	4616      	mov	r6, r2
 800fa66:	f7ff fc1b 	bl	800f2a0 <_Balloc>
 800fa6a:	4604      	mov	r4, r0
 800fa6c:	b930      	cbnz	r0, 800fa7c <__d2b+0x24>
 800fa6e:	4602      	mov	r2, r0
 800fa70:	4b24      	ldr	r3, [pc, #144]	; (800fb04 <__d2b+0xac>)
 800fa72:	4825      	ldr	r0, [pc, #148]	; (800fb08 <__d2b+0xb0>)
 800fa74:	f240 310f 	movw	r1, #783	; 0x30f
 800fa78:	f000 fc8c 	bl	8010394 <__assert_func>
 800fa7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fa80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa84:	bb2d      	cbnz	r5, 800fad2 <__d2b+0x7a>
 800fa86:	9301      	str	r3, [sp, #4]
 800fa88:	f1b8 0300 	subs.w	r3, r8, #0
 800fa8c:	d026      	beq.n	800fadc <__d2b+0x84>
 800fa8e:	4668      	mov	r0, sp
 800fa90:	9300      	str	r3, [sp, #0]
 800fa92:	f7ff fd17 	bl	800f4c4 <__lo0bits>
 800fa96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fa9a:	b1e8      	cbz	r0, 800fad8 <__d2b+0x80>
 800fa9c:	f1c0 0320 	rsb	r3, r0, #32
 800faa0:	fa02 f303 	lsl.w	r3, r2, r3
 800faa4:	430b      	orrs	r3, r1
 800faa6:	40c2      	lsrs	r2, r0
 800faa8:	6163      	str	r3, [r4, #20]
 800faaa:	9201      	str	r2, [sp, #4]
 800faac:	9b01      	ldr	r3, [sp, #4]
 800faae:	61a3      	str	r3, [r4, #24]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	bf14      	ite	ne
 800fab4:	2202      	movne	r2, #2
 800fab6:	2201      	moveq	r2, #1
 800fab8:	6122      	str	r2, [r4, #16]
 800faba:	b1bd      	cbz	r5, 800faec <__d2b+0x94>
 800fabc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fac0:	4405      	add	r5, r0
 800fac2:	603d      	str	r5, [r7, #0]
 800fac4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fac8:	6030      	str	r0, [r6, #0]
 800faca:	4620      	mov	r0, r4
 800facc:	b003      	add	sp, #12
 800face:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fad6:	e7d6      	b.n	800fa86 <__d2b+0x2e>
 800fad8:	6161      	str	r1, [r4, #20]
 800fada:	e7e7      	b.n	800faac <__d2b+0x54>
 800fadc:	a801      	add	r0, sp, #4
 800fade:	f7ff fcf1 	bl	800f4c4 <__lo0bits>
 800fae2:	9b01      	ldr	r3, [sp, #4]
 800fae4:	6163      	str	r3, [r4, #20]
 800fae6:	3020      	adds	r0, #32
 800fae8:	2201      	movs	r2, #1
 800faea:	e7e5      	b.n	800fab8 <__d2b+0x60>
 800faec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800faf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800faf4:	6038      	str	r0, [r7, #0]
 800faf6:	6918      	ldr	r0, [r3, #16]
 800faf8:	f7ff fcc4 	bl	800f484 <__hi0bits>
 800fafc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb00:	e7e2      	b.n	800fac8 <__d2b+0x70>
 800fb02:	bf00      	nop
 800fb04:	08010e79 	.word	0x08010e79
 800fb08:	08010f01 	.word	0x08010f01

0800fb0c <__ratio>:
 800fb0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb10:	4688      	mov	r8, r1
 800fb12:	4669      	mov	r1, sp
 800fb14:	4681      	mov	r9, r0
 800fb16:	f7ff ff55 	bl	800f9c4 <__b2d>
 800fb1a:	a901      	add	r1, sp, #4
 800fb1c:	4640      	mov	r0, r8
 800fb1e:	ec55 4b10 	vmov	r4, r5, d0
 800fb22:	f7ff ff4f 	bl	800f9c4 <__b2d>
 800fb26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fb2a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fb2e:	eba3 0c02 	sub.w	ip, r3, r2
 800fb32:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fb36:	1a9b      	subs	r3, r3, r2
 800fb38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fb3c:	ec51 0b10 	vmov	r0, r1, d0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	bfd6      	itet	le
 800fb44:	460a      	movle	r2, r1
 800fb46:	462a      	movgt	r2, r5
 800fb48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fb4c:	468b      	mov	fp, r1
 800fb4e:	462f      	mov	r7, r5
 800fb50:	bfd4      	ite	le
 800fb52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fb56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	ee10 2a10 	vmov	r2, s0
 800fb60:	465b      	mov	r3, fp
 800fb62:	4639      	mov	r1, r7
 800fb64:	f7f0 fea2 	bl	80008ac <__aeabi_ddiv>
 800fb68:	ec41 0b10 	vmov	d0, r0, r1
 800fb6c:	b003      	add	sp, #12
 800fb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb72 <__copybits>:
 800fb72:	3901      	subs	r1, #1
 800fb74:	b570      	push	{r4, r5, r6, lr}
 800fb76:	1149      	asrs	r1, r1, #5
 800fb78:	6914      	ldr	r4, [r2, #16]
 800fb7a:	3101      	adds	r1, #1
 800fb7c:	f102 0314 	add.w	r3, r2, #20
 800fb80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fb84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fb88:	1f05      	subs	r5, r0, #4
 800fb8a:	42a3      	cmp	r3, r4
 800fb8c:	d30c      	bcc.n	800fba8 <__copybits+0x36>
 800fb8e:	1aa3      	subs	r3, r4, r2
 800fb90:	3b11      	subs	r3, #17
 800fb92:	f023 0303 	bic.w	r3, r3, #3
 800fb96:	3211      	adds	r2, #17
 800fb98:	42a2      	cmp	r2, r4
 800fb9a:	bf88      	it	hi
 800fb9c:	2300      	movhi	r3, #0
 800fb9e:	4418      	add	r0, r3
 800fba0:	2300      	movs	r3, #0
 800fba2:	4288      	cmp	r0, r1
 800fba4:	d305      	bcc.n	800fbb2 <__copybits+0x40>
 800fba6:	bd70      	pop	{r4, r5, r6, pc}
 800fba8:	f853 6b04 	ldr.w	r6, [r3], #4
 800fbac:	f845 6f04 	str.w	r6, [r5, #4]!
 800fbb0:	e7eb      	b.n	800fb8a <__copybits+0x18>
 800fbb2:	f840 3b04 	str.w	r3, [r0], #4
 800fbb6:	e7f4      	b.n	800fba2 <__copybits+0x30>

0800fbb8 <__any_on>:
 800fbb8:	f100 0214 	add.w	r2, r0, #20
 800fbbc:	6900      	ldr	r0, [r0, #16]
 800fbbe:	114b      	asrs	r3, r1, #5
 800fbc0:	4298      	cmp	r0, r3
 800fbc2:	b510      	push	{r4, lr}
 800fbc4:	db11      	blt.n	800fbea <__any_on+0x32>
 800fbc6:	dd0a      	ble.n	800fbde <__any_on+0x26>
 800fbc8:	f011 011f 	ands.w	r1, r1, #31
 800fbcc:	d007      	beq.n	800fbde <__any_on+0x26>
 800fbce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fbd2:	fa24 f001 	lsr.w	r0, r4, r1
 800fbd6:	fa00 f101 	lsl.w	r1, r0, r1
 800fbda:	428c      	cmp	r4, r1
 800fbdc:	d10b      	bne.n	800fbf6 <__any_on+0x3e>
 800fbde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d803      	bhi.n	800fbee <__any_on+0x36>
 800fbe6:	2000      	movs	r0, #0
 800fbe8:	bd10      	pop	{r4, pc}
 800fbea:	4603      	mov	r3, r0
 800fbec:	e7f7      	b.n	800fbde <__any_on+0x26>
 800fbee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fbf2:	2900      	cmp	r1, #0
 800fbf4:	d0f5      	beq.n	800fbe2 <__any_on+0x2a>
 800fbf6:	2001      	movs	r0, #1
 800fbf8:	e7f6      	b.n	800fbe8 <__any_on+0x30>

0800fbfa <__ascii_wctomb>:
 800fbfa:	b149      	cbz	r1, 800fc10 <__ascii_wctomb+0x16>
 800fbfc:	2aff      	cmp	r2, #255	; 0xff
 800fbfe:	bf85      	ittet	hi
 800fc00:	238a      	movhi	r3, #138	; 0x8a
 800fc02:	6003      	strhi	r3, [r0, #0]
 800fc04:	700a      	strbls	r2, [r1, #0]
 800fc06:	f04f 30ff 	movhi.w	r0, #4294967295
 800fc0a:	bf98      	it	ls
 800fc0c:	2001      	movls	r0, #1
 800fc0e:	4770      	bx	lr
 800fc10:	4608      	mov	r0, r1
 800fc12:	4770      	bx	lr

0800fc14 <__ssputs_r>:
 800fc14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc18:	688e      	ldr	r6, [r1, #8]
 800fc1a:	461f      	mov	r7, r3
 800fc1c:	42be      	cmp	r6, r7
 800fc1e:	680b      	ldr	r3, [r1, #0]
 800fc20:	4682      	mov	sl, r0
 800fc22:	460c      	mov	r4, r1
 800fc24:	4690      	mov	r8, r2
 800fc26:	d82c      	bhi.n	800fc82 <__ssputs_r+0x6e>
 800fc28:	898a      	ldrh	r2, [r1, #12]
 800fc2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc2e:	d026      	beq.n	800fc7e <__ssputs_r+0x6a>
 800fc30:	6965      	ldr	r5, [r4, #20]
 800fc32:	6909      	ldr	r1, [r1, #16]
 800fc34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc38:	eba3 0901 	sub.w	r9, r3, r1
 800fc3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc40:	1c7b      	adds	r3, r7, #1
 800fc42:	444b      	add	r3, r9
 800fc44:	106d      	asrs	r5, r5, #1
 800fc46:	429d      	cmp	r5, r3
 800fc48:	bf38      	it	cc
 800fc4a:	461d      	movcc	r5, r3
 800fc4c:	0553      	lsls	r3, r2, #21
 800fc4e:	d527      	bpl.n	800fca0 <__ssputs_r+0x8c>
 800fc50:	4629      	mov	r1, r5
 800fc52:	f7ff fa87 	bl	800f164 <_malloc_r>
 800fc56:	4606      	mov	r6, r0
 800fc58:	b360      	cbz	r0, 800fcb4 <__ssputs_r+0xa0>
 800fc5a:	6921      	ldr	r1, [r4, #16]
 800fc5c:	464a      	mov	r2, r9
 800fc5e:	f7fe fea0 	bl	800e9a2 <memcpy>
 800fc62:	89a3      	ldrh	r3, [r4, #12]
 800fc64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc6c:	81a3      	strh	r3, [r4, #12]
 800fc6e:	6126      	str	r6, [r4, #16]
 800fc70:	6165      	str	r5, [r4, #20]
 800fc72:	444e      	add	r6, r9
 800fc74:	eba5 0509 	sub.w	r5, r5, r9
 800fc78:	6026      	str	r6, [r4, #0]
 800fc7a:	60a5      	str	r5, [r4, #8]
 800fc7c:	463e      	mov	r6, r7
 800fc7e:	42be      	cmp	r6, r7
 800fc80:	d900      	bls.n	800fc84 <__ssputs_r+0x70>
 800fc82:	463e      	mov	r6, r7
 800fc84:	6820      	ldr	r0, [r4, #0]
 800fc86:	4632      	mov	r2, r6
 800fc88:	4641      	mov	r1, r8
 800fc8a:	f000 fb59 	bl	8010340 <memmove>
 800fc8e:	68a3      	ldr	r3, [r4, #8]
 800fc90:	1b9b      	subs	r3, r3, r6
 800fc92:	60a3      	str	r3, [r4, #8]
 800fc94:	6823      	ldr	r3, [r4, #0]
 800fc96:	4433      	add	r3, r6
 800fc98:	6023      	str	r3, [r4, #0]
 800fc9a:	2000      	movs	r0, #0
 800fc9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fca0:	462a      	mov	r2, r5
 800fca2:	f000 fbb3 	bl	801040c <_realloc_r>
 800fca6:	4606      	mov	r6, r0
 800fca8:	2800      	cmp	r0, #0
 800fcaa:	d1e0      	bne.n	800fc6e <__ssputs_r+0x5a>
 800fcac:	6921      	ldr	r1, [r4, #16]
 800fcae:	4650      	mov	r0, sl
 800fcb0:	f7fe fe94 	bl	800e9dc <_free_r>
 800fcb4:	230c      	movs	r3, #12
 800fcb6:	f8ca 3000 	str.w	r3, [sl]
 800fcba:	89a3      	ldrh	r3, [r4, #12]
 800fcbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcc0:	81a3      	strh	r3, [r4, #12]
 800fcc2:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc6:	e7e9      	b.n	800fc9c <__ssputs_r+0x88>

0800fcc8 <_svfiprintf_r>:
 800fcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fccc:	4698      	mov	r8, r3
 800fcce:	898b      	ldrh	r3, [r1, #12]
 800fcd0:	061b      	lsls	r3, r3, #24
 800fcd2:	b09d      	sub	sp, #116	; 0x74
 800fcd4:	4607      	mov	r7, r0
 800fcd6:	460d      	mov	r5, r1
 800fcd8:	4614      	mov	r4, r2
 800fcda:	d50e      	bpl.n	800fcfa <_svfiprintf_r+0x32>
 800fcdc:	690b      	ldr	r3, [r1, #16]
 800fcde:	b963      	cbnz	r3, 800fcfa <_svfiprintf_r+0x32>
 800fce0:	2140      	movs	r1, #64	; 0x40
 800fce2:	f7ff fa3f 	bl	800f164 <_malloc_r>
 800fce6:	6028      	str	r0, [r5, #0]
 800fce8:	6128      	str	r0, [r5, #16]
 800fcea:	b920      	cbnz	r0, 800fcf6 <_svfiprintf_r+0x2e>
 800fcec:	230c      	movs	r3, #12
 800fcee:	603b      	str	r3, [r7, #0]
 800fcf0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf4:	e0d0      	b.n	800fe98 <_svfiprintf_r+0x1d0>
 800fcf6:	2340      	movs	r3, #64	; 0x40
 800fcf8:	616b      	str	r3, [r5, #20]
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	9309      	str	r3, [sp, #36]	; 0x24
 800fcfe:	2320      	movs	r3, #32
 800fd00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd04:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd08:	2330      	movs	r3, #48	; 0x30
 800fd0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800feb0 <_svfiprintf_r+0x1e8>
 800fd0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd12:	f04f 0901 	mov.w	r9, #1
 800fd16:	4623      	mov	r3, r4
 800fd18:	469a      	mov	sl, r3
 800fd1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd1e:	b10a      	cbz	r2, 800fd24 <_svfiprintf_r+0x5c>
 800fd20:	2a25      	cmp	r2, #37	; 0x25
 800fd22:	d1f9      	bne.n	800fd18 <_svfiprintf_r+0x50>
 800fd24:	ebba 0b04 	subs.w	fp, sl, r4
 800fd28:	d00b      	beq.n	800fd42 <_svfiprintf_r+0x7a>
 800fd2a:	465b      	mov	r3, fp
 800fd2c:	4622      	mov	r2, r4
 800fd2e:	4629      	mov	r1, r5
 800fd30:	4638      	mov	r0, r7
 800fd32:	f7ff ff6f 	bl	800fc14 <__ssputs_r>
 800fd36:	3001      	adds	r0, #1
 800fd38:	f000 80a9 	beq.w	800fe8e <_svfiprintf_r+0x1c6>
 800fd3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd3e:	445a      	add	r2, fp
 800fd40:	9209      	str	r2, [sp, #36]	; 0x24
 800fd42:	f89a 3000 	ldrb.w	r3, [sl]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f000 80a1 	beq.w	800fe8e <_svfiprintf_r+0x1c6>
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd56:	f10a 0a01 	add.w	sl, sl, #1
 800fd5a:	9304      	str	r3, [sp, #16]
 800fd5c:	9307      	str	r3, [sp, #28]
 800fd5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd62:	931a      	str	r3, [sp, #104]	; 0x68
 800fd64:	4654      	mov	r4, sl
 800fd66:	2205      	movs	r2, #5
 800fd68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd6c:	4850      	ldr	r0, [pc, #320]	; (800feb0 <_svfiprintf_r+0x1e8>)
 800fd6e:	f7f0 fa67 	bl	8000240 <memchr>
 800fd72:	9a04      	ldr	r2, [sp, #16]
 800fd74:	b9d8      	cbnz	r0, 800fdae <_svfiprintf_r+0xe6>
 800fd76:	06d0      	lsls	r0, r2, #27
 800fd78:	bf44      	itt	mi
 800fd7a:	2320      	movmi	r3, #32
 800fd7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd80:	0711      	lsls	r1, r2, #28
 800fd82:	bf44      	itt	mi
 800fd84:	232b      	movmi	r3, #43	; 0x2b
 800fd86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd8a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd8e:	2b2a      	cmp	r3, #42	; 0x2a
 800fd90:	d015      	beq.n	800fdbe <_svfiprintf_r+0xf6>
 800fd92:	9a07      	ldr	r2, [sp, #28]
 800fd94:	4654      	mov	r4, sl
 800fd96:	2000      	movs	r0, #0
 800fd98:	f04f 0c0a 	mov.w	ip, #10
 800fd9c:	4621      	mov	r1, r4
 800fd9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fda2:	3b30      	subs	r3, #48	; 0x30
 800fda4:	2b09      	cmp	r3, #9
 800fda6:	d94d      	bls.n	800fe44 <_svfiprintf_r+0x17c>
 800fda8:	b1b0      	cbz	r0, 800fdd8 <_svfiprintf_r+0x110>
 800fdaa:	9207      	str	r2, [sp, #28]
 800fdac:	e014      	b.n	800fdd8 <_svfiprintf_r+0x110>
 800fdae:	eba0 0308 	sub.w	r3, r0, r8
 800fdb2:	fa09 f303 	lsl.w	r3, r9, r3
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	9304      	str	r3, [sp, #16]
 800fdba:	46a2      	mov	sl, r4
 800fdbc:	e7d2      	b.n	800fd64 <_svfiprintf_r+0x9c>
 800fdbe:	9b03      	ldr	r3, [sp, #12]
 800fdc0:	1d19      	adds	r1, r3, #4
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	9103      	str	r1, [sp, #12]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	bfbb      	ittet	lt
 800fdca:	425b      	neglt	r3, r3
 800fdcc:	f042 0202 	orrlt.w	r2, r2, #2
 800fdd0:	9307      	strge	r3, [sp, #28]
 800fdd2:	9307      	strlt	r3, [sp, #28]
 800fdd4:	bfb8      	it	lt
 800fdd6:	9204      	strlt	r2, [sp, #16]
 800fdd8:	7823      	ldrb	r3, [r4, #0]
 800fdda:	2b2e      	cmp	r3, #46	; 0x2e
 800fddc:	d10c      	bne.n	800fdf8 <_svfiprintf_r+0x130>
 800fdde:	7863      	ldrb	r3, [r4, #1]
 800fde0:	2b2a      	cmp	r3, #42	; 0x2a
 800fde2:	d134      	bne.n	800fe4e <_svfiprintf_r+0x186>
 800fde4:	9b03      	ldr	r3, [sp, #12]
 800fde6:	1d1a      	adds	r2, r3, #4
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	9203      	str	r2, [sp, #12]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	bfb8      	it	lt
 800fdf0:	f04f 33ff 	movlt.w	r3, #4294967295
 800fdf4:	3402      	adds	r4, #2
 800fdf6:	9305      	str	r3, [sp, #20]
 800fdf8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fec0 <_svfiprintf_r+0x1f8>
 800fdfc:	7821      	ldrb	r1, [r4, #0]
 800fdfe:	2203      	movs	r2, #3
 800fe00:	4650      	mov	r0, sl
 800fe02:	f7f0 fa1d 	bl	8000240 <memchr>
 800fe06:	b138      	cbz	r0, 800fe18 <_svfiprintf_r+0x150>
 800fe08:	9b04      	ldr	r3, [sp, #16]
 800fe0a:	eba0 000a 	sub.w	r0, r0, sl
 800fe0e:	2240      	movs	r2, #64	; 0x40
 800fe10:	4082      	lsls	r2, r0
 800fe12:	4313      	orrs	r3, r2
 800fe14:	3401      	adds	r4, #1
 800fe16:	9304      	str	r3, [sp, #16]
 800fe18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe1c:	4825      	ldr	r0, [pc, #148]	; (800feb4 <_svfiprintf_r+0x1ec>)
 800fe1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe22:	2206      	movs	r2, #6
 800fe24:	f7f0 fa0c 	bl	8000240 <memchr>
 800fe28:	2800      	cmp	r0, #0
 800fe2a:	d038      	beq.n	800fe9e <_svfiprintf_r+0x1d6>
 800fe2c:	4b22      	ldr	r3, [pc, #136]	; (800feb8 <_svfiprintf_r+0x1f0>)
 800fe2e:	bb1b      	cbnz	r3, 800fe78 <_svfiprintf_r+0x1b0>
 800fe30:	9b03      	ldr	r3, [sp, #12]
 800fe32:	3307      	adds	r3, #7
 800fe34:	f023 0307 	bic.w	r3, r3, #7
 800fe38:	3308      	adds	r3, #8
 800fe3a:	9303      	str	r3, [sp, #12]
 800fe3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe3e:	4433      	add	r3, r6
 800fe40:	9309      	str	r3, [sp, #36]	; 0x24
 800fe42:	e768      	b.n	800fd16 <_svfiprintf_r+0x4e>
 800fe44:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe48:	460c      	mov	r4, r1
 800fe4a:	2001      	movs	r0, #1
 800fe4c:	e7a6      	b.n	800fd9c <_svfiprintf_r+0xd4>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	3401      	adds	r4, #1
 800fe52:	9305      	str	r3, [sp, #20]
 800fe54:	4619      	mov	r1, r3
 800fe56:	f04f 0c0a 	mov.w	ip, #10
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe60:	3a30      	subs	r2, #48	; 0x30
 800fe62:	2a09      	cmp	r2, #9
 800fe64:	d903      	bls.n	800fe6e <_svfiprintf_r+0x1a6>
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d0c6      	beq.n	800fdf8 <_svfiprintf_r+0x130>
 800fe6a:	9105      	str	r1, [sp, #20]
 800fe6c:	e7c4      	b.n	800fdf8 <_svfiprintf_r+0x130>
 800fe6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe72:	4604      	mov	r4, r0
 800fe74:	2301      	movs	r3, #1
 800fe76:	e7f0      	b.n	800fe5a <_svfiprintf_r+0x192>
 800fe78:	ab03      	add	r3, sp, #12
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	462a      	mov	r2, r5
 800fe7e:	4b0f      	ldr	r3, [pc, #60]	; (800febc <_svfiprintf_r+0x1f4>)
 800fe80:	a904      	add	r1, sp, #16
 800fe82:	4638      	mov	r0, r7
 800fe84:	f3af 8000 	nop.w
 800fe88:	1c42      	adds	r2, r0, #1
 800fe8a:	4606      	mov	r6, r0
 800fe8c:	d1d6      	bne.n	800fe3c <_svfiprintf_r+0x174>
 800fe8e:	89ab      	ldrh	r3, [r5, #12]
 800fe90:	065b      	lsls	r3, r3, #25
 800fe92:	f53f af2d 	bmi.w	800fcf0 <_svfiprintf_r+0x28>
 800fe96:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe98:	b01d      	add	sp, #116	; 0x74
 800fe9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe9e:	ab03      	add	r3, sp, #12
 800fea0:	9300      	str	r3, [sp, #0]
 800fea2:	462a      	mov	r2, r5
 800fea4:	4b05      	ldr	r3, [pc, #20]	; (800febc <_svfiprintf_r+0x1f4>)
 800fea6:	a904      	add	r1, sp, #16
 800fea8:	4638      	mov	r0, r7
 800feaa:	f000 f879 	bl	800ffa0 <_printf_i>
 800feae:	e7eb      	b.n	800fe88 <_svfiprintf_r+0x1c0>
 800feb0:	0801105c 	.word	0x0801105c
 800feb4:	08011066 	.word	0x08011066
 800feb8:	00000000 	.word	0x00000000
 800febc:	0800fc15 	.word	0x0800fc15
 800fec0:	08011062 	.word	0x08011062

0800fec4 <_printf_common>:
 800fec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fec8:	4616      	mov	r6, r2
 800feca:	4699      	mov	r9, r3
 800fecc:	688a      	ldr	r2, [r1, #8]
 800fece:	690b      	ldr	r3, [r1, #16]
 800fed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fed4:	4293      	cmp	r3, r2
 800fed6:	bfb8      	it	lt
 800fed8:	4613      	movlt	r3, r2
 800feda:	6033      	str	r3, [r6, #0]
 800fedc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fee0:	4607      	mov	r7, r0
 800fee2:	460c      	mov	r4, r1
 800fee4:	b10a      	cbz	r2, 800feea <_printf_common+0x26>
 800fee6:	3301      	adds	r3, #1
 800fee8:	6033      	str	r3, [r6, #0]
 800feea:	6823      	ldr	r3, [r4, #0]
 800feec:	0699      	lsls	r1, r3, #26
 800feee:	bf42      	ittt	mi
 800fef0:	6833      	ldrmi	r3, [r6, #0]
 800fef2:	3302      	addmi	r3, #2
 800fef4:	6033      	strmi	r3, [r6, #0]
 800fef6:	6825      	ldr	r5, [r4, #0]
 800fef8:	f015 0506 	ands.w	r5, r5, #6
 800fefc:	d106      	bne.n	800ff0c <_printf_common+0x48>
 800fefe:	f104 0a19 	add.w	sl, r4, #25
 800ff02:	68e3      	ldr	r3, [r4, #12]
 800ff04:	6832      	ldr	r2, [r6, #0]
 800ff06:	1a9b      	subs	r3, r3, r2
 800ff08:	42ab      	cmp	r3, r5
 800ff0a:	dc26      	bgt.n	800ff5a <_printf_common+0x96>
 800ff0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff10:	1e13      	subs	r3, r2, #0
 800ff12:	6822      	ldr	r2, [r4, #0]
 800ff14:	bf18      	it	ne
 800ff16:	2301      	movne	r3, #1
 800ff18:	0692      	lsls	r2, r2, #26
 800ff1a:	d42b      	bmi.n	800ff74 <_printf_common+0xb0>
 800ff1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff20:	4649      	mov	r1, r9
 800ff22:	4638      	mov	r0, r7
 800ff24:	47c0      	blx	r8
 800ff26:	3001      	adds	r0, #1
 800ff28:	d01e      	beq.n	800ff68 <_printf_common+0xa4>
 800ff2a:	6823      	ldr	r3, [r4, #0]
 800ff2c:	6922      	ldr	r2, [r4, #16]
 800ff2e:	f003 0306 	and.w	r3, r3, #6
 800ff32:	2b04      	cmp	r3, #4
 800ff34:	bf02      	ittt	eq
 800ff36:	68e5      	ldreq	r5, [r4, #12]
 800ff38:	6833      	ldreq	r3, [r6, #0]
 800ff3a:	1aed      	subeq	r5, r5, r3
 800ff3c:	68a3      	ldr	r3, [r4, #8]
 800ff3e:	bf0c      	ite	eq
 800ff40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff44:	2500      	movne	r5, #0
 800ff46:	4293      	cmp	r3, r2
 800ff48:	bfc4      	itt	gt
 800ff4a:	1a9b      	subgt	r3, r3, r2
 800ff4c:	18ed      	addgt	r5, r5, r3
 800ff4e:	2600      	movs	r6, #0
 800ff50:	341a      	adds	r4, #26
 800ff52:	42b5      	cmp	r5, r6
 800ff54:	d11a      	bne.n	800ff8c <_printf_common+0xc8>
 800ff56:	2000      	movs	r0, #0
 800ff58:	e008      	b.n	800ff6c <_printf_common+0xa8>
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	4652      	mov	r2, sl
 800ff5e:	4649      	mov	r1, r9
 800ff60:	4638      	mov	r0, r7
 800ff62:	47c0      	blx	r8
 800ff64:	3001      	adds	r0, #1
 800ff66:	d103      	bne.n	800ff70 <_printf_common+0xac>
 800ff68:	f04f 30ff 	mov.w	r0, #4294967295
 800ff6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff70:	3501      	adds	r5, #1
 800ff72:	e7c6      	b.n	800ff02 <_printf_common+0x3e>
 800ff74:	18e1      	adds	r1, r4, r3
 800ff76:	1c5a      	adds	r2, r3, #1
 800ff78:	2030      	movs	r0, #48	; 0x30
 800ff7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff7e:	4422      	add	r2, r4
 800ff80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff88:	3302      	adds	r3, #2
 800ff8a:	e7c7      	b.n	800ff1c <_printf_common+0x58>
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	4622      	mov	r2, r4
 800ff90:	4649      	mov	r1, r9
 800ff92:	4638      	mov	r0, r7
 800ff94:	47c0      	blx	r8
 800ff96:	3001      	adds	r0, #1
 800ff98:	d0e6      	beq.n	800ff68 <_printf_common+0xa4>
 800ff9a:	3601      	adds	r6, #1
 800ff9c:	e7d9      	b.n	800ff52 <_printf_common+0x8e>
	...

0800ffa0 <_printf_i>:
 800ffa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffa4:	7e0f      	ldrb	r7, [r1, #24]
 800ffa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ffa8:	2f78      	cmp	r7, #120	; 0x78
 800ffaa:	4691      	mov	r9, r2
 800ffac:	4680      	mov	r8, r0
 800ffae:	460c      	mov	r4, r1
 800ffb0:	469a      	mov	sl, r3
 800ffb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ffb6:	d807      	bhi.n	800ffc8 <_printf_i+0x28>
 800ffb8:	2f62      	cmp	r7, #98	; 0x62
 800ffba:	d80a      	bhi.n	800ffd2 <_printf_i+0x32>
 800ffbc:	2f00      	cmp	r7, #0
 800ffbe:	f000 80d4 	beq.w	801016a <_printf_i+0x1ca>
 800ffc2:	2f58      	cmp	r7, #88	; 0x58
 800ffc4:	f000 80c0 	beq.w	8010148 <_printf_i+0x1a8>
 800ffc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ffcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ffd0:	e03a      	b.n	8010048 <_printf_i+0xa8>
 800ffd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ffd6:	2b15      	cmp	r3, #21
 800ffd8:	d8f6      	bhi.n	800ffc8 <_printf_i+0x28>
 800ffda:	a101      	add	r1, pc, #4	; (adr r1, 800ffe0 <_printf_i+0x40>)
 800ffdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffe0:	08010039 	.word	0x08010039
 800ffe4:	0801004d 	.word	0x0801004d
 800ffe8:	0800ffc9 	.word	0x0800ffc9
 800ffec:	0800ffc9 	.word	0x0800ffc9
 800fff0:	0800ffc9 	.word	0x0800ffc9
 800fff4:	0800ffc9 	.word	0x0800ffc9
 800fff8:	0801004d 	.word	0x0801004d
 800fffc:	0800ffc9 	.word	0x0800ffc9
 8010000:	0800ffc9 	.word	0x0800ffc9
 8010004:	0800ffc9 	.word	0x0800ffc9
 8010008:	0800ffc9 	.word	0x0800ffc9
 801000c:	08010151 	.word	0x08010151
 8010010:	08010079 	.word	0x08010079
 8010014:	0801010b 	.word	0x0801010b
 8010018:	0800ffc9 	.word	0x0800ffc9
 801001c:	0800ffc9 	.word	0x0800ffc9
 8010020:	08010173 	.word	0x08010173
 8010024:	0800ffc9 	.word	0x0800ffc9
 8010028:	08010079 	.word	0x08010079
 801002c:	0800ffc9 	.word	0x0800ffc9
 8010030:	0800ffc9 	.word	0x0800ffc9
 8010034:	08010113 	.word	0x08010113
 8010038:	682b      	ldr	r3, [r5, #0]
 801003a:	1d1a      	adds	r2, r3, #4
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	602a      	str	r2, [r5, #0]
 8010040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010048:	2301      	movs	r3, #1
 801004a:	e09f      	b.n	801018c <_printf_i+0x1ec>
 801004c:	6820      	ldr	r0, [r4, #0]
 801004e:	682b      	ldr	r3, [r5, #0]
 8010050:	0607      	lsls	r7, r0, #24
 8010052:	f103 0104 	add.w	r1, r3, #4
 8010056:	6029      	str	r1, [r5, #0]
 8010058:	d501      	bpl.n	801005e <_printf_i+0xbe>
 801005a:	681e      	ldr	r6, [r3, #0]
 801005c:	e003      	b.n	8010066 <_printf_i+0xc6>
 801005e:	0646      	lsls	r6, r0, #25
 8010060:	d5fb      	bpl.n	801005a <_printf_i+0xba>
 8010062:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010066:	2e00      	cmp	r6, #0
 8010068:	da03      	bge.n	8010072 <_printf_i+0xd2>
 801006a:	232d      	movs	r3, #45	; 0x2d
 801006c:	4276      	negs	r6, r6
 801006e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010072:	485a      	ldr	r0, [pc, #360]	; (80101dc <_printf_i+0x23c>)
 8010074:	230a      	movs	r3, #10
 8010076:	e012      	b.n	801009e <_printf_i+0xfe>
 8010078:	682b      	ldr	r3, [r5, #0]
 801007a:	6820      	ldr	r0, [r4, #0]
 801007c:	1d19      	adds	r1, r3, #4
 801007e:	6029      	str	r1, [r5, #0]
 8010080:	0605      	lsls	r5, r0, #24
 8010082:	d501      	bpl.n	8010088 <_printf_i+0xe8>
 8010084:	681e      	ldr	r6, [r3, #0]
 8010086:	e002      	b.n	801008e <_printf_i+0xee>
 8010088:	0641      	lsls	r1, r0, #25
 801008a:	d5fb      	bpl.n	8010084 <_printf_i+0xe4>
 801008c:	881e      	ldrh	r6, [r3, #0]
 801008e:	4853      	ldr	r0, [pc, #332]	; (80101dc <_printf_i+0x23c>)
 8010090:	2f6f      	cmp	r7, #111	; 0x6f
 8010092:	bf0c      	ite	eq
 8010094:	2308      	moveq	r3, #8
 8010096:	230a      	movne	r3, #10
 8010098:	2100      	movs	r1, #0
 801009a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801009e:	6865      	ldr	r5, [r4, #4]
 80100a0:	60a5      	str	r5, [r4, #8]
 80100a2:	2d00      	cmp	r5, #0
 80100a4:	bfa2      	ittt	ge
 80100a6:	6821      	ldrge	r1, [r4, #0]
 80100a8:	f021 0104 	bicge.w	r1, r1, #4
 80100ac:	6021      	strge	r1, [r4, #0]
 80100ae:	b90e      	cbnz	r6, 80100b4 <_printf_i+0x114>
 80100b0:	2d00      	cmp	r5, #0
 80100b2:	d04b      	beq.n	801014c <_printf_i+0x1ac>
 80100b4:	4615      	mov	r5, r2
 80100b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80100ba:	fb03 6711 	mls	r7, r3, r1, r6
 80100be:	5dc7      	ldrb	r7, [r0, r7]
 80100c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80100c4:	4637      	mov	r7, r6
 80100c6:	42bb      	cmp	r3, r7
 80100c8:	460e      	mov	r6, r1
 80100ca:	d9f4      	bls.n	80100b6 <_printf_i+0x116>
 80100cc:	2b08      	cmp	r3, #8
 80100ce:	d10b      	bne.n	80100e8 <_printf_i+0x148>
 80100d0:	6823      	ldr	r3, [r4, #0]
 80100d2:	07de      	lsls	r6, r3, #31
 80100d4:	d508      	bpl.n	80100e8 <_printf_i+0x148>
 80100d6:	6923      	ldr	r3, [r4, #16]
 80100d8:	6861      	ldr	r1, [r4, #4]
 80100da:	4299      	cmp	r1, r3
 80100dc:	bfde      	ittt	le
 80100de:	2330      	movle	r3, #48	; 0x30
 80100e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80100e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80100e8:	1b52      	subs	r2, r2, r5
 80100ea:	6122      	str	r2, [r4, #16]
 80100ec:	f8cd a000 	str.w	sl, [sp]
 80100f0:	464b      	mov	r3, r9
 80100f2:	aa03      	add	r2, sp, #12
 80100f4:	4621      	mov	r1, r4
 80100f6:	4640      	mov	r0, r8
 80100f8:	f7ff fee4 	bl	800fec4 <_printf_common>
 80100fc:	3001      	adds	r0, #1
 80100fe:	d14a      	bne.n	8010196 <_printf_i+0x1f6>
 8010100:	f04f 30ff 	mov.w	r0, #4294967295
 8010104:	b004      	add	sp, #16
 8010106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801010a:	6823      	ldr	r3, [r4, #0]
 801010c:	f043 0320 	orr.w	r3, r3, #32
 8010110:	6023      	str	r3, [r4, #0]
 8010112:	4833      	ldr	r0, [pc, #204]	; (80101e0 <_printf_i+0x240>)
 8010114:	2778      	movs	r7, #120	; 0x78
 8010116:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801011a:	6823      	ldr	r3, [r4, #0]
 801011c:	6829      	ldr	r1, [r5, #0]
 801011e:	061f      	lsls	r7, r3, #24
 8010120:	f851 6b04 	ldr.w	r6, [r1], #4
 8010124:	d402      	bmi.n	801012c <_printf_i+0x18c>
 8010126:	065f      	lsls	r7, r3, #25
 8010128:	bf48      	it	mi
 801012a:	b2b6      	uxthmi	r6, r6
 801012c:	07df      	lsls	r7, r3, #31
 801012e:	bf48      	it	mi
 8010130:	f043 0320 	orrmi.w	r3, r3, #32
 8010134:	6029      	str	r1, [r5, #0]
 8010136:	bf48      	it	mi
 8010138:	6023      	strmi	r3, [r4, #0]
 801013a:	b91e      	cbnz	r6, 8010144 <_printf_i+0x1a4>
 801013c:	6823      	ldr	r3, [r4, #0]
 801013e:	f023 0320 	bic.w	r3, r3, #32
 8010142:	6023      	str	r3, [r4, #0]
 8010144:	2310      	movs	r3, #16
 8010146:	e7a7      	b.n	8010098 <_printf_i+0xf8>
 8010148:	4824      	ldr	r0, [pc, #144]	; (80101dc <_printf_i+0x23c>)
 801014a:	e7e4      	b.n	8010116 <_printf_i+0x176>
 801014c:	4615      	mov	r5, r2
 801014e:	e7bd      	b.n	80100cc <_printf_i+0x12c>
 8010150:	682b      	ldr	r3, [r5, #0]
 8010152:	6826      	ldr	r6, [r4, #0]
 8010154:	6961      	ldr	r1, [r4, #20]
 8010156:	1d18      	adds	r0, r3, #4
 8010158:	6028      	str	r0, [r5, #0]
 801015a:	0635      	lsls	r5, r6, #24
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	d501      	bpl.n	8010164 <_printf_i+0x1c4>
 8010160:	6019      	str	r1, [r3, #0]
 8010162:	e002      	b.n	801016a <_printf_i+0x1ca>
 8010164:	0670      	lsls	r0, r6, #25
 8010166:	d5fb      	bpl.n	8010160 <_printf_i+0x1c0>
 8010168:	8019      	strh	r1, [r3, #0]
 801016a:	2300      	movs	r3, #0
 801016c:	6123      	str	r3, [r4, #16]
 801016e:	4615      	mov	r5, r2
 8010170:	e7bc      	b.n	80100ec <_printf_i+0x14c>
 8010172:	682b      	ldr	r3, [r5, #0]
 8010174:	1d1a      	adds	r2, r3, #4
 8010176:	602a      	str	r2, [r5, #0]
 8010178:	681d      	ldr	r5, [r3, #0]
 801017a:	6862      	ldr	r2, [r4, #4]
 801017c:	2100      	movs	r1, #0
 801017e:	4628      	mov	r0, r5
 8010180:	f7f0 f85e 	bl	8000240 <memchr>
 8010184:	b108      	cbz	r0, 801018a <_printf_i+0x1ea>
 8010186:	1b40      	subs	r0, r0, r5
 8010188:	6060      	str	r0, [r4, #4]
 801018a:	6863      	ldr	r3, [r4, #4]
 801018c:	6123      	str	r3, [r4, #16]
 801018e:	2300      	movs	r3, #0
 8010190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010194:	e7aa      	b.n	80100ec <_printf_i+0x14c>
 8010196:	6923      	ldr	r3, [r4, #16]
 8010198:	462a      	mov	r2, r5
 801019a:	4649      	mov	r1, r9
 801019c:	4640      	mov	r0, r8
 801019e:	47d0      	blx	sl
 80101a0:	3001      	adds	r0, #1
 80101a2:	d0ad      	beq.n	8010100 <_printf_i+0x160>
 80101a4:	6823      	ldr	r3, [r4, #0]
 80101a6:	079b      	lsls	r3, r3, #30
 80101a8:	d413      	bmi.n	80101d2 <_printf_i+0x232>
 80101aa:	68e0      	ldr	r0, [r4, #12]
 80101ac:	9b03      	ldr	r3, [sp, #12]
 80101ae:	4298      	cmp	r0, r3
 80101b0:	bfb8      	it	lt
 80101b2:	4618      	movlt	r0, r3
 80101b4:	e7a6      	b.n	8010104 <_printf_i+0x164>
 80101b6:	2301      	movs	r3, #1
 80101b8:	4632      	mov	r2, r6
 80101ba:	4649      	mov	r1, r9
 80101bc:	4640      	mov	r0, r8
 80101be:	47d0      	blx	sl
 80101c0:	3001      	adds	r0, #1
 80101c2:	d09d      	beq.n	8010100 <_printf_i+0x160>
 80101c4:	3501      	adds	r5, #1
 80101c6:	68e3      	ldr	r3, [r4, #12]
 80101c8:	9903      	ldr	r1, [sp, #12]
 80101ca:	1a5b      	subs	r3, r3, r1
 80101cc:	42ab      	cmp	r3, r5
 80101ce:	dcf2      	bgt.n	80101b6 <_printf_i+0x216>
 80101d0:	e7eb      	b.n	80101aa <_printf_i+0x20a>
 80101d2:	2500      	movs	r5, #0
 80101d4:	f104 0619 	add.w	r6, r4, #25
 80101d8:	e7f5      	b.n	80101c6 <_printf_i+0x226>
 80101da:	bf00      	nop
 80101dc:	0801106d 	.word	0x0801106d
 80101e0:	0801107e 	.word	0x0801107e

080101e4 <__sflush_r>:
 80101e4:	898a      	ldrh	r2, [r1, #12]
 80101e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ea:	4605      	mov	r5, r0
 80101ec:	0710      	lsls	r0, r2, #28
 80101ee:	460c      	mov	r4, r1
 80101f0:	d458      	bmi.n	80102a4 <__sflush_r+0xc0>
 80101f2:	684b      	ldr	r3, [r1, #4]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	dc05      	bgt.n	8010204 <__sflush_r+0x20>
 80101f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	dc02      	bgt.n	8010204 <__sflush_r+0x20>
 80101fe:	2000      	movs	r0, #0
 8010200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010206:	2e00      	cmp	r6, #0
 8010208:	d0f9      	beq.n	80101fe <__sflush_r+0x1a>
 801020a:	2300      	movs	r3, #0
 801020c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010210:	682f      	ldr	r7, [r5, #0]
 8010212:	6a21      	ldr	r1, [r4, #32]
 8010214:	602b      	str	r3, [r5, #0]
 8010216:	d032      	beq.n	801027e <__sflush_r+0x9a>
 8010218:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801021a:	89a3      	ldrh	r3, [r4, #12]
 801021c:	075a      	lsls	r2, r3, #29
 801021e:	d505      	bpl.n	801022c <__sflush_r+0x48>
 8010220:	6863      	ldr	r3, [r4, #4]
 8010222:	1ac0      	subs	r0, r0, r3
 8010224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010226:	b10b      	cbz	r3, 801022c <__sflush_r+0x48>
 8010228:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801022a:	1ac0      	subs	r0, r0, r3
 801022c:	2300      	movs	r3, #0
 801022e:	4602      	mov	r2, r0
 8010230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010232:	6a21      	ldr	r1, [r4, #32]
 8010234:	4628      	mov	r0, r5
 8010236:	47b0      	blx	r6
 8010238:	1c43      	adds	r3, r0, #1
 801023a:	89a3      	ldrh	r3, [r4, #12]
 801023c:	d106      	bne.n	801024c <__sflush_r+0x68>
 801023e:	6829      	ldr	r1, [r5, #0]
 8010240:	291d      	cmp	r1, #29
 8010242:	d82b      	bhi.n	801029c <__sflush_r+0xb8>
 8010244:	4a29      	ldr	r2, [pc, #164]	; (80102ec <__sflush_r+0x108>)
 8010246:	410a      	asrs	r2, r1
 8010248:	07d6      	lsls	r6, r2, #31
 801024a:	d427      	bmi.n	801029c <__sflush_r+0xb8>
 801024c:	2200      	movs	r2, #0
 801024e:	6062      	str	r2, [r4, #4]
 8010250:	04d9      	lsls	r1, r3, #19
 8010252:	6922      	ldr	r2, [r4, #16]
 8010254:	6022      	str	r2, [r4, #0]
 8010256:	d504      	bpl.n	8010262 <__sflush_r+0x7e>
 8010258:	1c42      	adds	r2, r0, #1
 801025a:	d101      	bne.n	8010260 <__sflush_r+0x7c>
 801025c:	682b      	ldr	r3, [r5, #0]
 801025e:	b903      	cbnz	r3, 8010262 <__sflush_r+0x7e>
 8010260:	6560      	str	r0, [r4, #84]	; 0x54
 8010262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010264:	602f      	str	r7, [r5, #0]
 8010266:	2900      	cmp	r1, #0
 8010268:	d0c9      	beq.n	80101fe <__sflush_r+0x1a>
 801026a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801026e:	4299      	cmp	r1, r3
 8010270:	d002      	beq.n	8010278 <__sflush_r+0x94>
 8010272:	4628      	mov	r0, r5
 8010274:	f7fe fbb2 	bl	800e9dc <_free_r>
 8010278:	2000      	movs	r0, #0
 801027a:	6360      	str	r0, [r4, #52]	; 0x34
 801027c:	e7c0      	b.n	8010200 <__sflush_r+0x1c>
 801027e:	2301      	movs	r3, #1
 8010280:	4628      	mov	r0, r5
 8010282:	47b0      	blx	r6
 8010284:	1c41      	adds	r1, r0, #1
 8010286:	d1c8      	bne.n	801021a <__sflush_r+0x36>
 8010288:	682b      	ldr	r3, [r5, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d0c5      	beq.n	801021a <__sflush_r+0x36>
 801028e:	2b1d      	cmp	r3, #29
 8010290:	d001      	beq.n	8010296 <__sflush_r+0xb2>
 8010292:	2b16      	cmp	r3, #22
 8010294:	d101      	bne.n	801029a <__sflush_r+0xb6>
 8010296:	602f      	str	r7, [r5, #0]
 8010298:	e7b1      	b.n	80101fe <__sflush_r+0x1a>
 801029a:	89a3      	ldrh	r3, [r4, #12]
 801029c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102a0:	81a3      	strh	r3, [r4, #12]
 80102a2:	e7ad      	b.n	8010200 <__sflush_r+0x1c>
 80102a4:	690f      	ldr	r7, [r1, #16]
 80102a6:	2f00      	cmp	r7, #0
 80102a8:	d0a9      	beq.n	80101fe <__sflush_r+0x1a>
 80102aa:	0793      	lsls	r3, r2, #30
 80102ac:	680e      	ldr	r6, [r1, #0]
 80102ae:	bf08      	it	eq
 80102b0:	694b      	ldreq	r3, [r1, #20]
 80102b2:	600f      	str	r7, [r1, #0]
 80102b4:	bf18      	it	ne
 80102b6:	2300      	movne	r3, #0
 80102b8:	eba6 0807 	sub.w	r8, r6, r7
 80102bc:	608b      	str	r3, [r1, #8]
 80102be:	f1b8 0f00 	cmp.w	r8, #0
 80102c2:	dd9c      	ble.n	80101fe <__sflush_r+0x1a>
 80102c4:	6a21      	ldr	r1, [r4, #32]
 80102c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80102c8:	4643      	mov	r3, r8
 80102ca:	463a      	mov	r2, r7
 80102cc:	4628      	mov	r0, r5
 80102ce:	47b0      	blx	r6
 80102d0:	2800      	cmp	r0, #0
 80102d2:	dc06      	bgt.n	80102e2 <__sflush_r+0xfe>
 80102d4:	89a3      	ldrh	r3, [r4, #12]
 80102d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102da:	81a3      	strh	r3, [r4, #12]
 80102dc:	f04f 30ff 	mov.w	r0, #4294967295
 80102e0:	e78e      	b.n	8010200 <__sflush_r+0x1c>
 80102e2:	4407      	add	r7, r0
 80102e4:	eba8 0800 	sub.w	r8, r8, r0
 80102e8:	e7e9      	b.n	80102be <__sflush_r+0xda>
 80102ea:	bf00      	nop
 80102ec:	dfbffffe 	.word	0xdfbffffe

080102f0 <_fflush_r>:
 80102f0:	b538      	push	{r3, r4, r5, lr}
 80102f2:	690b      	ldr	r3, [r1, #16]
 80102f4:	4605      	mov	r5, r0
 80102f6:	460c      	mov	r4, r1
 80102f8:	b913      	cbnz	r3, 8010300 <_fflush_r+0x10>
 80102fa:	2500      	movs	r5, #0
 80102fc:	4628      	mov	r0, r5
 80102fe:	bd38      	pop	{r3, r4, r5, pc}
 8010300:	b118      	cbz	r0, 801030a <_fflush_r+0x1a>
 8010302:	6a03      	ldr	r3, [r0, #32]
 8010304:	b90b      	cbnz	r3, 801030a <_fflush_r+0x1a>
 8010306:	f7fe f9d9 	bl	800e6bc <__sinit>
 801030a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d0f3      	beq.n	80102fa <_fflush_r+0xa>
 8010312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010314:	07d0      	lsls	r0, r2, #31
 8010316:	d404      	bmi.n	8010322 <_fflush_r+0x32>
 8010318:	0599      	lsls	r1, r3, #22
 801031a:	d402      	bmi.n	8010322 <_fflush_r+0x32>
 801031c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801031e:	f7fe fb36 	bl	800e98e <__retarget_lock_acquire_recursive>
 8010322:	4628      	mov	r0, r5
 8010324:	4621      	mov	r1, r4
 8010326:	f7ff ff5d 	bl	80101e4 <__sflush_r>
 801032a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801032c:	07da      	lsls	r2, r3, #31
 801032e:	4605      	mov	r5, r0
 8010330:	d4e4      	bmi.n	80102fc <_fflush_r+0xc>
 8010332:	89a3      	ldrh	r3, [r4, #12]
 8010334:	059b      	lsls	r3, r3, #22
 8010336:	d4e1      	bmi.n	80102fc <_fflush_r+0xc>
 8010338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801033a:	f7fe fb29 	bl	800e990 <__retarget_lock_release_recursive>
 801033e:	e7dd      	b.n	80102fc <_fflush_r+0xc>

08010340 <memmove>:
 8010340:	4288      	cmp	r0, r1
 8010342:	b510      	push	{r4, lr}
 8010344:	eb01 0402 	add.w	r4, r1, r2
 8010348:	d902      	bls.n	8010350 <memmove+0x10>
 801034a:	4284      	cmp	r4, r0
 801034c:	4623      	mov	r3, r4
 801034e:	d807      	bhi.n	8010360 <memmove+0x20>
 8010350:	1e43      	subs	r3, r0, #1
 8010352:	42a1      	cmp	r1, r4
 8010354:	d008      	beq.n	8010368 <memmove+0x28>
 8010356:	f811 2b01 	ldrb.w	r2, [r1], #1
 801035a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801035e:	e7f8      	b.n	8010352 <memmove+0x12>
 8010360:	4402      	add	r2, r0
 8010362:	4601      	mov	r1, r0
 8010364:	428a      	cmp	r2, r1
 8010366:	d100      	bne.n	801036a <memmove+0x2a>
 8010368:	bd10      	pop	{r4, pc}
 801036a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801036e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010372:	e7f7      	b.n	8010364 <memmove+0x24>

08010374 <_sbrk_r>:
 8010374:	b538      	push	{r3, r4, r5, lr}
 8010376:	4d06      	ldr	r5, [pc, #24]	; (8010390 <_sbrk_r+0x1c>)
 8010378:	2300      	movs	r3, #0
 801037a:	4604      	mov	r4, r0
 801037c:	4608      	mov	r0, r1
 801037e:	602b      	str	r3, [r5, #0]
 8010380:	f7f1 f820 	bl	80013c4 <_sbrk>
 8010384:	1c43      	adds	r3, r0, #1
 8010386:	d102      	bne.n	801038e <_sbrk_r+0x1a>
 8010388:	682b      	ldr	r3, [r5, #0]
 801038a:	b103      	cbz	r3, 801038e <_sbrk_r+0x1a>
 801038c:	6023      	str	r3, [r4, #0]
 801038e:	bd38      	pop	{r3, r4, r5, pc}
 8010390:	2000362c 	.word	0x2000362c

08010394 <__assert_func>:
 8010394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010396:	4614      	mov	r4, r2
 8010398:	461a      	mov	r2, r3
 801039a:	4b09      	ldr	r3, [pc, #36]	; (80103c0 <__assert_func+0x2c>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	4605      	mov	r5, r0
 80103a0:	68d8      	ldr	r0, [r3, #12]
 80103a2:	b14c      	cbz	r4, 80103b8 <__assert_func+0x24>
 80103a4:	4b07      	ldr	r3, [pc, #28]	; (80103c4 <__assert_func+0x30>)
 80103a6:	9100      	str	r1, [sp, #0]
 80103a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80103ac:	4906      	ldr	r1, [pc, #24]	; (80103c8 <__assert_func+0x34>)
 80103ae:	462b      	mov	r3, r5
 80103b0:	f000 f85c 	bl	801046c <fiprintf>
 80103b4:	f000 f86c 	bl	8010490 <abort>
 80103b8:	4b04      	ldr	r3, [pc, #16]	; (80103cc <__assert_func+0x38>)
 80103ba:	461c      	mov	r4, r3
 80103bc:	e7f3      	b.n	80103a6 <__assert_func+0x12>
 80103be:	bf00      	nop
 80103c0:	20000354 	.word	0x20000354
 80103c4:	0801108f 	.word	0x0801108f
 80103c8:	0801109c 	.word	0x0801109c
 80103cc:	080110ca 	.word	0x080110ca

080103d0 <_calloc_r>:
 80103d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103d2:	fba1 2402 	umull	r2, r4, r1, r2
 80103d6:	b94c      	cbnz	r4, 80103ec <_calloc_r+0x1c>
 80103d8:	4611      	mov	r1, r2
 80103da:	9201      	str	r2, [sp, #4]
 80103dc:	f7fe fec2 	bl	800f164 <_malloc_r>
 80103e0:	9a01      	ldr	r2, [sp, #4]
 80103e2:	4605      	mov	r5, r0
 80103e4:	b930      	cbnz	r0, 80103f4 <_calloc_r+0x24>
 80103e6:	4628      	mov	r0, r5
 80103e8:	b003      	add	sp, #12
 80103ea:	bd30      	pop	{r4, r5, pc}
 80103ec:	220c      	movs	r2, #12
 80103ee:	6002      	str	r2, [r0, #0]
 80103f0:	2500      	movs	r5, #0
 80103f2:	e7f8      	b.n	80103e6 <_calloc_r+0x16>
 80103f4:	4621      	mov	r1, r4
 80103f6:	f7fe fa13 	bl	800e820 <memset>
 80103fa:	e7f4      	b.n	80103e6 <_calloc_r+0x16>

080103fc <malloc>:
 80103fc:	4b02      	ldr	r3, [pc, #8]	; (8010408 <malloc+0xc>)
 80103fe:	4601      	mov	r1, r0
 8010400:	6818      	ldr	r0, [r3, #0]
 8010402:	f7fe beaf 	b.w	800f164 <_malloc_r>
 8010406:	bf00      	nop
 8010408:	20000354 	.word	0x20000354

0801040c <_realloc_r>:
 801040c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010410:	4680      	mov	r8, r0
 8010412:	4614      	mov	r4, r2
 8010414:	460e      	mov	r6, r1
 8010416:	b921      	cbnz	r1, 8010422 <_realloc_r+0x16>
 8010418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801041c:	4611      	mov	r1, r2
 801041e:	f7fe bea1 	b.w	800f164 <_malloc_r>
 8010422:	b92a      	cbnz	r2, 8010430 <_realloc_r+0x24>
 8010424:	f7fe fada 	bl	800e9dc <_free_r>
 8010428:	4625      	mov	r5, r4
 801042a:	4628      	mov	r0, r5
 801042c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010430:	f000 f835 	bl	801049e <_malloc_usable_size_r>
 8010434:	4284      	cmp	r4, r0
 8010436:	4607      	mov	r7, r0
 8010438:	d802      	bhi.n	8010440 <_realloc_r+0x34>
 801043a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801043e:	d812      	bhi.n	8010466 <_realloc_r+0x5a>
 8010440:	4621      	mov	r1, r4
 8010442:	4640      	mov	r0, r8
 8010444:	f7fe fe8e 	bl	800f164 <_malloc_r>
 8010448:	4605      	mov	r5, r0
 801044a:	2800      	cmp	r0, #0
 801044c:	d0ed      	beq.n	801042a <_realloc_r+0x1e>
 801044e:	42bc      	cmp	r4, r7
 8010450:	4622      	mov	r2, r4
 8010452:	4631      	mov	r1, r6
 8010454:	bf28      	it	cs
 8010456:	463a      	movcs	r2, r7
 8010458:	f7fe faa3 	bl	800e9a2 <memcpy>
 801045c:	4631      	mov	r1, r6
 801045e:	4640      	mov	r0, r8
 8010460:	f7fe fabc 	bl	800e9dc <_free_r>
 8010464:	e7e1      	b.n	801042a <_realloc_r+0x1e>
 8010466:	4635      	mov	r5, r6
 8010468:	e7df      	b.n	801042a <_realloc_r+0x1e>
	...

0801046c <fiprintf>:
 801046c:	b40e      	push	{r1, r2, r3}
 801046e:	b503      	push	{r0, r1, lr}
 8010470:	4601      	mov	r1, r0
 8010472:	ab03      	add	r3, sp, #12
 8010474:	4805      	ldr	r0, [pc, #20]	; (801048c <fiprintf+0x20>)
 8010476:	f853 2b04 	ldr.w	r2, [r3], #4
 801047a:	6800      	ldr	r0, [r0, #0]
 801047c:	9301      	str	r3, [sp, #4]
 801047e:	f000 f83f 	bl	8010500 <_vfiprintf_r>
 8010482:	b002      	add	sp, #8
 8010484:	f85d eb04 	ldr.w	lr, [sp], #4
 8010488:	b003      	add	sp, #12
 801048a:	4770      	bx	lr
 801048c:	20000354 	.word	0x20000354

08010490 <abort>:
 8010490:	b508      	push	{r3, lr}
 8010492:	2006      	movs	r0, #6
 8010494:	f000 fa0c 	bl	80108b0 <raise>
 8010498:	2001      	movs	r0, #1
 801049a:	f7f0 ff1b 	bl	80012d4 <_exit>

0801049e <_malloc_usable_size_r>:
 801049e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104a2:	1f18      	subs	r0, r3, #4
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	bfbc      	itt	lt
 80104a8:	580b      	ldrlt	r3, [r1, r0]
 80104aa:	18c0      	addlt	r0, r0, r3
 80104ac:	4770      	bx	lr

080104ae <__sfputc_r>:
 80104ae:	6893      	ldr	r3, [r2, #8]
 80104b0:	3b01      	subs	r3, #1
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	b410      	push	{r4}
 80104b6:	6093      	str	r3, [r2, #8]
 80104b8:	da08      	bge.n	80104cc <__sfputc_r+0x1e>
 80104ba:	6994      	ldr	r4, [r2, #24]
 80104bc:	42a3      	cmp	r3, r4
 80104be:	db01      	blt.n	80104c4 <__sfputc_r+0x16>
 80104c0:	290a      	cmp	r1, #10
 80104c2:	d103      	bne.n	80104cc <__sfputc_r+0x1e>
 80104c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104c8:	f000 b934 	b.w	8010734 <__swbuf_r>
 80104cc:	6813      	ldr	r3, [r2, #0]
 80104ce:	1c58      	adds	r0, r3, #1
 80104d0:	6010      	str	r0, [r2, #0]
 80104d2:	7019      	strb	r1, [r3, #0]
 80104d4:	4608      	mov	r0, r1
 80104d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104da:	4770      	bx	lr

080104dc <__sfputs_r>:
 80104dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104de:	4606      	mov	r6, r0
 80104e0:	460f      	mov	r7, r1
 80104e2:	4614      	mov	r4, r2
 80104e4:	18d5      	adds	r5, r2, r3
 80104e6:	42ac      	cmp	r4, r5
 80104e8:	d101      	bne.n	80104ee <__sfputs_r+0x12>
 80104ea:	2000      	movs	r0, #0
 80104ec:	e007      	b.n	80104fe <__sfputs_r+0x22>
 80104ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104f2:	463a      	mov	r2, r7
 80104f4:	4630      	mov	r0, r6
 80104f6:	f7ff ffda 	bl	80104ae <__sfputc_r>
 80104fa:	1c43      	adds	r3, r0, #1
 80104fc:	d1f3      	bne.n	80104e6 <__sfputs_r+0xa>
 80104fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010500 <_vfiprintf_r>:
 8010500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010504:	460d      	mov	r5, r1
 8010506:	b09d      	sub	sp, #116	; 0x74
 8010508:	4614      	mov	r4, r2
 801050a:	4698      	mov	r8, r3
 801050c:	4606      	mov	r6, r0
 801050e:	b118      	cbz	r0, 8010518 <_vfiprintf_r+0x18>
 8010510:	6a03      	ldr	r3, [r0, #32]
 8010512:	b90b      	cbnz	r3, 8010518 <_vfiprintf_r+0x18>
 8010514:	f7fe f8d2 	bl	800e6bc <__sinit>
 8010518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801051a:	07d9      	lsls	r1, r3, #31
 801051c:	d405      	bmi.n	801052a <_vfiprintf_r+0x2a>
 801051e:	89ab      	ldrh	r3, [r5, #12]
 8010520:	059a      	lsls	r2, r3, #22
 8010522:	d402      	bmi.n	801052a <_vfiprintf_r+0x2a>
 8010524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010526:	f7fe fa32 	bl	800e98e <__retarget_lock_acquire_recursive>
 801052a:	89ab      	ldrh	r3, [r5, #12]
 801052c:	071b      	lsls	r3, r3, #28
 801052e:	d501      	bpl.n	8010534 <_vfiprintf_r+0x34>
 8010530:	692b      	ldr	r3, [r5, #16]
 8010532:	b99b      	cbnz	r3, 801055c <_vfiprintf_r+0x5c>
 8010534:	4629      	mov	r1, r5
 8010536:	4630      	mov	r0, r6
 8010538:	f000 f93a 	bl	80107b0 <__swsetup_r>
 801053c:	b170      	cbz	r0, 801055c <_vfiprintf_r+0x5c>
 801053e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010540:	07dc      	lsls	r4, r3, #31
 8010542:	d504      	bpl.n	801054e <_vfiprintf_r+0x4e>
 8010544:	f04f 30ff 	mov.w	r0, #4294967295
 8010548:	b01d      	add	sp, #116	; 0x74
 801054a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801054e:	89ab      	ldrh	r3, [r5, #12]
 8010550:	0598      	lsls	r0, r3, #22
 8010552:	d4f7      	bmi.n	8010544 <_vfiprintf_r+0x44>
 8010554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010556:	f7fe fa1b 	bl	800e990 <__retarget_lock_release_recursive>
 801055a:	e7f3      	b.n	8010544 <_vfiprintf_r+0x44>
 801055c:	2300      	movs	r3, #0
 801055e:	9309      	str	r3, [sp, #36]	; 0x24
 8010560:	2320      	movs	r3, #32
 8010562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010566:	f8cd 800c 	str.w	r8, [sp, #12]
 801056a:	2330      	movs	r3, #48	; 0x30
 801056c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010720 <_vfiprintf_r+0x220>
 8010570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010574:	f04f 0901 	mov.w	r9, #1
 8010578:	4623      	mov	r3, r4
 801057a:	469a      	mov	sl, r3
 801057c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010580:	b10a      	cbz	r2, 8010586 <_vfiprintf_r+0x86>
 8010582:	2a25      	cmp	r2, #37	; 0x25
 8010584:	d1f9      	bne.n	801057a <_vfiprintf_r+0x7a>
 8010586:	ebba 0b04 	subs.w	fp, sl, r4
 801058a:	d00b      	beq.n	80105a4 <_vfiprintf_r+0xa4>
 801058c:	465b      	mov	r3, fp
 801058e:	4622      	mov	r2, r4
 8010590:	4629      	mov	r1, r5
 8010592:	4630      	mov	r0, r6
 8010594:	f7ff ffa2 	bl	80104dc <__sfputs_r>
 8010598:	3001      	adds	r0, #1
 801059a:	f000 80a9 	beq.w	80106f0 <_vfiprintf_r+0x1f0>
 801059e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105a0:	445a      	add	r2, fp
 80105a2:	9209      	str	r2, [sp, #36]	; 0x24
 80105a4:	f89a 3000 	ldrb.w	r3, [sl]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f000 80a1 	beq.w	80106f0 <_vfiprintf_r+0x1f0>
 80105ae:	2300      	movs	r3, #0
 80105b0:	f04f 32ff 	mov.w	r2, #4294967295
 80105b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105b8:	f10a 0a01 	add.w	sl, sl, #1
 80105bc:	9304      	str	r3, [sp, #16]
 80105be:	9307      	str	r3, [sp, #28]
 80105c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105c4:	931a      	str	r3, [sp, #104]	; 0x68
 80105c6:	4654      	mov	r4, sl
 80105c8:	2205      	movs	r2, #5
 80105ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105ce:	4854      	ldr	r0, [pc, #336]	; (8010720 <_vfiprintf_r+0x220>)
 80105d0:	f7ef fe36 	bl	8000240 <memchr>
 80105d4:	9a04      	ldr	r2, [sp, #16]
 80105d6:	b9d8      	cbnz	r0, 8010610 <_vfiprintf_r+0x110>
 80105d8:	06d1      	lsls	r1, r2, #27
 80105da:	bf44      	itt	mi
 80105dc:	2320      	movmi	r3, #32
 80105de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105e2:	0713      	lsls	r3, r2, #28
 80105e4:	bf44      	itt	mi
 80105e6:	232b      	movmi	r3, #43	; 0x2b
 80105e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105ec:	f89a 3000 	ldrb.w	r3, [sl]
 80105f0:	2b2a      	cmp	r3, #42	; 0x2a
 80105f2:	d015      	beq.n	8010620 <_vfiprintf_r+0x120>
 80105f4:	9a07      	ldr	r2, [sp, #28]
 80105f6:	4654      	mov	r4, sl
 80105f8:	2000      	movs	r0, #0
 80105fa:	f04f 0c0a 	mov.w	ip, #10
 80105fe:	4621      	mov	r1, r4
 8010600:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010604:	3b30      	subs	r3, #48	; 0x30
 8010606:	2b09      	cmp	r3, #9
 8010608:	d94d      	bls.n	80106a6 <_vfiprintf_r+0x1a6>
 801060a:	b1b0      	cbz	r0, 801063a <_vfiprintf_r+0x13a>
 801060c:	9207      	str	r2, [sp, #28]
 801060e:	e014      	b.n	801063a <_vfiprintf_r+0x13a>
 8010610:	eba0 0308 	sub.w	r3, r0, r8
 8010614:	fa09 f303 	lsl.w	r3, r9, r3
 8010618:	4313      	orrs	r3, r2
 801061a:	9304      	str	r3, [sp, #16]
 801061c:	46a2      	mov	sl, r4
 801061e:	e7d2      	b.n	80105c6 <_vfiprintf_r+0xc6>
 8010620:	9b03      	ldr	r3, [sp, #12]
 8010622:	1d19      	adds	r1, r3, #4
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	9103      	str	r1, [sp, #12]
 8010628:	2b00      	cmp	r3, #0
 801062a:	bfbb      	ittet	lt
 801062c:	425b      	neglt	r3, r3
 801062e:	f042 0202 	orrlt.w	r2, r2, #2
 8010632:	9307      	strge	r3, [sp, #28]
 8010634:	9307      	strlt	r3, [sp, #28]
 8010636:	bfb8      	it	lt
 8010638:	9204      	strlt	r2, [sp, #16]
 801063a:	7823      	ldrb	r3, [r4, #0]
 801063c:	2b2e      	cmp	r3, #46	; 0x2e
 801063e:	d10c      	bne.n	801065a <_vfiprintf_r+0x15a>
 8010640:	7863      	ldrb	r3, [r4, #1]
 8010642:	2b2a      	cmp	r3, #42	; 0x2a
 8010644:	d134      	bne.n	80106b0 <_vfiprintf_r+0x1b0>
 8010646:	9b03      	ldr	r3, [sp, #12]
 8010648:	1d1a      	adds	r2, r3, #4
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	9203      	str	r2, [sp, #12]
 801064e:	2b00      	cmp	r3, #0
 8010650:	bfb8      	it	lt
 8010652:	f04f 33ff 	movlt.w	r3, #4294967295
 8010656:	3402      	adds	r4, #2
 8010658:	9305      	str	r3, [sp, #20]
 801065a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010730 <_vfiprintf_r+0x230>
 801065e:	7821      	ldrb	r1, [r4, #0]
 8010660:	2203      	movs	r2, #3
 8010662:	4650      	mov	r0, sl
 8010664:	f7ef fdec 	bl	8000240 <memchr>
 8010668:	b138      	cbz	r0, 801067a <_vfiprintf_r+0x17a>
 801066a:	9b04      	ldr	r3, [sp, #16]
 801066c:	eba0 000a 	sub.w	r0, r0, sl
 8010670:	2240      	movs	r2, #64	; 0x40
 8010672:	4082      	lsls	r2, r0
 8010674:	4313      	orrs	r3, r2
 8010676:	3401      	adds	r4, #1
 8010678:	9304      	str	r3, [sp, #16]
 801067a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801067e:	4829      	ldr	r0, [pc, #164]	; (8010724 <_vfiprintf_r+0x224>)
 8010680:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010684:	2206      	movs	r2, #6
 8010686:	f7ef fddb 	bl	8000240 <memchr>
 801068a:	2800      	cmp	r0, #0
 801068c:	d03f      	beq.n	801070e <_vfiprintf_r+0x20e>
 801068e:	4b26      	ldr	r3, [pc, #152]	; (8010728 <_vfiprintf_r+0x228>)
 8010690:	bb1b      	cbnz	r3, 80106da <_vfiprintf_r+0x1da>
 8010692:	9b03      	ldr	r3, [sp, #12]
 8010694:	3307      	adds	r3, #7
 8010696:	f023 0307 	bic.w	r3, r3, #7
 801069a:	3308      	adds	r3, #8
 801069c:	9303      	str	r3, [sp, #12]
 801069e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106a0:	443b      	add	r3, r7
 80106a2:	9309      	str	r3, [sp, #36]	; 0x24
 80106a4:	e768      	b.n	8010578 <_vfiprintf_r+0x78>
 80106a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80106aa:	460c      	mov	r4, r1
 80106ac:	2001      	movs	r0, #1
 80106ae:	e7a6      	b.n	80105fe <_vfiprintf_r+0xfe>
 80106b0:	2300      	movs	r3, #0
 80106b2:	3401      	adds	r4, #1
 80106b4:	9305      	str	r3, [sp, #20]
 80106b6:	4619      	mov	r1, r3
 80106b8:	f04f 0c0a 	mov.w	ip, #10
 80106bc:	4620      	mov	r0, r4
 80106be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106c2:	3a30      	subs	r2, #48	; 0x30
 80106c4:	2a09      	cmp	r2, #9
 80106c6:	d903      	bls.n	80106d0 <_vfiprintf_r+0x1d0>
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d0c6      	beq.n	801065a <_vfiprintf_r+0x15a>
 80106cc:	9105      	str	r1, [sp, #20]
 80106ce:	e7c4      	b.n	801065a <_vfiprintf_r+0x15a>
 80106d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80106d4:	4604      	mov	r4, r0
 80106d6:	2301      	movs	r3, #1
 80106d8:	e7f0      	b.n	80106bc <_vfiprintf_r+0x1bc>
 80106da:	ab03      	add	r3, sp, #12
 80106dc:	9300      	str	r3, [sp, #0]
 80106de:	462a      	mov	r2, r5
 80106e0:	4b12      	ldr	r3, [pc, #72]	; (801072c <_vfiprintf_r+0x22c>)
 80106e2:	a904      	add	r1, sp, #16
 80106e4:	4630      	mov	r0, r6
 80106e6:	f3af 8000 	nop.w
 80106ea:	4607      	mov	r7, r0
 80106ec:	1c78      	adds	r0, r7, #1
 80106ee:	d1d6      	bne.n	801069e <_vfiprintf_r+0x19e>
 80106f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106f2:	07d9      	lsls	r1, r3, #31
 80106f4:	d405      	bmi.n	8010702 <_vfiprintf_r+0x202>
 80106f6:	89ab      	ldrh	r3, [r5, #12]
 80106f8:	059a      	lsls	r2, r3, #22
 80106fa:	d402      	bmi.n	8010702 <_vfiprintf_r+0x202>
 80106fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106fe:	f7fe f947 	bl	800e990 <__retarget_lock_release_recursive>
 8010702:	89ab      	ldrh	r3, [r5, #12]
 8010704:	065b      	lsls	r3, r3, #25
 8010706:	f53f af1d 	bmi.w	8010544 <_vfiprintf_r+0x44>
 801070a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801070c:	e71c      	b.n	8010548 <_vfiprintf_r+0x48>
 801070e:	ab03      	add	r3, sp, #12
 8010710:	9300      	str	r3, [sp, #0]
 8010712:	462a      	mov	r2, r5
 8010714:	4b05      	ldr	r3, [pc, #20]	; (801072c <_vfiprintf_r+0x22c>)
 8010716:	a904      	add	r1, sp, #16
 8010718:	4630      	mov	r0, r6
 801071a:	f7ff fc41 	bl	800ffa0 <_printf_i>
 801071e:	e7e4      	b.n	80106ea <_vfiprintf_r+0x1ea>
 8010720:	0801105c 	.word	0x0801105c
 8010724:	08011066 	.word	0x08011066
 8010728:	00000000 	.word	0x00000000
 801072c:	080104dd 	.word	0x080104dd
 8010730:	08011062 	.word	0x08011062

08010734 <__swbuf_r>:
 8010734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010736:	460e      	mov	r6, r1
 8010738:	4614      	mov	r4, r2
 801073a:	4605      	mov	r5, r0
 801073c:	b118      	cbz	r0, 8010746 <__swbuf_r+0x12>
 801073e:	6a03      	ldr	r3, [r0, #32]
 8010740:	b90b      	cbnz	r3, 8010746 <__swbuf_r+0x12>
 8010742:	f7fd ffbb 	bl	800e6bc <__sinit>
 8010746:	69a3      	ldr	r3, [r4, #24]
 8010748:	60a3      	str	r3, [r4, #8]
 801074a:	89a3      	ldrh	r3, [r4, #12]
 801074c:	071a      	lsls	r2, r3, #28
 801074e:	d525      	bpl.n	801079c <__swbuf_r+0x68>
 8010750:	6923      	ldr	r3, [r4, #16]
 8010752:	b31b      	cbz	r3, 801079c <__swbuf_r+0x68>
 8010754:	6823      	ldr	r3, [r4, #0]
 8010756:	6922      	ldr	r2, [r4, #16]
 8010758:	1a98      	subs	r0, r3, r2
 801075a:	6963      	ldr	r3, [r4, #20]
 801075c:	b2f6      	uxtb	r6, r6
 801075e:	4283      	cmp	r3, r0
 8010760:	4637      	mov	r7, r6
 8010762:	dc04      	bgt.n	801076e <__swbuf_r+0x3a>
 8010764:	4621      	mov	r1, r4
 8010766:	4628      	mov	r0, r5
 8010768:	f7ff fdc2 	bl	80102f0 <_fflush_r>
 801076c:	b9e0      	cbnz	r0, 80107a8 <__swbuf_r+0x74>
 801076e:	68a3      	ldr	r3, [r4, #8]
 8010770:	3b01      	subs	r3, #1
 8010772:	60a3      	str	r3, [r4, #8]
 8010774:	6823      	ldr	r3, [r4, #0]
 8010776:	1c5a      	adds	r2, r3, #1
 8010778:	6022      	str	r2, [r4, #0]
 801077a:	701e      	strb	r6, [r3, #0]
 801077c:	6962      	ldr	r2, [r4, #20]
 801077e:	1c43      	adds	r3, r0, #1
 8010780:	429a      	cmp	r2, r3
 8010782:	d004      	beq.n	801078e <__swbuf_r+0x5a>
 8010784:	89a3      	ldrh	r3, [r4, #12]
 8010786:	07db      	lsls	r3, r3, #31
 8010788:	d506      	bpl.n	8010798 <__swbuf_r+0x64>
 801078a:	2e0a      	cmp	r6, #10
 801078c:	d104      	bne.n	8010798 <__swbuf_r+0x64>
 801078e:	4621      	mov	r1, r4
 8010790:	4628      	mov	r0, r5
 8010792:	f7ff fdad 	bl	80102f0 <_fflush_r>
 8010796:	b938      	cbnz	r0, 80107a8 <__swbuf_r+0x74>
 8010798:	4638      	mov	r0, r7
 801079a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801079c:	4621      	mov	r1, r4
 801079e:	4628      	mov	r0, r5
 80107a0:	f000 f806 	bl	80107b0 <__swsetup_r>
 80107a4:	2800      	cmp	r0, #0
 80107a6:	d0d5      	beq.n	8010754 <__swbuf_r+0x20>
 80107a8:	f04f 37ff 	mov.w	r7, #4294967295
 80107ac:	e7f4      	b.n	8010798 <__swbuf_r+0x64>
	...

080107b0 <__swsetup_r>:
 80107b0:	b538      	push	{r3, r4, r5, lr}
 80107b2:	4b2a      	ldr	r3, [pc, #168]	; (801085c <__swsetup_r+0xac>)
 80107b4:	4605      	mov	r5, r0
 80107b6:	6818      	ldr	r0, [r3, #0]
 80107b8:	460c      	mov	r4, r1
 80107ba:	b118      	cbz	r0, 80107c4 <__swsetup_r+0x14>
 80107bc:	6a03      	ldr	r3, [r0, #32]
 80107be:	b90b      	cbnz	r3, 80107c4 <__swsetup_r+0x14>
 80107c0:	f7fd ff7c 	bl	800e6bc <__sinit>
 80107c4:	89a3      	ldrh	r3, [r4, #12]
 80107c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107ca:	0718      	lsls	r0, r3, #28
 80107cc:	d422      	bmi.n	8010814 <__swsetup_r+0x64>
 80107ce:	06d9      	lsls	r1, r3, #27
 80107d0:	d407      	bmi.n	80107e2 <__swsetup_r+0x32>
 80107d2:	2309      	movs	r3, #9
 80107d4:	602b      	str	r3, [r5, #0]
 80107d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80107da:	81a3      	strh	r3, [r4, #12]
 80107dc:	f04f 30ff 	mov.w	r0, #4294967295
 80107e0:	e034      	b.n	801084c <__swsetup_r+0x9c>
 80107e2:	0758      	lsls	r0, r3, #29
 80107e4:	d512      	bpl.n	801080c <__swsetup_r+0x5c>
 80107e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107e8:	b141      	cbz	r1, 80107fc <__swsetup_r+0x4c>
 80107ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107ee:	4299      	cmp	r1, r3
 80107f0:	d002      	beq.n	80107f8 <__swsetup_r+0x48>
 80107f2:	4628      	mov	r0, r5
 80107f4:	f7fe f8f2 	bl	800e9dc <_free_r>
 80107f8:	2300      	movs	r3, #0
 80107fa:	6363      	str	r3, [r4, #52]	; 0x34
 80107fc:	89a3      	ldrh	r3, [r4, #12]
 80107fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010802:	81a3      	strh	r3, [r4, #12]
 8010804:	2300      	movs	r3, #0
 8010806:	6063      	str	r3, [r4, #4]
 8010808:	6923      	ldr	r3, [r4, #16]
 801080a:	6023      	str	r3, [r4, #0]
 801080c:	89a3      	ldrh	r3, [r4, #12]
 801080e:	f043 0308 	orr.w	r3, r3, #8
 8010812:	81a3      	strh	r3, [r4, #12]
 8010814:	6923      	ldr	r3, [r4, #16]
 8010816:	b94b      	cbnz	r3, 801082c <__swsetup_r+0x7c>
 8010818:	89a3      	ldrh	r3, [r4, #12]
 801081a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801081e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010822:	d003      	beq.n	801082c <__swsetup_r+0x7c>
 8010824:	4621      	mov	r1, r4
 8010826:	4628      	mov	r0, r5
 8010828:	f000 f884 	bl	8010934 <__smakebuf_r>
 801082c:	89a0      	ldrh	r0, [r4, #12]
 801082e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010832:	f010 0301 	ands.w	r3, r0, #1
 8010836:	d00a      	beq.n	801084e <__swsetup_r+0x9e>
 8010838:	2300      	movs	r3, #0
 801083a:	60a3      	str	r3, [r4, #8]
 801083c:	6963      	ldr	r3, [r4, #20]
 801083e:	425b      	negs	r3, r3
 8010840:	61a3      	str	r3, [r4, #24]
 8010842:	6923      	ldr	r3, [r4, #16]
 8010844:	b943      	cbnz	r3, 8010858 <__swsetup_r+0xa8>
 8010846:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801084a:	d1c4      	bne.n	80107d6 <__swsetup_r+0x26>
 801084c:	bd38      	pop	{r3, r4, r5, pc}
 801084e:	0781      	lsls	r1, r0, #30
 8010850:	bf58      	it	pl
 8010852:	6963      	ldrpl	r3, [r4, #20]
 8010854:	60a3      	str	r3, [r4, #8]
 8010856:	e7f4      	b.n	8010842 <__swsetup_r+0x92>
 8010858:	2000      	movs	r0, #0
 801085a:	e7f7      	b.n	801084c <__swsetup_r+0x9c>
 801085c:	20000354 	.word	0x20000354

08010860 <_raise_r>:
 8010860:	291f      	cmp	r1, #31
 8010862:	b538      	push	{r3, r4, r5, lr}
 8010864:	4604      	mov	r4, r0
 8010866:	460d      	mov	r5, r1
 8010868:	d904      	bls.n	8010874 <_raise_r+0x14>
 801086a:	2316      	movs	r3, #22
 801086c:	6003      	str	r3, [r0, #0]
 801086e:	f04f 30ff 	mov.w	r0, #4294967295
 8010872:	bd38      	pop	{r3, r4, r5, pc}
 8010874:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010876:	b112      	cbz	r2, 801087e <_raise_r+0x1e>
 8010878:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801087c:	b94b      	cbnz	r3, 8010892 <_raise_r+0x32>
 801087e:	4620      	mov	r0, r4
 8010880:	f000 f830 	bl	80108e4 <_getpid_r>
 8010884:	462a      	mov	r2, r5
 8010886:	4601      	mov	r1, r0
 8010888:	4620      	mov	r0, r4
 801088a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801088e:	f000 b817 	b.w	80108c0 <_kill_r>
 8010892:	2b01      	cmp	r3, #1
 8010894:	d00a      	beq.n	80108ac <_raise_r+0x4c>
 8010896:	1c59      	adds	r1, r3, #1
 8010898:	d103      	bne.n	80108a2 <_raise_r+0x42>
 801089a:	2316      	movs	r3, #22
 801089c:	6003      	str	r3, [r0, #0]
 801089e:	2001      	movs	r0, #1
 80108a0:	e7e7      	b.n	8010872 <_raise_r+0x12>
 80108a2:	2400      	movs	r4, #0
 80108a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80108a8:	4628      	mov	r0, r5
 80108aa:	4798      	blx	r3
 80108ac:	2000      	movs	r0, #0
 80108ae:	e7e0      	b.n	8010872 <_raise_r+0x12>

080108b0 <raise>:
 80108b0:	4b02      	ldr	r3, [pc, #8]	; (80108bc <raise+0xc>)
 80108b2:	4601      	mov	r1, r0
 80108b4:	6818      	ldr	r0, [r3, #0]
 80108b6:	f7ff bfd3 	b.w	8010860 <_raise_r>
 80108ba:	bf00      	nop
 80108bc:	20000354 	.word	0x20000354

080108c0 <_kill_r>:
 80108c0:	b538      	push	{r3, r4, r5, lr}
 80108c2:	4d07      	ldr	r5, [pc, #28]	; (80108e0 <_kill_r+0x20>)
 80108c4:	2300      	movs	r3, #0
 80108c6:	4604      	mov	r4, r0
 80108c8:	4608      	mov	r0, r1
 80108ca:	4611      	mov	r1, r2
 80108cc:	602b      	str	r3, [r5, #0]
 80108ce:	f7f0 fcf1 	bl	80012b4 <_kill>
 80108d2:	1c43      	adds	r3, r0, #1
 80108d4:	d102      	bne.n	80108dc <_kill_r+0x1c>
 80108d6:	682b      	ldr	r3, [r5, #0]
 80108d8:	b103      	cbz	r3, 80108dc <_kill_r+0x1c>
 80108da:	6023      	str	r3, [r4, #0]
 80108dc:	bd38      	pop	{r3, r4, r5, pc}
 80108de:	bf00      	nop
 80108e0:	2000362c 	.word	0x2000362c

080108e4 <_getpid_r>:
 80108e4:	f7f0 bcde 	b.w	80012a4 <_getpid>

080108e8 <__swhatbuf_r>:
 80108e8:	b570      	push	{r4, r5, r6, lr}
 80108ea:	460c      	mov	r4, r1
 80108ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108f0:	2900      	cmp	r1, #0
 80108f2:	b096      	sub	sp, #88	; 0x58
 80108f4:	4615      	mov	r5, r2
 80108f6:	461e      	mov	r6, r3
 80108f8:	da0d      	bge.n	8010916 <__swhatbuf_r+0x2e>
 80108fa:	89a3      	ldrh	r3, [r4, #12]
 80108fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010900:	f04f 0100 	mov.w	r1, #0
 8010904:	bf0c      	ite	eq
 8010906:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801090a:	2340      	movne	r3, #64	; 0x40
 801090c:	2000      	movs	r0, #0
 801090e:	6031      	str	r1, [r6, #0]
 8010910:	602b      	str	r3, [r5, #0]
 8010912:	b016      	add	sp, #88	; 0x58
 8010914:	bd70      	pop	{r4, r5, r6, pc}
 8010916:	466a      	mov	r2, sp
 8010918:	f000 f848 	bl	80109ac <_fstat_r>
 801091c:	2800      	cmp	r0, #0
 801091e:	dbec      	blt.n	80108fa <__swhatbuf_r+0x12>
 8010920:	9901      	ldr	r1, [sp, #4]
 8010922:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010926:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801092a:	4259      	negs	r1, r3
 801092c:	4159      	adcs	r1, r3
 801092e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010932:	e7eb      	b.n	801090c <__swhatbuf_r+0x24>

08010934 <__smakebuf_r>:
 8010934:	898b      	ldrh	r3, [r1, #12]
 8010936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010938:	079d      	lsls	r5, r3, #30
 801093a:	4606      	mov	r6, r0
 801093c:	460c      	mov	r4, r1
 801093e:	d507      	bpl.n	8010950 <__smakebuf_r+0x1c>
 8010940:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010944:	6023      	str	r3, [r4, #0]
 8010946:	6123      	str	r3, [r4, #16]
 8010948:	2301      	movs	r3, #1
 801094a:	6163      	str	r3, [r4, #20]
 801094c:	b002      	add	sp, #8
 801094e:	bd70      	pop	{r4, r5, r6, pc}
 8010950:	ab01      	add	r3, sp, #4
 8010952:	466a      	mov	r2, sp
 8010954:	f7ff ffc8 	bl	80108e8 <__swhatbuf_r>
 8010958:	9900      	ldr	r1, [sp, #0]
 801095a:	4605      	mov	r5, r0
 801095c:	4630      	mov	r0, r6
 801095e:	f7fe fc01 	bl	800f164 <_malloc_r>
 8010962:	b948      	cbnz	r0, 8010978 <__smakebuf_r+0x44>
 8010964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010968:	059a      	lsls	r2, r3, #22
 801096a:	d4ef      	bmi.n	801094c <__smakebuf_r+0x18>
 801096c:	f023 0303 	bic.w	r3, r3, #3
 8010970:	f043 0302 	orr.w	r3, r3, #2
 8010974:	81a3      	strh	r3, [r4, #12]
 8010976:	e7e3      	b.n	8010940 <__smakebuf_r+0xc>
 8010978:	89a3      	ldrh	r3, [r4, #12]
 801097a:	6020      	str	r0, [r4, #0]
 801097c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010980:	81a3      	strh	r3, [r4, #12]
 8010982:	9b00      	ldr	r3, [sp, #0]
 8010984:	6163      	str	r3, [r4, #20]
 8010986:	9b01      	ldr	r3, [sp, #4]
 8010988:	6120      	str	r0, [r4, #16]
 801098a:	b15b      	cbz	r3, 80109a4 <__smakebuf_r+0x70>
 801098c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010990:	4630      	mov	r0, r6
 8010992:	f000 f81d 	bl	80109d0 <_isatty_r>
 8010996:	b128      	cbz	r0, 80109a4 <__smakebuf_r+0x70>
 8010998:	89a3      	ldrh	r3, [r4, #12]
 801099a:	f023 0303 	bic.w	r3, r3, #3
 801099e:	f043 0301 	orr.w	r3, r3, #1
 80109a2:	81a3      	strh	r3, [r4, #12]
 80109a4:	89a3      	ldrh	r3, [r4, #12]
 80109a6:	431d      	orrs	r5, r3
 80109a8:	81a5      	strh	r5, [r4, #12]
 80109aa:	e7cf      	b.n	801094c <__smakebuf_r+0x18>

080109ac <_fstat_r>:
 80109ac:	b538      	push	{r3, r4, r5, lr}
 80109ae:	4d07      	ldr	r5, [pc, #28]	; (80109cc <_fstat_r+0x20>)
 80109b0:	2300      	movs	r3, #0
 80109b2:	4604      	mov	r4, r0
 80109b4:	4608      	mov	r0, r1
 80109b6:	4611      	mov	r1, r2
 80109b8:	602b      	str	r3, [r5, #0]
 80109ba:	f7f0 fcda 	bl	8001372 <_fstat>
 80109be:	1c43      	adds	r3, r0, #1
 80109c0:	d102      	bne.n	80109c8 <_fstat_r+0x1c>
 80109c2:	682b      	ldr	r3, [r5, #0]
 80109c4:	b103      	cbz	r3, 80109c8 <_fstat_r+0x1c>
 80109c6:	6023      	str	r3, [r4, #0]
 80109c8:	bd38      	pop	{r3, r4, r5, pc}
 80109ca:	bf00      	nop
 80109cc:	2000362c 	.word	0x2000362c

080109d0 <_isatty_r>:
 80109d0:	b538      	push	{r3, r4, r5, lr}
 80109d2:	4d06      	ldr	r5, [pc, #24]	; (80109ec <_isatty_r+0x1c>)
 80109d4:	2300      	movs	r3, #0
 80109d6:	4604      	mov	r4, r0
 80109d8:	4608      	mov	r0, r1
 80109da:	602b      	str	r3, [r5, #0]
 80109dc:	f7f0 fcd9 	bl	8001392 <_isatty>
 80109e0:	1c43      	adds	r3, r0, #1
 80109e2:	d102      	bne.n	80109ea <_isatty_r+0x1a>
 80109e4:	682b      	ldr	r3, [r5, #0]
 80109e6:	b103      	cbz	r3, 80109ea <_isatty_r+0x1a>
 80109e8:	6023      	str	r3, [r4, #0]
 80109ea:	bd38      	pop	{r3, r4, r5, pc}
 80109ec:	2000362c 	.word	0x2000362c

080109f0 <_init>:
 80109f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109f2:	bf00      	nop
 80109f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109f6:	bc08      	pop	{r3}
 80109f8:	469e      	mov	lr, r3
 80109fa:	4770      	bx	lr

080109fc <_fini>:
 80109fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109fe:	bf00      	nop
 8010a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a02:	bc08      	pop	{r3}
 8010a04:	469e      	mov	lr, r3
 8010a06:	4770      	bx	lr
