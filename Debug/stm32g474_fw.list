
stm32g474_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08007800  08007800  00007800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011008  080079e0  080079e0  000079e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  080189e8  080189e8  000189e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019204  08019204  00020380  2**0
                  CONTENTS
  4 .ARM          00000008  08019204  08019204  00019204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801920c  0801920c  00020380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801920c  0801920c  0001920c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019210  08019210  00019210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  08019214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020380  2**0
                  CONTENTS
 10 .bss          00003340  20000380  20000380  00020380  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200036c0  200036c0  00020380  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f982  00000000  00000000  000203f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005e81  00000000  00000000  0003fd75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a28  00000000  00000000  00045bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013a9  00000000  00000000  00047620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d61b  00000000  00000000  000489c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000295bb  00000000  00000000  00075fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8ccf  00000000  00000000  0009f59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007b4c  00000000  00000000  00198270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0019fdbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080079e0 <__do_global_dtors_aux>:
 80079e0:	b510      	push	{r4, lr}
 80079e2:	4c05      	ldr	r4, [pc, #20]	; (80079f8 <__do_global_dtors_aux+0x18>)
 80079e4:	7823      	ldrb	r3, [r4, #0]
 80079e6:	b933      	cbnz	r3, 80079f6 <__do_global_dtors_aux+0x16>
 80079e8:	4b04      	ldr	r3, [pc, #16]	; (80079fc <__do_global_dtors_aux+0x1c>)
 80079ea:	b113      	cbz	r3, 80079f2 <__do_global_dtors_aux+0x12>
 80079ec:	4804      	ldr	r0, [pc, #16]	; (8007a00 <__do_global_dtors_aux+0x20>)
 80079ee:	f3af 8000 	nop.w
 80079f2:	2301      	movs	r3, #1
 80079f4:	7023      	strb	r3, [r4, #0]
 80079f6:	bd10      	pop	{r4, pc}
 80079f8:	20000380 	.word	0x20000380
 80079fc:	00000000 	.word	0x00000000
 8007a00:	080189d0 	.word	0x080189d0

08007a04 <frame_dummy>:
 8007a04:	b508      	push	{r3, lr}
 8007a06:	4b03      	ldr	r3, [pc, #12]	; (8007a14 <frame_dummy+0x10>)
 8007a08:	b11b      	cbz	r3, 8007a12 <frame_dummy+0xe>
 8007a0a:	4903      	ldr	r1, [pc, #12]	; (8007a18 <frame_dummy+0x14>)
 8007a0c:	4803      	ldr	r0, [pc, #12]	; (8007a1c <frame_dummy+0x18>)
 8007a0e:	f3af 8000 	nop.w
 8007a12:	bd08      	pop	{r3, pc}
 8007a14:	00000000 	.word	0x00000000
 8007a18:	20000384 	.word	0x20000384
 8007a1c:	080189d0 	.word	0x080189d0

08007a20 <strcmp>:
 8007a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a28:	2a01      	cmp	r2, #1
 8007a2a:	bf28      	it	cs
 8007a2c:	429a      	cmpcs	r2, r3
 8007a2e:	d0f7      	beq.n	8007a20 <strcmp>
 8007a30:	1ad0      	subs	r0, r2, r3
 8007a32:	4770      	bx	lr
	...

08007a40 <memchr>:
 8007a40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8007a44:	2a10      	cmp	r2, #16
 8007a46:	db2b      	blt.n	8007aa0 <memchr+0x60>
 8007a48:	f010 0f07 	tst.w	r0, #7
 8007a4c:	d008      	beq.n	8007a60 <memchr+0x20>
 8007a4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007a52:	3a01      	subs	r2, #1
 8007a54:	428b      	cmp	r3, r1
 8007a56:	d02d      	beq.n	8007ab4 <memchr+0x74>
 8007a58:	f010 0f07 	tst.w	r0, #7
 8007a5c:	b342      	cbz	r2, 8007ab0 <memchr+0x70>
 8007a5e:	d1f6      	bne.n	8007a4e <memchr+0xe>
 8007a60:	b4f0      	push	{r4, r5, r6, r7}
 8007a62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8007a66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8007a6a:	f022 0407 	bic.w	r4, r2, #7
 8007a6e:	f07f 0700 	mvns.w	r7, #0
 8007a72:	2300      	movs	r3, #0
 8007a74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8007a78:	3c08      	subs	r4, #8
 8007a7a:	ea85 0501 	eor.w	r5, r5, r1
 8007a7e:	ea86 0601 	eor.w	r6, r6, r1
 8007a82:	fa85 f547 	uadd8	r5, r5, r7
 8007a86:	faa3 f587 	sel	r5, r3, r7
 8007a8a:	fa86 f647 	uadd8	r6, r6, r7
 8007a8e:	faa5 f687 	sel	r6, r5, r7
 8007a92:	b98e      	cbnz	r6, 8007ab8 <memchr+0x78>
 8007a94:	d1ee      	bne.n	8007a74 <memchr+0x34>
 8007a96:	bcf0      	pop	{r4, r5, r6, r7}
 8007a98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8007a9c:	f002 0207 	and.w	r2, r2, #7
 8007aa0:	b132      	cbz	r2, 8007ab0 <memchr+0x70>
 8007aa2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007aa6:	3a01      	subs	r2, #1
 8007aa8:	ea83 0301 	eor.w	r3, r3, r1
 8007aac:	b113      	cbz	r3, 8007ab4 <memchr+0x74>
 8007aae:	d1f8      	bne.n	8007aa2 <memchr+0x62>
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	4770      	bx	lr
 8007ab4:	3801      	subs	r0, #1
 8007ab6:	4770      	bx	lr
 8007ab8:	2d00      	cmp	r5, #0
 8007aba:	bf06      	itte	eq
 8007abc:	4635      	moveq	r5, r6
 8007abe:	3803      	subeq	r0, #3
 8007ac0:	3807      	subne	r0, #7
 8007ac2:	f015 0f01 	tst.w	r5, #1
 8007ac6:	d107      	bne.n	8007ad8 <memchr+0x98>
 8007ac8:	3001      	adds	r0, #1
 8007aca:	f415 7f80 	tst.w	r5, #256	; 0x100
 8007ace:	bf02      	ittt	eq
 8007ad0:	3001      	addeq	r0, #1
 8007ad2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8007ad6:	3001      	addeq	r0, #1
 8007ad8:	bcf0      	pop	{r4, r5, r6, r7}
 8007ada:	3801      	subs	r0, #1
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop

08007ae0 <__aeabi_drsub>:
 8007ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007ae4:	e002      	b.n	8007aec <__adddf3>
 8007ae6:	bf00      	nop

08007ae8 <__aeabi_dsub>:
 8007ae8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007aec <__adddf3>:
 8007aec:	b530      	push	{r4, r5, lr}
 8007aee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007af2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007af6:	ea94 0f05 	teq	r4, r5
 8007afa:	bf08      	it	eq
 8007afc:	ea90 0f02 	teqeq	r0, r2
 8007b00:	bf1f      	itttt	ne
 8007b02:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007b06:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007b0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007b0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007b12:	f000 80e2 	beq.w	8007cda <__adddf3+0x1ee>
 8007b16:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007b1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007b1e:	bfb8      	it	lt
 8007b20:	426d      	neglt	r5, r5
 8007b22:	dd0c      	ble.n	8007b3e <__adddf3+0x52>
 8007b24:	442c      	add	r4, r5
 8007b26:	ea80 0202 	eor.w	r2, r0, r2
 8007b2a:	ea81 0303 	eor.w	r3, r1, r3
 8007b2e:	ea82 0000 	eor.w	r0, r2, r0
 8007b32:	ea83 0101 	eor.w	r1, r3, r1
 8007b36:	ea80 0202 	eor.w	r2, r0, r2
 8007b3a:	ea81 0303 	eor.w	r3, r1, r3
 8007b3e:	2d36      	cmp	r5, #54	; 0x36
 8007b40:	bf88      	it	hi
 8007b42:	bd30      	pophi	{r4, r5, pc}
 8007b44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007b48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007b4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007b50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007b54:	d002      	beq.n	8007b5c <__adddf3+0x70>
 8007b56:	4240      	negs	r0, r0
 8007b58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007b5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007b60:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007b64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007b68:	d002      	beq.n	8007b70 <__adddf3+0x84>
 8007b6a:	4252      	negs	r2, r2
 8007b6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007b70:	ea94 0f05 	teq	r4, r5
 8007b74:	f000 80a7 	beq.w	8007cc6 <__adddf3+0x1da>
 8007b78:	f1a4 0401 	sub.w	r4, r4, #1
 8007b7c:	f1d5 0e20 	rsbs	lr, r5, #32
 8007b80:	db0d      	blt.n	8007b9e <__adddf3+0xb2>
 8007b82:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007b86:	fa22 f205 	lsr.w	r2, r2, r5
 8007b8a:	1880      	adds	r0, r0, r2
 8007b8c:	f141 0100 	adc.w	r1, r1, #0
 8007b90:	fa03 f20e 	lsl.w	r2, r3, lr
 8007b94:	1880      	adds	r0, r0, r2
 8007b96:	fa43 f305 	asr.w	r3, r3, r5
 8007b9a:	4159      	adcs	r1, r3
 8007b9c:	e00e      	b.n	8007bbc <__adddf3+0xd0>
 8007b9e:	f1a5 0520 	sub.w	r5, r5, #32
 8007ba2:	f10e 0e20 	add.w	lr, lr, #32
 8007ba6:	2a01      	cmp	r2, #1
 8007ba8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007bac:	bf28      	it	cs
 8007bae:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007bb2:	fa43 f305 	asr.w	r3, r3, r5
 8007bb6:	18c0      	adds	r0, r0, r3
 8007bb8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007bbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007bc0:	d507      	bpl.n	8007bd2 <__adddf3+0xe6>
 8007bc2:	f04f 0e00 	mov.w	lr, #0
 8007bc6:	f1dc 0c00 	rsbs	ip, ip, #0
 8007bca:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007bce:	eb6e 0101 	sbc.w	r1, lr, r1
 8007bd2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007bd6:	d31b      	bcc.n	8007c10 <__adddf3+0x124>
 8007bd8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007bdc:	d30c      	bcc.n	8007bf8 <__adddf3+0x10c>
 8007bde:	0849      	lsrs	r1, r1, #1
 8007be0:	ea5f 0030 	movs.w	r0, r0, rrx
 8007be4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007be8:	f104 0401 	add.w	r4, r4, #1
 8007bec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007bf0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007bf4:	f080 809a 	bcs.w	8007d2c <__adddf3+0x240>
 8007bf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007bfc:	bf08      	it	eq
 8007bfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007c02:	f150 0000 	adcs.w	r0, r0, #0
 8007c06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007c0a:	ea41 0105 	orr.w	r1, r1, r5
 8007c0e:	bd30      	pop	{r4, r5, pc}
 8007c10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007c14:	4140      	adcs	r0, r0
 8007c16:	eb41 0101 	adc.w	r1, r1, r1
 8007c1a:	3c01      	subs	r4, #1
 8007c1c:	bf28      	it	cs
 8007c1e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8007c22:	d2e9      	bcs.n	8007bf8 <__adddf3+0x10c>
 8007c24:	f091 0f00 	teq	r1, #0
 8007c28:	bf04      	itt	eq
 8007c2a:	4601      	moveq	r1, r0
 8007c2c:	2000      	moveq	r0, #0
 8007c2e:	fab1 f381 	clz	r3, r1
 8007c32:	bf08      	it	eq
 8007c34:	3320      	addeq	r3, #32
 8007c36:	f1a3 030b 	sub.w	r3, r3, #11
 8007c3a:	f1b3 0220 	subs.w	r2, r3, #32
 8007c3e:	da0c      	bge.n	8007c5a <__adddf3+0x16e>
 8007c40:	320c      	adds	r2, #12
 8007c42:	dd08      	ble.n	8007c56 <__adddf3+0x16a>
 8007c44:	f102 0c14 	add.w	ip, r2, #20
 8007c48:	f1c2 020c 	rsb	r2, r2, #12
 8007c4c:	fa01 f00c 	lsl.w	r0, r1, ip
 8007c50:	fa21 f102 	lsr.w	r1, r1, r2
 8007c54:	e00c      	b.n	8007c70 <__adddf3+0x184>
 8007c56:	f102 0214 	add.w	r2, r2, #20
 8007c5a:	bfd8      	it	le
 8007c5c:	f1c2 0c20 	rsble	ip, r2, #32
 8007c60:	fa01 f102 	lsl.w	r1, r1, r2
 8007c64:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007c68:	bfdc      	itt	le
 8007c6a:	ea41 010c 	orrle.w	r1, r1, ip
 8007c6e:	4090      	lslle	r0, r2
 8007c70:	1ae4      	subs	r4, r4, r3
 8007c72:	bfa2      	ittt	ge
 8007c74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007c78:	4329      	orrge	r1, r5
 8007c7a:	bd30      	popge	{r4, r5, pc}
 8007c7c:	ea6f 0404 	mvn.w	r4, r4
 8007c80:	3c1f      	subs	r4, #31
 8007c82:	da1c      	bge.n	8007cbe <__adddf3+0x1d2>
 8007c84:	340c      	adds	r4, #12
 8007c86:	dc0e      	bgt.n	8007ca6 <__adddf3+0x1ba>
 8007c88:	f104 0414 	add.w	r4, r4, #20
 8007c8c:	f1c4 0220 	rsb	r2, r4, #32
 8007c90:	fa20 f004 	lsr.w	r0, r0, r4
 8007c94:	fa01 f302 	lsl.w	r3, r1, r2
 8007c98:	ea40 0003 	orr.w	r0, r0, r3
 8007c9c:	fa21 f304 	lsr.w	r3, r1, r4
 8007ca0:	ea45 0103 	orr.w	r1, r5, r3
 8007ca4:	bd30      	pop	{r4, r5, pc}
 8007ca6:	f1c4 040c 	rsb	r4, r4, #12
 8007caa:	f1c4 0220 	rsb	r2, r4, #32
 8007cae:	fa20 f002 	lsr.w	r0, r0, r2
 8007cb2:	fa01 f304 	lsl.w	r3, r1, r4
 8007cb6:	ea40 0003 	orr.w	r0, r0, r3
 8007cba:	4629      	mov	r1, r5
 8007cbc:	bd30      	pop	{r4, r5, pc}
 8007cbe:	fa21 f004 	lsr.w	r0, r1, r4
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	bd30      	pop	{r4, r5, pc}
 8007cc6:	f094 0f00 	teq	r4, #0
 8007cca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8007cce:	bf06      	itte	eq
 8007cd0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007cd4:	3401      	addeq	r4, #1
 8007cd6:	3d01      	subne	r5, #1
 8007cd8:	e74e      	b.n	8007b78 <__adddf3+0x8c>
 8007cda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007cde:	bf18      	it	ne
 8007ce0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007ce4:	d029      	beq.n	8007d3a <__adddf3+0x24e>
 8007ce6:	ea94 0f05 	teq	r4, r5
 8007cea:	bf08      	it	eq
 8007cec:	ea90 0f02 	teqeq	r0, r2
 8007cf0:	d005      	beq.n	8007cfe <__adddf3+0x212>
 8007cf2:	ea54 0c00 	orrs.w	ip, r4, r0
 8007cf6:	bf04      	itt	eq
 8007cf8:	4619      	moveq	r1, r3
 8007cfa:	4610      	moveq	r0, r2
 8007cfc:	bd30      	pop	{r4, r5, pc}
 8007cfe:	ea91 0f03 	teq	r1, r3
 8007d02:	bf1e      	ittt	ne
 8007d04:	2100      	movne	r1, #0
 8007d06:	2000      	movne	r0, #0
 8007d08:	bd30      	popne	{r4, r5, pc}
 8007d0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007d0e:	d105      	bne.n	8007d1c <__adddf3+0x230>
 8007d10:	0040      	lsls	r0, r0, #1
 8007d12:	4149      	adcs	r1, r1
 8007d14:	bf28      	it	cs
 8007d16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007d1a:	bd30      	pop	{r4, r5, pc}
 8007d1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007d20:	bf3c      	itt	cc
 8007d22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007d26:	bd30      	popcc	{r4, r5, pc}
 8007d28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007d2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007d30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d34:	f04f 0000 	mov.w	r0, #0
 8007d38:	bd30      	pop	{r4, r5, pc}
 8007d3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007d3e:	bf1a      	itte	ne
 8007d40:	4619      	movne	r1, r3
 8007d42:	4610      	movne	r0, r2
 8007d44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007d48:	bf1c      	itt	ne
 8007d4a:	460b      	movne	r3, r1
 8007d4c:	4602      	movne	r2, r0
 8007d4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007d52:	bf06      	itte	eq
 8007d54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007d58:	ea91 0f03 	teqeq	r1, r3
 8007d5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007d60:	bd30      	pop	{r4, r5, pc}
 8007d62:	bf00      	nop

08007d64 <__aeabi_ui2d>:
 8007d64:	f090 0f00 	teq	r0, #0
 8007d68:	bf04      	itt	eq
 8007d6a:	2100      	moveq	r1, #0
 8007d6c:	4770      	bxeq	lr
 8007d6e:	b530      	push	{r4, r5, lr}
 8007d70:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007d74:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007d78:	f04f 0500 	mov.w	r5, #0
 8007d7c:	f04f 0100 	mov.w	r1, #0
 8007d80:	e750      	b.n	8007c24 <__adddf3+0x138>
 8007d82:	bf00      	nop

08007d84 <__aeabi_i2d>:
 8007d84:	f090 0f00 	teq	r0, #0
 8007d88:	bf04      	itt	eq
 8007d8a:	2100      	moveq	r1, #0
 8007d8c:	4770      	bxeq	lr
 8007d8e:	b530      	push	{r4, r5, lr}
 8007d90:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007d94:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007d98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007d9c:	bf48      	it	mi
 8007d9e:	4240      	negmi	r0, r0
 8007da0:	f04f 0100 	mov.w	r1, #0
 8007da4:	e73e      	b.n	8007c24 <__adddf3+0x138>
 8007da6:	bf00      	nop

08007da8 <__aeabi_f2d>:
 8007da8:	0042      	lsls	r2, r0, #1
 8007daa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007dae:	ea4f 0131 	mov.w	r1, r1, rrx
 8007db2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007db6:	bf1f      	itttt	ne
 8007db8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007dbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007dc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007dc4:	4770      	bxne	lr
 8007dc6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8007dca:	bf08      	it	eq
 8007dcc:	4770      	bxeq	lr
 8007dce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007dd2:	bf04      	itt	eq
 8007dd4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007dd8:	4770      	bxeq	lr
 8007dda:	b530      	push	{r4, r5, lr}
 8007ddc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007de0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007de4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007de8:	e71c      	b.n	8007c24 <__adddf3+0x138>
 8007dea:	bf00      	nop

08007dec <__aeabi_ul2d>:
 8007dec:	ea50 0201 	orrs.w	r2, r0, r1
 8007df0:	bf08      	it	eq
 8007df2:	4770      	bxeq	lr
 8007df4:	b530      	push	{r4, r5, lr}
 8007df6:	f04f 0500 	mov.w	r5, #0
 8007dfa:	e00a      	b.n	8007e12 <__aeabi_l2d+0x16>

08007dfc <__aeabi_l2d>:
 8007dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8007e00:	bf08      	it	eq
 8007e02:	4770      	bxeq	lr
 8007e04:	b530      	push	{r4, r5, lr}
 8007e06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007e0a:	d502      	bpl.n	8007e12 <__aeabi_l2d+0x16>
 8007e0c:	4240      	negs	r0, r0
 8007e0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007e12:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007e16:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007e1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8007e1e:	f43f aed8 	beq.w	8007bd2 <__adddf3+0xe6>
 8007e22:	f04f 0203 	mov.w	r2, #3
 8007e26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007e2a:	bf18      	it	ne
 8007e2c:	3203      	addne	r2, #3
 8007e2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007e32:	bf18      	it	ne
 8007e34:	3203      	addne	r2, #3
 8007e36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007e3a:	f1c2 0320 	rsb	r3, r2, #32
 8007e3e:	fa00 fc03 	lsl.w	ip, r0, r3
 8007e42:	fa20 f002 	lsr.w	r0, r0, r2
 8007e46:	fa01 fe03 	lsl.w	lr, r1, r3
 8007e4a:	ea40 000e 	orr.w	r0, r0, lr
 8007e4e:	fa21 f102 	lsr.w	r1, r1, r2
 8007e52:	4414      	add	r4, r2
 8007e54:	e6bd      	b.n	8007bd2 <__adddf3+0xe6>
 8007e56:	bf00      	nop

08007e58 <__aeabi_dmul>:
 8007e58:	b570      	push	{r4, r5, r6, lr}
 8007e5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007e5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007e62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007e66:	bf1d      	ittte	ne
 8007e68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007e6c:	ea94 0f0c 	teqne	r4, ip
 8007e70:	ea95 0f0c 	teqne	r5, ip
 8007e74:	f000 f8de 	bleq	8008034 <__aeabi_dmul+0x1dc>
 8007e78:	442c      	add	r4, r5
 8007e7a:	ea81 0603 	eor.w	r6, r1, r3
 8007e7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007e82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8007e86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8007e8a:	bf18      	it	ne
 8007e8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007e90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e98:	d038      	beq.n	8007f0c <__aeabi_dmul+0xb4>
 8007e9a:	fba0 ce02 	umull	ip, lr, r0, r2
 8007e9e:	f04f 0500 	mov.w	r5, #0
 8007ea2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8007ea6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8007eaa:	fbe0 e503 	umlal	lr, r5, r0, r3
 8007eae:	f04f 0600 	mov.w	r6, #0
 8007eb2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8007eb6:	f09c 0f00 	teq	ip, #0
 8007eba:	bf18      	it	ne
 8007ebc:	f04e 0e01 	orrne.w	lr, lr, #1
 8007ec0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007ec4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007ec8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8007ecc:	d204      	bcs.n	8007ed8 <__aeabi_dmul+0x80>
 8007ece:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8007ed2:	416d      	adcs	r5, r5
 8007ed4:	eb46 0606 	adc.w	r6, r6, r6
 8007ed8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8007edc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007ee0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007ee4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007ee8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8007eec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007ef0:	bf88      	it	hi
 8007ef2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007ef6:	d81e      	bhi.n	8007f36 <__aeabi_dmul+0xde>
 8007ef8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8007efc:	bf08      	it	eq
 8007efe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8007f02:	f150 0000 	adcs.w	r0, r0, #0
 8007f06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007f0a:	bd70      	pop	{r4, r5, r6, pc}
 8007f0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8007f10:	ea46 0101 	orr.w	r1, r6, r1
 8007f14:	ea40 0002 	orr.w	r0, r0, r2
 8007f18:	ea81 0103 	eor.w	r1, r1, r3
 8007f1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8007f20:	bfc2      	ittt	gt
 8007f22:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007f26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007f2a:	bd70      	popgt	{r4, r5, r6, pc}
 8007f2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007f30:	f04f 0e00 	mov.w	lr, #0
 8007f34:	3c01      	subs	r4, #1
 8007f36:	f300 80ab 	bgt.w	8008090 <__aeabi_dmul+0x238>
 8007f3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8007f3e:	bfde      	ittt	le
 8007f40:	2000      	movle	r0, #0
 8007f42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8007f46:	bd70      	pople	{r4, r5, r6, pc}
 8007f48:	f1c4 0400 	rsb	r4, r4, #0
 8007f4c:	3c20      	subs	r4, #32
 8007f4e:	da35      	bge.n	8007fbc <__aeabi_dmul+0x164>
 8007f50:	340c      	adds	r4, #12
 8007f52:	dc1b      	bgt.n	8007f8c <__aeabi_dmul+0x134>
 8007f54:	f104 0414 	add.w	r4, r4, #20
 8007f58:	f1c4 0520 	rsb	r5, r4, #32
 8007f5c:	fa00 f305 	lsl.w	r3, r0, r5
 8007f60:	fa20 f004 	lsr.w	r0, r0, r4
 8007f64:	fa01 f205 	lsl.w	r2, r1, r5
 8007f68:	ea40 0002 	orr.w	r0, r0, r2
 8007f6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007f70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007f74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007f78:	fa21 f604 	lsr.w	r6, r1, r4
 8007f7c:	eb42 0106 	adc.w	r1, r2, r6
 8007f80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007f84:	bf08      	it	eq
 8007f86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007f8a:	bd70      	pop	{r4, r5, r6, pc}
 8007f8c:	f1c4 040c 	rsb	r4, r4, #12
 8007f90:	f1c4 0520 	rsb	r5, r4, #32
 8007f94:	fa00 f304 	lsl.w	r3, r0, r4
 8007f98:	fa20 f005 	lsr.w	r0, r0, r5
 8007f9c:	fa01 f204 	lsl.w	r2, r1, r4
 8007fa0:	ea40 0002 	orr.w	r0, r0, r2
 8007fa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007fa8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007fac:	f141 0100 	adc.w	r1, r1, #0
 8007fb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007fb4:	bf08      	it	eq
 8007fb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007fba:	bd70      	pop	{r4, r5, r6, pc}
 8007fbc:	f1c4 0520 	rsb	r5, r4, #32
 8007fc0:	fa00 f205 	lsl.w	r2, r0, r5
 8007fc4:	ea4e 0e02 	orr.w	lr, lr, r2
 8007fc8:	fa20 f304 	lsr.w	r3, r0, r4
 8007fcc:	fa01 f205 	lsl.w	r2, r1, r5
 8007fd0:	ea43 0302 	orr.w	r3, r3, r2
 8007fd4:	fa21 f004 	lsr.w	r0, r1, r4
 8007fd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007fdc:	fa21 f204 	lsr.w	r2, r1, r4
 8007fe0:	ea20 0002 	bic.w	r0, r0, r2
 8007fe4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007fe8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007fec:	bf08      	it	eq
 8007fee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
 8007ff4:	f094 0f00 	teq	r4, #0
 8007ff8:	d10f      	bne.n	800801a <__aeabi_dmul+0x1c2>
 8007ffa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8007ffe:	0040      	lsls	r0, r0, #1
 8008000:	eb41 0101 	adc.w	r1, r1, r1
 8008004:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008008:	bf08      	it	eq
 800800a:	3c01      	subeq	r4, #1
 800800c:	d0f7      	beq.n	8007ffe <__aeabi_dmul+0x1a6>
 800800e:	ea41 0106 	orr.w	r1, r1, r6
 8008012:	f095 0f00 	teq	r5, #0
 8008016:	bf18      	it	ne
 8008018:	4770      	bxne	lr
 800801a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800801e:	0052      	lsls	r2, r2, #1
 8008020:	eb43 0303 	adc.w	r3, r3, r3
 8008024:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008028:	bf08      	it	eq
 800802a:	3d01      	subeq	r5, #1
 800802c:	d0f7      	beq.n	800801e <__aeabi_dmul+0x1c6>
 800802e:	ea43 0306 	orr.w	r3, r3, r6
 8008032:	4770      	bx	lr
 8008034:	ea94 0f0c 	teq	r4, ip
 8008038:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800803c:	bf18      	it	ne
 800803e:	ea95 0f0c 	teqne	r5, ip
 8008042:	d00c      	beq.n	800805e <__aeabi_dmul+0x206>
 8008044:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008048:	bf18      	it	ne
 800804a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800804e:	d1d1      	bne.n	8007ff4 <__aeabi_dmul+0x19c>
 8008050:	ea81 0103 	eor.w	r1, r1, r3
 8008054:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008058:	f04f 0000 	mov.w	r0, #0
 800805c:	bd70      	pop	{r4, r5, r6, pc}
 800805e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008062:	bf06      	itte	eq
 8008064:	4610      	moveq	r0, r2
 8008066:	4619      	moveq	r1, r3
 8008068:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800806c:	d019      	beq.n	80080a2 <__aeabi_dmul+0x24a>
 800806e:	ea94 0f0c 	teq	r4, ip
 8008072:	d102      	bne.n	800807a <__aeabi_dmul+0x222>
 8008074:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008078:	d113      	bne.n	80080a2 <__aeabi_dmul+0x24a>
 800807a:	ea95 0f0c 	teq	r5, ip
 800807e:	d105      	bne.n	800808c <__aeabi_dmul+0x234>
 8008080:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008084:	bf1c      	itt	ne
 8008086:	4610      	movne	r0, r2
 8008088:	4619      	movne	r1, r3
 800808a:	d10a      	bne.n	80080a2 <__aeabi_dmul+0x24a>
 800808c:	ea81 0103 	eor.w	r1, r1, r3
 8008090:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008094:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008098:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800809c:	f04f 0000 	mov.w	r0, #0
 80080a0:	bd70      	pop	{r4, r5, r6, pc}
 80080a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80080a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80080aa:	bd70      	pop	{r4, r5, r6, pc}

080080ac <__aeabi_ddiv>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80080b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80080b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80080ba:	bf1d      	ittte	ne
 80080bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80080c0:	ea94 0f0c 	teqne	r4, ip
 80080c4:	ea95 0f0c 	teqne	r5, ip
 80080c8:	f000 f8a7 	bleq	800821a <__aeabi_ddiv+0x16e>
 80080cc:	eba4 0405 	sub.w	r4, r4, r5
 80080d0:	ea81 0e03 	eor.w	lr, r1, r3
 80080d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80080d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80080dc:	f000 8088 	beq.w	80081f0 <__aeabi_ddiv+0x144>
 80080e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80080e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80080e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80080ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80080f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80080f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80080f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80080fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008100:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008104:	429d      	cmp	r5, r3
 8008106:	bf08      	it	eq
 8008108:	4296      	cmpeq	r6, r2
 800810a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800810e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008112:	d202      	bcs.n	800811a <__aeabi_ddiv+0x6e>
 8008114:	085b      	lsrs	r3, r3, #1
 8008116:	ea4f 0232 	mov.w	r2, r2, rrx
 800811a:	1ab6      	subs	r6, r6, r2
 800811c:	eb65 0503 	sbc.w	r5, r5, r3
 8008120:	085b      	lsrs	r3, r3, #1
 8008122:	ea4f 0232 	mov.w	r2, r2, rrx
 8008126:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800812a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800812e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008132:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008136:	bf22      	ittt	cs
 8008138:	1ab6      	subcs	r6, r6, r2
 800813a:	4675      	movcs	r5, lr
 800813c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008140:	085b      	lsrs	r3, r3, #1
 8008142:	ea4f 0232 	mov.w	r2, r2, rrx
 8008146:	ebb6 0e02 	subs.w	lr, r6, r2
 800814a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800814e:	bf22      	ittt	cs
 8008150:	1ab6      	subcs	r6, r6, r2
 8008152:	4675      	movcs	r5, lr
 8008154:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008158:	085b      	lsrs	r3, r3, #1
 800815a:	ea4f 0232 	mov.w	r2, r2, rrx
 800815e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008162:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008166:	bf22      	ittt	cs
 8008168:	1ab6      	subcs	r6, r6, r2
 800816a:	4675      	movcs	r5, lr
 800816c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008170:	085b      	lsrs	r3, r3, #1
 8008172:	ea4f 0232 	mov.w	r2, r2, rrx
 8008176:	ebb6 0e02 	subs.w	lr, r6, r2
 800817a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800817e:	bf22      	ittt	cs
 8008180:	1ab6      	subcs	r6, r6, r2
 8008182:	4675      	movcs	r5, lr
 8008184:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008188:	ea55 0e06 	orrs.w	lr, r5, r6
 800818c:	d018      	beq.n	80081c0 <__aeabi_ddiv+0x114>
 800818e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008192:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008196:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800819a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800819e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80081a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80081a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80081aa:	d1c0      	bne.n	800812e <__aeabi_ddiv+0x82>
 80081ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80081b0:	d10b      	bne.n	80081ca <__aeabi_ddiv+0x11e>
 80081b2:	ea41 0100 	orr.w	r1, r1, r0
 80081b6:	f04f 0000 	mov.w	r0, #0
 80081ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80081be:	e7b6      	b.n	800812e <__aeabi_ddiv+0x82>
 80081c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80081c4:	bf04      	itt	eq
 80081c6:	4301      	orreq	r1, r0
 80081c8:	2000      	moveq	r0, #0
 80081ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80081ce:	bf88      	it	hi
 80081d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80081d4:	f63f aeaf 	bhi.w	8007f36 <__aeabi_dmul+0xde>
 80081d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80081dc:	bf04      	itt	eq
 80081de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80081e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80081e6:	f150 0000 	adcs.w	r0, r0, #0
 80081ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80081ee:	bd70      	pop	{r4, r5, r6, pc}
 80081f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80081f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80081f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80081fc:	bfc2      	ittt	gt
 80081fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008202:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008206:	bd70      	popgt	{r4, r5, r6, pc}
 8008208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800820c:	f04f 0e00 	mov.w	lr, #0
 8008210:	3c01      	subs	r4, #1
 8008212:	e690      	b.n	8007f36 <__aeabi_dmul+0xde>
 8008214:	ea45 0e06 	orr.w	lr, r5, r6
 8008218:	e68d      	b.n	8007f36 <__aeabi_dmul+0xde>
 800821a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800821e:	ea94 0f0c 	teq	r4, ip
 8008222:	bf08      	it	eq
 8008224:	ea95 0f0c 	teqeq	r5, ip
 8008228:	f43f af3b 	beq.w	80080a2 <__aeabi_dmul+0x24a>
 800822c:	ea94 0f0c 	teq	r4, ip
 8008230:	d10a      	bne.n	8008248 <__aeabi_ddiv+0x19c>
 8008232:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008236:	f47f af34 	bne.w	80080a2 <__aeabi_dmul+0x24a>
 800823a:	ea95 0f0c 	teq	r5, ip
 800823e:	f47f af25 	bne.w	800808c <__aeabi_dmul+0x234>
 8008242:	4610      	mov	r0, r2
 8008244:	4619      	mov	r1, r3
 8008246:	e72c      	b.n	80080a2 <__aeabi_dmul+0x24a>
 8008248:	ea95 0f0c 	teq	r5, ip
 800824c:	d106      	bne.n	800825c <__aeabi_ddiv+0x1b0>
 800824e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008252:	f43f aefd 	beq.w	8008050 <__aeabi_dmul+0x1f8>
 8008256:	4610      	mov	r0, r2
 8008258:	4619      	mov	r1, r3
 800825a:	e722      	b.n	80080a2 <__aeabi_dmul+0x24a>
 800825c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008260:	bf18      	it	ne
 8008262:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008266:	f47f aec5 	bne.w	8007ff4 <__aeabi_dmul+0x19c>
 800826a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800826e:	f47f af0d 	bne.w	800808c <__aeabi_dmul+0x234>
 8008272:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008276:	f47f aeeb 	bne.w	8008050 <__aeabi_dmul+0x1f8>
 800827a:	e712      	b.n	80080a2 <__aeabi_dmul+0x24a>

0800827c <__gedf2>:
 800827c:	f04f 3cff 	mov.w	ip, #4294967295
 8008280:	e006      	b.n	8008290 <__cmpdf2+0x4>
 8008282:	bf00      	nop

08008284 <__ledf2>:
 8008284:	f04f 0c01 	mov.w	ip, #1
 8008288:	e002      	b.n	8008290 <__cmpdf2+0x4>
 800828a:	bf00      	nop

0800828c <__cmpdf2>:
 800828c:	f04f 0c01 	mov.w	ip, #1
 8008290:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008294:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008298:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800829c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80082a0:	bf18      	it	ne
 80082a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80082a6:	d01b      	beq.n	80082e0 <__cmpdf2+0x54>
 80082a8:	b001      	add	sp, #4
 80082aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80082ae:	bf0c      	ite	eq
 80082b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80082b4:	ea91 0f03 	teqne	r1, r3
 80082b8:	bf02      	ittt	eq
 80082ba:	ea90 0f02 	teqeq	r0, r2
 80082be:	2000      	moveq	r0, #0
 80082c0:	4770      	bxeq	lr
 80082c2:	f110 0f00 	cmn.w	r0, #0
 80082c6:	ea91 0f03 	teq	r1, r3
 80082ca:	bf58      	it	pl
 80082cc:	4299      	cmppl	r1, r3
 80082ce:	bf08      	it	eq
 80082d0:	4290      	cmpeq	r0, r2
 80082d2:	bf2c      	ite	cs
 80082d4:	17d8      	asrcs	r0, r3, #31
 80082d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80082da:	f040 0001 	orr.w	r0, r0, #1
 80082de:	4770      	bx	lr
 80082e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80082e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80082e8:	d102      	bne.n	80082f0 <__cmpdf2+0x64>
 80082ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80082ee:	d107      	bne.n	8008300 <__cmpdf2+0x74>
 80082f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80082f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80082f8:	d1d6      	bne.n	80082a8 <__cmpdf2+0x1c>
 80082fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80082fe:	d0d3      	beq.n	80082a8 <__cmpdf2+0x1c>
 8008300:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop

08008308 <__aeabi_cdrcmple>:
 8008308:	4684      	mov	ip, r0
 800830a:	4610      	mov	r0, r2
 800830c:	4662      	mov	r2, ip
 800830e:	468c      	mov	ip, r1
 8008310:	4619      	mov	r1, r3
 8008312:	4663      	mov	r3, ip
 8008314:	e000      	b.n	8008318 <__aeabi_cdcmpeq>
 8008316:	bf00      	nop

08008318 <__aeabi_cdcmpeq>:
 8008318:	b501      	push	{r0, lr}
 800831a:	f7ff ffb7 	bl	800828c <__cmpdf2>
 800831e:	2800      	cmp	r0, #0
 8008320:	bf48      	it	mi
 8008322:	f110 0f00 	cmnmi.w	r0, #0
 8008326:	bd01      	pop	{r0, pc}

08008328 <__aeabi_dcmpeq>:
 8008328:	f84d ed08 	str.w	lr, [sp, #-8]!
 800832c:	f7ff fff4 	bl	8008318 <__aeabi_cdcmpeq>
 8008330:	bf0c      	ite	eq
 8008332:	2001      	moveq	r0, #1
 8008334:	2000      	movne	r0, #0
 8008336:	f85d fb08 	ldr.w	pc, [sp], #8
 800833a:	bf00      	nop

0800833c <__aeabi_dcmplt>:
 800833c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008340:	f7ff ffea 	bl	8008318 <__aeabi_cdcmpeq>
 8008344:	bf34      	ite	cc
 8008346:	2001      	movcc	r0, #1
 8008348:	2000      	movcs	r0, #0
 800834a:	f85d fb08 	ldr.w	pc, [sp], #8
 800834e:	bf00      	nop

08008350 <__aeabi_dcmple>:
 8008350:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008354:	f7ff ffe0 	bl	8008318 <__aeabi_cdcmpeq>
 8008358:	bf94      	ite	ls
 800835a:	2001      	movls	r0, #1
 800835c:	2000      	movhi	r0, #0
 800835e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008362:	bf00      	nop

08008364 <__aeabi_dcmpge>:
 8008364:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008368:	f7ff ffce 	bl	8008308 <__aeabi_cdrcmple>
 800836c:	bf94      	ite	ls
 800836e:	2001      	movls	r0, #1
 8008370:	2000      	movhi	r0, #0
 8008372:	f85d fb08 	ldr.w	pc, [sp], #8
 8008376:	bf00      	nop

08008378 <__aeabi_dcmpgt>:
 8008378:	f84d ed08 	str.w	lr, [sp, #-8]!
 800837c:	f7ff ffc4 	bl	8008308 <__aeabi_cdrcmple>
 8008380:	bf34      	ite	cc
 8008382:	2001      	movcc	r0, #1
 8008384:	2000      	movcs	r0, #0
 8008386:	f85d fb08 	ldr.w	pc, [sp], #8
 800838a:	bf00      	nop

0800838c <__aeabi_dcmpun>:
 800838c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008390:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008394:	d102      	bne.n	800839c <__aeabi_dcmpun+0x10>
 8008396:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800839a:	d10a      	bne.n	80083b2 <__aeabi_dcmpun+0x26>
 800839c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80083a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80083a4:	d102      	bne.n	80083ac <__aeabi_dcmpun+0x20>
 80083a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80083aa:	d102      	bne.n	80083b2 <__aeabi_dcmpun+0x26>
 80083ac:	f04f 0000 	mov.w	r0, #0
 80083b0:	4770      	bx	lr
 80083b2:	f04f 0001 	mov.w	r0, #1
 80083b6:	4770      	bx	lr

080083b8 <__aeabi_d2uiz>:
 80083b8:	004a      	lsls	r2, r1, #1
 80083ba:	d211      	bcs.n	80083e0 <__aeabi_d2uiz+0x28>
 80083bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80083c0:	d211      	bcs.n	80083e6 <__aeabi_d2uiz+0x2e>
 80083c2:	d50d      	bpl.n	80083e0 <__aeabi_d2uiz+0x28>
 80083c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80083c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80083cc:	d40e      	bmi.n	80083ec <__aeabi_d2uiz+0x34>
 80083ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80083d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80083da:	fa23 f002 	lsr.w	r0, r3, r2
 80083de:	4770      	bx	lr
 80083e0:	f04f 0000 	mov.w	r0, #0
 80083e4:	4770      	bx	lr
 80083e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80083ea:	d102      	bne.n	80083f2 <__aeabi_d2uiz+0x3a>
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	4770      	bx	lr
 80083f2:	f04f 0000 	mov.w	r0, #0
 80083f6:	4770      	bx	lr

080083f8 <__aeabi_d2f>:
 80083f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80083fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008400:	bf24      	itt	cs
 8008402:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008406:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800840a:	d90d      	bls.n	8008428 <__aeabi_d2f+0x30>
 800840c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008410:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008414:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008418:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800841c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008420:	bf08      	it	eq
 8008422:	f020 0001 	biceq.w	r0, r0, #1
 8008426:	4770      	bx	lr
 8008428:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800842c:	d121      	bne.n	8008472 <__aeabi_d2f+0x7a>
 800842e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008432:	bfbc      	itt	lt
 8008434:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008438:	4770      	bxlt	lr
 800843a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800843e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008442:	f1c2 0218 	rsb	r2, r2, #24
 8008446:	f1c2 0c20 	rsb	ip, r2, #32
 800844a:	fa10 f30c 	lsls.w	r3, r0, ip
 800844e:	fa20 f002 	lsr.w	r0, r0, r2
 8008452:	bf18      	it	ne
 8008454:	f040 0001 	orrne.w	r0, r0, #1
 8008458:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800845c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008460:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008464:	ea40 000c 	orr.w	r0, r0, ip
 8008468:	fa23 f302 	lsr.w	r3, r3, r2
 800846c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008470:	e7cc      	b.n	800840c <__aeabi_d2f+0x14>
 8008472:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008476:	d107      	bne.n	8008488 <__aeabi_d2f+0x90>
 8008478:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800847c:	bf1e      	ittt	ne
 800847e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008482:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008486:	4770      	bxne	lr
 8008488:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800848c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008490:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop

08008498 <__aeabi_uldivmod>:
 8008498:	b953      	cbnz	r3, 80084b0 <__aeabi_uldivmod+0x18>
 800849a:	b94a      	cbnz	r2, 80084b0 <__aeabi_uldivmod+0x18>
 800849c:	2900      	cmp	r1, #0
 800849e:	bf08      	it	eq
 80084a0:	2800      	cmpeq	r0, #0
 80084a2:	bf1c      	itt	ne
 80084a4:	f04f 31ff 	movne.w	r1, #4294967295
 80084a8:	f04f 30ff 	movne.w	r0, #4294967295
 80084ac:	f000 b9a6 	b.w	80087fc <__aeabi_idiv0>
 80084b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80084b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80084b8:	f000 f83c 	bl	8008534 <__udivmoddi4>
 80084bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80084c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084c4:	b004      	add	sp, #16
 80084c6:	4770      	bx	lr

080084c8 <__aeabi_d2lz>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	2200      	movs	r2, #0
 80084cc:	2300      	movs	r3, #0
 80084ce:	4604      	mov	r4, r0
 80084d0:	460d      	mov	r5, r1
 80084d2:	f7ff ff33 	bl	800833c <__aeabi_dcmplt>
 80084d6:	b928      	cbnz	r0, 80084e4 <__aeabi_d2lz+0x1c>
 80084d8:	4620      	mov	r0, r4
 80084da:	4629      	mov	r1, r5
 80084dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084e0:	f000 b80a 	b.w	80084f8 <__aeabi_d2ulz>
 80084e4:	4620      	mov	r0, r4
 80084e6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80084ea:	f000 f805 	bl	80084f8 <__aeabi_d2ulz>
 80084ee:	4240      	negs	r0, r0
 80084f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80084f4:	bd38      	pop	{r3, r4, r5, pc}
 80084f6:	bf00      	nop

080084f8 <__aeabi_d2ulz>:
 80084f8:	b5d0      	push	{r4, r6, r7, lr}
 80084fa:	4b0c      	ldr	r3, [pc, #48]	; (800852c <__aeabi_d2ulz+0x34>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	4606      	mov	r6, r0
 8008500:	460f      	mov	r7, r1
 8008502:	f7ff fca9 	bl	8007e58 <__aeabi_dmul>
 8008506:	f7ff ff57 	bl	80083b8 <__aeabi_d2uiz>
 800850a:	4604      	mov	r4, r0
 800850c:	f7ff fc2a 	bl	8007d64 <__aeabi_ui2d>
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <__aeabi_d2ulz+0x38>)
 8008512:	2200      	movs	r2, #0
 8008514:	f7ff fca0 	bl	8007e58 <__aeabi_dmul>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	4630      	mov	r0, r6
 800851e:	4639      	mov	r1, r7
 8008520:	f7ff fae2 	bl	8007ae8 <__aeabi_dsub>
 8008524:	f7ff ff48 	bl	80083b8 <__aeabi_d2uiz>
 8008528:	4621      	mov	r1, r4
 800852a:	bdd0      	pop	{r4, r6, r7, pc}
 800852c:	3df00000 	.word	0x3df00000
 8008530:	41f00000 	.word	0x41f00000

08008534 <__udivmoddi4>:
 8008534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008538:	9e08      	ldr	r6, [sp, #32]
 800853a:	460d      	mov	r5, r1
 800853c:	4604      	mov	r4, r0
 800853e:	460f      	mov	r7, r1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d14a      	bne.n	80085da <__udivmoddi4+0xa6>
 8008544:	428a      	cmp	r2, r1
 8008546:	4694      	mov	ip, r2
 8008548:	d965      	bls.n	8008616 <__udivmoddi4+0xe2>
 800854a:	fab2 f382 	clz	r3, r2
 800854e:	b143      	cbz	r3, 8008562 <__udivmoddi4+0x2e>
 8008550:	fa02 fc03 	lsl.w	ip, r2, r3
 8008554:	f1c3 0220 	rsb	r2, r3, #32
 8008558:	409f      	lsls	r7, r3
 800855a:	fa20 f202 	lsr.w	r2, r0, r2
 800855e:	4317      	orrs	r7, r2
 8008560:	409c      	lsls	r4, r3
 8008562:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8008566:	fa1f f58c 	uxth.w	r5, ip
 800856a:	fbb7 f1fe 	udiv	r1, r7, lr
 800856e:	0c22      	lsrs	r2, r4, #16
 8008570:	fb0e 7711 	mls	r7, lr, r1, r7
 8008574:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008578:	fb01 f005 	mul.w	r0, r1, r5
 800857c:	4290      	cmp	r0, r2
 800857e:	d90a      	bls.n	8008596 <__udivmoddi4+0x62>
 8008580:	eb1c 0202 	adds.w	r2, ip, r2
 8008584:	f101 37ff 	add.w	r7, r1, #4294967295
 8008588:	f080 811c 	bcs.w	80087c4 <__udivmoddi4+0x290>
 800858c:	4290      	cmp	r0, r2
 800858e:	f240 8119 	bls.w	80087c4 <__udivmoddi4+0x290>
 8008592:	3902      	subs	r1, #2
 8008594:	4462      	add	r2, ip
 8008596:	1a12      	subs	r2, r2, r0
 8008598:	b2a4      	uxth	r4, r4
 800859a:	fbb2 f0fe 	udiv	r0, r2, lr
 800859e:	fb0e 2210 	mls	r2, lr, r0, r2
 80085a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80085a6:	fb00 f505 	mul.w	r5, r0, r5
 80085aa:	42a5      	cmp	r5, r4
 80085ac:	d90a      	bls.n	80085c4 <__udivmoddi4+0x90>
 80085ae:	eb1c 0404 	adds.w	r4, ip, r4
 80085b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80085b6:	f080 8107 	bcs.w	80087c8 <__udivmoddi4+0x294>
 80085ba:	42a5      	cmp	r5, r4
 80085bc:	f240 8104 	bls.w	80087c8 <__udivmoddi4+0x294>
 80085c0:	4464      	add	r4, ip
 80085c2:	3802      	subs	r0, #2
 80085c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80085c8:	1b64      	subs	r4, r4, r5
 80085ca:	2100      	movs	r1, #0
 80085cc:	b11e      	cbz	r6, 80085d6 <__udivmoddi4+0xa2>
 80085ce:	40dc      	lsrs	r4, r3
 80085d0:	2300      	movs	r3, #0
 80085d2:	e9c6 4300 	strd	r4, r3, [r6]
 80085d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085da:	428b      	cmp	r3, r1
 80085dc:	d908      	bls.n	80085f0 <__udivmoddi4+0xbc>
 80085de:	2e00      	cmp	r6, #0
 80085e0:	f000 80ed 	beq.w	80087be <__udivmoddi4+0x28a>
 80085e4:	2100      	movs	r1, #0
 80085e6:	e9c6 0500 	strd	r0, r5, [r6]
 80085ea:	4608      	mov	r0, r1
 80085ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f0:	fab3 f183 	clz	r1, r3
 80085f4:	2900      	cmp	r1, #0
 80085f6:	d149      	bne.n	800868c <__udivmoddi4+0x158>
 80085f8:	42ab      	cmp	r3, r5
 80085fa:	d302      	bcc.n	8008602 <__udivmoddi4+0xce>
 80085fc:	4282      	cmp	r2, r0
 80085fe:	f200 80f8 	bhi.w	80087f2 <__udivmoddi4+0x2be>
 8008602:	1a84      	subs	r4, r0, r2
 8008604:	eb65 0203 	sbc.w	r2, r5, r3
 8008608:	2001      	movs	r0, #1
 800860a:	4617      	mov	r7, r2
 800860c:	2e00      	cmp	r6, #0
 800860e:	d0e2      	beq.n	80085d6 <__udivmoddi4+0xa2>
 8008610:	e9c6 4700 	strd	r4, r7, [r6]
 8008614:	e7df      	b.n	80085d6 <__udivmoddi4+0xa2>
 8008616:	b902      	cbnz	r2, 800861a <__udivmoddi4+0xe6>
 8008618:	deff      	udf	#255	; 0xff
 800861a:	fab2 f382 	clz	r3, r2
 800861e:	2b00      	cmp	r3, #0
 8008620:	f040 8090 	bne.w	8008744 <__udivmoddi4+0x210>
 8008624:	1a8a      	subs	r2, r1, r2
 8008626:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800862a:	fa1f fe8c 	uxth.w	lr, ip
 800862e:	2101      	movs	r1, #1
 8008630:	fbb2 f5f7 	udiv	r5, r2, r7
 8008634:	fb07 2015 	mls	r0, r7, r5, r2
 8008638:	0c22      	lsrs	r2, r4, #16
 800863a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800863e:	fb0e f005 	mul.w	r0, lr, r5
 8008642:	4290      	cmp	r0, r2
 8008644:	d908      	bls.n	8008658 <__udivmoddi4+0x124>
 8008646:	eb1c 0202 	adds.w	r2, ip, r2
 800864a:	f105 38ff 	add.w	r8, r5, #4294967295
 800864e:	d202      	bcs.n	8008656 <__udivmoddi4+0x122>
 8008650:	4290      	cmp	r0, r2
 8008652:	f200 80cb 	bhi.w	80087ec <__udivmoddi4+0x2b8>
 8008656:	4645      	mov	r5, r8
 8008658:	1a12      	subs	r2, r2, r0
 800865a:	b2a4      	uxth	r4, r4
 800865c:	fbb2 f0f7 	udiv	r0, r2, r7
 8008660:	fb07 2210 	mls	r2, r7, r0, r2
 8008664:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008668:	fb0e fe00 	mul.w	lr, lr, r0
 800866c:	45a6      	cmp	lr, r4
 800866e:	d908      	bls.n	8008682 <__udivmoddi4+0x14e>
 8008670:	eb1c 0404 	adds.w	r4, ip, r4
 8008674:	f100 32ff 	add.w	r2, r0, #4294967295
 8008678:	d202      	bcs.n	8008680 <__udivmoddi4+0x14c>
 800867a:	45a6      	cmp	lr, r4
 800867c:	f200 80bb 	bhi.w	80087f6 <__udivmoddi4+0x2c2>
 8008680:	4610      	mov	r0, r2
 8008682:	eba4 040e 	sub.w	r4, r4, lr
 8008686:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800868a:	e79f      	b.n	80085cc <__udivmoddi4+0x98>
 800868c:	f1c1 0720 	rsb	r7, r1, #32
 8008690:	408b      	lsls	r3, r1
 8008692:	fa22 fc07 	lsr.w	ip, r2, r7
 8008696:	ea4c 0c03 	orr.w	ip, ip, r3
 800869a:	fa05 f401 	lsl.w	r4, r5, r1
 800869e:	fa20 f307 	lsr.w	r3, r0, r7
 80086a2:	40fd      	lsrs	r5, r7
 80086a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80086a8:	4323      	orrs	r3, r4
 80086aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80086ae:	fa1f fe8c 	uxth.w	lr, ip
 80086b2:	fb09 5518 	mls	r5, r9, r8, r5
 80086b6:	0c1c      	lsrs	r4, r3, #16
 80086b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80086bc:	fb08 f50e 	mul.w	r5, r8, lr
 80086c0:	42a5      	cmp	r5, r4
 80086c2:	fa02 f201 	lsl.w	r2, r2, r1
 80086c6:	fa00 f001 	lsl.w	r0, r0, r1
 80086ca:	d90b      	bls.n	80086e4 <__udivmoddi4+0x1b0>
 80086cc:	eb1c 0404 	adds.w	r4, ip, r4
 80086d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80086d4:	f080 8088 	bcs.w	80087e8 <__udivmoddi4+0x2b4>
 80086d8:	42a5      	cmp	r5, r4
 80086da:	f240 8085 	bls.w	80087e8 <__udivmoddi4+0x2b4>
 80086de:	f1a8 0802 	sub.w	r8, r8, #2
 80086e2:	4464      	add	r4, ip
 80086e4:	1b64      	subs	r4, r4, r5
 80086e6:	b29d      	uxth	r5, r3
 80086e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80086ec:	fb09 4413 	mls	r4, r9, r3, r4
 80086f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80086f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80086f8:	45a6      	cmp	lr, r4
 80086fa:	d908      	bls.n	800870e <__udivmoddi4+0x1da>
 80086fc:	eb1c 0404 	adds.w	r4, ip, r4
 8008700:	f103 35ff 	add.w	r5, r3, #4294967295
 8008704:	d26c      	bcs.n	80087e0 <__udivmoddi4+0x2ac>
 8008706:	45a6      	cmp	lr, r4
 8008708:	d96a      	bls.n	80087e0 <__udivmoddi4+0x2ac>
 800870a:	3b02      	subs	r3, #2
 800870c:	4464      	add	r4, ip
 800870e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008712:	fba3 9502 	umull	r9, r5, r3, r2
 8008716:	eba4 040e 	sub.w	r4, r4, lr
 800871a:	42ac      	cmp	r4, r5
 800871c:	46c8      	mov	r8, r9
 800871e:	46ae      	mov	lr, r5
 8008720:	d356      	bcc.n	80087d0 <__udivmoddi4+0x29c>
 8008722:	d053      	beq.n	80087cc <__udivmoddi4+0x298>
 8008724:	b156      	cbz	r6, 800873c <__udivmoddi4+0x208>
 8008726:	ebb0 0208 	subs.w	r2, r0, r8
 800872a:	eb64 040e 	sbc.w	r4, r4, lr
 800872e:	fa04 f707 	lsl.w	r7, r4, r7
 8008732:	40ca      	lsrs	r2, r1
 8008734:	40cc      	lsrs	r4, r1
 8008736:	4317      	orrs	r7, r2
 8008738:	e9c6 7400 	strd	r7, r4, [r6]
 800873c:	4618      	mov	r0, r3
 800873e:	2100      	movs	r1, #0
 8008740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008744:	f1c3 0120 	rsb	r1, r3, #32
 8008748:	fa02 fc03 	lsl.w	ip, r2, r3
 800874c:	fa20 f201 	lsr.w	r2, r0, r1
 8008750:	fa25 f101 	lsr.w	r1, r5, r1
 8008754:	409d      	lsls	r5, r3
 8008756:	432a      	orrs	r2, r5
 8008758:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800875c:	fa1f fe8c 	uxth.w	lr, ip
 8008760:	fbb1 f0f7 	udiv	r0, r1, r7
 8008764:	fb07 1510 	mls	r5, r7, r0, r1
 8008768:	0c11      	lsrs	r1, r2, #16
 800876a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800876e:	fb00 f50e 	mul.w	r5, r0, lr
 8008772:	428d      	cmp	r5, r1
 8008774:	fa04 f403 	lsl.w	r4, r4, r3
 8008778:	d908      	bls.n	800878c <__udivmoddi4+0x258>
 800877a:	eb1c 0101 	adds.w	r1, ip, r1
 800877e:	f100 38ff 	add.w	r8, r0, #4294967295
 8008782:	d22f      	bcs.n	80087e4 <__udivmoddi4+0x2b0>
 8008784:	428d      	cmp	r5, r1
 8008786:	d92d      	bls.n	80087e4 <__udivmoddi4+0x2b0>
 8008788:	3802      	subs	r0, #2
 800878a:	4461      	add	r1, ip
 800878c:	1b49      	subs	r1, r1, r5
 800878e:	b292      	uxth	r2, r2
 8008790:	fbb1 f5f7 	udiv	r5, r1, r7
 8008794:	fb07 1115 	mls	r1, r7, r5, r1
 8008798:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800879c:	fb05 f10e 	mul.w	r1, r5, lr
 80087a0:	4291      	cmp	r1, r2
 80087a2:	d908      	bls.n	80087b6 <__udivmoddi4+0x282>
 80087a4:	eb1c 0202 	adds.w	r2, ip, r2
 80087a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80087ac:	d216      	bcs.n	80087dc <__udivmoddi4+0x2a8>
 80087ae:	4291      	cmp	r1, r2
 80087b0:	d914      	bls.n	80087dc <__udivmoddi4+0x2a8>
 80087b2:	3d02      	subs	r5, #2
 80087b4:	4462      	add	r2, ip
 80087b6:	1a52      	subs	r2, r2, r1
 80087b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80087bc:	e738      	b.n	8008630 <__udivmoddi4+0xfc>
 80087be:	4631      	mov	r1, r6
 80087c0:	4630      	mov	r0, r6
 80087c2:	e708      	b.n	80085d6 <__udivmoddi4+0xa2>
 80087c4:	4639      	mov	r1, r7
 80087c6:	e6e6      	b.n	8008596 <__udivmoddi4+0x62>
 80087c8:	4610      	mov	r0, r2
 80087ca:	e6fb      	b.n	80085c4 <__udivmoddi4+0x90>
 80087cc:	4548      	cmp	r0, r9
 80087ce:	d2a9      	bcs.n	8008724 <__udivmoddi4+0x1f0>
 80087d0:	ebb9 0802 	subs.w	r8, r9, r2
 80087d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80087d8:	3b01      	subs	r3, #1
 80087da:	e7a3      	b.n	8008724 <__udivmoddi4+0x1f0>
 80087dc:	4645      	mov	r5, r8
 80087de:	e7ea      	b.n	80087b6 <__udivmoddi4+0x282>
 80087e0:	462b      	mov	r3, r5
 80087e2:	e794      	b.n	800870e <__udivmoddi4+0x1da>
 80087e4:	4640      	mov	r0, r8
 80087e6:	e7d1      	b.n	800878c <__udivmoddi4+0x258>
 80087e8:	46d0      	mov	r8, sl
 80087ea:	e77b      	b.n	80086e4 <__udivmoddi4+0x1b0>
 80087ec:	3d02      	subs	r5, #2
 80087ee:	4462      	add	r2, ip
 80087f0:	e732      	b.n	8008658 <__udivmoddi4+0x124>
 80087f2:	4608      	mov	r0, r1
 80087f4:	e70a      	b.n	800860c <__udivmoddi4+0xd8>
 80087f6:	4464      	add	r4, ip
 80087f8:	3802      	subs	r0, #2
 80087fa:	e742      	b.n	8008682 <__udivmoddi4+0x14e>

080087fc <__aeabi_idiv0>:
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop

08008800 <apInit>:
static uint32_t g_LEDOnTime = 1000;
static uint32_t g_LEDOffTime = 200;
static uint32_t nextmill = 0;
*/
void apInit(void)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 115200);
 8008804:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8008808:	2000      	movs	r0, #0
 800880a:	f001 ff1f 	bl	800a64c <uartOpen>
  //cliOpen(_DEF_UART1, 115200);
}
 800880e:	bf00      	nop
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <apMain>:

void apMain(void)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b092      	sub	sp, #72	; 0x48
 8008818:	af00      	add	r7, sp, #0
  /* Reset Test */
  uartPrintf(_DEF_UART1, "Reset Count : %d\n", resetGetCount());
 800881a:	f001 fd39 	bl	800a290 <resetGetCount>
 800881e:	4603      	mov	r3, r0
 8008820:	461a      	mov	r2, r3
 8008822:	4948      	ldr	r1, [pc, #288]	; (8008944 <apMain+0x130>)
 8008824:	2000      	movs	r0, #0
 8008826:	f002 f805 	bl	800a834 <uartPrintf>
  uint32_t pre_time1 = millis();
 800882a:	f000 f8fc 	bl	8008a26 <millis>
 800882e:	6478      	str	r0, [r7, #68]	; 0x44
  uint32_t pre_time2 = millis();
 8008830:	f000 f8f9 	bl	8008a26 <millis>
 8008834:	63b8      	str	r0, [r7, #56]	; 0x38
  while(1)
  {
    /* LED Non blocking toggle*/
    /* Using Reg to toggle */
    if(millis()-pre_time1 >= 1000)
 8008836:	f000 f8f6 	bl	8008a26 <millis>
 800883a:	4602      	mov	r2, r0
 800883c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008844:	d307      	bcc.n	8008856 <apMain+0x42>
    {
      pre_time1 = millis();
 8008846:	f000 f8ee 	bl	8008a26 <millis>
 800884a:	6478      	str	r0, [r7, #68]	; 0x44
      //ledToggle(_DEF_LED1);
      gpio_out_toggle(GPIOA, GPIO_PIN_5);
 800884c:	2120      	movs	r1, #32
 800884e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008852:	f001 fbf7 	bl	800a044 <gpio_out_toggle>
      uartPrintf(_DEF_UART1, "Rx : 0x%X, %c\n", rx_data, rx_data);
    }
    */

    /* FLASH Test*/
    if(uartAvailable(_DEF_UART1) > 0)
 8008856:	2000      	movs	r0, #0
 8008858:	f001 ff8c 	bl	800a774 <uartAvailable>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d0e9      	beq.n	8008836 <apMain+0x22>
    {
      int8_t rx_data;

      rx_data = uartRead(_DEF_UART1);
 8008862:	2000      	movs	r0, #0
 8008864:	f001 ffa4 	bl	800a7b0 <uartRead>
 8008868:	4603      	mov	r3, r0
 800886a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      // read
      if(rx_data == '1')
 800886e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008872:	2b31      	cmp	r3, #49	; 0x31
 8008874:	d121      	bne.n	80088ba <apMain+0xa6>
      {
        uint32_t buf[12];
        uartPrintf(_DEF_UART1, "Read...\n");
 8008876:	4934      	ldr	r1, [pc, #208]	; (8008948 <apMain+0x134>)
 8008878:	2000      	movs	r0, #0
 800887a:	f001 ffdb 	bl	800a834 <uartPrintf>
        flashRead(0x08000000 + (1024*60), &buf[0], 12);
 800887e:	1d3b      	adds	r3, r7, #4
 8008880:	220c      	movs	r2, #12
 8008882:	4619      	mov	r1, r3
 8008884:	4831      	ldr	r0, [pc, #196]	; (800894c <apMain+0x138>)
 8008886:	f001 fac5 	bl	8009e14 <flashRead>
        for(int i=0; i<12; i++)
 800888a:	2300      	movs	r3, #0
 800888c:	643b      	str	r3, [r7, #64]	; 0x40
 800888e:	e011      	b.n	80088b4 <apMain+0xa0>
        {
          uartPrintf(_DEF_UART1, "0x%X : 0x%X\n", 0x08000000 + (1024*60) + i, buf[i]);
 8008890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008892:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8008896:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800889a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	3348      	adds	r3, #72	; 0x48
 80088a0:	443b      	add	r3, r7
 80088a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80088a6:	492a      	ldr	r1, [pc, #168]	; (8008950 <apMain+0x13c>)
 80088a8:	2000      	movs	r0, #0
 80088aa:	f001 ffc3 	bl	800a834 <uartPrintf>
        for(int i=0; i<12; i++)
 80088ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088b0:	3301      	adds	r3, #1
 80088b2:	643b      	str	r3, [r7, #64]	; 0x40
 80088b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088b6:	2b0b      	cmp	r3, #11
 80088b8:	ddea      	ble.n	8008890 <apMain+0x7c>
        }
      }
      //erase - flash 특성상 지우면 0xffff , erase 특정 구간에서 erase fail 이유 ?
      if(rx_data == '2')
 80088ba:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80088be:	2b32      	cmp	r3, #50	; 0x32
 80088c0:	d114      	bne.n	80088ec <apMain+0xd8>
      {
        uartPrintf(_DEF_UART1,"Erase...\n");
 80088c2:	4924      	ldr	r1, [pc, #144]	; (8008954 <apMain+0x140>)
 80088c4:	2000      	movs	r0, #0
 80088c6:	f001 ffb5 	bl	800a834 <uartPrintf>
        //지우고자하는 시작 주소 , length
        //if(flashErase(0x8000000 + (1024 * 60), 12) == true)
        //if(flashErase(0x08000000, 12) == true)
        if(flashErase(0x8000000, 32) == true)
 80088ca:	2120      	movs	r1, #32
 80088cc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80088d0:	f001 fa12 	bl	8009cf8 <flashErase>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d004      	beq.n	80088e4 <apMain+0xd0>
        {
          uartPrintf(_DEF_UART1,"Erase OK\n");
 80088da:	491f      	ldr	r1, [pc, #124]	; (8008958 <apMain+0x144>)
 80088dc:	2000      	movs	r0, #0
 80088de:	f001 ffa9 	bl	800a834 <uartPrintf>
 80088e2:	e003      	b.n	80088ec <apMain+0xd8>
        }
        else
        {
          uartPrintf(_DEF_UART1,"Erase Fail\n");
 80088e4:	491d      	ldr	r1, [pc, #116]	; (800895c <apMain+0x148>)
 80088e6:	2000      	movs	r0, #0
 80088e8:	f001 ffa4 	bl	800a834 <uartPrintf>
        }
      }
      // write
      if(rx_data == '3')
 80088ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80088f0:	2b33      	cmp	r3, #51	; 0x33
 80088f2:	d1a0      	bne.n	8008836 <apMain+0x22>
      {
        uint8_t buf[32];


        for(int i =0; i < 32; i++)
 80088f4:	2300      	movs	r3, #0
 80088f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088f8:	e009      	b.n	800890e <apMain+0xfa>
        {
          buf[i] = i;
 80088fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fc:	b2d9      	uxtb	r1, r3
 80088fe:	1d3a      	adds	r2, r7, #4
 8008900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008902:	4413      	add	r3, r2
 8008904:	460a      	mov	r2, r1
 8008906:	701a      	strb	r2, [r3, #0]
        for(int i =0; i < 32; i++)
 8008908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890a:	3301      	adds	r3, #1
 800890c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800890e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008910:	2b1f      	cmp	r3, #31
 8008912:	ddf2      	ble.n	80088fa <apMain+0xe6>
        }

        uartPrintf(_DEF_UART1,"Write...\n");
 8008914:	4912      	ldr	r1, [pc, #72]	; (8008960 <apMain+0x14c>)
 8008916:	2000      	movs	r0, #0
 8008918:	f001 ff8c 	bl	800a834 <uartPrintf>

        if(flashWrite(0x8000000 + (60*1024), buf, 32) == true)
 800891c:	1d3b      	adds	r3, r7, #4
 800891e:	2220      	movs	r2, #32
 8008920:	4619      	mov	r1, r3
 8008922:	480a      	ldr	r0, [pc, #40]	; (800894c <apMain+0x138>)
 8008924:	f001 fa38 	bl	8009d98 <flashWrite>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d004      	beq.n	8008938 <apMain+0x124>
        {
          uartPrintf(_DEF_UART1,"Write OK\n");
 800892e:	490d      	ldr	r1, [pc, #52]	; (8008964 <apMain+0x150>)
 8008930:	2000      	movs	r0, #0
 8008932:	f001 ff7f 	bl	800a834 <uartPrintf>
 8008936:	e77e      	b.n	8008836 <apMain+0x22>
        }
        else
        {
          uartPrintf(_DEF_UART1,"Write Fail\n");
 8008938:	490b      	ldr	r1, [pc, #44]	; (8008968 <apMain+0x154>)
 800893a:	2000      	movs	r0, #0
 800893c:	f001 ff7a 	bl	800a834 <uartPrintf>
    if(millis()-pre_time1 >= 1000)
 8008940:	e779      	b.n	8008836 <apMain+0x22>
 8008942:	bf00      	nop
 8008944:	080189e8 	.word	0x080189e8
 8008948:	080189fc 	.word	0x080189fc
 800894c:	0800f000 	.word	0x0800f000
 8008950:	08018a08 	.word	0x08018a08
 8008954:	08018a18 	.word	0x08018a18
 8008958:	08018a24 	.word	0x08018a24
 800895c:	08018a30 	.word	0x08018a30
 8008960:	08018a3c 	.word	0x08018a3c
 8008964:	08018a48 	.word	0x08018a48
 8008968:	08018a54 	.word	0x08018a54

0800896c <bspInit>:
#include "bsp.h"

void SystemClock_Config(void);

bool bspInit(void)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b088      	sub	sp, #32
 8008970:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008972:	4b26      	ldr	r3, [pc, #152]	; (8008a0c <bspInit+0xa0>)
 8008974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008976:	4a25      	ldr	r2, [pc, #148]	; (8008a0c <bspInit+0xa0>)
 8008978:	f043 0301 	orr.w	r3, r3, #1
 800897c:	6613      	str	r3, [r2, #96]	; 0x60
 800897e:	4b23      	ldr	r3, [pc, #140]	; (8008a0c <bspInit+0xa0>)
 8008980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	60bb      	str	r3, [r7, #8]
 8008988:	68bb      	ldr	r3, [r7, #8]


  HAL_Init();
 800898a:	f002 fa3b 	bl	800ae04 <HAL_Init>
  SystemClock_Config();
 800898e:	f000 f851 	bl	8008a34 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008992:	4b1e      	ldr	r3, [pc, #120]	; (8008a0c <bspInit+0xa0>)
 8008994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008996:	4a1d      	ldr	r2, [pc, #116]	; (8008a0c <bspInit+0xa0>)
 8008998:	f043 0320 	orr.w	r3, r3, #32
 800899c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800899e:	4b1b      	ldr	r3, [pc, #108]	; (8008a0c <bspInit+0xa0>)
 80089a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089a2:	f003 0320 	and.w	r3, r3, #32
 80089a6:	607b      	str	r3, [r7, #4]
 80089a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80089aa:	4b18      	ldr	r3, [pc, #96]	; (8008a0c <bspInit+0xa0>)
 80089ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ae:	4a17      	ldr	r2, [pc, #92]	; (8008a0c <bspInit+0xa0>)
 80089b0:	f043 0301 	orr.w	r3, r3, #1
 80089b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089b6:	4b15      	ldr	r3, [pc, #84]	; (8008a0c <bspInit+0xa0>)
 80089b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	603b      	str	r3, [r7, #0]
 80089c0:	683b      	ldr	r3, [r7, #0]

  // USB - Reset 상태로, reset 버튼 눌렀을때 연결 해제후 연결 되도록 하기위한 설정
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 80089c2:	f107 030c 	add.w	r3, r7, #12
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]
 80089ca:	605a      	str	r2, [r3, #4]
 80089cc:	609a      	str	r2, [r3, #8]
 80089ce:	60da      	str	r2, [r3, #12]
 80089d0:	611a      	str	r2, [r3, #16]
  // PA12(USB_DP) 출력 설정
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 80089d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80089d8:	2311      	movs	r3, #17
 80089da:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 80089e0:	2300      	movs	r3, #0
 80089e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80089e4:	f107 030c 	add.w	r3, r7, #12
 80089e8:	4619      	mov	r1, r3
 80089ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80089ee:	f002 ff25 	bl	800b83c <HAL_GPIO_Init>

  //회로에 PULL UP 이 걸려있다면 - 내리고
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80089f2:	2200      	movs	r2, #0
 80089f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80089f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80089fc:	f003 f8b8 	bl	800bb70 <HAL_GPIO_WritePin>



  return true;
 8008a00:	2301      	movs	r3, #1
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3720      	adds	r7, #32
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	40021000 	.word	0x40021000

08008a10 <delay>:

void delay(uint32_t time_ms)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  HAL_Delay(time_ms);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f002 fa63 	bl	800aee4 <HAL_Delay>
}
 8008a1e:	bf00      	nop
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <millis>:

uint32_t millis(void)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008a2a:	f002 fa4f 	bl	800aecc <HAL_GetTick>
 8008a2e:	4603      	mov	r3, r0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b094      	sub	sp, #80	; 0x50
 8008a38:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a3a:	4b2a      	ldr	r3, [pc, #168]	; (8008ae4 <SystemClock_Config+0xb0>)
 8008a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a3e:	4a29      	ldr	r2, [pc, #164]	; (8008ae4 <SystemClock_Config+0xb0>)
 8008a40:	f043 0304 	orr.w	r3, r3, #4
 8008a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a46:	4b27      	ldr	r3, [pc, #156]	; (8008ae4 <SystemClock_Config+0xb0>)
 8008a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a4a:	f003 0304 	and.w	r3, r3, #4
 8008a4e:	603b      	str	r3, [r7, #0]
 8008a50:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008a52:	f107 0318 	add.w	r3, r7, #24
 8008a56:	2238      	movs	r2, #56	; 0x38
 8008a58:	2100      	movs	r1, #0
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f00d fefc 	bl	8016858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008a60:	1d3b      	adds	r3, r7, #4
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	605a      	str	r2, [r3, #4]
 8008a68:	609a      	str	r2, [r3, #8]
 8008a6a:	60da      	str	r2, [r3, #12]
 8008a6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008a72:	f004 fde3 	bl	800d63c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8008a76:	2309      	movs	r3, #9
 8008a78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008a7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008a80:	2301      	movs	r3, #1
 8008a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008a84:	2302      	movs	r3, #2
 8008a86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8008a90:	2308      	movs	r3, #8
 8008a92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008a94:	2302      	movs	r3, #2
 8008a96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008a98:	2302      	movs	r3, #2
 8008a9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008aa0:	f107 0318 	add.w	r3, r7, #24
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f004 feff 	bl	800d8a8 <HAL_RCC_OscConfig>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8008ab0:	f000 f81a 	bl	8008ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008ab4:	230f      	movs	r3, #15
 8008ab6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008abc:	2300      	movs	r3, #0
 8008abe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008ac8:	1d3b      	adds	r3, r7, #4
 8008aca:	2101      	movs	r1, #1
 8008acc:	4618      	mov	r0, r3
 8008ace:	f005 f9fd 	bl	800decc <HAL_RCC_ClockConfig>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d001      	beq.n	8008adc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8008ad8:	f000 f806 	bl	8008ae8 <Error_Handler>
  }
}
 8008adc:	bf00      	nop
 8008ade:	3750      	adds	r7, #80	; 0x50
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	40021000 	.word	0x40021000

08008ae8 <Error_Handler>:


void Error_Handler(void)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	af00      	add	r7, sp, #0

}
 8008aec:	bf00      	nop
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
	...

08008af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008afe:	4b0f      	ldr	r3, [pc, #60]	; (8008b3c <HAL_MspInit+0x44>)
 8008b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b02:	4a0e      	ldr	r2, [pc, #56]	; (8008b3c <HAL_MspInit+0x44>)
 8008b04:	f043 0301 	orr.w	r3, r3, #1
 8008b08:	6613      	str	r3, [r2, #96]	; 0x60
 8008b0a:	4b0c      	ldr	r3, [pc, #48]	; (8008b3c <HAL_MspInit+0x44>)
 8008b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	607b      	str	r3, [r7, #4]
 8008b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008b16:	4b09      	ldr	r3, [pc, #36]	; (8008b3c <HAL_MspInit+0x44>)
 8008b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1a:	4a08      	ldr	r2, [pc, #32]	; (8008b3c <HAL_MspInit+0x44>)
 8008b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b20:	6593      	str	r3, [r2, #88]	; 0x58
 8008b22:	4b06      	ldr	r3, [pc, #24]	; (8008b3c <HAL_MspInit+0x44>)
 8008b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b2a:	603b      	str	r3, [r7, #0]
 8008b2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008b2e:	f004 fe29 	bl	800d784 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008b32:	bf00      	nop
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	40021000 	.word	0x40021000

08008b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b40:	b480      	push	{r7}
 8008b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008b44:	e7fe      	b.n	8008b44 <NMI_Handler+0x4>

08008b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b46:	b480      	push	{r7}
 8008b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b4a:	e7fe      	b.n	8008b4a <HardFault_Handler+0x4>

08008b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b50:	e7fe      	b.n	8008b50 <MemManage_Handler+0x4>

08008b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b52:	b480      	push	{r7}
 8008b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b56:	e7fe      	b.n	8008b56 <BusFault_Handler+0x4>

08008b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008b5c:	e7fe      	b.n	8008b5c <UsageFault_Handler+0x4>

08008b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008b62:	bf00      	nop
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b70:	bf00      	nop
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b7e:	bf00      	nop
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b8c:	f002 f98c 	bl	800aea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b90:	bf00      	nop
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008b98:	4802      	ldr	r0, [pc, #8]	; (8008ba4 <USB_LP_IRQHandler+0x10>)
 8008b9a:	f003 f90b 	bl	800bdb4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8008b9e:	bf00      	nop
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20003078 	.word	0x20003078

08008ba8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008bac:	4802      	ldr	r0, [pc, #8]	; (8008bb8 <USART1_IRQHandler+0x10>)
 8008bae:	f006 f86d 	bl	800ec8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008bb2:	bf00      	nop
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000adc 	.word	0x20000adc

08008bbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
  return 1;
 8008bc0:	2301      	movs	r3, #1
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <_kill>:

int _kill(int pid, int sig)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008bd6:	f00d fe9f 	bl	8016918 <__errno>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2216      	movs	r2, #22
 8008bde:	601a      	str	r2, [r3, #0]
  return -1;
 8008be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <_exit>:

void _exit (int status)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7ff ffe7 	bl	8008bcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8008bfe:	e7fe      	b.n	8008bfe <_exit+0x12>

08008c00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	617b      	str	r3, [r7, #20]
 8008c10:	e00a      	b.n	8008c28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008c12:	f3af 8000 	nop.w
 8008c16:	4601      	mov	r1, r0
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	60ba      	str	r2, [r7, #8]
 8008c1e:	b2ca      	uxtb	r2, r1
 8008c20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	3301      	adds	r3, #1
 8008c26:	617b      	str	r3, [r7, #20]
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	dbf0      	blt.n	8008c12 <_read+0x12>
  }

  return len;
 8008c30:	687b      	ldr	r3, [r7, #4]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b086      	sub	sp, #24
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	60f8      	str	r0, [r7, #12]
 8008c42:	60b9      	str	r1, [r7, #8]
 8008c44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c46:	2300      	movs	r3, #0
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	e009      	b.n	8008c60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	60ba      	str	r2, [r7, #8]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	dbf1      	blt.n	8008c4c <_write+0x12>
  }
  return len;
 8008c68:	687b      	ldr	r3, [r7, #4]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <_close>:

int _close(int file)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b083      	sub	sp, #12
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008c9a:	605a      	str	r2, [r3, #4]
  return 0;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <_isatty>:

int _isatty(int file)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008cb2:	2301      	movs	r3, #1
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
	...

08008cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008ce4:	4a14      	ldr	r2, [pc, #80]	; (8008d38 <_sbrk+0x5c>)
 8008ce6:	4b15      	ldr	r3, [pc, #84]	; (8008d3c <_sbrk+0x60>)
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008cf0:	4b13      	ldr	r3, [pc, #76]	; (8008d40 <_sbrk+0x64>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d102      	bne.n	8008cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008cf8:	4b11      	ldr	r3, [pc, #68]	; (8008d40 <_sbrk+0x64>)
 8008cfa:	4a12      	ldr	r2, [pc, #72]	; (8008d44 <_sbrk+0x68>)
 8008cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008cfe:	4b10      	ldr	r3, [pc, #64]	; (8008d40 <_sbrk+0x64>)
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4413      	add	r3, r2
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d207      	bcs.n	8008d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d0c:	f00d fe04 	bl	8016918 <__errno>
 8008d10:	4603      	mov	r3, r0
 8008d12:	220c      	movs	r2, #12
 8008d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008d16:	f04f 33ff 	mov.w	r3, #4294967295
 8008d1a:	e009      	b.n	8008d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008d1c:	4b08      	ldr	r3, [pc, #32]	; (8008d40 <_sbrk+0x64>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008d22:	4b07      	ldr	r3, [pc, #28]	; (8008d40 <_sbrk+0x64>)
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4413      	add	r3, r2
 8008d2a:	4a05      	ldr	r2, [pc, #20]	; (8008d40 <_sbrk+0x64>)
 8008d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20020000 	.word	0x20020000
 8008d3c:	00000400 	.word	0x00000400
 8008d40:	2000039c 	.word	0x2000039c
 8008d44:	200036c0 	.word	0x200036c0

08008d48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008d4c:	4b07      	ldr	r3, [pc, #28]	; (8008d6c <SystemInit+0x24>)
 8008d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d52:	4a06      	ldr	r2, [pc, #24]	; (8008d6c <SystemInit+0x24>)
 8008d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8008d5c:	4b03      	ldr	r3, [pc, #12]	; (8008d6c <SystemInit+0x24>)
 8008d5e:	4a04      	ldr	r2, [pc, #16]	; (8008d70 <SystemInit+0x28>)
 8008d60:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008d62:	bf00      	nop
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	e000ed00 	.word	0xe000ed00
 8008d70:	08007800 	.word	0x08007800

08008d74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008d74:	480d      	ldr	r0, [pc, #52]	; (8008dac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008d76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008d78:	f7ff ffe6 	bl	8008d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008d7c:	480c      	ldr	r0, [pc, #48]	; (8008db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8008d7e:	490d      	ldr	r1, [pc, #52]	; (8008db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008d80:	4a0d      	ldr	r2, [pc, #52]	; (8008db8 <LoopForever+0xe>)
  movs r3, #0
 8008d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008d84:	e002      	b.n	8008d8c <LoopCopyDataInit>

08008d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008d8a:	3304      	adds	r3, #4

08008d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008d90:	d3f9      	bcc.n	8008d86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008d92:	4a0a      	ldr	r2, [pc, #40]	; (8008dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8008d94:	4c0a      	ldr	r4, [pc, #40]	; (8008dc0 <LoopForever+0x16>)
  movs r3, #0
 8008d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008d98:	e001      	b.n	8008d9e <LoopFillZerobss>

08008d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008d9c:	3204      	adds	r2, #4

08008d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008da0:	d3fb      	bcc.n	8008d9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008da2:	f00d fdbf 	bl	8016924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008da6:	f00c fd1d 	bl	80157e4 <main>

08008daa <LoopForever>:

LoopForever:
  b LoopForever
 8008daa:	e7fe      	b.n	8008daa <LoopForever>
  ldr   r0, =_estack
 8008dac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008db4:	20000380 	.word	0x20000380
  ldr r2, =_sidata
 8008db8:	08019214 	.word	0x08019214
  ldr r2, =_sbss
 8008dbc:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 8008dc0:	200036c0 	.word	0x200036c0

08008dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008dc4:	e7fe      	b.n	8008dc4 <ADC1_2_IRQHandler>

08008dc6 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b087      	sub	sp, #28
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2201      	movs	r2, #1
 8008dec:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	611a      	str	r2, [r3, #16]

  return ret;
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	371c      	adds	r7, #28
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <qbufferWrite>:

  return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b08b      	sub	sp, #44	; 0x2c
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	60f8      	str	r0, [r7, #12]
 8008e0a:	60b9      	str	r1, [r7, #8]
 8008e0c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t next_in;


  for (int i=0; i<length; i++)
 8008e14:	2300      	movs	r3, #0
 8008e16:	623b      	str	r3, [r7, #32]
 8008e18:	e043      	b.n	8008ea2 <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	6892      	ldr	r2, [r2, #8]
 8008e24:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e28:	fb01 f202 	mul.w	r2, r1, r2
 8008e2c:	1a9b      	subs	r3, r3, r2
 8008e2e:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d02c      	beq.n	8008e94 <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d024      	beq.n	8008e8c <qbufferWrite+0x8a>
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d021      	beq.n	8008e8c <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	691a      	ldr	r2, [r3, #16]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68f9      	ldr	r1, [r7, #12]
 8008e52:	68c9      	ldr	r1, [r1, #12]
 8008e54:	fb01 f303 	mul.w	r3, r1, r3
 8008e58:	4413      	add	r3, r2
 8008e5a:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	61fb      	str	r3, [r7, #28]
 8008e60:	e00a      	b.n	8008e78 <qbufferWrite+0x76>
        {
          p_buf[i] = p_data[i];
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	441a      	add	r2, r3
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	6979      	ldr	r1, [r7, #20]
 8008e6c:	440b      	add	r3, r1
 8008e6e:	7812      	ldrb	r2, [r2, #0]
 8008e70:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	3301      	adds	r3, #1
 8008e76:	61fb      	str	r3, [r7, #28]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d8ef      	bhi.n	8008e62 <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	4413      	add	r3, r2
 8008e8a:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	601a      	str	r2, [r3, #0]
 8008e92:	e003      	b.n	8008e9c <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 8008e94:	2300      	movs	r3, #0
 8008e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008e9a:	e006      	b.n	8008eaa <qbufferWrite+0xa8>
  for (int i=0; i<length; i++)
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	623b      	str	r3, [r7, #32]
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d8b7      	bhi.n	8008e1a <qbufferWrite+0x18>
    }
  }

  return ret;
 8008eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	372c      	adds	r7, #44	; 0x2c
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b089      	sub	sp, #36	; 0x24
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	60f8      	str	r0, [r7, #12]
 8008ec2:	60b9      	str	r1, [r7, #8]
 8008ec4:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	77fb      	strb	r3, [r7, #31]


  for (int i=0; i<length; i++)
 8008eca:	2300      	movs	r3, #0
 8008ecc:	61bb      	str	r3, [r7, #24]
 8008ece:	e041      	b.n	8008f54 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d024      	beq.n	8008f22 <qbufferRead+0x68>
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d021      	beq.n	8008f22 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	691a      	ldr	r2, [r3, #16]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	68f9      	ldr	r1, [r7, #12]
 8008ee8:	68c9      	ldr	r1, [r1, #12]
 8008eea:	fb01 f303 	mul.w	r3, r1, r3
 8008eee:	4413      	add	r3, r2
 8008ef0:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	617b      	str	r3, [r7, #20]
 8008ef6:	e00a      	b.n	8008f0e <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	441a      	add	r2, r3
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	68b9      	ldr	r1, [r7, #8]
 8008f02:	440b      	add	r3, r1
 8008f04:	7812      	ldrb	r2, [r2, #0]
 8008f06:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	617b      	str	r3, [r7, #20]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	68da      	ldr	r2, [r3, #12]
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d8ef      	bhi.n	8008ef8 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	4413      	add	r3, r2
 8008f20:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d00c      	beq.n	8008f48 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	3301      	adds	r3, #1
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	6892      	ldr	r2, [r2, #8]
 8008f38:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f3c:	fb01 f202 	mul.w	r2, r1, r2
 8008f40:	1a9a      	subs	r2, r3, r2
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	605a      	str	r2, [r3, #4]
 8008f46:	e002      	b.n	8008f4e <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	77fb      	strb	r3, [r7, #31]
      break;
 8008f4c:	e006      	b.n	8008f5c <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	3301      	adds	r3, #1
 8008f52:	61bb      	str	r3, [r7, #24]
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d8b9      	bhi.n	8008ed0 <qbufferRead+0x16>
    }
  }

  return ret;
 8008f5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3724      	adds	r7, #36	; 0x24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b085      	sub	sp, #20
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	1ad3      	subs	r3, r2, r3
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	6892      	ldr	r2, [r2, #8]
 8008f80:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f84:	fb01 f202 	mul.w	r2, r1, r2
 8008f88:	1a9b      	subs	r3, r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]

  return ret;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
	...

08008f9c <buttonInit>:
extern void buttonISR(void *arg);
extern bool buttonGetPin(uint8_t ch);


bool buttonInit(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08c      	sub	sp, #48	; 0x30
 8008fa0:	af02      	add	r7, sp, #8
  bool ret = true;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	76fb      	strb	r3, [r7, #27]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fa6:	1d3b      	adds	r3, r7, #4
 8008fa8:	2200      	movs	r2, #0
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	605a      	str	r2, [r3, #4]
 8008fae:	609a      	str	r2, [r3, #8]
 8008fb0:	60da      	str	r2, [r3, #12]
 8008fb2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008fb4:	4b50      	ldr	r3, [pc, #320]	; (80090f8 <buttonInit+0x15c>)
 8008fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fb8:	4a4f      	ldr	r2, [pc, #316]	; (80090f8 <buttonInit+0x15c>)
 8008fba:	f043 0304 	orr.w	r3, r3, #4
 8008fbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fc0:	4b4d      	ldr	r3, [pc, #308]	; (80090f8 <buttonInit+0x15c>)
 8008fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc4:	f003 0304 	and.w	r3, r3, #4
 8008fc8:	603b      	str	r3, [r7, #0]
 8008fca:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60fb      	str	r3, [r7, #12]

  for(int i=0; i < BTN_MAX_CH; i++)
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8008fd8:	e011      	b.n	8008ffe <buttonInit+0x62>
  {
    GPIO_InitStruct.Pin = button_pin[i].pin;
 8008fda:	4948      	ldr	r1, [pc, #288]	; (80090fc <buttonInit+0x160>)
 8008fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fde:	4613      	mov	r3, r2
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	4413      	add	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	440b      	add	r3, r1
 8008fe8:	3304      	adds	r3, #4
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(PC13_BLU_SW_GPIO_Port, &GPIO_InitStruct);
 8008fee:	1d3b      	adds	r3, r7, #4
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	4843      	ldr	r0, [pc, #268]	; (8009100 <buttonInit+0x164>)
 8008ff4:	f002 fc22 	bl	800b83c <HAL_GPIO_Init>
  for(int i=0; i < BTN_MAX_CH; i++)
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	2b00      	cmp	r3, #0
 8009002:	ddea      	ble.n	8008fda <buttonInit+0x3e>
  }

  for(int i=0; i < BTN_MAX_CH; i++)
 8009004:	2300      	movs	r3, #0
 8009006:	623b      	str	r3, [r7, #32]
 8009008:	e040      	b.n	800908c <buttonInit+0xf0>
  {
    button_tbl[i].pressed = 0;
 800900a:	4a3e      	ldr	r2, [pc, #248]	; (8009104 <buttonInit+0x168>)
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	212c      	movs	r1, #44	; 0x2c
 8009010:	fb01 f303 	mul.w	r3, r1, r3
 8009014:	4413      	add	r3, r2
 8009016:	2200      	movs	r2, #0
 8009018:	701a      	strb	r2, [r3, #0]
    button_tbl[i].pressed_cnt = 0;
 800901a:	4a3a      	ldr	r2, [pc, #232]	; (8009104 <buttonInit+0x168>)
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	212c      	movs	r1, #44	; 0x2c
 8009020:	fb01 f303 	mul.w	r3, r1, r3
 8009024:	4413      	add	r3, r2
 8009026:	3302      	adds	r3, #2
 8009028:	2200      	movs	r2, #0
 800902a:	801a      	strh	r2, [r3, #0]
    button_tbl[i].pressed_event = 0;
 800902c:	4a35      	ldr	r2, [pc, #212]	; (8009104 <buttonInit+0x168>)
 800902e:	6a3b      	ldr	r3, [r7, #32]
 8009030:	212c      	movs	r1, #44	; 0x2c
 8009032:	fb01 f303 	mul.w	r3, r1, r3
 8009036:	4413      	add	r3, r2
 8009038:	3301      	adds	r3, #1
 800903a:	2200      	movs	r2, #0
 800903c:	701a      	strb	r2, [r3, #0]

    button_tbl[i].released = 0;
 800903e:	4a31      	ldr	r2, [pc, #196]	; (8009104 <buttonInit+0x168>)
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	212c      	movs	r1, #44	; 0x2c
 8009044:	fb01 f303 	mul.w	r3, r1, r3
 8009048:	4413      	add	r3, r2
 800904a:	330c      	adds	r3, #12
 800904c:	2200      	movs	r2, #0
 800904e:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released_event = 0;
 8009050:	4a2c      	ldr	r2, [pc, #176]	; (8009104 <buttonInit+0x168>)
 8009052:	6a3b      	ldr	r3, [r7, #32]
 8009054:	212c      	movs	r1, #44	; 0x2c
 8009056:	fb01 f303 	mul.w	r3, r1, r3
 800905a:	4413      	add	r3, r2
 800905c:	330d      	adds	r3, #13
 800905e:	2200      	movs	r2, #0
 8009060:	701a      	strb	r2, [r3, #0]

    button_tbl[i].repeat_cnt = 0;
 8009062:	4a28      	ldr	r2, [pc, #160]	; (8009104 <buttonInit+0x168>)
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	212c      	movs	r1, #44	; 0x2c
 8009068:	fb01 f303 	mul.w	r3, r1, r3
 800906c:	4413      	add	r3, r2
 800906e:	331c      	adds	r3, #28
 8009070:	2200      	movs	r2, #0
 8009072:	601a      	str	r2, [r3, #0]
    button_tbl[i].repeat_update = 0;
 8009074:	4a23      	ldr	r2, [pc, #140]	; (8009104 <buttonInit+0x168>)
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	212c      	movs	r1, #44	; 0x2c
 800907a:	fb01 f303 	mul.w	r3, r1, r3
 800907e:	4413      	add	r3, r2
 8009080:	3318      	adds	r3, #24
 8009082:	2200      	movs	r2, #0
 8009084:	701a      	strb	r2, [r3, #0]
  for(int i=0; i < BTN_MAX_CH; i++)
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	3301      	adds	r3, #1
 800908a:	623b      	str	r3, [r7, #32]
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	2b00      	cmp	r3, #0
 8009090:	ddbb      	ble.n	800900a <buttonInit+0x6e>
  }

  for (int i=0; i<BTN_EVENT_MAX; i++)
 8009092:	2300      	movs	r3, #0
 8009094:	61fb      	str	r3, [r7, #28]
 8009096:	e007      	b.n	80090a8 <buttonInit+0x10c>
  {
   event_tbl[i] = NULL;
 8009098:	4a1b      	ldr	r2, [pc, #108]	; (8009108 <buttonInit+0x16c>)
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	2100      	movs	r1, #0
 800909e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i=0; i<BTN_EVENT_MAX; i++)
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	3301      	adds	r3, #1
 80090a6:	61fb      	str	r3, [r7, #28]
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	2b07      	cmp	r3, #7
 80090ac:	ddf4      	ble.n	8009098 <buttonInit+0xfc>
  }

  swtimer_handle_t timer_ch;
  timer_ch = swtimerGetHandle();
 80090ae:	f001 fa93 	bl	800a5d8 <swtimerGetHandle>
 80090b2:	4603      	mov	r3, r0
 80090b4:	833b      	strh	r3, [r7, #24]
  if (timer_ch >= 0)
 80090b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	db0e      	blt.n	80090dc <buttonInit+0x140>
  {
    swtimerSet(timer_ch, 10, LOOP_TIME, buttonISR, NULL);
 80090be:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80090c2:	2300      	movs	r3, #0
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	4b11      	ldr	r3, [pc, #68]	; (800910c <buttonInit+0x170>)
 80090c8:	2202      	movs	r2, #2
 80090ca:	210a      	movs	r1, #10
 80090cc:	f001 fa06 	bl	800a4dc <swtimerSet>
    swtimerStart(timer_ch);
 80090d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f001 fa4f 	bl	800a578 <swtimerStart>
 80090da:	e003      	b.n	80090e4 <buttonInit+0x148>
  }
  else
  {
    uartPrintf(_DEF_UART1,"[NG] buttonInit()\n     swtimerGetHandle()\n");
 80090dc:	490c      	ldr	r1, [pc, #48]	; (8009110 <buttonInit+0x174>)
 80090de:	2000      	movs	r0, #0
 80090e0:	f001 fba8 	bl	800a834 <uartPrintf>
  }
#ifdef _USE_HW_CLI
  cliAdd("BUTTON", cliButton);
 80090e4:	490b      	ldr	r1, [pc, #44]	; (8009114 <buttonInit+0x178>)
 80090e6:	480c      	ldr	r0, [pc, #48]	; (8009118 <buttonInit+0x17c>)
 80090e8:	f000 fcd6 	bl	8009a98 <cliAdd>
#endif
  return ret;
 80090ec:	7efb      	ldrb	r3, [r7, #27]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3728      	adds	r7, #40	; 0x28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	40021000 	.word	0x40021000
 80090fc:	08018e08 	.word	0x08018e08
 8009100:	48000800 	.word	0x48000800
 8009104:	200003a0 	.word	0x200003a0
 8009108:	200003d0 	.word	0x200003d0
 800910c:	0800911d 	.word	0x0800911d
 8009110:	08018a74 	.word	0x08018a74
 8009114:	080095ad 	.word	0x080095ad
 8009118:	08018aa0 	.word	0x08018aa0

0800911c <buttonISR>:

  return ret;
}

void buttonISR(void* args)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b088      	sub	sp, #32
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint32_t repeat_time;

  for (int i=0; i<BTN_MAX_CH; i++)
 8009124:	2300      	movs	r3, #0
 8009126:	61bb      	str	r3, [r7, #24]
 8009128:	e187      	b.n	800943a <buttonISR+0x31e>
  {
    // btn pushed
    if (buttonGetPin(i) == true)
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	b2db      	uxtb	r3, r3
 800912e:	4618      	mov	r0, r3
 8009130:	f000 f99e 	bl	8009470 <buttonGetPin>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	f000 8100 	beq.w	800933c <buttonISR+0x220>
    {
      //pre btn state - false
      if (button_tbl[i].pressed == false)
 800913c:	4a99      	ldr	r2, [pc, #612]	; (80093a4 <buttonISR+0x288>)
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	212c      	movs	r1, #44	; 0x2c
 8009142:	fb01 f303 	mul.w	r3, r1, r3
 8009146:	4413      	add	r3, r2
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	f083 0301 	eor.w	r3, r3, #1
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b00      	cmp	r3, #0
 8009152:	d03b      	beq.n	80091cc <buttonISR+0xb0>
      {
        button_tbl[i].pressed_event = true;
 8009154:	4a93      	ldr	r2, [pc, #588]	; (80093a4 <buttonISR+0x288>)
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	212c      	movs	r1, #44	; 0x2c
 800915a:	fb01 f303 	mul.w	r3, r1, r3
 800915e:	4413      	add	r3, r2
 8009160:	3301      	adds	r3, #1
 8009162:	2201      	movs	r2, #1
 8009164:	701a      	strb	r2, [r3, #0]
        button_tbl[i].pressed_start_time = HAL_GetTick();
 8009166:	f001 feb1 	bl	800aecc <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	498d      	ldr	r1, [pc, #564]	; (80093a4 <buttonISR+0x288>)
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	202c      	movs	r0, #44	; 0x2c
 8009172:	fb00 f303 	mul.w	r3, r0, r3
 8009176:	440b      	add	r3, r1
 8009178:	3304      	adds	r3, #4
 800917a:	601a      	str	r2, [r3, #0]

        for (int e_i=0; e_i<event_cnt; e_i++)
 800917c:	2300      	movs	r3, #0
 800917e:	617b      	str	r3, [r7, #20]
 8009180:	e01e      	b.n	80091c0 <buttonISR+0xa4>
        {
          if (event_tbl[e_i]->level <= event_level)
 8009182:	4a89      	ldr	r2, [pc, #548]	; (80093a8 <buttonISR+0x28c>)
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800918a:	785a      	ldrb	r2, [r3, #1]
 800918c:	4b87      	ldr	r3, [pc, #540]	; (80093ac <buttonISR+0x290>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	429a      	cmp	r2, r3
 8009192:	d809      	bhi.n	80091a8 <buttonISR+0x8c>
            event_tbl[e_i]->pressed_event[i] = true;
 8009194:	4a84      	ldr	r2, [pc, #528]	; (80093a8 <buttonISR+0x28c>)
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	4413      	add	r3, r2
 80091a0:	3303      	adds	r3, #3
 80091a2:	2201      	movs	r2, #1
 80091a4:	701a      	strb	r2, [r3, #0]
 80091a6:	e008      	b.n	80091ba <buttonISR+0x9e>
          else
            event_tbl[e_i]->pressed_event[i] = false;
 80091a8:	4a7f      	ldr	r2, [pc, #508]	; (80093a8 <buttonISR+0x28c>)
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	4413      	add	r3, r2
 80091b4:	3303      	adds	r3, #3
 80091b6:	2200      	movs	r2, #0
 80091b8:	701a      	strb	r2, [r3, #0]
        for (int e_i=0; e_i<event_cnt; e_i++)
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	3301      	adds	r3, #1
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	4b7b      	ldr	r3, [pc, #492]	; (80093b0 <buttonISR+0x294>)
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	461a      	mov	r2, r3
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	4293      	cmp	r3, r2
 80091ca:	dbda      	blt.n	8009182 <buttonISR+0x66>
        }
      }

      button_tbl[i].pressed = true;
 80091cc:	4a75      	ldr	r2, [pc, #468]	; (80093a4 <buttonISR+0x288>)
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	212c      	movs	r1, #44	; 0x2c
 80091d2:	fb01 f303 	mul.w	r3, r1, r3
 80091d6:	4413      	add	r3, r2
 80091d8:	2201      	movs	r2, #1
 80091da:	701a      	strb	r2, [r3, #0]
      button_tbl[i].pressed_cnt++;
 80091dc:	4a71      	ldr	r2, [pc, #452]	; (80093a4 <buttonISR+0x288>)
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	212c      	movs	r1, #44	; 0x2c
 80091e2:	fb01 f303 	mul.w	r3, r1, r3
 80091e6:	4413      	add	r3, r2
 80091e8:	3302      	adds	r3, #2
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	3301      	adds	r3, #1
 80091ee:	b298      	uxth	r0, r3
 80091f0:	4a6c      	ldr	r2, [pc, #432]	; (80093a4 <buttonISR+0x288>)
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	212c      	movs	r1, #44	; 0x2c
 80091f6:	fb01 f303 	mul.w	r3, r1, r3
 80091fa:	4413      	add	r3, r2
 80091fc:	3302      	adds	r3, #2
 80091fe:	4602      	mov	r2, r0
 8009200:	801a      	strh	r2, [r3, #0]

      if (button_tbl[i].repeat_cnt == 0)
 8009202:	4a68      	ldr	r2, [pc, #416]	; (80093a4 <buttonISR+0x288>)
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	212c      	movs	r1, #44	; 0x2c
 8009208:	fb01 f303 	mul.w	r3, r1, r3
 800920c:	4413      	add	r3, r2
 800920e:	331c      	adds	r3, #28
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d109      	bne.n	800922a <buttonISR+0x10e>
      {
        repeat_time = button_tbl[i].repeat_time_detect;
 8009216:	4a63      	ldr	r2, [pc, #396]	; (80093a4 <buttonISR+0x288>)
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	212c      	movs	r1, #44	; 0x2c
 800921c:	fb01 f303 	mul.w	r3, r1, r3
 8009220:	4413      	add	r3, r2
 8009222:	3320      	adds	r3, #32
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	61fb      	str	r3, [r7, #28]
 8009228:	e01c      	b.n	8009264 <buttonISR+0x148>
      }
      else if (button_tbl[i].repeat_cnt == 1)
 800922a:	4a5e      	ldr	r2, [pc, #376]	; (80093a4 <buttonISR+0x288>)
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	212c      	movs	r1, #44	; 0x2c
 8009230:	fb01 f303 	mul.w	r3, r1, r3
 8009234:	4413      	add	r3, r2
 8009236:	331c      	adds	r3, #28
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d109      	bne.n	8009252 <buttonISR+0x136>
      {
        repeat_time = button_tbl[i].repeat_time_delay;
 800923e:	4a59      	ldr	r2, [pc, #356]	; (80093a4 <buttonISR+0x288>)
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	212c      	movs	r1, #44	; 0x2c
 8009244:	fb01 f303 	mul.w	r3, r1, r3
 8009248:	4413      	add	r3, r2
 800924a:	3324      	adds	r3, #36	; 0x24
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	61fb      	str	r3, [r7, #28]
 8009250:	e008      	b.n	8009264 <buttonISR+0x148>
      }
      else
      {
        repeat_time = button_tbl[i].repeat_time;
 8009252:	4a54      	ldr	r2, [pc, #336]	; (80093a4 <buttonISR+0x288>)
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	212c      	movs	r1, #44	; 0x2c
 8009258:	fb01 f303 	mul.w	r3, r1, r3
 800925c:	4413      	add	r3, r2
 800925e:	3328      	adds	r3, #40	; 0x28
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	61fb      	str	r3, [r7, #28]
      }
      if (button_tbl[i].pressed_cnt >= repeat_time)
 8009264:	4a4f      	ldr	r2, [pc, #316]	; (80093a4 <buttonISR+0x288>)
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	212c      	movs	r1, #44	; 0x2c
 800926a:	fb01 f303 	mul.w	r3, r1, r3
 800926e:	4413      	add	r3, r2
 8009270:	3302      	adds	r3, #2
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	461a      	mov	r2, r3
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	4293      	cmp	r3, r2
 800927a:	d84a      	bhi.n	8009312 <buttonISR+0x1f6>
      {
        button_tbl[i].pressed_cnt = 0;
 800927c:	4a49      	ldr	r2, [pc, #292]	; (80093a4 <buttonISR+0x288>)
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	212c      	movs	r1, #44	; 0x2c
 8009282:	fb01 f303 	mul.w	r3, r1, r3
 8009286:	4413      	add	r3, r2
 8009288:	3302      	adds	r3, #2
 800928a:	2200      	movs	r2, #0
 800928c:	801a      	strh	r2, [r3, #0]
        button_tbl[i].repeat_cnt++;
 800928e:	4a45      	ldr	r2, [pc, #276]	; (80093a4 <buttonISR+0x288>)
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	212c      	movs	r1, #44	; 0x2c
 8009294:	fb01 f303 	mul.w	r3, r1, r3
 8009298:	4413      	add	r3, r2
 800929a:	331c      	adds	r3, #28
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	1c5a      	adds	r2, r3, #1
 80092a0:	4940      	ldr	r1, [pc, #256]	; (80093a4 <buttonISR+0x288>)
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	202c      	movs	r0, #44	; 0x2c
 80092a6:	fb00 f303 	mul.w	r3, r0, r3
 80092aa:	440b      	add	r3, r1
 80092ac:	331c      	adds	r3, #28
 80092ae:	601a      	str	r2, [r3, #0]
        button_tbl[i].repeat_update = true;
 80092b0:	4a3c      	ldr	r2, [pc, #240]	; (80093a4 <buttonISR+0x288>)
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	212c      	movs	r1, #44	; 0x2c
 80092b6:	fb01 f303 	mul.w	r3, r1, r3
 80092ba:	4413      	add	r3, r2
 80092bc:	3318      	adds	r3, #24
 80092be:	2201      	movs	r2, #1
 80092c0:	701a      	strb	r2, [r3, #0]

        for (int e_i=0; e_i<event_cnt; e_i++)
 80092c2:	2300      	movs	r3, #0
 80092c4:	613b      	str	r3, [r7, #16]
 80092c6:	e01e      	b.n	8009306 <buttonISR+0x1ea>
        {
          if (event_tbl[e_i]->level <= event_level)
 80092c8:	4a37      	ldr	r2, [pc, #220]	; (80093a8 <buttonISR+0x28c>)
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092d0:	785a      	ldrb	r2, [r3, #1]
 80092d2:	4b36      	ldr	r3, [pc, #216]	; (80093ac <buttonISR+0x290>)
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d809      	bhi.n	80092ee <buttonISR+0x1d2>
            event_tbl[e_i]->repeat_event[i] = true;
 80092da:	4a33      	ldr	r2, [pc, #204]	; (80093a8 <buttonISR+0x28c>)
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	4413      	add	r3, r2
 80092e6:	3305      	adds	r3, #5
 80092e8:	2201      	movs	r2, #1
 80092ea:	701a      	strb	r2, [r3, #0]
 80092ec:	e008      	b.n	8009300 <buttonISR+0x1e4>
          else
            event_tbl[e_i]->repeat_event[i] = false;
 80092ee:	4a2e      	ldr	r2, [pc, #184]	; (80093a8 <buttonISR+0x28c>)
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	4413      	add	r3, r2
 80092fa:	3305      	adds	r3, #5
 80092fc:	2200      	movs	r2, #0
 80092fe:	701a      	strb	r2, [r3, #0]
        for (int e_i=0; e_i<event_cnt; e_i++)
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	3301      	adds	r3, #1
 8009304:	613b      	str	r3, [r7, #16]
 8009306:	4b2a      	ldr	r3, [pc, #168]	; (80093b0 <buttonISR+0x294>)
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	461a      	mov	r2, r3
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	4293      	cmp	r3, r2
 8009310:	dbda      	blt.n	80092c8 <buttonISR+0x1ac>
        }
      }

      button_tbl[i].pressed_end_time = HAL_GetTick();
 8009312:	f001 fddb 	bl	800aecc <HAL_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	4922      	ldr	r1, [pc, #136]	; (80093a4 <buttonISR+0x288>)
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	202c      	movs	r0, #44	; 0x2c
 800931e:	fb00 f303 	mul.w	r3, r0, r3
 8009322:	440b      	add	r3, r1
 8009324:	3308      	adds	r3, #8
 8009326:	601a      	str	r2, [r3, #0]

      button_tbl[i].released = false;
 8009328:	4a1e      	ldr	r2, [pc, #120]	; (80093a4 <buttonISR+0x288>)
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	212c      	movs	r1, #44	; 0x2c
 800932e:	fb01 f303 	mul.w	r3, r1, r3
 8009332:	4413      	add	r3, r2
 8009334:	330c      	adds	r3, #12
 8009336:	2200      	movs	r2, #0
 8009338:	701a      	strb	r2, [r3, #0]
 800933a:	e07b      	b.n	8009434 <buttonISR+0x318>
    }
    else  //btn - release
    {
      // pre btn state - pressed
      if (button_tbl[i].pressed == true)
 800933c:	4a19      	ldr	r2, [pc, #100]	; (80093a4 <buttonISR+0x288>)
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	212c      	movs	r1, #44	; 0x2c
 8009342:	fb01 f303 	mul.w	r3, r1, r3
 8009346:	4413      	add	r3, r2
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d044      	beq.n	80093d8 <buttonISR+0x2bc>
      {
        button_tbl[i].released_event = true;
 800934e:	4a15      	ldr	r2, [pc, #84]	; (80093a4 <buttonISR+0x288>)
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	212c      	movs	r1, #44	; 0x2c
 8009354:	fb01 f303 	mul.w	r3, r1, r3
 8009358:	4413      	add	r3, r2
 800935a:	330d      	adds	r3, #13
 800935c:	2201      	movs	r2, #1
 800935e:	701a      	strb	r2, [r3, #0]
        button_tbl[i].released_start_time = HAL_GetTick();
 8009360:	f001 fdb4 	bl	800aecc <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	490f      	ldr	r1, [pc, #60]	; (80093a4 <buttonISR+0x288>)
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	202c      	movs	r0, #44	; 0x2c
 800936c:	fb00 f303 	mul.w	r3, r0, r3
 8009370:	440b      	add	r3, r1
 8009372:	3310      	adds	r3, #16
 8009374:	601a      	str	r2, [r3, #0]

        for (int e_i=0; e_i<event_cnt; e_i++)
 8009376:	2300      	movs	r3, #0
 8009378:	60fb      	str	r3, [r7, #12]
 800937a:	e027      	b.n	80093cc <buttonISR+0x2b0>
        {
          if (event_tbl[e_i]->level <= event_level)
 800937c:	4a0a      	ldr	r2, [pc, #40]	; (80093a8 <buttonISR+0x28c>)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009384:	785a      	ldrb	r2, [r3, #1]
 8009386:	4b09      	ldr	r3, [pc, #36]	; (80093ac <buttonISR+0x290>)
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	429a      	cmp	r2, r3
 800938c:	d812      	bhi.n	80093b4 <buttonISR+0x298>
            event_tbl[e_i]->released_event[i] = true;
 800938e:	4a06      	ldr	r2, [pc, #24]	; (80093a8 <buttonISR+0x28c>)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	4413      	add	r3, r2
 800939a:	3304      	adds	r3, #4
 800939c:	2201      	movs	r2, #1
 800939e:	701a      	strb	r2, [r3, #0]
 80093a0:	e011      	b.n	80093c6 <buttonISR+0x2aa>
 80093a2:	bf00      	nop
 80093a4:	200003a0 	.word	0x200003a0
 80093a8:	200003d0 	.word	0x200003d0
 80093ac:	2000000d 	.word	0x2000000d
 80093b0:	200003cc 	.word	0x200003cc
          else
            event_tbl[e_i]->released_event[i] = false;
 80093b4:	4a2a      	ldr	r2, [pc, #168]	; (8009460 <buttonISR+0x344>)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	4413      	add	r3, r2
 80093c0:	3304      	adds	r3, #4
 80093c2:	2200      	movs	r2, #0
 80093c4:	701a      	strb	r2, [r3, #0]
        for (int e_i=0; e_i<event_cnt; e_i++)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3301      	adds	r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	4b25      	ldr	r3, [pc, #148]	; (8009464 <buttonISR+0x348>)
 80093ce:	881b      	ldrh	r3, [r3, #0]
 80093d0:	461a      	mov	r2, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	4293      	cmp	r3, r2
 80093d6:	dbd1      	blt.n	800937c <buttonISR+0x260>
        }
      }

      button_tbl[i].pressed  = false;
 80093d8:	4a23      	ldr	r2, [pc, #140]	; (8009468 <buttonISR+0x34c>)
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	212c      	movs	r1, #44	; 0x2c
 80093de:	fb01 f303 	mul.w	r3, r1, r3
 80093e2:	4413      	add	r3, r2
 80093e4:	2200      	movs	r2, #0
 80093e6:	701a      	strb	r2, [r3, #0]
      button_tbl[i].released = true;
 80093e8:	4a1f      	ldr	r2, [pc, #124]	; (8009468 <buttonISR+0x34c>)
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	212c      	movs	r1, #44	; 0x2c
 80093ee:	fb01 f303 	mul.w	r3, r1, r3
 80093f2:	4413      	add	r3, r2
 80093f4:	330c      	adds	r3, #12
 80093f6:	2201      	movs	r2, #1
 80093f8:	701a      	strb	r2, [r3, #0]
      button_tbl[i].repeat_cnt = 0;
 80093fa:	4a1b      	ldr	r2, [pc, #108]	; (8009468 <buttonISR+0x34c>)
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	212c      	movs	r1, #44	; 0x2c
 8009400:	fb01 f303 	mul.w	r3, r1, r3
 8009404:	4413      	add	r3, r2
 8009406:	331c      	adds	r3, #28
 8009408:	2200      	movs	r2, #0
 800940a:	601a      	str	r2, [r3, #0]
      button_tbl[i].repeat_update = false;
 800940c:	4a16      	ldr	r2, [pc, #88]	; (8009468 <buttonISR+0x34c>)
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	212c      	movs	r1, #44	; 0x2c
 8009412:	fb01 f303 	mul.w	r3, r1, r3
 8009416:	4413      	add	r3, r2
 8009418:	3318      	adds	r3, #24
 800941a:	2200      	movs	r2, #0
 800941c:	701a      	strb	r2, [r3, #0]

      button_tbl[i].released_end_time = HAL_GetTick();
 800941e:	f001 fd55 	bl	800aecc <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	4910      	ldr	r1, [pc, #64]	; (8009468 <buttonISR+0x34c>)
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	202c      	movs	r0, #44	; 0x2c
 800942a:	fb00 f303 	mul.w	r3, r0, r3
 800942e:	440b      	add	r3, r1
 8009430:	3314      	adds	r3, #20
 8009432:	601a      	str	r2, [r3, #0]
  for (int i=0; i<BTN_MAX_CH; i++)
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	3301      	adds	r3, #1
 8009438:	61bb      	str	r3, [r7, #24]
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	2b00      	cmp	r3, #0
 800943e:	f77f ae74 	ble.w	800912a <buttonISR+0xe>
    }
  }

  uartPrintf("pressed_cnt : %d\nrepeat_cnt : %d\nrepeat_time : %d\n", button_tbl[0].pressed_cnt, button_tbl[0].repeat_cnt, button_tbl[0].repeat_time);
 8009442:	4b0a      	ldr	r3, [pc, #40]	; (800946c <buttonISR+0x350>)
 8009444:	b2d8      	uxtb	r0, r3
 8009446:	4b08      	ldr	r3, [pc, #32]	; (8009468 <buttonISR+0x34c>)
 8009448:	885b      	ldrh	r3, [r3, #2]
 800944a:	4619      	mov	r1, r3
 800944c:	4b06      	ldr	r3, [pc, #24]	; (8009468 <buttonISR+0x34c>)
 800944e:	69da      	ldr	r2, [r3, #28]
 8009450:	4b05      	ldr	r3, [pc, #20]	; (8009468 <buttonISR+0x34c>)
 8009452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009454:	f001 f9ee 	bl	800a834 <uartPrintf>
}
 8009458:	bf00      	nop
 800945a:	3720      	adds	r7, #32
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	200003d0 	.word	0x200003d0
 8009464:	200003cc 	.word	0x200003cc
 8009468:	200003a0 	.word	0x200003a0
 800946c:	08018aa8 	.word	0x08018aa8

08009470 <buttonGetPin>:

// btn - click : TRUE
bool buttonGetPin(uint8_t ch)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	4603      	mov	r3, r0
 8009478:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800947a:	2300      	movs	r3, #0
 800947c:	73fb      	strb	r3, [r7, #15]

  if(ch >= BTN_MAX_CH)
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d001      	beq.n	8009488 <buttonGetPin+0x18>
  {
    return false;
 8009484:	2300      	movs	r3, #0
 8009486:	e024      	b.n	80094d2 <buttonGetPin+0x62>
  }

  // btn - pushed ret true
  if (HAL_GPIO_ReadPin(button_pin[ch].port, button_pin[ch].pin) == button_pin[ch].on_state)
 8009488:	79fa      	ldrb	r2, [r7, #7]
 800948a:	4914      	ldr	r1, [pc, #80]	; (80094dc <buttonGetPin+0x6c>)
 800948c:	4613      	mov	r3, r2
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	4413      	add	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	440b      	add	r3, r1
 8009496:	6818      	ldr	r0, [r3, #0]
 8009498:	79fa      	ldrb	r2, [r7, #7]
 800949a:	4910      	ldr	r1, [pc, #64]	; (80094dc <buttonGetPin+0x6c>)
 800949c:	4613      	mov	r3, r2
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	4413      	add	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	440b      	add	r3, r1
 80094a6:	3304      	adds	r3, #4
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	4619      	mov	r1, r3
 80094ae:	f002 fb47 	bl	800bb40 <HAL_GPIO_ReadPin>
 80094b2:	4603      	mov	r3, r0
 80094b4:	4618      	mov	r0, r3
 80094b6:	79fa      	ldrb	r2, [r7, #7]
 80094b8:	4908      	ldr	r1, [pc, #32]	; (80094dc <buttonGetPin+0x6c>)
 80094ba:	4613      	mov	r3, r2
 80094bc:	005b      	lsls	r3, r3, #1
 80094be:	4413      	add	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	440b      	add	r3, r1
 80094c4:	3308      	adds	r3, #8
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	4298      	cmp	r0, r3
 80094ca:	d101      	bne.n	80094d0 <buttonGetPin+0x60>
  {
    ret = true;
 80094cc:	2301      	movs	r3, #1
 80094ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	08018e08 	.word	0x08018e08

080094e0 <buttonGetPressed>:
  is_enable = enable;
}

// ret btn state
bool buttonGetPressed(uint8_t ch)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	71fb      	strb	r3, [r7, #7]
  if (ch >= BTN_MAX_CH || is_enable == false)
 80094ea:	79fb      	ldrb	r3, [r7, #7]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d106      	bne.n	80094fe <buttonGetPressed+0x1e>
 80094f0:	4b0a      	ldr	r3, [pc, #40]	; (800951c <buttonGetPressed+0x3c>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	f083 0301 	eor.w	r3, r3, #1
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <buttonGetPressed+0x22>
  {
    return false;
 80094fe:	2300      	movs	r3, #0
 8009500:	e006      	b.n	8009510 <buttonGetPressed+0x30>
  }

  return button_tbl[ch].pressed;
 8009502:	79fb      	ldrb	r3, [r7, #7]
 8009504:	4a06      	ldr	r2, [pc, #24]	; (8009520 <buttonGetPressed+0x40>)
 8009506:	212c      	movs	r1, #44	; 0x2c
 8009508:	fb01 f303 	mul.w	r3, r1, r3
 800950c:	4413      	add	r3, r2
 800950e:	781b      	ldrb	r3, [r3, #0]
}
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	2000000c 	.word	0x2000000c
 8009520:	200003a0 	.word	0x200003a0

08009524 <buttonGetName>:

  return ret;
}

const char *buttonGetName(uint8_t ch)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	4603      	mov	r3, r0
 800952c:	71fb      	strb	r3, [r7, #7]
  ch = constrain(ch, 0, BTN_MAX_CH);
 800952e:	79fb      	ldrb	r3, [r7, #7]
 8009530:	2b01      	cmp	r3, #1
 8009532:	bf28      	it	cs
 8009534:	2301      	movcs	r3, #1
 8009536:	71fb      	strb	r3, [r7, #7]

  return button_name[ch];
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	4a04      	ldr	r2, [pc, #16]	; (800954c <buttonGetName+0x28>)
 800953c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8009540:	4618      	mov	r0, r3
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	20000004 	.word	0x20000004

08009550 <buttonGetPressedTime>:

  return ret;
}

uint32_t buttonGetPressedTime(uint8_t ch)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	4603      	mov	r3, r0
 8009558:	71fb      	strb	r3, [r7, #7]
  volatile uint32_t ret;


  if (ch >= BTN_MAX_CH || is_enable == false) return 0;
 800955a:	79fb      	ldrb	r3, [r7, #7]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d106      	bne.n	800956e <buttonGetPressedTime+0x1e>
 8009560:	4b10      	ldr	r3, [pc, #64]	; (80095a4 <buttonGetPressedTime+0x54>)
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	f083 0301 	eor.w	r3, r3, #1
 8009568:	b2db      	uxtb	r3, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <buttonGetPressedTime+0x22>
 800956e:	2300      	movs	r3, #0
 8009570:	e012      	b.n	8009598 <buttonGetPressedTime+0x48>


  ret = button_tbl[ch].pressed_end_time - button_tbl[ch].pressed_start_time;
 8009572:	79fb      	ldrb	r3, [r7, #7]
 8009574:	4a0c      	ldr	r2, [pc, #48]	; (80095a8 <buttonGetPressedTime+0x58>)
 8009576:	212c      	movs	r1, #44	; 0x2c
 8009578:	fb01 f303 	mul.w	r3, r1, r3
 800957c:	4413      	add	r3, r2
 800957e:	3308      	adds	r3, #8
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	79fb      	ldrb	r3, [r7, #7]
 8009584:	4908      	ldr	r1, [pc, #32]	; (80095a8 <buttonGetPressedTime+0x58>)
 8009586:	202c      	movs	r0, #44	; 0x2c
 8009588:	fb00 f303 	mul.w	r3, r0, r3
 800958c:	440b      	add	r3, r1
 800958e:	3304      	adds	r3, #4
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	60fb      	str	r3, [r7, #12]

  return ret;
 8009596:	68fb      	ldr	r3, [r7, #12]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	2000000c 	.word	0x2000000c
 80095a8:	200003a0 	.word	0x200003a0

080095ac <cliButton>:
  return ret;
}

#ifdef _USE_HW_CLI
void cliButton(cli_args_t *args)
{
 80095ac:	b590      	push	{r4, r7, lr}
 80095ae:	b089      	sub	sp, #36	; 0x24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80095b4:	2300      	movs	r3, #0
 80095b6:	77fb      	strb	r3, [r7, #31]


  if (args->argc == 1 && args->isStr(0, "info"))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d125      	bne.n	800960c <cliButton+0x60>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	4952      	ldr	r1, [pc, #328]	; (8009710 <cliButton+0x164>)
 80095c6:	2000      	movs	r0, #0
 80095c8:	4798      	blx	r3
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d01d      	beq.n	800960c <cliButton+0x60>
  {
    for (int i=0; i<BTN_MAX_CH; i++)
 80095d0:	2300      	movs	r3, #0
 80095d2:	61bb      	str	r3, [r7, #24]
 80095d4:	e015      	b.n	8009602 <cliButton+0x56>
    {
      cliPrintf("%-12s pin %d\n", buttonGetName(i), button_pin[i].pin);
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff ffa2 	bl	8009524 <buttonGetName>
 80095e0:	4601      	mov	r1, r0
 80095e2:	484c      	ldr	r0, [pc, #304]	; (8009714 <cliButton+0x168>)
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	4613      	mov	r3, r2
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	4413      	add	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4403      	add	r3, r0
 80095f0:	3304      	adds	r3, #4
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	461a      	mov	r2, r3
 80095f6:	4848      	ldr	r0, [pc, #288]	; (8009718 <cliButton+0x16c>)
 80095f8:	f000 f93e 	bl	8009878 <cliPrintf>
    for (int i=0; i<BTN_MAX_CH; i++)
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	3301      	adds	r3, #1
 8009600:	61bb      	str	r3, [r7, #24]
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	2b00      	cmp	r3, #0
 8009606:	dde6      	ble.n	80095d6 <cliButton+0x2a>
    }
    ret = true;
 8009608:	2301      	movs	r3, #1
 800960a:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "show"))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d128      	bne.n	8009666 <cliButton+0xba>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	695b      	ldr	r3, [r3, #20]
 8009618:	4940      	ldr	r1, [pc, #256]	; (800971c <cliButton+0x170>)
 800961a:	2000      	movs	r0, #0
 800961c:	4798      	blx	r3
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d020      	beq.n	8009666 <cliButton+0xba>
  {
    while(cliKeepLoop())
 8009624:	e018      	b.n	8009658 <cliButton+0xac>
    {
      for (int i=0; i<BTN_MAX_CH; i++)
 8009626:	2300      	movs	r3, #0
 8009628:	617b      	str	r3, [r7, #20]
 800962a:	e00c      	b.n	8009646 <cliButton+0x9a>
      {
        cliPrintf("%d", buttonGetPressed(i));
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	b2db      	uxtb	r3, r3
 8009630:	4618      	mov	r0, r3
 8009632:	f7ff ff55 	bl	80094e0 <buttonGetPressed>
 8009636:	4603      	mov	r3, r0
 8009638:	4619      	mov	r1, r3
 800963a:	4839      	ldr	r0, [pc, #228]	; (8009720 <cliButton+0x174>)
 800963c:	f000 f91c 	bl	8009878 <cliPrintf>
      for (int i=0; i<BTN_MAX_CH; i++)
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	3301      	adds	r3, #1
 8009644:	617b      	str	r3, [r7, #20]
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	2b00      	cmp	r3, #0
 800964a:	ddef      	ble.n	800962c <cliButton+0x80>
      }
      delay(50);
 800964c:	2032      	movs	r0, #50	; 0x32
 800964e:	f7ff f9df 	bl	8008a10 <delay>
      cliPrintf("\r");
 8009652:	4834      	ldr	r0, [pc, #208]	; (8009724 <cliButton+0x178>)
 8009654:	f000 f910 	bl	8009878 <cliPrintf>
    while(cliKeepLoop())
 8009658:	f000 fa08 	bl	8009a6c <cliKeepLoop>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e1      	bne.n	8009626 <cliButton+0x7a>
    }
    ret = true;
 8009662:	2301      	movs	r3, #1
 8009664:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "time"))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d13c      	bne.n	80096e8 <cliButton+0x13c>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	492d      	ldr	r1, [pc, #180]	; (8009728 <cliButton+0x17c>)
 8009674:	2000      	movs	r0, #0
 8009676:	4798      	blx	r3
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d034      	beq.n	80096e8 <cliButton+0x13c>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	2001      	movs	r0, #1
 8009684:	4798      	blx	r3
 8009686:	4603      	mov	r3, r0
 8009688:	73fb      	strb	r3, [r7, #15]
    ch = constrain(ch, 0, BTN_MAX_CH-1);
 800968a:	2300      	movs	r3, #0
 800968c:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 800968e:	e024      	b.n	80096da <cliButton+0x12e>
    {
      for (int i=0; i<BTN_MAX_CH; i++)
 8009690:	2300      	movs	r3, #0
 8009692:	613b      	str	r3, [r7, #16]
 8009694:	e01b      	b.n	80096ce <cliButton+0x122>
      {
        if(buttonGetPressed(i))
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	b2db      	uxtb	r3, r3
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff ff20 	bl	80094e0 <buttonGetPressed>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d010      	beq.n	80096c8 <cliButton+0x11c>
        {
          cliPrintf("%-12s, Time :  %d ms\n", buttonGetName(i), buttonGetPressedTime(i));
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7ff ff3a 	bl	8009524 <buttonGetName>
 80096b0:	4604      	mov	r4, r0
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7ff ff4a 	bl	8009550 <buttonGetPressedTime>
 80096bc:	4603      	mov	r3, r0
 80096be:	461a      	mov	r2, r3
 80096c0:	4621      	mov	r1, r4
 80096c2:	481a      	ldr	r0, [pc, #104]	; (800972c <cliButton+0x180>)
 80096c4:	f000 f8d8 	bl	8009878 <cliPrintf>
      for (int i=0; i<BTN_MAX_CH; i++)
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	3301      	adds	r3, #1
 80096cc:	613b      	str	r3, [r7, #16]
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dde0      	ble.n	8009696 <cliButton+0xea>
        }
      }
      delay(10);
 80096d4:	200a      	movs	r0, #10
 80096d6:	f7ff f99b 	bl	8008a10 <delay>
    while(cliKeepLoop())
 80096da:	f000 f9c7 	bl	8009a6c <cliKeepLoop>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1d5      	bne.n	8009690 <cliButton+0xe4>
    }
    ret = true;
 80096e4:	2301      	movs	r3, #1
 80096e6:	77fb      	strb	r3, [r7, #31]
  }

  if (ret == false)
 80096e8:	7ffb      	ldrb	r3, [r7, #31]
 80096ea:	f083 0301 	eor.w	r3, r3, #1
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d009      	beq.n	8009708 <cliButton+0x15c>
  {
    cliPrintf("button info\n");
 80096f4:	480e      	ldr	r0, [pc, #56]	; (8009730 <cliButton+0x184>)
 80096f6:	f000 f8bf 	bl	8009878 <cliPrintf>
    cliPrintf("button show\n");
 80096fa:	480e      	ldr	r0, [pc, #56]	; (8009734 <cliButton+0x188>)
 80096fc:	f000 f8bc 	bl	8009878 <cliPrintf>
    cliPrintf("button time\n", BTN_MAX_CH);
 8009700:	2101      	movs	r1, #1
 8009702:	480d      	ldr	r0, [pc, #52]	; (8009738 <cliButton+0x18c>)
 8009704:	f000 f8b8 	bl	8009878 <cliPrintf>
  }
}
 8009708:	bf00      	nop
 800970a:	3724      	adds	r7, #36	; 0x24
 800970c:	46bd      	mov	sp, r7
 800970e:	bd90      	pop	{r4, r7, pc}
 8009710:	08018adc 	.word	0x08018adc
 8009714:	08018e08 	.word	0x08018e08
 8009718:	08018ae4 	.word	0x08018ae4
 800971c:	08018af4 	.word	0x08018af4
 8009720:	08018afc 	.word	0x08018afc
 8009724:	08018b00 	.word	0x08018b00
 8009728:	08018b04 	.word	0x08018b04
 800972c:	08018b0c 	.word	0x08018b0c
 8009730:	08018b24 	.word	0x08018b24
 8009734:	08018b34 	.word	0x08018b34
 8009738:	08018b44 	.word	0x08018b44

0800973c <cdcInit>:


static bool is_init = false;

bool cdcInit(void)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
  bool ret = true;
 8009742:	2301      	movs	r3, #1
 8009744:	71fb      	strb	r3, [r7, #7]


  ret = cdcIfInit();
 8009746:	f00b fb7f 	bl	8014e48 <cdcIfInit>
 800974a:	4603      	mov	r3, r0
 800974c:	71fb      	strb	r3, [r7, #7]

  is_init = ret;
 800974e:	4a04      	ldr	r2, [pc, #16]	; (8009760 <cdcInit+0x24>)
 8009750:	79fb      	ldrb	r3, [r7, #7]
 8009752:	7013      	strb	r3, [r2, #0]

  return ret;
 8009754:	79fb      	ldrb	r3, [r7, #7]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	200003f0 	.word	0x200003f0

08009764 <cdcIsConnect>:
{
  return is_init;
}

bool cdcIsConnect(void)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
  return cdcIfIsConnected();
 8009768:	f00b fbfe 	bl	8014f68 <cdcIfIsConnected>
 800976c:	4603      	mov	r3, r0
}
 800976e:	4618      	mov	r0, r3
 8009770:	bd80      	pop	{r7, pc}

08009772 <cdcAvailable>:

uint32_t cdcAvailable(void)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	af00      	add	r7, sp, #0
  return cdcIfAvailable();
 8009776:	f00b fb85 	bl	8014e84 <cdcIfAvailable>
 800977a:	4603      	mov	r3, r0
}
 800977c:	4618      	mov	r0, r3
 800977e:	bd80      	pop	{r7, pc}

08009780 <cdcRead>:

uint8_t cdcRead(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
  return cdcIfRead();
 8009784:	f00b fb88 	bl	8014e98 <cdcIfRead>
 8009788:	4603      	mov	r3, r0
}
 800978a:	4618      	mov	r0, r3
 800978c:	bd80      	pop	{r7, pc}

0800978e <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b082      	sub	sp, #8
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	6039      	str	r1, [r7, #0]
  return cdcIfWrite(p_data, length);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f00b fb8e 	bl	8014ebc <cdcIfWrite>
 80097a0:	4603      	mov	r3, r0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
	...

080097ac <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 80097b0:	4b1b      	ldr	r3, [pc, #108]	; (8009820 <cliInit+0x74>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 80097b6:	4b1a      	ldr	r3, [pc, #104]	; (8009820 <cliInit+0x74>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 80097bc:	4b18      	ldr	r3, [pc, #96]	; (8009820 <cliInit+0x74>)
 80097be:	2200      	movs	r2, #0
 80097c0:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 80097c2:	4b17      	ldr	r3, [pc, #92]	; (8009820 <cliInit+0x74>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 80097ca:	4b15      	ldr	r3, [pc, #84]	; (8009820 <cliInit+0x74>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 80097d2:	4b13      	ldr	r3, [pc, #76]	; (8009820 <cliInit+0x74>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 80097da:	4b11      	ldr	r3, [pc, #68]	; (8009820 <cliInit+0x74>)
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80097e2:	4b0f      	ldr	r3, [pc, #60]	; (8009820 <cliInit+0x74>)
 80097e4:	4a0f      	ldr	r2, [pc, #60]	; (8009824 <cliInit+0x78>)
 80097e6:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80097ea:	4b0d      	ldr	r3, [pc, #52]	; (8009820 <cliInit+0x74>)
 80097ec:	4a0e      	ldr	r2, [pc, #56]	; (8009828 <cliInit+0x7c>)
 80097ee:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80097f2:	4b0b      	ldr	r3, [pc, #44]	; (8009820 <cliInit+0x74>)
 80097f4:	4a0d      	ldr	r2, [pc, #52]	; (800982c <cliInit+0x80>)
 80097f6:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80097fa:	4b09      	ldr	r3, [pc, #36]	; (8009820 <cliInit+0x74>)
 80097fc:	4a0c      	ldr	r2, [pc, #48]	; (8009830 <cliInit+0x84>)
 80097fe:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 8009802:	4807      	ldr	r0, [pc, #28]	; (8009820 <cliInit+0x74>)
 8009804:	f000 f81e 	bl	8009844 <cliLineClean>


  cliAdd("help", cliShowList);
 8009808:	490a      	ldr	r1, [pc, #40]	; (8009834 <cliInit+0x88>)
 800980a:	480b      	ldr	r0, [pc, #44]	; (8009838 <cliInit+0x8c>)
 800980c:	f000 f944 	bl	8009a98 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8009810:	490a      	ldr	r1, [pc, #40]	; (800983c <cliInit+0x90>)
 8009812:	480b      	ldr	r0, [pc, #44]	; (8009840 <cliInit+0x94>)
 8009814:	f000 f940 	bl	8009a98 <cliAdd>

  return true;
 8009818:	2301      	movs	r3, #1
}
 800981a:	4618      	mov	r0, r3
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	200003f4 	.word	0x200003f4
 8009824:	08009929 	.word	0x08009929
 8009828:	08009979 	.word	0x08009979
 800982c:	080099d1 	.word	0x080099d1
 8009830:	08009a19 	.word	0x08009a19
 8009834:	08009b2d 	.word	0x08009b2d
 8009838:	08018b54 	.word	0x08018b54
 800983c:	08009b9d 	.word	0x08009b9d
 8009840:	08018b5c 	.word	0x08018b5c

08009844 <cliLineClean>:

  return ret;
}

void cliLineClean(cli_t *p_cli)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	223f      	movs	r2, #63	; 0x3f
 8009860:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <cliPrintf>:

  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8009878:	b40f      	push	{r0, r1, r2, r3}
 800987a:	b580      	push	{r7, lr}
 800987c:	b084      	sub	sp, #16
 800987e:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8009880:	f107 031c 	add.w	r3, r7, #28
 8009884:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8009886:	4b0d      	ldr	r3, [pc, #52]	; (80098bc <cliPrintf+0x44>)
 8009888:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f103 0011 	add.w	r0, r3, #17
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	69ba      	ldr	r2, [r7, #24]
 8009894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009898:	f00c ffd0 	bl	801683c <vsniprintf>
 800989c:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	7818      	ldrb	r0, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	3311      	adds	r3, #17
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	4619      	mov	r1, r3
 80098aa:	f000 ffa1 	bl	800a7f0 <uartWrite>
}
 80098ae:	bf00      	nop
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098b8:	b004      	add	sp, #16
 80098ba:	4770      	bx	lr
 80098bc:	200003f4 	.word	0x200003f4

080098c0 <cliToUpper>:

void cliToUpper(char *str)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80098c8:	2300      	movs	r3, #0
 80098ca:	81fb      	strh	r3, [r7, #14]
 80098cc:	e018      	b.n	8009900 <cliToUpper+0x40>
  {
    str_ch = str[i];
 80098ce:	89fb      	ldrh	r3, [r7, #14]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	4413      	add	r3, r2
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80098d8:	7b7b      	ldrb	r3, [r7, #13]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d014      	beq.n	8009908 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80098de:	7b7b      	ldrb	r3, [r7, #13]
 80098e0:	2b60      	cmp	r3, #96	; 0x60
 80098e2:	d905      	bls.n	80098f0 <cliToUpper+0x30>
 80098e4:	7b7b      	ldrb	r3, [r7, #13]
 80098e6:	2b7a      	cmp	r3, #122	; 0x7a
 80098e8:	d802      	bhi.n	80098f0 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 80098ea:	7b7b      	ldrb	r3, [r7, #13]
 80098ec:	3b20      	subs	r3, #32
 80098ee:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 80098f0:	89fb      	ldrh	r3, [r7, #14]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	4413      	add	r3, r2
 80098f6:	7b7a      	ldrb	r2, [r7, #13]
 80098f8:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80098fa:	89fb      	ldrh	r3, [r7, #14]
 80098fc:	3301      	adds	r3, #1
 80098fe:	81fb      	strh	r3, [r7, #14]
 8009900:	89fb      	ldrh	r3, [r7, #14]
 8009902:	2b0f      	cmp	r3, #15
 8009904:	d9e3      	bls.n	80098ce <cliToUpper+0xe>
 8009906:	e000      	b.n	800990a <cliToUpper+0x4a>
      break;
 8009908:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800990a:	89fb      	ldrh	r3, [r7, #14]
 800990c:	2b10      	cmp	r3, #16
 800990e:	d105      	bne.n	800991c <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8009910:	89fb      	ldrh	r3, [r7, #14]
 8009912:	3b01      	subs	r3, #1
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	4413      	add	r3, r2
 8009918:	2200      	movs	r2, #0
 800991a:	701a      	strb	r2, [r3, #0]
  }
}
 800991c:	bf00      	nop
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	4603      	mov	r3, r0
 8009930:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8009932:	2300      	movs	r3, #0
 8009934:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8009936:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <cliArgsGetData+0x4c>)
 8009938:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	b29a      	uxth	r2, r3
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8009944:	429a      	cmp	r2, r3
 8009946:	d301      	bcc.n	800994c <cliArgsGetData+0x24>
  {
    return 0;
 8009948:	2300      	movs	r3, #0
 800994a:	e00e      	b.n	800996a <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2200      	movs	r2, #0
 800995c:	2100      	movs	r1, #0
 800995e:	4618      	mov	r0, r3
 8009960:	f00c fe32 	bl	80165c8 <strtoul>
 8009964:	4603      	mov	r3, r0
 8009966:	60fb      	str	r3, [r7, #12]

  return ret;
 8009968:	68fb      	ldr	r3, [r7, #12]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	200003f4 	.word	0x200003f4

08009978 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8009982:	f04f 0300 	mov.w	r3, #0
 8009986:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8009988:	4b10      	ldr	r3, [pc, #64]	; (80099cc <cliArgsGetFloat+0x54>)
 800998a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	b29a      	uxth	r2, r3
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8009996:	429a      	cmp	r2, r3
 8009998:	d302      	bcc.n	80099a0 <cliArgsGetFloat+0x28>
  {
    return 0;
 800999a:	f04f 0300 	mov.w	r3, #0
 800999e:	e00d      	b.n	80099bc <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80099a6:	79fb      	ldrb	r3, [r7, #7]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2100      	movs	r1, #0
 80099b0:	4618      	mov	r0, r3
 80099b2:	f00c fd31 	bl	8016418 <strtof>
 80099b6:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 80099ba:	68fb      	ldr	r3, [r7, #12]
}
 80099bc:	ee07 3a90 	vmov	s15, r3
 80099c0:	eeb0 0a67 	vmov.f32	s0, s15
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	200003f4 	.word	0x200003f4

080099d0 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	4603      	mov	r3, r0
 80099d8:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80099de:	4b0d      	ldr	r3, [pc, #52]	; (8009a14 <cliArgsGetStr+0x44>)
 80099e0:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80099e2:	79fb      	ldrb	r3, [r7, #7]
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d301      	bcc.n	80099f4 <cliArgsGetStr+0x24>
  {
    return 0;
 80099f0:	2300      	movs	r3, #0
 80099f2:	e008      	b.n	8009a06 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80099fa:	79fb      	ldrb	r3, [r7, #7]
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	60fb      	str	r3, [r7, #12]

  return ret;
 8009a04:	68fb      	ldr	r3, [r7, #12]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	200003f4 	.word	0x200003f4

08009a18 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	4603      	mov	r3, r0
 8009a20:	6039      	str	r1, [r7, #0]
 8009a22:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8009a24:	2300      	movs	r3, #0
 8009a26:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8009a28:	4b0f      	ldr	r3, [pc, #60]	; (8009a68 <cliArgsIsStr+0x50>)
 8009a2a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8009a2c:	79fb      	ldrb	r3, [r7, #7]
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d301      	bcc.n	8009a3e <cliArgsIsStr+0x26>
  {
    return 0;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	e010      	b.n	8009a60 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6838      	ldr	r0, [r7, #0]
 8009a50:	f7fd ffe6 	bl	8007a20 <strcmp>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <cliArgsIsStr+0x46>
  {
    ret = true;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	200003f4 	.word	0x200003f4

08009a6c <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8009a72:	4b08      	ldr	r3, [pc, #32]	; (8009a94 <cliKeepLoop+0x28>)
 8009a74:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 fe7a 	bl	800a774 <uartAvailable>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d101      	bne.n	8009a8a <cliKeepLoop+0x1e>
  {
    return true;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e000      	b.n	8009a8c <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8009a8a:	2300      	movs	r3, #0
  }
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	200003f4 	.word	0x200003f4

08009a98 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8009aa6:	4b20      	ldr	r3, [pc, #128]	; (8009b28 <cliAdd+0x90>)
 8009aa8:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8009ab0:	2b0f      	cmp	r3, #15
 8009ab2:	d901      	bls.n	8009ab8 <cliAdd+0x20>
  {
    return false;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	e032      	b.n	8009b1e <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8009abe:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8009ac0:	89fa      	ldrh	r2, [r7, #14]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8009ace:	693a      	ldr	r2, [r7, #16]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	6879      	ldr	r1, [r7, #4]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f00c ff4b 	bl	8016972 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8009adc:	89fa      	ldrh	r2, [r7, #14]
 8009ade:	6939      	ldr	r1, [r7, #16]
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	440b      	add	r3, r1
 8009aea:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8009aee:	683a      	ldr	r2, [r7, #0]
 8009af0:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8009af2:	89fa      	ldrh	r2, [r7, #14]
 8009af4:	4613      	mov	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	4413      	add	r3, r2
 8009b04:	3304      	adds	r3, #4
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7ff feda 	bl	80098c0 <cliToUpper>

  p_cli->cmd_count++;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8009b12:	3301      	adds	r3, #1
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 8009b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	200003f4 	.word	0x200003f4

08009b2c <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8009b34:	4b15      	ldr	r3, [pc, #84]	; (8009b8c <cliShowList+0x60>)
 8009b36:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8009b38:	4815      	ldr	r0, [pc, #84]	; (8009b90 <cliShowList+0x64>)
 8009b3a:	f7ff fe9d 	bl	8009878 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8009b3e:	4815      	ldr	r0, [pc, #84]	; (8009b94 <cliShowList+0x68>)
 8009b40:	f7ff fe9a 	bl	8009878 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8009b44:	2300      	movs	r3, #0
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	e012      	b.n	8009b70 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7ff fe8a 	bl	8009878 <cliPrintf>
    cliPrintf("\r\n");
 8009b64:	480a      	ldr	r0, [pc, #40]	; (8009b90 <cliShowList+0x64>)
 8009b66:	f7ff fe87 	bl	8009878 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8009b76:	461a      	mov	r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	dbe5      	blt.n	8009b4a <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8009b7e:	4806      	ldr	r0, [pc, #24]	; (8009b98 <cliShowList+0x6c>)
 8009b80:	f7ff fe7a 	bl	8009878 <cliPrintf>
}
 8009b84:	bf00      	nop
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	200003f4 	.word	0x200003f4
 8009b90:	08018c24 	.word	0x08018c24
 8009b94:	08018c28 	.word	0x08018c28
 8009b98:	08018c48 	.word	0x08018c48

08009b9c <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08c      	sub	sp, #48	; 0x30
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8009ba4:	2310      	movs	r3, #16
 8009ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d103      	bne.n	8009bc4 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8009bbc:	4840      	ldr	r0, [pc, #256]	; (8009cc0 <cliMemoryDump+0x124>)
 8009bbe:	f7ff fe5b 	bl	8009878 <cliPrintf>
 8009bc2:	e07a      	b.n	8009cba <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	dd09      	ble.n	8009bde <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	3304      	adds	r3, #4
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f00c fcf7 	bl	80165c8 <strtoul>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2200      	movs	r2, #0
 8009be4:	2100      	movs	r1, #0
 8009be6:	4618      	mov	r0, r3
 8009be8:	f00c fcee 	bl	80165c8 <strtoul>
 8009bec:	4603      	mov	r3, r0
 8009bee:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8009bf4:	4833      	ldr	r0, [pc, #204]	; (8009cc4 <cliMemoryDump+0x128>)
 8009bf6:	f7ff fe3f 	bl	8009878 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bfe:	e058      	b.n	8009cb2 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8009c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c02:	f003 0303 	and.w	r3, r3, #3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d104      	bne.n	8009c14 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	482e      	ldr	r0, [pc, #184]	; (8009cc8 <cliMemoryDump+0x12c>)
 8009c10:	f7ff fe32 	bl	8009878 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	482c      	ldr	r0, [pc, #176]	; (8009ccc <cliMemoryDump+0x130>)
 8009c1c:	f7ff fe2c 	bl	8009878 <cliPrintf>

    if ((idx%4) == 3)
 8009c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c22:	425a      	negs	r2, r3
 8009c24:	f003 0303 	and.w	r3, r3, #3
 8009c28:	f002 0203 	and.w	r2, r2, #3
 8009c2c:	bf58      	it	pl
 8009c2e:	4253      	negpl	r3, r2
 8009c30:	2b03      	cmp	r3, #3
 8009c32:	d138      	bne.n	8009ca6 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8009c34:	4826      	ldr	r0, [pc, #152]	; (8009cd0 <cliMemoryDump+0x134>)
 8009c36:	f7ff fe1f 	bl	8009878 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	623b      	str	r3, [r7, #32]
 8009c3e:	e02c      	b.n	8009c9a <cliMemoryDump+0xfe>
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8009c44:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8009c46:	2300      	movs	r3, #0
 8009c48:	61fb      	str	r3, [r7, #28]
 8009c4a:	e01d      	b.n	8009c88 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8009c4c:	f107 020c 	add.w	r2, r7, #12
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	4413      	add	r3, r2
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	2b1f      	cmp	r3, #31
 8009c58:	d910      	bls.n	8009c7c <cliMemoryDump+0xe0>
 8009c5a:	f107 020c 	add.w	r2, r7, #12
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	4413      	add	r3, r2
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	2b7e      	cmp	r3, #126	; 0x7e
 8009c66:	d809      	bhi.n	8009c7c <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8009c68:	f107 020c 	add.w	r2, r7, #12
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	4413      	add	r3, r2
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	4619      	mov	r1, r3
 8009c74:	4817      	ldr	r0, [pc, #92]	; (8009cd4 <cliMemoryDump+0x138>)
 8009c76:	f7ff fdff 	bl	8009878 <cliPrintf>
 8009c7a:	e002      	b.n	8009c82 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8009c7c:	4816      	ldr	r0, [pc, #88]	; (8009cd8 <cliMemoryDump+0x13c>)
 8009c7e:	f7ff fdfb 	bl	8009878 <cliPrintf>
        for (i=0;i<4;i++)
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	3301      	adds	r3, #1
 8009c86:	61fb      	str	r3, [r7, #28]
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	ddde      	ble.n	8009c4c <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	3304      	adds	r3, #4
 8009c92:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	3301      	adds	r3, #1
 8009c98:	623b      	str	r3, [r7, #32]
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	2b03      	cmp	r3, #3
 8009c9e:	ddcf      	ble.n	8009c40 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8009ca0:	480e      	ldr	r0, [pc, #56]	; (8009cdc <cliMemoryDump+0x140>)
 8009ca2:	f7ff fde9 	bl	8009878 <cliPrintf>
    }
    addr++;
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	3304      	adds	r3, #4
 8009caa:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8009cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cae:	3301      	adds	r3, #1
 8009cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	dba2      	blt.n	8009c00 <cliMemoryDump+0x64>
  }
}
 8009cba:	3730      	adds	r7, #48	; 0x30
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	08018c68 	.word	0x08018c68
 8009cc4:	08018c7c 	.word	0x08018c7c
 8009cc8:	08018c84 	.word	0x08018c84
 8009ccc:	08018c90 	.word	0x08018c90
 8009cd0:	08018c98 	.word	0x08018c98
 8009cd4:	08018c9c 	.word	0x08018c9c
 8009cd8:	08018ca0 	.word	0x08018ca0
 8009cdc:	08018ca4 	.word	0x08018ca4

08009ce0 <flashInit>:


static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
  bool ret = true;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	71fb      	strb	r3, [r7, #7]

  return true;
 8009cea:	2301      	movs	r3, #1
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b08c      	sub	sp, #48	; 0x30
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8009d02:	2300      	movs	r3, #0
 8009d04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  int32_t start_sector = -1;
 8009d08:	f04f 33ff 	mov.w	r3, #4294967295
 8009d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t end_sector = -1;
 8009d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d12:	627b      	str	r3, [r7, #36]	; 0x24
  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8009d14:	f001 fb44 	bl	800b3a0 <HAL_FLASH_Unlock>
  /* Clear OPTVERR bit set on virgin samples */
  //__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);

  //  Dual Bank -> FLASH_MAX_SECTOR  - 256
  //  Single Bank -> FLASH_MAX_SECTOR  - 128
  for(int i=0; i< FLASH_MAX_SECTOR; i++)
 8009d18:	2300      	movs	r3, #0
 8009d1a:	623b      	str	r3, [r7, #32]
 8009d1c:	e013      	b.n	8009d46 <flashErase+0x4e>
  {
    if(flashInSector(i, addr, length) == true)
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	683a      	ldr	r2, [r7, #0]
 8009d24:	6879      	ldr	r1, [r7, #4]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 f899 	bl	8009e5e <flashInSector>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d006      	beq.n	8009d40 <flashErase+0x48>
    {
      // - 일때 처음 초기화 하고 이후 초기화 안시킴
      if(start_sector < 0)
 8009d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	da01      	bge.n	8009d3c <flashErase+0x44>
      {
        start_sector = i;
 8009d38:	6a3b      	ldr	r3, [r7, #32]
 8009d3a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      //  계속 for 문 돌면서 초기화 end_sector
      end_sector = i;
 8009d3c:	6a3b      	ldr	r3, [r7, #32]
 8009d3e:	627b      	str	r3, [r7, #36]	; 0x24
  for(int i=0; i< FLASH_MAX_SECTOR; i++)
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	3301      	adds	r3, #1
 8009d44:	623b      	str	r3, [r7, #32]
 8009d46:	6a3b      	ldr	r3, [r7, #32]
 8009d48:	2bff      	cmp	r3, #255	; 0xff
 8009d4a:	dde8      	ble.n	8009d1e <flashErase+0x26>
    }
  }

  if(start_sector >= 0)
 8009d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	db1a      	blt.n	8009d88 <flashErase+0x90>
    HAL_StatusTypeDef status;
    // TypeErase : Mass or Page Erase ,Banks :   Page/PageAddress:  Nbpages:
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t SectorError;
    //@ref FLASH_Type_Erase
    EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8009d52:	2300      	movs	r3, #0
 8009d54:	60fb      	str	r3, [r7, #12]
    //@ref FLASH_Banks  - FLASH_BANK_BOTH  , 1
    EraseInit.Banks = FLASH_BANK_BOTH;
 8009d56:	2303      	movs	r3, #3
 8009d58:	613b      	str	r3, [r7, #16]
    EraseInit.Page = start_sector;    // sector 번호 OR sector address , 확인해야댐 (페이지 번호를 주거나, 지우는 주소를 주거나)
 8009d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5c:	617b      	str	r3, [r7, #20]
    EraseInit.NbPages = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 8009d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	3301      	adds	r3, #1
 8009d66:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 8009d68:	f107 0208 	add.w	r2, r7, #8
 8009d6c:	f107 030c 	add.w	r3, r7, #12
 8009d70:	4611      	mov	r1, r2
 8009d72:	4618      	mov	r0, r3
 8009d74:	f001 fc00 	bl	800b578 <HAL_FLASHEx_Erase>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	77fb      	strb	r3, [r7, #31]
    if(status == HAL_OK)
 8009d7c:	7ffb      	ldrb	r3, [r7, #31]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d102      	bne.n	8009d88 <flashErase+0x90>
    {
     ret = true;
 8009d82:	2301      	movs	r3, #1
 8009d84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }
  HAL_FLASH_Lock();
 8009d88:	f001 fb2c 	bl	800b3e4 <HAL_FLASH_Lock>
  return ret;
 8009d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3730      	adds	r7, #48	; 0x30
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08a      	sub	sp, #40	; 0x28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]

  bool ret = true;
 8009da4:	2301      	movs	r3, #1
 8009da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  HAL_StatusTypeDef status;

  // 주소도 64 bit 설정한 값으로 align 되어있어야한다 (FLASH_TYPEPROGRAM_DOUBLEWORD)
  if(addr%FLASH_WRITE_SIZE != 0) //16bit %2 , double-word (64-bit) %8
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f003 0307 	and.w	r3, r3, #7
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <flashWrite+0x20>
  {
    return false;
 8009db4:	2300      	movs	r3, #0
 8009db6:	e029      	b.n	8009e0c <flashWrite+0x74>
  }
  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Unlock();
 8009db8:	f001 faf2 	bl	800b3a0 <HAL_FLASH_Unlock>
  // erase 와 같은 방법
  for(int i = 0; i < length; i+=FLASH_WRITE_SIZE) // 64bit-8 , 16bit-2
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	623b      	str	r3, [r7, #32]
 8009dc0:	e01c      	b.n	8009dfc <flashWrite+0x64>
  {
    uint64_t data;

    memcpy(&data, &p_data[i], FLASH_WRITE_SIZE);
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	18d1      	adds	r1, r2, r3
 8009dc8:	f107 0310 	add.w	r3, r7, #16
 8009dcc:	2208      	movs	r2, #8
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f00c fdd7 	bl	8016982 <memcpy>
    //data = p_data[i+0] << 0; //처음 data, shift하지 않는다 명시적으로 (<<0)
    //data |= p_data[i+1] << 8;  // 두번쨰 부터는 OR 연산, 8비트 shift

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr + i, data);
 8009dd4:	6a3a      	ldr	r2, [r7, #32]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	18d1      	adds	r1, r2, r3
 8009dda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009dde:	2000      	movs	r0, #0
 8009de0:	f001 fa72 	bl	800b2c8 <HAL_FLASH_Program>
 8009de4:	4603      	mov	r3, r0
 8009de6:	77fb      	strb	r3, [r7, #31]
    if(status != HAL_OK)
 8009de8:	7ffb      	ldrb	r3, [r7, #31]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <flashWrite+0x5e>
    {
      ret = false;
 8009dee:	2300      	movs	r3, #0
 8009df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009df4:	e006      	b.n	8009e04 <flashWrite+0x6c>
  for(int i = 0; i < length; i+=FLASH_WRITE_SIZE) // 64bit-8 , 16bit-2
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	3308      	adds	r3, #8
 8009dfa:	623b      	str	r3, [r7, #32]
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d8de      	bhi.n	8009dc2 <flashWrite+0x2a>
      break;
    }
  }
  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Lock();
 8009e04:	f001 faee 	bl	800b3e4 <HAL_FLASH_Lock>

  return ret;
 8009e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3728      	adds	r7, #40	; 0x28
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <flashRead>:

bool flashRead(uint32_t addr, uint32_t *p_data, uint32_t length)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b089      	sub	sp, #36	; 0x24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8009e20:	2301      	movs	r3, #1
 8009e22:	76fb      	strb	r3, [r7, #27]

  // 1byte 데이터 포인터
  uint8_t *p_byte = (uint8_t *) addr;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	617b      	str	r3, [r7, #20]

  for(int i=0; i < length; i++)
 8009e28:	2300      	movs	r3, #0
 8009e2a:	61fb      	str	r3, [r7, #28]
 8009e2c:	e00c      	b.n	8009e48 <flashRead+0x34>
  {
    p_data[i] = p_byte[i];
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	4413      	add	r3, r2
 8009e34:	7819      	ldrb	r1, [r3, #0]
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	460a      	mov	r2, r1
 8009e40:	601a      	str	r2, [r3, #0]
  for(int i=0; i < length; i++)
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	3301      	adds	r3, #1
 8009e46:	61fb      	str	r3, [r7, #28]
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d8ee      	bhi.n	8009e2e <flashRead+0x1a>
  }


  return ret;
 8009e50:	7efb      	ldrb	r3, [r7, #27]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3724      	adds	r7, #36	; 0x24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <flashInSector>:

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b08b      	sub	sp, #44	; 0x2c
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	4603      	mov	r3, r0
 8009e66:	60b9      	str	r1, [r7, #8]
 8009e68:	607a      	str	r2, [r7, #4]
 8009e6a:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t flash_start;
  uint32_t flash_end;

  //#define FLASH_BASE            (0x08000000UL) /*!< FLASH (up to 512 kB) base address */
  // 0x08000000 부터 find
  sector_start = FLASH_BASE + (sector_num * FLASH_SECTOR_SIZE);
 8009e72:	89fb      	ldrh	r3, [r7, #14]
 8009e74:	02db      	lsls	r3, r3, #11
 8009e76:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8009e7a:	623b      	str	r3, [r7, #32]
  sector_end   = sector_start + FLASH_SECTOR_SIZE - 1;
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
 8009e7e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8009e82:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 8009e92:	6a3a      	ldr	r2, [r7, #32]
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d306      	bcc.n	8009ea8 <flashInSector+0x4a>
 8009e9a:	6a3a      	ldr	r2, [r7, #32]
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d802      	bhi.n	8009ea8 <flashInSector+0x4a>
  {
    ret = true;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8009ea8:	69fa      	ldr	r2, [r7, #28]
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d306      	bcc.n	8009ebe <flashInSector+0x60>
 8009eb0:	69fa      	ldr	r2, [r7, #28]
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d802      	bhi.n	8009ebe <flashInSector+0x60>
  {
    ret = true;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8009ebe:	69ba      	ldr	r2, [r7, #24]
 8009ec0:	6a3b      	ldr	r3, [r7, #32]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d306      	bcc.n	8009ed4 <flashInSector+0x76>
 8009ec6:	69ba      	ldr	r2, [r7, #24]
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d802      	bhi.n	8009ed4 <flashInSector+0x76>
  {
    ret = true;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8009ed4:	697a      	ldr	r2, [r7, #20]
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d306      	bcc.n	8009eea <flashInSector+0x8c>
 8009edc:	697a      	ldr	r2, [r7, #20]
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d802      	bhi.n	8009eea <flashInSector+0x8c>
  {
    ret = true;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 8009eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	372c      	adds	r7, #44	; 0x2c
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
	...

08009efc <ledInit>:
#ifdef _USE_HW_CLI
static void cliLed(cli_args_t *args);
#endif

bool ledInit(void)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b088      	sub	sp, #32
 8009f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8009f02:	f107 0308 	add.w	r3, r7, #8
 8009f06:	2200      	movs	r2, #0
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	605a      	str	r2, [r3, #4]
 8009f0c:	609a      	str	r2, [r3, #8]
 8009f0e:	60da      	str	r2, [r3, #12]
 8009f10:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f12:	4b1c      	ldr	r3, [pc, #112]	; (8009f84 <ledInit+0x88>)
 8009f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f16:	4a1b      	ldr	r2, [pc, #108]	; (8009f84 <ledInit+0x88>)
 8009f18:	f043 0301 	orr.w	r3, r3, #1
 8009f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f1e:	4b19      	ldr	r3, [pc, #100]	; (8009f84 <ledInit+0x88>)
 8009f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	607b      	str	r3, [r7, #4]
 8009f28:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8009f32:	2300      	movs	r3, #0
 8009f34:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 8009f36:	2300      	movs	r3, #0
 8009f38:	61fb      	str	r3, [r7, #28]
 8009f3a:	e017      	b.n	8009f6c <ledInit+0x70>
  {
    GPIO_InitStructure.Pin = led_tbl[i].pin;
 8009f3c:	4a12      	ldr	r2, [pc, #72]	; (8009f88 <ledInit+0x8c>)
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	00db      	lsls	r3, r3, #3
 8009f42:	4413      	add	r3, r2
 8009f44:	889b      	ldrh	r3, [r3, #4]
 8009f46:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 8009f48:	4a0f      	ldr	r2, [pc, #60]	; (8009f88 <ledInit+0x8c>)
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009f50:	f107 0208 	add.w	r2, r7, #8
 8009f54:	4611      	mov	r1, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f001 fc70 	bl	800b83c <HAL_GPIO_Init>

    ledOff(i);
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	4618      	mov	r0, r3
 8009f62:	f000 f837 	bl	8009fd4 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	61fb      	str	r3, [r7, #28]
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	dde4      	ble.n	8009f3c <ledInit+0x40>
  }
#ifdef _USE_HW_CLI
  cliAdd("LED", cliLed);
 8009f72:	4906      	ldr	r1, [pc, #24]	; (8009f8c <ledInit+0x90>)
 8009f74:	4806      	ldr	r0, [pc, #24]	; (8009f90 <ledInit+0x94>)
 8009f76:	f7ff fd8f 	bl	8009a98 <cliAdd>
#endif
  return true;
 8009f7a:	2301      	movs	r3, #1
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3720      	adds	r7, #32
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	40021000 	.word	0x40021000
 8009f88:	08018e14 	.word	0x08018e14
 8009f8c:	0800a071 	.word	0x0800a071
 8009f90:	08018cb4 	.word	0x08018cb4

08009f94 <ledOn>:


void ledOn(uint8_t ch)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8009f9e:	79fb      	ldrb	r3, [r7, #7]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d111      	bne.n	8009fc8 <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8009fa4:	79fb      	ldrb	r3, [r7, #7]
 8009fa6:	4a0a      	ldr	r2, [pc, #40]	; (8009fd0 <ledOn+0x3c>)
 8009fa8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009fac:	79fb      	ldrb	r3, [r7, #7]
 8009fae:	4a08      	ldr	r2, [pc, #32]	; (8009fd0 <ledOn+0x3c>)
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	4413      	add	r3, r2
 8009fb4:	8899      	ldrh	r1, [r3, #4]
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	4a05      	ldr	r2, [pc, #20]	; (8009fd0 <ledOn+0x3c>)
 8009fba:	00db      	lsls	r3, r3, #3
 8009fbc:	4413      	add	r3, r2
 8009fbe:	799b      	ldrb	r3, [r3, #6]
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	f001 fdd5 	bl	800bb70 <HAL_GPIO_WritePin>
 8009fc6:	e000      	b.n	8009fca <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 8009fc8:	bf00      	nop
}
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	08018e14 	.word	0x08018e14

08009fd4 <ledOff>:

void ledOff(uint8_t ch)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8009fde:	79fb      	ldrb	r3, [r7, #7]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10d      	bne.n	800a000 <ledOff+0x2c>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8009fe4:	79fb      	ldrb	r3, [r7, #7]
 8009fe6:	4a08      	ldr	r2, [pc, #32]	; (800a008 <ledOff+0x34>)
 8009fe8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009fec:	79fb      	ldrb	r3, [r7, #7]
 8009fee:	4a06      	ldr	r2, [pc, #24]	; (800a008 <ledOff+0x34>)
 8009ff0:	00db      	lsls	r3, r3, #3
 8009ff2:	4413      	add	r3, r2
 8009ff4:	889b      	ldrh	r3, [r3, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	f001 fdb9 	bl	800bb70 <HAL_GPIO_WritePin>
 8009ffe:	e000      	b.n	800a002 <ledOff+0x2e>
  if (ch >= LED_MAX_CH) return;
 800a000:	bf00      	nop
}
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	08018e14 	.word	0x08018e14

0800a00c <ledToggle>:

void ledToggle(uint8_t ch)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	4603      	mov	r3, r0
 800a014:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800a016:	79fb      	ldrb	r3, [r7, #7]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10d      	bne.n	800a038 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 800a01c:	79fb      	ldrb	r3, [r7, #7]
 800a01e:	4a08      	ldr	r2, [pc, #32]	; (800a040 <ledToggle+0x34>)
 800a020:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a024:	79fb      	ldrb	r3, [r7, #7]
 800a026:	4906      	ldr	r1, [pc, #24]	; (800a040 <ledToggle+0x34>)
 800a028:	00db      	lsls	r3, r3, #3
 800a02a:	440b      	add	r3, r1
 800a02c:	889b      	ldrh	r3, [r3, #4]
 800a02e:	4619      	mov	r1, r3
 800a030:	4610      	mov	r0, r2
 800a032:	f001 fdb5 	bl	800bba0 <HAL_GPIO_TogglePin>
 800a036:	e000      	b.n	800a03a <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 800a038:	bf00      	nop
}
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	08018e14 	.word	0x08018e14

0800a044 <gpio_out_toggle>:
  gpio->ODR &= ~(GPIO_Pin);
}

//
void gpio_out_toggle(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	460b      	mov	r3, r1
 800a04e:	807b      	strh	r3, [r7, #2]
  GPIO_TypeDef *gpio = (void*)GPIOA_BASE;
 800a050:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a054:	60fb      	str	r3, [r7, #12]
  gpio->ODR ^= GPIO_Pin;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	695a      	ldr	r2, [r3, #20]
 800a05a:	887b      	ldrh	r3, [r7, #2]
 800a05c:	405a      	eors	r2, r3
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	615a      	str	r2, [r3, #20]
}
 800a062:	bf00      	nop
 800a064:	3714      	adds	r7, #20
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
	...

0800a070 <cliLed>:

#ifdef _USE_HW_CLI
void cliLed(cli_args_t *args)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800a078:	2300      	movs	r3, #0
 800a07a:	75fb      	strb	r3, [r7, #23]

  if (args-> argc == 2 && args->isStr(0, "on") == true)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	881b      	ldrh	r3, [r3, #0]
 800a080:	2b02      	cmp	r3, #2
 800a082:	d11e      	bne.n	800a0c2 <cliLed+0x52>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	4944      	ldr	r1, [pc, #272]	; (800a19c <cliLed+0x12c>)
 800a08a:	2000      	movs	r0, #0
 800a08c:	4798      	blx	r3
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d016      	beq.n	800a0c2 <cliLed+0x52>
  {
    uint8_t led_ch;

    led_ch = args->getData(1);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	2001      	movs	r0, #1
 800a09a:	4798      	blx	r3
 800a09c:	4603      	mov	r3, r0
 800a09e:	75bb      	strb	r3, [r7, #22]

    if(led_ch > 0)
 800a0a0:	7dbb      	ldrb	r3, [r7, #22]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d007      	beq.n	800a0b6 <cliLed+0x46>
    {
      led_ch--;
 800a0a6:	7dbb      	ldrb	r3, [r7, #22]
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	75bb      	strb	r3, [r7, #22]
    }
    while(cliKeepLoop())
 800a0ac:	e003      	b.n	800a0b6 <cliLed+0x46>
    {
      ledOn(led_ch);
 800a0ae:	7dbb      	ldrb	r3, [r7, #22]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7ff ff6f 	bl	8009f94 <ledOn>
    while(cliKeepLoop())
 800a0b6:	f7ff fcd9 	bl	8009a6c <cliKeepLoop>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1f6      	bne.n	800a0ae <cliLed+0x3e>
  {
 800a0c0:	e05a      	b.n	800a178 <cliLed+0x108>
    }
  }
  else if (args-> argc == 2 && args->isStr(0, "off") == true)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	881b      	ldrh	r3, [r3, #0]
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d11e      	bne.n	800a108 <cliLed+0x98>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	4934      	ldr	r1, [pc, #208]	; (800a1a0 <cliLed+0x130>)
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	4798      	blx	r3
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d016      	beq.n	800a108 <cliLed+0x98>
    {
      uint8_t led_ch;

      led_ch = args->getData(1);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	2001      	movs	r0, #1
 800a0e0:	4798      	blx	r3
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	757b      	strb	r3, [r7, #21]

      if(led_ch > 0)
 800a0e6:	7d7b      	ldrb	r3, [r7, #21]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d007      	beq.n	800a0fc <cliLed+0x8c>
      {
        led_ch--;
 800a0ec:	7d7b      	ldrb	r3, [r7, #21]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	757b      	strb	r3, [r7, #21]
      }
      while(cliKeepLoop())
 800a0f2:	e003      	b.n	800a0fc <cliLed+0x8c>
      {
        ledOff(led_ch);
 800a0f4:	7d7b      	ldrb	r3, [r7, #21]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7ff ff6c 	bl	8009fd4 <ledOff>
      while(cliKeepLoop())
 800a0fc:	f7ff fcb6 	bl	8009a6c <cliKeepLoop>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1f6      	bne.n	800a0f4 <cliLed+0x84>
    {
 800a106:	e037      	b.n	800a178 <cliLed+0x108>
      }
    }
  else if (args->argc == 3 && args->isStr(0, "toggle") == true)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	2b03      	cmp	r3, #3
 800a10e:	d133      	bne.n	800a178 <cliLed+0x108>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	4923      	ldr	r1, [pc, #140]	; (800a1a4 <cliLed+0x134>)
 800a116:	2000      	movs	r0, #0
 800a118:	4798      	blx	r3
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d02b      	beq.n	800a178 <cliLed+0x108>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = args->getData(1);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	2001      	movs	r0, #1
 800a126:	4798      	blx	r3
 800a128:	4603      	mov	r3, r0
 800a12a:	753b      	strb	r3, [r7, #20]
    toggle_time = args->getData(2);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	2002      	movs	r0, #2
 800a132:	4798      	blx	r3
 800a134:	4603      	mov	r3, r0
 800a136:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 800a138:	7d3b      	ldrb	r3, [r7, #20]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d002      	beq.n	800a144 <cliLed+0xd4>
    {
      led_ch--;
 800a13e:	7d3b      	ldrb	r3, [r7, #20]
 800a140:	3b01      	subs	r3, #1
 800a142:	753b      	strb	r3, [r7, #20]
    }

    pre_time = millis();
 800a144:	f7fe fc6f 	bl	8008a26 <millis>
 800a148:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 800a14a:	e00e      	b.n	800a16a <cliLed+0xfa>
    {
      if (millis()-pre_time >= toggle_time)
 800a14c:	f7fe fc6b 	bl	8008a26 <millis>
 800a150:	4602      	mov	r2, r0
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d806      	bhi.n	800a16a <cliLed+0xfa>
      {
        pre_time = millis();
 800a15c:	f7fe fc63 	bl	8008a26 <millis>
 800a160:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 800a162:	7d3b      	ldrb	r3, [r7, #20]
 800a164:	4618      	mov	r0, r3
 800a166:	f7ff ff51 	bl	800a00c <ledToggle>
    while(cliKeepLoop())
 800a16a:	f7ff fc7f 	bl	8009a6c <cliKeepLoop>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1eb      	bne.n	800a14c <cliLed+0xdc>
      }
    }
    ret = true;
 800a174:	2301      	movs	r3, #1
 800a176:	75fb      	strb	r3, [r7, #23]
  }
  if (ret != true)
 800a178:	7dfb      	ldrb	r3, [r7, #23]
 800a17a:	f083 0301 	eor.w	r3, r3, #1
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b00      	cmp	r3, #0
 800a182:	d007      	beq.n	800a194 <cliLed+0x124>
  {
    cliPrintf("led On/Off ch[1~%d]\n", LED_MAX_CH);
 800a184:	2101      	movs	r1, #1
 800a186:	4808      	ldr	r0, [pc, #32]	; (800a1a8 <cliLed+0x138>)
 800a188:	f7ff fb76 	bl	8009878 <cliPrintf>
    cliPrintf("led toggle ch[1~%d] time(ms)\n", LED_MAX_CH);
 800a18c:	2101      	movs	r1, #1
 800a18e:	4807      	ldr	r0, [pc, #28]	; (800a1ac <cliLed+0x13c>)
 800a190:	f7ff fb72 	bl	8009878 <cliPrintf>
  }
}
 800a194:	bf00      	nop
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	08018cb8 	.word	0x08018cb8
 800a1a0:	08018cbc 	.word	0x08018cbc
 800a1a4:	08018cc0 	.word	0x08018cc0
 800a1a8:	08018cc8 	.word	0x08018cc8
 800a1ac:	08018ce0 	.word	0x08018ce0

0800a1b0 <logInit>:
static osMutexId mutex_lock;
#endif


bool logInit(void)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	af00      	add	r7, sp, #0
#ifdef _USE_HW_ROTS
  osMutexDef(mutex_lock);
  mutex_lock = osMutexCreate (osMutex(mutex_lock));
#endif

  return true;
 800a1b4:	2301      	movs	r3, #1
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <logPrintf>:

void logPrintf(const char *fmt, ...)
{
 800a1c0:	b40f      	push	{r0, r1, r2, r3}
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b082      	sub	sp, #8
 800a1c6:	af00      	add	r7, sp, #0
#endif

  va_list args;
  int len;

  va_start(args, fmt);
 800a1c8:	f107 0314 	add.w	r3, r7, #20
 800a1cc:	603b      	str	r3, [r7, #0]
  len = vsnprintf(print_buf, 256, fmt, args);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a1d6:	4809      	ldr	r0, [pc, #36]	; (800a1fc <logPrintf+0x3c>)
 800a1d8:	f00c fb30 	bl	801683c <vsniprintf>
 800a1dc:	6078      	str	r0, [r7, #4]

  uartWrite(log_ch, (uint8_t *)print_buf, len);
 800a1de:	4b08      	ldr	r3, [pc, #32]	; (800a200 <logPrintf+0x40>)
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	4905      	ldr	r1, [pc, #20]	; (800a1fc <logPrintf+0x3c>)
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 fb02 	bl	800a7f0 <uartWrite>
  va_end(args);

#ifdef _USE_HW_ROTS
  osMutexRelease(mutex_lock);
#endif
}
 800a1ec:	bf00      	nop
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1f6:	b004      	add	sp, #16
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	2000083c 	.word	0x2000083c
 800a200:	20000838 	.word	0x20000838

0800a204 <resetInit>:
  }
}


bool resetInit(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
  bool ret = true;
 800a20a:	2301      	movs	r3, #1
 800a20c:	71bb      	strb	r3, [r7, #6]
  bool is_debug = false;
 800a20e:	2300      	movs	r3, #0
 800a210:	71fb      	strb	r3, [r7, #7]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 800a212:	4b1c      	ldr	r3, [pc, #112]	; (800a284 <resetInit+0x80>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <resetInit+0x1e>
  {
    is_debug = true;
 800a21e:	2301      	movs	r3, #1
 800a220:	71fb      	strb	r3, [r7, #7]
  }

  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if (RCC->CSR & (1<<26) && is_debug != true)
 800a222:	4b19      	ldr	r3, [pc, #100]	; (800a288 <resetInit+0x84>)
 800a224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d01f      	beq.n	800a270 <resetInit+0x6c>
 800a230:	79fb      	ldrb	r3, [r7, #7]
 800a232:	f083 0301 	eor.w	r3, r3, #1
 800a236:	b2db      	uxtb	r3, r3
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d019      	beq.n	800a270 <resetInit+0x6c>
  if(RCC->CSR & (1<<26))
 800a23c:	4b12      	ldr	r3, [pc, #72]	; (800a288 <resetInit+0x84>)
 800a23e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a242:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d012      	beq.n	800a270 <resetInit+0x6c>
  {
    rtcBackupRegWrite(RESET_REG_COUNT, rtcBackupRegRead(RESET_REG_COUNT) + 1);
 800a24a:	2001      	movs	r0, #1
 800a24c:	f000 f8a2 	bl	800a394 <rtcBackupRegRead>
 800a250:	4603      	mov	r3, r0
 800a252:	3301      	adds	r3, #1
 800a254:	4619      	mov	r1, r3
 800a256:	2001      	movs	r0, #1
 800a258:	f000 f8ac 	bl	800a3b4 <rtcBackupRegWrite>
    delay(500); // 500 m delay
 800a25c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a260:	f7fe fbd6 	bl	8008a10 <delay>
    reset_count = rtcBackupRegRead(RESET_REG_COUNT);
 800a264:	2001      	movs	r0, #1
 800a266:	f000 f895 	bl	800a394 <rtcBackupRegRead>
 800a26a:	4603      	mov	r3, r0
 800a26c:	4a07      	ldr	r2, [pc, #28]	; (800a28c <resetInit+0x88>)
 800a26e:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  rtcBackupRegWrite(RESET_REG_COUNT, 0);
 800a270:	2100      	movs	r1, #0
 800a272:	2001      	movs	r0, #1
 800a274:	f000 f89e 	bl	800a3b4 <rtcBackupRegWrite>

  return ret;
 800a278:	79bb      	ldrb	r3, [r7, #6]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	e000edf0 	.word	0xe000edf0
 800a288:	40021000 	.word	0x40021000
 800a28c:	2000093c 	.word	0x2000093c

0800a290 <resetGetCount>:

uint32_t resetGetCount(void)
{
 800a290:	b480      	push	{r7}
 800a292:	af00      	add	r7, sp, #0
  return reset_count;
 800a294:	4b03      	ldr	r3, [pc, #12]	; (800a2a4 <resetGetCount+0x14>)
 800a296:	681b      	ldr	r3, [r3, #0]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	2000093c 	.word	0x2000093c

0800a2a8 <resetToSystemBoot>:
    run_timeout_count = timeout;
  }
}

void resetToSystemBoot(void)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
  void (*SysMemBootJump)(void);
  volatile uint32_t addr = 0x1FFF0000; // System Boot Loader 주소
 800a2ae:	4b1d      	ldr	r3, [pc, #116]	; (800a324 <resetToSystemBoot+0x7c>)
 800a2b0:	603b      	str	r3, [r7, #0]


  HAL_RCC_DeInit();
 800a2b2:	f003 fa77 	bl	800d7a4 <HAL_RCC_DeInit>

  SysTick->CTRL = 0;
 800a2b6:	4b1c      	ldr	r3, [pc, #112]	; (800a328 <resetToSystemBoot+0x80>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 800a2bc:	4b1a      	ldr	r3, [pc, #104]	; (800a328 <resetToSystemBoot+0x80>)
 800a2be:	2200      	movs	r2, #0
 800a2c0:	605a      	str	r2, [r3, #4]
  SysTick->VAL  = 0;
 800a2c2:	4b19      	ldr	r3, [pc, #100]	; (800a328 <resetToSystemBoot+0x80>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	609a      	str	r2, [r3, #8]

  // 인터럽트
  for (int i=0;i<8;i++)
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	60fb      	str	r3, [r7, #12]
 800a2cc:	e016      	b.n	800a2fc <resetToSystemBoot+0x54>
  {
    NVIC->ICER[i]=0xFFFFFFFF;
 800a2ce:	4a17      	ldr	r2, [pc, #92]	; (800a32c <resetToSystemBoot+0x84>)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	3320      	adds	r3, #32
 800a2d4:	f04f 31ff 	mov.w	r1, #4294967295
 800a2d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NVIC->ICPR[i]=0xFFFFFFFF;
 800a2dc:	4a13      	ldr	r2, [pc, #76]	; (800a32c <resetToSystemBoot+0x84>)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3360      	adds	r3, #96	; 0x60
 800a2e2:	f04f 31ff 	mov.w	r1, #4294967295
 800a2e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a2ea:	f3bf 8f4f 	dsb	sy
}
 800a2ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a2f0:	f3bf 8f6f 	isb	sy
}
 800a2f4:	bf00      	nop
  for (int i=0;i<8;i++)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	60fb      	str	r3, [r7, #12]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2b07      	cmp	r3, #7
 800a300:	dde5      	ble.n	800a2ce <resetToSystemBoot+0x26>
    __DSB();
    __ISB();
  }

  SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	3304      	adds	r3, #4
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	60bb      	str	r3, [r7, #8]

  // Main Stack 주소 셋팅
  __set_MSP(*(uint32_t *)addr);
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f383 8808 	msr	MSP, r3
}
 800a316:	bf00      	nop
  // Jump
  SysMemBootJump();
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	4798      	blx	r3
}
 800a31c:	bf00      	nop
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	1fff0000 	.word	0x1fff0000
 800a328:	e000e010 	.word	0xe000e010
 800a32c:	e000e100 	.word	0xe000e100

0800a330 <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
  bool ret = true;
 800a336:	2301      	movs	r3, #1
 800a338:	71fb      	strb	r3, [r7, #7]


  hrtc.Instance = RTC;
 800a33a:	4b14      	ldr	r3, [pc, #80]	; (800a38c <rtcInit+0x5c>)
 800a33c:	4a14      	ldr	r2, [pc, #80]	; (800a390 <rtcInit+0x60>)
 800a33e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a340:	4b12      	ldr	r3, [pc, #72]	; (800a38c <rtcInit+0x5c>)
 800a342:	2200      	movs	r2, #0
 800a344:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a346:	4b11      	ldr	r3, [pc, #68]	; (800a38c <rtcInit+0x5c>)
 800a348:	227f      	movs	r2, #127	; 0x7f
 800a34a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a34c:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <rtcInit+0x5c>)
 800a34e:	22ff      	movs	r2, #255	; 0xff
 800a350:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a352:	4b0e      	ldr	r3, [pc, #56]	; (800a38c <rtcInit+0x5c>)
 800a354:	2200      	movs	r2, #0
 800a356:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a358:	4b0c      	ldr	r3, [pc, #48]	; (800a38c <rtcInit+0x5c>)
 800a35a:	2200      	movs	r2, #0
 800a35c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a35e:	4b0b      	ldr	r3, [pc, #44]	; (800a38c <rtcInit+0x5c>)
 800a360:	2200      	movs	r2, #0
 800a362:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a364:	4b09      	ldr	r3, [pc, #36]	; (800a38c <rtcInit+0x5c>)
 800a366:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a36a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800a36c:	4b07      	ldr	r3, [pc, #28]	; (800a38c <rtcInit+0x5c>)
 800a36e:	2200      	movs	r2, #0
 800a370:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a372:	4806      	ldr	r0, [pc, #24]	; (800a38c <rtcInit+0x5c>)
 800a374:	f004 fa14 	bl	800e7a0 <HAL_RTC_Init>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <rtcInit+0x52>
  {
    return false;
 800a37e:	2300      	movs	r3, #0
 800a380:	e000      	b.n	800a384 <rtcInit+0x54>
  }

  return ret;
 800a382:	79fb      	ldrb	r3, [r7, #7]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	20000940 	.word	0x20000940
 800a390:	40002800 	.word	0x40002800

0800a394 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 800a39c:	6879      	ldr	r1, [r7, #4]
 800a39e:	4804      	ldr	r0, [pc, #16]	; (800a3b0 <rtcBackupRegRead+0x1c>)
 800a3a0:	f004 fb34 	bl	800ea0c <HAL_RTCEx_BKUPRead>
 800a3a4:	4603      	mov	r3, r0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20000940 	.word	0x20000940

0800a3b4 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800a3be:	683a      	ldr	r2, [r7, #0]
 800a3c0:	6879      	ldr	r1, [r7, #4]
 800a3c2:	4803      	ldr	r0, [pc, #12]	; (800a3d0 <rtcBackupRegWrite+0x1c>)
 800a3c4:	f004 fb0a 	bl	800e9dc <HAL_RTCEx_BKUPWrite>
}
 800a3c8:	bf00      	nop
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	20000940 	.word	0x20000940

0800a3d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b098      	sub	sp, #96	; 0x60
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a3dc:	f107 030c 	add.w	r3, r7, #12
 800a3e0:	2254      	movs	r2, #84	; 0x54
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f00c fa37 	bl	8016858 <memset>
  if(rtcHandle->Instance==RTC)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a15      	ldr	r2, [pc, #84]	; (800a444 <HAL_RTC_MspInit+0x70>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d123      	bne.n	800a43c <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a3f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a3f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a3fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a400:	f107 030c 	add.w	r3, r7, #12
 800a404:	4618      	mov	r0, r3
 800a406:	f003 ff7d 	bl	800e304 <HAL_RCCEx_PeriphCLKConfig>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d001      	beq.n	800a414 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800a410:	f7fe fb6a 	bl	8008ae8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a414:	4b0c      	ldr	r3, [pc, #48]	; (800a448 <HAL_RTC_MspInit+0x74>)
 800a416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a41a:	4a0b      	ldr	r2, [pc, #44]	; (800a448 <HAL_RTC_MspInit+0x74>)
 800a41c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a424:	4b08      	ldr	r3, [pc, #32]	; (800a448 <HAL_RTC_MspInit+0x74>)
 800a426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a428:	4a07      	ldr	r2, [pc, #28]	; (800a448 <HAL_RTC_MspInit+0x74>)
 800a42a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a42e:	6593      	str	r3, [r2, #88]	; 0x58
 800a430:	4b05      	ldr	r3, [pc, #20]	; (800a448 <HAL_RTC_MspInit+0x74>)
 800a432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a438:	60bb      	str	r3, [r7, #8]
 800a43a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800a43c:	bf00      	nop
 800a43e:	3760      	adds	r7, #96	; 0x60
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	40002800 	.word	0x40002800
 800a448:	40021000 	.word	0x40021000

0800a44c <swtimerInit>:
//-- External Functions
//


bool swtimerInit(void)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t excute = 0;


  if (excute == 1)
 800a452:	4b20      	ldr	r3, [pc, #128]	; (800a4d4 <swtimerInit+0x88>)
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d101      	bne.n	800a45e <swtimerInit+0x12>
  {
    return false;  // 이미 한번 실행했다면 정지.
 800a45a:	2300      	movs	r3, #0
 800a45c:	e033      	b.n	800a4c6 <swtimerInit+0x7a>
  }


  // 구조체 초기화
  for(i=0; i<_DEF_SW_TIMER_MAX; i++)
 800a45e:	2300      	movs	r3, #0
 800a460:	71fb      	strb	r3, [r7, #7]
 800a462:	e029      	b.n	800a4b8 <swtimerInit+0x6c>
  {
    swtimer_tbl[i].Timer_En   = OFF;
 800a464:	79fa      	ldrb	r2, [r7, #7]
 800a466:	491c      	ldr	r1, [pc, #112]	; (800a4d8 <swtimerInit+0x8c>)
 800a468:	4613      	mov	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4413      	add	r3, r2
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	440b      	add	r3, r1
 800a472:	2200      	movs	r2, #0
 800a474:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Ctn  = 0;
 800a476:	79fa      	ldrb	r2, [r7, #7]
 800a478:	4917      	ldr	r1, [pc, #92]	; (800a4d8 <swtimerInit+0x8c>)
 800a47a:	4613      	mov	r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	4413      	add	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	440b      	add	r3, r1
 800a484:	3304      	adds	r3, #4
 800a486:	2200      	movs	r2, #0
 800a488:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init = 0;
 800a48a:	79fa      	ldrb	r2, [r7, #7]
 800a48c:	4912      	ldr	r1, [pc, #72]	; (800a4d8 <swtimerInit+0x8c>)
 800a48e:	4613      	mov	r3, r2
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	440b      	add	r3, r1
 800a498:	3308      	adds	r3, #8
 800a49a:	2200      	movs	r2, #0
 800a49c:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFnct    = NULL;
 800a49e:	79fa      	ldrb	r2, [r7, #7]
 800a4a0:	490d      	ldr	r1, [pc, #52]	; (800a4d8 <swtimerInit+0x8c>)
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	440b      	add	r3, r1
 800a4ac:	330c      	adds	r3, #12
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	601a      	str	r2, [r3, #0]
  for(i=0; i<_DEF_SW_TIMER_MAX; i++)
 800a4b2:	79fb      	ldrb	r3, [r7, #7]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	71fb      	strb	r3, [r7, #7]
 800a4b8:	79fb      	ldrb	r3, [r7, #7]
 800a4ba:	2b03      	cmp	r3, #3
 800a4bc:	d9d2      	bls.n	800a464 <swtimerInit+0x18>
  }

  excute = 1;
 800a4be:	4b05      	ldr	r3, [pc, #20]	; (800a4d4 <swtimerInit+0x88>)
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	701a      	strb	r2, [r3, #0]

  return true;
 800a4c4:	2301      	movs	r3, #1
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	200009bc 	.word	0x200009bc
 800a4d8:	2000096c 	.word	0x2000096c

0800a4dc <swtimerSet>:
  }

}

void swtimerSet(swtimer_handle_t TmrNum, uint32_t TmrData, uint8_t TmrMode, void (*Fnct)(void *),void *arg)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60b9      	str	r1, [r7, #8]
 800a4e4:	607b      	str	r3, [r7, #4]
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	81fb      	strh	r3, [r7, #14]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	737b      	strb	r3, [r7, #13]
  if(TmrNum < 0) return;
 800a4ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	db37      	blt.n	800a566 <swtimerSet+0x8a>

  swtimer_tbl[TmrNum].Timer_Mode = TmrMode;    // 모드설정
 800a4f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a4fa:	491e      	ldr	r1, [pc, #120]	; (800a574 <swtimerSet+0x98>)
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4413      	add	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	440b      	add	r3, r1
 800a506:	3301      	adds	r3, #1
 800a508:	7b7a      	ldrb	r2, [r7, #13]
 800a50a:	701a      	strb	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 800a50c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a510:	4918      	ldr	r1, [pc, #96]	; (800a574 <swtimerSet+0x98>)
 800a512:	4613      	mov	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	440b      	add	r3, r1
 800a51c:	330c      	adds	r3, #12
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 800a522:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a526:	4913      	ldr	r1, [pc, #76]	; (800a574 <swtimerSet+0x98>)
 800a528:	4613      	mov	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	440b      	add	r3, r1
 800a532:	3310      	adds	r3, #16
 800a534:	69ba      	ldr	r2, [r7, #24]
 800a536:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Ctn  = TmrData;
 800a538:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a53c:	490d      	ldr	r1, [pc, #52]	; (800a574 <swtimerSet+0x98>)
 800a53e:	4613      	mov	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	440b      	add	r3, r1
 800a548:	3304      	adds	r3, #4
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Init = TmrData;
 800a54e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a552:	4908      	ldr	r1, [pc, #32]	; (800a574 <swtimerSet+0x98>)
 800a554:	4613      	mov	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4413      	add	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	440b      	add	r3, r1
 800a55e:	3308      	adds	r3, #8
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	601a      	str	r2, [r3, #0]
 800a564:	e000      	b.n	800a568 <swtimerSet+0x8c>
  if(TmrNum < 0) return;
 800a566:	bf00      	nop
}
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	2000096c 	.word	0x2000096c

0800a578 <swtimerStart>:

void swtimerStart(swtimer_handle_t TmrNum)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	4603      	mov	r3, r0
 800a580:	80fb      	strh	r3, [r7, #6]
  if(TmrNum < 0) return;
 800a582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a586:	2b00      	cmp	r3, #0
 800a588:	db1e      	blt.n	800a5c8 <swtimerStart+0x50>

  swtimer_tbl[TmrNum].Timer_Ctn = swtimer_tbl[TmrNum].Timer_Init;
 800a58a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800a58e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a592:	4810      	ldr	r0, [pc, #64]	; (800a5d4 <swtimerStart+0x5c>)
 800a594:	460b      	mov	r3, r1
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	440b      	add	r3, r1
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	4403      	add	r3, r0
 800a59e:	3308      	adds	r3, #8
 800a5a0:	6819      	ldr	r1, [r3, #0]
 800a5a2:	480c      	ldr	r0, [pc, #48]	; (800a5d4 <swtimerStart+0x5c>)
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4403      	add	r3, r0
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	6019      	str	r1, [r3, #0]
  swtimer_tbl[TmrNum].Timer_En  = ON;
 800a5b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a5b6:	4907      	ldr	r1, [pc, #28]	; (800a5d4 <swtimerStart+0x5c>)
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	4413      	add	r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	440b      	add	r3, r1
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	701a      	strb	r2, [r3, #0]
 800a5c6:	e000      	b.n	800a5ca <swtimerStart+0x52>
  if(TmrNum < 0) return;
 800a5c8:	bf00      	nop
}
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr
 800a5d4:	2000096c 	.word	0x2000096c

0800a5d8 <swtimerGetHandle>:
  swtimer_tbl[TmrNum].Timer_Ctn  = swtimer_tbl[TmrNum].Timer_Init;
}

// handler 할당
swtimer_handle_t swtimerGetHandle(void)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
  swtimer_handle_t TmrIndex = sw_timer_handle_index;
 800a5de:	4b0d      	ldr	r3, [pc, #52]	; (800a614 <swtimerGetHandle+0x3c>)
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	80fb      	strh	r3, [r7, #6]

  if (TmrIndex < _DEF_SW_TIMER_MAX)
 800a5e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a5ea:	2b03      	cmp	r3, #3
 800a5ec:	dc07      	bgt.n	800a5fe <swtimerGetHandle+0x26>
    sw_timer_handle_index++;
 800a5ee:	4b09      	ldr	r3, [pc, #36]	; (800a614 <swtimerGetHandle+0x3c>)
 800a5f0:	881b      	ldrh	r3, [r3, #0]
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	4b06      	ldr	r3, [pc, #24]	; (800a614 <swtimerGetHandle+0x3c>)
 800a5fa:	801a      	strh	r2, [r3, #0]
 800a5fc:	e002      	b.n	800a604 <swtimerGetHandle+0x2c>
  else
    TmrIndex = -1;
 800a5fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a602:	80fb      	strh	r3, [r7, #6]

  return TmrIndex;
 800a604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	20000968 	.word	0x20000968

0800a618 <uartInit>:
UART_HandleTypeDef huart1;



bool uartInit(void)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
  for(int i = 0; i <UART_MAX_CH; i++)
 800a61e:	2300      	movs	r3, #0
 800a620:	607b      	str	r3, [r7, #4]
 800a622:	e007      	b.n	800a634 <uartInit+0x1c>
  {
    is_open[i] = false;
 800a624:	4a08      	ldr	r2, [pc, #32]	; (800a648 <uartInit+0x30>)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4413      	add	r3, r2
 800a62a:	2200      	movs	r2, #0
 800a62c:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i <UART_MAX_CH; i++)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	3301      	adds	r3, #1
 800a632:	607b      	str	r3, [r7, #4]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	ddf4      	ble.n	800a624 <uartInit+0xc>
  }

  return true;
 800a63a:	2301      	movs	r3, #1
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr
 800a648:	200009c0 	.word	0x200009c0

0800a64c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	4603      	mov	r3, r0
 800a654:	6039      	str	r1, [r7, #0]
 800a656:	71fb      	strb	r3, [r7, #7]
  bool ret =false;
 800a658:	2300      	movs	r3, #0
 800a65a:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 800a65c:	79fb      	ldrb	r3, [r7, #7]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d176      	bne.n	800a750 <uartOpen+0x104>
  {
    case _DEF_UART1:
      huart1.Instance = USART1;
 800a662:	4b3e      	ldr	r3, [pc, #248]	; (800a75c <uartOpen+0x110>)
 800a664:	4a3e      	ldr	r2, [pc, #248]	; (800a760 <uartOpen+0x114>)
 800a666:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 800a668:	4a3c      	ldr	r2, [pc, #240]	; (800a75c <uartOpen+0x110>)
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	6053      	str	r3, [r2, #4]
      huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a66e:	4b3b      	ldr	r3, [pc, #236]	; (800a75c <uartOpen+0x110>)
 800a670:	2200      	movs	r2, #0
 800a672:	625a      	str	r2, [r3, #36]	; 0x24
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a674:	4b39      	ldr	r3, [pc, #228]	; (800a75c <uartOpen+0x110>)
 800a676:	2200      	movs	r2, #0
 800a678:	619a      	str	r2, [r3, #24]
      huart1.Init.Mode = UART_MODE_TX_RX;
 800a67a:	4b38      	ldr	r3, [pc, #224]	; (800a75c <uartOpen+0x110>)
 800a67c:	220c      	movs	r2, #12
 800a67e:	615a      	str	r2, [r3, #20]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a680:	4b36      	ldr	r3, [pc, #216]	; (800a75c <uartOpen+0x110>)
 800a682:	2200      	movs	r2, #0
 800a684:	61da      	str	r2, [r3, #28]
      huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a686:	4b35      	ldr	r3, [pc, #212]	; (800a75c <uartOpen+0x110>)
 800a688:	2200      	movs	r2, #0
 800a68a:	621a      	str	r2, [r3, #32]
      huart1.Init.Parity = UART_PARITY_NONE;
 800a68c:	4b33      	ldr	r3, [pc, #204]	; (800a75c <uartOpen+0x110>)
 800a68e:	2200      	movs	r2, #0
 800a690:	611a      	str	r2, [r3, #16]
      huart1.Init.StopBits = UART_STOPBITS_1;
 800a692:	4b32      	ldr	r3, [pc, #200]	; (800a75c <uartOpen+0x110>)
 800a694:	2200      	movs	r2, #0
 800a696:	60da      	str	r2, [r3, #12]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a698:	4b30      	ldr	r3, [pc, #192]	; (800a75c <uartOpen+0x110>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	609a      	str	r2, [r3, #8]
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a69e:	4b2f      	ldr	r3, [pc, #188]	; (800a75c <uartOpen+0x110>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	629a      	str	r2, [r3, #40]	; 0x28
      qbufferCreate(&qbuffer[ch],&rx_buf[ch], 256); // 수신 버퍼 생성
 800a6a4:	79fa      	ldrb	r2, [r7, #7]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4a2d      	ldr	r2, [pc, #180]	; (800a764 <uartOpen+0x118>)
 800a6b0:	1898      	adds	r0, r3, r2
 800a6b2:	79fb      	ldrb	r3, [r7, #7]
 800a6b4:	4a2c      	ldr	r2, [pc, #176]	; (800a768 <uartOpen+0x11c>)
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6bc:	4619      	mov	r1, r3
 800a6be:	f7fe fb82 	bl	8008dc6 <qbufferCreate>
      if (HAL_UART_Init(&huart1) != HAL_OK)
 800a6c2:	4826      	ldr	r0, [pc, #152]	; (800a75c <uartOpen+0x110>)
 800a6c4:	f004 f9b8 	bl	800ea38 <HAL_UART_Init>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d002      	beq.n	800a6d4 <uartOpen+0x88>
      {
        ret = false;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	73fb      	strb	r3, [r7, #15]
 800a6d2:	e016      	b.n	800a702 <uartOpen+0xb6>
      }
      else
      {
        ret = true;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 800a6d8:	79fb      	ldrb	r3, [r7, #7]
 800a6da:	4a24      	ldr	r2, [pc, #144]	; (800a76c <uartOpen+0x120>)
 800a6dc:	2101      	movs	r1, #1
 800a6de:	54d1      	strb	r1, [r2, r3]
        // 수신용 데이터 버퍼 (rx_data)에 size 만큼 받아서 HAL_UART_RxCpltCallback 함수 호출
        if(HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[ch], 1) != HAL_OK)
 800a6e0:	79fb      	ldrb	r3, [r7, #7]
 800a6e2:	4a23      	ldr	r2, [pc, #140]	; (800a770 <uartOpen+0x124>)
 800a6e4:	4413      	add	r3, r2
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	481c      	ldr	r0, [pc, #112]	; (800a75c <uartOpen+0x110>)
 800a6ec:	f004 fa82 	bl	800ebf4 <HAL_UART_Receive_IT>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d005      	beq.n	800a702 <uartOpen+0xb6>
        {
         ret = false;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	73fb      	strb	r3, [r7, #15]
         is_open[ch] = false;
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	4a1b      	ldr	r2, [pc, #108]	; (800a76c <uartOpen+0x120>)
 800a6fe:	2100      	movs	r1, #0
 800a700:	54d1      	strb	r1, [r2, r3]
        }
      }
      if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a702:	2100      	movs	r1, #0
 800a704:	4815      	ldr	r0, [pc, #84]	; (800a75c <uartOpen+0x110>)
 800a706:	f006 f9ee 	bl	8010ae6 <HAL_UARTEx_SetTxFifoThreshold>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d005      	beq.n	800a71c <uartOpen+0xd0>
      {
        ret = false;
 800a710:	2300      	movs	r3, #0
 800a712:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 800a714:	79fb      	ldrb	r3, [r7, #7]
 800a716:	4a15      	ldr	r2, [pc, #84]	; (800a76c <uartOpen+0x120>)
 800a718:	2100      	movs	r1, #0
 800a71a:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a71c:	2100      	movs	r1, #0
 800a71e:	480f      	ldr	r0, [pc, #60]	; (800a75c <uartOpen+0x110>)
 800a720:	f006 fa1f 	bl	8010b62 <HAL_UARTEx_SetRxFifoThreshold>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d005      	beq.n	800a736 <uartOpen+0xea>
      {
        ret = false;
 800a72a:	2300      	movs	r3, #0
 800a72c:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	4a0e      	ldr	r2, [pc, #56]	; (800a76c <uartOpen+0x120>)
 800a732:	2100      	movs	r1, #0
 800a734:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800a736:	4809      	ldr	r0, [pc, #36]	; (800a75c <uartOpen+0x110>)
 800a738:	f006 f99c 	bl	8010a74 <HAL_UARTEx_DisableFifoMode>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d005      	beq.n	800a74e <uartOpen+0x102>
      {
        ret = false;
 800a742:	2300      	movs	r3, #0
 800a744:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	4a08      	ldr	r2, [pc, #32]	; (800a76c <uartOpen+0x120>)
 800a74a:	2100      	movs	r1, #0
 800a74c:	54d1      	strb	r1, [r2, r3]
      }
      break;
 800a74e:	bf00      	nop
  }


  return ret;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	20000adc 	.word	0x20000adc
 800a760:	40013800 	.word	0x40013800
 800a764:	200009c4 	.word	0x200009c4
 800a768:	200009d8 	.word	0x200009d8
 800a76c:	200009c0 	.word	0x200009c0
 800a770:	20000ad8 	.word	0x20000ad8

0800a774 <uartAvailable>:
{
  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	4603      	mov	r3, r0
 800a77c:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800a782:	79fb      	ldrb	r3, [r7, #7]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10b      	bne.n	800a7a0 <uartAvailable+0x2c>
  {
    case _DEF_UART1:
      ret = qbufferAvailable(&qbuffer[ch]);
 800a788:	79fa      	ldrb	r2, [r7, #7]
 800a78a:	4613      	mov	r3, r2
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	4413      	add	r3, r2
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	4a06      	ldr	r2, [pc, #24]	; (800a7ac <uartAvailable+0x38>)
 800a794:	4413      	add	r3, r2
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe fbe7 	bl	8008f6a <qbufferAvailable>
 800a79c:	60f8      	str	r0, [r7, #12]
      break;
 800a79e:	bf00      	nop
  }

  return ret;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	200009c4 	.word	0x200009c4

0800a7b0 <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	73fb      	strb	r3, [r7, #15]
  switch(ch)
 800a7be:	79fb      	ldrb	r3, [r7, #7]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10d      	bne.n	800a7e0 <uartRead+0x30>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[ch],&ret,1);
 800a7c4:	79fa      	ldrb	r2, [r7, #7]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4a07      	ldr	r2, [pc, #28]	; (800a7ec <uartRead+0x3c>)
 800a7d0:	4413      	add	r3, r2
 800a7d2:	f107 010f 	add.w	r1, r7, #15
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7fe fb6e 	bl	8008eba <qbufferRead>
      break;
 800a7de:	bf00      	nop
  }

  return ret;
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	200009c4 	.word	0x200009c4

0800a7f0 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;
  switch(ch)
 800a802:	7bfb      	ldrb	r3, [r7, #15]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10e      	bne.n	800a826 <uartWrite+0x36>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	2364      	movs	r3, #100	; 0x64
 800a80e:	68b9      	ldr	r1, [r7, #8]
 800a810:	4807      	ldr	r0, [pc, #28]	; (800a830 <uartWrite+0x40>)
 800a812:	f004 f961 	bl	800ead8 <HAL_UART_Transmit>
 800a816:	4603      	mov	r3, r0
 800a818:	74fb      	strb	r3, [r7, #19]
      if(status == HAL_OK)
 800a81a:	7cfb      	ldrb	r3, [r7, #19]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d101      	bne.n	800a824 <uartWrite+0x34>
      {
        ret = length;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	617b      	str	r3, [r7, #20]
      }
      break;
 800a824:	bf00      	nop
  }

  return ret;
 800a826:	697b      	ldr	r3, [r7, #20]
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3718      	adds	r7, #24
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	20000adc 	.word	0x20000adc

0800a834 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 800a834:	b40e      	push	{r1, r2, r3}
 800a836:	b580      	push	{r7, lr}
 800a838:	b0c7      	sub	sp, #284	; 0x11c
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	4602      	mov	r2, r0
 800a83e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a842:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800a846:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 800a848:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800a84c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a850:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a854:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 800a856:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a85a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a85e:	f107 0010 	add.w	r0, r7, #16
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800a868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a86c:	f00b ffe6 	bl	801683c <vsniprintf>
 800a870:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800a874:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800a878:	f107 0110 	add.w	r1, r7, #16
 800a87c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a880:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff ffb2 	bl	800a7f0 <uartWrite>
 800a88c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 800a890:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800a894:	4618      	mov	r0, r3
 800a896:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800a89a:	46bd      	mov	sp, r7
 800a89c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8a0:	b003      	add	sp, #12
 800a8a2:	4770      	bx	lr

0800a8a4 <HAL_UART_ErrorCallback>:

  return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
  {

  }
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a08      	ldr	r2, [pc, #32]	; (800a8e8 <HAL_UART_RxCpltCallback+0x30>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d109      	bne.n	800a8de <HAL_UART_RxCpltCallback+0x26>
  {
    // 빠르게 송신시 1 바이트 사용시 인터럽트가 많이 걸려서 처리가 늦어져 overrun (덮어쓰기 에러) , 데이터 손실 에러 발생 가능
    // 고속의 송수신 - DMA 방식을 사용
    qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	4907      	ldr	r1, [pc, #28]	; (800a8ec <HAL_UART_RxCpltCallback+0x34>)
 800a8ce:	4808      	ldr	r0, [pc, #32]	; (800a8f0 <HAL_UART_RxCpltCallback+0x38>)
 800a8d0:	f7fe fa97 	bl	8008e02 <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[_DEF_UART1], 1);
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	4905      	ldr	r1, [pc, #20]	; (800a8ec <HAL_UART_RxCpltCallback+0x34>)
 800a8d8:	4806      	ldr	r0, [pc, #24]	; (800a8f4 <HAL_UART_RxCpltCallback+0x3c>)
 800a8da:	f004 f98b 	bl	800ebf4 <HAL_UART_Receive_IT>
  }
}
 800a8de:	bf00      	nop
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	40013800 	.word	0x40013800
 800a8ec:	20000ad8 	.word	0x20000ad8
 800a8f0:	200009c4 	.word	0x200009c4
 800a8f4:	20000adc 	.word	0x20000adc

0800a8f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b09e      	sub	sp, #120	; 0x78
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a900:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a904:	2200      	movs	r2, #0
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	605a      	str	r2, [r3, #4]
 800a90a:	609a      	str	r2, [r3, #8]
 800a90c:	60da      	str	r2, [r3, #12]
 800a90e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a910:	f107 0310 	add.w	r3, r7, #16
 800a914:	2254      	movs	r2, #84	; 0x54
 800a916:	2100      	movs	r1, #0
 800a918:	4618      	mov	r0, r3
 800a91a:	f00b ff9d 	bl	8016858 <memset>
  if(uartHandle->Instance==USART1)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a22      	ldr	r2, [pc, #136]	; (800a9ac <HAL_UART_MspInit+0xb4>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d13d      	bne.n	800a9a4 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a928:	2301      	movs	r3, #1
 800a92a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a92c:	2300      	movs	r3, #0
 800a92e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a930:	f107 0310 	add.w	r3, r7, #16
 800a934:	4618      	mov	r0, r3
 800a936:	f003 fce5 	bl	800e304 <HAL_RCCEx_PeriphCLKConfig>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d001      	beq.n	800a944 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a940:	f7fe f8d2 	bl	8008ae8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a944:	4b1a      	ldr	r3, [pc, #104]	; (800a9b0 <HAL_UART_MspInit+0xb8>)
 800a946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a948:	4a19      	ldr	r2, [pc, #100]	; (800a9b0 <HAL_UART_MspInit+0xb8>)
 800a94a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a94e:	6613      	str	r3, [r2, #96]	; 0x60
 800a950:	4b17      	ldr	r3, [pc, #92]	; (800a9b0 <HAL_UART_MspInit+0xb8>)
 800a952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a95c:	4b14      	ldr	r3, [pc, #80]	; (800a9b0 <HAL_UART_MspInit+0xb8>)
 800a95e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a960:	4a13      	ldr	r2, [pc, #76]	; (800a9b0 <HAL_UART_MspInit+0xb8>)
 800a962:	f043 0304 	orr.w	r3, r3, #4
 800a966:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a968:	4b11      	ldr	r3, [pc, #68]	; (800a9b0 <HAL_UART_MspInit+0xb8>)
 800a96a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a96c:	f003 0304 	and.w	r3, r3, #4
 800a970:	60bb      	str	r3, [r7, #8]
 800a972:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC4_USART1_TX_Pin|PC5_USART1_RX_Pin;
 800a974:	2330      	movs	r3, #48	; 0x30
 800a976:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a978:	2302      	movs	r3, #2
 800a97a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a97c:	2300      	movs	r3, #0
 800a97e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a980:	2300      	movs	r3, #0
 800a982:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a984:	2307      	movs	r3, #7
 800a986:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a988:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a98c:	4619      	mov	r1, r3
 800a98e:	4809      	ldr	r0, [pc, #36]	; (800a9b4 <HAL_UART_MspInit+0xbc>)
 800a990:	f000 ff54 	bl	800b83c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a994:	2200      	movs	r2, #0
 800a996:	2100      	movs	r1, #0
 800a998:	2025      	movs	r0, #37	; 0x25
 800a99a:	f000 fba0 	bl	800b0de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a99e:	2025      	movs	r0, #37	; 0x25
 800a9a0:	f000 fbb7 	bl	800b112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800a9a4:	bf00      	nop
 800a9a6:	3778      	adds	r7, #120	; 0x78
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	40013800 	.word	0x40013800
 800a9b0:	40021000 	.word	0x40021000
 800a9b4:	48000800 	.word	0x48000800

0800a9b8 <usbInit>:
#endif



bool usbInit(void)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
  bool ret = true;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	75fb      	strb	r3, [r7, #23]

  /* USB - RESET 시 장치관리자 해제 연결 안될 시 */

  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 800a9c2:	463b      	mov	r3, r7
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	601a      	str	r2, [r3, #0]
 800a9c8:	605a      	str	r2, [r3, #4]
 800a9ca:	609a      	str	r2, [r3, #8]
 800a9cc:	60da      	str	r2, [r3, #12]
 800a9ce:	611a      	str	r2, [r3, #16]
  // PA12(USB_DP) 출력 설정
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 800a9d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800a9d6:	2311      	movs	r3, #17
 800a9d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800a9e2:	463b      	mov	r3, r7
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a9ea:	f000 ff27 	bl	800b83c <HAL_GPIO_Init>

  //회로에 PULL UP 이 걸려있다면 - 내리고
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a9f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a9f8:	f001 f8ba 	bl	800bb70 <HAL_GPIO_WritePin>
  delay(200);
 800a9fc:	20c8      	movs	r0, #200	; 0xc8
 800a9fe:	f7fe f807 	bl	8008a10 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800aa02:	2201      	movs	r2, #1
 800aa04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800aa08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aa0c:	f001 f8b0 	bl	800bb70 <HAL_GPIO_WritePin>

  // INPUT 으로 다시 변경
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800aa10:	2300      	movs	r3, #0
 800aa12:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800aa14:	463b      	mov	r3, r7
 800aa16:	4619      	mov	r1, r3
 800aa18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aa1c:	f000 ff0e 	bl	800b83c <HAL_GPIO_Init>

  MX_USB_Device_Init();
 800aa20:	f00a f8bc 	bl	8014b9c <MX_USB_Device_Init>

#ifdef _USE_HW_CLI
  cliAdd("usb", cliCmd);
 800aa24:	4904      	ldr	r1, [pc, #16]	; (800aa38 <usbInit+0x80>)
 800aa26:	4805      	ldr	r0, [pc, #20]	; (800aa3c <usbInit+0x84>)
 800aa28:	f7ff f836 	bl	8009a98 <cliAdd>
#endif
  return ret;
 800aa2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3718      	adds	r7, #24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	0800ab25 	.word	0x0800ab25
 800aa3c:	08018d00 	.word	0x08018d00

0800aa40 <usbIsOpen>:
    USBD_DeInit(&hUsbDeviceFS);
  }
}

bool usbIsOpen(void)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	af00      	add	r7, sp, #0
  return cdcIsConnect();
 800aa44:	f7fe fe8e 	bl	8009764 <cdcIsConnect>
 800aa48:	4603      	mov	r3, r0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	bd80      	pop	{r7, pc}
	...

0800aa50 <usbIsConnect>:

bool usbIsConnect(void)
{
 800aa50:	b480      	push	{r7}
 800aa52:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.pClassData == NULL)
 800aa54:	4b0d      	ldr	r3, [pc, #52]	; (800aa8c <usbIsConnect+0x3c>)
 800aa56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d101      	bne.n	800aa62 <usbIsConnect+0x12>
  {
    return false;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	e00e      	b.n	800aa80 <usbIsConnect+0x30>
  }
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 800aa62:	4b0a      	ldr	r3, [pc, #40]	; (800aa8c <usbIsConnect+0x3c>)
 800aa64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	2b03      	cmp	r3, #3
 800aa6c:	d001      	beq.n	800aa72 <usbIsConnect+0x22>
  {
    return false;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	e006      	b.n	800aa80 <usbIsConnect+0x30>
  }
  if (hUsbDeviceFS.dev_config == 0)
 800aa72:	4b06      	ldr	r3, [pc, #24]	; (800aa8c <usbIsConnect+0x3c>)
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d101      	bne.n	800aa7e <usbIsConnect+0x2e>
  {
    return false;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	e000      	b.n	800aa80 <usbIsConnect+0x30>
  }

  return true;
 800aa7e:	2301      	movs	r3, #1
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	20000b7c 	.word	0x20000b7c

0800aa90 <usbBegin>:
{
  return is_usb_mode;
}

bool usbBegin(UsbMode usb_mode)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	4603      	mov	r3, r0
 800aa98:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	73fb      	strb	r3, [r7, #15]


#if HW_USE_CDC == 1

  if (usb_mode == USB_CDC_MODE)
 800aa9e:	79fb      	ldrb	r3, [r7, #7]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d12a      	bne.n	800aafa <usbBegin+0x6a>
  {
    if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	4919      	ldr	r1, [pc, #100]	; (800ab0c <usbBegin+0x7c>)
 800aaa8:	4819      	ldr	r0, [pc, #100]	; (800ab10 <usbBegin+0x80>)
 800aaaa:	f008 ff57 	bl	801395c <USBD_Init>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d001      	beq.n	800aab8 <usbBegin+0x28>
    {
      return false;
 800aab4:	2300      	movs	r3, #0
 800aab6:	e024      	b.n	800ab02 <usbBegin+0x72>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aab8:	4916      	ldr	r1, [pc, #88]	; (800ab14 <usbBegin+0x84>)
 800aaba:	4815      	ldr	r0, [pc, #84]	; (800ab10 <usbBegin+0x80>)
 800aabc:	f008 ff7e 	bl	80139bc <USBD_RegisterClass>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d001      	beq.n	800aaca <usbBegin+0x3a>
    {
      return false;
 800aac6:	2300      	movs	r3, #0
 800aac8:	e01b      	b.n	800ab02 <usbBegin+0x72>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aaca:	4913      	ldr	r1, [pc, #76]	; (800ab18 <usbBegin+0x88>)
 800aacc:	4810      	ldr	r0, [pc, #64]	; (800ab10 <usbBegin+0x80>)
 800aace:	f008 fecf 	bl	8013870 <USBD_CDC_RegisterInterface>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d001      	beq.n	800aadc <usbBegin+0x4c>
    {
      return false;
 800aad8:	2300      	movs	r3, #0
 800aada:	e012      	b.n	800ab02 <usbBegin+0x72>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aadc:	480c      	ldr	r0, [pc, #48]	; (800ab10 <usbBegin+0x80>)
 800aade:	f008 ff94 	bl	8013a0a <USBD_Start>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d001      	beq.n	800aaec <usbBegin+0x5c>
    {
      return false;
 800aae8:	2300      	movs	r3, #0
 800aaea:	e00a      	b.n	800ab02 <usbBegin+0x72>
    }


    cdcInit();
 800aaec:	f7fe fe26 	bl	800973c <cdcInit>

    is_usb_mode = USB_CDC_MODE;
 800aaf0:	4b0a      	ldr	r3, [pc, #40]	; (800ab1c <usbBegin+0x8c>)
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	701a      	strb	r2, [r3, #0]
    ret = true;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	73fb      	strb	r3, [r7, #15]
    ret = true;
  }
#endif


  is_init = ret;
 800aafa:	4a09      	ldr	r2, [pc, #36]	; (800ab20 <usbBegin+0x90>)
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
 800aafe:	7013      	strb	r3, [r2, #0]

  return ret;
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20000164 	.word	0x20000164
 800ab10:	20000b7c 	.word	0x20000b7c
 800ab14:	20000044 	.word	0x20000044
 800ab18:	20000150 	.word	0x20000150
 800ab1c:	20000b71 	.word	0x20000b71
 800ab20:	20000b70 	.word	0x20000b70

0800ab24 <cliCmd>:


#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b08a      	sub	sp, #40	; 0x28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (args->argc == 1 && args->isStr(0, "info") == true)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	881b      	ldrh	r3, [r3, #0]
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d129      	bne.n	800ab8e <cliCmd+0x6a>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	4959      	ldr	r1, [pc, #356]	; (800aca4 <cliCmd+0x180>)
 800ab40:	2000      	movs	r0, #0
 800ab42:	4798      	blx	r3
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d021      	beq.n	800ab8e <cliCmd+0x6a>
  {
    while(cliKeepLoop())
 800ab4a:	e014      	b.n	800ab76 <cliCmd+0x52>
    {
      cliPrintf("USB Connect : %d\n", usbIsConnect());
 800ab4c:	f7ff ff80 	bl	800aa50 <usbIsConnect>
 800ab50:	4603      	mov	r3, r0
 800ab52:	4619      	mov	r1, r3
 800ab54:	4854      	ldr	r0, [pc, #336]	; (800aca8 <cliCmd+0x184>)
 800ab56:	f7fe fe8f 	bl	8009878 <cliPrintf>
      cliPrintf("USB Open    : %d\n", usbIsOpen());
 800ab5a:	f7ff ff71 	bl	800aa40 <usbIsOpen>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	4619      	mov	r1, r3
 800ab62:	4852      	ldr	r0, [pc, #328]	; (800acac <cliCmd+0x188>)
 800ab64:	f7fe fe88 	bl	8009878 <cliPrintf>
      cliPrintf("\x1B[%dA", 2);
 800ab68:	2102      	movs	r1, #2
 800ab6a:	4851      	ldr	r0, [pc, #324]	; (800acb0 <cliCmd+0x18c>)
 800ab6c:	f7fe fe84 	bl	8009878 <cliPrintf>
      delay(100);
 800ab70:	2064      	movs	r0, #100	; 0x64
 800ab72:	f7fd ff4d 	bl	8008a10 <delay>
    while(cliKeepLoop())
 800ab76:	f7fe ff79 	bl	8009a6c <cliKeepLoop>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1e5      	bne.n	800ab4c <cliCmd+0x28>
    }
    cliPrintf("\x1B[%dB", 2);
 800ab80:	2102      	movs	r1, #2
 800ab82:	484c      	ldr	r0, [pc, #304]	; (800acb4 <cliCmd+0x190>)
 800ab84:	f7fe fe78 	bl	8009878 <cliPrintf>

    ret = true;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (args->argc == 1 && args->isStr(0, "tx") == true)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	881b      	ldrh	r3, [r3, #0]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d130      	bne.n	800abf8 <cliCmd+0xd4>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	4947      	ldr	r1, [pc, #284]	; (800acb8 <cliCmd+0x194>)
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	4798      	blx	r3
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d028      	beq.n	800abf8 <cliCmd+0xd4>
  {
    uint32_t pre_time;
    uint32_t tx_cnt = 0;
 800aba6:	2300      	movs	r3, #0
 800aba8:	61fb      	str	r3, [r7, #28]

    while(cliKeepLoop())
 800abaa:	e019      	b.n	800abe0 <cliCmd+0xbc>
    {
      if (millis()-pre_time >= 1000)
 800abac:	f7fd ff3b 	bl	8008a26 <millis>
 800abb0:	4602      	mov	r2, r0
 800abb2:	6a3b      	ldr	r3, [r7, #32]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abba:	d30a      	bcc.n	800abd2 <cliCmd+0xae>
      {
        pre_time = millis();
 800abbc:	f7fd ff33 	bl	8008a26 <millis>
 800abc0:	6238      	str	r0, [r7, #32]
        logPrintf("tx : %d KB/s\n", tx_cnt/1024);
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	0a9b      	lsrs	r3, r3, #10
 800abc6:	4619      	mov	r1, r3
 800abc8:	483c      	ldr	r0, [pc, #240]	; (800acbc <cliCmd+0x198>)
 800abca:	f7ff faf9 	bl	800a1c0 <logPrintf>
        tx_cnt = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	61fb      	str	r3, [r7, #28]
      }
      cdcWrite((uint8_t *)"123456789012345678901234567890\n", 31);
 800abd2:	211f      	movs	r1, #31
 800abd4:	483a      	ldr	r0, [pc, #232]	; (800acc0 <cliCmd+0x19c>)
 800abd6:	f7fe fdda 	bl	800978e <cdcWrite>
      tx_cnt += 31;
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	331f      	adds	r3, #31
 800abde:	61fb      	str	r3, [r7, #28]
    while(cliKeepLoop())
 800abe0:	f7fe ff44 	bl	8009a6c <cliKeepLoop>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1e0      	bne.n	800abac <cliCmd+0x88>
    }
    cliPrintf("\x1B[%dB", 2);
 800abea:	2102      	movs	r1, #2
 800abec:	4831      	ldr	r0, [pc, #196]	; (800acb4 <cliCmd+0x190>)
 800abee:	f7fe fe43 	bl	8009878 <cliPrintf>

    ret = true;
 800abf2:	2301      	movs	r3, #1
 800abf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (args->argc == 1 && args->isStr(0, "rx") == true)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	881b      	ldrh	r3, [r3, #0]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d13c      	bne.n	800ac7a <cliCmd+0x156>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	695b      	ldr	r3, [r3, #20]
 800ac04:	492f      	ldr	r1, [pc, #188]	; (800acc4 <cliCmd+0x1a0>)
 800ac06:	2000      	movs	r0, #0
 800ac08:	4798      	blx	r3
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d034      	beq.n	800ac7a <cliCmd+0x156>
  {
    uint32_t pre_time;
    uint32_t rx_cnt = 0;
 800ac10:	2300      	movs	r3, #0
 800ac12:	617b      	str	r3, [r7, #20]
    uint32_t rx_len;

    while(cliKeepLoop())
 800ac14:	e025      	b.n	800ac62 <cliCmd+0x13e>
    {
      if (millis()-pre_time >= 1000)
 800ac16:	f7fd ff06 	bl	8008a26 <millis>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac24:	d30a      	bcc.n	800ac3c <cliCmd+0x118>
      {
        pre_time = millis();
 800ac26:	f7fd fefe 	bl	8008a26 <millis>
 800ac2a:	61b8      	str	r0, [r7, #24]
        logPrintf("rx : %d KB/s\n", rx_cnt/1024);
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	0a9b      	lsrs	r3, r3, #10
 800ac30:	4619      	mov	r1, r3
 800ac32:	4825      	ldr	r0, [pc, #148]	; (800acc8 <cliCmd+0x1a4>)
 800ac34:	f7ff fac4 	bl	800a1c0 <logPrintf>
        rx_cnt = 0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	617b      	str	r3, [r7, #20]
      }

      rx_len = cdcAvailable();
 800ac3c:	f7fe fd99 	bl	8009772 <cdcAvailable>
 800ac40:	60f8      	str	r0, [r7, #12]

      for (int i=0; i<rx_len; i++)
 800ac42:	2300      	movs	r3, #0
 800ac44:	613b      	str	r3, [r7, #16]
 800ac46:	e004      	b.n	800ac52 <cliCmd+0x12e>
      {
        cdcRead();
 800ac48:	f7fe fd9a 	bl	8009780 <cdcRead>
      for (int i=0; i<rx_len; i++)
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	613b      	str	r3, [r7, #16]
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d8f6      	bhi.n	800ac48 <cliCmd+0x124>
      }

      rx_cnt += rx_len;
 800ac5a:	697a      	ldr	r2, [r7, #20]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	4413      	add	r3, r2
 800ac60:	617b      	str	r3, [r7, #20]
    while(cliKeepLoop())
 800ac62:	f7fe ff03 	bl	8009a6c <cliKeepLoop>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1d4      	bne.n	800ac16 <cliCmd+0xf2>
    }
    cliPrintf("\x1B[%dB", 2);
 800ac6c:	2102      	movs	r1, #2
 800ac6e:	4811      	ldr	r0, [pc, #68]	; (800acb4 <cliCmd+0x190>)
 800ac70:	f7fe fe02 	bl	8009878 <cliPrintf>

    ret = true;
 800ac74:	2301      	movs	r3, #1
 800ac76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (ret == false)
 800ac7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac7e:	f083 0301 	eor.w	r3, r3, #1
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d008      	beq.n	800ac9a <cliCmd+0x176>
  {
    cliPrintf("usb info\n");
 800ac88:	4810      	ldr	r0, [pc, #64]	; (800accc <cliCmd+0x1a8>)
 800ac8a:	f7fe fdf5 	bl	8009878 <cliPrintf>
    cliPrintf("usb tx\n");
 800ac8e:	4810      	ldr	r0, [pc, #64]	; (800acd0 <cliCmd+0x1ac>)
 800ac90:	f7fe fdf2 	bl	8009878 <cliPrintf>
    cliPrintf("usb rx\n");
 800ac94:	480f      	ldr	r0, [pc, #60]	; (800acd4 <cliCmd+0x1b0>)
 800ac96:	f7fe fdef 	bl	8009878 <cliPrintf>
  }
}
 800ac9a:	bf00      	nop
 800ac9c:	3728      	adds	r7, #40	; 0x28
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	08018d04 	.word	0x08018d04
 800aca8:	08018d0c 	.word	0x08018d0c
 800acac:	08018d20 	.word	0x08018d20
 800acb0:	08018d34 	.word	0x08018d34
 800acb4:	08018d3c 	.word	0x08018d3c
 800acb8:	08018d44 	.word	0x08018d44
 800acbc:	08018d48 	.word	0x08018d48
 800acc0:	08018d58 	.word	0x08018d58
 800acc4:	08018d78 	.word	0x08018d78
 800acc8:	08018d7c 	.word	0x08018d7c
 800accc:	08018d8c 	.word	0x08018d8c
 800acd0:	08018d98 	.word	0x08018d98
 800acd4:	08018da0 	.word	0x08018da0

0800acd8 <hwInit>:
 *      Author: mm940
 */
#include "hw.h"

bool hwInit(void)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
  bool ret = true;
 800acde:	2301      	movs	r3, #1
 800ace0:	71fb      	strb	r3, [r7, #7]

  ret &= bspInit();
 800ace2:	f7fd fe43 	bl	800896c <bspInit>
 800ace6:	4603      	mov	r3, r0
 800ace8:	461a      	mov	r2, r3
 800acea:	79fb      	ldrb	r3, [r7, #7]
 800acec:	4013      	ands	r3, r2
 800acee:	2b00      	cmp	r3, #0
 800acf0:	bf14      	ite	ne
 800acf2:	2301      	movne	r3, #1
 800acf4:	2300      	moveq	r3, #0
 800acf6:	71fb      	strb	r3, [r7, #7]
  ret &= rtcInit();
 800acf8:	f7ff fb1a 	bl	800a330 <rtcInit>
 800acfc:	4603      	mov	r3, r0
 800acfe:	461a      	mov	r2, r3
 800ad00:	79fb      	ldrb	r3, [r7, #7]
 800ad02:	4013      	ands	r3, r2
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	bf14      	ite	ne
 800ad08:	2301      	movne	r3, #1
 800ad0a:	2300      	moveq	r3, #0
 800ad0c:	71fb      	strb	r3, [r7, #7]
  ret &= swtimerInit();
 800ad0e:	f7ff fb9d 	bl	800a44c <swtimerInit>
 800ad12:	4603      	mov	r3, r0
 800ad14:	461a      	mov	r2, r3
 800ad16:	79fb      	ldrb	r3, [r7, #7]
 800ad18:	4013      	ands	r3, r2
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	bf14      	ite	ne
 800ad1e:	2301      	movne	r3, #1
 800ad20:	2300      	moveq	r3, #0
 800ad22:	71fb      	strb	r3, [r7, #7]


#ifdef _USE_HW_RESET
  ret &= resetInit();  // 500 ms delay
 800ad24:	f7ff fa6e 	bl	800a204 <resetInit>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	79fb      	ldrb	r3, [r7, #7]
 800ad2e:	4013      	ands	r3, r2
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	bf14      	ite	ne
 800ad34:	2301      	movne	r3, #1
 800ad36:	2300      	moveq	r3, #0
 800ad38:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef _USE_HW_RESET
  if (resetGetCount() == 2)
 800ad3a:	f7ff faa9 	bl	800a290 <resetGetCount>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d101      	bne.n	800ad48 <hwInit+0x70>
  {
    // Jump To SystemBootloader
    resetToSystemBoot();
 800ad44:	f7ff fab0 	bl	800a2a8 <resetToSystemBoot>
  }
#endif
  ret &= flashInit();
 800ad48:	f7fe ffca 	bl	8009ce0 <flashInit>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	461a      	mov	r2, r3
 800ad50:	79fb      	ldrb	r3, [r7, #7]
 800ad52:	4013      	ands	r3, r2
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	bf14      	ite	ne
 800ad58:	2301      	movne	r3, #1
 800ad5a:	2300      	moveq	r3, #0
 800ad5c:	71fb      	strb	r3, [r7, #7]
  ret &= buttonInit();
 800ad5e:	f7fe f91d 	bl	8008f9c <buttonInit>
 800ad62:	4603      	mov	r3, r0
 800ad64:	461a      	mov	r2, r3
 800ad66:	79fb      	ldrb	r3, [r7, #7]
 800ad68:	4013      	ands	r3, r2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	bf14      	ite	ne
 800ad6e:	2301      	movne	r3, #1
 800ad70:	2300      	moveq	r3, #0
 800ad72:	71fb      	strb	r3, [r7, #7]
  ret &= ledInit();
 800ad74:	f7ff f8c2 	bl	8009efc <ledInit>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	4013      	ands	r3, r2
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	bf14      	ite	ne
 800ad84:	2301      	movne	r3, #1
 800ad86:	2300      	moveq	r3, #0
 800ad88:	71fb      	strb	r3, [r7, #7]
  ret &= usbInit();
 800ad8a:	f7ff fe15 	bl	800a9b8 <usbInit>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	461a      	mov	r2, r3
 800ad92:	79fb      	ldrb	r3, [r7, #7]
 800ad94:	4013      	ands	r3, r2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	bf14      	ite	ne
 800ad9a:	2301      	movne	r3, #1
 800ad9c:	2300      	moveq	r3, #0
 800ad9e:	71fb      	strb	r3, [r7, #7]
  ret &= usbBegin(USB_CDC_MODE);
 800ada0:	2001      	movs	r0, #1
 800ada2:	f7ff fe75 	bl	800aa90 <usbBegin>
 800ada6:	4603      	mov	r3, r0
 800ada8:	461a      	mov	r2, r3
 800adaa:	79fb      	ldrb	r3, [r7, #7]
 800adac:	4013      	ands	r3, r2
 800adae:	2b00      	cmp	r3, #0
 800adb0:	bf14      	ite	ne
 800adb2:	2301      	movne	r3, #1
 800adb4:	2300      	moveq	r3, #0
 800adb6:	71fb      	strb	r3, [r7, #7]
  ret &= uartInit();
 800adb8:	f7ff fc2e 	bl	800a618 <uartInit>
 800adbc:	4603      	mov	r3, r0
 800adbe:	461a      	mov	r2, r3
 800adc0:	79fb      	ldrb	r3, [r7, #7]
 800adc2:	4013      	ands	r3, r2
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	bf14      	ite	ne
 800adc8:	2301      	movne	r3, #1
 800adca:	2300      	moveq	r3, #0
 800adcc:	71fb      	strb	r3, [r7, #7]
  ret &= logInit();
 800adce:	f7ff f9ef 	bl	800a1b0 <logInit>
 800add2:	4603      	mov	r3, r0
 800add4:	461a      	mov	r2, r3
 800add6:	79fb      	ldrb	r3, [r7, #7]
 800add8:	4013      	ands	r3, r2
 800adda:	2b00      	cmp	r3, #0
 800addc:	bf14      	ite	ne
 800adde:	2301      	movne	r3, #1
 800ade0:	2300      	moveq	r3, #0
 800ade2:	71fb      	strb	r3, [r7, #7]
  ret &= cliInit();
 800ade4:	f7fe fce2 	bl	80097ac <cliInit>
 800ade8:	4603      	mov	r3, r0
 800adea:	461a      	mov	r2, r3
 800adec:	79fb      	ldrb	r3, [r7, #7]
 800adee:	4013      	ands	r3, r2
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	bf14      	ite	ne
 800adf4:	2301      	movne	r3, #1
 800adf6:	2300      	moveq	r3, #0
 800adf8:	71fb      	strb	r3, [r7, #7]
  return ret;
 800adfa:	79fb      	ldrb	r3, [r7, #7]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ae0e:	2003      	movs	r0, #3
 800ae10:	f000 f95a 	bl	800b0c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ae14:	200f      	movs	r0, #15
 800ae16:	f000 f80d 	bl	800ae34 <HAL_InitTick>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d002      	beq.n	800ae26 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	71fb      	strb	r3, [r7, #7]
 800ae24:	e001      	b.n	800ae2a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ae26:	f7fd fe67 	bl	8008af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ae2a:	79fb      	ldrb	r3, [r7, #7]

}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800ae40:	4b16      	ldr	r3, [pc, #88]	; (800ae9c <HAL_InitTick+0x68>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d022      	beq.n	800ae8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800ae48:	4b15      	ldr	r3, [pc, #84]	; (800aea0 <HAL_InitTick+0x6c>)
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	4b13      	ldr	r3, [pc, #76]	; (800ae9c <HAL_InitTick+0x68>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ae54:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f000 f966 	bl	800b12e <HAL_SYSTICK_Config>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10f      	bne.n	800ae88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2b0f      	cmp	r3, #15
 800ae6c:	d809      	bhi.n	800ae82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ae6e:	2200      	movs	r2, #0
 800ae70:	6879      	ldr	r1, [r7, #4]
 800ae72:	f04f 30ff 	mov.w	r0, #4294967295
 800ae76:	f000 f932 	bl	800b0de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ae7a:	4a0a      	ldr	r2, [pc, #40]	; (800aea4 <HAL_InitTick+0x70>)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6013      	str	r3, [r2, #0]
 800ae80:	e007      	b.n	800ae92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	73fb      	strb	r3, [r7, #15]
 800ae86:	e004      	b.n	800ae92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	73fb      	strb	r3, [r7, #15]
 800ae8c:	e001      	b.n	800ae92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800ae92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	20000014 	.word	0x20000014
 800aea0:	20000000 	.word	0x20000000
 800aea4:	20000010 	.word	0x20000010

0800aea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800aeac:	4b05      	ldr	r3, [pc, #20]	; (800aec4 <HAL_IncTick+0x1c>)
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <HAL_IncTick+0x20>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	4a03      	ldr	r2, [pc, #12]	; (800aec4 <HAL_IncTick+0x1c>)
 800aeb8:	6013      	str	r3, [r2, #0]
}
 800aeba:	bf00      	nop
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	20000b74 	.word	0x20000b74
 800aec8:	20000014 	.word	0x20000014

0800aecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aecc:	b480      	push	{r7}
 800aece:	af00      	add	r7, sp, #0
  return uwTick;
 800aed0:	4b03      	ldr	r3, [pc, #12]	; (800aee0 <HAL_GetTick+0x14>)
 800aed2:	681b      	ldr	r3, [r3, #0]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	20000b74 	.word	0x20000b74

0800aee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aeec:	f7ff ffee 	bl	800aecc <HAL_GetTick>
 800aef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefc:	d004      	beq.n	800af08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800aefe:	4b09      	ldr	r3, [pc, #36]	; (800af24 <HAL_Delay+0x40>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	4413      	add	r3, r2
 800af06:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800af08:	bf00      	nop
 800af0a:	f7ff ffdf 	bl	800aecc <HAL_GetTick>
 800af0e:	4602      	mov	r2, r0
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	68fa      	ldr	r2, [r7, #12]
 800af16:	429a      	cmp	r2, r3
 800af18:	d8f7      	bhi.n	800af0a <HAL_Delay+0x26>
  {
  }
}
 800af1a:	bf00      	nop
 800af1c:	bf00      	nop
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	20000014 	.word	0x20000014

0800af28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f003 0307 	and.w	r3, r3, #7
 800af36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800af38:	4b0c      	ldr	r3, [pc, #48]	; (800af6c <__NVIC_SetPriorityGrouping+0x44>)
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800af44:	4013      	ands	r3, r2
 800af46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800af50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800af54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800af5a:	4a04      	ldr	r2, [pc, #16]	; (800af6c <__NVIC_SetPriorityGrouping+0x44>)
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	60d3      	str	r3, [r2, #12]
}
 800af60:	bf00      	nop
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	e000ed00 	.word	0xe000ed00

0800af70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800af70:	b480      	push	{r7}
 800af72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800af74:	4b04      	ldr	r3, [pc, #16]	; (800af88 <__NVIC_GetPriorityGrouping+0x18>)
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	0a1b      	lsrs	r3, r3, #8
 800af7a:	f003 0307 	and.w	r3, r3, #7
}
 800af7e:	4618      	mov	r0, r3
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	e000ed00 	.word	0xe000ed00

0800af8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	4603      	mov	r3, r0
 800af94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	db0b      	blt.n	800afb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800af9e:	79fb      	ldrb	r3, [r7, #7]
 800afa0:	f003 021f 	and.w	r2, r3, #31
 800afa4:	4907      	ldr	r1, [pc, #28]	; (800afc4 <__NVIC_EnableIRQ+0x38>)
 800afa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afaa:	095b      	lsrs	r3, r3, #5
 800afac:	2001      	movs	r0, #1
 800afae:	fa00 f202 	lsl.w	r2, r0, r2
 800afb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800afb6:	bf00      	nop
 800afb8:	370c      	adds	r7, #12
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	e000e100 	.word	0xe000e100

0800afc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	4603      	mov	r3, r0
 800afd0:	6039      	str	r1, [r7, #0]
 800afd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800afd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	db0a      	blt.n	800aff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	490c      	ldr	r1, [pc, #48]	; (800b014 <__NVIC_SetPriority+0x4c>)
 800afe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afe6:	0112      	lsls	r2, r2, #4
 800afe8:	b2d2      	uxtb	r2, r2
 800afea:	440b      	add	r3, r1
 800afec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800aff0:	e00a      	b.n	800b008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	4908      	ldr	r1, [pc, #32]	; (800b018 <__NVIC_SetPriority+0x50>)
 800aff8:	79fb      	ldrb	r3, [r7, #7]
 800affa:	f003 030f 	and.w	r3, r3, #15
 800affe:	3b04      	subs	r3, #4
 800b000:	0112      	lsls	r2, r2, #4
 800b002:	b2d2      	uxtb	r2, r2
 800b004:	440b      	add	r3, r1
 800b006:	761a      	strb	r2, [r3, #24]
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	e000e100 	.word	0xe000e100
 800b018:	e000ed00 	.word	0xe000ed00

0800b01c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b089      	sub	sp, #36	; 0x24
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f003 0307 	and.w	r3, r3, #7
 800b02e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	f1c3 0307 	rsb	r3, r3, #7
 800b036:	2b04      	cmp	r3, #4
 800b038:	bf28      	it	cs
 800b03a:	2304      	movcs	r3, #4
 800b03c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	3304      	adds	r3, #4
 800b042:	2b06      	cmp	r3, #6
 800b044:	d902      	bls.n	800b04c <NVIC_EncodePriority+0x30>
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	3b03      	subs	r3, #3
 800b04a:	e000      	b.n	800b04e <NVIC_EncodePriority+0x32>
 800b04c:	2300      	movs	r3, #0
 800b04e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b050:	f04f 32ff 	mov.w	r2, #4294967295
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	fa02 f303 	lsl.w	r3, r2, r3
 800b05a:	43da      	mvns	r2, r3
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	401a      	ands	r2, r3
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b064:	f04f 31ff 	mov.w	r1, #4294967295
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	fa01 f303 	lsl.w	r3, r1, r3
 800b06e:	43d9      	mvns	r1, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b074:	4313      	orrs	r3, r2
         );
}
 800b076:	4618      	mov	r0, r3
 800b078:	3724      	adds	r7, #36	; 0x24
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
	...

0800b084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	3b01      	subs	r3, #1
 800b090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b094:	d301      	bcc.n	800b09a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b096:	2301      	movs	r3, #1
 800b098:	e00f      	b.n	800b0ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b09a:	4a0a      	ldr	r2, [pc, #40]	; (800b0c4 <SysTick_Config+0x40>)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b0a2:	210f      	movs	r1, #15
 800b0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a8:	f7ff ff8e 	bl	800afc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b0ac:	4b05      	ldr	r3, [pc, #20]	; (800b0c4 <SysTick_Config+0x40>)
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b0b2:	4b04      	ldr	r3, [pc, #16]	; (800b0c4 <SysTick_Config+0x40>)
 800b0b4:	2207      	movs	r2, #7
 800b0b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	e000e010 	.word	0xe000e010

0800b0c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7ff ff29 	bl	800af28 <__NVIC_SetPriorityGrouping>
}
 800b0d6:	bf00      	nop
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b086      	sub	sp, #24
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	60b9      	str	r1, [r7, #8]
 800b0e8:	607a      	str	r2, [r7, #4]
 800b0ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b0ec:	f7ff ff40 	bl	800af70 <__NVIC_GetPriorityGrouping>
 800b0f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	68b9      	ldr	r1, [r7, #8]
 800b0f6:	6978      	ldr	r0, [r7, #20]
 800b0f8:	f7ff ff90 	bl	800b01c <NVIC_EncodePriority>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b102:	4611      	mov	r1, r2
 800b104:	4618      	mov	r0, r3
 800b106:	f7ff ff5f 	bl	800afc8 <__NVIC_SetPriority>
}
 800b10a:	bf00      	nop
 800b10c:	3718      	adds	r7, #24
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b082      	sub	sp, #8
 800b116:	af00      	add	r7, sp, #0
 800b118:	4603      	mov	r3, r0
 800b11a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b11c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b120:	4618      	mov	r0, r3
 800b122:	f7ff ff33 	bl	800af8c <__NVIC_EnableIRQ>
}
 800b126:	bf00      	nop
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b082      	sub	sp, #8
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7ff ffa4 	bl	800b084 <SysTick_Config>
 800b13c:	4603      	mov	r3, r0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b146:	b480      	push	{r7}
 800b148:	b085      	sub	sp, #20
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b14e:	2300      	movs	r3, #0
 800b150:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d005      	beq.n	800b16a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2204      	movs	r2, #4
 800b162:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	73fb      	strb	r3, [r7, #15]
 800b168:	e037      	b.n	800b1da <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f022 020e 	bic.w	r2, r2, #14
 800b178:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b188:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f022 0201 	bic.w	r2, r2, #1
 800b198:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b19e:	f003 021f 	and.w	r2, r3, #31
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a6:	2101      	movs	r1, #1
 800b1a8:	fa01 f202 	lsl.w	r2, r1, r2
 800b1ac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b1b6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00c      	beq.n	800b1da <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b1ce:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b1d8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b200:	2300      	movs	r3, #0
 800b202:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d00d      	beq.n	800b22c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2204      	movs	r2, #4
 800b214:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2201      	movs	r2, #1
 800b21a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	73fb      	strb	r3, [r7, #15]
 800b22a:	e047      	b.n	800b2bc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f022 020e 	bic.w	r2, r2, #14
 800b23a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f022 0201 	bic.w	r2, r2, #1
 800b24a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b256:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b25a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b260:	f003 021f 	and.w	r2, r3, #31
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b268:	2101      	movs	r1, #1
 800b26a:	fa01 f202 	lsl.w	r2, r1, r2
 800b26e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b278:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d00c      	beq.n	800b29c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b28c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b290:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b29a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d003      	beq.n	800b2bc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	4798      	blx	r3
    }
  }
  return status;
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
	...

0800b2c8 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b2da:	4b2f      	ldr	r3, [pc, #188]	; (800b398 <HAL_FLASH_Program+0xd0>)
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d101      	bne.n	800b2e6 <HAL_FLASH_Program+0x1e>
 800b2e2:	2302      	movs	r3, #2
 800b2e4:	e053      	b.n	800b38e <HAL_FLASH_Program+0xc6>
 800b2e6:	4b2c      	ldr	r3, [pc, #176]	; (800b398 <HAL_FLASH_Program+0xd0>)
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b2ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b2f0:	f000 f892 	bl	800b418 <FLASH_WaitForLastOperation>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800b2f8:	7dfb      	ldrb	r3, [r7, #23]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d143      	bne.n	800b386 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b2fe:	4b26      	ldr	r3, [pc, #152]	; (800b398 <HAL_FLASH_Program+0xd0>)
 800b300:	2200      	movs	r2, #0
 800b302:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800b304:	4b25      	ldr	r3, [pc, #148]	; (800b39c <HAL_FLASH_Program+0xd4>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d009      	beq.n	800b324 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800b310:	4b22      	ldr	r3, [pc, #136]	; (800b39c <HAL_FLASH_Program+0xd4>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a21      	ldr	r2, [pc, #132]	; (800b39c <HAL_FLASH_Program+0xd4>)
 800b316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b31a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800b31c:	4b1e      	ldr	r3, [pc, #120]	; (800b398 <HAL_FLASH_Program+0xd0>)
 800b31e:	2202      	movs	r2, #2
 800b320:	771a      	strb	r2, [r3, #28]
 800b322:	e002      	b.n	800b32a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800b324:	4b1c      	ldr	r3, [pc, #112]	; (800b398 <HAL_FLASH_Program+0xd0>)
 800b326:	2200      	movs	r2, #0
 800b328:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d107      	bne.n	800b340 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800b330:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b334:	68b8      	ldr	r0, [r7, #8]
 800b336:	f000 f8c3 	bl	800b4c0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800b33a:	2301      	movs	r3, #1
 800b33c:	613b      	str	r3, [r7, #16]
 800b33e:	e010      	b.n	800b362 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2b01      	cmp	r3, #1
 800b344:	d002      	beq.n	800b34c <HAL_FLASH_Program+0x84>
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2b02      	cmp	r3, #2
 800b34a:	d10a      	bne.n	800b362 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	4619      	mov	r1, r3
 800b350:	68b8      	ldr	r0, [r7, #8]
 800b352:	f000 f8db 	bl	800b50c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2b02      	cmp	r3, #2
 800b35a:	d102      	bne.n	800b362 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800b35c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b360:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b366:	f000 f857 	bl	800b418 <FLASH_WaitForLastOperation>
 800b36a:	4603      	mov	r3, r0
 800b36c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d006      	beq.n	800b382 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800b374:	4b09      	ldr	r3, [pc, #36]	; (800b39c <HAL_FLASH_Program+0xd4>)
 800b376:	695a      	ldr	r2, [r3, #20]
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	43db      	mvns	r3, r3
 800b37c:	4907      	ldr	r1, [pc, #28]	; (800b39c <HAL_FLASH_Program+0xd4>)
 800b37e:	4013      	ands	r3, r2
 800b380:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800b382:	f000 fa11 	bl	800b7a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b386:	4b04      	ldr	r3, [pc, #16]	; (800b398 <HAL_FLASH_Program+0xd0>)
 800b388:	2200      	movs	r2, #0
 800b38a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800b38c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20000018 	.word	0x20000018
 800b39c:	40022000 	.word	0x40022000

0800b3a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800b3aa:	4b0b      	ldr	r3, [pc, #44]	; (800b3d8 <HAL_FLASH_Unlock+0x38>)
 800b3ac:	695b      	ldr	r3, [r3, #20]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	da0b      	bge.n	800b3ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800b3b2:	4b09      	ldr	r3, [pc, #36]	; (800b3d8 <HAL_FLASH_Unlock+0x38>)
 800b3b4:	4a09      	ldr	r2, [pc, #36]	; (800b3dc <HAL_FLASH_Unlock+0x3c>)
 800b3b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800b3b8:	4b07      	ldr	r3, [pc, #28]	; (800b3d8 <HAL_FLASH_Unlock+0x38>)
 800b3ba:	4a09      	ldr	r2, [pc, #36]	; (800b3e0 <HAL_FLASH_Unlock+0x40>)
 800b3bc:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800b3be:	4b06      	ldr	r3, [pc, #24]	; (800b3d8 <HAL_FLASH_Unlock+0x38>)
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	da01      	bge.n	800b3ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800b3ca:	79fb      	ldrb	r3, [r7, #7]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr
 800b3d8:	40022000 	.word	0x40022000
 800b3dc:	45670123 	.word	0x45670123
 800b3e0:	cdef89ab 	.word	0xcdef89ab

0800b3e4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800b3ee:	4b09      	ldr	r3, [pc, #36]	; (800b414 <HAL_FLASH_Lock+0x30>)
 800b3f0:	695b      	ldr	r3, [r3, #20]
 800b3f2:	4a08      	ldr	r2, [pc, #32]	; (800b414 <HAL_FLASH_Lock+0x30>)
 800b3f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3f8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800b3fa:	4b06      	ldr	r3, [pc, #24]	; (800b414 <HAL_FLASH_Lock+0x30>)
 800b3fc:	695b      	ldr	r3, [r3, #20]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	da01      	bge.n	800b406 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800b402:	2300      	movs	r3, #0
 800b404:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b406:	79fb      	ldrb	r3, [r7, #7]
}
 800b408:	4618      	mov	r0, r3
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	40022000 	.word	0x40022000

0800b418 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800b420:	f7ff fd54 	bl	800aecc <HAL_GetTick>
 800b424:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800b426:	e009      	b.n	800b43c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 800b428:	f7ff fd50 	bl	800aecc <HAL_GetTick>
 800b42c:	4602      	mov	r2, r0
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	429a      	cmp	r2, r3
 800b436:	d201      	bcs.n	800b43c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800b438:	2303      	movs	r3, #3
 800b43a:	e038      	b.n	800b4ae <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800b43c:	4b1e      	ldr	r3, [pc, #120]	; (800b4b8 <FLASH_WaitForLastOperation+0xa0>)
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b448:	d0ee      	beq.n	800b428 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800b44a:	4b1b      	ldr	r3, [pc, #108]	; (800b4b8 <FLASH_WaitForLastOperation+0xa0>)
 800b44c:	691a      	ldr	r2, [r3, #16]
 800b44e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800b452:	4013      	ands	r3, r2
 800b454:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d01e      	beq.n	800b49a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 800b45c:	4b17      	ldr	r3, [pc, #92]	; (800b4bc <FLASH_WaitForLastOperation+0xa4>)
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	4313      	orrs	r3, r2
 800b464:	4a15      	ldr	r2, [pc, #84]	; (800b4bc <FLASH_WaitForLastOperation+0xa4>)
 800b466:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d007      	beq.n	800b482 <FLASH_WaitForLastOperation+0x6a>
 800b472:	4b11      	ldr	r3, [pc, #68]	; (800b4b8 <FLASH_WaitForLastOperation+0xa0>)
 800b474:	699a      	ldr	r2, [r3, #24]
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b47c:	490e      	ldr	r1, [pc, #56]	; (800b4b8 <FLASH_WaitForLastOperation+0xa0>)
 800b47e:	4313      	orrs	r3, r2
 800b480:	618b      	str	r3, [r1, #24]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d004      	beq.n	800b496 <FLASH_WaitForLastOperation+0x7e>
 800b48c:	4a0a      	ldr	r2, [pc, #40]	; (800b4b8 <FLASH_WaitForLastOperation+0xa0>)
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b494:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e009      	b.n	800b4ae <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800b49a:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <FLASH_WaitForLastOperation+0xa0>)
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	f003 0301 	and.w	r3, r3, #1
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d102      	bne.n	800b4ac <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b4a6:	4b04      	ldr	r3, [pc, #16]	; (800b4b8 <FLASH_WaitForLastOperation+0xa0>)
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	40022000 	.word	0x40022000
 800b4bc:	20000018 	.word	0x20000018

0800b4c0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800b4cc:	4b0e      	ldr	r3, [pc, #56]	; (800b508 <FLASH_Program_DoubleWord+0x48>)
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	4a0d      	ldr	r2, [pc, #52]	; (800b508 <FLASH_Program_DoubleWord+0x48>)
 800b4d2:	f043 0301 	orr.w	r3, r3, #1
 800b4d6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800b4de:	f3bf 8f6f 	isb	sy
}
 800b4e2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800b4e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b4e8:	f04f 0200 	mov.w	r2, #0
 800b4ec:	f04f 0300 	mov.w	r3, #0
 800b4f0:	000a      	movs	r2, r1
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	68f9      	ldr	r1, [r7, #12]
 800b4f6:	3104      	adds	r1, #4
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	600b      	str	r3, [r1, #0]
}
 800b4fc:	bf00      	nop
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	40022000 	.word	0x40022000

0800b50c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b089      	sub	sp, #36	; 0x24
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800b516:	2340      	movs	r3, #64	; 0x40
 800b518:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800b522:	4b14      	ldr	r3, [pc, #80]	; (800b574 <FLASH_Program_Fast+0x68>)
 800b524:	695b      	ldr	r3, [r3, #20]
 800b526:	4a13      	ldr	r2, [pc, #76]	; (800b574 <FLASH_Program_Fast+0x68>)
 800b528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b52c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b52e:	f3ef 8310 	mrs	r3, PRIMASK
 800b532:	60fb      	str	r3, [r7, #12]
  return(result);
 800b534:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800b536:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b538:	b672      	cpsid	i
}
 800b53a:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	3304      	adds	r3, #4
 800b548:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	3304      	adds	r3, #4
 800b54e:	617b      	str	r3, [r7, #20]
    row_index--;
 800b550:	7ffb      	ldrb	r3, [r7, #31]
 800b552:	3b01      	subs	r3, #1
 800b554:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800b556:	7ffb      	ldrb	r3, [r7, #31]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1ef      	bne.n	800b53c <FLASH_Program_Fast+0x30>
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	f383 8810 	msr	PRIMASK, r3
}
 800b566:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800b568:	bf00      	nop
 800b56a:	3724      	adds	r7, #36	; 0x24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr
 800b574:	40022000 	.word	0x40022000

0800b578 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b582:	4b49      	ldr	r3, [pc, #292]	; (800b6a8 <HAL_FLASHEx_Erase+0x130>)
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	2b01      	cmp	r3, #1
 800b588:	d101      	bne.n	800b58e <HAL_FLASHEx_Erase+0x16>
 800b58a:	2302      	movs	r3, #2
 800b58c:	e087      	b.n	800b69e <HAL_FLASHEx_Erase+0x126>
 800b58e:	4b46      	ldr	r3, [pc, #280]	; (800b6a8 <HAL_FLASHEx_Erase+0x130>)
 800b590:	2201      	movs	r2, #1
 800b592:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b598:	f7ff ff3e 	bl	800b418 <FLASH_WaitForLastOperation>
 800b59c:	4603      	mov	r3, r0
 800b59e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d177      	bne.n	800b696 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b5a6:	4b40      	ldr	r3, [pc, #256]	; (800b6a8 <HAL_FLASHEx_Erase+0x130>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800b5ac:	4b3f      	ldr	r3, [pc, #252]	; (800b6ac <HAL_FLASHEx_Erase+0x134>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d013      	beq.n	800b5e0 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800b5b8:	4b3c      	ldr	r3, [pc, #240]	; (800b6ac <HAL_FLASHEx_Erase+0x134>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d009      	beq.n	800b5d8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800b5c4:	4b39      	ldr	r3, [pc, #228]	; (800b6ac <HAL_FLASHEx_Erase+0x134>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a38      	ldr	r2, [pc, #224]	; (800b6ac <HAL_FLASHEx_Erase+0x134>)
 800b5ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5ce:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800b5d0:	4b35      	ldr	r3, [pc, #212]	; (800b6a8 <HAL_FLASHEx_Erase+0x130>)
 800b5d2:	2203      	movs	r2, #3
 800b5d4:	771a      	strb	r2, [r3, #28]
 800b5d6:	e016      	b.n	800b606 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800b5d8:	4b33      	ldr	r3, [pc, #204]	; (800b6a8 <HAL_FLASHEx_Erase+0x130>)
 800b5da:	2201      	movs	r2, #1
 800b5dc:	771a      	strb	r2, [r3, #28]
 800b5de:	e012      	b.n	800b606 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800b5e0:	4b32      	ldr	r3, [pc, #200]	; (800b6ac <HAL_FLASHEx_Erase+0x134>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d009      	beq.n	800b600 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800b5ec:	4b2f      	ldr	r3, [pc, #188]	; (800b6ac <HAL_FLASHEx_Erase+0x134>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a2e      	ldr	r2, [pc, #184]	; (800b6ac <HAL_FLASHEx_Erase+0x134>)
 800b5f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5f6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800b5f8:	4b2b      	ldr	r3, [pc, #172]	; (800b6a8 <HAL_FLASHEx_Erase+0x130>)
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	771a      	strb	r2, [r3, #28]
 800b5fe:	e002      	b.n	800b606 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800b600:	4b29      	ldr	r3, [pc, #164]	; (800b6a8 <HAL_FLASHEx_Erase+0x130>)
 800b602:	2200      	movs	r2, #0
 800b604:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d113      	bne.n	800b636 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	4618      	mov	r0, r3
 800b614:	f000 f84c 	bl	800b6b0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b61c:	f7ff fefc 	bl	800b418 <FLASH_WaitForLastOperation>
 800b620:	4603      	mov	r3, r0
 800b622:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800b624:	4b21      	ldr	r3, [pc, #132]	; (800b6ac <HAL_FLASHEx_Erase+0x134>)
 800b626:	695b      	ldr	r3, [r3, #20]
 800b628:	4a20      	ldr	r2, [pc, #128]	; (800b6ac <HAL_FLASHEx_Erase+0x134>)
 800b62a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b62e:	f023 0304 	bic.w	r3, r3, #4
 800b632:	6153      	str	r3, [r2, #20]
 800b634:	e02d      	b.n	800b692 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	f04f 32ff 	mov.w	r2, #4294967295
 800b63c:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	60bb      	str	r3, [r7, #8]
 800b644:	e01d      	b.n	800b682 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	4619      	mov	r1, r3
 800b64c:	68b8      	ldr	r0, [r7, #8]
 800b64e:	f000 f867 	bl	800b720 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b656:	f7ff fedf 	bl	800b418 <FLASH_WaitForLastOperation>
 800b65a:	4603      	mov	r3, r0
 800b65c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800b65e:	4b13      	ldr	r3, [pc, #76]	; (800b6ac <HAL_FLASHEx_Erase+0x134>)
 800b660:	695b      	ldr	r3, [r3, #20]
 800b662:	4a12      	ldr	r2, [pc, #72]	; (800b6ac <HAL_FLASHEx_Erase+0x134>)
 800b664:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800b668:	f023 0302 	bic.w	r3, r3, #2
 800b66c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800b66e:	7bfb      	ldrb	r3, [r7, #15]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d003      	beq.n	800b67c <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	601a      	str	r2, [r3, #0]
          break;
 800b67a:	e00a      	b.n	800b692 <HAL_FLASHEx_Erase+0x11a>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	3301      	adds	r3, #1
 800b680:	60bb      	str	r3, [r7, #8]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	689a      	ldr	r2, [r3, #8]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	4413      	add	r3, r2
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d3d9      	bcc.n	800b646 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800b692:	f000 f889 	bl	800b7a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b696:	4b04      	ldr	r3, [pc, #16]	; (800b6a8 <HAL_FLASHEx_Erase+0x130>)
 800b698:	2200      	movs	r2, #0
 800b69a:	701a      	strb	r2, [r3, #0]

  return status;
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	20000018 	.word	0x20000018
 800b6ac:	40022000 	.word	0x40022000

0800b6b0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 800b6b8:	4b18      	ldr	r3, [pc, #96]	; (800b71c <FLASH_MassErase+0x6c>)
 800b6ba:	6a1b      	ldr	r3, [r3, #32]
 800b6bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d016      	beq.n	800b6f2 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f003 0301 	and.w	r3, r3, #1
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d005      	beq.n	800b6da <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800b6ce:	4b13      	ldr	r3, [pc, #76]	; (800b71c <FLASH_MassErase+0x6c>)
 800b6d0:	695b      	ldr	r3, [r3, #20]
 800b6d2:	4a12      	ldr	r2, [pc, #72]	; (800b71c <FLASH_MassErase+0x6c>)
 800b6d4:	f043 0304 	orr.w	r3, r3, #4
 800b6d8:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f003 0302 	and.w	r3, r3, #2
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00e      	beq.n	800b702 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800b6e4:	4b0d      	ldr	r3, [pc, #52]	; (800b71c <FLASH_MassErase+0x6c>)
 800b6e6:	695b      	ldr	r3, [r3, #20]
 800b6e8:	4a0c      	ldr	r2, [pc, #48]	; (800b71c <FLASH_MassErase+0x6c>)
 800b6ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6ee:	6153      	str	r3, [r2, #20]
 800b6f0:	e007      	b.n	800b702 <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800b6f2:	4b0a      	ldr	r3, [pc, #40]	; (800b71c <FLASH_MassErase+0x6c>)
 800b6f4:	695b      	ldr	r3, [r3, #20]
 800b6f6:	4a09      	ldr	r2, [pc, #36]	; (800b71c <FLASH_MassErase+0x6c>)
 800b6f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6fc:	f043 0304 	orr.w	r3, r3, #4
 800b700:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800b702:	4b06      	ldr	r3, [pc, #24]	; (800b71c <FLASH_MassErase+0x6c>)
 800b704:	695b      	ldr	r3, [r3, #20]
 800b706:	4a05      	ldr	r2, [pc, #20]	; (800b71c <FLASH_MassErase+0x6c>)
 800b708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b70c:	6153      	str	r3, [r2, #20]
}
 800b70e:	bf00      	nop
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	40022000 	.word	0x40022000

0800b720 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800b72a:	4b1e      	ldr	r3, [pc, #120]	; (800b7a4 <FLASH_PageErase+0x84>)
 800b72c:	6a1b      	ldr	r3, [r3, #32]
 800b72e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b732:	2b00      	cmp	r3, #0
 800b734:	d106      	bne.n	800b744 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800b736:	4b1b      	ldr	r3, [pc, #108]	; (800b7a4 <FLASH_PageErase+0x84>)
 800b738:	695b      	ldr	r3, [r3, #20]
 800b73a:	4a1a      	ldr	r2, [pc, #104]	; (800b7a4 <FLASH_PageErase+0x84>)
 800b73c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b740:	6153      	str	r3, [r2, #20]
 800b742:	e011      	b.n	800b768 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	f003 0301 	and.w	r3, r3, #1
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d006      	beq.n	800b75c <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800b74e:	4b15      	ldr	r3, [pc, #84]	; (800b7a4 <FLASH_PageErase+0x84>)
 800b750:	695b      	ldr	r3, [r3, #20]
 800b752:	4a14      	ldr	r2, [pc, #80]	; (800b7a4 <FLASH_PageErase+0x84>)
 800b754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b758:	6153      	str	r3, [r2, #20]
 800b75a:	e005      	b.n	800b768 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800b75c:	4b11      	ldr	r3, [pc, #68]	; (800b7a4 <FLASH_PageErase+0x84>)
 800b75e:	695b      	ldr	r3, [r3, #20]
 800b760:	4a10      	ldr	r2, [pc, #64]	; (800b7a4 <FLASH_PageErase+0x84>)
 800b762:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b766:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800b768:	4b0e      	ldr	r3, [pc, #56]	; (800b7a4 <FLASH_PageErase+0x84>)
 800b76a:	695b      	ldr	r3, [r3, #20]
 800b76c:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	00db      	lsls	r3, r3, #3
 800b774:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800b778:	490a      	ldr	r1, [pc, #40]	; (800b7a4 <FLASH_PageErase+0x84>)
 800b77a:	4313      	orrs	r3, r2
 800b77c:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800b77e:	4b09      	ldr	r3, [pc, #36]	; (800b7a4 <FLASH_PageErase+0x84>)
 800b780:	695b      	ldr	r3, [r3, #20]
 800b782:	4a08      	ldr	r2, [pc, #32]	; (800b7a4 <FLASH_PageErase+0x84>)
 800b784:	f043 0302 	orr.w	r3, r3, #2
 800b788:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800b78a:	4b06      	ldr	r3, [pc, #24]	; (800b7a4 <FLASH_PageErase+0x84>)
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	4a05      	ldr	r2, [pc, #20]	; (800b7a4 <FLASH_PageErase+0x84>)
 800b790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b794:	6153      	str	r3, [r2, #20]
}
 800b796:	bf00      	nop
 800b798:	370c      	adds	r7, #12
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	40022000 	.word	0x40022000

0800b7a8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800b7ae:	4b21      	ldr	r3, [pc, #132]	; (800b834 <FLASH_FlushCaches+0x8c>)
 800b7b0:	7f1b      	ldrb	r3, [r3, #28]
 800b7b2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800b7b4:	79fb      	ldrb	r3, [r7, #7]
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d002      	beq.n	800b7c0 <FLASH_FlushCaches+0x18>
 800b7ba:	79fb      	ldrb	r3, [r7, #7]
 800b7bc:	2b03      	cmp	r3, #3
 800b7be:	d117      	bne.n	800b7f0 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800b7c0:	4b1d      	ldr	r3, [pc, #116]	; (800b838 <FLASH_FlushCaches+0x90>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a1c      	ldr	r2, [pc, #112]	; (800b838 <FLASH_FlushCaches+0x90>)
 800b7c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b7ca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800b7cc:	4b1a      	ldr	r3, [pc, #104]	; (800b838 <FLASH_FlushCaches+0x90>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a19      	ldr	r2, [pc, #100]	; (800b838 <FLASH_FlushCaches+0x90>)
 800b7d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	4b17      	ldr	r3, [pc, #92]	; (800b838 <FLASH_FlushCaches+0x90>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a16      	ldr	r2, [pc, #88]	; (800b838 <FLASH_FlushCaches+0x90>)
 800b7de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b7e2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b7e4:	4b14      	ldr	r3, [pc, #80]	; (800b838 <FLASH_FlushCaches+0x90>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a13      	ldr	r2, [pc, #76]	; (800b838 <FLASH_FlushCaches+0x90>)
 800b7ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b7ee:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800b7f0:	79fb      	ldrb	r3, [r7, #7]
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d002      	beq.n	800b7fc <FLASH_FlushCaches+0x54>
 800b7f6:	79fb      	ldrb	r3, [r7, #7]
 800b7f8:	2b03      	cmp	r3, #3
 800b7fa:	d111      	bne.n	800b820 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800b7fc:	4b0e      	ldr	r3, [pc, #56]	; (800b838 <FLASH_FlushCaches+0x90>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a0d      	ldr	r2, [pc, #52]	; (800b838 <FLASH_FlushCaches+0x90>)
 800b802:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b806:	6013      	str	r3, [r2, #0]
 800b808:	4b0b      	ldr	r3, [pc, #44]	; (800b838 <FLASH_FlushCaches+0x90>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a0a      	ldr	r2, [pc, #40]	; (800b838 <FLASH_FlushCaches+0x90>)
 800b80e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b812:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b814:	4b08      	ldr	r3, [pc, #32]	; (800b838 <FLASH_FlushCaches+0x90>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a07      	ldr	r2, [pc, #28]	; (800b838 <FLASH_FlushCaches+0x90>)
 800b81a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b81e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800b820:	4b04      	ldr	r3, [pc, #16]	; (800b834 <FLASH_FlushCaches+0x8c>)
 800b822:	2200      	movs	r2, #0
 800b824:	771a      	strb	r2, [r3, #28]
}
 800b826:	bf00      	nop
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	20000018 	.word	0x20000018
 800b838:	40022000 	.word	0x40022000

0800b83c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b087      	sub	sp, #28
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b846:	2300      	movs	r3, #0
 800b848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b84a:	e15a      	b.n	800bb02 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	2101      	movs	r1, #1
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	fa01 f303 	lsl.w	r3, r1, r3
 800b858:	4013      	ands	r3, r2
 800b85a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	f000 814c 	beq.w	800bafc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	f003 0303 	and.w	r3, r3, #3
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d005      	beq.n	800b87c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d130      	bne.n	800b8de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	005b      	lsls	r3, r3, #1
 800b886:	2203      	movs	r2, #3
 800b888:	fa02 f303 	lsl.w	r3, r2, r3
 800b88c:	43db      	mvns	r3, r3
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	4013      	ands	r3, r2
 800b892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	68da      	ldr	r2, [r3, #12]
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a0:	693a      	ldr	r2, [r7, #16]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ba:	43db      	mvns	r3, r3
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	4013      	ands	r3, r2
 800b8c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	091b      	lsrs	r3, r3, #4
 800b8c8:	f003 0201 	and.w	r2, r3, #1
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d2:	693a      	ldr	r2, [r7, #16]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	f003 0303 	and.w	r3, r3, #3
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	d017      	beq.n	800b91a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	2203      	movs	r2, #3
 800b8f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8fa:	43db      	mvns	r3, r3
 800b8fc:	693a      	ldr	r2, [r7, #16]
 800b8fe:	4013      	ands	r3, r2
 800b900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	689a      	ldr	r2, [r3, #8]
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	005b      	lsls	r3, r3, #1
 800b90a:	fa02 f303 	lsl.w	r3, r2, r3
 800b90e:	693a      	ldr	r2, [r7, #16]
 800b910:	4313      	orrs	r3, r2
 800b912:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	f003 0303 	and.w	r3, r3, #3
 800b922:	2b02      	cmp	r3, #2
 800b924:	d123      	bne.n	800b96e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	08da      	lsrs	r2, r3, #3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	3208      	adds	r2, #8
 800b92e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b932:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	f003 0307 	and.w	r3, r3, #7
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	220f      	movs	r2, #15
 800b93e:	fa02 f303 	lsl.w	r3, r2, r3
 800b942:	43db      	mvns	r3, r3
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	4013      	ands	r3, r2
 800b948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	691a      	ldr	r2, [r3, #16]
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f003 0307 	and.w	r3, r3, #7
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	fa02 f303 	lsl.w	r3, r2, r3
 800b95a:	693a      	ldr	r2, [r7, #16]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	08da      	lsrs	r2, r3, #3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	3208      	adds	r2, #8
 800b968:	6939      	ldr	r1, [r7, #16]
 800b96a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	005b      	lsls	r3, r3, #1
 800b978:	2203      	movs	r2, #3
 800b97a:	fa02 f303 	lsl.w	r3, r2, r3
 800b97e:	43db      	mvns	r3, r3
 800b980:	693a      	ldr	r2, [r7, #16]
 800b982:	4013      	ands	r3, r2
 800b984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	f003 0203 	and.w	r2, r3, #3
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	005b      	lsls	r3, r3, #1
 800b992:	fa02 f303 	lsl.w	r3, r2, r3
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	4313      	orrs	r3, r2
 800b99a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	693a      	ldr	r2, [r7, #16]
 800b9a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f000 80a6 	beq.w	800bafc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b9b0:	4b5b      	ldr	r3, [pc, #364]	; (800bb20 <HAL_GPIO_Init+0x2e4>)
 800b9b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9b4:	4a5a      	ldr	r2, [pc, #360]	; (800bb20 <HAL_GPIO_Init+0x2e4>)
 800b9b6:	f043 0301 	orr.w	r3, r3, #1
 800b9ba:	6613      	str	r3, [r2, #96]	; 0x60
 800b9bc:	4b58      	ldr	r3, [pc, #352]	; (800bb20 <HAL_GPIO_Init+0x2e4>)
 800b9be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9c0:	f003 0301 	and.w	r3, r3, #1
 800b9c4:	60bb      	str	r3, [r7, #8]
 800b9c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b9c8:	4a56      	ldr	r2, [pc, #344]	; (800bb24 <HAL_GPIO_Init+0x2e8>)
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	089b      	lsrs	r3, r3, #2
 800b9ce:	3302      	adds	r3, #2
 800b9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f003 0303 	and.w	r3, r3, #3
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	220f      	movs	r2, #15
 800b9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9e4:	43db      	mvns	r3, r3
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b9f2:	d01f      	beq.n	800ba34 <HAL_GPIO_Init+0x1f8>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a4c      	ldr	r2, [pc, #304]	; (800bb28 <HAL_GPIO_Init+0x2ec>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d019      	beq.n	800ba30 <HAL_GPIO_Init+0x1f4>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a4b      	ldr	r2, [pc, #300]	; (800bb2c <HAL_GPIO_Init+0x2f0>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d013      	beq.n	800ba2c <HAL_GPIO_Init+0x1f0>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a4a      	ldr	r2, [pc, #296]	; (800bb30 <HAL_GPIO_Init+0x2f4>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d00d      	beq.n	800ba28 <HAL_GPIO_Init+0x1ec>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4a49      	ldr	r2, [pc, #292]	; (800bb34 <HAL_GPIO_Init+0x2f8>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d007      	beq.n	800ba24 <HAL_GPIO_Init+0x1e8>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a48      	ldr	r2, [pc, #288]	; (800bb38 <HAL_GPIO_Init+0x2fc>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d101      	bne.n	800ba20 <HAL_GPIO_Init+0x1e4>
 800ba1c:	2305      	movs	r3, #5
 800ba1e:	e00a      	b.n	800ba36 <HAL_GPIO_Init+0x1fa>
 800ba20:	2306      	movs	r3, #6
 800ba22:	e008      	b.n	800ba36 <HAL_GPIO_Init+0x1fa>
 800ba24:	2304      	movs	r3, #4
 800ba26:	e006      	b.n	800ba36 <HAL_GPIO_Init+0x1fa>
 800ba28:	2303      	movs	r3, #3
 800ba2a:	e004      	b.n	800ba36 <HAL_GPIO_Init+0x1fa>
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	e002      	b.n	800ba36 <HAL_GPIO_Init+0x1fa>
 800ba30:	2301      	movs	r3, #1
 800ba32:	e000      	b.n	800ba36 <HAL_GPIO_Init+0x1fa>
 800ba34:	2300      	movs	r3, #0
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	f002 0203 	and.w	r2, r2, #3
 800ba3c:	0092      	lsls	r2, r2, #2
 800ba3e:	4093      	lsls	r3, r2
 800ba40:	693a      	ldr	r2, [r7, #16]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ba46:	4937      	ldr	r1, [pc, #220]	; (800bb24 <HAL_GPIO_Init+0x2e8>)
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	089b      	lsrs	r3, r3, #2
 800ba4c:	3302      	adds	r3, #2
 800ba4e:	693a      	ldr	r2, [r7, #16]
 800ba50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ba54:	4b39      	ldr	r3, [pc, #228]	; (800bb3c <HAL_GPIO_Init+0x300>)
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	43db      	mvns	r3, r3
 800ba5e:	693a      	ldr	r2, [r7, #16]
 800ba60:	4013      	ands	r3, r2
 800ba62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d003      	beq.n	800ba78 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800ba70:	693a      	ldr	r2, [r7, #16]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ba78:	4a30      	ldr	r2, [pc, #192]	; (800bb3c <HAL_GPIO_Init+0x300>)
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ba7e:	4b2f      	ldr	r3, [pc, #188]	; (800bb3c <HAL_GPIO_Init+0x300>)
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	43db      	mvns	r3, r3
 800ba88:	693a      	ldr	r2, [r7, #16]
 800ba8a:	4013      	ands	r3, r2
 800ba8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d003      	beq.n	800baa2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800ba9a:	693a      	ldr	r2, [r7, #16]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800baa2:	4a26      	ldr	r2, [pc, #152]	; (800bb3c <HAL_GPIO_Init+0x300>)
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800baa8:	4b24      	ldr	r3, [pc, #144]	; (800bb3c <HAL_GPIO_Init+0x300>)
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	43db      	mvns	r3, r3
 800bab2:	693a      	ldr	r2, [r7, #16]
 800bab4:	4013      	ands	r3, r2
 800bab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d003      	beq.n	800bacc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800bac4:	693a      	ldr	r2, [r7, #16]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	4313      	orrs	r3, r2
 800baca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bacc:	4a1b      	ldr	r2, [pc, #108]	; (800bb3c <HAL_GPIO_Init+0x300>)
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800bad2:	4b1a      	ldr	r3, [pc, #104]	; (800bb3c <HAL_GPIO_Init+0x300>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	43db      	mvns	r3, r3
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	4013      	ands	r3, r2
 800bae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800baea:	2b00      	cmp	r3, #0
 800baec:	d003      	beq.n	800baf6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800baee:	693a      	ldr	r2, [r7, #16]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800baf6:	4a11      	ldr	r2, [pc, #68]	; (800bb3c <HAL_GPIO_Init+0x300>)
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	3301      	adds	r3, #1
 800bb00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	fa22 f303 	lsr.w	r3, r2, r3
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f47f ae9d 	bne.w	800b84c <HAL_GPIO_Init+0x10>
  }
}
 800bb12:	bf00      	nop
 800bb14:	bf00      	nop
 800bb16:	371c      	adds	r7, #28
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr
 800bb20:	40021000 	.word	0x40021000
 800bb24:	40010000 	.word	0x40010000
 800bb28:	48000400 	.word	0x48000400
 800bb2c:	48000800 	.word	0x48000800
 800bb30:	48000c00 	.word	0x48000c00
 800bb34:	48001000 	.word	0x48001000
 800bb38:	48001400 	.word	0x48001400
 800bb3c:	40010400 	.word	0x40010400

0800bb40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	691a      	ldr	r2, [r3, #16]
 800bb50:	887b      	ldrh	r3, [r7, #2]
 800bb52:	4013      	ands	r3, r2
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	73fb      	strb	r3, [r7, #15]
 800bb5c:	e001      	b.n	800bb62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bb62:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	460b      	mov	r3, r1
 800bb7a:	807b      	strh	r3, [r7, #2]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bb80:	787b      	ldrb	r3, [r7, #1]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800bb86:	887a      	ldrh	r2, [r7, #2]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800bb8c:	e002      	b.n	800bb94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800bb8e:	887a      	ldrh	r2, [r7, #2]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bb94:	bf00      	nop
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	460b      	mov	r3, r1
 800bbaa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	695b      	ldr	r3, [r3, #20]
 800bbb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bbb2:	887a      	ldrh	r2, [r7, #2]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	4013      	ands	r3, r2
 800bbb8:	041a      	lsls	r2, r3, #16
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	43d9      	mvns	r1, r3
 800bbbe:	887b      	ldrh	r3, [r7, #2]
 800bbc0:	400b      	ands	r3, r1
 800bbc2:	431a      	orrs	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	619a      	str	r2, [r3, #24]
}
 800bbc8:	bf00      	nop
 800bbca:	3714      	adds	r7, #20
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e0c0      	b.n	800bd68 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d106      	bne.n	800bc00 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f009 faee 	bl	80151dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2203      	movs	r2, #3
 800bc04:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f005 f84c 	bl	8010caa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc12:	2300      	movs	r3, #0
 800bc14:	73fb      	strb	r3, [r7, #15]
 800bc16:	e03e      	b.n	800bc96 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bc18:	7bfa      	ldrb	r2, [r7, #15]
 800bc1a:	6879      	ldr	r1, [r7, #4]
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4413      	add	r3, r2
 800bc22:	00db      	lsls	r3, r3, #3
 800bc24:	440b      	add	r3, r1
 800bc26:	3311      	adds	r3, #17
 800bc28:	2201      	movs	r2, #1
 800bc2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bc2c:	7bfa      	ldrb	r2, [r7, #15]
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	4613      	mov	r3, r2
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4413      	add	r3, r2
 800bc36:	00db      	lsls	r3, r3, #3
 800bc38:	440b      	add	r3, r1
 800bc3a:	3310      	adds	r3, #16
 800bc3c:	7bfa      	ldrb	r2, [r7, #15]
 800bc3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bc40:	7bfa      	ldrb	r2, [r7, #15]
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	4613      	mov	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4413      	add	r3, r2
 800bc4a:	00db      	lsls	r3, r3, #3
 800bc4c:	440b      	add	r3, r1
 800bc4e:	3313      	adds	r3, #19
 800bc50:	2200      	movs	r2, #0
 800bc52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bc54:	7bfa      	ldrb	r2, [r7, #15]
 800bc56:	6879      	ldr	r1, [r7, #4]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	4413      	add	r3, r2
 800bc5e:	00db      	lsls	r3, r3, #3
 800bc60:	440b      	add	r3, r1
 800bc62:	3320      	adds	r3, #32
 800bc64:	2200      	movs	r2, #0
 800bc66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bc68:	7bfa      	ldrb	r2, [r7, #15]
 800bc6a:	6879      	ldr	r1, [r7, #4]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4413      	add	r3, r2
 800bc72:	00db      	lsls	r3, r3, #3
 800bc74:	440b      	add	r3, r1
 800bc76:	3324      	adds	r3, #36	; 0x24
 800bc78:	2200      	movs	r2, #0
 800bc7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
 800bc7e:	6879      	ldr	r1, [r7, #4]
 800bc80:	1c5a      	adds	r2, r3, #1
 800bc82:	4613      	mov	r3, r2
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	4413      	add	r3, r2
 800bc88:	00db      	lsls	r3, r3, #3
 800bc8a:	440b      	add	r3, r1
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc90:	7bfb      	ldrb	r3, [r7, #15]
 800bc92:	3301      	adds	r3, #1
 800bc94:	73fb      	strb	r3, [r7, #15]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	791b      	ldrb	r3, [r3, #4]
 800bc9a:	7bfa      	ldrb	r2, [r7, #15]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d3bb      	bcc.n	800bc18 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bca0:	2300      	movs	r3, #0
 800bca2:	73fb      	strb	r3, [r7, #15]
 800bca4:	e044      	b.n	800bd30 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bca6:	7bfa      	ldrb	r2, [r7, #15]
 800bca8:	6879      	ldr	r1, [r7, #4]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	00db      	lsls	r3, r3, #3
 800bcb2:	440b      	add	r3, r1
 800bcb4:	f203 1351 	addw	r3, r3, #337	; 0x151
 800bcb8:	2200      	movs	r2, #0
 800bcba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bcbc:	7bfa      	ldrb	r2, [r7, #15]
 800bcbe:	6879      	ldr	r1, [r7, #4]
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	4413      	add	r3, r2
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	440b      	add	r3, r1
 800bcca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bcce:	7bfa      	ldrb	r2, [r7, #15]
 800bcd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bcd2:	7bfa      	ldrb	r2, [r7, #15]
 800bcd4:	6879      	ldr	r1, [r7, #4]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	4413      	add	r3, r2
 800bcdc:	00db      	lsls	r3, r3, #3
 800bcde:	440b      	add	r3, r1
 800bce0:	f203 1353 	addw	r3, r3, #339	; 0x153
 800bce4:	2200      	movs	r2, #0
 800bce6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bce8:	7bfa      	ldrb	r2, [r7, #15]
 800bcea:	6879      	ldr	r1, [r7, #4]
 800bcec:	4613      	mov	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	4413      	add	r3, r2
 800bcf2:	00db      	lsls	r3, r3, #3
 800bcf4:	440b      	add	r3, r1
 800bcf6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bcfe:	7bfa      	ldrb	r2, [r7, #15]
 800bd00:	6879      	ldr	r1, [r7, #4]
 800bd02:	4613      	mov	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	4413      	add	r3, r2
 800bd08:	00db      	lsls	r3, r3, #3
 800bd0a:	440b      	add	r3, r1
 800bd0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd10:	2200      	movs	r2, #0
 800bd12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bd14:	7bfa      	ldrb	r2, [r7, #15]
 800bd16:	6879      	ldr	r1, [r7, #4]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4413      	add	r3, r2
 800bd1e:	00db      	lsls	r3, r3, #3
 800bd20:	440b      	add	r3, r1
 800bd22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bd26:	2200      	movs	r2, #0
 800bd28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd2a:	7bfb      	ldrb	r3, [r7, #15]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	73fb      	strb	r3, [r7, #15]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	791b      	ldrb	r3, [r3, #4]
 800bd34:	7bfa      	ldrb	r2, [r7, #15]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d3b5      	bcc.n	800bca6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6818      	ldr	r0, [r3, #0]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	3304      	adds	r3, #4
 800bd42:	e893 0006 	ldmia.w	r3, {r1, r2}
 800bd46:	f004 ffcb 	bl	8010ce0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	7a9b      	ldrb	r3, [r3, #10]
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d102      	bne.n	800bd66 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f001 fc41 	bl	800d5e8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800bd66:	2300      	movs	r3, #0
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d101      	bne.n	800bd86 <HAL_PCD_Start+0x16>
 800bd82:	2302      	movs	r3, #2
 800bd84:	e012      	b.n	800bdac <HAL_PCD_Start+0x3c>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4618      	mov	r0, r3
 800bd94:	f004 ff72 	bl	8010c7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f007 fa32 	bl	8013206 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f007 fa37 	bl	8013234 <USB_ReadInterrupts>
 800bdc6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d003      	beq.n	800bdda <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 fb04 	bl	800c3e0 <PCD_EP_ISR_Handler>

    return;
 800bdd8:	e110      	b.n	800bffc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d013      	beq.n	800be0c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdf6:	b292      	uxth	r2, r2
 800bdf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f009 fa7e 	bl	80152fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800be02:	2100      	movs	r1, #0
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 f8fc 	bl	800c002 <HAL_PCD_SetAddress>

    return;
 800be0a:	e0f7      	b.n	800bffc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00c      	beq.n	800be30 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800be1e:	b29a      	uxth	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800be28:	b292      	uxth	r2, r2
 800be2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800be2e:	e0e5      	b.n	800bffc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00c      	beq.n	800be54 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800be42:	b29a      	uxth	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be4c:	b292      	uxth	r2, r2
 800be4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800be52:	e0d3      	b.n	800bffc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d034      	beq.n	800bec8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800be66:	b29a      	uxth	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f022 0204 	bic.w	r2, r2, #4
 800be70:	b292      	uxth	r2, r2
 800be72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800be7e:	b29a      	uxth	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f022 0208 	bic.w	r2, r2, #8
 800be88:	b292      	uxth	r2, r2
 800be8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800be94:	2b01      	cmp	r3, #1
 800be96:	d107      	bne.n	800bea8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800bea0:	2100      	movs	r1, #0
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f009 fc1e 	bl	80156e4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f009 fa61 	bl	8015370 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800beb6:	b29a      	uxth	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bec0:	b292      	uxth	r2, r2
 800bec2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800bec6:	e099      	b.n	800bffc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d027      	beq.n	800bf22 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800beda:	b29a      	uxth	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f042 0208 	orr.w	r2, r2, #8
 800bee4:	b292      	uxth	r2, r2
 800bee6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800befc:	b292      	uxth	r2, r2
 800befe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f042 0204 	orr.w	r2, r2, #4
 800bf14:	b292      	uxth	r2, r2
 800bf16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f009 fa0e 	bl	801533c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800bf20:	e06c      	b.n	800bffc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d040      	beq.n	800bfae <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bf34:	b29a      	uxth	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf3e:	b292      	uxth	r2, r2
 800bf40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d12b      	bne.n	800bfa6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f042 0204 	orr.w	r2, r2, #4
 800bf60:	b292      	uxth	r2, r2
 800bf62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f042 0208 	orr.w	r2, r2, #8
 800bf78:	b292      	uxth	r2, r2
 800bf7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2201      	movs	r2, #1
 800bf82:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	089b      	lsrs	r3, r3, #2
 800bf92:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f009 fba0 	bl	80156e4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800bfa4:	e02a      	b.n	800bffc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f009 f9c8 	bl	801533c <HAL_PCD_SuspendCallback>
    return;
 800bfac:	e026      	b.n	800bffc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00f      	beq.n	800bfd8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bfc0:	b29a      	uxth	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bfca:	b292      	uxth	r2, r2
 800bfcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f009 f986 	bl	80152e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800bfd6:	e011      	b.n	800bffc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d00c      	beq.n	800bffc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bfea:	b29a      	uxth	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bff4:	b292      	uxth	r2, r2
 800bff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800bffa:	bf00      	nop
  }
}
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b082      	sub	sp, #8
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	460b      	mov	r3, r1
 800c00c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c014:	2b01      	cmp	r3, #1
 800c016:	d101      	bne.n	800c01c <HAL_PCD_SetAddress+0x1a>
 800c018:	2302      	movs	r3, #2
 800c01a:	e012      	b.n	800c042 <HAL_PCD_SetAddress+0x40>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2201      	movs	r2, #1
 800c020:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	78fa      	ldrb	r2, [r7, #3]
 800c028:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	78fa      	ldrb	r2, [r7, #3]
 800c030:	4611      	mov	r1, r2
 800c032:	4618      	mov	r0, r3
 800c034:	f007 f8d3 	bl	80131de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b084      	sub	sp, #16
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
 800c052:	4608      	mov	r0, r1
 800c054:	4611      	mov	r1, r2
 800c056:	461a      	mov	r2, r3
 800c058:	4603      	mov	r3, r0
 800c05a:	70fb      	strb	r3, [r7, #3]
 800c05c:	460b      	mov	r3, r1
 800c05e:	803b      	strh	r3, [r7, #0]
 800c060:	4613      	mov	r3, r2
 800c062:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c064:	2300      	movs	r3, #0
 800c066:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	da0e      	bge.n	800c08e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c070:	78fb      	ldrb	r3, [r7, #3]
 800c072:	f003 0207 	and.w	r2, r3, #7
 800c076:	4613      	mov	r3, r2
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	4413      	add	r3, r2
 800c07c:	00db      	lsls	r3, r3, #3
 800c07e:	3310      	adds	r3, #16
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	4413      	add	r3, r2
 800c084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2201      	movs	r2, #1
 800c08a:	705a      	strb	r2, [r3, #1]
 800c08c:	e00e      	b.n	800c0ac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c08e:	78fb      	ldrb	r3, [r7, #3]
 800c090:	f003 0207 	and.w	r2, r3, #7
 800c094:	4613      	mov	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	4413      	add	r3, r2
 800c09a:	00db      	lsls	r3, r3, #3
 800c09c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c0ac:	78fb      	ldrb	r3, [r7, #3]
 800c0ae:	f003 0307 	and.w	r3, r3, #7
 800c0b2:	b2da      	uxtb	r2, r3
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c0b8:	883a      	ldrh	r2, [r7, #0]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	78ba      	ldrb	r2, [r7, #2]
 800c0c2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c0c4:	78bb      	ldrb	r3, [r7, #2]
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d102      	bne.n	800c0d0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d101      	bne.n	800c0de <HAL_PCD_EP_Open+0x94>
 800c0da:	2302      	movs	r3, #2
 800c0dc:	e00e      	b.n	800c0fc <HAL_PCD_EP_Open+0xb2>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68f9      	ldr	r1, [r7, #12]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f004 fe15 	bl	8010d1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800c0fa:	7afb      	ldrb	r3, [r7, #11]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	460b      	mov	r3, r1
 800c10e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c114:	2b00      	cmp	r3, #0
 800c116:	da0e      	bge.n	800c136 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c118:	78fb      	ldrb	r3, [r7, #3]
 800c11a:	f003 0207 	and.w	r2, r3, #7
 800c11e:	4613      	mov	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4413      	add	r3, r2
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	3310      	adds	r3, #16
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	4413      	add	r3, r2
 800c12c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2201      	movs	r2, #1
 800c132:	705a      	strb	r2, [r3, #1]
 800c134:	e00e      	b.n	800c154 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c136:	78fb      	ldrb	r3, [r7, #3]
 800c138:	f003 0207 	and.w	r2, r3, #7
 800c13c:	4613      	mov	r3, r2
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	4413      	add	r3, r2
 800c142:	00db      	lsls	r3, r3, #3
 800c144:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	4413      	add	r3, r2
 800c14c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c154:	78fb      	ldrb	r3, [r7, #3]
 800c156:	f003 0307 	and.w	r3, r3, #7
 800c15a:	b2da      	uxtb	r2, r3
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c166:	2b01      	cmp	r3, #1
 800c168:	d101      	bne.n	800c16e <HAL_PCD_EP_Close+0x6a>
 800c16a:	2302      	movs	r3, #2
 800c16c:	e00e      	b.n	800c18c <HAL_PCD_EP_Close+0x88>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2201      	movs	r2, #1
 800c172:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	68f9      	ldr	r1, [r7, #12]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f005 f991 	bl	80114a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	607a      	str	r2, [r7, #4]
 800c19e:	603b      	str	r3, [r7, #0]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c1a4:	7afb      	ldrb	r3, [r7, #11]
 800c1a6:	f003 0207 	and.w	r2, r3, #7
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	4413      	add	r3, r2
 800c1b0:	00db      	lsls	r3, r3, #3
 800c1b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c1d4:	7afb      	ldrb	r3, [r7, #11]
 800c1d6:	f003 0307 	and.w	r3, r3, #7
 800c1da:	b2da      	uxtb	r2, r3
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	6979      	ldr	r1, [r7, #20]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f005 fb49 	bl	801187e <USB_EPStartXfer>

  return HAL_OK;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3718      	adds	r7, #24
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b083      	sub	sp, #12
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	460b      	mov	r3, r1
 800c200:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c202:	78fb      	ldrb	r3, [r7, #3]
 800c204:	f003 0207 	and.w	r2, r3, #7
 800c208:	6879      	ldr	r1, [r7, #4]
 800c20a:	4613      	mov	r3, r2
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	4413      	add	r3, r2
 800c210:	00db      	lsls	r3, r3, #3
 800c212:	440b      	add	r3, r1
 800c214:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800c218:	681b      	ldr	r3, [r3, #0]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b086      	sub	sp, #24
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	60f8      	str	r0, [r7, #12]
 800c22e:	607a      	str	r2, [r7, #4]
 800c230:	603b      	str	r3, [r7, #0]
 800c232:	460b      	mov	r3, r1
 800c234:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c236:	7afb      	ldrb	r3, [r7, #11]
 800c238:	f003 0207 	and.w	r2, r3, #7
 800c23c:	4613      	mov	r3, r2
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	4413      	add	r3, r2
 800c242:	00db      	lsls	r3, r3, #3
 800c244:	3310      	adds	r3, #16
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	4413      	add	r3, r2
 800c24a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	683a      	ldr	r2, [r7, #0]
 800c264:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	2200      	movs	r2, #0
 800c26a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	2201      	movs	r2, #1
 800c270:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c272:	7afb      	ldrb	r3, [r7, #11]
 800c274:	f003 0307 	and.w	r3, r3, #7
 800c278:	b2da      	uxtb	r2, r3
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	6979      	ldr	r1, [r7, #20]
 800c284:	4618      	mov	r0, r3
 800c286:	f005 fafa 	bl	801187e <USB_EPStartXfer>

  return HAL_OK;
 800c28a:	2300      	movs	r3, #0
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3718      	adds	r7, #24
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	460b      	mov	r3, r1
 800c29e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c2a0:	78fb      	ldrb	r3, [r7, #3]
 800c2a2:	f003 0307 	and.w	r3, r3, #7
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	7912      	ldrb	r2, [r2, #4]
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d901      	bls.n	800c2b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e03e      	b.n	800c330 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c2b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	da0e      	bge.n	800c2d8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c2ba:	78fb      	ldrb	r3, [r7, #3]
 800c2bc:	f003 0207 	and.w	r2, r3, #7
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	4413      	add	r3, r2
 800c2c6:	00db      	lsls	r3, r3, #3
 800c2c8:	3310      	adds	r3, #16
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	705a      	strb	r2, [r3, #1]
 800c2d6:	e00c      	b.n	800c2f2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c2d8:	78fa      	ldrb	r2, [r7, #3]
 800c2da:	4613      	mov	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	4413      	add	r3, r2
 800c2e0:	00db      	lsls	r3, r3, #3
 800c2e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c2f8:	78fb      	ldrb	r3, [r7, #3]
 800c2fa:	f003 0307 	and.w	r3, r3, #7
 800c2fe:	b2da      	uxtb	r2, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d101      	bne.n	800c312 <HAL_PCD_EP_SetStall+0x7e>
 800c30e:	2302      	movs	r3, #2
 800c310:	e00e      	b.n	800c330 <HAL_PCD_EP_SetStall+0x9c>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2201      	movs	r2, #1
 800c316:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	68f9      	ldr	r1, [r7, #12]
 800c320:	4618      	mov	r0, r3
 800c322:	f006 fe5d 	bl	8012fe0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c32e:	2300      	movs	r3, #0
}
 800c330:	4618      	mov	r0, r3
 800c332:	3710      	adds	r7, #16
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	460b      	mov	r3, r1
 800c342:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c344:	78fb      	ldrb	r3, [r7, #3]
 800c346:	f003 030f 	and.w	r3, r3, #15
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	7912      	ldrb	r2, [r2, #4]
 800c34e:	4293      	cmp	r3, r2
 800c350:	d901      	bls.n	800c356 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c352:	2301      	movs	r3, #1
 800c354:	e040      	b.n	800c3d8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	da0e      	bge.n	800c37c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c35e:	78fb      	ldrb	r3, [r7, #3]
 800c360:	f003 0207 	and.w	r2, r3, #7
 800c364:	4613      	mov	r3, r2
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	4413      	add	r3, r2
 800c36a:	00db      	lsls	r3, r3, #3
 800c36c:	3310      	adds	r3, #16
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	4413      	add	r3, r2
 800c372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2201      	movs	r2, #1
 800c378:	705a      	strb	r2, [r3, #1]
 800c37a:	e00e      	b.n	800c39a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c37c:	78fb      	ldrb	r3, [r7, #3]
 800c37e:	f003 0207 	and.w	r2, r3, #7
 800c382:	4613      	mov	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	4413      	add	r3, r2
 800c388:	00db      	lsls	r3, r3, #3
 800c38a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	4413      	add	r3, r2
 800c392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2200      	movs	r2, #0
 800c398:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2200      	movs	r2, #0
 800c39e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c3a0:	78fb      	ldrb	r3, [r7, #3]
 800c3a2:	f003 0307 	and.w	r3, r3, #7
 800c3a6:	b2da      	uxtb	r2, r3
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d101      	bne.n	800c3ba <HAL_PCD_EP_ClrStall+0x82>
 800c3b6:	2302      	movs	r3, #2
 800c3b8:	e00e      	b.n	800c3d8 <HAL_PCD_EP_ClrStall+0xa0>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2201      	movs	r2, #1
 800c3be:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	68f9      	ldr	r1, [r7, #12]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f006 fe5a 	bl	8013082 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b096      	sub	sp, #88	; 0x58
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c3e8:	e3ae      	b.n	800cb48 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c3f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800c3f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	f003 030f 	and.w	r3, r3, #15
 800c400:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800c404:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f040 8170 	bne.w	800c6ee <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800c40e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c412:	f003 0310 	and.w	r3, r3, #16
 800c416:	2b00      	cmp	r3, #0
 800c418:	d14d      	bne.n	800c4b6 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	881b      	ldrh	r3, [r3, #0]
 800c420:	b29b      	uxth	r3, r3
 800c422:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800c426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c42a:	81fb      	strh	r3, [r7, #14]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	89fb      	ldrh	r3, [r7, #14]
 800c432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	3310      	adds	r3, #16
 800c442:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	461a      	mov	r2, r3
 800c450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	00db      	lsls	r3, r3, #3
 800c456:	4413      	add	r3, r2
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	6812      	ldr	r2, [r2, #0]
 800c45c:	4413      	add	r3, r2
 800c45e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c462:	881b      	ldrh	r3, [r3, #0]
 800c464:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c46a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800c46c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c46e:	695a      	ldr	r2, [r3, #20]
 800c470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c472:	69db      	ldr	r3, [r3, #28]
 800c474:	441a      	add	r2, r3
 800c476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c478:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800c47a:	2100      	movs	r1, #0
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f008 ff16 	bl	80152ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	7b1b      	ldrb	r3, [r3, #12]
 800c486:	b2db      	uxtb	r3, r3
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f000 835d 	beq.w	800cb48 <PCD_EP_ISR_Handler+0x768>
 800c48e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c490:	699b      	ldr	r3, [r3, #24]
 800c492:	2b00      	cmp	r3, #0
 800c494:	f040 8358 	bne.w	800cb48 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	7b1b      	ldrb	r3, [r3, #12]
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	b292      	uxth	r2, r2
 800c4aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	731a      	strb	r2, [r3, #12]
 800c4b4:	e348      	b.n	800cb48 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c4bc:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	881b      	ldrh	r3, [r3, #0]
 800c4c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800c4c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c4cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d032      	beq.n	800c53a <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	461a      	mov	r2, r3
 800c4e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	00db      	lsls	r3, r3, #3
 800c4e6:	4413      	add	r3, r2
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	6812      	ldr	r2, [r2, #0]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c4f2:	881b      	ldrh	r3, [r3, #0]
 800c4f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c4f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4fa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6818      	ldr	r0, [r3, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800c506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c508:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800c50a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c50c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800c50e:	b29b      	uxth	r3, r3
 800c510:	f006 fee2 	bl	80132d8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	b29a      	uxth	r2, r3
 800c51c:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c520:	4013      	ands	r3, r2
 800c522:	823b      	strh	r3, [r7, #16]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	8a3a      	ldrh	r2, [r7, #16]
 800c52a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c52e:	b292      	uxth	r2, r2
 800c530:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f008 fe8e 	bl	8015254 <HAL_PCD_SetupStageCallback>
 800c538:	e306      	b.n	800cb48 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800c53a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f280 8302 	bge.w	800cb48 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c550:	4013      	ands	r3, r2
 800c552:	83fb      	strh	r3, [r7, #30]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	8bfa      	ldrh	r2, [r7, #30]
 800c55a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c55e:	b292      	uxth	r2, r2
 800c560:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	461a      	mov	r2, r3
 800c56e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	00db      	lsls	r3, r3, #3
 800c574:	4413      	add	r3, r2
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	6812      	ldr	r2, [r2, #0]
 800c57a:	4413      	add	r3, r2
 800c57c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c580:	881b      	ldrh	r3, [r3, #0]
 800c582:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c588:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800c58a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c58c:	69db      	ldr	r3, [r3, #28]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d019      	beq.n	800c5c6 <PCD_EP_ISR_Handler+0x1e6>
 800c592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c594:	695b      	ldr	r3, [r3, #20]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d015      	beq.n	800c5c6 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6818      	ldr	r0, [r3, #0]
 800c59e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5a0:	6959      	ldr	r1, [r3, #20]
 800c5a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5a4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800c5a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5a8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	f006 fe94 	bl	80132d8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800c5b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5b2:	695a      	ldr	r2, [r3, #20]
 800c5b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5b6:	69db      	ldr	r3, [r3, #28]
 800c5b8:	441a      	add	r2, r3
 800c5ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5bc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800c5be:	2100      	movs	r1, #0
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f008 fe59 	bl	8015278 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	881b      	ldrh	r3, [r3, #0]
 800c5cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800c5d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c5d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f040 82b5 	bne.w	800cb48 <PCD_EP_ISR_Handler+0x768>
 800c5de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c5e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c5e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c5ea:	f000 82ad 	beq.w	800cb48 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	61bb      	str	r3, [r7, #24]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	461a      	mov	r2, r3
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	4413      	add	r3, r2
 800c604:	61bb      	str	r3, [r7, #24]
 800c606:	69bb      	ldr	r3, [r7, #24]
 800c608:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c60c:	617b      	str	r3, [r7, #20]
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	b29b      	uxth	r3, r3
 800c614:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c618:	b29a      	uxth	r2, r3
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	801a      	strh	r2, [r3, #0]
 800c61e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c620:	691b      	ldr	r3, [r3, #16]
 800c622:	2b3e      	cmp	r3, #62	; 0x3e
 800c624:	d91d      	bls.n	800c662 <PCD_EP_ISR_Handler+0x282>
 800c626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c628:	691b      	ldr	r3, [r3, #16]
 800c62a:	095b      	lsrs	r3, r3, #5
 800c62c:	647b      	str	r3, [r7, #68]	; 0x44
 800c62e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c630:	691b      	ldr	r3, [r3, #16]
 800c632:	f003 031f 	and.w	r3, r3, #31
 800c636:	2b00      	cmp	r3, #0
 800c638:	d102      	bne.n	800c640 <PCD_EP_ISR_Handler+0x260>
 800c63a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c63c:	3b01      	subs	r3, #1
 800c63e:	647b      	str	r3, [r7, #68]	; 0x44
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	881b      	ldrh	r3, [r3, #0]
 800c644:	b29a      	uxth	r2, r3
 800c646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c648:	b29b      	uxth	r3, r3
 800c64a:	029b      	lsls	r3, r3, #10
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	4313      	orrs	r3, r2
 800c650:	b29b      	uxth	r3, r3
 800c652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c65a:	b29a      	uxth	r2, r3
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	801a      	strh	r2, [r3, #0]
 800c660:	e026      	b.n	800c6b0 <PCD_EP_ISR_Handler+0x2d0>
 800c662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c664:	691b      	ldr	r3, [r3, #16]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d10a      	bne.n	800c680 <PCD_EP_ISR_Handler+0x2a0>
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	881b      	ldrh	r3, [r3, #0]
 800c66e:	b29b      	uxth	r3, r3
 800c670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c678:	b29a      	uxth	r2, r3
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	801a      	strh	r2, [r3, #0]
 800c67e:	e017      	b.n	800c6b0 <PCD_EP_ISR_Handler+0x2d0>
 800c680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c682:	691b      	ldr	r3, [r3, #16]
 800c684:	085b      	lsrs	r3, r3, #1
 800c686:	647b      	str	r3, [r7, #68]	; 0x44
 800c688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c68a:	691b      	ldr	r3, [r3, #16]
 800c68c:	f003 0301 	and.w	r3, r3, #1
 800c690:	2b00      	cmp	r3, #0
 800c692:	d002      	beq.n	800c69a <PCD_EP_ISR_Handler+0x2ba>
 800c694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c696:	3301      	adds	r3, #1
 800c698:	647b      	str	r3, [r7, #68]	; 0x44
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	881b      	ldrh	r3, [r3, #0]
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	029b      	lsls	r3, r3, #10
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	881b      	ldrh	r3, [r3, #0]
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c6bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6c0:	827b      	strh	r3, [r7, #18]
 800c6c2:	8a7b      	ldrh	r3, [r7, #18]
 800c6c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c6c8:	827b      	strh	r3, [r7, #18]
 800c6ca:	8a7b      	ldrh	r3, [r7, #18]
 800c6cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c6d0:	827b      	strh	r3, [r7, #18]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	8a7b      	ldrh	r3, [r7, #18]
 800c6d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	8013      	strh	r3, [r2, #0]
 800c6ec:	e22c      	b.n	800cb48 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	4413      	add	r3, r2
 800c6fc:	881b      	ldrh	r3, [r3, #0]
 800c6fe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800c702:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800c706:	2b00      	cmp	r3, #0
 800c708:	f280 80f6 	bge.w	800c8f8 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	461a      	mov	r2, r3
 800c712:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	881b      	ldrh	r3, [r3, #0]
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c722:	4013      	ands	r3, r2
 800c724:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	461a      	mov	r2, r3
 800c72e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	4413      	add	r3, r2
 800c736:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800c73a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c73e:	b292      	uxth	r2, r2
 800c740:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800c742:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800c746:	4613      	mov	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	00db      	lsls	r3, r3, #3
 800c74e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	4413      	add	r3, r2
 800c756:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800c758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c75a:	7b1b      	ldrb	r3, [r3, #12]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d123      	bne.n	800c7a8 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c768:	b29b      	uxth	r3, r3
 800c76a:	461a      	mov	r2, r3
 800c76c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	00db      	lsls	r3, r3, #3
 800c772:	4413      	add	r3, r2
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	6812      	ldr	r2, [r2, #0]
 800c778:	4413      	add	r3, r2
 800c77a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c77e:	881b      	ldrh	r3, [r3, #0]
 800c780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c784:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800c788:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	f000 808e 	beq.w	800c8ae <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6818      	ldr	r0, [r3, #0]
 800c796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c798:	6959      	ldr	r1, [r3, #20]
 800c79a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c79c:	88da      	ldrh	r2, [r3, #6]
 800c79e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c7a2:	f006 fd99 	bl	80132d8 <USB_ReadPMA>
 800c7a6:	e082      	b.n	800c8ae <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800c7a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7aa:	78db      	ldrb	r3, [r3, #3]
 800c7ac:	2b02      	cmp	r3, #2
 800c7ae:	d10a      	bne.n	800c7c6 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800c7b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 f9d3 	bl	800cb64 <HAL_PCD_EP_DB_Receive>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800c7c4:	e073      	b.n	800c8ae <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	4413      	add	r3, r2
 800c7d4:	881b      	ldrh	r3, [r3, #0]
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7e0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	441a      	add	r2, r3
 800c7f2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c7f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c802:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c806:	b29b      	uxth	r3, r3
 800c808:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	461a      	mov	r2, r3
 800c810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4413      	add	r3, r2
 800c818:	881b      	ldrh	r3, [r3, #0]
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c820:	2b00      	cmp	r3, #0
 800c822:	d022      	beq.n	800c86a <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	461a      	mov	r2, r3
 800c830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	00db      	lsls	r3, r3, #3
 800c836:	4413      	add	r3, r2
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	6812      	ldr	r2, [r2, #0]
 800c83c:	4413      	add	r3, r2
 800c83e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c842:	881b      	ldrh	r3, [r3, #0]
 800c844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c848:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800c84c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c850:	2b00      	cmp	r3, #0
 800c852:	d02c      	beq.n	800c8ae <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6818      	ldr	r0, [r3, #0]
 800c858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c85a:	6959      	ldr	r1, [r3, #20]
 800c85c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c85e:	891a      	ldrh	r2, [r3, #8]
 800c860:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c864:	f006 fd38 	bl	80132d8 <USB_ReadPMA>
 800c868:	e021      	b.n	800c8ae <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c872:	b29b      	uxth	r3, r3
 800c874:	461a      	mov	r2, r3
 800c876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	00db      	lsls	r3, r3, #3
 800c87c:	4413      	add	r3, r2
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	6812      	ldr	r2, [r2, #0]
 800c882:	4413      	add	r3, r2
 800c884:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c888:	881b      	ldrh	r3, [r3, #0]
 800c88a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c88e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800c892:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c896:	2b00      	cmp	r3, #0
 800c898:	d009      	beq.n	800c8ae <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6818      	ldr	r0, [r3, #0]
 800c89e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8a0:	6959      	ldr	r1, [r3, #20]
 800c8a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8a4:	895a      	ldrh	r2, [r3, #10]
 800c8a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c8aa:	f006 fd15 	bl	80132d8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800c8ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8b0:	69da      	ldr	r2, [r3, #28]
 800c8b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c8b6:	441a      	add	r2, r3
 800c8b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800c8bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8be:	695a      	ldr	r2, [r3, #20]
 800c8c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c8c4:	441a      	add	r2, r3
 800c8c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8c8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800c8ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8cc:	699b      	ldr	r3, [r3, #24]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d005      	beq.n	800c8de <PCD_EP_ISR_Handler+0x4fe>
 800c8d2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800c8d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d206      	bcs.n	800c8ec <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800c8de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f008 fcc7 	bl	8015278 <HAL_PCD_DataOutStageCallback>
 800c8ea:	e005      	b.n	800c8f8 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f004 ffc3 	bl	801187e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800c8f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c8fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c900:	2b00      	cmp	r3, #0
 800c902:	f000 8121 	beq.w	800cb48 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800c906:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800c90a:	4613      	mov	r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4413      	add	r3, r2
 800c910:	00db      	lsls	r3, r3, #3
 800c912:	3310      	adds	r3, #16
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	4413      	add	r3, r2
 800c918:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	461a      	mov	r2, r3
 800c920:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	4413      	add	r3, r2
 800c928:	881b      	ldrh	r3, [r3, #0]
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800c930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c934:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	461a      	mov	r2, r3
 800c93e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	441a      	add	r2, r3
 800c946:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c94a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c94e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c952:	b29b      	uxth	r3, r3
 800c954:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800c956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c958:	78db      	ldrb	r3, [r3, #3]
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	f040 80a2 	bne.w	800caa4 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800c960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c962:	2200      	movs	r2, #0
 800c964:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800c966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c968:	7b1b      	ldrb	r3, [r3, #12]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f000 8093 	beq.w	800ca96 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c970:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d046      	beq.n	800ca0a <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c97c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c97e:	785b      	ldrb	r3, [r3, #1]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d126      	bne.n	800c9d2 <PCD_EP_ISR_Handler+0x5f2>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	627b      	str	r3, [r7, #36]	; 0x24
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c992:	b29b      	uxth	r3, r3
 800c994:	461a      	mov	r2, r3
 800c996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c998:	4413      	add	r3, r2
 800c99a:	627b      	str	r3, [r7, #36]	; 0x24
 800c99c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	00da      	lsls	r2, r3, #3
 800c9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a4:	4413      	add	r3, r2
 800c9a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c9aa:	623b      	str	r3, [r7, #32]
 800c9ac:	6a3b      	ldr	r3, [r7, #32]
 800c9ae:	881b      	ldrh	r3, [r3, #0]
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	6a3b      	ldr	r3, [r7, #32]
 800c9ba:	801a      	strh	r2, [r3, #0]
 800c9bc:	6a3b      	ldr	r3, [r7, #32]
 800c9be:	881b      	ldrh	r3, [r3, #0]
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	6a3b      	ldr	r3, [r7, #32]
 800c9ce:	801a      	strh	r2, [r3, #0]
 800c9d0:	e061      	b.n	800ca96 <PCD_EP_ISR_Handler+0x6b6>
 800c9d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9d4:	785b      	ldrb	r3, [r3, #1]
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d15d      	bne.n	800ca96 <PCD_EP_ISR_Handler+0x6b6>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ee:	4413      	add	r3, r2
 800c9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	00da      	lsls	r2, r3, #3
 800c9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fa:	4413      	add	r3, r2
 800c9fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ca00:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca04:	2200      	movs	r2, #0
 800ca06:	801a      	strh	r2, [r3, #0]
 800ca08:	e045      	b.n	800ca96 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca12:	785b      	ldrb	r3, [r3, #1]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d126      	bne.n	800ca66 <PCD_EP_ISR_Handler+0x686>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	637b      	str	r3, [r7, #52]	; 0x34
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	461a      	mov	r2, r3
 800ca2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca2c:	4413      	add	r3, r2
 800ca2e:	637b      	str	r3, [r7, #52]	; 0x34
 800ca30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	00da      	lsls	r2, r3, #3
 800ca36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca38:	4413      	add	r3, r2
 800ca3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca3e:	633b      	str	r3, [r7, #48]	; 0x30
 800ca40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca42:	881b      	ldrh	r3, [r3, #0]
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4e:	801a      	strh	r2, [r3, #0]
 800ca50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca52:	881b      	ldrh	r3, [r3, #0]
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca5e:	b29a      	uxth	r2, r3
 800ca60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca62:	801a      	strh	r2, [r3, #0]
 800ca64:	e017      	b.n	800ca96 <PCD_EP_ISR_Handler+0x6b6>
 800ca66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca68:	785b      	ldrb	r3, [r3, #1]
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d113      	bne.n	800ca96 <PCD_EP_ISR_Handler+0x6b6>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	461a      	mov	r2, r3
 800ca7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca7c:	4413      	add	r3, r2
 800ca7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	00da      	lsls	r2, r3, #3
 800ca86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca88:	4413      	add	r3, r2
 800ca8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca8e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca92:	2200      	movs	r2, #0
 800ca94:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ca96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f008 fc06 	bl	80152ae <HAL_PCD_DataInStageCallback>
 800caa2:	e051      	b.n	800cb48 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800caa4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800caa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800caac:	2b00      	cmp	r3, #0
 800caae:	d144      	bne.n	800cb3a <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cab8:	b29b      	uxth	r3, r3
 800caba:	461a      	mov	r2, r3
 800cabc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	00db      	lsls	r3, r3, #3
 800cac2:	4413      	add	r3, r2
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	6812      	ldr	r2, [r2, #0]
 800cac8:	4413      	add	r3, r2
 800caca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cace:	881b      	ldrh	r3, [r3, #0]
 800cad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cad4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800cad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cada:	699a      	ldr	r2, [r3, #24]
 800cadc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d907      	bls.n	800caf4 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800cae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cae6:	699a      	ldr	r2, [r3, #24]
 800cae8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800caec:	1ad2      	subs	r2, r2, r3
 800caee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caf0:	619a      	str	r2, [r3, #24]
 800caf2:	e002      	b.n	800cafa <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800caf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caf6:	2200      	movs	r2, #0
 800caf8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800cafa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cafc:	699b      	ldr	r3, [r3, #24]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d106      	bne.n	800cb10 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cb02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	4619      	mov	r1, r3
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f008 fbd0 	bl	80152ae <HAL_PCD_DataInStageCallback>
 800cb0e:	e01b      	b.n	800cb48 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800cb10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb12:	695a      	ldr	r2, [r3, #20]
 800cb14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cb18:	441a      	add	r2, r3
 800cb1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb1c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800cb1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb20:	69da      	ldr	r2, [r3, #28]
 800cb22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cb26:	441a      	add	r2, r3
 800cb28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb2a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb32:	4618      	mov	r0, r3
 800cb34:	f004 fea3 	bl	801187e <USB_EPStartXfer>
 800cb38:	e006      	b.n	800cb48 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800cb3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cb3e:	461a      	mov	r2, r3
 800cb40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 f917 	bl	800cd76 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	b21b      	sxth	r3, r3
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f6ff ac48 	blt.w	800c3ea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800cb5a:	2300      	movs	r3, #0
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3758      	adds	r7, #88	; 0x58
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b088      	sub	sp, #32
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	60b9      	str	r1, [r7, #8]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800cb72:	88fb      	ldrh	r3, [r7, #6]
 800cb74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d07c      	beq.n	800cc76 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	461a      	mov	r2, r3
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	00db      	lsls	r3, r3, #3
 800cb8e:	4413      	add	r3, r2
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	6812      	ldr	r2, [r2, #0]
 800cb94:	4413      	add	r3, r2
 800cb96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cb9a:	881b      	ldrh	r3, [r3, #0]
 800cb9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cba0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	699a      	ldr	r2, [r3, #24]
 800cba6:	8b7b      	ldrh	r3, [r7, #26]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d306      	bcc.n	800cbba <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	699a      	ldr	r2, [r3, #24]
 800cbb0:	8b7b      	ldrh	r3, [r7, #26]
 800cbb2:	1ad2      	subs	r2, r2, r3
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	619a      	str	r2, [r3, #24]
 800cbb8:	e002      	b.n	800cbc0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	699b      	ldr	r3, [r3, #24]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d123      	bne.n	800cc10 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	461a      	mov	r2, r3
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	009b      	lsls	r3, r3, #2
 800cbd4:	4413      	add	r3, r2
 800cbd6:	881b      	ldrh	r3, [r3, #0]
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cbde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbe2:	833b      	strh	r3, [r7, #24]
 800cbe4:	8b3b      	ldrh	r3, [r7, #24]
 800cbe6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cbea:	833b      	strh	r3, [r7, #24]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	441a      	add	r2, r3
 800cbfa:	8b3b      	ldrh	r3, [r7, #24]
 800cbfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800cc10:	88fb      	ldrh	r3, [r7, #6]
 800cc12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d01f      	beq.n	800cc5a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	4413      	add	r3, r2
 800cc28:	881b      	ldrh	r3, [r3, #0]
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc34:	82fb      	strh	r3, [r7, #22]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	441a      	add	r2, r3
 800cc44:	8afb      	ldrh	r3, [r7, #22]
 800cc46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800cc5a:	8b7b      	ldrh	r3, [r7, #26]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f000 8085 	beq.w	800cd6c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	6818      	ldr	r0, [r3, #0]
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	6959      	ldr	r1, [r3, #20]
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	891a      	ldrh	r2, [r3, #8]
 800cc6e:	8b7b      	ldrh	r3, [r7, #26]
 800cc70:	f006 fb32 	bl	80132d8 <USB_ReadPMA>
 800cc74:	e07a      	b.n	800cd6c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	461a      	mov	r2, r3
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	00db      	lsls	r3, r3, #3
 800cc88:	4413      	add	r3, r2
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	6812      	ldr	r2, [r2, #0]
 800cc8e:	4413      	add	r3, r2
 800cc90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cc94:	881b      	ldrh	r3, [r3, #0]
 800cc96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc9a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	699a      	ldr	r2, [r3, #24]
 800cca0:	8b7b      	ldrh	r3, [r7, #26]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d306      	bcc.n	800ccb4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	699a      	ldr	r2, [r3, #24]
 800ccaa:	8b7b      	ldrh	r3, [r7, #26]
 800ccac:	1ad2      	subs	r2, r2, r3
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	619a      	str	r2, [r3, #24]
 800ccb2:	e002      	b.n	800ccba <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	699b      	ldr	r3, [r3, #24]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d123      	bne.n	800cd0a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	4413      	add	r3, r2
 800ccd0:	881b      	ldrh	r3, [r3, #0]
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ccd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccdc:	83fb      	strh	r3, [r7, #30]
 800ccde:	8bfb      	ldrh	r3, [r7, #30]
 800cce0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cce4:	83fb      	strh	r3, [r7, #30]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	461a      	mov	r2, r3
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	441a      	add	r2, r3
 800ccf4:	8bfb      	ldrh	r3, [r7, #30]
 800ccf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800cd0a:	88fb      	ldrh	r3, [r7, #6]
 800cd0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d11f      	bne.n	800cd54 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	461a      	mov	r2, r3
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	4413      	add	r3, r2
 800cd22:	881b      	ldrh	r3, [r3, #0]
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd2e:	83bb      	strh	r3, [r7, #28]
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	461a      	mov	r2, r3
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	441a      	add	r2, r3
 800cd3e:	8bbb      	ldrh	r3, [r7, #28]
 800cd40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800cd54:	8b7b      	ldrh	r3, [r7, #26]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d008      	beq.n	800cd6c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6818      	ldr	r0, [r3, #0]
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	6959      	ldr	r1, [r3, #20]
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	895a      	ldrh	r2, [r3, #10]
 800cd66:	8b7b      	ldrh	r3, [r7, #26]
 800cd68:	f006 fab6 	bl	80132d8 <USB_ReadPMA>
    }
  }

  return count;
 800cd6c:	8b7b      	ldrh	r3, [r7, #26]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3720      	adds	r7, #32
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}

0800cd76 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800cd76:	b580      	push	{r7, lr}
 800cd78:	b0a4      	sub	sp, #144	; 0x90
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	60f8      	str	r0, [r7, #12]
 800cd7e:	60b9      	str	r1, [r7, #8]
 800cd80:	4613      	mov	r3, r2
 800cd82:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800cd84:	88fb      	ldrh	r3, [r7, #6]
 800cd86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	f000 81db 	beq.w	800d146 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	00db      	lsls	r3, r3, #3
 800cda2:	4413      	add	r3, r2
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	6812      	ldr	r2, [r2, #0]
 800cda8:	4413      	add	r3, r2
 800cdaa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cdae:	881b      	ldrh	r3, [r3, #0]
 800cdb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cdb4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	699a      	ldr	r2, [r3, #24]
 800cdbc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d907      	bls.n	800cdd4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	699a      	ldr	r2, [r3, #24]
 800cdc8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800cdcc:	1ad2      	subs	r2, r2, r3
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	619a      	str	r2, [r3, #24]
 800cdd2:	e002      	b.n	800cdda <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	699b      	ldr	r3, [r3, #24]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f040 80b9 	bne.w	800cf56 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	785b      	ldrb	r3, [r3, #1]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d126      	bne.n	800ce3a <HAL_PCD_EP_DB_Transmit+0xc4>
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce00:	4413      	add	r3, r2
 800ce02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	00da      	lsls	r2, r3, #3
 800ce0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0c:	4413      	add	r3, r2
 800ce0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ce12:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce16:	881b      	ldrh	r3, [r3, #0]
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce22:	801a      	strh	r2, [r3, #0]
 800ce24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce26:	881b      	ldrh	r3, [r3, #0]
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce32:	b29a      	uxth	r2, r3
 800ce34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce36:	801a      	strh	r2, [r3, #0]
 800ce38:	e01a      	b.n	800ce70 <HAL_PCD_EP_DB_Transmit+0xfa>
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	785b      	ldrb	r3, [r3, #1]
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d116      	bne.n	800ce70 <HAL_PCD_EP_DB_Transmit+0xfa>
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	637b      	str	r3, [r7, #52]	; 0x34
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	461a      	mov	r2, r3
 800ce54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce56:	4413      	add	r3, r2
 800ce58:	637b      	str	r3, [r7, #52]	; 0x34
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	00da      	lsls	r2, r3, #3
 800ce60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce62:	4413      	add	r3, r2
 800ce64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ce68:	633b      	str	r3, [r7, #48]	; 0x30
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	627b      	str	r3, [r7, #36]	; 0x24
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	785b      	ldrb	r3, [r3, #1]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d126      	bne.n	800cecc <HAL_PCD_EP_DB_Transmit+0x156>
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	61fb      	str	r3, [r7, #28]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	461a      	mov	r2, r3
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	4413      	add	r3, r2
 800ce94:	61fb      	str	r3, [r7, #28]
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	00da      	lsls	r2, r3, #3
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	4413      	add	r3, r2
 800cea0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cea4:	61bb      	str	r3, [r7, #24]
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	801a      	strh	r2, [r3, #0]
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	881b      	ldrh	r3, [r3, #0]
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cec4:	b29a      	uxth	r2, r3
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	801a      	strh	r2, [r3, #0]
 800ceca:	e017      	b.n	800cefc <HAL_PCD_EP_DB_Transmit+0x186>
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	785b      	ldrb	r3, [r3, #1]
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d113      	bne.n	800cefc <HAL_PCD_EP_DB_Transmit+0x186>
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cedc:	b29b      	uxth	r3, r3
 800cede:	461a      	mov	r2, r3
 800cee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee2:	4413      	add	r3, r2
 800cee4:	627b      	str	r3, [r7, #36]	; 0x24
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	00da      	lsls	r2, r3, #3
 800ceec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceee:	4413      	add	r3, r2
 800cef0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cef4:	623b      	str	r3, [r7, #32]
 800cef6:	6a3b      	ldr	r3, [r7, #32]
 800cef8:	2200      	movs	r2, #0
 800cefa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	4619      	mov	r1, r3
 800cf02:	68f8      	ldr	r0, [r7, #12]
 800cf04:	f008 f9d3 	bl	80152ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800cf08:	88fb      	ldrh	r3, [r7, #6]
 800cf0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	f000 82fa 	beq.w	800d508 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	461a      	mov	r2, r3
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4413      	add	r3, r2
 800cf22:	881b      	ldrh	r3, [r3, #0]
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf2e:	82fb      	strh	r3, [r7, #22]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	461a      	mov	r2, r3
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	441a      	add	r2, r3
 800cf3e:	8afb      	ldrh	r3, [r7, #22]
 800cf40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cf4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	8013      	strh	r3, [r2, #0]
 800cf54:	e2d8      	b.n	800d508 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800cf56:	88fb      	ldrh	r3, [r7, #6]
 800cf58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d021      	beq.n	800cfa4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	461a      	mov	r2, r3
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	4413      	add	r3, r2
 800cf6e:	881b      	ldrh	r3, [r3, #0]
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf7a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	461a      	mov	r2, r3
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	441a      	add	r2, r3
 800cf8c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cf90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cf9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	f040 82ac 	bne.w	800d508 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	695a      	ldr	r2, [r3, #20]
 800cfb4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800cfb8:	441a      	add	r2, r3
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	69da      	ldr	r2, [r3, #28]
 800cfc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800cfc6:	441a      	add	r2, r3
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	6a1a      	ldr	r2, [r3, #32]
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d30b      	bcc.n	800cff0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	691b      	ldr	r3, [r3, #16]
 800cfdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	6a1a      	ldr	r2, [r3, #32]
 800cfe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cfe8:	1ad2      	subs	r2, r2, r3
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	621a      	str	r2, [r3, #32]
 800cfee:	e017      	b.n	800d020 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	6a1b      	ldr	r3, [r3, #32]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d108      	bne.n	800d00a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800cff8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800cffc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	2200      	movs	r2, #0
 800d004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d008:	e00a      	b.n	800d020 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	6a1b      	ldr	r3, [r3, #32]
 800d016:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	2200      	movs	r2, #0
 800d01e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	785b      	ldrb	r3, [r3, #1]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d165      	bne.n	800d0f4 <HAL_PCD_EP_DB_Transmit+0x37e>
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d036:	b29b      	uxth	r3, r3
 800d038:	461a      	mov	r2, r3
 800d03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d03c:	4413      	add	r3, r2
 800d03e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	00da      	lsls	r2, r3, #3
 800d046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d048:	4413      	add	r3, r2
 800d04a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d04e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d052:	881b      	ldrh	r3, [r3, #0]
 800d054:	b29b      	uxth	r3, r3
 800d056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05e:	801a      	strh	r2, [r3, #0]
 800d060:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d064:	2b3e      	cmp	r3, #62	; 0x3e
 800d066:	d91d      	bls.n	800d0a4 <HAL_PCD_EP_DB_Transmit+0x32e>
 800d068:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d06c:	095b      	lsrs	r3, r3, #5
 800d06e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d074:	f003 031f 	and.w	r3, r3, #31
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d102      	bne.n	800d082 <HAL_PCD_EP_DB_Transmit+0x30c>
 800d07c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d07e:	3b01      	subs	r3, #1
 800d080:	64bb      	str	r3, [r7, #72]	; 0x48
 800d082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d084:	881b      	ldrh	r3, [r3, #0]
 800d086:	b29a      	uxth	r2, r3
 800d088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	029b      	lsls	r3, r3, #10
 800d08e:	b29b      	uxth	r3, r3
 800d090:	4313      	orrs	r3, r2
 800d092:	b29b      	uxth	r3, r3
 800d094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a0:	801a      	strh	r2, [r3, #0]
 800d0a2:	e044      	b.n	800d12e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d0a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d10a      	bne.n	800d0c2 <HAL_PCD_EP_DB_Transmit+0x34c>
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ae:	881b      	ldrh	r3, [r3, #0]
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0be:	801a      	strh	r2, [r3, #0]
 800d0c0:	e035      	b.n	800d12e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d0c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d0c6:	085b      	lsrs	r3, r3, #1
 800d0c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d0ce:	f003 0301 	and.w	r3, r3, #1
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d002      	beq.n	800d0dc <HAL_PCD_EP_DB_Transmit+0x366>
 800d0d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0d8:	3301      	adds	r3, #1
 800d0da:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0de:	881b      	ldrh	r3, [r3, #0]
 800d0e0:	b29a      	uxth	r2, r3
 800d0e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	029b      	lsls	r3, r3, #10
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f0:	801a      	strh	r2, [r3, #0]
 800d0f2:	e01c      	b.n	800d12e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	785b      	ldrb	r3, [r3, #1]
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d118      	bne.n	800d12e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	647b      	str	r3, [r7, #68]	; 0x44
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	461a      	mov	r2, r3
 800d10e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d110:	4413      	add	r3, r2
 800d112:	647b      	str	r3, [r7, #68]	; 0x44
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	00da      	lsls	r2, r3, #3
 800d11a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d11c:	4413      	add	r3, r2
 800d11e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d122:	643b      	str	r3, [r7, #64]	; 0x40
 800d124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d128:	b29a      	uxth	r2, r3
 800d12a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d12c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	6818      	ldr	r0, [r3, #0]
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	6959      	ldr	r1, [r3, #20]
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	891a      	ldrh	r2, [r3, #8]
 800d13a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d13e:	b29b      	uxth	r3, r3
 800d140:	f006 f888 	bl	8013254 <USB_WritePMA>
 800d144:	e1e0      	b.n	800d508 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d14e:	b29b      	uxth	r3, r3
 800d150:	461a      	mov	r2, r3
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	00db      	lsls	r3, r3, #3
 800d158:	4413      	add	r3, r2
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	6812      	ldr	r2, [r2, #0]
 800d15e:	4413      	add	r3, r2
 800d160:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d164:	881b      	ldrh	r3, [r3, #0]
 800d166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d16a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	699a      	ldr	r2, [r3, #24]
 800d172:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d176:	429a      	cmp	r2, r3
 800d178:	d307      	bcc.n	800d18a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	699a      	ldr	r2, [r3, #24]
 800d17e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d182:	1ad2      	subs	r2, r2, r3
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	619a      	str	r2, [r3, #24]
 800d188:	e002      	b.n	800d190 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	2200      	movs	r2, #0
 800d18e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	699b      	ldr	r3, [r3, #24]
 800d194:	2b00      	cmp	r3, #0
 800d196:	f040 80c0 	bne.w	800d31a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	785b      	ldrb	r3, [r3, #1]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d126      	bne.n	800d1f0 <HAL_PCD_EP_DB_Transmit+0x47a>
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d1b6:	4413      	add	r3, r2
 800d1b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	00da      	lsls	r2, r3, #3
 800d1c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d1c2:	4413      	add	r3, r2
 800d1c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d1c8:	67bb      	str	r3, [r7, #120]	; 0x78
 800d1ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1cc:	881b      	ldrh	r3, [r3, #0]
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1d4:	b29a      	uxth	r2, r3
 800d1d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1d8:	801a      	strh	r2, [r3, #0]
 800d1da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1dc:	881b      	ldrh	r3, [r3, #0]
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1e8:	b29a      	uxth	r2, r3
 800d1ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1ec:	801a      	strh	r2, [r3, #0]
 800d1ee:	e01a      	b.n	800d226 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	785b      	ldrb	r3, [r3, #1]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d116      	bne.n	800d226 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	667b      	str	r3, [r7, #100]	; 0x64
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d206:	b29b      	uxth	r3, r3
 800d208:	461a      	mov	r2, r3
 800d20a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d20c:	4413      	add	r3, r2
 800d20e:	667b      	str	r3, [r7, #100]	; 0x64
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	00da      	lsls	r2, r3, #3
 800d216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d218:	4413      	add	r3, r2
 800d21a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d21e:	663b      	str	r3, [r7, #96]	; 0x60
 800d220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d222:	2200      	movs	r2, #0
 800d224:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	677b      	str	r3, [r7, #116]	; 0x74
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	785b      	ldrb	r3, [r3, #1]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d12b      	bne.n	800d28c <HAL_PCD_EP_DB_Transmit+0x516>
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d242:	b29b      	uxth	r3, r3
 800d244:	461a      	mov	r2, r3
 800d246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d248:	4413      	add	r3, r2
 800d24a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	00da      	lsls	r2, r3, #3
 800d252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d254:	4413      	add	r3, r2
 800d256:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d25a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d25e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d262:	881b      	ldrh	r3, [r3, #0]
 800d264:	b29b      	uxth	r3, r3
 800d266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d26a:	b29a      	uxth	r2, r3
 800d26c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d270:	801a      	strh	r2, [r3, #0]
 800d272:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d276:	881b      	ldrh	r3, [r3, #0]
 800d278:	b29b      	uxth	r3, r3
 800d27a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d27e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d282:	b29a      	uxth	r2, r3
 800d284:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d288:	801a      	strh	r2, [r3, #0]
 800d28a:	e017      	b.n	800d2bc <HAL_PCD_EP_DB_Transmit+0x546>
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	785b      	ldrb	r3, [r3, #1]
 800d290:	2b01      	cmp	r3, #1
 800d292:	d113      	bne.n	800d2bc <HAL_PCD_EP_DB_Transmit+0x546>
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	461a      	mov	r2, r3
 800d2a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2a2:	4413      	add	r3, r2
 800d2a4:	677b      	str	r3, [r7, #116]	; 0x74
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	00da      	lsls	r2, r3, #3
 800d2ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2ae:	4413      	add	r3, r2
 800d2b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d2b4:	673b      	str	r3, [r7, #112]	; 0x70
 800d2b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f007 fff3 	bl	80152ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d2c8:	88fb      	ldrh	r3, [r7, #6]
 800d2ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	f040 811a 	bne.w	800d508 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	461a      	mov	r2, r3
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	4413      	add	r3, r2
 800d2e2:	881b      	ldrh	r3, [r3, #0]
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2ee:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	441a      	add	r2, r3
 800d300:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800d304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d30c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d314:	b29b      	uxth	r3, r3
 800d316:	8013      	strh	r3, [r2, #0]
 800d318:	e0f6      	b.n	800d508 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d31a:	88fb      	ldrh	r3, [r7, #6]
 800d31c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d320:	2b00      	cmp	r3, #0
 800d322:	d121      	bne.n	800d368 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	461a      	mov	r2, r3
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	4413      	add	r3, r2
 800d332:	881b      	ldrh	r3, [r3, #0]
 800d334:	b29b      	uxth	r3, r3
 800d336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d33a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d33e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	461a      	mov	r2, r3
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	441a      	add	r2, r3
 800d350:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d35c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d364:	b29b      	uxth	r3, r3
 800d366:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d36e:	2b01      	cmp	r3, #1
 800d370:	f040 80ca 	bne.w	800d508 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	695a      	ldr	r2, [r3, #20]
 800d378:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d37c:	441a      	add	r2, r3
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	69da      	ldr	r2, [r3, #28]
 800d386:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d38a:	441a      	add	r2, r3
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	6a1a      	ldr	r2, [r3, #32]
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	691b      	ldr	r3, [r3, #16]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d30b      	bcc.n	800d3b4 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	691b      	ldr	r3, [r3, #16]
 800d3a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	6a1a      	ldr	r2, [r3, #32]
 800d3a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d3ac:	1ad2      	subs	r2, r2, r3
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	621a      	str	r2, [r3, #32]
 800d3b2:	e017      	b.n	800d3e4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	6a1b      	ldr	r3, [r3, #32]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d108      	bne.n	800d3ce <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800d3bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d3c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d3cc:	e00a      	b.n	800d3e4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	6a1b      	ldr	r3, [r3, #32]
 800d3d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	657b      	str	r3, [r7, #84]	; 0x54
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	785b      	ldrb	r3, [r3, #1]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d165      	bne.n	800d4be <HAL_PCD_EP_DB_Transmit+0x748>
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d400:	b29b      	uxth	r3, r3
 800d402:	461a      	mov	r2, r3
 800d404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d406:	4413      	add	r3, r2
 800d408:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	00da      	lsls	r2, r3, #3
 800d410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d412:	4413      	add	r3, r2
 800d414:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d418:	65bb      	str	r3, [r7, #88]	; 0x58
 800d41a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d41c:	881b      	ldrh	r3, [r3, #0]
 800d41e:	b29b      	uxth	r3, r3
 800d420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d424:	b29a      	uxth	r2, r3
 800d426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d428:	801a      	strh	r2, [r3, #0]
 800d42a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d42e:	2b3e      	cmp	r3, #62	; 0x3e
 800d430:	d91d      	bls.n	800d46e <HAL_PCD_EP_DB_Transmit+0x6f8>
 800d432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d436:	095b      	lsrs	r3, r3, #5
 800d438:	66bb      	str	r3, [r7, #104]	; 0x68
 800d43a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d43e:	f003 031f 	and.w	r3, r3, #31
 800d442:	2b00      	cmp	r3, #0
 800d444:	d102      	bne.n	800d44c <HAL_PCD_EP_DB_Transmit+0x6d6>
 800d446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d448:	3b01      	subs	r3, #1
 800d44a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d44c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d44e:	881b      	ldrh	r3, [r3, #0]
 800d450:	b29a      	uxth	r2, r3
 800d452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d454:	b29b      	uxth	r3, r3
 800d456:	029b      	lsls	r3, r3, #10
 800d458:	b29b      	uxth	r3, r3
 800d45a:	4313      	orrs	r3, r2
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d466:	b29a      	uxth	r2, r3
 800d468:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d46a:	801a      	strh	r2, [r3, #0]
 800d46c:	e041      	b.n	800d4f2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800d46e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10a      	bne.n	800d48c <HAL_PCD_EP_DB_Transmit+0x716>
 800d476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d484:	b29a      	uxth	r2, r3
 800d486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d488:	801a      	strh	r2, [r3, #0]
 800d48a:	e032      	b.n	800d4f2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800d48c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d490:	085b      	lsrs	r3, r3, #1
 800d492:	66bb      	str	r3, [r7, #104]	; 0x68
 800d494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d498:	f003 0301 	and.w	r3, r3, #1
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d002      	beq.n	800d4a6 <HAL_PCD_EP_DB_Transmit+0x730>
 800d4a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d4a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4a8:	881b      	ldrh	r3, [r3, #0]
 800d4aa:	b29a      	uxth	r2, r3
 800d4ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	029b      	lsls	r3, r3, #10
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4ba:	801a      	strh	r2, [r3, #0]
 800d4bc:	e019      	b.n	800d4f2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	785b      	ldrb	r3, [r3, #1]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d115      	bne.n	800d4f2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4d4:	4413      	add	r3, r2
 800d4d6:	657b      	str	r3, [r7, #84]	; 0x54
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	00da      	lsls	r2, r3, #3
 800d4de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4e0:	4413      	add	r3, r2
 800d4e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d4e6:	653b      	str	r3, [r7, #80]	; 0x50
 800d4e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4ec:	b29a      	uxth	r2, r3
 800d4ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4f0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	6818      	ldr	r0, [r3, #0]
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	6959      	ldr	r1, [r3, #20]
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	895a      	ldrh	r2, [r3, #10]
 800d4fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d502:	b29b      	uxth	r3, r3
 800d504:	f005 fea6 	bl	8013254 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	461a      	mov	r2, r3
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	4413      	add	r3, r2
 800d516:	881b      	ldrh	r3, [r3, #0]
 800d518:	b29b      	uxth	r3, r3
 800d51a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d51e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d522:	82bb      	strh	r3, [r7, #20]
 800d524:	8abb      	ldrh	r3, [r7, #20]
 800d526:	f083 0310 	eor.w	r3, r3, #16
 800d52a:	82bb      	strh	r3, [r7, #20]
 800d52c:	8abb      	ldrh	r3, [r7, #20]
 800d52e:	f083 0320 	eor.w	r3, r3, #32
 800d532:	82bb      	strh	r3, [r7, #20]
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	461a      	mov	r2, r3
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	441a      	add	r2, r3
 800d542:	8abb      	ldrh	r3, [r7, #20]
 800d544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d54c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d554:	b29b      	uxth	r3, r3
 800d556:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3790      	adds	r7, #144	; 0x90
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800d562:	b480      	push	{r7}
 800d564:	b087      	sub	sp, #28
 800d566:	af00      	add	r7, sp, #0
 800d568:	60f8      	str	r0, [r7, #12]
 800d56a:	607b      	str	r3, [r7, #4]
 800d56c:	460b      	mov	r3, r1
 800d56e:	817b      	strh	r3, [r7, #10]
 800d570:	4613      	mov	r3, r2
 800d572:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800d574:	897b      	ldrh	r3, [r7, #10]
 800d576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00b      	beq.n	800d598 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d580:	897b      	ldrh	r3, [r7, #10]
 800d582:	f003 0207 	and.w	r2, r3, #7
 800d586:	4613      	mov	r3, r2
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	4413      	add	r3, r2
 800d58c:	00db      	lsls	r3, r3, #3
 800d58e:	3310      	adds	r3, #16
 800d590:	68fa      	ldr	r2, [r7, #12]
 800d592:	4413      	add	r3, r2
 800d594:	617b      	str	r3, [r7, #20]
 800d596:	e009      	b.n	800d5ac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d598:	897a      	ldrh	r2, [r7, #10]
 800d59a:	4613      	mov	r3, r2
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4413      	add	r3, r2
 800d5a0:	00db      	lsls	r3, r3, #3
 800d5a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800d5ac:	893b      	ldrh	r3, [r7, #8]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d107      	bne.n	800d5c2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	80da      	strh	r2, [r3, #6]
 800d5c0:	e00b      	b.n	800d5da <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	b29a      	uxth	r2, r3
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	0c1b      	lsrs	r3, r3, #16
 800d5d4:	b29a      	uxth	r2, r3
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d5da:	2300      	movs	r3, #0
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	371c      	adds	r7, #28
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2200      	movs	r2, #0
 800d602:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	f043 0301 	orr.w	r3, r3, #1
 800d612:	b29a      	uxth	r2, r3
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d620:	b29b      	uxth	r3, r3
 800d622:	f043 0302 	orr.w	r3, r3, #2
 800d626:	b29a      	uxth	r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800d62e:	2300      	movs	r3, #0
}
 800d630:	4618      	mov	r0, r3
 800d632:	3714      	adds	r7, #20
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr

0800d63c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d141      	bne.n	800d6ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d64a:	4b4b      	ldr	r3, [pc, #300]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d656:	d131      	bne.n	800d6bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d658:	4b47      	ldr	r3, [pc, #284]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d65a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d65e:	4a46      	ldr	r2, [pc, #280]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d664:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d668:	4b43      	ldr	r3, [pc, #268]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d670:	4a41      	ldr	r2, [pc, #260]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d676:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d678:	4b40      	ldr	r3, [pc, #256]	; (800d77c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2232      	movs	r2, #50	; 0x32
 800d67e:	fb02 f303 	mul.w	r3, r2, r3
 800d682:	4a3f      	ldr	r2, [pc, #252]	; (800d780 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d684:	fba2 2303 	umull	r2, r3, r2, r3
 800d688:	0c9b      	lsrs	r3, r3, #18
 800d68a:	3301      	adds	r3, #1
 800d68c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d68e:	e002      	b.n	800d696 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	3b01      	subs	r3, #1
 800d694:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d696:	4b38      	ldr	r3, [pc, #224]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d698:	695b      	ldr	r3, [r3, #20]
 800d69a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d69e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6a2:	d102      	bne.n	800d6aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1f2      	bne.n	800d690 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d6aa:	4b33      	ldr	r3, [pc, #204]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d6ac:	695b      	ldr	r3, [r3, #20]
 800d6ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d6b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6b6:	d158      	bne.n	800d76a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d6b8:	2303      	movs	r3, #3
 800d6ba:	e057      	b.n	800d76c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d6bc:	4b2e      	ldr	r3, [pc, #184]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d6be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6c2:	4a2d      	ldr	r2, [pc, #180]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d6c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d6cc:	e04d      	b.n	800d76a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6d4:	d141      	bne.n	800d75a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d6d6:	4b28      	ldr	r3, [pc, #160]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d6de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6e2:	d131      	bne.n	800d748 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d6e4:	4b24      	ldr	r3, [pc, #144]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d6e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6ea:	4a23      	ldr	r2, [pc, #140]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d6ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d6f4:	4b20      	ldr	r3, [pc, #128]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d6fc:	4a1e      	ldr	r2, [pc, #120]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d6fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d702:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d704:	4b1d      	ldr	r3, [pc, #116]	; (800d77c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	2232      	movs	r2, #50	; 0x32
 800d70a:	fb02 f303 	mul.w	r3, r2, r3
 800d70e:	4a1c      	ldr	r2, [pc, #112]	; (800d780 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d710:	fba2 2303 	umull	r2, r3, r2, r3
 800d714:	0c9b      	lsrs	r3, r3, #18
 800d716:	3301      	adds	r3, #1
 800d718:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d71a:	e002      	b.n	800d722 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	3b01      	subs	r3, #1
 800d720:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d722:	4b15      	ldr	r3, [pc, #84]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d724:	695b      	ldr	r3, [r3, #20]
 800d726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d72a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d72e:	d102      	bne.n	800d736 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d1f2      	bne.n	800d71c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d736:	4b10      	ldr	r3, [pc, #64]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d738:	695b      	ldr	r3, [r3, #20]
 800d73a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d73e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d742:	d112      	bne.n	800d76a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d744:	2303      	movs	r3, #3
 800d746:	e011      	b.n	800d76c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d748:	4b0b      	ldr	r3, [pc, #44]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d74a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d74e:	4a0a      	ldr	r2, [pc, #40]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d754:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800d758:	e007      	b.n	800d76a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d75a:	4b07      	ldr	r3, [pc, #28]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d762:	4a05      	ldr	r2, [pc, #20]	; (800d778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d764:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d768:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3714      	adds	r7, #20
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr
 800d778:	40007000 	.word	0x40007000
 800d77c:	20000000 	.word	0x20000000
 800d780:	431bde83 	.word	0x431bde83

0800d784 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800d784:	b480      	push	{r7}
 800d786:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800d788:	4b05      	ldr	r3, [pc, #20]	; (800d7a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	4a04      	ldr	r2, [pc, #16]	; (800d7a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d78e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d792:	6093      	str	r3, [r2, #8]
}
 800d794:	bf00      	nop
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	40007000 	.word	0x40007000

0800d7a4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d7aa:	f7fd fb8f 	bl	800aecc <HAL_GetTick>
 800d7ae:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800d7b0:	4b39      	ldr	r3, [pc, #228]	; (800d898 <HAL_RCC_DeInit+0xf4>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4a38      	ldr	r2, [pc, #224]	; (800d898 <HAL_RCC_DeInit+0xf4>)
 800d7b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7ba:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d7bc:	e008      	b.n	800d7d0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d7be:	f7fd fb85 	bl	800aecc <HAL_GetTick>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	1ad3      	subs	r3, r2, r3
 800d7c8:	2b02      	cmp	r3, #2
 800d7ca:	d901      	bls.n	800d7d0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800d7cc:	2303      	movs	r3, #3
 800d7ce:	e05f      	b.n	800d890 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d7d0:	4b31      	ldr	r3, [pc, #196]	; (800d898 <HAL_RCC_DeInit+0xf4>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d0f0      	beq.n	800d7be <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 800d7dc:	4b2e      	ldr	r3, [pc, #184]	; (800d898 <HAL_RCC_DeInit+0xf4>)
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	4a2d      	ldr	r2, [pc, #180]	; (800d898 <HAL_RCC_DeInit+0xf4>)
 800d7e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d7e6:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d7e8:	f7fd fb70 	bl	800aecc <HAL_GetTick>
 800d7ec:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 800d7ee:	4b2a      	ldr	r3, [pc, #168]	; (800d898 <HAL_RCC_DeInit+0xf4>)
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800d7f4:	e00a      	b.n	800d80c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d7f6:	f7fd fb69 	bl	800aecc <HAL_GetTick>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	1ad3      	subs	r3, r2, r3
 800d800:	f241 3288 	movw	r2, #5000	; 0x1388
 800d804:	4293      	cmp	r3, r2
 800d806:	d901      	bls.n	800d80c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800d808:	2303      	movs	r3, #3
 800d80a:	e041      	b.n	800d890 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800d80c:	4b22      	ldr	r3, [pc, #136]	; (800d898 <HAL_RCC_DeInit+0xf4>)
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	f003 030c 	and.w	r3, r3, #12
 800d814:	2b04      	cmp	r3, #4
 800d816:	d1ee      	bne.n	800d7f6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800d818:	4b20      	ldr	r3, [pc, #128]	; (800d89c <HAL_RCC_DeInit+0xf8>)
 800d81a:	4a21      	ldr	r2, [pc, #132]	; (800d8a0 <HAL_RCC_DeInit+0xfc>)
 800d81c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d81e:	4b21      	ldr	r3, [pc, #132]	; (800d8a4 <HAL_RCC_DeInit+0x100>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4618      	mov	r0, r3
 800d824:	f7fd fb06 	bl	800ae34 <HAL_InitTick>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d001      	beq.n	800d832 <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	e02e      	b.n	800d890 <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 800d832:	4b19      	ldr	r3, [pc, #100]	; (800d898 <HAL_RCC_DeInit+0xf4>)
 800d834:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d838:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 800d83a:	4b17      	ldr	r3, [pc, #92]	; (800d898 <HAL_RCC_DeInit+0xf4>)
 800d83c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d840:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d842:	f7fd fb43 	bl	800aecc <HAL_GetTick>
 800d846:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d848:	e008      	b.n	800d85c <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d84a:	f7fd fb3f 	bl	800aecc <HAL_GetTick>
 800d84e:	4602      	mov	r2, r0
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	1ad3      	subs	r3, r2, r3
 800d854:	2b02      	cmp	r3, #2
 800d856:	d901      	bls.n	800d85c <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800d858:	2303      	movs	r3, #3
 800d85a:	e019      	b.n	800d890 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d85c:	4b0e      	ldr	r3, [pc, #56]	; (800d898 <HAL_RCC_DeInit+0xf4>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d864:	2b00      	cmp	r3, #0
 800d866:	d1f0      	bne.n	800d84a <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 800d868:	4b0b      	ldr	r3, [pc, #44]	; (800d898 <HAL_RCC_DeInit+0xf4>)
 800d86a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d86e:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800d870:	4b09      	ldr	r3, [pc, #36]	; (800d898 <HAL_RCC_DeInit+0xf4>)
 800d872:	2200      	movs	r2, #0
 800d874:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800d876:	4b08      	ldr	r3, [pc, #32]	; (800d898 <HAL_RCC_DeInit+0xf4>)
 800d878:	f04f 32ff 	mov.w	r2, #4294967295
 800d87c:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800d87e:	4b06      	ldr	r3, [pc, #24]	; (800d898 <HAL_RCC_DeInit+0xf4>)
 800d880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d884:	4a04      	ldr	r2, [pc, #16]	; (800d898 <HAL_RCC_DeInit+0xf4>)
 800d886:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d88a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3708      	adds	r7, #8
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	40021000 	.word	0x40021000
 800d89c:	20000000 	.word	0x20000000
 800d8a0:	00f42400 	.word	0x00f42400
 800d8a4:	20000010 	.word	0x20000010

0800d8a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b088      	sub	sp, #32
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d101      	bne.n	800d8ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e2fe      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f003 0301 	and.w	r3, r3, #1
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d075      	beq.n	800d9b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d8c6:	4b97      	ldr	r3, [pc, #604]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	f003 030c 	and.w	r3, r3, #12
 800d8ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d8d0:	4b94      	ldr	r3, [pc, #592]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	f003 0303 	and.w	r3, r3, #3
 800d8d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	2b0c      	cmp	r3, #12
 800d8de:	d102      	bne.n	800d8e6 <HAL_RCC_OscConfig+0x3e>
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	2b03      	cmp	r3, #3
 800d8e4:	d002      	beq.n	800d8ec <HAL_RCC_OscConfig+0x44>
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	2b08      	cmp	r3, #8
 800d8ea:	d10b      	bne.n	800d904 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d8ec:	4b8d      	ldr	r3, [pc, #564]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d05b      	beq.n	800d9b0 <HAL_RCC_OscConfig+0x108>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d157      	bne.n	800d9b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d900:	2301      	movs	r3, #1
 800d902:	e2d9      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d90c:	d106      	bne.n	800d91c <HAL_RCC_OscConfig+0x74>
 800d90e:	4b85      	ldr	r3, [pc, #532]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	4a84      	ldr	r2, [pc, #528]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d918:	6013      	str	r3, [r2, #0]
 800d91a:	e01d      	b.n	800d958 <HAL_RCC_OscConfig+0xb0>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d924:	d10c      	bne.n	800d940 <HAL_RCC_OscConfig+0x98>
 800d926:	4b7f      	ldr	r3, [pc, #508]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a7e      	ldr	r2, [pc, #504]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d92c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d930:	6013      	str	r3, [r2, #0]
 800d932:	4b7c      	ldr	r3, [pc, #496]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4a7b      	ldr	r2, [pc, #492]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d93c:	6013      	str	r3, [r2, #0]
 800d93e:	e00b      	b.n	800d958 <HAL_RCC_OscConfig+0xb0>
 800d940:	4b78      	ldr	r3, [pc, #480]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a77      	ldr	r2, [pc, #476]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d94a:	6013      	str	r3, [r2, #0]
 800d94c:	4b75      	ldr	r3, [pc, #468]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a74      	ldr	r2, [pc, #464]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d013      	beq.n	800d988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d960:	f7fd fab4 	bl	800aecc <HAL_GetTick>
 800d964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d966:	e008      	b.n	800d97a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d968:	f7fd fab0 	bl	800aecc <HAL_GetTick>
 800d96c:	4602      	mov	r2, r0
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	1ad3      	subs	r3, r2, r3
 800d972:	2b64      	cmp	r3, #100	; 0x64
 800d974:	d901      	bls.n	800d97a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d976:	2303      	movs	r3, #3
 800d978:	e29e      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d97a:	4b6a      	ldr	r3, [pc, #424]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d982:	2b00      	cmp	r3, #0
 800d984:	d0f0      	beq.n	800d968 <HAL_RCC_OscConfig+0xc0>
 800d986:	e014      	b.n	800d9b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d988:	f7fd faa0 	bl	800aecc <HAL_GetTick>
 800d98c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d98e:	e008      	b.n	800d9a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d990:	f7fd fa9c 	bl	800aecc <HAL_GetTick>
 800d994:	4602      	mov	r2, r0
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	1ad3      	subs	r3, r2, r3
 800d99a:	2b64      	cmp	r3, #100	; 0x64
 800d99c:	d901      	bls.n	800d9a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d99e:	2303      	movs	r3, #3
 800d9a0:	e28a      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d9a2:	4b60      	ldr	r3, [pc, #384]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d1f0      	bne.n	800d990 <HAL_RCC_OscConfig+0xe8>
 800d9ae:	e000      	b.n	800d9b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d9b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f003 0302 	and.w	r3, r3, #2
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d075      	beq.n	800daaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d9be:	4b59      	ldr	r3, [pc, #356]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	f003 030c 	and.w	r3, r3, #12
 800d9c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d9c8:	4b56      	ldr	r3, [pc, #344]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	f003 0303 	and.w	r3, r3, #3
 800d9d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	2b0c      	cmp	r3, #12
 800d9d6:	d102      	bne.n	800d9de <HAL_RCC_OscConfig+0x136>
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	d002      	beq.n	800d9e4 <HAL_RCC_OscConfig+0x13c>
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	2b04      	cmp	r3, #4
 800d9e2:	d11f      	bne.n	800da24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d9e4:	4b4f      	ldr	r3, [pc, #316]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d005      	beq.n	800d9fc <HAL_RCC_OscConfig+0x154>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d101      	bne.n	800d9fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e25d      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d9fc:	4b49      	ldr	r3, [pc, #292]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	691b      	ldr	r3, [r3, #16]
 800da08:	061b      	lsls	r3, r3, #24
 800da0a:	4946      	ldr	r1, [pc, #280]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800da0c:	4313      	orrs	r3, r2
 800da0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800da10:	4b45      	ldr	r3, [pc, #276]	; (800db28 <HAL_RCC_OscConfig+0x280>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4618      	mov	r0, r3
 800da16:	f7fd fa0d 	bl	800ae34 <HAL_InitTick>
 800da1a:	4603      	mov	r3, r0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d043      	beq.n	800daa8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800da20:	2301      	movs	r3, #1
 800da22:	e249      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d023      	beq.n	800da74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800da2c:	4b3d      	ldr	r3, [pc, #244]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a3c      	ldr	r2, [pc, #240]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800da32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da38:	f7fd fa48 	bl	800aecc <HAL_GetTick>
 800da3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800da3e:	e008      	b.n	800da52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da40:	f7fd fa44 	bl	800aecc <HAL_GetTick>
 800da44:	4602      	mov	r2, r0
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	1ad3      	subs	r3, r2, r3
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	d901      	bls.n	800da52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800da4e:	2303      	movs	r3, #3
 800da50:	e232      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800da52:	4b34      	ldr	r3, [pc, #208]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d0f0      	beq.n	800da40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da5e:	4b31      	ldr	r3, [pc, #196]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	691b      	ldr	r3, [r3, #16]
 800da6a:	061b      	lsls	r3, r3, #24
 800da6c:	492d      	ldr	r1, [pc, #180]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800da6e:	4313      	orrs	r3, r2
 800da70:	604b      	str	r3, [r1, #4]
 800da72:	e01a      	b.n	800daaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800da74:	4b2b      	ldr	r3, [pc, #172]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a2a      	ldr	r2, [pc, #168]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800da7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da80:	f7fd fa24 	bl	800aecc <HAL_GetTick>
 800da84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800da86:	e008      	b.n	800da9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da88:	f7fd fa20 	bl	800aecc <HAL_GetTick>
 800da8c:	4602      	mov	r2, r0
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	1ad3      	subs	r3, r2, r3
 800da92:	2b02      	cmp	r3, #2
 800da94:	d901      	bls.n	800da9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800da96:	2303      	movs	r3, #3
 800da98:	e20e      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800da9a:	4b22      	ldr	r3, [pc, #136]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d1f0      	bne.n	800da88 <HAL_RCC_OscConfig+0x1e0>
 800daa6:	e000      	b.n	800daaa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800daa8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	f003 0308 	and.w	r3, r3, #8
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d041      	beq.n	800db3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	695b      	ldr	r3, [r3, #20]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d01c      	beq.n	800daf8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dabe:	4b19      	ldr	r3, [pc, #100]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800dac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dac4:	4a17      	ldr	r2, [pc, #92]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800dac6:	f043 0301 	orr.w	r3, r3, #1
 800daca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dace:	f7fd f9fd 	bl	800aecc <HAL_GetTick>
 800dad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800dad4:	e008      	b.n	800dae8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dad6:	f7fd f9f9 	bl	800aecc <HAL_GetTick>
 800dada:	4602      	mov	r2, r0
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	2b02      	cmp	r3, #2
 800dae2:	d901      	bls.n	800dae8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800dae4:	2303      	movs	r3, #3
 800dae6:	e1e7      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800dae8:	4b0e      	ldr	r3, [pc, #56]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800daea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800daee:	f003 0302 	and.w	r3, r3, #2
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d0ef      	beq.n	800dad6 <HAL_RCC_OscConfig+0x22e>
 800daf6:	e020      	b.n	800db3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800daf8:	4b0a      	ldr	r3, [pc, #40]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800dafa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dafe:	4a09      	ldr	r2, [pc, #36]	; (800db24 <HAL_RCC_OscConfig+0x27c>)
 800db00:	f023 0301 	bic.w	r3, r3, #1
 800db04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db08:	f7fd f9e0 	bl	800aecc <HAL_GetTick>
 800db0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800db0e:	e00d      	b.n	800db2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800db10:	f7fd f9dc 	bl	800aecc <HAL_GetTick>
 800db14:	4602      	mov	r2, r0
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	2b02      	cmp	r3, #2
 800db1c:	d906      	bls.n	800db2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800db1e:	2303      	movs	r3, #3
 800db20:	e1ca      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
 800db22:	bf00      	nop
 800db24:	40021000 	.word	0x40021000
 800db28:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800db2c:	4b8c      	ldr	r3, [pc, #560]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800db2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db32:	f003 0302 	and.w	r3, r3, #2
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1ea      	bne.n	800db10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f003 0304 	and.w	r3, r3, #4
 800db42:	2b00      	cmp	r3, #0
 800db44:	f000 80a6 	beq.w	800dc94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800db48:	2300      	movs	r3, #0
 800db4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800db4c:	4b84      	ldr	r3, [pc, #528]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800db4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db54:	2b00      	cmp	r3, #0
 800db56:	d101      	bne.n	800db5c <HAL_RCC_OscConfig+0x2b4>
 800db58:	2301      	movs	r3, #1
 800db5a:	e000      	b.n	800db5e <HAL_RCC_OscConfig+0x2b6>
 800db5c:	2300      	movs	r3, #0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d00d      	beq.n	800db7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800db62:	4b7f      	ldr	r3, [pc, #508]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800db64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db66:	4a7e      	ldr	r2, [pc, #504]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800db68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db6c:	6593      	str	r3, [r2, #88]	; 0x58
 800db6e:	4b7c      	ldr	r3, [pc, #496]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800db70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db76:	60fb      	str	r3, [r7, #12]
 800db78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800db7a:	2301      	movs	r3, #1
 800db7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800db7e:	4b79      	ldr	r3, [pc, #484]	; (800dd64 <HAL_RCC_OscConfig+0x4bc>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db86:	2b00      	cmp	r3, #0
 800db88:	d118      	bne.n	800dbbc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800db8a:	4b76      	ldr	r3, [pc, #472]	; (800dd64 <HAL_RCC_OscConfig+0x4bc>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4a75      	ldr	r2, [pc, #468]	; (800dd64 <HAL_RCC_OscConfig+0x4bc>)
 800db90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800db96:	f7fd f999 	bl	800aecc <HAL_GetTick>
 800db9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800db9c:	e008      	b.n	800dbb0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800db9e:	f7fd f995 	bl	800aecc <HAL_GetTick>
 800dba2:	4602      	mov	r2, r0
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	1ad3      	subs	r3, r2, r3
 800dba8:	2b02      	cmp	r3, #2
 800dbaa:	d901      	bls.n	800dbb0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800dbac:	2303      	movs	r3, #3
 800dbae:	e183      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dbb0:	4b6c      	ldr	r3, [pc, #432]	; (800dd64 <HAL_RCC_OscConfig+0x4bc>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d0f0      	beq.n	800db9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	689b      	ldr	r3, [r3, #8]
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d108      	bne.n	800dbd6 <HAL_RCC_OscConfig+0x32e>
 800dbc4:	4b66      	ldr	r3, [pc, #408]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dbc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbca:	4a65      	ldr	r2, [pc, #404]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dbcc:	f043 0301 	orr.w	r3, r3, #1
 800dbd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dbd4:	e024      	b.n	800dc20 <HAL_RCC_OscConfig+0x378>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	689b      	ldr	r3, [r3, #8]
 800dbda:	2b05      	cmp	r3, #5
 800dbdc:	d110      	bne.n	800dc00 <HAL_RCC_OscConfig+0x358>
 800dbde:	4b60      	ldr	r3, [pc, #384]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dbe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbe4:	4a5e      	ldr	r2, [pc, #376]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dbe6:	f043 0304 	orr.w	r3, r3, #4
 800dbea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dbee:	4b5c      	ldr	r3, [pc, #368]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dbf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbf4:	4a5a      	ldr	r2, [pc, #360]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dbf6:	f043 0301 	orr.w	r3, r3, #1
 800dbfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dbfe:	e00f      	b.n	800dc20 <HAL_RCC_OscConfig+0x378>
 800dc00:	4b57      	ldr	r3, [pc, #348]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dc02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc06:	4a56      	ldr	r2, [pc, #344]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dc08:	f023 0301 	bic.w	r3, r3, #1
 800dc0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800dc10:	4b53      	ldr	r3, [pc, #332]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dc12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc16:	4a52      	ldr	r2, [pc, #328]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dc18:	f023 0304 	bic.w	r3, r3, #4
 800dc1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	689b      	ldr	r3, [r3, #8]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d016      	beq.n	800dc56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc28:	f7fd f950 	bl	800aecc <HAL_GetTick>
 800dc2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dc2e:	e00a      	b.n	800dc46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dc30:	f7fd f94c 	bl	800aecc <HAL_GetTick>
 800dc34:	4602      	mov	r2, r0
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	1ad3      	subs	r3, r2, r3
 800dc3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d901      	bls.n	800dc46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800dc42:	2303      	movs	r3, #3
 800dc44:	e138      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dc46:	4b46      	ldr	r3, [pc, #280]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dc48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc4c:	f003 0302 	and.w	r3, r3, #2
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d0ed      	beq.n	800dc30 <HAL_RCC_OscConfig+0x388>
 800dc54:	e015      	b.n	800dc82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc56:	f7fd f939 	bl	800aecc <HAL_GetTick>
 800dc5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800dc5c:	e00a      	b.n	800dc74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dc5e:	f7fd f935 	bl	800aecc <HAL_GetTick>
 800dc62:	4602      	mov	r2, r0
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	1ad3      	subs	r3, r2, r3
 800dc68:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d901      	bls.n	800dc74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800dc70:	2303      	movs	r3, #3
 800dc72:	e121      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800dc74:	4b3a      	ldr	r3, [pc, #232]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dc76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc7a:	f003 0302 	and.w	r3, r3, #2
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d1ed      	bne.n	800dc5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800dc82:	7ffb      	ldrb	r3, [r7, #31]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d105      	bne.n	800dc94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dc88:	4b35      	ldr	r3, [pc, #212]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dc8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc8c:	4a34      	ldr	r2, [pc, #208]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dc8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f003 0320 	and.w	r3, r3, #32
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d03c      	beq.n	800dd1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	699b      	ldr	r3, [r3, #24]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d01c      	beq.n	800dce2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800dca8:	4b2d      	ldr	r3, [pc, #180]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dcaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dcae:	4a2c      	ldr	r2, [pc, #176]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dcb0:	f043 0301 	orr.w	r3, r3, #1
 800dcb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcb8:	f7fd f908 	bl	800aecc <HAL_GetTick>
 800dcbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800dcbe:	e008      	b.n	800dcd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dcc0:	f7fd f904 	bl	800aecc <HAL_GetTick>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	1ad3      	subs	r3, r2, r3
 800dcca:	2b02      	cmp	r3, #2
 800dccc:	d901      	bls.n	800dcd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800dcce:	2303      	movs	r3, #3
 800dcd0:	e0f2      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800dcd2:	4b23      	ldr	r3, [pc, #140]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dcd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dcd8:	f003 0302 	and.w	r3, r3, #2
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d0ef      	beq.n	800dcc0 <HAL_RCC_OscConfig+0x418>
 800dce0:	e01b      	b.n	800dd1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800dce2:	4b1f      	ldr	r3, [pc, #124]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dce8:	4a1d      	ldr	r2, [pc, #116]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dcea:	f023 0301 	bic.w	r3, r3, #1
 800dcee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcf2:	f7fd f8eb 	bl	800aecc <HAL_GetTick>
 800dcf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800dcf8:	e008      	b.n	800dd0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dcfa:	f7fd f8e7 	bl	800aecc <HAL_GetTick>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	1ad3      	subs	r3, r2, r3
 800dd04:	2b02      	cmp	r3, #2
 800dd06:	d901      	bls.n	800dd0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800dd08:	2303      	movs	r3, #3
 800dd0a:	e0d5      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800dd0c:	4b14      	ldr	r3, [pc, #80]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dd0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dd12:	f003 0302 	and.w	r3, r3, #2
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d1ef      	bne.n	800dcfa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	69db      	ldr	r3, [r3, #28]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	f000 80c9 	beq.w	800deb6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dd24:	4b0e      	ldr	r3, [pc, #56]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dd26:	689b      	ldr	r3, [r3, #8]
 800dd28:	f003 030c 	and.w	r3, r3, #12
 800dd2c:	2b0c      	cmp	r3, #12
 800dd2e:	f000 8083 	beq.w	800de38 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	69db      	ldr	r3, [r3, #28]
 800dd36:	2b02      	cmp	r3, #2
 800dd38:	d15e      	bne.n	800ddf8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dd3a:	4b09      	ldr	r3, [pc, #36]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	4a08      	ldr	r2, [pc, #32]	; (800dd60 <HAL_RCC_OscConfig+0x4b8>)
 800dd40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dd44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd46:	f7fd f8c1 	bl	800aecc <HAL_GetTick>
 800dd4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dd4c:	e00c      	b.n	800dd68 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dd4e:	f7fd f8bd 	bl	800aecc <HAL_GetTick>
 800dd52:	4602      	mov	r2, r0
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	1ad3      	subs	r3, r2, r3
 800dd58:	2b02      	cmp	r3, #2
 800dd5a:	d905      	bls.n	800dd68 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800dd5c:	2303      	movs	r3, #3
 800dd5e:	e0ab      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
 800dd60:	40021000 	.word	0x40021000
 800dd64:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dd68:	4b55      	ldr	r3, [pc, #340]	; (800dec0 <HAL_RCC_OscConfig+0x618>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d1ec      	bne.n	800dd4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dd74:	4b52      	ldr	r3, [pc, #328]	; (800dec0 <HAL_RCC_OscConfig+0x618>)
 800dd76:	68da      	ldr	r2, [r3, #12]
 800dd78:	4b52      	ldr	r3, [pc, #328]	; (800dec4 <HAL_RCC_OscConfig+0x61c>)
 800dd7a:	4013      	ands	r3, r2
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	6a11      	ldr	r1, [r2, #32]
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dd84:	3a01      	subs	r2, #1
 800dd86:	0112      	lsls	r2, r2, #4
 800dd88:	4311      	orrs	r1, r2
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800dd8e:	0212      	lsls	r2, r2, #8
 800dd90:	4311      	orrs	r1, r2
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dd96:	0852      	lsrs	r2, r2, #1
 800dd98:	3a01      	subs	r2, #1
 800dd9a:	0552      	lsls	r2, r2, #21
 800dd9c:	4311      	orrs	r1, r2
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800dda2:	0852      	lsrs	r2, r2, #1
 800dda4:	3a01      	subs	r2, #1
 800dda6:	0652      	lsls	r2, r2, #25
 800dda8:	4311      	orrs	r1, r2
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ddae:	06d2      	lsls	r2, r2, #27
 800ddb0:	430a      	orrs	r2, r1
 800ddb2:	4943      	ldr	r1, [pc, #268]	; (800dec0 <HAL_RCC_OscConfig+0x618>)
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ddb8:	4b41      	ldr	r3, [pc, #260]	; (800dec0 <HAL_RCC_OscConfig+0x618>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a40      	ldr	r2, [pc, #256]	; (800dec0 <HAL_RCC_OscConfig+0x618>)
 800ddbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ddc2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ddc4:	4b3e      	ldr	r3, [pc, #248]	; (800dec0 <HAL_RCC_OscConfig+0x618>)
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	4a3d      	ldr	r2, [pc, #244]	; (800dec0 <HAL_RCC_OscConfig+0x618>)
 800ddca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ddce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ddd0:	f7fd f87c 	bl	800aecc <HAL_GetTick>
 800ddd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ddd6:	e008      	b.n	800ddea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ddd8:	f7fd f878 	bl	800aecc <HAL_GetTick>
 800dddc:	4602      	mov	r2, r0
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	2b02      	cmp	r3, #2
 800dde4:	d901      	bls.n	800ddea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800dde6:	2303      	movs	r3, #3
 800dde8:	e066      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ddea:	4b35      	ldr	r3, [pc, #212]	; (800dec0 <HAL_RCC_OscConfig+0x618>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d0f0      	beq.n	800ddd8 <HAL_RCC_OscConfig+0x530>
 800ddf6:	e05e      	b.n	800deb6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ddf8:	4b31      	ldr	r3, [pc, #196]	; (800dec0 <HAL_RCC_OscConfig+0x618>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a30      	ldr	r2, [pc, #192]	; (800dec0 <HAL_RCC_OscConfig+0x618>)
 800ddfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800de02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de04:	f7fd f862 	bl	800aecc <HAL_GetTick>
 800de08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800de0a:	e008      	b.n	800de1e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de0c:	f7fd f85e 	bl	800aecc <HAL_GetTick>
 800de10:	4602      	mov	r2, r0
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	1ad3      	subs	r3, r2, r3
 800de16:	2b02      	cmp	r3, #2
 800de18:	d901      	bls.n	800de1e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800de1a:	2303      	movs	r3, #3
 800de1c:	e04c      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800de1e:	4b28      	ldr	r3, [pc, #160]	; (800dec0 <HAL_RCC_OscConfig+0x618>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1f0      	bne.n	800de0c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800de2a:	4b25      	ldr	r3, [pc, #148]	; (800dec0 <HAL_RCC_OscConfig+0x618>)
 800de2c:	68da      	ldr	r2, [r3, #12]
 800de2e:	4924      	ldr	r1, [pc, #144]	; (800dec0 <HAL_RCC_OscConfig+0x618>)
 800de30:	4b25      	ldr	r3, [pc, #148]	; (800dec8 <HAL_RCC_OscConfig+0x620>)
 800de32:	4013      	ands	r3, r2
 800de34:	60cb      	str	r3, [r1, #12]
 800de36:	e03e      	b.n	800deb6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	69db      	ldr	r3, [r3, #28]
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d101      	bne.n	800de44 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800de40:	2301      	movs	r3, #1
 800de42:	e039      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800de44:	4b1e      	ldr	r3, [pc, #120]	; (800dec0 <HAL_RCC_OscConfig+0x618>)
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	f003 0203 	and.w	r2, r3, #3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6a1b      	ldr	r3, [r3, #32]
 800de54:	429a      	cmp	r2, r3
 800de56:	d12c      	bne.n	800deb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de62:	3b01      	subs	r3, #1
 800de64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800de66:	429a      	cmp	r2, r3
 800de68:	d123      	bne.n	800deb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de74:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800de76:	429a      	cmp	r2, r3
 800de78:	d11b      	bne.n	800deb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de84:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800de86:	429a      	cmp	r2, r3
 800de88:	d113      	bne.n	800deb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de94:	085b      	lsrs	r3, r3, #1
 800de96:	3b01      	subs	r3, #1
 800de98:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d109      	bne.n	800deb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dea8:	085b      	lsrs	r3, r3, #1
 800deaa:	3b01      	subs	r3, #1
 800deac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800deae:	429a      	cmp	r2, r3
 800deb0:	d001      	beq.n	800deb6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800deb2:	2301      	movs	r3, #1
 800deb4:	e000      	b.n	800deb8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800deb6:	2300      	movs	r3, #0
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3720      	adds	r7, #32
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	40021000 	.word	0x40021000
 800dec4:	019f800c 	.word	0x019f800c
 800dec8:	feeefffc 	.word	0xfeeefffc

0800decc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b086      	sub	sp, #24
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ded6:	2300      	movs	r3, #0
 800ded8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d101      	bne.n	800dee4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dee0:	2301      	movs	r3, #1
 800dee2:	e11e      	b.n	800e122 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dee4:	4b91      	ldr	r3, [pc, #580]	; (800e12c <HAL_RCC_ClockConfig+0x260>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f003 030f 	and.w	r3, r3, #15
 800deec:	683a      	ldr	r2, [r7, #0]
 800deee:	429a      	cmp	r2, r3
 800def0:	d910      	bls.n	800df14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800def2:	4b8e      	ldr	r3, [pc, #568]	; (800e12c <HAL_RCC_ClockConfig+0x260>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f023 020f 	bic.w	r2, r3, #15
 800defa:	498c      	ldr	r1, [pc, #560]	; (800e12c <HAL_RCC_ClockConfig+0x260>)
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	4313      	orrs	r3, r2
 800df00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800df02:	4b8a      	ldr	r3, [pc, #552]	; (800e12c <HAL_RCC_ClockConfig+0x260>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f003 030f 	and.w	r3, r3, #15
 800df0a:	683a      	ldr	r2, [r7, #0]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d001      	beq.n	800df14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800df10:	2301      	movs	r3, #1
 800df12:	e106      	b.n	800e122 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f003 0301 	and.w	r3, r3, #1
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d073      	beq.n	800e008 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	2b03      	cmp	r3, #3
 800df26:	d129      	bne.n	800df7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800df28:	4b81      	ldr	r3, [pc, #516]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df30:	2b00      	cmp	r3, #0
 800df32:	d101      	bne.n	800df38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800df34:	2301      	movs	r3, #1
 800df36:	e0f4      	b.n	800e122 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800df38:	f000 f99e 	bl	800e278 <RCC_GetSysClockFreqFromPLLSource>
 800df3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	4a7c      	ldr	r2, [pc, #496]	; (800e134 <HAL_RCC_ClockConfig+0x268>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d93f      	bls.n	800dfc6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800df46:	4b7a      	ldr	r3, [pc, #488]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800df48:	689b      	ldr	r3, [r3, #8]
 800df4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d009      	beq.n	800df66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d033      	beq.n	800dfc6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800df62:	2b00      	cmp	r3, #0
 800df64:	d12f      	bne.n	800dfc6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800df66:	4b72      	ldr	r3, [pc, #456]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800df6e:	4a70      	ldr	r2, [pc, #448]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800df70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800df76:	2380      	movs	r3, #128	; 0x80
 800df78:	617b      	str	r3, [r7, #20]
 800df7a:	e024      	b.n	800dfc6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	2b02      	cmp	r3, #2
 800df82:	d107      	bne.n	800df94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800df84:	4b6a      	ldr	r3, [pc, #424]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d109      	bne.n	800dfa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800df90:	2301      	movs	r3, #1
 800df92:	e0c6      	b.n	800e122 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800df94:	4b66      	ldr	r3, [pc, #408]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d101      	bne.n	800dfa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	e0be      	b.n	800e122 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800dfa4:	f000 f8ce 	bl	800e144 <HAL_RCC_GetSysClockFreq>
 800dfa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	4a61      	ldr	r2, [pc, #388]	; (800e134 <HAL_RCC_ClockConfig+0x268>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d909      	bls.n	800dfc6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dfb2:	4b5f      	ldr	r3, [pc, #380]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800dfb4:	689b      	ldr	r3, [r3, #8]
 800dfb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dfba:	4a5d      	ldr	r2, [pc, #372]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800dfbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfc0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800dfc2:	2380      	movs	r3, #128	; 0x80
 800dfc4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dfc6:	4b5a      	ldr	r3, [pc, #360]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800dfc8:	689b      	ldr	r3, [r3, #8]
 800dfca:	f023 0203 	bic.w	r2, r3, #3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	4957      	ldr	r1, [pc, #348]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfd8:	f7fc ff78 	bl	800aecc <HAL_GetTick>
 800dfdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dfde:	e00a      	b.n	800dff6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dfe0:	f7fc ff74 	bl	800aecc <HAL_GetTick>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	1ad3      	subs	r3, r2, r3
 800dfea:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d901      	bls.n	800dff6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800dff2:	2303      	movs	r3, #3
 800dff4:	e095      	b.n	800e122 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dff6:	4b4e      	ldr	r3, [pc, #312]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800dff8:	689b      	ldr	r3, [r3, #8]
 800dffa:	f003 020c 	and.w	r2, r3, #12
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	429a      	cmp	r2, r3
 800e006:	d1eb      	bne.n	800dfe0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f003 0302 	and.w	r3, r3, #2
 800e010:	2b00      	cmp	r3, #0
 800e012:	d023      	beq.n	800e05c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f003 0304 	and.w	r3, r3, #4
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d005      	beq.n	800e02c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e020:	4b43      	ldr	r3, [pc, #268]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	4a42      	ldr	r2, [pc, #264]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800e026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800e02a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f003 0308 	and.w	r3, r3, #8
 800e034:	2b00      	cmp	r3, #0
 800e036:	d007      	beq.n	800e048 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800e038:	4b3d      	ldr	r3, [pc, #244]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e040:	4a3b      	ldr	r2, [pc, #236]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800e042:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800e046:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e048:	4b39      	ldr	r3, [pc, #228]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	689b      	ldr	r3, [r3, #8]
 800e054:	4936      	ldr	r1, [pc, #216]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800e056:	4313      	orrs	r3, r2
 800e058:	608b      	str	r3, [r1, #8]
 800e05a:	e008      	b.n	800e06e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	2b80      	cmp	r3, #128	; 0x80
 800e060:	d105      	bne.n	800e06e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800e062:	4b33      	ldr	r3, [pc, #204]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	4a32      	ldr	r2, [pc, #200]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800e068:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e06c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e06e:	4b2f      	ldr	r3, [pc, #188]	; (800e12c <HAL_RCC_ClockConfig+0x260>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f003 030f 	and.w	r3, r3, #15
 800e076:	683a      	ldr	r2, [r7, #0]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d21d      	bcs.n	800e0b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e07c:	4b2b      	ldr	r3, [pc, #172]	; (800e12c <HAL_RCC_ClockConfig+0x260>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f023 020f 	bic.w	r2, r3, #15
 800e084:	4929      	ldr	r1, [pc, #164]	; (800e12c <HAL_RCC_ClockConfig+0x260>)
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	4313      	orrs	r3, r2
 800e08a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800e08c:	f7fc ff1e 	bl	800aecc <HAL_GetTick>
 800e090:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e092:	e00a      	b.n	800e0aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e094:	f7fc ff1a 	bl	800aecc <HAL_GetTick>
 800e098:	4602      	mov	r2, r0
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d901      	bls.n	800e0aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800e0a6:	2303      	movs	r3, #3
 800e0a8:	e03b      	b.n	800e122 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e0aa:	4b20      	ldr	r3, [pc, #128]	; (800e12c <HAL_RCC_ClockConfig+0x260>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	f003 030f 	and.w	r3, r3, #15
 800e0b2:	683a      	ldr	r2, [r7, #0]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d1ed      	bne.n	800e094 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	f003 0304 	and.w	r3, r3, #4
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d008      	beq.n	800e0d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e0c4:	4b1a      	ldr	r3, [pc, #104]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800e0c6:	689b      	ldr	r3, [r3, #8]
 800e0c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	4917      	ldr	r1, [pc, #92]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f003 0308 	and.w	r3, r3, #8
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d009      	beq.n	800e0f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e0e2:	4b13      	ldr	r3, [pc, #76]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800e0e4:	689b      	ldr	r3, [r3, #8]
 800e0e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	691b      	ldr	r3, [r3, #16]
 800e0ee:	00db      	lsls	r3, r3, #3
 800e0f0:	490f      	ldr	r1, [pc, #60]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800e0f6:	f000 f825 	bl	800e144 <HAL_RCC_GetSysClockFreq>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	4b0c      	ldr	r3, [pc, #48]	; (800e130 <HAL_RCC_ClockConfig+0x264>)
 800e0fe:	689b      	ldr	r3, [r3, #8]
 800e100:	091b      	lsrs	r3, r3, #4
 800e102:	f003 030f 	and.w	r3, r3, #15
 800e106:	490c      	ldr	r1, [pc, #48]	; (800e138 <HAL_RCC_ClockConfig+0x26c>)
 800e108:	5ccb      	ldrb	r3, [r1, r3]
 800e10a:	f003 031f 	and.w	r3, r3, #31
 800e10e:	fa22 f303 	lsr.w	r3, r2, r3
 800e112:	4a0a      	ldr	r2, [pc, #40]	; (800e13c <HAL_RCC_ClockConfig+0x270>)
 800e114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800e116:	4b0a      	ldr	r3, [pc, #40]	; (800e140 <HAL_RCC_ClockConfig+0x274>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7fc fe8a 	bl	800ae34 <HAL_InitTick>
 800e120:	4603      	mov	r3, r0
}
 800e122:	4618      	mov	r0, r3
 800e124:	3718      	adds	r7, #24
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
 800e12a:	bf00      	nop
 800e12c:	40022000 	.word	0x40022000
 800e130:	40021000 	.word	0x40021000
 800e134:	04c4b400 	.word	0x04c4b400
 800e138:	08018df0 	.word	0x08018df0
 800e13c:	20000000 	.word	0x20000000
 800e140:	20000010 	.word	0x20000010

0800e144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e144:	b480      	push	{r7}
 800e146:	b087      	sub	sp, #28
 800e148:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800e14a:	4b2c      	ldr	r3, [pc, #176]	; (800e1fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800e14c:	689b      	ldr	r3, [r3, #8]
 800e14e:	f003 030c 	and.w	r3, r3, #12
 800e152:	2b04      	cmp	r3, #4
 800e154:	d102      	bne.n	800e15c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800e156:	4b2a      	ldr	r3, [pc, #168]	; (800e200 <HAL_RCC_GetSysClockFreq+0xbc>)
 800e158:	613b      	str	r3, [r7, #16]
 800e15a:	e047      	b.n	800e1ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800e15c:	4b27      	ldr	r3, [pc, #156]	; (800e1fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800e15e:	689b      	ldr	r3, [r3, #8]
 800e160:	f003 030c 	and.w	r3, r3, #12
 800e164:	2b08      	cmp	r3, #8
 800e166:	d102      	bne.n	800e16e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800e168:	4b26      	ldr	r3, [pc, #152]	; (800e204 <HAL_RCC_GetSysClockFreq+0xc0>)
 800e16a:	613b      	str	r3, [r7, #16]
 800e16c:	e03e      	b.n	800e1ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800e16e:	4b23      	ldr	r3, [pc, #140]	; (800e1fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	f003 030c 	and.w	r3, r3, #12
 800e176:	2b0c      	cmp	r3, #12
 800e178:	d136      	bne.n	800e1e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e17a:	4b20      	ldr	r3, [pc, #128]	; (800e1fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800e17c:	68db      	ldr	r3, [r3, #12]
 800e17e:	f003 0303 	and.w	r3, r3, #3
 800e182:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e184:	4b1d      	ldr	r3, [pc, #116]	; (800e1fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800e186:	68db      	ldr	r3, [r3, #12]
 800e188:	091b      	lsrs	r3, r3, #4
 800e18a:	f003 030f 	and.w	r3, r3, #15
 800e18e:	3301      	adds	r3, #1
 800e190:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2b03      	cmp	r3, #3
 800e196:	d10c      	bne.n	800e1b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e198:	4a1a      	ldr	r2, [pc, #104]	; (800e204 <HAL_RCC_GetSysClockFreq+0xc0>)
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1a0:	4a16      	ldr	r2, [pc, #88]	; (800e1fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800e1a2:	68d2      	ldr	r2, [r2, #12]
 800e1a4:	0a12      	lsrs	r2, r2, #8
 800e1a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e1aa:	fb02 f303 	mul.w	r3, r2, r3
 800e1ae:	617b      	str	r3, [r7, #20]
      break;
 800e1b0:	e00c      	b.n	800e1cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e1b2:	4a13      	ldr	r2, [pc, #76]	; (800e200 <HAL_RCC_GetSysClockFreq+0xbc>)
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1ba:	4a10      	ldr	r2, [pc, #64]	; (800e1fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800e1bc:	68d2      	ldr	r2, [r2, #12]
 800e1be:	0a12      	lsrs	r2, r2, #8
 800e1c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e1c4:	fb02 f303 	mul.w	r3, r2, r3
 800e1c8:	617b      	str	r3, [r7, #20]
      break;
 800e1ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e1cc:	4b0b      	ldr	r3, [pc, #44]	; (800e1fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	0e5b      	lsrs	r3, r3, #25
 800e1d2:	f003 0303 	and.w	r3, r3, #3
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	005b      	lsls	r3, r3, #1
 800e1da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800e1dc:	697a      	ldr	r2, [r7, #20]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1e4:	613b      	str	r3, [r7, #16]
 800e1e6:	e001      	b.n	800e1ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800e1ec:	693b      	ldr	r3, [r7, #16]
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	371c      	adds	r7, #28
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr
 800e1fa:	bf00      	nop
 800e1fc:	40021000 	.word	0x40021000
 800e200:	00f42400 	.word	0x00f42400
 800e204:	016e3600 	.word	0x016e3600

0800e208 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e208:	b480      	push	{r7}
 800e20a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e20c:	4b03      	ldr	r3, [pc, #12]	; (800e21c <HAL_RCC_GetHCLKFreq+0x14>)
 800e20e:	681b      	ldr	r3, [r3, #0]
}
 800e210:	4618      	mov	r0, r3
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop
 800e21c:	20000000 	.word	0x20000000

0800e220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800e224:	f7ff fff0 	bl	800e208 <HAL_RCC_GetHCLKFreq>
 800e228:	4602      	mov	r2, r0
 800e22a:	4b06      	ldr	r3, [pc, #24]	; (800e244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	0a1b      	lsrs	r3, r3, #8
 800e230:	f003 0307 	and.w	r3, r3, #7
 800e234:	4904      	ldr	r1, [pc, #16]	; (800e248 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e236:	5ccb      	ldrb	r3, [r1, r3]
 800e238:	f003 031f 	and.w	r3, r3, #31
 800e23c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e240:	4618      	mov	r0, r3
 800e242:	bd80      	pop	{r7, pc}
 800e244:	40021000 	.word	0x40021000
 800e248:	08018e00 	.word	0x08018e00

0800e24c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800e250:	f7ff ffda 	bl	800e208 <HAL_RCC_GetHCLKFreq>
 800e254:	4602      	mov	r2, r0
 800e256:	4b06      	ldr	r3, [pc, #24]	; (800e270 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e258:	689b      	ldr	r3, [r3, #8]
 800e25a:	0adb      	lsrs	r3, r3, #11
 800e25c:	f003 0307 	and.w	r3, r3, #7
 800e260:	4904      	ldr	r1, [pc, #16]	; (800e274 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e262:	5ccb      	ldrb	r3, [r1, r3]
 800e264:	f003 031f 	and.w	r3, r3, #31
 800e268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	bd80      	pop	{r7, pc}
 800e270:	40021000 	.word	0x40021000
 800e274:	08018e00 	.word	0x08018e00

0800e278 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800e278:	b480      	push	{r7}
 800e27a:	b087      	sub	sp, #28
 800e27c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e27e:	4b1e      	ldr	r3, [pc, #120]	; (800e2f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e280:	68db      	ldr	r3, [r3, #12]
 800e282:	f003 0303 	and.w	r3, r3, #3
 800e286:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e288:	4b1b      	ldr	r3, [pc, #108]	; (800e2f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e28a:	68db      	ldr	r3, [r3, #12]
 800e28c:	091b      	lsrs	r3, r3, #4
 800e28e:	f003 030f 	and.w	r3, r3, #15
 800e292:	3301      	adds	r3, #1
 800e294:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	2b03      	cmp	r3, #3
 800e29a:	d10c      	bne.n	800e2b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e29c:	4a17      	ldr	r2, [pc, #92]	; (800e2fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2a4:	4a14      	ldr	r2, [pc, #80]	; (800e2f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e2a6:	68d2      	ldr	r2, [r2, #12]
 800e2a8:	0a12      	lsrs	r2, r2, #8
 800e2aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e2ae:	fb02 f303 	mul.w	r3, r2, r3
 800e2b2:	617b      	str	r3, [r7, #20]
    break;
 800e2b4:	e00c      	b.n	800e2d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e2b6:	4a12      	ldr	r2, [pc, #72]	; (800e300 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2be:	4a0e      	ldr	r2, [pc, #56]	; (800e2f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e2c0:	68d2      	ldr	r2, [r2, #12]
 800e2c2:	0a12      	lsrs	r2, r2, #8
 800e2c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e2c8:	fb02 f303 	mul.w	r3, r2, r3
 800e2cc:	617b      	str	r3, [r7, #20]
    break;
 800e2ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e2d0:	4b09      	ldr	r3, [pc, #36]	; (800e2f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	0e5b      	lsrs	r3, r3, #25
 800e2d6:	f003 0303 	and.w	r3, r3, #3
 800e2da:	3301      	adds	r3, #1
 800e2dc:	005b      	lsls	r3, r3, #1
 800e2de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800e2e0:	697a      	ldr	r2, [r7, #20]
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800e2ea:	687b      	ldr	r3, [r7, #4]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	371c      	adds	r7, #28
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr
 800e2f8:	40021000 	.word	0x40021000
 800e2fc:	016e3600 	.word	0x016e3600
 800e300:	00f42400 	.word	0x00f42400

0800e304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e30c:	2300      	movs	r3, #0
 800e30e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e310:	2300      	movs	r3, #0
 800e312:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f000 8098 	beq.w	800e452 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e322:	2300      	movs	r3, #0
 800e324:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e326:	4b43      	ldr	r3, [pc, #268]	; (800e434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e32a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10d      	bne.n	800e34e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e332:	4b40      	ldr	r3, [pc, #256]	; (800e434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e336:	4a3f      	ldr	r2, [pc, #252]	; (800e434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e33c:	6593      	str	r3, [r2, #88]	; 0x58
 800e33e:	4b3d      	ldr	r3, [pc, #244]	; (800e434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e346:	60bb      	str	r3, [r7, #8]
 800e348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e34a:	2301      	movs	r3, #1
 800e34c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e34e:	4b3a      	ldr	r3, [pc, #232]	; (800e438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4a39      	ldr	r2, [pc, #228]	; (800e438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e35a:	f7fc fdb7 	bl	800aecc <HAL_GetTick>
 800e35e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e360:	e009      	b.n	800e376 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e362:	f7fc fdb3 	bl	800aecc <HAL_GetTick>
 800e366:	4602      	mov	r2, r0
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	1ad3      	subs	r3, r2, r3
 800e36c:	2b02      	cmp	r3, #2
 800e36e:	d902      	bls.n	800e376 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800e370:	2303      	movs	r3, #3
 800e372:	74fb      	strb	r3, [r7, #19]
        break;
 800e374:	e005      	b.n	800e382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e376:	4b30      	ldr	r3, [pc, #192]	; (800e438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d0ef      	beq.n	800e362 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800e382:	7cfb      	ldrb	r3, [r7, #19]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d159      	bne.n	800e43c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e388:	4b2a      	ldr	r3, [pc, #168]	; (800e434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e38a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e38e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e392:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d01e      	beq.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e39e:	697a      	ldr	r2, [r7, #20]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d019      	beq.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e3a4:	4b23      	ldr	r3, [pc, #140]	; (800e434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e3a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e3b0:	4b20      	ldr	r3, [pc, #128]	; (800e434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e3b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3b6:	4a1f      	ldr	r2, [pc, #124]	; (800e434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e3b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e3bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e3c0:	4b1c      	ldr	r3, [pc, #112]	; (800e434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e3c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3c6:	4a1b      	ldr	r2, [pc, #108]	; (800e434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e3c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e3cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e3d0:	4a18      	ldr	r2, [pc, #96]	; (800e434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	f003 0301 	and.w	r3, r3, #1
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d016      	beq.n	800e410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3e2:	f7fc fd73 	bl	800aecc <HAL_GetTick>
 800e3e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e3e8:	e00b      	b.n	800e402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e3ea:	f7fc fd6f 	bl	800aecc <HAL_GetTick>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	1ad3      	subs	r3, r2, r3
 800e3f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d902      	bls.n	800e402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800e3fc:	2303      	movs	r3, #3
 800e3fe:	74fb      	strb	r3, [r7, #19]
            break;
 800e400:	e006      	b.n	800e410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e402:	4b0c      	ldr	r3, [pc, #48]	; (800e434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e408:	f003 0302 	and.w	r3, r3, #2
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d0ec      	beq.n	800e3ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800e410:	7cfb      	ldrb	r3, [r7, #19]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d10b      	bne.n	800e42e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e416:	4b07      	ldr	r3, [pc, #28]	; (800e434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e41c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e424:	4903      	ldr	r1, [pc, #12]	; (800e434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e426:	4313      	orrs	r3, r2
 800e428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800e42c:	e008      	b.n	800e440 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e42e:	7cfb      	ldrb	r3, [r7, #19]
 800e430:	74bb      	strb	r3, [r7, #18]
 800e432:	e005      	b.n	800e440 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800e434:	40021000 	.word	0x40021000
 800e438:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e43c:	7cfb      	ldrb	r3, [r7, #19]
 800e43e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e440:	7c7b      	ldrb	r3, [r7, #17]
 800e442:	2b01      	cmp	r3, #1
 800e444:	d105      	bne.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e446:	4ba7      	ldr	r3, [pc, #668]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e44a:	4aa6      	ldr	r2, [pc, #664]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e44c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e450:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f003 0301 	and.w	r3, r3, #1
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d00a      	beq.n	800e474 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e45e:	4ba1      	ldr	r3, [pc, #644]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e464:	f023 0203 	bic.w	r2, r3, #3
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	499d      	ldr	r1, [pc, #628]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e46e:	4313      	orrs	r3, r2
 800e470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f003 0302 	and.w	r3, r3, #2
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d00a      	beq.n	800e496 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e480:	4b98      	ldr	r3, [pc, #608]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e486:	f023 020c 	bic.w	r2, r3, #12
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	689b      	ldr	r3, [r3, #8]
 800e48e:	4995      	ldr	r1, [pc, #596]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e490:	4313      	orrs	r3, r2
 800e492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f003 0304 	and.w	r3, r3, #4
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00a      	beq.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e4a2:	4b90      	ldr	r3, [pc, #576]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	68db      	ldr	r3, [r3, #12]
 800e4b0:	498c      	ldr	r1, [pc, #560]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4b2:	4313      	orrs	r3, r2
 800e4b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f003 0308 	and.w	r3, r3, #8
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d00a      	beq.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e4c4:	4b87      	ldr	r3, [pc, #540]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	691b      	ldr	r3, [r3, #16]
 800e4d2:	4984      	ldr	r1, [pc, #528]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f003 0310 	and.w	r3, r3, #16
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00a      	beq.n	800e4fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e4e6:	4b7f      	ldr	r3, [pc, #508]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	695b      	ldr	r3, [r3, #20]
 800e4f4:	497b      	ldr	r1, [pc, #492]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4f6:	4313      	orrs	r3, r2
 800e4f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f003 0320 	and.w	r3, r3, #32
 800e504:	2b00      	cmp	r3, #0
 800e506:	d00a      	beq.n	800e51e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e508:	4b76      	ldr	r3, [pc, #472]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e50e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	699b      	ldr	r3, [r3, #24]
 800e516:	4973      	ldr	r1, [pc, #460]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e518:	4313      	orrs	r3, r2
 800e51a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e526:	2b00      	cmp	r3, #0
 800e528:	d00a      	beq.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e52a:	4b6e      	ldr	r3, [pc, #440]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e52c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e530:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	69db      	ldr	r3, [r3, #28]
 800e538:	496a      	ldr	r1, [pc, #424]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e53a:	4313      	orrs	r3, r2
 800e53c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d00a      	beq.n	800e562 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e54c:	4b65      	ldr	r3, [pc, #404]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e552:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6a1b      	ldr	r3, [r3, #32]
 800e55a:	4962      	ldr	r1, [pc, #392]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e55c:	4313      	orrs	r3, r2
 800e55e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d00a      	beq.n	800e584 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e56e:	4b5d      	ldr	r3, [pc, #372]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e57c:	4959      	ldr	r1, [pc, #356]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e57e:	4313      	orrs	r3, r2
 800e580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d00a      	beq.n	800e5a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e590:	4b54      	ldr	r3, [pc, #336]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e596:	f023 0203 	bic.w	r2, r3, #3
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e59e:	4951      	ldr	r1, [pc, #324]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d00a      	beq.n	800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e5b2:	4b4c      	ldr	r3, [pc, #304]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c0:	4948      	ldr	r1, [pc, #288]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5c2:	4313      	orrs	r3, r2
 800e5c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d015      	beq.n	800e600 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e5d4:	4b43      	ldr	r3, [pc, #268]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5e2:	4940      	ldr	r1, [pc, #256]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5e4:	4313      	orrs	r3, r2
 800e5e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5f2:	d105      	bne.n	800e600 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e5f4:	4b3b      	ldr	r3, [pc, #236]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5f6:	68db      	ldr	r3, [r3, #12]
 800e5f8:	4a3a      	ldr	r2, [pc, #232]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e5fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e5fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d015      	beq.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e60c:	4b35      	ldr	r3, [pc, #212]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e612:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e61a:	4932      	ldr	r1, [pc, #200]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e61c:	4313      	orrs	r3, r2
 800e61e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e62a:	d105      	bne.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e62c:	4b2d      	ldr	r3, [pc, #180]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	4a2c      	ldr	r2, [pc, #176]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e636:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e640:	2b00      	cmp	r3, #0
 800e642:	d015      	beq.n	800e670 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e644:	4b27      	ldr	r3, [pc, #156]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e64a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e652:	4924      	ldr	r1, [pc, #144]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e654:	4313      	orrs	r3, r2
 800e656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e65e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e662:	d105      	bne.n	800e670 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e664:	4b1f      	ldr	r3, [pc, #124]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	4a1e      	ldr	r2, [pc, #120]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e66a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e66e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d015      	beq.n	800e6a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e67c:	4b19      	ldr	r3, [pc, #100]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e682:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e68a:	4916      	ldr	r1, [pc, #88]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e68c:	4313      	orrs	r3, r2
 800e68e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e696:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e69a:	d105      	bne.n	800e6a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e69c:	4b11      	ldr	r3, [pc, #68]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	4a10      	ldr	r2, [pc, #64]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d019      	beq.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e6b4:	4b0b      	ldr	r3, [pc, #44]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6c2:	4908      	ldr	r1, [pc, #32]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6c4:	4313      	orrs	r3, r2
 800e6c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e6d2:	d109      	bne.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e6d4:	4b03      	ldr	r3, [pc, #12]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	4a02      	ldr	r2, [pc, #8]	; (800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e6da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6de:	60d3      	str	r3, [r2, #12]
 800e6e0:	e002      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e6e2:	bf00      	nop
 800e6e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d015      	beq.n	800e720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800e6f4:	4b29      	ldr	r3, [pc, #164]	; (800e79c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e702:	4926      	ldr	r1, [pc, #152]	; (800e79c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e704:	4313      	orrs	r3, r2
 800e706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e70e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e712:	d105      	bne.n	800e720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e714:	4b21      	ldr	r3, [pc, #132]	; (800e79c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e716:	68db      	ldr	r3, [r3, #12]
 800e718:	4a20      	ldr	r2, [pc, #128]	; (800e79c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e71a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e71e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d015      	beq.n	800e758 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800e72c:	4b1b      	ldr	r3, [pc, #108]	; (800e79c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e72e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e732:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e73a:	4918      	ldr	r1, [pc, #96]	; (800e79c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e73c:	4313      	orrs	r3, r2
 800e73e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e74a:	d105      	bne.n	800e758 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e74c:	4b13      	ldr	r3, [pc, #76]	; (800e79c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	4a12      	ldr	r2, [pc, #72]	; (800e79c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e756:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e760:	2b00      	cmp	r3, #0
 800e762:	d015      	beq.n	800e790 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e764:	4b0d      	ldr	r3, [pc, #52]	; (800e79c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e766:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e76a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e772:	490a      	ldr	r1, [pc, #40]	; (800e79c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e774:	4313      	orrs	r3, r2
 800e776:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e77e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e782:	d105      	bne.n	800e790 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e784:	4b05      	ldr	r3, [pc, #20]	; (800e79c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	4a04      	ldr	r2, [pc, #16]	; (800e79c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e78a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e78e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800e790:	7cbb      	ldrb	r3, [r7, #18]
}
 800e792:	4618      	mov	r0, r3
 800e794:	3718      	adds	r7, #24
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	40021000 	.word	0x40021000

0800e7a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d070      	beq.n	800e894 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e7b8:	b2db      	uxtb	r3, r3
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d106      	bne.n	800e7cc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f7fb fe04 	bl	800a3d4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2202      	movs	r2, #2
 800e7d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	f003 0310 	and.w	r3, r3, #16
 800e7de:	2b10      	cmp	r3, #16
 800e7e0:	d04f      	beq.n	800e882 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	22ca      	movs	r2, #202	; 0xca
 800e7e8:	625a      	str	r2, [r3, #36]	; 0x24
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	2253      	movs	r2, #83	; 0x53
 800e7f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 f878 	bl	800e8e8 <RTC_EnterInitMode>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800e7fc:	7bfb      	ldrb	r3, [r7, #15]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d126      	bne.n	800e850 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	699b      	ldr	r3, [r3, #24]
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	6812      	ldr	r2, [r2, #0]
 800e80c:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800e810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e814:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	6999      	ldr	r1, [r3, #24]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	685a      	ldr	r2, [r3, #4]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	691b      	ldr	r3, [r3, #16]
 800e824:	431a      	orrs	r2, r3
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	699b      	ldr	r3, [r3, #24]
 800e82a:	431a      	orrs	r2, r3
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	430a      	orrs	r2, r1
 800e832:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	68d9      	ldr	r1, [r3, #12]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	689b      	ldr	r3, [r3, #8]
 800e83c:	041a      	lsls	r2, r3, #16
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	430a      	orrs	r2, r1
 800e844:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f000 f884 	bl	800e954 <RTC_ExitInitMode>
 800e84c:	4603      	mov	r3, r0
 800e84e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800e850:	7bfb      	ldrb	r3, [r7, #15]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d110      	bne.n	800e878 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	699b      	ldr	r3, [r3, #24]
 800e85c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6a1a      	ldr	r2, [r3, #32]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	69db      	ldr	r3, [r3, #28]
 800e868:	431a      	orrs	r2, r3
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	695b      	ldr	r3, [r3, #20]
 800e86e:	431a      	orrs	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	430a      	orrs	r2, r1
 800e876:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	22ff      	movs	r2, #255	; 0xff
 800e87e:	625a      	str	r2, [r3, #36]	; 0x24
 800e880:	e001      	b.n	800e886 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800e882:	2300      	movs	r3, #0
 800e884:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800e886:	7bfb      	ldrb	r3, [r7, #15]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d103      	bne.n	800e894 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2201      	movs	r2, #1
 800e890:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800e894:	7bfb      	ldrb	r3, [r7, #15]
}
 800e896:	4618      	mov	r0, r3
 800e898:	3710      	adds	r7, #16
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
	...

0800e8a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4a0d      	ldr	r2, [pc, #52]	; (800e8e4 <HAL_RTC_WaitForSynchro+0x44>)
 800e8ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800e8b0:	f7fc fb0c 	bl	800aecc <HAL_GetTick>
 800e8b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800e8b6:	e009      	b.n	800e8cc <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e8b8:	f7fc fb08 	bl	800aecc <HAL_GetTick>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	1ad3      	subs	r3, r2, r3
 800e8c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e8c6:	d901      	bls.n	800e8cc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800e8c8:	2303      	movs	r3, #3
 800e8ca:	e007      	b.n	800e8dc <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68db      	ldr	r3, [r3, #12]
 800e8d2:	f003 0320 	and.w	r3, r3, #32
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d0ee      	beq.n	800e8b8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800e8da:	2300      	movs	r3, #0
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	0001005f 	.word	0x0001005f

0800e8e8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d123      	bne.n	800e94a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	68da      	ldr	r2, [r3, #12]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e910:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e912:	f7fc fadb 	bl	800aecc <HAL_GetTick>
 800e916:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e918:	e00d      	b.n	800e936 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e91a:	f7fc fad7 	bl	800aecc <HAL_GetTick>
 800e91e:	4602      	mov	r2, r0
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	1ad3      	subs	r3, r2, r3
 800e924:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e928:	d905      	bls.n	800e936 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800e92a:	2303      	movs	r3, #3
 800e92c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2203      	movs	r2, #3
 800e932:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e940:	2b00      	cmp	r3, #0
 800e942:	d102      	bne.n	800e94a <RTC_EnterInitMode+0x62>
 800e944:	7bfb      	ldrb	r3, [r7, #15]
 800e946:	2b03      	cmp	r3, #3
 800e948:	d1e7      	bne.n	800e91a <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800e94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3710      	adds	r7, #16
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e95c:	2300      	movs	r3, #0
 800e95e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68da      	ldr	r2, [r3, #12]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e96e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	699b      	ldr	r3, [r3, #24]
 800e976:	f003 0320 	and.w	r3, r3, #32
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d10c      	bne.n	800e998 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f7ff ff8e 	bl	800e8a0 <HAL_RTC_WaitForSynchro>
 800e984:	4603      	mov	r3, r0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d022      	beq.n	800e9d0 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2203      	movs	r2, #3
 800e98e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800e992:	2303      	movs	r3, #3
 800e994:	73fb      	strb	r3, [r7, #15]
 800e996:	e01b      	b.n	800e9d0 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	699a      	ldr	r2, [r3, #24]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	f022 0220 	bic.w	r2, r2, #32
 800e9a6:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f7ff ff79 	bl	800e8a0 <HAL_RTC_WaitForSynchro>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d005      	beq.n	800e9c0 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2203      	movs	r2, #3
 800e9b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800e9bc:	2303      	movs	r3, #3
 800e9be:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	699a      	ldr	r2, [r3, #24]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f042 0220 	orr.w	r2, r2, #32
 800e9ce:	619a      	str	r2, [r3, #24]
  }

  return status;
 800e9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3710      	adds	r7, #16
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
	...

0800e9dc <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified TAMP Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b087      	sub	sp, #28
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 800e9e8:	4b07      	ldr	r3, [pc, #28]	; (800ea08 <HAL_RTCEx_BKUPWrite+0x2c>)
 800e9ea:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	697a      	ldr	r2, [r7, #20]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	601a      	str	r2, [r3, #0]
}
 800e9fc:	bf00      	nop
 800e9fe:	371c      	adds	r7, #28
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr
 800ea08:	40002500 	.word	0x40002500

0800ea0c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB to
  *          specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b085      	sub	sp, #20
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 800ea16:	4b07      	ldr	r3, [pc, #28]	; (800ea34 <HAL_RTCEx_BKUPRead+0x28>)
 800ea18:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	009b      	lsls	r3, r3, #2
 800ea1e:	68fa      	ldr	r2, [r7, #12]
 800ea20:	4413      	add	r3, r2
 800ea22:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3714      	adds	r7, #20
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr
 800ea34:	40002500 	.word	0x40002500

0800ea38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d101      	bne.n	800ea4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea46:	2301      	movs	r3, #1
 800ea48:	e042      	b.n	800ead0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d106      	bne.n	800ea62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2200      	movs	r2, #0
 800ea58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f7fb ff4b 	bl	800a8f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2224      	movs	r2, #36	; 0x24
 800ea66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f022 0201 	bic.w	r2, r2, #1
 800ea78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d002      	beq.n	800ea88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 ff38 	bl	800f8f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f000 fc39 	bl	800f300 <UART_SetConfig>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d101      	bne.n	800ea98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ea94:	2301      	movs	r3, #1
 800ea96:	e01b      	b.n	800ead0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	685a      	ldr	r2, [r3, #4]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eaa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	689a      	ldr	r2, [r3, #8]
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	681a      	ldr	r2, [r3, #0]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f042 0201 	orr.w	r2, r2, #1
 800eac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f000 ffb7 	bl	800fa3c <UART_CheckIdleState>
 800eace:	4603      	mov	r3, r0
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b08a      	sub	sp, #40	; 0x28
 800eadc:	af02      	add	r7, sp, #8
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	603b      	str	r3, [r7, #0]
 800eae4:	4613      	mov	r3, r2
 800eae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eaee:	2b20      	cmp	r3, #32
 800eaf0:	d17b      	bne.n	800ebea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d002      	beq.n	800eafe <HAL_UART_Transmit+0x26>
 800eaf8:	88fb      	ldrh	r3, [r7, #6]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d101      	bne.n	800eb02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800eafe:	2301      	movs	r3, #1
 800eb00:	e074      	b.n	800ebec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2200      	movs	r2, #0
 800eb06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2221      	movs	r2, #33	; 0x21
 800eb0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eb12:	f7fc f9db 	bl	800aecc <HAL_GetTick>
 800eb16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	88fa      	ldrh	r2, [r7, #6]
 800eb1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	88fa      	ldrh	r2, [r7, #6]
 800eb24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	689b      	ldr	r3, [r3, #8]
 800eb2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb30:	d108      	bne.n	800eb44 <HAL_UART_Transmit+0x6c>
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	691b      	ldr	r3, [r3, #16]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d104      	bne.n	800eb44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	61bb      	str	r3, [r7, #24]
 800eb42:	e003      	b.n	800eb4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800eb4c:	e030      	b.n	800ebb0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	9300      	str	r3, [sp, #0]
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	2200      	movs	r2, #0
 800eb56:	2180      	movs	r1, #128	; 0x80
 800eb58:	68f8      	ldr	r0, [r7, #12]
 800eb5a:	f001 f819 	bl	800fb90 <UART_WaitOnFlagUntilTimeout>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d005      	beq.n	800eb70 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2220      	movs	r2, #32
 800eb68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800eb6c:	2303      	movs	r3, #3
 800eb6e:	e03d      	b.n	800ebec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800eb70:	69fb      	ldr	r3, [r7, #28]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d10b      	bne.n	800eb8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	881b      	ldrh	r3, [r3, #0]
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eb84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	3302      	adds	r3, #2
 800eb8a:	61bb      	str	r3, [r7, #24]
 800eb8c:	e007      	b.n	800eb9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	781a      	ldrb	r2, [r3, #0]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	3b01      	subs	r3, #1
 800eba8:	b29a      	uxth	r2, r3
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d1c8      	bne.n	800eb4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	2140      	movs	r1, #64	; 0x40
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	f000 ffe2 	bl	800fb90 <UART_WaitOnFlagUntilTimeout>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d005      	beq.n	800ebde <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2220      	movs	r2, #32
 800ebd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ebda:	2303      	movs	r3, #3
 800ebdc:	e006      	b.n	800ebec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2220      	movs	r2, #32
 800ebe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	e000      	b.n	800ebec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ebea:	2302      	movs	r3, #2
  }
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3720      	adds	r7, #32
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b08a      	sub	sp, #40	; 0x28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	4613      	mov	r3, r2
 800ec00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec08:	2b20      	cmp	r3, #32
 800ec0a:	d137      	bne.n	800ec7c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d002      	beq.n	800ec18 <HAL_UART_Receive_IT+0x24>
 800ec12:	88fb      	ldrh	r3, [r7, #6]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d101      	bne.n	800ec1c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ec18:	2301      	movs	r3, #1
 800ec1a:	e030      	b.n	800ec7e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	4a18      	ldr	r2, [pc, #96]	; (800ec88 <HAL_UART_Receive_IT+0x94>)
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d01f      	beq.n	800ec6c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d018      	beq.n	800ec6c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	e853 3f00 	ldrex	r3, [r3]
 800ec46:	613b      	str	r3, [r7, #16]
   return(result);
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ec4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	461a      	mov	r2, r3
 800ec56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec58:	623b      	str	r3, [r7, #32]
 800ec5a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec5c:	69f9      	ldr	r1, [r7, #28]
 800ec5e:	6a3a      	ldr	r2, [r7, #32]
 800ec60:	e841 2300 	strex	r3, r2, [r1]
 800ec64:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1e6      	bne.n	800ec3a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ec6c:	88fb      	ldrh	r3, [r7, #6]
 800ec6e:	461a      	mov	r2, r3
 800ec70:	68b9      	ldr	r1, [r7, #8]
 800ec72:	68f8      	ldr	r0, [r7, #12]
 800ec74:	f000 fffa 	bl	800fc6c <UART_Start_Receive_IT>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	e000      	b.n	800ec7e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ec7c:	2302      	movs	r3, #2
  }
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3728      	adds	r7, #40	; 0x28
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	40008000 	.word	0x40008000

0800ec8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b0ba      	sub	sp, #232	; 0xe8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	69db      	ldr	r3, [r3, #28]
 800ec9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	689b      	ldr	r3, [r3, #8]
 800ecae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ecb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ecb6:	f640 030f 	movw	r3, #2063	; 0x80f
 800ecba:	4013      	ands	r3, r2
 800ecbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ecc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d11b      	bne.n	800ed00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ecc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eccc:	f003 0320 	and.w	r3, r3, #32
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d015      	beq.n	800ed00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ecd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecd8:	f003 0320 	and.w	r3, r3, #32
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d105      	bne.n	800ecec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ece0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ece4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d009      	beq.n	800ed00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	f000 82e3 	beq.w	800f2bc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	4798      	blx	r3
      }
      return;
 800ecfe:	e2dd      	b.n	800f2bc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ed00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f000 8123 	beq.w	800ef50 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ed0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ed0e:	4b8d      	ldr	r3, [pc, #564]	; (800ef44 <HAL_UART_IRQHandler+0x2b8>)
 800ed10:	4013      	ands	r3, r2
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d106      	bne.n	800ed24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ed16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ed1a:	4b8b      	ldr	r3, [pc, #556]	; (800ef48 <HAL_UART_IRQHandler+0x2bc>)
 800ed1c:	4013      	ands	r3, r2
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	f000 8116 	beq.w	800ef50 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ed24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed28:	f003 0301 	and.w	r3, r3, #1
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d011      	beq.n	800ed54 <HAL_UART_IRQHandler+0xc8>
 800ed30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00b      	beq.n	800ed54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2201      	movs	r2, #1
 800ed42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed4a:	f043 0201 	orr.w	r2, r3, #1
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed58:	f003 0302 	and.w	r3, r3, #2
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d011      	beq.n	800ed84 <HAL_UART_IRQHandler+0xf8>
 800ed60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed64:	f003 0301 	and.w	r3, r3, #1
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d00b      	beq.n	800ed84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2202      	movs	r2, #2
 800ed72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed7a:	f043 0204 	orr.w	r2, r3, #4
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed88:	f003 0304 	and.w	r3, r3, #4
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d011      	beq.n	800edb4 <HAL_UART_IRQHandler+0x128>
 800ed90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed94:	f003 0301 	and.w	r3, r3, #1
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d00b      	beq.n	800edb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	2204      	movs	r2, #4
 800eda2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edaa:	f043 0202 	orr.w	r2, r3, #2
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800edb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edb8:	f003 0308 	and.w	r3, r3, #8
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d017      	beq.n	800edf0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800edc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edc4:	f003 0320 	and.w	r3, r3, #32
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d105      	bne.n	800edd8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800edcc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800edd0:	4b5c      	ldr	r3, [pc, #368]	; (800ef44 <HAL_UART_IRQHandler+0x2b8>)
 800edd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d00b      	beq.n	800edf0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	2208      	movs	r2, #8
 800edde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ede6:	f043 0208 	orr.w	r2, r3, #8
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800edf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d012      	beq.n	800ee22 <HAL_UART_IRQHandler+0x196>
 800edfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d00c      	beq.n	800ee22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee18:	f043 0220 	orr.w	r2, r3, #32
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	f000 8249 	beq.w	800f2c0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ee2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee32:	f003 0320 	and.w	r3, r3, #32
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d013      	beq.n	800ee62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ee3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee3e:	f003 0320 	and.w	r3, r3, #32
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d105      	bne.n	800ee52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ee46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d007      	beq.n	800ee62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d003      	beq.n	800ee62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	689b      	ldr	r3, [r3, #8]
 800ee72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee76:	2b40      	cmp	r3, #64	; 0x40
 800ee78:	d005      	beq.n	800ee86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ee7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ee7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d054      	beq.n	800ef30 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f001 f812 	bl	800feb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee96:	2b40      	cmp	r3, #64	; 0x40
 800ee98:	d146      	bne.n	800ef28 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	3308      	adds	r3, #8
 800eea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eea8:	e853 3f00 	ldrex	r3, [r3]
 800eeac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800eeb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eeb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eeb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	3308      	adds	r3, #8
 800eec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800eec6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800eeca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800eed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800eed6:	e841 2300 	strex	r3, r2, [r1]
 800eeda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800eede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d1d9      	bne.n	800ee9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d017      	beq.n	800ef20 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eef6:	4a15      	ldr	r2, [pc, #84]	; (800ef4c <HAL_UART_IRQHandler+0x2c0>)
 800eef8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7fc f979 	bl	800b1f8 <HAL_DMA_Abort_IT>
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d019      	beq.n	800ef40 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef14:	687a      	ldr	r2, [r7, #4]
 800ef16:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ef1a:	4610      	mov	r0, r2
 800ef1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef1e:	e00f      	b.n	800ef40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f7fb fcbf 	bl	800a8a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef26:	e00b      	b.n	800ef40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f7fb fcbb 	bl	800a8a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef2e:	e007      	b.n	800ef40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f7fb fcb7 	bl	800a8a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ef3e:	e1bf      	b.n	800f2c0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef40:	bf00      	nop
    return;
 800ef42:	e1bd      	b.n	800f2c0 <HAL_UART_IRQHandler+0x634>
 800ef44:	10000001 	.word	0x10000001
 800ef48:	04000120 	.word	0x04000120
 800ef4c:	0800ff7d 	.word	0x0800ff7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	f040 8153 	bne.w	800f200 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ef5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef5e:	f003 0310 	and.w	r3, r3, #16
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	f000 814c 	beq.w	800f200 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ef68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef6c:	f003 0310 	and.w	r3, r3, #16
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	f000 8145 	beq.w	800f200 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	2210      	movs	r2, #16
 800ef7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	689b      	ldr	r3, [r3, #8]
 800ef84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef88:	2b40      	cmp	r3, #64	; 0x40
 800ef8a:	f040 80bb 	bne.w	800f104 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	685b      	ldr	r3, [r3, #4]
 800ef98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ef9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	f000 818f 	beq.w	800f2c4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800efac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800efb0:	429a      	cmp	r2, r3
 800efb2:	f080 8187 	bcs.w	800f2c4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800efbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f003 0320 	and.w	r3, r3, #32
 800efce:	2b00      	cmp	r3, #0
 800efd0:	f040 8087 	bne.w	800f0e2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800efe0:	e853 3f00 	ldrex	r3, [r3]
 800efe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800efe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800efec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eff0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	461a      	mov	r2, r3
 800effa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800effe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f002:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f006:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f00a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f00e:	e841 2300 	strex	r3, r2, [r1]
 800f012:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f016:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d1da      	bne.n	800efd4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	3308      	adds	r3, #8
 800f024:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f028:	e853 3f00 	ldrex	r3, [r3]
 800f02c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f02e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f030:	f023 0301 	bic.w	r3, r3, #1
 800f034:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	3308      	adds	r3, #8
 800f03e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f042:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f046:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f048:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f04a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f04e:	e841 2300 	strex	r3, r2, [r1]
 800f052:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f056:	2b00      	cmp	r3, #0
 800f058:	d1e1      	bne.n	800f01e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	3308      	adds	r3, #8
 800f060:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f064:	e853 3f00 	ldrex	r3, [r3]
 800f068:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f06a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f06c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	3308      	adds	r3, #8
 800f07a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f07e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f080:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f082:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f084:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f086:	e841 2300 	strex	r3, r2, [r1]
 800f08a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f08c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d1e3      	bne.n	800f05a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2220      	movs	r2, #32
 800f096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2200      	movs	r2, #0
 800f09e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0a8:	e853 3f00 	ldrex	r3, [r3]
 800f0ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f0ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0b0:	f023 0310 	bic.w	r3, r3, #16
 800f0b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	461a      	mov	r2, r3
 800f0be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f0c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800f0c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f0c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f0ca:	e841 2300 	strex	r3, r2, [r1]
 800f0ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f0d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d1e4      	bne.n	800f0a0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f7fc f832 	bl	800b146 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2202      	movs	r2, #2
 800f0e6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0f4:	b29b      	uxth	r3, r3
 800f0f6:	1ad3      	subs	r3, r2, r3
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f000 f8f3 	bl	800f2e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f102:	e0df      	b.n	800f2c4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f110:	b29b      	uxth	r3, r3
 800f112:	1ad3      	subs	r3, r2, r3
 800f114:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f11e:	b29b      	uxth	r3, r3
 800f120:	2b00      	cmp	r3, #0
 800f122:	f000 80d1 	beq.w	800f2c8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800f126:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	f000 80cc 	beq.w	800f2c8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f138:	e853 3f00 	ldrex	r3, [r3]
 800f13c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f140:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f144:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	461a      	mov	r2, r3
 800f14e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f152:	647b      	str	r3, [r7, #68]	; 0x44
 800f154:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f156:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f15a:	e841 2300 	strex	r3, r2, [r1]
 800f15e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f162:	2b00      	cmp	r3, #0
 800f164:	d1e4      	bne.n	800f130 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	3308      	adds	r3, #8
 800f16c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f170:	e853 3f00 	ldrex	r3, [r3]
 800f174:	623b      	str	r3, [r7, #32]
   return(result);
 800f176:	6a3b      	ldr	r3, [r7, #32]
 800f178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f17c:	f023 0301 	bic.w	r3, r3, #1
 800f180:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	3308      	adds	r3, #8
 800f18a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f18e:	633a      	str	r2, [r7, #48]	; 0x30
 800f190:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f192:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f196:	e841 2300 	strex	r3, r2, [r1]
 800f19a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d1e1      	bne.n	800f166 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2220      	movs	r2, #32
 800f1a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	e853 3f00 	ldrex	r3, [r3]
 800f1c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f023 0310 	bic.w	r3, r3, #16
 800f1ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f1d8:	61fb      	str	r3, [r7, #28]
 800f1da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1dc:	69b9      	ldr	r1, [r7, #24]
 800f1de:	69fa      	ldr	r2, [r7, #28]
 800f1e0:	e841 2300 	strex	r3, r2, [r1]
 800f1e4:	617b      	str	r3, [r7, #20]
   return(result);
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d1e4      	bne.n	800f1b6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2202      	movs	r2, #2
 800f1f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f1f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f000 f875 	bl	800f2e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f1fe:	e063      	b.n	800f2c8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d00e      	beq.n	800f22a <HAL_UART_IRQHandler+0x59e>
 800f20c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f214:	2b00      	cmp	r3, #0
 800f216:	d008      	beq.n	800f22a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f220:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f001 fc08 	bl	8010a38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f228:	e051      	b.n	800f2ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f22a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f232:	2b00      	cmp	r3, #0
 800f234:	d014      	beq.n	800f260 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d105      	bne.n	800f24e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d008      	beq.n	800f260 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f252:	2b00      	cmp	r3, #0
 800f254:	d03a      	beq.n	800f2cc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	4798      	blx	r3
    }
    return;
 800f25e:	e035      	b.n	800f2cc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d009      	beq.n	800f280 <HAL_UART_IRQHandler+0x5f4>
 800f26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f274:	2b00      	cmp	r3, #0
 800f276:	d003      	beq.n	800f280 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 fe95 	bl	800ffa8 <UART_EndTransmit_IT>
    return;
 800f27e:	e026      	b.n	800f2ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d009      	beq.n	800f2a0 <HAL_UART_IRQHandler+0x614>
 800f28c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f290:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f294:	2b00      	cmp	r3, #0
 800f296:	d003      	beq.n	800f2a0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f001 fbe1 	bl	8010a60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f29e:	e016      	b.n	800f2ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d010      	beq.n	800f2ce <HAL_UART_IRQHandler+0x642>
 800f2ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	da0c      	bge.n	800f2ce <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f001 fbc9 	bl	8010a4c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f2ba:	e008      	b.n	800f2ce <HAL_UART_IRQHandler+0x642>
      return;
 800f2bc:	bf00      	nop
 800f2be:	e006      	b.n	800f2ce <HAL_UART_IRQHandler+0x642>
    return;
 800f2c0:	bf00      	nop
 800f2c2:	e004      	b.n	800f2ce <HAL_UART_IRQHandler+0x642>
      return;
 800f2c4:	bf00      	nop
 800f2c6:	e002      	b.n	800f2ce <HAL_UART_IRQHandler+0x642>
      return;
 800f2c8:	bf00      	nop
 800f2ca:	e000      	b.n	800f2ce <HAL_UART_IRQHandler+0x642>
    return;
 800f2cc:	bf00      	nop
  }
}
 800f2ce:	37e8      	adds	r7, #232	; 0xe8
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f2dc:	bf00      	nop
 800f2de:	370c      	adds	r7, #12
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr

0800f2e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	460b      	mov	r3, r1
 800f2f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f2f4:	bf00      	nop
 800f2f6:	370c      	adds	r7, #12
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr

0800f300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f304:	b08c      	sub	sp, #48	; 0x30
 800f306:	af00      	add	r7, sp, #0
 800f308:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f30a:	2300      	movs	r3, #0
 800f30c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	689a      	ldr	r2, [r3, #8]
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	691b      	ldr	r3, [r3, #16]
 800f318:	431a      	orrs	r2, r3
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	695b      	ldr	r3, [r3, #20]
 800f31e:	431a      	orrs	r2, r3
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	69db      	ldr	r3, [r3, #28]
 800f324:	4313      	orrs	r3, r2
 800f326:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	681a      	ldr	r2, [r3, #0]
 800f32e:	4baa      	ldr	r3, [pc, #680]	; (800f5d8 <UART_SetConfig+0x2d8>)
 800f330:	4013      	ands	r3, r2
 800f332:	697a      	ldr	r2, [r7, #20]
 800f334:	6812      	ldr	r2, [r2, #0]
 800f336:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f338:	430b      	orrs	r3, r1
 800f33a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	68da      	ldr	r2, [r3, #12]
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	430a      	orrs	r2, r1
 800f350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	699b      	ldr	r3, [r3, #24]
 800f356:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4a9f      	ldr	r2, [pc, #636]	; (800f5dc <UART_SetConfig+0x2dc>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d004      	beq.n	800f36c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	6a1b      	ldr	r3, [r3, #32]
 800f366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f368:	4313      	orrs	r3, r2
 800f36a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	689b      	ldr	r3, [r3, #8]
 800f372:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f376:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f37a:	697a      	ldr	r2, [r7, #20]
 800f37c:	6812      	ldr	r2, [r2, #0]
 800f37e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f380:	430b      	orrs	r3, r1
 800f382:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f38a:	f023 010f 	bic.w	r1, r3, #15
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	430a      	orrs	r2, r1
 800f398:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	4a90      	ldr	r2, [pc, #576]	; (800f5e0 <UART_SetConfig+0x2e0>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d125      	bne.n	800f3f0 <UART_SetConfig+0xf0>
 800f3a4:	4b8f      	ldr	r3, [pc, #572]	; (800f5e4 <UART_SetConfig+0x2e4>)
 800f3a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3aa:	f003 0303 	and.w	r3, r3, #3
 800f3ae:	2b03      	cmp	r3, #3
 800f3b0:	d81a      	bhi.n	800f3e8 <UART_SetConfig+0xe8>
 800f3b2:	a201      	add	r2, pc, #4	; (adr r2, 800f3b8 <UART_SetConfig+0xb8>)
 800f3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3b8:	0800f3c9 	.word	0x0800f3c9
 800f3bc:	0800f3d9 	.word	0x0800f3d9
 800f3c0:	0800f3d1 	.word	0x0800f3d1
 800f3c4:	0800f3e1 	.word	0x0800f3e1
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f3ce:	e116      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f3d0:	2302      	movs	r3, #2
 800f3d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f3d6:	e112      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f3d8:	2304      	movs	r3, #4
 800f3da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f3de:	e10e      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f3e0:	2308      	movs	r3, #8
 800f3e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f3e6:	e10a      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f3e8:	2310      	movs	r3, #16
 800f3ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f3ee:	e106      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4a7c      	ldr	r2, [pc, #496]	; (800f5e8 <UART_SetConfig+0x2e8>)
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	d138      	bne.n	800f46c <UART_SetConfig+0x16c>
 800f3fa:	4b7a      	ldr	r3, [pc, #488]	; (800f5e4 <UART_SetConfig+0x2e4>)
 800f3fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f400:	f003 030c 	and.w	r3, r3, #12
 800f404:	2b0c      	cmp	r3, #12
 800f406:	d82d      	bhi.n	800f464 <UART_SetConfig+0x164>
 800f408:	a201      	add	r2, pc, #4	; (adr r2, 800f410 <UART_SetConfig+0x110>)
 800f40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f40e:	bf00      	nop
 800f410:	0800f445 	.word	0x0800f445
 800f414:	0800f465 	.word	0x0800f465
 800f418:	0800f465 	.word	0x0800f465
 800f41c:	0800f465 	.word	0x0800f465
 800f420:	0800f455 	.word	0x0800f455
 800f424:	0800f465 	.word	0x0800f465
 800f428:	0800f465 	.word	0x0800f465
 800f42c:	0800f465 	.word	0x0800f465
 800f430:	0800f44d 	.word	0x0800f44d
 800f434:	0800f465 	.word	0x0800f465
 800f438:	0800f465 	.word	0x0800f465
 800f43c:	0800f465 	.word	0x0800f465
 800f440:	0800f45d 	.word	0x0800f45d
 800f444:	2300      	movs	r3, #0
 800f446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f44a:	e0d8      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f44c:	2302      	movs	r3, #2
 800f44e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f452:	e0d4      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f454:	2304      	movs	r3, #4
 800f456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f45a:	e0d0      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f45c:	2308      	movs	r3, #8
 800f45e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f462:	e0cc      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f464:	2310      	movs	r3, #16
 800f466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f46a:	e0c8      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4a5e      	ldr	r2, [pc, #376]	; (800f5ec <UART_SetConfig+0x2ec>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d125      	bne.n	800f4c2 <UART_SetConfig+0x1c2>
 800f476:	4b5b      	ldr	r3, [pc, #364]	; (800f5e4 <UART_SetConfig+0x2e4>)
 800f478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f47c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f480:	2b30      	cmp	r3, #48	; 0x30
 800f482:	d016      	beq.n	800f4b2 <UART_SetConfig+0x1b2>
 800f484:	2b30      	cmp	r3, #48	; 0x30
 800f486:	d818      	bhi.n	800f4ba <UART_SetConfig+0x1ba>
 800f488:	2b20      	cmp	r3, #32
 800f48a:	d00a      	beq.n	800f4a2 <UART_SetConfig+0x1a2>
 800f48c:	2b20      	cmp	r3, #32
 800f48e:	d814      	bhi.n	800f4ba <UART_SetConfig+0x1ba>
 800f490:	2b00      	cmp	r3, #0
 800f492:	d002      	beq.n	800f49a <UART_SetConfig+0x19a>
 800f494:	2b10      	cmp	r3, #16
 800f496:	d008      	beq.n	800f4aa <UART_SetConfig+0x1aa>
 800f498:	e00f      	b.n	800f4ba <UART_SetConfig+0x1ba>
 800f49a:	2300      	movs	r3, #0
 800f49c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4a0:	e0ad      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f4a2:	2302      	movs	r3, #2
 800f4a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4a8:	e0a9      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f4aa:	2304      	movs	r3, #4
 800f4ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4b0:	e0a5      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f4b2:	2308      	movs	r3, #8
 800f4b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4b8:	e0a1      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f4ba:	2310      	movs	r3, #16
 800f4bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4c0:	e09d      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	4a4a      	ldr	r2, [pc, #296]	; (800f5f0 <UART_SetConfig+0x2f0>)
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d125      	bne.n	800f518 <UART_SetConfig+0x218>
 800f4cc:	4b45      	ldr	r3, [pc, #276]	; (800f5e4 <UART_SetConfig+0x2e4>)
 800f4ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f4d6:	2bc0      	cmp	r3, #192	; 0xc0
 800f4d8:	d016      	beq.n	800f508 <UART_SetConfig+0x208>
 800f4da:	2bc0      	cmp	r3, #192	; 0xc0
 800f4dc:	d818      	bhi.n	800f510 <UART_SetConfig+0x210>
 800f4de:	2b80      	cmp	r3, #128	; 0x80
 800f4e0:	d00a      	beq.n	800f4f8 <UART_SetConfig+0x1f8>
 800f4e2:	2b80      	cmp	r3, #128	; 0x80
 800f4e4:	d814      	bhi.n	800f510 <UART_SetConfig+0x210>
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d002      	beq.n	800f4f0 <UART_SetConfig+0x1f0>
 800f4ea:	2b40      	cmp	r3, #64	; 0x40
 800f4ec:	d008      	beq.n	800f500 <UART_SetConfig+0x200>
 800f4ee:	e00f      	b.n	800f510 <UART_SetConfig+0x210>
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4f6:	e082      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f4f8:	2302      	movs	r3, #2
 800f4fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4fe:	e07e      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f500:	2304      	movs	r3, #4
 800f502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f506:	e07a      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f508:	2308      	movs	r3, #8
 800f50a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f50e:	e076      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f510:	2310      	movs	r3, #16
 800f512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f516:	e072      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	4a35      	ldr	r2, [pc, #212]	; (800f5f4 <UART_SetConfig+0x2f4>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d12a      	bne.n	800f578 <UART_SetConfig+0x278>
 800f522:	4b30      	ldr	r3, [pc, #192]	; (800f5e4 <UART_SetConfig+0x2e4>)
 800f524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f52c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f530:	d01a      	beq.n	800f568 <UART_SetConfig+0x268>
 800f532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f536:	d81b      	bhi.n	800f570 <UART_SetConfig+0x270>
 800f538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f53c:	d00c      	beq.n	800f558 <UART_SetConfig+0x258>
 800f53e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f542:	d815      	bhi.n	800f570 <UART_SetConfig+0x270>
 800f544:	2b00      	cmp	r3, #0
 800f546:	d003      	beq.n	800f550 <UART_SetConfig+0x250>
 800f548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f54c:	d008      	beq.n	800f560 <UART_SetConfig+0x260>
 800f54e:	e00f      	b.n	800f570 <UART_SetConfig+0x270>
 800f550:	2300      	movs	r3, #0
 800f552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f556:	e052      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f558:	2302      	movs	r3, #2
 800f55a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f55e:	e04e      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f560:	2304      	movs	r3, #4
 800f562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f566:	e04a      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f568:	2308      	movs	r3, #8
 800f56a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f56e:	e046      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f570:	2310      	movs	r3, #16
 800f572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f576:	e042      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	4a17      	ldr	r2, [pc, #92]	; (800f5dc <UART_SetConfig+0x2dc>)
 800f57e:	4293      	cmp	r3, r2
 800f580:	d13a      	bne.n	800f5f8 <UART_SetConfig+0x2f8>
 800f582:	4b18      	ldr	r3, [pc, #96]	; (800f5e4 <UART_SetConfig+0x2e4>)
 800f584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f588:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f58c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f590:	d01a      	beq.n	800f5c8 <UART_SetConfig+0x2c8>
 800f592:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f596:	d81b      	bhi.n	800f5d0 <UART_SetConfig+0x2d0>
 800f598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f59c:	d00c      	beq.n	800f5b8 <UART_SetConfig+0x2b8>
 800f59e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f5a2:	d815      	bhi.n	800f5d0 <UART_SetConfig+0x2d0>
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d003      	beq.n	800f5b0 <UART_SetConfig+0x2b0>
 800f5a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5ac:	d008      	beq.n	800f5c0 <UART_SetConfig+0x2c0>
 800f5ae:	e00f      	b.n	800f5d0 <UART_SetConfig+0x2d0>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5b6:	e022      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f5b8:	2302      	movs	r3, #2
 800f5ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5be:	e01e      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f5c0:	2304      	movs	r3, #4
 800f5c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5c6:	e01a      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f5c8:	2308      	movs	r3, #8
 800f5ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5ce:	e016      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f5d0:	2310      	movs	r3, #16
 800f5d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5d6:	e012      	b.n	800f5fe <UART_SetConfig+0x2fe>
 800f5d8:	cfff69f3 	.word	0xcfff69f3
 800f5dc:	40008000 	.word	0x40008000
 800f5e0:	40013800 	.word	0x40013800
 800f5e4:	40021000 	.word	0x40021000
 800f5e8:	40004400 	.word	0x40004400
 800f5ec:	40004800 	.word	0x40004800
 800f5f0:	40004c00 	.word	0x40004c00
 800f5f4:	40005000 	.word	0x40005000
 800f5f8:	2310      	movs	r3, #16
 800f5fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	4aae      	ldr	r2, [pc, #696]	; (800f8bc <UART_SetConfig+0x5bc>)
 800f604:	4293      	cmp	r3, r2
 800f606:	f040 8097 	bne.w	800f738 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f60a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f60e:	2b08      	cmp	r3, #8
 800f610:	d823      	bhi.n	800f65a <UART_SetConfig+0x35a>
 800f612:	a201      	add	r2, pc, #4	; (adr r2, 800f618 <UART_SetConfig+0x318>)
 800f614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f618:	0800f63d 	.word	0x0800f63d
 800f61c:	0800f65b 	.word	0x0800f65b
 800f620:	0800f645 	.word	0x0800f645
 800f624:	0800f65b 	.word	0x0800f65b
 800f628:	0800f64b 	.word	0x0800f64b
 800f62c:	0800f65b 	.word	0x0800f65b
 800f630:	0800f65b 	.word	0x0800f65b
 800f634:	0800f65b 	.word	0x0800f65b
 800f638:	0800f653 	.word	0x0800f653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f63c:	f7fe fdf0 	bl	800e220 <HAL_RCC_GetPCLK1Freq>
 800f640:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f642:	e010      	b.n	800f666 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f644:	4b9e      	ldr	r3, [pc, #632]	; (800f8c0 <UART_SetConfig+0x5c0>)
 800f646:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f648:	e00d      	b.n	800f666 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f64a:	f7fe fd7b 	bl	800e144 <HAL_RCC_GetSysClockFreq>
 800f64e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f650:	e009      	b.n	800f666 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f656:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f658:	e005      	b.n	800f666 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800f65a:	2300      	movs	r3, #0
 800f65c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f65e:	2301      	movs	r3, #1
 800f660:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f664:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f668:	2b00      	cmp	r3, #0
 800f66a:	f000 8130 	beq.w	800f8ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f672:	4a94      	ldr	r2, [pc, #592]	; (800f8c4 <UART_SetConfig+0x5c4>)
 800f674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f678:	461a      	mov	r2, r3
 800f67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f67c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f680:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	685a      	ldr	r2, [r3, #4]
 800f686:	4613      	mov	r3, r2
 800f688:	005b      	lsls	r3, r3, #1
 800f68a:	4413      	add	r3, r2
 800f68c:	69ba      	ldr	r2, [r7, #24]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d305      	bcc.n	800f69e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	685b      	ldr	r3, [r3, #4]
 800f696:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f698:	69ba      	ldr	r2, [r7, #24]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d903      	bls.n	800f6a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f6a4:	e113      	b.n	800f8ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	60bb      	str	r3, [r7, #8]
 800f6ac:	60fa      	str	r2, [r7, #12]
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b2:	4a84      	ldr	r2, [pc, #528]	; (800f8c4 <UART_SetConfig+0x5c4>)
 800f6b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	603b      	str	r3, [r7, #0]
 800f6be:	607a      	str	r2, [r7, #4]
 800f6c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f6c8:	f7f8 fee6 	bl	8008498 <__aeabi_uldivmod>
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	460b      	mov	r3, r1
 800f6d0:	4610      	mov	r0, r2
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	f04f 0200 	mov.w	r2, #0
 800f6d8:	f04f 0300 	mov.w	r3, #0
 800f6dc:	020b      	lsls	r3, r1, #8
 800f6de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f6e2:	0202      	lsls	r2, r0, #8
 800f6e4:	6979      	ldr	r1, [r7, #20]
 800f6e6:	6849      	ldr	r1, [r1, #4]
 800f6e8:	0849      	lsrs	r1, r1, #1
 800f6ea:	2000      	movs	r0, #0
 800f6ec:	460c      	mov	r4, r1
 800f6ee:	4605      	mov	r5, r0
 800f6f0:	eb12 0804 	adds.w	r8, r2, r4
 800f6f4:	eb43 0905 	adc.w	r9, r3, r5
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	685b      	ldr	r3, [r3, #4]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	469a      	mov	sl, r3
 800f700:	4693      	mov	fp, r2
 800f702:	4652      	mov	r2, sl
 800f704:	465b      	mov	r3, fp
 800f706:	4640      	mov	r0, r8
 800f708:	4649      	mov	r1, r9
 800f70a:	f7f8 fec5 	bl	8008498 <__aeabi_uldivmod>
 800f70e:	4602      	mov	r2, r0
 800f710:	460b      	mov	r3, r1
 800f712:	4613      	mov	r3, r2
 800f714:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f716:	6a3b      	ldr	r3, [r7, #32]
 800f718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f71c:	d308      	bcc.n	800f730 <UART_SetConfig+0x430>
 800f71e:	6a3b      	ldr	r3, [r7, #32]
 800f720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f724:	d204      	bcs.n	800f730 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	6a3a      	ldr	r2, [r7, #32]
 800f72c:	60da      	str	r2, [r3, #12]
 800f72e:	e0ce      	b.n	800f8ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800f730:	2301      	movs	r3, #1
 800f732:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f736:	e0ca      	b.n	800f8ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	69db      	ldr	r3, [r3, #28]
 800f73c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f740:	d166      	bne.n	800f810 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800f742:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f746:	2b08      	cmp	r3, #8
 800f748:	d827      	bhi.n	800f79a <UART_SetConfig+0x49a>
 800f74a:	a201      	add	r2, pc, #4	; (adr r2, 800f750 <UART_SetConfig+0x450>)
 800f74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f750:	0800f775 	.word	0x0800f775
 800f754:	0800f77d 	.word	0x0800f77d
 800f758:	0800f785 	.word	0x0800f785
 800f75c:	0800f79b 	.word	0x0800f79b
 800f760:	0800f78b 	.word	0x0800f78b
 800f764:	0800f79b 	.word	0x0800f79b
 800f768:	0800f79b 	.word	0x0800f79b
 800f76c:	0800f79b 	.word	0x0800f79b
 800f770:	0800f793 	.word	0x0800f793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f774:	f7fe fd54 	bl	800e220 <HAL_RCC_GetPCLK1Freq>
 800f778:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f77a:	e014      	b.n	800f7a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f77c:	f7fe fd66 	bl	800e24c <HAL_RCC_GetPCLK2Freq>
 800f780:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f782:	e010      	b.n	800f7a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f784:	4b4e      	ldr	r3, [pc, #312]	; (800f8c0 <UART_SetConfig+0x5c0>)
 800f786:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f788:	e00d      	b.n	800f7a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f78a:	f7fe fcdb 	bl	800e144 <HAL_RCC_GetSysClockFreq>
 800f78e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f790:	e009      	b.n	800f7a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f796:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f798:	e005      	b.n	800f7a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800f79a:	2300      	movs	r3, #0
 800f79c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f79e:	2301      	movs	r3, #1
 800f7a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f7a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	f000 8090 	beq.w	800f8ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b2:	4a44      	ldr	r2, [pc, #272]	; (800f8c4 <UART_SetConfig+0x5c4>)
 800f7b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7b8:	461a      	mov	r2, r3
 800f7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7c0:	005a      	lsls	r2, r3, #1
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	085b      	lsrs	r3, r3, #1
 800f7c8:	441a      	add	r2, r3
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f7d4:	6a3b      	ldr	r3, [r7, #32]
 800f7d6:	2b0f      	cmp	r3, #15
 800f7d8:	d916      	bls.n	800f808 <UART_SetConfig+0x508>
 800f7da:	6a3b      	ldr	r3, [r7, #32]
 800f7dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7e0:	d212      	bcs.n	800f808 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f7e2:	6a3b      	ldr	r3, [r7, #32]
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	f023 030f 	bic.w	r3, r3, #15
 800f7ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f7ec:	6a3b      	ldr	r3, [r7, #32]
 800f7ee:	085b      	lsrs	r3, r3, #1
 800f7f0:	b29b      	uxth	r3, r3
 800f7f2:	f003 0307 	and.w	r3, r3, #7
 800f7f6:	b29a      	uxth	r2, r3
 800f7f8:	8bfb      	ldrh	r3, [r7, #30]
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	8bfa      	ldrh	r2, [r7, #30]
 800f804:	60da      	str	r2, [r3, #12]
 800f806:	e062      	b.n	800f8ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800f808:	2301      	movs	r3, #1
 800f80a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f80e:	e05e      	b.n	800f8ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f810:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f814:	2b08      	cmp	r3, #8
 800f816:	d828      	bhi.n	800f86a <UART_SetConfig+0x56a>
 800f818:	a201      	add	r2, pc, #4	; (adr r2, 800f820 <UART_SetConfig+0x520>)
 800f81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f81e:	bf00      	nop
 800f820:	0800f845 	.word	0x0800f845
 800f824:	0800f84d 	.word	0x0800f84d
 800f828:	0800f855 	.word	0x0800f855
 800f82c:	0800f86b 	.word	0x0800f86b
 800f830:	0800f85b 	.word	0x0800f85b
 800f834:	0800f86b 	.word	0x0800f86b
 800f838:	0800f86b 	.word	0x0800f86b
 800f83c:	0800f86b 	.word	0x0800f86b
 800f840:	0800f863 	.word	0x0800f863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f844:	f7fe fcec 	bl	800e220 <HAL_RCC_GetPCLK1Freq>
 800f848:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f84a:	e014      	b.n	800f876 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f84c:	f7fe fcfe 	bl	800e24c <HAL_RCC_GetPCLK2Freq>
 800f850:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f852:	e010      	b.n	800f876 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f854:	4b1a      	ldr	r3, [pc, #104]	; (800f8c0 <UART_SetConfig+0x5c0>)
 800f856:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f858:	e00d      	b.n	800f876 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f85a:	f7fe fc73 	bl	800e144 <HAL_RCC_GetSysClockFreq>
 800f85e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f860:	e009      	b.n	800f876 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f866:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f868:	e005      	b.n	800f876 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800f86a:	2300      	movs	r3, #0
 800f86c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f86e:	2301      	movs	r3, #1
 800f870:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f874:	bf00      	nop
    }

    if (pclk != 0U)
 800f876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d028      	beq.n	800f8ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f880:	4a10      	ldr	r2, [pc, #64]	; (800f8c4 <UART_SetConfig+0x5c4>)
 800f882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f886:	461a      	mov	r2, r3
 800f888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	085b      	lsrs	r3, r3, #1
 800f894:	441a      	add	r2, r3
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f89e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8a0:	6a3b      	ldr	r3, [r7, #32]
 800f8a2:	2b0f      	cmp	r3, #15
 800f8a4:	d910      	bls.n	800f8c8 <UART_SetConfig+0x5c8>
 800f8a6:	6a3b      	ldr	r3, [r7, #32]
 800f8a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8ac:	d20c      	bcs.n	800f8c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f8ae:	6a3b      	ldr	r3, [r7, #32]
 800f8b0:	b29a      	uxth	r2, r3
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	60da      	str	r2, [r3, #12]
 800f8b8:	e009      	b.n	800f8ce <UART_SetConfig+0x5ce>
 800f8ba:	bf00      	nop
 800f8bc:	40008000 	.word	0x40008000
 800f8c0:	00f42400 	.word	0x00f42400
 800f8c4:	08018e1c 	.word	0x08018e1c
      }
      else
      {
        ret = HAL_ERROR;
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	2201      	movs	r2, #1
 800f8da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f8ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3730      	adds	r7, #48	; 0x30
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f8f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b083      	sub	sp, #12
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f904:	f003 0308 	and.w	r3, r3, #8
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d00a      	beq.n	800f922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	685b      	ldr	r3, [r3, #4]
 800f912:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	430a      	orrs	r2, r1
 800f920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f926:	f003 0301 	and.w	r3, r3, #1
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d00a      	beq.n	800f944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	430a      	orrs	r2, r1
 800f942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f948:	f003 0302 	and.w	r3, r3, #2
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d00a      	beq.n	800f966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	430a      	orrs	r2, r1
 800f964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f96a:	f003 0304 	and.w	r3, r3, #4
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d00a      	beq.n	800f988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	430a      	orrs	r2, r1
 800f986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f98c:	f003 0310 	and.w	r3, r3, #16
 800f990:	2b00      	cmp	r3, #0
 800f992:	d00a      	beq.n	800f9aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	689b      	ldr	r3, [r3, #8]
 800f99a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	430a      	orrs	r2, r1
 800f9a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ae:	f003 0320 	and.w	r3, r3, #32
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d00a      	beq.n	800f9cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	689b      	ldr	r3, [r3, #8]
 800f9bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	430a      	orrs	r2, r1
 800f9ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d01a      	beq.n	800fa0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	430a      	orrs	r2, r1
 800f9ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f9f6:	d10a      	bne.n	800fa0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	430a      	orrs	r2, r1
 800fa0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d00a      	beq.n	800fa30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	430a      	orrs	r2, r1
 800fa2e:	605a      	str	r2, [r3, #4]
  }
}
 800fa30:	bf00      	nop
 800fa32:	370c      	adds	r7, #12
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr

0800fa3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b098      	sub	sp, #96	; 0x60
 800fa40:	af02      	add	r7, sp, #8
 800fa42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2200      	movs	r2, #0
 800fa48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fa4c:	f7fb fa3e 	bl	800aecc <HAL_GetTick>
 800fa50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f003 0308 	and.w	r3, r3, #8
 800fa5c:	2b08      	cmp	r3, #8
 800fa5e:	d12f      	bne.n	800fac0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fa64:	9300      	str	r3, [sp, #0]
 800fa66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa68:	2200      	movs	r2, #0
 800fa6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f000 f88e 	bl	800fb90 <UART_WaitOnFlagUntilTimeout>
 800fa74:	4603      	mov	r3, r0
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d022      	beq.n	800fac0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa82:	e853 3f00 	ldrex	r3, [r3]
 800fa86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fa88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa8e:	653b      	str	r3, [r7, #80]	; 0x50
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	461a      	mov	r2, r3
 800fa96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa98:	647b      	str	r3, [r7, #68]	; 0x44
 800fa9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800faa0:	e841 2300 	strex	r3, r2, [r1]
 800faa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800faa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d1e6      	bne.n	800fa7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2220      	movs	r2, #32
 800fab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2200      	movs	r2, #0
 800fab8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fabc:	2303      	movs	r3, #3
 800fabe:	e063      	b.n	800fb88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f003 0304 	and.w	r3, r3, #4
 800faca:	2b04      	cmp	r3, #4
 800facc:	d149      	bne.n	800fb62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800face:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fad2:	9300      	str	r3, [sp, #0]
 800fad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fad6:	2200      	movs	r2, #0
 800fad8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 f857 	bl	800fb90 <UART_WaitOnFlagUntilTimeout>
 800fae2:	4603      	mov	r3, r0
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d03c      	beq.n	800fb62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf0:	e853 3f00 	ldrex	r3, [r3]
 800faf4:	623b      	str	r3, [r7, #32]
   return(result);
 800faf6:	6a3b      	ldr	r3, [r7, #32]
 800faf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fafc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	461a      	mov	r2, r3
 800fb04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb06:	633b      	str	r3, [r7, #48]	; 0x30
 800fb08:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb0e:	e841 2300 	strex	r3, r2, [r1]
 800fb12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d1e6      	bne.n	800fae8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	3308      	adds	r3, #8
 800fb20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	e853 3f00 	ldrex	r3, [r3]
 800fb28:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	f023 0301 	bic.w	r3, r3, #1
 800fb30:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	3308      	adds	r3, #8
 800fb38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb3a:	61fa      	str	r2, [r7, #28]
 800fb3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb3e:	69b9      	ldr	r1, [r7, #24]
 800fb40:	69fa      	ldr	r2, [r7, #28]
 800fb42:	e841 2300 	strex	r3, r2, [r1]
 800fb46:	617b      	str	r3, [r7, #20]
   return(result);
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d1e5      	bne.n	800fb1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2220      	movs	r2, #32
 800fb52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb5e:	2303      	movs	r3, #3
 800fb60:	e012      	b.n	800fb88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2220      	movs	r2, #32
 800fb66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2220      	movs	r2, #32
 800fb6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2200      	movs	r2, #0
 800fb76:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2200      	movs	r2, #0
 800fb82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fb86:	2300      	movs	r3, #0
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3758      	adds	r7, #88	; 0x58
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	603b      	str	r3, [r7, #0]
 800fb9c:	4613      	mov	r3, r2
 800fb9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fba0:	e04f      	b.n	800fc42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fba2:	69bb      	ldr	r3, [r7, #24]
 800fba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fba8:	d04b      	beq.n	800fc42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fbaa:	f7fb f98f 	bl	800aecc <HAL_GetTick>
 800fbae:	4602      	mov	r2, r0
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	1ad3      	subs	r3, r2, r3
 800fbb4:	69ba      	ldr	r2, [r7, #24]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d302      	bcc.n	800fbc0 <UART_WaitOnFlagUntilTimeout+0x30>
 800fbba:	69bb      	ldr	r3, [r7, #24]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d101      	bne.n	800fbc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fbc0:	2303      	movs	r3, #3
 800fbc2:	e04e      	b.n	800fc62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f003 0304 	and.w	r3, r3, #4
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d037      	beq.n	800fc42 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	2b80      	cmp	r3, #128	; 0x80
 800fbd6:	d034      	beq.n	800fc42 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	2b40      	cmp	r3, #64	; 0x40
 800fbdc:	d031      	beq.n	800fc42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	69db      	ldr	r3, [r3, #28]
 800fbe4:	f003 0308 	and.w	r3, r3, #8
 800fbe8:	2b08      	cmp	r3, #8
 800fbea:	d110      	bne.n	800fc0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2208      	movs	r2, #8
 800fbf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fbf4:	68f8      	ldr	r0, [r7, #12]
 800fbf6:	f000 f95b 	bl	800feb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	2208      	movs	r2, #8
 800fbfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2200      	movs	r2, #0
 800fc06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	e029      	b.n	800fc62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	69db      	ldr	r3, [r3, #28]
 800fc14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fc18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fc1c:	d111      	bne.n	800fc42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fc26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc28:	68f8      	ldr	r0, [r7, #12]
 800fc2a:	f000 f941 	bl	800feb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2220      	movs	r2, #32
 800fc32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fc3e:	2303      	movs	r3, #3
 800fc40:	e00f      	b.n	800fc62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	69da      	ldr	r2, [r3, #28]
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	4013      	ands	r3, r2
 800fc4c:	68ba      	ldr	r2, [r7, #8]
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	bf0c      	ite	eq
 800fc52:	2301      	moveq	r3, #1
 800fc54:	2300      	movne	r3, #0
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	461a      	mov	r2, r3
 800fc5a:	79fb      	ldrb	r3, [r7, #7]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d0a0      	beq.n	800fba2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fc60:	2300      	movs	r3, #0
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3710      	adds	r7, #16
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
	...

0800fc6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b0a3      	sub	sp, #140	; 0x8c
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	60f8      	str	r0, [r7, #12]
 800fc74:	60b9      	str	r1, [r7, #8]
 800fc76:	4613      	mov	r3, r2
 800fc78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	68ba      	ldr	r2, [r7, #8]
 800fc7e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	88fa      	ldrh	r2, [r7, #6]
 800fc84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	88fa      	ldrh	r2, [r7, #6]
 800fc8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2200      	movs	r2, #0
 800fc94:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	689b      	ldr	r3, [r3, #8]
 800fc9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc9e:	d10e      	bne.n	800fcbe <UART_Start_Receive_IT+0x52>
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	691b      	ldr	r3, [r3, #16]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d105      	bne.n	800fcb4 <UART_Start_Receive_IT+0x48>
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fcae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcb2:	e02d      	b.n	800fd10 <UART_Start_Receive_IT+0xa4>
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	22ff      	movs	r2, #255	; 0xff
 800fcb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcbc:	e028      	b.n	800fd10 <UART_Start_Receive_IT+0xa4>
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	689b      	ldr	r3, [r3, #8]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d10d      	bne.n	800fce2 <UART_Start_Receive_IT+0x76>
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	691b      	ldr	r3, [r3, #16]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d104      	bne.n	800fcd8 <UART_Start_Receive_IT+0x6c>
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	22ff      	movs	r2, #255	; 0xff
 800fcd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcd6:	e01b      	b.n	800fd10 <UART_Start_Receive_IT+0xa4>
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	227f      	movs	r2, #127	; 0x7f
 800fcdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fce0:	e016      	b.n	800fd10 <UART_Start_Receive_IT+0xa4>
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	689b      	ldr	r3, [r3, #8]
 800fce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fcea:	d10d      	bne.n	800fd08 <UART_Start_Receive_IT+0x9c>
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	691b      	ldr	r3, [r3, #16]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d104      	bne.n	800fcfe <UART_Start_Receive_IT+0x92>
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	227f      	movs	r2, #127	; 0x7f
 800fcf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcfc:	e008      	b.n	800fd10 <UART_Start_Receive_IT+0xa4>
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	223f      	movs	r2, #63	; 0x3f
 800fd02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd06:	e003      	b.n	800fd10 <UART_Start_Receive_IT+0xa4>
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2200      	movs	r2, #0
 800fd14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2222      	movs	r2, #34	; 0x22
 800fd1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	3308      	adds	r3, #8
 800fd26:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd2a:	e853 3f00 	ldrex	r3, [r3]
 800fd2e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fd30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd32:	f043 0301 	orr.w	r3, r3, #1
 800fd36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	3308      	adds	r3, #8
 800fd40:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fd44:	673a      	str	r2, [r7, #112]	; 0x70
 800fd46:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd48:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fd4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fd4c:	e841 2300 	strex	r3, r2, [r1]
 800fd50:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fd52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d1e3      	bne.n	800fd20 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fd60:	d14f      	bne.n	800fe02 <UART_Start_Receive_IT+0x196>
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fd68:	88fa      	ldrh	r2, [r7, #6]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d349      	bcc.n	800fe02 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	689b      	ldr	r3, [r3, #8]
 800fd72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd76:	d107      	bne.n	800fd88 <UART_Start_Receive_IT+0x11c>
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	691b      	ldr	r3, [r3, #16]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d103      	bne.n	800fd88 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	4a47      	ldr	r2, [pc, #284]	; (800fea0 <UART_Start_Receive_IT+0x234>)
 800fd84:	675a      	str	r2, [r3, #116]	; 0x74
 800fd86:	e002      	b.n	800fd8e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	4a46      	ldr	r2, [pc, #280]	; (800fea4 <UART_Start_Receive_IT+0x238>)
 800fd8c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	691b      	ldr	r3, [r3, #16]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d01a      	beq.n	800fdcc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd9e:	e853 3f00 	ldrex	r3, [r3]
 800fda2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fda4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fda6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fdaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fdb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fdba:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdbc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fdbe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fdc0:	e841 2300 	strex	r3, r2, [r1]
 800fdc4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fdc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d1e4      	bne.n	800fd96 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	3308      	adds	r3, #8
 800fdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdd6:	e853 3f00 	ldrex	r3, [r3]
 800fdda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fde2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	3308      	adds	r3, #8
 800fdea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fdec:	64ba      	str	r2, [r7, #72]	; 0x48
 800fdee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdf0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fdf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdf4:	e841 2300 	strex	r3, r2, [r1]
 800fdf8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fdfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d1e5      	bne.n	800fdcc <UART_Start_Receive_IT+0x160>
 800fe00:	e046      	b.n	800fe90 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	689b      	ldr	r3, [r3, #8]
 800fe06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe0a:	d107      	bne.n	800fe1c <UART_Start_Receive_IT+0x1b0>
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	691b      	ldr	r3, [r3, #16]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d103      	bne.n	800fe1c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	4a24      	ldr	r2, [pc, #144]	; (800fea8 <UART_Start_Receive_IT+0x23c>)
 800fe18:	675a      	str	r2, [r3, #116]	; 0x74
 800fe1a:	e002      	b.n	800fe22 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	4a23      	ldr	r2, [pc, #140]	; (800feac <UART_Start_Receive_IT+0x240>)
 800fe20:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	691b      	ldr	r3, [r3, #16]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d019      	beq.n	800fe5e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe32:	e853 3f00 	ldrex	r3, [r3]
 800fe36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fe3e:	677b      	str	r3, [r7, #116]	; 0x74
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	461a      	mov	r2, r3
 800fe46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe48:	637b      	str	r3, [r7, #52]	; 0x34
 800fe4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe50:	e841 2300 	strex	r3, r2, [r1]
 800fe54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fe56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d1e6      	bne.n	800fe2a <UART_Start_Receive_IT+0x1be>
 800fe5c:	e018      	b.n	800fe90 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	e853 3f00 	ldrex	r3, [r3]
 800fe6a:	613b      	str	r3, [r7, #16]
   return(result);
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	f043 0320 	orr.w	r3, r3, #32
 800fe72:	67bb      	str	r3, [r7, #120]	; 0x78
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	461a      	mov	r2, r3
 800fe7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe7c:	623b      	str	r3, [r7, #32]
 800fe7e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe80:	69f9      	ldr	r1, [r7, #28]
 800fe82:	6a3a      	ldr	r2, [r7, #32]
 800fe84:	e841 2300 	strex	r3, r2, [r1]
 800fe88:	61bb      	str	r3, [r7, #24]
   return(result);
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d1e6      	bne.n	800fe5e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fe90:	2300      	movs	r3, #0
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	378c      	adds	r7, #140	; 0x8c
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr
 800fe9e:	bf00      	nop
 800fea0:	080106d1 	.word	0x080106d1
 800fea4:	08010371 	.word	0x08010371
 800fea8:	080101b9 	.word	0x080101b9
 800feac:	08010001 	.word	0x08010001

0800feb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b095      	sub	sp, #84	; 0x54
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800febe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fec0:	e853 3f00 	ldrex	r3, [r3]
 800fec4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fecc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	461a      	mov	r2, r3
 800fed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fed6:	643b      	str	r3, [r7, #64]	; 0x40
 800fed8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fedc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fede:	e841 2300 	strex	r3, r2, [r1]
 800fee2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d1e6      	bne.n	800feb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	3308      	adds	r3, #8
 800fef0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef2:	6a3b      	ldr	r3, [r7, #32]
 800fef4:	e853 3f00 	ldrex	r3, [r3]
 800fef8:	61fb      	str	r3, [r7, #28]
   return(result);
 800fefa:	69fb      	ldr	r3, [r7, #28]
 800fefc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ff00:	f023 0301 	bic.w	r3, r3, #1
 800ff04:	64bb      	str	r3, [r7, #72]	; 0x48
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	3308      	adds	r3, #8
 800ff0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ff10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ff14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff16:	e841 2300 	strex	r3, r2, [r1]
 800ff1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ff1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d1e3      	bne.n	800feea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff26:	2b01      	cmp	r3, #1
 800ff28:	d118      	bne.n	800ff5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	e853 3f00 	ldrex	r3, [r3]
 800ff36:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	f023 0310 	bic.w	r3, r3, #16
 800ff3e:	647b      	str	r3, [r7, #68]	; 0x44
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	461a      	mov	r2, r3
 800ff46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff48:	61bb      	str	r3, [r7, #24]
 800ff4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff4c:	6979      	ldr	r1, [r7, #20]
 800ff4e:	69ba      	ldr	r2, [r7, #24]
 800ff50:	e841 2300 	strex	r3, r2, [r1]
 800ff54:	613b      	str	r3, [r7, #16]
   return(result);
 800ff56:	693b      	ldr	r3, [r7, #16]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d1e6      	bne.n	800ff2a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2220      	movs	r2, #32
 800ff60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2200      	movs	r2, #0
 800ff68:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ff70:	bf00      	nop
 800ff72:	3754      	adds	r7, #84	; 0x54
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr

0800ff7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	2200      	movs	r2, #0
 800ff96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ff9a:	68f8      	ldr	r0, [r7, #12]
 800ff9c:	f7fa fc82 	bl	800a8a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ffa0:	bf00      	nop
 800ffa2:	3710      	adds	r7, #16
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b088      	sub	sp, #32
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	e853 3f00 	ldrex	r3, [r3]
 800ffbc:	60bb      	str	r3, [r7, #8]
   return(result);
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ffc4:	61fb      	str	r3, [r7, #28]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	461a      	mov	r2, r3
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	61bb      	str	r3, [r7, #24]
 800ffd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffd2:	6979      	ldr	r1, [r7, #20]
 800ffd4:	69ba      	ldr	r2, [r7, #24]
 800ffd6:	e841 2300 	strex	r3, r2, [r1]
 800ffda:	613b      	str	r3, [r7, #16]
   return(result);
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d1e6      	bne.n	800ffb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2220      	movs	r2, #32
 800ffe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2200      	movs	r2, #0
 800ffee:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f7ff f96f 	bl	800f2d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fff6:	bf00      	nop
 800fff8:	3720      	adds	r7, #32
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
	...

08010000 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b09c      	sub	sp, #112	; 0x70
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801000e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010018:	2b22      	cmp	r3, #34	; 0x22
 801001a:	f040 80be 	bne.w	801019a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010024:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010028:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801002c:	b2d9      	uxtb	r1, r3
 801002e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010032:	b2da      	uxtb	r2, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010038:	400a      	ands	r2, r1
 801003a:	b2d2      	uxtb	r2, r2
 801003c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010042:	1c5a      	adds	r2, r3, #1
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801004e:	b29b      	uxth	r3, r3
 8010050:	3b01      	subs	r3, #1
 8010052:	b29a      	uxth	r2, r3
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010060:	b29b      	uxth	r3, r3
 8010062:	2b00      	cmp	r3, #0
 8010064:	f040 80a1 	bne.w	80101aa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801006e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010070:	e853 3f00 	ldrex	r3, [r3]
 8010074:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010078:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801007c:	66bb      	str	r3, [r7, #104]	; 0x68
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	461a      	mov	r2, r3
 8010084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010086:	65bb      	str	r3, [r7, #88]	; 0x58
 8010088:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801008a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801008c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801008e:	e841 2300 	strex	r3, r2, [r1]
 8010092:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010096:	2b00      	cmp	r3, #0
 8010098:	d1e6      	bne.n	8010068 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	3308      	adds	r3, #8
 80100a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a4:	e853 3f00 	ldrex	r3, [r3]
 80100a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80100aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ac:	f023 0301 	bic.w	r3, r3, #1
 80100b0:	667b      	str	r3, [r7, #100]	; 0x64
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	3308      	adds	r3, #8
 80100b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80100ba:	647a      	str	r2, [r7, #68]	; 0x44
 80100bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80100c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100c2:	e841 2300 	strex	r3, r2, [r1]
 80100c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80100c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d1e5      	bne.n	801009a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2220      	movs	r2, #32
 80100d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2200      	movs	r2, #0
 80100da:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	4a33      	ldr	r2, [pc, #204]	; (80101b4 <UART_RxISR_8BIT+0x1b4>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d01f      	beq.n	801012c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	685b      	ldr	r3, [r3, #4]
 80100f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d018      	beq.n	801012c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010102:	e853 3f00 	ldrex	r3, [r3]
 8010106:	623b      	str	r3, [r7, #32]
   return(result);
 8010108:	6a3b      	ldr	r3, [r7, #32]
 801010a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801010e:	663b      	str	r3, [r7, #96]	; 0x60
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	461a      	mov	r2, r3
 8010116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010118:	633b      	str	r3, [r7, #48]	; 0x30
 801011a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801011c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801011e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010120:	e841 2300 	strex	r3, r2, [r1]
 8010124:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010128:	2b00      	cmp	r3, #0
 801012a:	d1e6      	bne.n	80100fa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010130:	2b01      	cmp	r3, #1
 8010132:	d12e      	bne.n	8010192 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2200      	movs	r2, #0
 8010138:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	e853 3f00 	ldrex	r3, [r3]
 8010146:	60fb      	str	r3, [r7, #12]
   return(result);
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	f023 0310 	bic.w	r3, r3, #16
 801014e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	461a      	mov	r2, r3
 8010156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010158:	61fb      	str	r3, [r7, #28]
 801015a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801015c:	69b9      	ldr	r1, [r7, #24]
 801015e:	69fa      	ldr	r2, [r7, #28]
 8010160:	e841 2300 	strex	r3, r2, [r1]
 8010164:	617b      	str	r3, [r7, #20]
   return(result);
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d1e6      	bne.n	801013a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	69db      	ldr	r3, [r3, #28]
 8010172:	f003 0310 	and.w	r3, r3, #16
 8010176:	2b10      	cmp	r3, #16
 8010178:	d103      	bne.n	8010182 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	2210      	movs	r2, #16
 8010180:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010188:	4619      	mov	r1, r3
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f7ff f8ac 	bl	800f2e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010190:	e00b      	b.n	80101aa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f7fa fb90 	bl	800a8b8 <HAL_UART_RxCpltCallback>
}
 8010198:	e007      	b.n	80101aa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	699a      	ldr	r2, [r3, #24]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	f042 0208 	orr.w	r2, r2, #8
 80101a8:	619a      	str	r2, [r3, #24]
}
 80101aa:	bf00      	nop
 80101ac:	3770      	adds	r7, #112	; 0x70
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	40008000 	.word	0x40008000

080101b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b09c      	sub	sp, #112	; 0x70
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80101d0:	2b22      	cmp	r3, #34	; 0x22
 80101d2:	f040 80be 	bne.w	8010352 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101e4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80101e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80101ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80101ee:	4013      	ands	r3, r2
 80101f0:	b29a      	uxth	r2, r3
 80101f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101fa:	1c9a      	adds	r2, r3, #2
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010206:	b29b      	uxth	r3, r3
 8010208:	3b01      	subs	r3, #1
 801020a:	b29a      	uxth	r2, r3
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010218:	b29b      	uxth	r3, r3
 801021a:	2b00      	cmp	r3, #0
 801021c:	f040 80a1 	bne.w	8010362 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010228:	e853 3f00 	ldrex	r3, [r3]
 801022c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801022e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010230:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010234:	667b      	str	r3, [r7, #100]	; 0x64
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	461a      	mov	r2, r3
 801023c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801023e:	657b      	str	r3, [r7, #84]	; 0x54
 8010240:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010242:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010244:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010246:	e841 2300 	strex	r3, r2, [r1]
 801024a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801024c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801024e:	2b00      	cmp	r3, #0
 8010250:	d1e6      	bne.n	8010220 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	3308      	adds	r3, #8
 8010258:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801025a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801025c:	e853 3f00 	ldrex	r3, [r3]
 8010260:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010264:	f023 0301 	bic.w	r3, r3, #1
 8010268:	663b      	str	r3, [r7, #96]	; 0x60
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	3308      	adds	r3, #8
 8010270:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010272:	643a      	str	r2, [r7, #64]	; 0x40
 8010274:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010276:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010278:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801027a:	e841 2300 	strex	r3, r2, [r1]
 801027e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010282:	2b00      	cmp	r3, #0
 8010284:	d1e5      	bne.n	8010252 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2220      	movs	r2, #32
 801028a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2200      	movs	r2, #0
 8010292:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2200      	movs	r2, #0
 8010298:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	4a33      	ldr	r2, [pc, #204]	; (801036c <UART_RxISR_16BIT+0x1b4>)
 80102a0:	4293      	cmp	r3, r2
 80102a2:	d01f      	beq.n	80102e4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d018      	beq.n	80102e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102b8:	6a3b      	ldr	r3, [r7, #32]
 80102ba:	e853 3f00 	ldrex	r3, [r3]
 80102be:	61fb      	str	r3, [r7, #28]
   return(result);
 80102c0:	69fb      	ldr	r3, [r7, #28]
 80102c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80102c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	461a      	mov	r2, r3
 80102ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102d2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80102d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102d8:	e841 2300 	strex	r3, r2, [r1]
 80102dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80102de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d1e6      	bne.n	80102b2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102e8:	2b01      	cmp	r3, #1
 80102ea:	d12e      	bne.n	801034a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2200      	movs	r2, #0
 80102f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	e853 3f00 	ldrex	r3, [r3]
 80102fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	f023 0310 	bic.w	r3, r3, #16
 8010306:	65bb      	str	r3, [r7, #88]	; 0x58
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	461a      	mov	r2, r3
 801030e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010310:	61bb      	str	r3, [r7, #24]
 8010312:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010314:	6979      	ldr	r1, [r7, #20]
 8010316:	69ba      	ldr	r2, [r7, #24]
 8010318:	e841 2300 	strex	r3, r2, [r1]
 801031c:	613b      	str	r3, [r7, #16]
   return(result);
 801031e:	693b      	ldr	r3, [r7, #16]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d1e6      	bne.n	80102f2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	69db      	ldr	r3, [r3, #28]
 801032a:	f003 0310 	and.w	r3, r3, #16
 801032e:	2b10      	cmp	r3, #16
 8010330:	d103      	bne.n	801033a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	2210      	movs	r2, #16
 8010338:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010340:	4619      	mov	r1, r3
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f7fe ffd0 	bl	800f2e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010348:	e00b      	b.n	8010362 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f7fa fab4 	bl	800a8b8 <HAL_UART_RxCpltCallback>
}
 8010350:	e007      	b.n	8010362 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	699a      	ldr	r2, [r3, #24]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	f042 0208 	orr.w	r2, r2, #8
 8010360:	619a      	str	r2, [r3, #24]
}
 8010362:	bf00      	nop
 8010364:	3770      	adds	r7, #112	; 0x70
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
 801036a:	bf00      	nop
 801036c:	40008000 	.word	0x40008000

08010370 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b0ac      	sub	sp, #176	; 0xb0
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801037e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	69db      	ldr	r3, [r3, #28]
 8010388:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	689b      	ldr	r3, [r3, #8]
 801039c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103a6:	2b22      	cmp	r3, #34	; 0x22
 80103a8:	f040 8182 	bne.w	80106b0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80103b2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80103b6:	e125      	b.n	8010604 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103be:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80103c2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80103c6:	b2d9      	uxtb	r1, r3
 80103c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80103cc:	b2da      	uxtb	r2, r3
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103d2:	400a      	ands	r2, r1
 80103d4:	b2d2      	uxtb	r2, r2
 80103d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103dc:	1c5a      	adds	r2, r3, #1
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80103e8:	b29b      	uxth	r3, r3
 80103ea:	3b01      	subs	r3, #1
 80103ec:	b29a      	uxth	r2, r3
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	69db      	ldr	r3, [r3, #28]
 80103fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80103fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010402:	f003 0307 	and.w	r3, r3, #7
 8010406:	2b00      	cmp	r3, #0
 8010408:	d053      	beq.n	80104b2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801040a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801040e:	f003 0301 	and.w	r3, r3, #1
 8010412:	2b00      	cmp	r3, #0
 8010414:	d011      	beq.n	801043a <UART_RxISR_8BIT_FIFOEN+0xca>
 8010416:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801041a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00b      	beq.n	801043a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2201      	movs	r2, #1
 8010428:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010430:	f043 0201 	orr.w	r2, r3, #1
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801043a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801043e:	f003 0302 	and.w	r3, r3, #2
 8010442:	2b00      	cmp	r3, #0
 8010444:	d011      	beq.n	801046a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801044a:	f003 0301 	and.w	r3, r3, #1
 801044e:	2b00      	cmp	r3, #0
 8010450:	d00b      	beq.n	801046a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	2202      	movs	r2, #2
 8010458:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010460:	f043 0204 	orr.w	r2, r3, #4
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801046a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801046e:	f003 0304 	and.w	r3, r3, #4
 8010472:	2b00      	cmp	r3, #0
 8010474:	d011      	beq.n	801049a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801047a:	f003 0301 	and.w	r3, r3, #1
 801047e:	2b00      	cmp	r3, #0
 8010480:	d00b      	beq.n	801049a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	2204      	movs	r2, #4
 8010488:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010490:	f043 0202 	orr.w	r2, r3, #2
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d006      	beq.n	80104b2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f7fa f9fd 	bl	800a8a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2200      	movs	r2, #0
 80104ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	f040 80a2 	bne.w	8010604 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104c8:	e853 3f00 	ldrex	r3, [r3]
 80104cc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80104ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	461a      	mov	r2, r3
 80104de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80104e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80104e4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104e6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80104e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80104ea:	e841 2300 	strex	r3, r2, [r1]
 80104ee:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80104f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d1e4      	bne.n	80104c0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	3308      	adds	r3, #8
 80104fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010500:	e853 3f00 	ldrex	r3, [r3]
 8010504:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801050c:	f023 0301 	bic.w	r3, r3, #1
 8010510:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	3308      	adds	r3, #8
 801051a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801051e:	66ba      	str	r2, [r7, #104]	; 0x68
 8010520:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010522:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010524:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010526:	e841 2300 	strex	r3, r2, [r1]
 801052a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801052c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801052e:	2b00      	cmp	r3, #0
 8010530:	d1e1      	bne.n	80104f6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2220      	movs	r2, #32
 8010536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2200      	movs	r2, #0
 801053e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2200      	movs	r2, #0
 8010544:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	4a5f      	ldr	r2, [pc, #380]	; (80106c8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801054c:	4293      	cmp	r3, r2
 801054e:	d021      	beq.n	8010594 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801055a:	2b00      	cmp	r3, #0
 801055c:	d01a      	beq.n	8010594 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010566:	e853 3f00 	ldrex	r3, [r3]
 801056a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801056c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801056e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	461a      	mov	r2, r3
 801057c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010580:	657b      	str	r3, [r7, #84]	; 0x54
 8010582:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010584:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010586:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010588:	e841 2300 	strex	r3, r2, [r1]
 801058c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801058e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010590:	2b00      	cmp	r3, #0
 8010592:	d1e4      	bne.n	801055e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010598:	2b01      	cmp	r3, #1
 801059a:	d130      	bne.n	80105fe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2200      	movs	r2, #0
 80105a0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105aa:	e853 3f00 	ldrex	r3, [r3]
 80105ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80105b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b2:	f023 0310 	bic.w	r3, r3, #16
 80105b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	461a      	mov	r2, r3
 80105c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80105c4:	643b      	str	r3, [r7, #64]	; 0x40
 80105c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80105ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105cc:	e841 2300 	strex	r3, r2, [r1]
 80105d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80105d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d1e4      	bne.n	80105a2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	69db      	ldr	r3, [r3, #28]
 80105de:	f003 0310 	and.w	r3, r3, #16
 80105e2:	2b10      	cmp	r3, #16
 80105e4:	d103      	bne.n	80105ee <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	2210      	movs	r2, #16
 80105ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80105f4:	4619      	mov	r1, r3
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f7fe fe76 	bl	800f2e8 <HAL_UARTEx_RxEventCallback>
 80105fc:	e002      	b.n	8010604 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f7fa f95a 	bl	800a8b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010604:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010608:	2b00      	cmp	r3, #0
 801060a:	d006      	beq.n	801061a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 801060c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010610:	f003 0320 	and.w	r3, r3, #32
 8010614:	2b00      	cmp	r3, #0
 8010616:	f47f aecf 	bne.w	80103b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010620:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010624:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010628:	2b00      	cmp	r3, #0
 801062a:	d049      	beq.n	80106c0 <UART_RxISR_8BIT_FIFOEN+0x350>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010632:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8010636:	429a      	cmp	r2, r3
 8010638:	d242      	bcs.n	80106c0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	3308      	adds	r3, #8
 8010640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010642:	6a3b      	ldr	r3, [r7, #32]
 8010644:	e853 3f00 	ldrex	r3, [r3]
 8010648:	61fb      	str	r3, [r7, #28]
   return(result);
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010650:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	3308      	adds	r3, #8
 801065a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801065e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010660:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010666:	e841 2300 	strex	r3, r2, [r1]
 801066a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066e:	2b00      	cmp	r3, #0
 8010670:	d1e3      	bne.n	801063a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	4a15      	ldr	r2, [pc, #84]	; (80106cc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010676:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	e853 3f00 	ldrex	r3, [r3]
 8010684:	60bb      	str	r3, [r7, #8]
   return(result);
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	f043 0320 	orr.w	r3, r3, #32
 801068c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	461a      	mov	r2, r3
 8010696:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801069a:	61bb      	str	r3, [r7, #24]
 801069c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801069e:	6979      	ldr	r1, [r7, #20]
 80106a0:	69ba      	ldr	r2, [r7, #24]
 80106a2:	e841 2300 	strex	r3, r2, [r1]
 80106a6:	613b      	str	r3, [r7, #16]
   return(result);
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d1e4      	bne.n	8010678 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80106ae:	e007      	b.n	80106c0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	699a      	ldr	r2, [r3, #24]
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	f042 0208 	orr.w	r2, r2, #8
 80106be:	619a      	str	r2, [r3, #24]
}
 80106c0:	bf00      	nop
 80106c2:	37b0      	adds	r7, #176	; 0xb0
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	40008000 	.word	0x40008000
 80106cc:	08010001 	.word	0x08010001

080106d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b0ae      	sub	sp, #184	; 0xb8
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80106de:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	69db      	ldr	r3, [r3, #28]
 80106e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	689b      	ldr	r3, [r3, #8]
 80106fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010706:	2b22      	cmp	r3, #34	; 0x22
 8010708:	f040 8186 	bne.w	8010a18 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010712:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010716:	e129      	b.n	801096c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801071e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010726:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801072a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801072e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8010732:	4013      	ands	r3, r2
 8010734:	b29a      	uxth	r2, r3
 8010736:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801073a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010740:	1c9a      	adds	r2, r3, #2
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801074c:	b29b      	uxth	r3, r3
 801074e:	3b01      	subs	r3, #1
 8010750:	b29a      	uxth	r2, r3
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	69db      	ldr	r3, [r3, #28]
 801075e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010762:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010766:	f003 0307 	and.w	r3, r3, #7
 801076a:	2b00      	cmp	r3, #0
 801076c:	d053      	beq.n	8010816 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801076e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010772:	f003 0301 	and.w	r3, r3, #1
 8010776:	2b00      	cmp	r3, #0
 8010778:	d011      	beq.n	801079e <UART_RxISR_16BIT_FIFOEN+0xce>
 801077a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801077e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010782:	2b00      	cmp	r3, #0
 8010784:	d00b      	beq.n	801079e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	2201      	movs	r2, #1
 801078c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010794:	f043 0201 	orr.w	r2, r3, #1
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801079e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80107a2:	f003 0302 	and.w	r3, r3, #2
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d011      	beq.n	80107ce <UART_RxISR_16BIT_FIFOEN+0xfe>
 80107aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80107ae:	f003 0301 	and.w	r3, r3, #1
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d00b      	beq.n	80107ce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	2202      	movs	r2, #2
 80107bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107c4:	f043 0204 	orr.w	r2, r3, #4
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80107ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80107d2:	f003 0304 	and.w	r3, r3, #4
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d011      	beq.n	80107fe <UART_RxISR_16BIT_FIFOEN+0x12e>
 80107da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80107de:	f003 0301 	and.w	r3, r3, #1
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d00b      	beq.n	80107fe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2204      	movs	r2, #4
 80107ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107f4:	f043 0202 	orr.w	r2, r3, #2
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010804:	2b00      	cmp	r3, #0
 8010806:	d006      	beq.n	8010816 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f7fa f84b 	bl	800a8a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2200      	movs	r2, #0
 8010812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801081c:	b29b      	uxth	r3, r3
 801081e:	2b00      	cmp	r3, #0
 8010820:	f040 80a4 	bne.w	801096c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801082c:	e853 3f00 	ldrex	r3, [r3]
 8010830:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010832:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	461a      	mov	r2, r3
 8010842:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010846:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801084a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801084c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801084e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010852:	e841 2300 	strex	r3, r2, [r1]
 8010856:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801085a:	2b00      	cmp	r3, #0
 801085c:	d1e2      	bne.n	8010824 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	3308      	adds	r3, #8
 8010864:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010868:	e853 3f00 	ldrex	r3, [r3]
 801086c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801086e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010874:	f023 0301 	bic.w	r3, r3, #1
 8010878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	3308      	adds	r3, #8
 8010882:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010886:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801088a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801088c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801088e:	e841 2300 	strex	r3, r2, [r1]
 8010892:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010896:	2b00      	cmp	r3, #0
 8010898:	d1e1      	bne.n	801085e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2220      	movs	r2, #32
 801089e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2200      	movs	r2, #0
 80108a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2200      	movs	r2, #0
 80108ac:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	4a5f      	ldr	r2, [pc, #380]	; (8010a30 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80108b4:	4293      	cmp	r3, r2
 80108b6:	d021      	beq.n	80108fc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	685b      	ldr	r3, [r3, #4]
 80108be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d01a      	beq.n	80108fc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108ce:	e853 3f00 	ldrex	r3, [r3]
 80108d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80108d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80108da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	461a      	mov	r2, r3
 80108e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80108e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80108ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80108ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80108f0:	e841 2300 	strex	r3, r2, [r1]
 80108f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80108f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d1e4      	bne.n	80108c6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010900:	2b01      	cmp	r3, #1
 8010902:	d130      	bne.n	8010966 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2200      	movs	r2, #0
 8010908:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010912:	e853 3f00 	ldrex	r3, [r3]
 8010916:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801091a:	f023 0310 	bic.w	r3, r3, #16
 801091e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	461a      	mov	r2, r3
 8010928:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801092c:	647b      	str	r3, [r7, #68]	; 0x44
 801092e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010930:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010934:	e841 2300 	strex	r3, r2, [r1]
 8010938:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801093a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801093c:	2b00      	cmp	r3, #0
 801093e:	d1e4      	bne.n	801090a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	69db      	ldr	r3, [r3, #28]
 8010946:	f003 0310 	and.w	r3, r3, #16
 801094a:	2b10      	cmp	r3, #16
 801094c:	d103      	bne.n	8010956 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	2210      	movs	r2, #16
 8010954:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801095c:	4619      	mov	r1, r3
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f7fe fcc2 	bl	800f2e8 <HAL_UARTEx_RxEventCallback>
 8010964:	e002      	b.n	801096c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f7f9 ffa6 	bl	800a8b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801096c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010970:	2b00      	cmp	r3, #0
 8010972:	d006      	beq.n	8010982 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8010974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010978:	f003 0320 	and.w	r3, r3, #32
 801097c:	2b00      	cmp	r3, #0
 801097e:	f47f aecb 	bne.w	8010718 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010988:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801098c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010990:	2b00      	cmp	r3, #0
 8010992:	d049      	beq.n	8010a28 <UART_RxISR_16BIT_FIFOEN+0x358>
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801099a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801099e:	429a      	cmp	r2, r3
 80109a0:	d242      	bcs.n	8010a28 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	3308      	adds	r3, #8
 80109a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ac:	e853 3f00 	ldrex	r3, [r3]
 80109b0:	623b      	str	r3, [r7, #32]
   return(result);
 80109b2:	6a3b      	ldr	r3, [r7, #32]
 80109b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80109b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	3308      	adds	r3, #8
 80109c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80109c6:	633a      	str	r2, [r7, #48]	; 0x30
 80109c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80109cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109ce:	e841 2300 	strex	r3, r2, [r1]
 80109d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80109d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d1e3      	bne.n	80109a2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	4a15      	ldr	r2, [pc, #84]	; (8010a34 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80109de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	e853 3f00 	ldrex	r3, [r3]
 80109ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	f043 0320 	orr.w	r3, r3, #32
 80109f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	461a      	mov	r2, r3
 80109fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010a02:	61fb      	str	r3, [r7, #28]
 8010a04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a06:	69b9      	ldr	r1, [r7, #24]
 8010a08:	69fa      	ldr	r2, [r7, #28]
 8010a0a:	e841 2300 	strex	r3, r2, [r1]
 8010a0e:	617b      	str	r3, [r7, #20]
   return(result);
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d1e4      	bne.n	80109e0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010a16:	e007      	b.n	8010a28 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	699a      	ldr	r2, [r3, #24]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	f042 0208 	orr.w	r2, r2, #8
 8010a26:	619a      	str	r2, [r3, #24]
}
 8010a28:	bf00      	nop
 8010a2a:	37b8      	adds	r7, #184	; 0xb8
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	40008000 	.word	0x40008000
 8010a34:	080101b9 	.word	0x080101b9

08010a38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010a38:	b480      	push	{r7}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010a40:	bf00      	nop
 8010a42:	370c      	adds	r7, #12
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr

08010a4c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b083      	sub	sp, #12
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010a54:	bf00      	nop
 8010a56:	370c      	adds	r7, #12
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5e:	4770      	bx	lr

08010a60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010a60:	b480      	push	{r7}
 8010a62:	b083      	sub	sp, #12
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010a68:	bf00      	nop
 8010a6a:	370c      	adds	r7, #12
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a72:	4770      	bx	lr

08010a74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010a74:	b480      	push	{r7}
 8010a76:	b085      	sub	sp, #20
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010a82:	2b01      	cmp	r3, #1
 8010a84:	d101      	bne.n	8010a8a <HAL_UARTEx_DisableFifoMode+0x16>
 8010a86:	2302      	movs	r3, #2
 8010a88:	e027      	b.n	8010ada <HAL_UARTEx_DisableFifoMode+0x66>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2224      	movs	r2, #36	; 0x24
 8010a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	681a      	ldr	r2, [r3, #0]
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	f022 0201 	bic.w	r2, r2, #1
 8010ab0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010ab8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2200      	movs	r2, #0
 8010abe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	68fa      	ldr	r2, [r7, #12]
 8010ac6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2220      	movs	r2, #32
 8010acc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010ad8:	2300      	movs	r3, #0
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3714      	adds	r7, #20
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr

08010ae6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ae6:	b580      	push	{r7, lr}
 8010ae8:	b084      	sub	sp, #16
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	6078      	str	r0, [r7, #4]
 8010aee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010af6:	2b01      	cmp	r3, #1
 8010af8:	d101      	bne.n	8010afe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010afa:	2302      	movs	r3, #2
 8010afc:	e02d      	b.n	8010b5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2201      	movs	r2, #1
 8010b02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2224      	movs	r2, #36	; 0x24
 8010b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	681a      	ldr	r2, [r3, #0]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	f022 0201 	bic.w	r2, r2, #1
 8010b24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	689b      	ldr	r3, [r3, #8]
 8010b2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	683a      	ldr	r2, [r7, #0]
 8010b36:	430a      	orrs	r2, r1
 8010b38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f000 f850 	bl	8010be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	68fa      	ldr	r2, [r7, #12]
 8010b46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2220      	movs	r2, #32
 8010b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2200      	movs	r2, #0
 8010b54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010b58:	2300      	movs	r3, #0
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3710      	adds	r7, #16
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}

08010b62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b62:	b580      	push	{r7, lr}
 8010b64:	b084      	sub	sp, #16
 8010b66:	af00      	add	r7, sp, #0
 8010b68:	6078      	str	r0, [r7, #4]
 8010b6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010b72:	2b01      	cmp	r3, #1
 8010b74:	d101      	bne.n	8010b7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010b76:	2302      	movs	r3, #2
 8010b78:	e02d      	b.n	8010bd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2224      	movs	r2, #36	; 0x24
 8010b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	681a      	ldr	r2, [r3, #0]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	f022 0201 	bic.w	r2, r2, #1
 8010ba0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	689b      	ldr	r3, [r3, #8]
 8010ba8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	683a      	ldr	r2, [r7, #0]
 8010bb2:	430a      	orrs	r2, r1
 8010bb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f000 f812 	bl	8010be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	68fa      	ldr	r2, [r7, #12]
 8010bc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2220      	movs	r2, #32
 8010bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010bd4:	2300      	movs	r3, #0
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3710      	adds	r7, #16
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
	...

08010be0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010be0:	b480      	push	{r7}
 8010be2:	b085      	sub	sp, #20
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d108      	bne.n	8010c02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2201      	movs	r2, #1
 8010bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010c00:	e031      	b.n	8010c66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010c02:	2308      	movs	r3, #8
 8010c04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010c06:	2308      	movs	r3, #8
 8010c08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	689b      	ldr	r3, [r3, #8]
 8010c10:	0e5b      	lsrs	r3, r3, #25
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	f003 0307 	and.w	r3, r3, #7
 8010c18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	689b      	ldr	r3, [r3, #8]
 8010c20:	0f5b      	lsrs	r3, r3, #29
 8010c22:	b2db      	uxtb	r3, r3
 8010c24:	f003 0307 	and.w	r3, r3, #7
 8010c28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010c2a:	7bbb      	ldrb	r3, [r7, #14]
 8010c2c:	7b3a      	ldrb	r2, [r7, #12]
 8010c2e:	4911      	ldr	r1, [pc, #68]	; (8010c74 <UARTEx_SetNbDataToProcess+0x94>)
 8010c30:	5c8a      	ldrb	r2, [r1, r2]
 8010c32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010c36:	7b3a      	ldrb	r2, [r7, #12]
 8010c38:	490f      	ldr	r1, [pc, #60]	; (8010c78 <UARTEx_SetNbDataToProcess+0x98>)
 8010c3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010c3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c40:	b29a      	uxth	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c48:	7bfb      	ldrb	r3, [r7, #15]
 8010c4a:	7b7a      	ldrb	r2, [r7, #13]
 8010c4c:	4909      	ldr	r1, [pc, #36]	; (8010c74 <UARTEx_SetNbDataToProcess+0x94>)
 8010c4e:	5c8a      	ldrb	r2, [r1, r2]
 8010c50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010c54:	7b7a      	ldrb	r2, [r7, #13]
 8010c56:	4908      	ldr	r1, [pc, #32]	; (8010c78 <UARTEx_SetNbDataToProcess+0x98>)
 8010c58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c5e:	b29a      	uxth	r2, r3
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010c66:	bf00      	nop
 8010c68:	3714      	adds	r7, #20
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop
 8010c74:	08018e34 	.word	0x08018e34
 8010c78:	08018e3c 	.word	0x08018e3c

08010c7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b085      	sub	sp, #20
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2200      	movs	r2, #0
 8010c88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010c8c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8010c90:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	b29a      	uxth	r2, r3
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010c9c:	2300      	movs	r3, #0
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3714      	adds	r7, #20
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr

08010caa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8010caa:	b480      	push	{r7}
 8010cac:	b085      	sub	sp, #20
 8010cae:	af00      	add	r7, sp, #0
 8010cb0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010cb2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8010cb6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8010cbe:	b29a      	uxth	r2, r3
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	b29b      	uxth	r3, r3
 8010cc4:	43db      	mvns	r3, r3
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	4013      	ands	r3, r2
 8010cca:	b29a      	uxth	r2, r3
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010cd2:	2300      	movs	r3, #0
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3714      	adds	r7, #20
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b085      	sub	sp, #20
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	60f8      	str	r0, [r7, #12]
 8010ce8:	1d3b      	adds	r3, r7, #4
 8010cea:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	2200      	movs	r2, #0
 8010d02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	2200      	movs	r2, #0
 8010d0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8010d0e:	2300      	movs	r3, #0
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3714      	adds	r7, #20
 8010d14:	46bd      	mov	sp, r7
 8010d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1a:	4770      	bx	lr

08010d1c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b09d      	sub	sp, #116	; 0x74
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8010d26:	2300      	movs	r3, #0
 8010d28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010d2c:	687a      	ldr	r2, [r7, #4]
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	009b      	lsls	r3, r3, #2
 8010d34:	4413      	add	r3, r2
 8010d36:	881b      	ldrh	r3, [r3, #0]
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8010d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d42:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	78db      	ldrb	r3, [r3, #3]
 8010d4a:	2b03      	cmp	r3, #3
 8010d4c:	d81f      	bhi.n	8010d8e <USB_ActivateEndpoint+0x72>
 8010d4e:	a201      	add	r2, pc, #4	; (adr r2, 8010d54 <USB_ActivateEndpoint+0x38>)
 8010d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d54:	08010d65 	.word	0x08010d65
 8010d58:	08010d81 	.word	0x08010d81
 8010d5c:	08010d97 	.word	0x08010d97
 8010d60:	08010d73 	.word	0x08010d73
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8010d64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010d68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010d6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010d70:	e012      	b.n	8010d98 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8010d72:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010d76:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8010d7a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010d7e:	e00b      	b.n	8010d98 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010d80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010d84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010d88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010d8c:	e004      	b.n	8010d98 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8010d8e:	2301      	movs	r3, #1
 8010d90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8010d94:	e000      	b.n	8010d98 <USB_ActivateEndpoint+0x7c>
      break;
 8010d96:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8010d98:	687a      	ldr	r2, [r7, #4]
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	781b      	ldrb	r3, [r3, #0]
 8010d9e:	009b      	lsls	r3, r3, #2
 8010da0:	441a      	add	r2, r3
 8010da2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010db6:	b29b      	uxth	r3, r3
 8010db8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8010dba:	687a      	ldr	r2, [r7, #4]
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	009b      	lsls	r3, r3, #2
 8010dc2:	4413      	add	r3, r2
 8010dc4:	881b      	ldrh	r3, [r3, #0]
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	b21b      	sxth	r3, r3
 8010dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010dd2:	b21a      	sxth	r2, r3
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	781b      	ldrb	r3, [r3, #0]
 8010dd8:	b21b      	sxth	r3, r3
 8010dda:	4313      	orrs	r3, r2
 8010ddc:	b21b      	sxth	r3, r3
 8010dde:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8010de2:	687a      	ldr	r2, [r7, #4]
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	781b      	ldrb	r3, [r3, #0]
 8010de8:	009b      	lsls	r3, r3, #2
 8010dea:	441a      	add	r2, r3
 8010dec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8010df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	7b1b      	ldrb	r3, [r3, #12]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	f040 8178 	bne.w	80110fe <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8010e0e:	683b      	ldr	r3, [r7, #0]
 8010e10:	785b      	ldrb	r3, [r3, #1]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	f000 8084 	beq.w	8010f20 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	61bb      	str	r3, [r7, #24]
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	461a      	mov	r2, r3
 8010e26:	69bb      	ldr	r3, [r7, #24]
 8010e28:	4413      	add	r3, r2
 8010e2a:	61bb      	str	r3, [r7, #24]
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	00da      	lsls	r2, r3, #3
 8010e32:	69bb      	ldr	r3, [r7, #24]
 8010e34:	4413      	add	r3, r2
 8010e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e3a:	617b      	str	r3, [r7, #20]
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	88db      	ldrh	r3, [r3, #6]
 8010e40:	085b      	lsrs	r3, r3, #1
 8010e42:	b29b      	uxth	r3, r3
 8010e44:	005b      	lsls	r3, r3, #1
 8010e46:	b29a      	uxth	r2, r3
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010e4c:	687a      	ldr	r2, [r7, #4]
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	009b      	lsls	r3, r3, #2
 8010e54:	4413      	add	r3, r2
 8010e56:	881b      	ldrh	r3, [r3, #0]
 8010e58:	827b      	strh	r3, [r7, #18]
 8010e5a:	8a7b      	ldrh	r3, [r7, #18]
 8010e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d01b      	beq.n	8010e9c <USB_ActivateEndpoint+0x180>
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	4413      	add	r3, r2
 8010e6e:	881b      	ldrh	r3, [r3, #0]
 8010e70:	b29b      	uxth	r3, r3
 8010e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e7a:	823b      	strh	r3, [r7, #16]
 8010e7c:	687a      	ldr	r2, [r7, #4]
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	009b      	lsls	r3, r3, #2
 8010e84:	441a      	add	r2, r3
 8010e86:	8a3b      	ldrh	r3, [r7, #16]
 8010e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010e98:	b29b      	uxth	r3, r3
 8010e9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	78db      	ldrb	r3, [r3, #3]
 8010ea0:	2b01      	cmp	r3, #1
 8010ea2:	d020      	beq.n	8010ee6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010ea4:	687a      	ldr	r2, [r7, #4]
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	009b      	lsls	r3, r3, #2
 8010eac:	4413      	add	r3, r2
 8010eae:	881b      	ldrh	r3, [r3, #0]
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010eba:	81bb      	strh	r3, [r7, #12]
 8010ebc:	89bb      	ldrh	r3, [r7, #12]
 8010ebe:	f083 0320 	eor.w	r3, r3, #32
 8010ec2:	81bb      	strh	r3, [r7, #12]
 8010ec4:	687a      	ldr	r2, [r7, #4]
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	009b      	lsls	r3, r3, #2
 8010ecc:	441a      	add	r2, r3
 8010ece:	89bb      	ldrh	r3, [r7, #12]
 8010ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	8013      	strh	r3, [r2, #0]
 8010ee4:	e2d5      	b.n	8011492 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010ee6:	687a      	ldr	r2, [r7, #4]
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	781b      	ldrb	r3, [r3, #0]
 8010eec:	009b      	lsls	r3, r3, #2
 8010eee:	4413      	add	r3, r2
 8010ef0:	881b      	ldrh	r3, [r3, #0]
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010efc:	81fb      	strh	r3, [r7, #14]
 8010efe:	687a      	ldr	r2, [r7, #4]
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	009b      	lsls	r3, r3, #2
 8010f06:	441a      	add	r2, r3
 8010f08:	89fb      	ldrh	r3, [r7, #14]
 8010f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	8013      	strh	r3, [r2, #0]
 8010f1e:	e2b8      	b.n	8011492 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	633b      	str	r3, [r7, #48]	; 0x30
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f2a:	b29b      	uxth	r3, r3
 8010f2c:	461a      	mov	r2, r3
 8010f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f30:	4413      	add	r3, r2
 8010f32:	633b      	str	r3, [r7, #48]	; 0x30
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	781b      	ldrb	r3, [r3, #0]
 8010f38:	00da      	lsls	r2, r3, #3
 8010f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f3c:	4413      	add	r3, r2
 8010f3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	88db      	ldrh	r3, [r3, #6]
 8010f48:	085b      	lsrs	r3, r3, #1
 8010f4a:	b29b      	uxth	r3, r3
 8010f4c:	005b      	lsls	r3, r3, #1
 8010f4e:	b29a      	uxth	r2, r3
 8010f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f52:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	461a      	mov	r2, r3
 8010f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f64:	4413      	add	r3, r2
 8010f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	781b      	ldrb	r3, [r3, #0]
 8010f6c:	00da      	lsls	r2, r3, #3
 8010f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f70:	4413      	add	r3, r2
 8010f72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010f76:	627b      	str	r3, [r7, #36]	; 0x24
 8010f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7a:	881b      	ldrh	r3, [r3, #0]
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010f82:	b29a      	uxth	r2, r3
 8010f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f86:	801a      	strh	r2, [r3, #0]
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	691b      	ldr	r3, [r3, #16]
 8010f8c:	2b3e      	cmp	r3, #62	; 0x3e
 8010f8e:	d91d      	bls.n	8010fcc <USB_ActivateEndpoint+0x2b0>
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	691b      	ldr	r3, [r3, #16]
 8010f94:	095b      	lsrs	r3, r3, #5
 8010f96:	66bb      	str	r3, [r7, #104]	; 0x68
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	691b      	ldr	r3, [r3, #16]
 8010f9c:	f003 031f 	and.w	r3, r3, #31
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d102      	bne.n	8010faa <USB_ActivateEndpoint+0x28e>
 8010fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010fa6:	3b01      	subs	r3, #1
 8010fa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8010faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fac:	881b      	ldrh	r3, [r3, #0]
 8010fae:	b29a      	uxth	r2, r3
 8010fb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010fb2:	b29b      	uxth	r3, r3
 8010fb4:	029b      	lsls	r3, r3, #10
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	4313      	orrs	r3, r2
 8010fba:	b29b      	uxth	r3, r3
 8010fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010fc4:	b29a      	uxth	r2, r3
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc8:	801a      	strh	r2, [r3, #0]
 8010fca:	e026      	b.n	801101a <USB_ActivateEndpoint+0x2fe>
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	691b      	ldr	r3, [r3, #16]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d10a      	bne.n	8010fea <USB_ActivateEndpoint+0x2ce>
 8010fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd6:	881b      	ldrh	r3, [r3, #0]
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010fe2:	b29a      	uxth	r2, r3
 8010fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe6:	801a      	strh	r2, [r3, #0]
 8010fe8:	e017      	b.n	801101a <USB_ActivateEndpoint+0x2fe>
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	691b      	ldr	r3, [r3, #16]
 8010fee:	085b      	lsrs	r3, r3, #1
 8010ff0:	66bb      	str	r3, [r7, #104]	; 0x68
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	691b      	ldr	r3, [r3, #16]
 8010ff6:	f003 0301 	and.w	r3, r3, #1
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d002      	beq.n	8011004 <USB_ActivateEndpoint+0x2e8>
 8010ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011000:	3301      	adds	r3, #1
 8011002:	66bb      	str	r3, [r7, #104]	; 0x68
 8011004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011006:	881b      	ldrh	r3, [r3, #0]
 8011008:	b29a      	uxth	r2, r3
 801100a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801100c:	b29b      	uxth	r3, r3
 801100e:	029b      	lsls	r3, r3, #10
 8011010:	b29b      	uxth	r3, r3
 8011012:	4313      	orrs	r3, r2
 8011014:	b29a      	uxth	r2, r3
 8011016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011018:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801101a:	687a      	ldr	r2, [r7, #4]
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	009b      	lsls	r3, r3, #2
 8011022:	4413      	add	r3, r2
 8011024:	881b      	ldrh	r3, [r3, #0]
 8011026:	847b      	strh	r3, [r7, #34]	; 0x22
 8011028:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801102a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801102e:	2b00      	cmp	r3, #0
 8011030:	d01b      	beq.n	801106a <USB_ActivateEndpoint+0x34e>
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	781b      	ldrb	r3, [r3, #0]
 8011038:	009b      	lsls	r3, r3, #2
 801103a:	4413      	add	r3, r2
 801103c:	881b      	ldrh	r3, [r3, #0]
 801103e:	b29b      	uxth	r3, r3
 8011040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011048:	843b      	strh	r3, [r7, #32]
 801104a:	687a      	ldr	r2, [r7, #4]
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	009b      	lsls	r3, r3, #2
 8011052:	441a      	add	r2, r3
 8011054:	8c3b      	ldrh	r3, [r7, #32]
 8011056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801105a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801105e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011066:	b29b      	uxth	r3, r3
 8011068:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	781b      	ldrb	r3, [r3, #0]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d124      	bne.n	80110bc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	009b      	lsls	r3, r3, #2
 801107a:	4413      	add	r3, r2
 801107c:	881b      	ldrh	r3, [r3, #0]
 801107e:	b29b      	uxth	r3, r3
 8011080:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011088:	83bb      	strh	r3, [r7, #28]
 801108a:	8bbb      	ldrh	r3, [r7, #28]
 801108c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011090:	83bb      	strh	r3, [r7, #28]
 8011092:	8bbb      	ldrh	r3, [r7, #28]
 8011094:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011098:	83bb      	strh	r3, [r7, #28]
 801109a:	687a      	ldr	r2, [r7, #4]
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	009b      	lsls	r3, r3, #2
 80110a2:	441a      	add	r2, r3
 80110a4:	8bbb      	ldrh	r3, [r7, #28]
 80110a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80110ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80110b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110b6:	b29b      	uxth	r3, r3
 80110b8:	8013      	strh	r3, [r2, #0]
 80110ba:	e1ea      	b.n	8011492 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80110bc:	687a      	ldr	r2, [r7, #4]
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	009b      	lsls	r3, r3, #2
 80110c4:	4413      	add	r3, r2
 80110c6:	881b      	ldrh	r3, [r3, #0]
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80110ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110d2:	83fb      	strh	r3, [r7, #30]
 80110d4:	8bfb      	ldrh	r3, [r7, #30]
 80110d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80110da:	83fb      	strh	r3, [r7, #30]
 80110dc:	687a      	ldr	r2, [r7, #4]
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	781b      	ldrb	r3, [r3, #0]
 80110e2:	009b      	lsls	r3, r3, #2
 80110e4:	441a      	add	r2, r3
 80110e6:	8bfb      	ldrh	r3, [r7, #30]
 80110e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80110f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80110f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110f8:	b29b      	uxth	r3, r3
 80110fa:	8013      	strh	r3, [r2, #0]
 80110fc:	e1c9      	b.n	8011492 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	78db      	ldrb	r3, [r3, #3]
 8011102:	2b02      	cmp	r3, #2
 8011104:	d11e      	bne.n	8011144 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011106:	687a      	ldr	r2, [r7, #4]
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	009b      	lsls	r3, r3, #2
 801110e:	4413      	add	r3, r2
 8011110:	881b      	ldrh	r3, [r3, #0]
 8011112:	b29b      	uxth	r3, r3
 8011114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801111c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8011120:	687a      	ldr	r2, [r7, #4]
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	009b      	lsls	r3, r3, #2
 8011128:	441a      	add	r2, r3
 801112a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801112e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011136:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801113a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801113e:	b29b      	uxth	r3, r3
 8011140:	8013      	strh	r3, [r2, #0]
 8011142:	e01d      	b.n	8011180 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011144:	687a      	ldr	r2, [r7, #4]
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	009b      	lsls	r3, r3, #2
 801114c:	4413      	add	r3, r2
 801114e:	881b      	ldrh	r3, [r3, #0]
 8011150:	b29b      	uxth	r3, r3
 8011152:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8011156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801115a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	009b      	lsls	r3, r3, #2
 8011166:	441a      	add	r2, r3
 8011168:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801116c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801117c:	b29b      	uxth	r3, r3
 801117e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801118a:	b29b      	uxth	r3, r3
 801118c:	461a      	mov	r2, r3
 801118e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011190:	4413      	add	r3, r2
 8011192:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	781b      	ldrb	r3, [r3, #0]
 8011198:	00da      	lsls	r2, r3, #3
 801119a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801119c:	4413      	add	r3, r2
 801119e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80111a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	891b      	ldrh	r3, [r3, #8]
 80111a8:	085b      	lsrs	r3, r3, #1
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	005b      	lsls	r3, r3, #1
 80111ae:	b29a      	uxth	r2, r3
 80111b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80111b2:	801a      	strh	r2, [r3, #0]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	657b      	str	r3, [r7, #84]	; 0x54
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80111be:	b29b      	uxth	r3, r3
 80111c0:	461a      	mov	r2, r3
 80111c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111c4:	4413      	add	r3, r2
 80111c6:	657b      	str	r3, [r7, #84]	; 0x54
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	00da      	lsls	r2, r3, #3
 80111ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111d0:	4413      	add	r3, r2
 80111d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80111d6:	653b      	str	r3, [r7, #80]	; 0x50
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	895b      	ldrh	r3, [r3, #10]
 80111dc:	085b      	lsrs	r3, r3, #1
 80111de:	b29b      	uxth	r3, r3
 80111e0:	005b      	lsls	r3, r3, #1
 80111e2:	b29a      	uxth	r2, r3
 80111e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111e6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	785b      	ldrb	r3, [r3, #1]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	f040 8093 	bne.w	8011318 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80111f2:	687a      	ldr	r2, [r7, #4]
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	009b      	lsls	r3, r3, #2
 80111fa:	4413      	add	r3, r2
 80111fc:	881b      	ldrh	r3, [r3, #0]
 80111fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011202:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801120a:	2b00      	cmp	r3, #0
 801120c:	d01b      	beq.n	8011246 <USB_ActivateEndpoint+0x52a>
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	009b      	lsls	r3, r3, #2
 8011216:	4413      	add	r3, r2
 8011218:	881b      	ldrh	r3, [r3, #0]
 801121a:	b29b      	uxth	r3, r3
 801121c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011224:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	009b      	lsls	r3, r3, #2
 801122e:	441a      	add	r2, r3
 8011230:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801123a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801123e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011242:	b29b      	uxth	r3, r3
 8011244:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011246:	687a      	ldr	r2, [r7, #4]
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	009b      	lsls	r3, r3, #2
 801124e:	4413      	add	r3, r2
 8011250:	881b      	ldrh	r3, [r3, #0]
 8011252:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011254:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801125a:	2b00      	cmp	r3, #0
 801125c:	d01b      	beq.n	8011296 <USB_ActivateEndpoint+0x57a>
 801125e:	687a      	ldr	r2, [r7, #4]
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	009b      	lsls	r3, r3, #2
 8011266:	4413      	add	r3, r2
 8011268:	881b      	ldrh	r3, [r3, #0]
 801126a:	b29b      	uxth	r3, r3
 801126c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011274:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011276:	687a      	ldr	r2, [r7, #4]
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	009b      	lsls	r3, r3, #2
 801127e:	441a      	add	r2, r3
 8011280:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801128a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801128e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011292:	b29b      	uxth	r3, r3
 8011294:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011296:	687a      	ldr	r2, [r7, #4]
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	009b      	lsls	r3, r3, #2
 801129e:	4413      	add	r3, r2
 80112a0:	881b      	ldrh	r3, [r3, #0]
 80112a2:	b29b      	uxth	r3, r3
 80112a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80112a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112ac:	873b      	strh	r3, [r7, #56]	; 0x38
 80112ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80112b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80112b4:	873b      	strh	r3, [r7, #56]	; 0x38
 80112b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80112b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80112bc:	873b      	strh	r3, [r7, #56]	; 0x38
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	009b      	lsls	r3, r3, #2
 80112c6:	441a      	add	r2, r3
 80112c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80112ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80112ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80112d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80112d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112da:	b29b      	uxth	r3, r3
 80112dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80112de:	687a      	ldr	r2, [r7, #4]
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	009b      	lsls	r3, r3, #2
 80112e6:	4413      	add	r3, r2
 80112e8:	881b      	ldrh	r3, [r3, #0]
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80112f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80112f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	009b      	lsls	r3, r3, #2
 80112fe:	441a      	add	r2, r3
 8011300:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801130a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801130e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011312:	b29b      	uxth	r3, r3
 8011314:	8013      	strh	r3, [r2, #0]
 8011316:	e0bc      	b.n	8011492 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011318:	687a      	ldr	r2, [r7, #4]
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	009b      	lsls	r3, r3, #2
 8011320:	4413      	add	r3, r2
 8011322:	881b      	ldrh	r3, [r3, #0]
 8011324:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8011328:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801132c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011330:	2b00      	cmp	r3, #0
 8011332:	d01d      	beq.n	8011370 <USB_ActivateEndpoint+0x654>
 8011334:	687a      	ldr	r2, [r7, #4]
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	009b      	lsls	r3, r3, #2
 801133c:	4413      	add	r3, r2
 801133e:	881b      	ldrh	r3, [r3, #0]
 8011340:	b29b      	uxth	r3, r3
 8011342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801134a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 801134e:	687a      	ldr	r2, [r7, #4]
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	781b      	ldrb	r3, [r3, #0]
 8011354:	009b      	lsls	r3, r3, #2
 8011356:	441a      	add	r2, r3
 8011358:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801135c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801136c:	b29b      	uxth	r3, r3
 801136e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011370:	687a      	ldr	r2, [r7, #4]
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	781b      	ldrb	r3, [r3, #0]
 8011376:	009b      	lsls	r3, r3, #2
 8011378:	4413      	add	r3, r2
 801137a:	881b      	ldrh	r3, [r3, #0]
 801137c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8011380:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8011384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011388:	2b00      	cmp	r3, #0
 801138a:	d01d      	beq.n	80113c8 <USB_ActivateEndpoint+0x6ac>
 801138c:	687a      	ldr	r2, [r7, #4]
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	4413      	add	r3, r2
 8011396:	881b      	ldrh	r3, [r3, #0]
 8011398:	b29b      	uxth	r3, r3
 801139a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801139e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80113a6:	687a      	ldr	r2, [r7, #4]
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	009b      	lsls	r3, r3, #2
 80113ae:	441a      	add	r2, r3
 80113b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80113b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80113b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80113bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80113c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80113c4:	b29b      	uxth	r3, r3
 80113c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	78db      	ldrb	r3, [r3, #3]
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d024      	beq.n	801141a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80113d0:	687a      	ldr	r2, [r7, #4]
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	781b      	ldrb	r3, [r3, #0]
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	4413      	add	r3, r2
 80113da:	881b      	ldrh	r3, [r3, #0]
 80113dc:	b29b      	uxth	r3, r3
 80113de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80113e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80113e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80113ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80113ee:	f083 0320 	eor.w	r3, r3, #32
 80113f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80113f6:	687a      	ldr	r2, [r7, #4]
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	009b      	lsls	r3, r3, #2
 80113fe:	441a      	add	r2, r3
 8011400:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801140c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011414:	b29b      	uxth	r3, r3
 8011416:	8013      	strh	r3, [r2, #0]
 8011418:	e01d      	b.n	8011456 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801141a:	687a      	ldr	r2, [r7, #4]
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	009b      	lsls	r3, r3, #2
 8011422:	4413      	add	r3, r2
 8011424:	881b      	ldrh	r3, [r3, #0]
 8011426:	b29b      	uxth	r3, r3
 8011428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801142c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011430:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8011434:	687a      	ldr	r2, [r7, #4]
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	781b      	ldrb	r3, [r3, #0]
 801143a:	009b      	lsls	r3, r3, #2
 801143c:	441a      	add	r2, r3
 801143e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801144a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801144e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011452:	b29b      	uxth	r3, r3
 8011454:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011456:	687a      	ldr	r2, [r7, #4]
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	781b      	ldrb	r3, [r3, #0]
 801145c:	009b      	lsls	r3, r3, #2
 801145e:	4413      	add	r3, r2
 8011460:	881b      	ldrh	r3, [r3, #0]
 8011462:	b29b      	uxth	r3, r3
 8011464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801146c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011470:	687a      	ldr	r2, [r7, #4]
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	009b      	lsls	r3, r3, #2
 8011478:	441a      	add	r2, r3
 801147a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801147e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801148a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801148e:	b29b      	uxth	r3, r3
 8011490:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011492:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8011496:	4618      	mov	r0, r3
 8011498:	3774      	adds	r7, #116	; 0x74
 801149a:	46bd      	mov	sp, r7
 801149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a0:	4770      	bx	lr
 80114a2:	bf00      	nop

080114a4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80114a4:	b480      	push	{r7}
 80114a6:	b08d      	sub	sp, #52	; 0x34
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
 80114ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	7b1b      	ldrb	r3, [r3, #12]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	f040 808e 	bne.w	80115d4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	785b      	ldrb	r3, [r3, #1]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d044      	beq.n	801154a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	781b      	ldrb	r3, [r3, #0]
 80114c6:	009b      	lsls	r3, r3, #2
 80114c8:	4413      	add	r3, r2
 80114ca:	881b      	ldrh	r3, [r3, #0]
 80114cc:	81bb      	strh	r3, [r7, #12]
 80114ce:	89bb      	ldrh	r3, [r7, #12]
 80114d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d01b      	beq.n	8011510 <USB_DeactivateEndpoint+0x6c>
 80114d8:	687a      	ldr	r2, [r7, #4]
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	781b      	ldrb	r3, [r3, #0]
 80114de:	009b      	lsls	r3, r3, #2
 80114e0:	4413      	add	r3, r2
 80114e2:	881b      	ldrh	r3, [r3, #0]
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80114ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114ee:	817b      	strh	r3, [r7, #10]
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	009b      	lsls	r3, r3, #2
 80114f8:	441a      	add	r2, r3
 80114fa:	897b      	ldrh	r3, [r7, #10]
 80114fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011508:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801150c:	b29b      	uxth	r3, r3
 801150e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011510:	687a      	ldr	r2, [r7, #4]
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	009b      	lsls	r3, r3, #2
 8011518:	4413      	add	r3, r2
 801151a:	881b      	ldrh	r3, [r3, #0]
 801151c:	b29b      	uxth	r3, r3
 801151e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011526:	813b      	strh	r3, [r7, #8]
 8011528:	687a      	ldr	r2, [r7, #4]
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	781b      	ldrb	r3, [r3, #0]
 801152e:	009b      	lsls	r3, r3, #2
 8011530:	441a      	add	r2, r3
 8011532:	893b      	ldrh	r3, [r7, #8]
 8011534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801153c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011544:	b29b      	uxth	r3, r3
 8011546:	8013      	strh	r3, [r2, #0]
 8011548:	e192      	b.n	8011870 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801154a:	687a      	ldr	r2, [r7, #4]
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	009b      	lsls	r3, r3, #2
 8011552:	4413      	add	r3, r2
 8011554:	881b      	ldrh	r3, [r3, #0]
 8011556:	827b      	strh	r3, [r7, #18]
 8011558:	8a7b      	ldrh	r3, [r7, #18]
 801155a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801155e:	2b00      	cmp	r3, #0
 8011560:	d01b      	beq.n	801159a <USB_DeactivateEndpoint+0xf6>
 8011562:	687a      	ldr	r2, [r7, #4]
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	009b      	lsls	r3, r3, #2
 801156a:	4413      	add	r3, r2
 801156c:	881b      	ldrh	r3, [r3, #0]
 801156e:	b29b      	uxth	r3, r3
 8011570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011578:	823b      	strh	r3, [r7, #16]
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	683b      	ldr	r3, [r7, #0]
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	441a      	add	r2, r3
 8011584:	8a3b      	ldrh	r3, [r7, #16]
 8011586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801158a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801158e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011596:	b29b      	uxth	r3, r3
 8011598:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801159a:	687a      	ldr	r2, [r7, #4]
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	781b      	ldrb	r3, [r3, #0]
 80115a0:	009b      	lsls	r3, r3, #2
 80115a2:	4413      	add	r3, r2
 80115a4:	881b      	ldrh	r3, [r3, #0]
 80115a6:	b29b      	uxth	r3, r3
 80115a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80115ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115b0:	81fb      	strh	r3, [r7, #14]
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	781b      	ldrb	r3, [r3, #0]
 80115b8:	009b      	lsls	r3, r3, #2
 80115ba:	441a      	add	r2, r3
 80115bc:	89fb      	ldrh	r3, [r7, #14]
 80115be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80115c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80115c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80115ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115ce:	b29b      	uxth	r3, r3
 80115d0:	8013      	strh	r3, [r2, #0]
 80115d2:	e14d      	b.n	8011870 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	785b      	ldrb	r3, [r3, #1]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	f040 80a5 	bne.w	8011728 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80115de:	687a      	ldr	r2, [r7, #4]
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	781b      	ldrb	r3, [r3, #0]
 80115e4:	009b      	lsls	r3, r3, #2
 80115e6:	4413      	add	r3, r2
 80115e8:	881b      	ldrh	r3, [r3, #0]
 80115ea:	843b      	strh	r3, [r7, #32]
 80115ec:	8c3b      	ldrh	r3, [r7, #32]
 80115ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d01b      	beq.n	801162e <USB_DeactivateEndpoint+0x18a>
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	009b      	lsls	r3, r3, #2
 80115fe:	4413      	add	r3, r2
 8011600:	881b      	ldrh	r3, [r3, #0]
 8011602:	b29b      	uxth	r3, r3
 8011604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801160c:	83fb      	strh	r3, [r7, #30]
 801160e:	687a      	ldr	r2, [r7, #4]
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	781b      	ldrb	r3, [r3, #0]
 8011614:	009b      	lsls	r3, r3, #2
 8011616:	441a      	add	r2, r3
 8011618:	8bfb      	ldrh	r3, [r7, #30]
 801161a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801161e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801162a:	b29b      	uxth	r3, r3
 801162c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801162e:	687a      	ldr	r2, [r7, #4]
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	009b      	lsls	r3, r3, #2
 8011636:	4413      	add	r3, r2
 8011638:	881b      	ldrh	r3, [r3, #0]
 801163a:	83bb      	strh	r3, [r7, #28]
 801163c:	8bbb      	ldrh	r3, [r7, #28]
 801163e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011642:	2b00      	cmp	r3, #0
 8011644:	d01b      	beq.n	801167e <USB_DeactivateEndpoint+0x1da>
 8011646:	687a      	ldr	r2, [r7, #4]
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	781b      	ldrb	r3, [r3, #0]
 801164c:	009b      	lsls	r3, r3, #2
 801164e:	4413      	add	r3, r2
 8011650:	881b      	ldrh	r3, [r3, #0]
 8011652:	b29b      	uxth	r3, r3
 8011654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801165c:	837b      	strh	r3, [r7, #26]
 801165e:	687a      	ldr	r2, [r7, #4]
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	781b      	ldrb	r3, [r3, #0]
 8011664:	009b      	lsls	r3, r3, #2
 8011666:	441a      	add	r2, r3
 8011668:	8b7b      	ldrh	r3, [r7, #26]
 801166a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801166e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011676:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801167a:	b29b      	uxth	r3, r3
 801167c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801167e:	687a      	ldr	r2, [r7, #4]
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	781b      	ldrb	r3, [r3, #0]
 8011684:	009b      	lsls	r3, r3, #2
 8011686:	4413      	add	r3, r2
 8011688:	881b      	ldrh	r3, [r3, #0]
 801168a:	b29b      	uxth	r3, r3
 801168c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011694:	833b      	strh	r3, [r7, #24]
 8011696:	687a      	ldr	r2, [r7, #4]
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	781b      	ldrb	r3, [r3, #0]
 801169c:	009b      	lsls	r3, r3, #2
 801169e:	441a      	add	r2, r3
 80116a0:	8b3b      	ldrh	r3, [r7, #24]
 80116a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80116a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80116aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80116ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80116b2:	b29b      	uxth	r3, r3
 80116b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80116b6:	687a      	ldr	r2, [r7, #4]
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	4413      	add	r3, r2
 80116c0:	881b      	ldrh	r3, [r3, #0]
 80116c2:	b29b      	uxth	r3, r3
 80116c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80116c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80116cc:	82fb      	strh	r3, [r7, #22]
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	009b      	lsls	r3, r3, #2
 80116d6:	441a      	add	r2, r3
 80116d8:	8afb      	ldrh	r3, [r7, #22]
 80116da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80116de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80116e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80116e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116ea:	b29b      	uxth	r3, r3
 80116ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	781b      	ldrb	r3, [r3, #0]
 80116f4:	009b      	lsls	r3, r3, #2
 80116f6:	4413      	add	r3, r2
 80116f8:	881b      	ldrh	r3, [r3, #0]
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011704:	82bb      	strh	r3, [r7, #20]
 8011706:	687a      	ldr	r2, [r7, #4]
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	009b      	lsls	r3, r3, #2
 801170e:	441a      	add	r2, r3
 8011710:	8abb      	ldrh	r3, [r7, #20]
 8011712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801171a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801171e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011722:	b29b      	uxth	r3, r3
 8011724:	8013      	strh	r3, [r2, #0]
 8011726:	e0a3      	b.n	8011870 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011728:	687a      	ldr	r2, [r7, #4]
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	009b      	lsls	r3, r3, #2
 8011730:	4413      	add	r3, r2
 8011732:	881b      	ldrh	r3, [r3, #0]
 8011734:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011736:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801173c:	2b00      	cmp	r3, #0
 801173e:	d01b      	beq.n	8011778 <USB_DeactivateEndpoint+0x2d4>
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	009b      	lsls	r3, r3, #2
 8011748:	4413      	add	r3, r2
 801174a:	881b      	ldrh	r3, [r3, #0]
 801174c:	b29b      	uxth	r3, r3
 801174e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011756:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8011758:	687a      	ldr	r2, [r7, #4]
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	781b      	ldrb	r3, [r3, #0]
 801175e:	009b      	lsls	r3, r3, #2
 8011760:	441a      	add	r2, r3
 8011762:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801176c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011774:	b29b      	uxth	r3, r3
 8011776:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011778:	687a      	ldr	r2, [r7, #4]
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	781b      	ldrb	r3, [r3, #0]
 801177e:	009b      	lsls	r3, r3, #2
 8011780:	4413      	add	r3, r2
 8011782:	881b      	ldrh	r3, [r3, #0]
 8011784:	857b      	strh	r3, [r7, #42]	; 0x2a
 8011786:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801178c:	2b00      	cmp	r3, #0
 801178e:	d01b      	beq.n	80117c8 <USB_DeactivateEndpoint+0x324>
 8011790:	687a      	ldr	r2, [r7, #4]
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	009b      	lsls	r3, r3, #2
 8011798:	4413      	add	r3, r2
 801179a:	881b      	ldrh	r3, [r3, #0]
 801179c:	b29b      	uxth	r3, r3
 801179e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80117a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80117a8:	687a      	ldr	r2, [r7, #4]
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	009b      	lsls	r3, r3, #2
 80117b0:	441a      	add	r2, r3
 80117b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80117b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80117b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80117bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80117c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80117c8:	687a      	ldr	r2, [r7, #4]
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	781b      	ldrb	r3, [r3, #0]
 80117ce:	009b      	lsls	r3, r3, #2
 80117d0:	4413      	add	r3, r2
 80117d2:	881b      	ldrh	r3, [r3, #0]
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80117da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	009b      	lsls	r3, r3, #2
 80117e8:	441a      	add	r2, r3
 80117ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80117ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80117f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80117f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80117f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011800:	687a      	ldr	r2, [r7, #4]
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	009b      	lsls	r3, r3, #2
 8011808:	4413      	add	r3, r2
 801180a:	881b      	ldrh	r3, [r3, #0]
 801180c:	b29b      	uxth	r3, r3
 801180e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011816:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011818:	687a      	ldr	r2, [r7, #4]
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	009b      	lsls	r3, r3, #2
 8011820:	441a      	add	r2, r3
 8011822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801182c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011834:	b29b      	uxth	r3, r3
 8011836:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011838:	687a      	ldr	r2, [r7, #4]
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	009b      	lsls	r3, r3, #2
 8011840:	4413      	add	r3, r2
 8011842:	881b      	ldrh	r3, [r3, #0]
 8011844:	b29b      	uxth	r3, r3
 8011846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801184a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801184e:	847b      	strh	r3, [r7, #34]	; 0x22
 8011850:	687a      	ldr	r2, [r7, #4]
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	009b      	lsls	r3, r3, #2
 8011858:	441a      	add	r2, r3
 801185a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801185c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801186c:	b29b      	uxth	r3, r3
 801186e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011870:	2300      	movs	r3, #0
}
 8011872:	4618      	mov	r0, r3
 8011874:	3734      	adds	r7, #52	; 0x34
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr

0801187e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801187e:	b580      	push	{r7, lr}
 8011880:	b0c2      	sub	sp, #264	; 0x108
 8011882:	af00      	add	r7, sp, #0
 8011884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011888:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801188c:	6018      	str	r0, [r3, #0]
 801188e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011896:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801189c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	785b      	ldrb	r3, [r3, #1]
 80118a4:	2b01      	cmp	r3, #1
 80118a6:	f040 86b7 	bne.w	8012618 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80118aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	699a      	ldr	r2, [r3, #24]
 80118b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	691b      	ldr	r3, [r3, #16]
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d908      	bls.n	80118d8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80118c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	691b      	ldr	r3, [r3, #16]
 80118d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80118d6:	e007      	b.n	80118e8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80118d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	699b      	ldr	r3, [r3, #24]
 80118e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80118e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	7b1b      	ldrb	r3, [r3, #12]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d13a      	bne.n	801196e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80118f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	6959      	ldr	r1, [r3, #20]
 8011904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	88da      	ldrh	r2, [r3, #6]
 8011910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011914:	b29b      	uxth	r3, r3
 8011916:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801191a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801191e:	6800      	ldr	r0, [r0, #0]
 8011920:	f001 fc98 	bl	8013254 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011928:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	613b      	str	r3, [r7, #16]
 8011930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801193e:	b29b      	uxth	r3, r3
 8011940:	461a      	mov	r2, r3
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	4413      	add	r3, r2
 8011946:	613b      	str	r3, [r7, #16]
 8011948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801194c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	00da      	lsls	r2, r3, #3
 8011956:	693b      	ldr	r3, [r7, #16]
 8011958:	4413      	add	r3, r2
 801195a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801195e:	60fb      	str	r3, [r7, #12]
 8011960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011964:	b29a      	uxth	r2, r3
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	801a      	strh	r2, [r3, #0]
 801196a:	f000 be1f 	b.w	80125ac <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801196e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	78db      	ldrb	r3, [r3, #3]
 801197a:	2b02      	cmp	r3, #2
 801197c:	f040 8462 	bne.w	8012244 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	6a1a      	ldr	r2, [r3, #32]
 801198c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	691b      	ldr	r3, [r3, #16]
 8011998:	429a      	cmp	r2, r3
 801199a:	f240 83df 	bls.w	801215c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801199e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119a6:	681a      	ldr	r2, [r3, #0]
 80119a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	009b      	lsls	r3, r3, #2
 80119b6:	4413      	add	r3, r2
 80119b8:	881b      	ldrh	r3, [r3, #0]
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80119c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80119c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80119c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119d0:	681a      	ldr	r2, [r3, #0]
 80119d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	781b      	ldrb	r3, [r3, #0]
 80119de:	009b      	lsls	r3, r3, #2
 80119e0:	441a      	add	r2, r3
 80119e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80119e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80119ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80119ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80119f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119f6:	b29b      	uxth	r3, r3
 80119f8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80119fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	6a1a      	ldr	r2, [r3, #32]
 8011a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a0a:	1ad2      	subs	r2, r2, r3
 8011a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a20:	681a      	ldr	r2, [r3, #0]
 8011a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	781b      	ldrb	r3, [r3, #0]
 8011a2e:	009b      	lsls	r3, r3, #2
 8011a30:	4413      	add	r3, r2
 8011a32:	881b      	ldrh	r3, [r3, #0]
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	f000 81c7 	beq.w	8011dce <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	633b      	str	r3, [r7, #48]	; 0x30
 8011a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	785b      	ldrb	r3, [r3, #1]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d177      	bne.n	8011b4c <USB_EPStartXfer+0x2ce>
 8011a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a76:	b29b      	uxth	r3, r3
 8011a78:	461a      	mov	r2, r3
 8011a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a7c:	4413      	add	r3, r2
 8011a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	00da      	lsls	r2, r3, #3
 8011a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a90:	4413      	add	r3, r2
 8011a92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011a96:	627b      	str	r3, [r7, #36]	; 0x24
 8011a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a9a:	881b      	ldrh	r3, [r3, #0]
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011aa2:	b29a      	uxth	r2, r3
 8011aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa6:	801a      	strh	r2, [r3, #0]
 8011aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011aac:	2b3e      	cmp	r3, #62	; 0x3e
 8011aae:	d921      	bls.n	8011af4 <USB_EPStartXfer+0x276>
 8011ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ab4:	095b      	lsrs	r3, r3, #5
 8011ab6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011abe:	f003 031f 	and.w	r3, r3, #31
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d104      	bne.n	8011ad0 <USB_EPStartXfer+0x252>
 8011ac6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011aca:	3b01      	subs	r3, #1
 8011acc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad2:	881b      	ldrh	r3, [r3, #0]
 8011ad4:	b29a      	uxth	r2, r3
 8011ad6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	029b      	lsls	r3, r3, #10
 8011ade:	b29b      	uxth	r3, r3
 8011ae0:	4313      	orrs	r3, r2
 8011ae2:	b29b      	uxth	r3, r3
 8011ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011aec:	b29a      	uxth	r2, r3
 8011aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af0:	801a      	strh	r2, [r3, #0]
 8011af2:	e050      	b.n	8011b96 <USB_EPStartXfer+0x318>
 8011af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d10a      	bne.n	8011b12 <USB_EPStartXfer+0x294>
 8011afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011afe:	881b      	ldrh	r3, [r3, #0]
 8011b00:	b29b      	uxth	r3, r3
 8011b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011b0a:	b29a      	uxth	r2, r3
 8011b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b0e:	801a      	strh	r2, [r3, #0]
 8011b10:	e041      	b.n	8011b96 <USB_EPStartXfer+0x318>
 8011b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b16:	085b      	lsrs	r3, r3, #1
 8011b18:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b20:	f003 0301 	and.w	r3, r3, #1
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d004      	beq.n	8011b32 <USB_EPStartXfer+0x2b4>
 8011b28:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b34:	881b      	ldrh	r3, [r3, #0]
 8011b36:	b29a      	uxth	r2, r3
 8011b38:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011b3c:	b29b      	uxth	r3, r3
 8011b3e:	029b      	lsls	r3, r3, #10
 8011b40:	b29b      	uxth	r3, r3
 8011b42:	4313      	orrs	r3, r2
 8011b44:	b29a      	uxth	r2, r3
 8011b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b48:	801a      	strh	r2, [r3, #0]
 8011b4a:	e024      	b.n	8011b96 <USB_EPStartXfer+0x318>
 8011b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	785b      	ldrb	r3, [r3, #1]
 8011b58:	2b01      	cmp	r3, #1
 8011b5a:	d11c      	bne.n	8011b96 <USB_EPStartXfer+0x318>
 8011b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b6a:	b29b      	uxth	r3, r3
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b70:	4413      	add	r3, r2
 8011b72:	633b      	str	r3, [r7, #48]	; 0x30
 8011b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	00da      	lsls	r2, r3, #3
 8011b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b84:	4413      	add	r3, r2
 8011b86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	895b      	ldrh	r3, [r3, #10]
 8011ba2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	6959      	ldr	r1, [r3, #20]
 8011bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011bbc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011bc0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011bc4:	6800      	ldr	r0, [r0, #0]
 8011bc6:	f001 fb45 	bl	8013254 <USB_WritePMA>
            ep->xfer_buff += len;
 8011bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	695a      	ldr	r2, [r3, #20]
 8011bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bda:	441a      	add	r2, r3
 8011bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	6a1a      	ldr	r2, [r3, #32]
 8011bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	691b      	ldr	r3, [r3, #16]
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d90f      	bls.n	8011c24 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8011c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	6a1a      	ldr	r2, [r3, #32]
 8011c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c14:	1ad2      	subs	r2, r2, r3
 8011c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	621a      	str	r2, [r3, #32]
 8011c22:	e00e      	b.n	8011c42 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8011c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	6a1b      	ldr	r3, [r3, #32]
 8011c30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8011c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	785b      	ldrb	r3, [r3, #1]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d177      	bne.n	8011d42 <USB_EPStartXfer+0x4c4>
 8011c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	61bb      	str	r3, [r7, #24]
 8011c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011c6c:	b29b      	uxth	r3, r3
 8011c6e:	461a      	mov	r2, r3
 8011c70:	69bb      	ldr	r3, [r7, #24]
 8011c72:	4413      	add	r3, r2
 8011c74:	61bb      	str	r3, [r7, #24]
 8011c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	00da      	lsls	r2, r3, #3
 8011c84:	69bb      	ldr	r3, [r7, #24]
 8011c86:	4413      	add	r3, r2
 8011c88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011c8c:	617b      	str	r3, [r7, #20]
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	881b      	ldrh	r3, [r3, #0]
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011c98:	b29a      	uxth	r2, r3
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	801a      	strh	r2, [r3, #0]
 8011c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ca2:	2b3e      	cmp	r3, #62	; 0x3e
 8011ca4:	d921      	bls.n	8011cea <USB_EPStartXfer+0x46c>
 8011ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011caa:	095b      	lsrs	r3, r3, #5
 8011cac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cb4:	f003 031f 	and.w	r3, r3, #31
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d104      	bne.n	8011cc6 <USB_EPStartXfer+0x448>
 8011cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011cc0:	3b01      	subs	r3, #1
 8011cc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011cc6:	697b      	ldr	r3, [r7, #20]
 8011cc8:	881b      	ldrh	r3, [r3, #0]
 8011cca:	b29a      	uxth	r2, r3
 8011ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	029b      	lsls	r3, r3, #10
 8011cd4:	b29b      	uxth	r3, r3
 8011cd6:	4313      	orrs	r3, r2
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ce2:	b29a      	uxth	r2, r3
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	801a      	strh	r2, [r3, #0]
 8011ce8:	e056      	b.n	8011d98 <USB_EPStartXfer+0x51a>
 8011cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d10a      	bne.n	8011d08 <USB_EPStartXfer+0x48a>
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	881b      	ldrh	r3, [r3, #0]
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011d00:	b29a      	uxth	r2, r3
 8011d02:	697b      	ldr	r3, [r7, #20]
 8011d04:	801a      	strh	r2, [r3, #0]
 8011d06:	e047      	b.n	8011d98 <USB_EPStartXfer+0x51a>
 8011d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d0c:	085b      	lsrs	r3, r3, #1
 8011d0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d16:	f003 0301 	and.w	r3, r3, #1
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d004      	beq.n	8011d28 <USB_EPStartXfer+0x4aa>
 8011d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011d22:	3301      	adds	r3, #1
 8011d24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	881b      	ldrh	r3, [r3, #0]
 8011d2c:	b29a      	uxth	r2, r3
 8011d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011d32:	b29b      	uxth	r3, r3
 8011d34:	029b      	lsls	r3, r3, #10
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	4313      	orrs	r3, r2
 8011d3a:	b29a      	uxth	r2, r3
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	801a      	strh	r2, [r3, #0]
 8011d40:	e02a      	b.n	8011d98 <USB_EPStartXfer+0x51a>
 8011d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	785b      	ldrb	r3, [r3, #1]
 8011d4e:	2b01      	cmp	r3, #1
 8011d50:	d122      	bne.n	8011d98 <USB_EPStartXfer+0x51a>
 8011d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	623b      	str	r3, [r7, #32]
 8011d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d6c:	b29b      	uxth	r3, r3
 8011d6e:	461a      	mov	r2, r3
 8011d70:	6a3b      	ldr	r3, [r7, #32]
 8011d72:	4413      	add	r3, r2
 8011d74:	623b      	str	r3, [r7, #32]
 8011d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	781b      	ldrb	r3, [r3, #0]
 8011d82:	00da      	lsls	r2, r3, #3
 8011d84:	6a3b      	ldr	r3, [r7, #32]
 8011d86:	4413      	add	r3, r2
 8011d88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011d8c:	61fb      	str	r3, [r7, #28]
 8011d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d92:	b29a      	uxth	r2, r3
 8011d94:	69fb      	ldr	r3, [r7, #28]
 8011d96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	891b      	ldrh	r3, [r3, #8]
 8011da4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	6959      	ldr	r1, [r3, #20]
 8011db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011dbe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011dc2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011dc6:	6800      	ldr	r0, [r0, #0]
 8011dc8:	f001 fa44 	bl	8013254 <USB_WritePMA>
 8011dcc:	e3ee      	b.n	80125ac <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	785b      	ldrb	r3, [r3, #1]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d177      	bne.n	8011ece <USB_EPStartXfer+0x650>
 8011dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	64bb      	str	r3, [r7, #72]	; 0x48
 8011dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	461a      	mov	r2, r3
 8011dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011dfe:	4413      	add	r3, r2
 8011e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	781b      	ldrb	r3, [r3, #0]
 8011e0e:	00da      	lsls	r2, r3, #3
 8011e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e12:	4413      	add	r3, r2
 8011e14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011e18:	647b      	str	r3, [r7, #68]	; 0x44
 8011e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e1c:	881b      	ldrh	r3, [r3, #0]
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011e24:	b29a      	uxth	r2, r3
 8011e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e28:	801a      	strh	r2, [r3, #0]
 8011e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e2e:	2b3e      	cmp	r3, #62	; 0x3e
 8011e30:	d921      	bls.n	8011e76 <USB_EPStartXfer+0x5f8>
 8011e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e36:	095b      	lsrs	r3, r3, #5
 8011e38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e40:	f003 031f 	and.w	r3, r3, #31
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d104      	bne.n	8011e52 <USB_EPStartXfer+0x5d4>
 8011e48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011e4c:	3b01      	subs	r3, #1
 8011e4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e54:	881b      	ldrh	r3, [r3, #0]
 8011e56:	b29a      	uxth	r2, r3
 8011e58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011e5c:	b29b      	uxth	r3, r3
 8011e5e:	029b      	lsls	r3, r3, #10
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	4313      	orrs	r3, r2
 8011e64:	b29b      	uxth	r3, r3
 8011e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e6e:	b29a      	uxth	r2, r3
 8011e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e72:	801a      	strh	r2, [r3, #0]
 8011e74:	e056      	b.n	8011f24 <USB_EPStartXfer+0x6a6>
 8011e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d10a      	bne.n	8011e94 <USB_EPStartXfer+0x616>
 8011e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e80:	881b      	ldrh	r3, [r3, #0]
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e8c:	b29a      	uxth	r2, r3
 8011e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e90:	801a      	strh	r2, [r3, #0]
 8011e92:	e047      	b.n	8011f24 <USB_EPStartXfer+0x6a6>
 8011e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e98:	085b      	lsrs	r3, r3, #1
 8011e9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ea2:	f003 0301 	and.w	r3, r3, #1
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d004      	beq.n	8011eb4 <USB_EPStartXfer+0x636>
 8011eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011eae:	3301      	adds	r3, #1
 8011eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011eb6:	881b      	ldrh	r3, [r3, #0]
 8011eb8:	b29a      	uxth	r2, r3
 8011eba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	029b      	lsls	r3, r3, #10
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	4313      	orrs	r3, r2
 8011ec6:	b29a      	uxth	r2, r3
 8011ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011eca:	801a      	strh	r2, [r3, #0]
 8011ecc:	e02a      	b.n	8011f24 <USB_EPStartXfer+0x6a6>
 8011ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	785b      	ldrb	r3, [r3, #1]
 8011eda:	2b01      	cmp	r3, #1
 8011edc:	d122      	bne.n	8011f24 <USB_EPStartXfer+0x6a6>
 8011ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	653b      	str	r3, [r7, #80]	; 0x50
 8011eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	461a      	mov	r2, r3
 8011efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011efe:	4413      	add	r3, r2
 8011f00:	653b      	str	r3, [r7, #80]	; 0x50
 8011f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	00da      	lsls	r2, r3, #3
 8011f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f12:	4413      	add	r3, r2
 8011f14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011f18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f1e:	b29a      	uxth	r2, r3
 8011f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	891b      	ldrh	r3, [r3, #8]
 8011f30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	6959      	ldr	r1, [r3, #20]
 8011f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f44:	b29b      	uxth	r3, r3
 8011f46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011f4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011f4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011f52:	6800      	ldr	r0, [r0, #0]
 8011f54:	f001 f97e 	bl	8013254 <USB_WritePMA>
            ep->xfer_buff += len;
 8011f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	695a      	ldr	r2, [r3, #20]
 8011f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f68:	441a      	add	r2, r3
 8011f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	6a1a      	ldr	r2, [r3, #32]
 8011f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	691b      	ldr	r3, [r3, #16]
 8011f8e:	429a      	cmp	r2, r3
 8011f90:	d90f      	bls.n	8011fb2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8011f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	6a1a      	ldr	r2, [r3, #32]
 8011f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fa2:	1ad2      	subs	r2, r2, r3
 8011fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	621a      	str	r2, [r3, #32]
 8011fb0:	e00e      	b.n	8011fd0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8011fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	6a1b      	ldr	r3, [r3, #32]
 8011fbe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8011fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	2200      	movs	r2, #0
 8011fce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	643b      	str	r3, [r7, #64]	; 0x40
 8011fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	785b      	ldrb	r3, [r3, #1]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d177      	bne.n	80120dc <USB_EPStartXfer+0x85e>
 8011fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8011ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012006:	b29b      	uxth	r3, r3
 8012008:	461a      	mov	r2, r3
 801200a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801200c:	4413      	add	r3, r2
 801200e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	00da      	lsls	r2, r3, #3
 801201e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012020:	4413      	add	r3, r2
 8012022:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012026:	637b      	str	r3, [r7, #52]	; 0x34
 8012028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801202a:	881b      	ldrh	r3, [r3, #0]
 801202c:	b29b      	uxth	r3, r3
 801202e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012032:	b29a      	uxth	r2, r3
 8012034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012036:	801a      	strh	r2, [r3, #0]
 8012038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801203c:	2b3e      	cmp	r3, #62	; 0x3e
 801203e:	d921      	bls.n	8012084 <USB_EPStartXfer+0x806>
 8012040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012044:	095b      	lsrs	r3, r3, #5
 8012046:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801204a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801204e:	f003 031f 	and.w	r3, r3, #31
 8012052:	2b00      	cmp	r3, #0
 8012054:	d104      	bne.n	8012060 <USB_EPStartXfer+0x7e2>
 8012056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801205a:	3b01      	subs	r3, #1
 801205c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012062:	881b      	ldrh	r3, [r3, #0]
 8012064:	b29a      	uxth	r2, r3
 8012066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801206a:	b29b      	uxth	r3, r3
 801206c:	029b      	lsls	r3, r3, #10
 801206e:	b29b      	uxth	r3, r3
 8012070:	4313      	orrs	r3, r2
 8012072:	b29b      	uxth	r3, r3
 8012074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801207c:	b29a      	uxth	r2, r3
 801207e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012080:	801a      	strh	r2, [r3, #0]
 8012082:	e050      	b.n	8012126 <USB_EPStartXfer+0x8a8>
 8012084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012088:	2b00      	cmp	r3, #0
 801208a:	d10a      	bne.n	80120a2 <USB_EPStartXfer+0x824>
 801208c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801208e:	881b      	ldrh	r3, [r3, #0]
 8012090:	b29b      	uxth	r3, r3
 8012092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801209a:	b29a      	uxth	r2, r3
 801209c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801209e:	801a      	strh	r2, [r3, #0]
 80120a0:	e041      	b.n	8012126 <USB_EPStartXfer+0x8a8>
 80120a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120a6:	085b      	lsrs	r3, r3, #1
 80120a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80120ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120b0:	f003 0301 	and.w	r3, r3, #1
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d004      	beq.n	80120c2 <USB_EPStartXfer+0x844>
 80120b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120bc:	3301      	adds	r3, #1
 80120be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80120c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120c4:	881b      	ldrh	r3, [r3, #0]
 80120c6:	b29a      	uxth	r2, r3
 80120c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120cc:	b29b      	uxth	r3, r3
 80120ce:	029b      	lsls	r3, r3, #10
 80120d0:	b29b      	uxth	r3, r3
 80120d2:	4313      	orrs	r3, r2
 80120d4:	b29a      	uxth	r2, r3
 80120d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120d8:	801a      	strh	r2, [r3, #0]
 80120da:	e024      	b.n	8012126 <USB_EPStartXfer+0x8a8>
 80120dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	785b      	ldrb	r3, [r3, #1]
 80120e8:	2b01      	cmp	r3, #1
 80120ea:	d11c      	bne.n	8012126 <USB_EPStartXfer+0x8a8>
 80120ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	461a      	mov	r2, r3
 80120fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012100:	4413      	add	r3, r2
 8012102:	643b      	str	r3, [r7, #64]	; 0x40
 8012104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	00da      	lsls	r2, r3, #3
 8012112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012114:	4413      	add	r3, r2
 8012116:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801211a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801211c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012120:	b29a      	uxth	r2, r3
 8012122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012124:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801212a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	895b      	ldrh	r3, [r3, #10]
 8012132:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801213a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	6959      	ldr	r1, [r3, #20]
 8012142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012146:	b29b      	uxth	r3, r3
 8012148:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801214c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012150:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012154:	6800      	ldr	r0, [r0, #0]
 8012156:	f001 f87d 	bl	8013254 <USB_WritePMA>
 801215a:	e227      	b.n	80125ac <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801215c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	6a1b      	ldr	r3, [r3, #32]
 8012168:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801216c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801217a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	781b      	ldrb	r3, [r3, #0]
 8012182:	009b      	lsls	r3, r3, #2
 8012184:	4413      	add	r3, r2
 8012186:	881b      	ldrh	r3, [r3, #0]
 8012188:	b29b      	uxth	r3, r3
 801218a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801218e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012192:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8012196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801219a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801219e:	681a      	ldr	r2, [r3, #0]
 80121a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	009b      	lsls	r3, r3, #2
 80121ae:	441a      	add	r2, r3
 80121b0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80121b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80121b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80121bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80121c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121c4:	b29b      	uxth	r3, r3
 80121c6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80121c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80121d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	461a      	mov	r2, r3
 80121e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80121e8:	4413      	add	r3, r2
 80121ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80121ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	00da      	lsls	r2, r3, #3
 80121fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80121fc:	4413      	add	r3, r2
 80121fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012202:	65bb      	str	r3, [r7, #88]	; 0x58
 8012204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012208:	b29a      	uxth	r2, r3
 801220a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801220c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801220e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	891b      	ldrh	r3, [r3, #8]
 801221a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801221e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	6959      	ldr	r1, [r3, #20]
 801222a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801222e:	b29b      	uxth	r3, r3
 8012230:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012234:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012238:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801223c:	6800      	ldr	r0, [r0, #0]
 801223e:	f001 f809 	bl	8013254 <USB_WritePMA>
 8012242:	e1b3      	b.n	80125ac <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	6a1a      	ldr	r2, [r3, #32]
 8012250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012254:	1ad2      	subs	r2, r2, r3
 8012256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801225a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801226a:	681a      	ldr	r2, [r3, #0]
 801226c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	781b      	ldrb	r3, [r3, #0]
 8012278:	009b      	lsls	r3, r3, #2
 801227a:	4413      	add	r3, r2
 801227c:	881b      	ldrh	r3, [r3, #0]
 801227e:	b29b      	uxth	r3, r3
 8012280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012284:	2b00      	cmp	r3, #0
 8012286:	f000 80c6 	beq.w	8012416 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801228a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801228e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	673b      	str	r3, [r7, #112]	; 0x70
 8012296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801229a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	785b      	ldrb	r3, [r3, #1]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d177      	bne.n	8012396 <USB_EPStartXfer+0xb18>
 80122a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80122b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	461a      	mov	r2, r3
 80122c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80122c6:	4413      	add	r3, r2
 80122c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80122ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	781b      	ldrb	r3, [r3, #0]
 80122d6:	00da      	lsls	r2, r3, #3
 80122d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80122da:	4413      	add	r3, r2
 80122dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80122e0:	667b      	str	r3, [r7, #100]	; 0x64
 80122e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122e4:	881b      	ldrh	r3, [r3, #0]
 80122e6:	b29b      	uxth	r3, r3
 80122e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80122ec:	b29a      	uxth	r2, r3
 80122ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122f0:	801a      	strh	r2, [r3, #0]
 80122f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122f6:	2b3e      	cmp	r3, #62	; 0x3e
 80122f8:	d921      	bls.n	801233e <USB_EPStartXfer+0xac0>
 80122fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122fe:	095b      	lsrs	r3, r3, #5
 8012300:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012308:	f003 031f 	and.w	r3, r3, #31
 801230c:	2b00      	cmp	r3, #0
 801230e:	d104      	bne.n	801231a <USB_EPStartXfer+0xa9c>
 8012310:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012314:	3b01      	subs	r3, #1
 8012316:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801231a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801231c:	881b      	ldrh	r3, [r3, #0]
 801231e:	b29a      	uxth	r2, r3
 8012320:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012324:	b29b      	uxth	r3, r3
 8012326:	029b      	lsls	r3, r3, #10
 8012328:	b29b      	uxth	r3, r3
 801232a:	4313      	orrs	r3, r2
 801232c:	b29b      	uxth	r3, r3
 801232e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012336:	b29a      	uxth	r2, r3
 8012338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801233a:	801a      	strh	r2, [r3, #0]
 801233c:	e050      	b.n	80123e0 <USB_EPStartXfer+0xb62>
 801233e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012342:	2b00      	cmp	r3, #0
 8012344:	d10a      	bne.n	801235c <USB_EPStartXfer+0xade>
 8012346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012348:	881b      	ldrh	r3, [r3, #0]
 801234a:	b29b      	uxth	r3, r3
 801234c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012354:	b29a      	uxth	r2, r3
 8012356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012358:	801a      	strh	r2, [r3, #0]
 801235a:	e041      	b.n	80123e0 <USB_EPStartXfer+0xb62>
 801235c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012360:	085b      	lsrs	r3, r3, #1
 8012362:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801236a:	f003 0301 	and.w	r3, r3, #1
 801236e:	2b00      	cmp	r3, #0
 8012370:	d004      	beq.n	801237c <USB_EPStartXfer+0xafe>
 8012372:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012376:	3301      	adds	r3, #1
 8012378:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801237c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801237e:	881b      	ldrh	r3, [r3, #0]
 8012380:	b29a      	uxth	r2, r3
 8012382:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012386:	b29b      	uxth	r3, r3
 8012388:	029b      	lsls	r3, r3, #10
 801238a:	b29b      	uxth	r3, r3
 801238c:	4313      	orrs	r3, r2
 801238e:	b29a      	uxth	r2, r3
 8012390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012392:	801a      	strh	r2, [r3, #0]
 8012394:	e024      	b.n	80123e0 <USB_EPStartXfer+0xb62>
 8012396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801239a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	785b      	ldrb	r3, [r3, #1]
 80123a2:	2b01      	cmp	r3, #1
 80123a4:	d11c      	bne.n	80123e0 <USB_EPStartXfer+0xb62>
 80123a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	461a      	mov	r2, r3
 80123b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80123ba:	4413      	add	r3, r2
 80123bc:	673b      	str	r3, [r7, #112]	; 0x70
 80123be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	781b      	ldrb	r3, [r3, #0]
 80123ca:	00da      	lsls	r2, r3, #3
 80123cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80123ce:	4413      	add	r3, r2
 80123d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80123d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80123d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123da:	b29a      	uxth	r2, r3
 80123dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80123e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	895b      	ldrh	r3, [r3, #10]
 80123ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80123f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	6959      	ldr	r1, [r3, #20]
 80123fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012400:	b29b      	uxth	r3, r3
 8012402:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012406:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801240a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801240e:	6800      	ldr	r0, [r0, #0]
 8012410:	f000 ff20 	bl	8013254 <USB_WritePMA>
 8012414:	e0ca      	b.n	80125ac <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801241a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	785b      	ldrb	r3, [r3, #1]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d177      	bne.n	8012516 <USB_EPStartXfer+0xc98>
 8012426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801242a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012440:	b29b      	uxth	r3, r3
 8012442:	461a      	mov	r2, r3
 8012444:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012446:	4413      	add	r3, r2
 8012448:	67fb      	str	r3, [r7, #124]	; 0x7c
 801244a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801244e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	781b      	ldrb	r3, [r3, #0]
 8012456:	00da      	lsls	r2, r3, #3
 8012458:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801245a:	4413      	add	r3, r2
 801245c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012460:	67bb      	str	r3, [r7, #120]	; 0x78
 8012462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012464:	881b      	ldrh	r3, [r3, #0]
 8012466:	b29b      	uxth	r3, r3
 8012468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801246c:	b29a      	uxth	r2, r3
 801246e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012470:	801a      	strh	r2, [r3, #0]
 8012472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012476:	2b3e      	cmp	r3, #62	; 0x3e
 8012478:	d921      	bls.n	80124be <USB_EPStartXfer+0xc40>
 801247a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801247e:	095b      	lsrs	r3, r3, #5
 8012480:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012488:	f003 031f 	and.w	r3, r3, #31
 801248c:	2b00      	cmp	r3, #0
 801248e:	d104      	bne.n	801249a <USB_EPStartXfer+0xc1c>
 8012490:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012494:	3b01      	subs	r3, #1
 8012496:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801249a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801249c:	881b      	ldrh	r3, [r3, #0]
 801249e:	b29a      	uxth	r2, r3
 80124a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80124a4:	b29b      	uxth	r3, r3
 80124a6:	029b      	lsls	r3, r3, #10
 80124a8:	b29b      	uxth	r3, r3
 80124aa:	4313      	orrs	r3, r2
 80124ac:	b29b      	uxth	r3, r3
 80124ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80124b6:	b29a      	uxth	r2, r3
 80124b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80124ba:	801a      	strh	r2, [r3, #0]
 80124bc:	e05c      	b.n	8012578 <USB_EPStartXfer+0xcfa>
 80124be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d10a      	bne.n	80124dc <USB_EPStartXfer+0xc5e>
 80124c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80124c8:	881b      	ldrh	r3, [r3, #0]
 80124ca:	b29b      	uxth	r3, r3
 80124cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80124d4:	b29a      	uxth	r2, r3
 80124d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80124d8:	801a      	strh	r2, [r3, #0]
 80124da:	e04d      	b.n	8012578 <USB_EPStartXfer+0xcfa>
 80124dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124e0:	085b      	lsrs	r3, r3, #1
 80124e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80124e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124ea:	f003 0301 	and.w	r3, r3, #1
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d004      	beq.n	80124fc <USB_EPStartXfer+0xc7e>
 80124f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80124f6:	3301      	adds	r3, #1
 80124f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80124fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80124fe:	881b      	ldrh	r3, [r3, #0]
 8012500:	b29a      	uxth	r2, r3
 8012502:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012506:	b29b      	uxth	r3, r3
 8012508:	029b      	lsls	r3, r3, #10
 801250a:	b29b      	uxth	r3, r3
 801250c:	4313      	orrs	r3, r2
 801250e:	b29a      	uxth	r2, r3
 8012510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012512:	801a      	strh	r2, [r3, #0]
 8012514:	e030      	b.n	8012578 <USB_EPStartXfer+0xcfa>
 8012516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801251a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	785b      	ldrb	r3, [r3, #1]
 8012522:	2b01      	cmp	r3, #1
 8012524:	d128      	bne.n	8012578 <USB_EPStartXfer+0xcfa>
 8012526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801252a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012538:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012542:	b29b      	uxth	r3, r3
 8012544:	461a      	mov	r2, r3
 8012546:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801254a:	4413      	add	r3, r2
 801254c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	00da      	lsls	r2, r3, #3
 801255e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012562:	4413      	add	r3, r2
 8012564:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801256c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012570:	b29a      	uxth	r2, r3
 8012572:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012576:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801257c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	891b      	ldrh	r3, [r3, #8]
 8012584:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801258c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	6959      	ldr	r1, [r3, #20]
 8012594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012598:	b29b      	uxth	r3, r3
 801259a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801259e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80125a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80125a6:	6800      	ldr	r0, [r0, #0]
 80125a8:	f000 fe54 	bl	8013254 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80125ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125b4:	681a      	ldr	r2, [r3, #0]
 80125b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	009b      	lsls	r3, r3, #2
 80125c4:	4413      	add	r3, r2
 80125c6:	881b      	ldrh	r3, [r3, #0]
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80125ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80125d2:	817b      	strh	r3, [r7, #10]
 80125d4:	897b      	ldrh	r3, [r7, #10]
 80125d6:	f083 0310 	eor.w	r3, r3, #16
 80125da:	817b      	strh	r3, [r7, #10]
 80125dc:	897b      	ldrh	r3, [r7, #10]
 80125de:	f083 0320 	eor.w	r3, r3, #32
 80125e2:	817b      	strh	r3, [r7, #10]
 80125e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125ec:	681a      	ldr	r2, [r3, #0]
 80125ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	009b      	lsls	r3, r3, #2
 80125fc:	441a      	add	r2, r3
 80125fe:	897b      	ldrh	r3, [r7, #10]
 8012600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801260c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012610:	b29b      	uxth	r3, r3
 8012612:	8013      	strh	r3, [r2, #0]
 8012614:	f000 bcde 	b.w	8012fd4 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801261c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	7b1b      	ldrb	r3, [r3, #12]
 8012624:	2b00      	cmp	r3, #0
 8012626:	f040 80bb 	bne.w	80127a0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801262a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801262e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	699a      	ldr	r2, [r3, #24]
 8012636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801263a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	691b      	ldr	r3, [r3, #16]
 8012642:	429a      	cmp	r2, r3
 8012644:	d917      	bls.n	8012676 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8012646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801264a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	691b      	ldr	r3, [r3, #16]
 8012652:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8012656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801265a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	699a      	ldr	r2, [r3, #24]
 8012662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012666:	1ad2      	subs	r2, r2, r3
 8012668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801266c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	619a      	str	r2, [r3, #24]
 8012674:	e00e      	b.n	8012694 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8012676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801267a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	699b      	ldr	r3, [r3, #24]
 8012682:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8012686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801268a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	2200      	movs	r2, #0
 8012692:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8012694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012698:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80126a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	461a      	mov	r2, r3
 80126b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80126b8:	4413      	add	r3, r2
 80126ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80126be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	00da      	lsls	r2, r3, #3
 80126cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80126d0:	4413      	add	r3, r2
 80126d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80126d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80126da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80126de:	881b      	ldrh	r3, [r3, #0]
 80126e0:	b29b      	uxth	r3, r3
 80126e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80126e6:	b29a      	uxth	r2, r3
 80126e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80126ec:	801a      	strh	r2, [r3, #0]
 80126ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126f2:	2b3e      	cmp	r3, #62	; 0x3e
 80126f4:	d924      	bls.n	8012740 <USB_EPStartXfer+0xec2>
 80126f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126fa:	095b      	lsrs	r3, r3, #5
 80126fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012704:	f003 031f 	and.w	r3, r3, #31
 8012708:	2b00      	cmp	r3, #0
 801270a:	d104      	bne.n	8012716 <USB_EPStartXfer+0xe98>
 801270c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012710:	3b01      	subs	r3, #1
 8012712:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801271a:	881b      	ldrh	r3, [r3, #0]
 801271c:	b29a      	uxth	r2, r3
 801271e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012722:	b29b      	uxth	r3, r3
 8012724:	029b      	lsls	r3, r3, #10
 8012726:	b29b      	uxth	r3, r3
 8012728:	4313      	orrs	r3, r2
 801272a:	b29b      	uxth	r3, r3
 801272c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012734:	b29a      	uxth	r2, r3
 8012736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801273a:	801a      	strh	r2, [r3, #0]
 801273c:	f000 bc10 	b.w	8012f60 <USB_EPStartXfer+0x16e2>
 8012740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012744:	2b00      	cmp	r3, #0
 8012746:	d10c      	bne.n	8012762 <USB_EPStartXfer+0xee4>
 8012748:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801274c:	881b      	ldrh	r3, [r3, #0]
 801274e:	b29b      	uxth	r3, r3
 8012750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012758:	b29a      	uxth	r2, r3
 801275a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801275e:	801a      	strh	r2, [r3, #0]
 8012760:	e3fe      	b.n	8012f60 <USB_EPStartXfer+0x16e2>
 8012762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012766:	085b      	lsrs	r3, r3, #1
 8012768:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801276c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012770:	f003 0301 	and.w	r3, r3, #1
 8012774:	2b00      	cmp	r3, #0
 8012776:	d004      	beq.n	8012782 <USB_EPStartXfer+0xf04>
 8012778:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801277c:	3301      	adds	r3, #1
 801277e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012786:	881b      	ldrh	r3, [r3, #0]
 8012788:	b29a      	uxth	r2, r3
 801278a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801278e:	b29b      	uxth	r3, r3
 8012790:	029b      	lsls	r3, r3, #10
 8012792:	b29b      	uxth	r3, r3
 8012794:	4313      	orrs	r3, r2
 8012796:	b29a      	uxth	r2, r3
 8012798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801279c:	801a      	strh	r2, [r3, #0]
 801279e:	e3df      	b.n	8012f60 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80127a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	78db      	ldrb	r3, [r3, #3]
 80127ac:	2b02      	cmp	r3, #2
 80127ae:	f040 8218 	bne.w	8012be2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80127b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	785b      	ldrb	r3, [r3, #1]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	f040 809d 	bne.w	80128fe <USB_EPStartXfer+0x1080>
 80127c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80127d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	461a      	mov	r2, r3
 80127e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80127e8:	4413      	add	r3, r2
 80127ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80127ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	00da      	lsls	r2, r3, #3
 80127fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012800:	4413      	add	r3, r2
 8012802:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801280a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801280e:	881b      	ldrh	r3, [r3, #0]
 8012810:	b29b      	uxth	r3, r3
 8012812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012816:	b29a      	uxth	r2, r3
 8012818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801281c:	801a      	strh	r2, [r3, #0]
 801281e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	691b      	ldr	r3, [r3, #16]
 801282a:	2b3e      	cmp	r3, #62	; 0x3e
 801282c:	d92b      	bls.n	8012886 <USB_EPStartXfer+0x1008>
 801282e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	691b      	ldr	r3, [r3, #16]
 801283a:	095b      	lsrs	r3, r3, #5
 801283c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	691b      	ldr	r3, [r3, #16]
 801284c:	f003 031f 	and.w	r3, r3, #31
 8012850:	2b00      	cmp	r3, #0
 8012852:	d104      	bne.n	801285e <USB_EPStartXfer+0xfe0>
 8012854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012858:	3b01      	subs	r3, #1
 801285a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801285e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012862:	881b      	ldrh	r3, [r3, #0]
 8012864:	b29a      	uxth	r2, r3
 8012866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801286a:	b29b      	uxth	r3, r3
 801286c:	029b      	lsls	r3, r3, #10
 801286e:	b29b      	uxth	r3, r3
 8012870:	4313      	orrs	r3, r2
 8012872:	b29b      	uxth	r3, r3
 8012874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801287c:	b29a      	uxth	r2, r3
 801287e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012882:	801a      	strh	r2, [r3, #0]
 8012884:	e070      	b.n	8012968 <USB_EPStartXfer+0x10ea>
 8012886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801288a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	691b      	ldr	r3, [r3, #16]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d10c      	bne.n	80128b0 <USB_EPStartXfer+0x1032>
 8012896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801289a:	881b      	ldrh	r3, [r3, #0]
 801289c:	b29b      	uxth	r3, r3
 801289e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80128a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80128a6:	b29a      	uxth	r2, r3
 80128a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80128ac:	801a      	strh	r2, [r3, #0]
 80128ae:	e05b      	b.n	8012968 <USB_EPStartXfer+0x10ea>
 80128b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	691b      	ldr	r3, [r3, #16]
 80128bc:	085b      	lsrs	r3, r3, #1
 80128be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80128c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	691b      	ldr	r3, [r3, #16]
 80128ce:	f003 0301 	and.w	r3, r3, #1
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d004      	beq.n	80128e0 <USB_EPStartXfer+0x1062>
 80128d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80128da:	3301      	adds	r3, #1
 80128dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80128e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80128e4:	881b      	ldrh	r3, [r3, #0]
 80128e6:	b29a      	uxth	r2, r3
 80128e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80128ec:	b29b      	uxth	r3, r3
 80128ee:	029b      	lsls	r3, r3, #10
 80128f0:	b29b      	uxth	r3, r3
 80128f2:	4313      	orrs	r3, r2
 80128f4:	b29a      	uxth	r2, r3
 80128f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80128fa:	801a      	strh	r2, [r3, #0]
 80128fc:	e034      	b.n	8012968 <USB_EPStartXfer+0x10ea>
 80128fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	785b      	ldrb	r3, [r3, #1]
 801290a:	2b01      	cmp	r3, #1
 801290c:	d12c      	bne.n	8012968 <USB_EPStartXfer+0x10ea>
 801290e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801291c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801292a:	b29b      	uxth	r3, r3
 801292c:	461a      	mov	r2, r3
 801292e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012932:	4413      	add	r3, r2
 8012934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801293c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	00da      	lsls	r2, r3, #3
 8012946:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801294a:	4413      	add	r3, r2
 801294c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	691b      	ldr	r3, [r3, #16]
 8012960:	b29a      	uxth	r2, r3
 8012962:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012966:	801a      	strh	r2, [r3, #0]
 8012968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801296c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801297a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	785b      	ldrb	r3, [r3, #1]
 8012982:	2b00      	cmp	r3, #0
 8012984:	f040 809d 	bne.w	8012ac2 <USB_EPStartXfer+0x1244>
 8012988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801298c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801299a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	461a      	mov	r2, r3
 80129a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80129ac:	4413      	add	r3, r2
 80129ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80129b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	781b      	ldrb	r3, [r3, #0]
 80129be:	00da      	lsls	r2, r3, #3
 80129c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80129c4:	4413      	add	r3, r2
 80129c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80129ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80129ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80129d2:	881b      	ldrh	r3, [r3, #0]
 80129d4:	b29b      	uxth	r3, r3
 80129d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80129da:	b29a      	uxth	r2, r3
 80129dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80129e0:	801a      	strh	r2, [r3, #0]
 80129e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	691b      	ldr	r3, [r3, #16]
 80129ee:	2b3e      	cmp	r3, #62	; 0x3e
 80129f0:	d92b      	bls.n	8012a4a <USB_EPStartXfer+0x11cc>
 80129f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	691b      	ldr	r3, [r3, #16]
 80129fe:	095b      	lsrs	r3, r3, #5
 8012a00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	691b      	ldr	r3, [r3, #16]
 8012a10:	f003 031f 	and.w	r3, r3, #31
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d104      	bne.n	8012a22 <USB_EPStartXfer+0x11a4>
 8012a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012a1c:	3b01      	subs	r3, #1
 8012a1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012a22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012a26:	881b      	ldrh	r3, [r3, #0]
 8012a28:	b29a      	uxth	r2, r3
 8012a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012a2e:	b29b      	uxth	r3, r3
 8012a30:	029b      	lsls	r3, r3, #10
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	4313      	orrs	r3, r2
 8012a36:	b29b      	uxth	r3, r3
 8012a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a40:	b29a      	uxth	r2, r3
 8012a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012a46:	801a      	strh	r2, [r3, #0]
 8012a48:	e069      	b.n	8012b1e <USB_EPStartXfer+0x12a0>
 8012a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	691b      	ldr	r3, [r3, #16]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d10c      	bne.n	8012a74 <USB_EPStartXfer+0x11f6>
 8012a5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012a5e:	881b      	ldrh	r3, [r3, #0]
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a6a:	b29a      	uxth	r2, r3
 8012a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012a70:	801a      	strh	r2, [r3, #0]
 8012a72:	e054      	b.n	8012b1e <USB_EPStartXfer+0x12a0>
 8012a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	691b      	ldr	r3, [r3, #16]
 8012a80:	085b      	lsrs	r3, r3, #1
 8012a82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	691b      	ldr	r3, [r3, #16]
 8012a92:	f003 0301 	and.w	r3, r3, #1
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d004      	beq.n	8012aa4 <USB_EPStartXfer+0x1226>
 8012a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012aa8:	881b      	ldrh	r3, [r3, #0]
 8012aaa:	b29a      	uxth	r2, r3
 8012aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012ab0:	b29b      	uxth	r3, r3
 8012ab2:	029b      	lsls	r3, r3, #10
 8012ab4:	b29b      	uxth	r3, r3
 8012ab6:	4313      	orrs	r3, r2
 8012ab8:	b29a      	uxth	r2, r3
 8012aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012abe:	801a      	strh	r2, [r3, #0]
 8012ac0:	e02d      	b.n	8012b1e <USB_EPStartXfer+0x12a0>
 8012ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	785b      	ldrb	r3, [r3, #1]
 8012ace:	2b01      	cmp	r3, #1
 8012ad0:	d125      	bne.n	8012b1e <USB_EPStartXfer+0x12a0>
 8012ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ad6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012ae0:	b29b      	uxth	r3, r3
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012ae8:	4413      	add	r3, r2
 8012aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	00da      	lsls	r2, r3, #3
 8012afc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012b00:	4413      	add	r3, r2
 8012b02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012b06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	691b      	ldr	r3, [r3, #16]
 8012b16:	b29a      	uxth	r2, r3
 8012b18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012b1c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	69db      	ldr	r3, [r3, #28]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	f000 8218 	beq.w	8012f60 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b38:	681a      	ldr	r2, [r3, #0]
 8012b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	009b      	lsls	r3, r3, #2
 8012b48:	4413      	add	r3, r2
 8012b4a:	881b      	ldrh	r3, [r3, #0]
 8012b4c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012b50:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d005      	beq.n	8012b68 <USB_EPStartXfer+0x12ea>
 8012b5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d10d      	bne.n	8012b84 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012b68:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	f040 81f5 	bne.w	8012f60 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012b76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	f040 81ee 	bne.w	8012f60 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b8c:	681a      	ldr	r2, [r3, #0]
 8012b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	781b      	ldrb	r3, [r3, #0]
 8012b9a:	009b      	lsls	r3, r3, #2
 8012b9c:	4413      	add	r3, r2
 8012b9e:	881b      	ldrh	r3, [r3, #0]
 8012ba0:	b29b      	uxth	r3, r3
 8012ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012baa:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8012bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012bb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012bb6:	681a      	ldr	r2, [r3, #0]
 8012bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	009b      	lsls	r3, r3, #2
 8012bc6:	441a      	add	r2, r3
 8012bc8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8012bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012bd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012bdc:	b29b      	uxth	r3, r3
 8012bde:	8013      	strh	r3, [r2, #0]
 8012be0:	e1be      	b.n	8012f60 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	78db      	ldrb	r3, [r3, #3]
 8012bee:	2b01      	cmp	r3, #1
 8012bf0:	f040 81b4 	bne.w	8012f5c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8012bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	699a      	ldr	r2, [r3, #24]
 8012c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	691b      	ldr	r3, [r3, #16]
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d917      	bls.n	8012c40 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8012c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	691b      	ldr	r3, [r3, #16]
 8012c1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8012c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	699a      	ldr	r2, [r3, #24]
 8012c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012c30:	1ad2      	subs	r2, r2, r3
 8012c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	619a      	str	r2, [r3, #24]
 8012c3e:	e00e      	b.n	8012c5e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8012c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	699b      	ldr	r3, [r3, #24]
 8012c4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8012c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8012c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	785b      	ldrb	r3, [r3, #1]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	f040 8085 	bne.w	8012d7a <USB_EPStartXfer+0x14fc>
 8012c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012c8c:	b29b      	uxth	r3, r3
 8012c8e:	461a      	mov	r2, r3
 8012c90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012c94:	4413      	add	r3, r2
 8012c96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	00da      	lsls	r2, r3, #3
 8012ca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012cac:	4413      	add	r3, r2
 8012cae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012cba:	881b      	ldrh	r3, [r3, #0]
 8012cbc:	b29b      	uxth	r3, r3
 8012cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012cc2:	b29a      	uxth	r2, r3
 8012cc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012cc8:	801a      	strh	r2, [r3, #0]
 8012cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012cce:	2b3e      	cmp	r3, #62	; 0x3e
 8012cd0:	d923      	bls.n	8012d1a <USB_EPStartXfer+0x149c>
 8012cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012cd6:	095b      	lsrs	r3, r3, #5
 8012cd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ce0:	f003 031f 	and.w	r3, r3, #31
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d104      	bne.n	8012cf2 <USB_EPStartXfer+0x1474>
 8012ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012cec:	3b01      	subs	r3, #1
 8012cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012cf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012cf6:	881b      	ldrh	r3, [r3, #0]
 8012cf8:	b29a      	uxth	r2, r3
 8012cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012cfe:	b29b      	uxth	r3, r3
 8012d00:	029b      	lsls	r3, r3, #10
 8012d02:	b29b      	uxth	r3, r3
 8012d04:	4313      	orrs	r3, r2
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012d10:	b29a      	uxth	r2, r3
 8012d12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012d16:	801a      	strh	r2, [r3, #0]
 8012d18:	e060      	b.n	8012ddc <USB_EPStartXfer+0x155e>
 8012d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d10c      	bne.n	8012d3c <USB_EPStartXfer+0x14be>
 8012d22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012d26:	881b      	ldrh	r3, [r3, #0]
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012d32:	b29a      	uxth	r2, r3
 8012d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012d38:	801a      	strh	r2, [r3, #0]
 8012d3a:	e04f      	b.n	8012ddc <USB_EPStartXfer+0x155e>
 8012d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d40:	085b      	lsrs	r3, r3, #1
 8012d42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d4a:	f003 0301 	and.w	r3, r3, #1
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d004      	beq.n	8012d5c <USB_EPStartXfer+0x14de>
 8012d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012d56:	3301      	adds	r3, #1
 8012d58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012d5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012d60:	881b      	ldrh	r3, [r3, #0]
 8012d62:	b29a      	uxth	r2, r3
 8012d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012d68:	b29b      	uxth	r3, r3
 8012d6a:	029b      	lsls	r3, r3, #10
 8012d6c:	b29b      	uxth	r3, r3
 8012d6e:	4313      	orrs	r3, r2
 8012d70:	b29a      	uxth	r2, r3
 8012d72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012d76:	801a      	strh	r2, [r3, #0]
 8012d78:	e030      	b.n	8012ddc <USB_EPStartXfer+0x155e>
 8012d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	785b      	ldrb	r3, [r3, #1]
 8012d86:	2b01      	cmp	r3, #1
 8012d88:	d128      	bne.n	8012ddc <USB_EPStartXfer+0x155e>
 8012d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012da6:	b29b      	uxth	r3, r3
 8012da8:	461a      	mov	r2, r3
 8012daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012dae:	4413      	add	r3, r2
 8012db0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	00da      	lsls	r2, r3, #3
 8012dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012dc6:	4413      	add	r3, r2
 8012dc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012dd4:	b29a      	uxth	r2, r3
 8012dd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8012dda:	801a      	strh	r2, [r3, #0]
 8012ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012de0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	785b      	ldrb	r3, [r3, #1]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	f040 8085 	bne.w	8012f06 <USB_EPStartXfer+0x1688>
 8012dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	461a      	mov	r2, r3
 8012e1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012e20:	4413      	add	r3, r2
 8012e22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	781b      	ldrb	r3, [r3, #0]
 8012e32:	00da      	lsls	r2, r3, #3
 8012e34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012e38:	4413      	add	r3, r2
 8012e3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012e46:	881b      	ldrh	r3, [r3, #0]
 8012e48:	b29b      	uxth	r3, r3
 8012e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012e4e:	b29a      	uxth	r2, r3
 8012e50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012e54:	801a      	strh	r2, [r3, #0]
 8012e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012e5a:	2b3e      	cmp	r3, #62	; 0x3e
 8012e5c:	d923      	bls.n	8012ea6 <USB_EPStartXfer+0x1628>
 8012e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012e62:	095b      	lsrs	r3, r3, #5
 8012e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012e6c:	f003 031f 	and.w	r3, r3, #31
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d104      	bne.n	8012e7e <USB_EPStartXfer+0x1600>
 8012e74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012e78:	3b01      	subs	r3, #1
 8012e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012e7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012e82:	881b      	ldrh	r3, [r3, #0]
 8012e84:	b29a      	uxth	r2, r3
 8012e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012e8a:	b29b      	uxth	r3, r3
 8012e8c:	029b      	lsls	r3, r3, #10
 8012e8e:	b29b      	uxth	r3, r3
 8012e90:	4313      	orrs	r3, r2
 8012e92:	b29b      	uxth	r3, r3
 8012e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012e9c:	b29a      	uxth	r2, r3
 8012e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012ea2:	801a      	strh	r2, [r3, #0]
 8012ea4:	e05c      	b.n	8012f60 <USB_EPStartXfer+0x16e2>
 8012ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d10c      	bne.n	8012ec8 <USB_EPStartXfer+0x164a>
 8012eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012eb2:	881b      	ldrh	r3, [r3, #0]
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012ebe:	b29a      	uxth	r2, r3
 8012ec0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012ec4:	801a      	strh	r2, [r3, #0]
 8012ec6:	e04b      	b.n	8012f60 <USB_EPStartXfer+0x16e2>
 8012ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ecc:	085b      	lsrs	r3, r3, #1
 8012ece:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ed6:	f003 0301 	and.w	r3, r3, #1
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d004      	beq.n	8012ee8 <USB_EPStartXfer+0x166a>
 8012ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012ee8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012eec:	881b      	ldrh	r3, [r3, #0]
 8012eee:	b29a      	uxth	r2, r3
 8012ef0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	029b      	lsls	r3, r3, #10
 8012ef8:	b29b      	uxth	r3, r3
 8012efa:	4313      	orrs	r3, r2
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012f02:	801a      	strh	r2, [r3, #0]
 8012f04:	e02c      	b.n	8012f60 <USB_EPStartXfer+0x16e2>
 8012f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	785b      	ldrb	r3, [r3, #1]
 8012f12:	2b01      	cmp	r3, #1
 8012f14:	d124      	bne.n	8012f60 <USB_EPStartXfer+0x16e2>
 8012f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	461a      	mov	r2, r3
 8012f28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012f2c:	4413      	add	r3, r2
 8012f2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	00da      	lsls	r2, r3, #3
 8012f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012f44:	4413      	add	r3, r2
 8012f46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012f4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f52:	b29a      	uxth	r2, r3
 8012f54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012f58:	801a      	strh	r2, [r3, #0]
 8012f5a:	e001      	b.n	8012f60 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8012f5c:	2301      	movs	r3, #1
 8012f5e:	e03a      	b.n	8012fd6 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f68:	681a      	ldr	r2, [r3, #0]
 8012f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	781b      	ldrb	r3, [r3, #0]
 8012f76:	009b      	lsls	r3, r3, #2
 8012f78:	4413      	add	r3, r2
 8012f7a:	881b      	ldrh	r3, [r3, #0]
 8012f7c:	b29b      	uxth	r3, r3
 8012f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012f86:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012f8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012f8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012f92:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012f96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012f9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012f9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012faa:	681a      	ldr	r2, [r3, #0]
 8012fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	009b      	lsls	r3, r3, #2
 8012fba:	441a      	add	r2, r3
 8012fbc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fd0:	b29b      	uxth	r3, r3
 8012fd2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012fd4:	2300      	movs	r3, #0
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}

08012fe0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012fe0:	b480      	push	{r7}
 8012fe2:	b085      	sub	sp, #20
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	785b      	ldrb	r3, [r3, #1]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d020      	beq.n	8013034 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012ff2:	687a      	ldr	r2, [r7, #4]
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	009b      	lsls	r3, r3, #2
 8012ffa:	4413      	add	r3, r2
 8012ffc:	881b      	ldrh	r3, [r3, #0]
 8012ffe:	b29b      	uxth	r3, r3
 8013000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013008:	81bb      	strh	r3, [r7, #12]
 801300a:	89bb      	ldrh	r3, [r7, #12]
 801300c:	f083 0310 	eor.w	r3, r3, #16
 8013010:	81bb      	strh	r3, [r7, #12]
 8013012:	687a      	ldr	r2, [r7, #4]
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	009b      	lsls	r3, r3, #2
 801301a:	441a      	add	r2, r3
 801301c:	89bb      	ldrh	r3, [r7, #12]
 801301e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801302a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801302e:	b29b      	uxth	r3, r3
 8013030:	8013      	strh	r3, [r2, #0]
 8013032:	e01f      	b.n	8013074 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8013034:	687a      	ldr	r2, [r7, #4]
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	009b      	lsls	r3, r3, #2
 801303c:	4413      	add	r3, r2
 801303e:	881b      	ldrh	r3, [r3, #0]
 8013040:	b29b      	uxth	r3, r3
 8013042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801304a:	81fb      	strh	r3, [r7, #14]
 801304c:	89fb      	ldrh	r3, [r7, #14]
 801304e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013052:	81fb      	strh	r3, [r7, #14]
 8013054:	687a      	ldr	r2, [r7, #4]
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	781b      	ldrb	r3, [r3, #0]
 801305a:	009b      	lsls	r3, r3, #2
 801305c:	441a      	add	r2, r3
 801305e:	89fb      	ldrh	r3, [r7, #14]
 8013060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801306c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013070:	b29b      	uxth	r3, r3
 8013072:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8013074:	2300      	movs	r3, #0
}
 8013076:	4618      	mov	r0, r3
 8013078:	3714      	adds	r7, #20
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr

08013082 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013082:	b480      	push	{r7}
 8013084:	b087      	sub	sp, #28
 8013086:	af00      	add	r7, sp, #0
 8013088:	6078      	str	r0, [r7, #4]
 801308a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	7b1b      	ldrb	r3, [r3, #12]
 8013090:	2b00      	cmp	r3, #0
 8013092:	f040 809d 	bne.w	80131d0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	785b      	ldrb	r3, [r3, #1]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d04c      	beq.n	8013138 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801309e:	687a      	ldr	r2, [r7, #4]
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	009b      	lsls	r3, r3, #2
 80130a6:	4413      	add	r3, r2
 80130a8:	881b      	ldrh	r3, [r3, #0]
 80130aa:	823b      	strh	r3, [r7, #16]
 80130ac:	8a3b      	ldrh	r3, [r7, #16]
 80130ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d01b      	beq.n	80130ee <USB_EPClearStall+0x6c>
 80130b6:	687a      	ldr	r2, [r7, #4]
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	009b      	lsls	r3, r3, #2
 80130be:	4413      	add	r3, r2
 80130c0:	881b      	ldrh	r3, [r3, #0]
 80130c2:	b29b      	uxth	r3, r3
 80130c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80130c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80130cc:	81fb      	strh	r3, [r7, #14]
 80130ce:	687a      	ldr	r2, [r7, #4]
 80130d0:	683b      	ldr	r3, [r7, #0]
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	009b      	lsls	r3, r3, #2
 80130d6:	441a      	add	r2, r3
 80130d8:	89fb      	ldrh	r3, [r7, #14]
 80130da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80130de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80130e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80130e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80130ea:	b29b      	uxth	r3, r3
 80130ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	78db      	ldrb	r3, [r3, #3]
 80130f2:	2b01      	cmp	r3, #1
 80130f4:	d06c      	beq.n	80131d0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80130f6:	687a      	ldr	r2, [r7, #4]
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	009b      	lsls	r3, r3, #2
 80130fe:	4413      	add	r3, r2
 8013100:	881b      	ldrh	r3, [r3, #0]
 8013102:	b29b      	uxth	r3, r3
 8013104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801310c:	81bb      	strh	r3, [r7, #12]
 801310e:	89bb      	ldrh	r3, [r7, #12]
 8013110:	f083 0320 	eor.w	r3, r3, #32
 8013114:	81bb      	strh	r3, [r7, #12]
 8013116:	687a      	ldr	r2, [r7, #4]
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	009b      	lsls	r3, r3, #2
 801311e:	441a      	add	r2, r3
 8013120:	89bb      	ldrh	r3, [r7, #12]
 8013122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801312a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801312e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013132:	b29b      	uxth	r3, r3
 8013134:	8013      	strh	r3, [r2, #0]
 8013136:	e04b      	b.n	80131d0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013138:	687a      	ldr	r2, [r7, #4]
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	781b      	ldrb	r3, [r3, #0]
 801313e:	009b      	lsls	r3, r3, #2
 8013140:	4413      	add	r3, r2
 8013142:	881b      	ldrh	r3, [r3, #0]
 8013144:	82fb      	strh	r3, [r7, #22]
 8013146:	8afb      	ldrh	r3, [r7, #22]
 8013148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801314c:	2b00      	cmp	r3, #0
 801314e:	d01b      	beq.n	8013188 <USB_EPClearStall+0x106>
 8013150:	687a      	ldr	r2, [r7, #4]
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	781b      	ldrb	r3, [r3, #0]
 8013156:	009b      	lsls	r3, r3, #2
 8013158:	4413      	add	r3, r2
 801315a:	881b      	ldrh	r3, [r3, #0]
 801315c:	b29b      	uxth	r3, r3
 801315e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013166:	82bb      	strh	r3, [r7, #20]
 8013168:	687a      	ldr	r2, [r7, #4]
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	781b      	ldrb	r3, [r3, #0]
 801316e:	009b      	lsls	r3, r3, #2
 8013170:	441a      	add	r2, r3
 8013172:	8abb      	ldrh	r3, [r7, #20]
 8013174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801317c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013184:	b29b      	uxth	r3, r3
 8013186:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013188:	687a      	ldr	r2, [r7, #4]
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	009b      	lsls	r3, r3, #2
 8013190:	4413      	add	r3, r2
 8013192:	881b      	ldrh	r3, [r3, #0]
 8013194:	b29b      	uxth	r3, r3
 8013196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801319e:	827b      	strh	r3, [r7, #18]
 80131a0:	8a7b      	ldrh	r3, [r7, #18]
 80131a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80131a6:	827b      	strh	r3, [r7, #18]
 80131a8:	8a7b      	ldrh	r3, [r7, #18]
 80131aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80131ae:	827b      	strh	r3, [r7, #18]
 80131b0:	687a      	ldr	r2, [r7, #4]
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	009b      	lsls	r3, r3, #2
 80131b8:	441a      	add	r2, r3
 80131ba:	8a7b      	ldrh	r3, [r7, #18]
 80131bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80131c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80131c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80131c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131cc:	b29b      	uxth	r3, r3
 80131ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80131d0:	2300      	movs	r3, #0
}
 80131d2:	4618      	mov	r0, r3
 80131d4:	371c      	adds	r7, #28
 80131d6:	46bd      	mov	sp, r7
 80131d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131dc:	4770      	bx	lr

080131de <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80131de:	b480      	push	{r7}
 80131e0:	b083      	sub	sp, #12
 80131e2:	af00      	add	r7, sp, #0
 80131e4:	6078      	str	r0, [r7, #4]
 80131e6:	460b      	mov	r3, r1
 80131e8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80131ea:	78fb      	ldrb	r3, [r7, #3]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d103      	bne.n	80131f8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2280      	movs	r2, #128	; 0x80
 80131f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80131f8:	2300      	movs	r3, #0
}
 80131fa:	4618      	mov	r0, r3
 80131fc:	370c      	adds	r7, #12
 80131fe:	46bd      	mov	sp, r7
 8013200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013204:	4770      	bx	lr

08013206 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8013206:	b480      	push	{r7}
 8013208:	b083      	sub	sp, #12
 801320a:	af00      	add	r7, sp, #0
 801320c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8013214:	b29b      	uxth	r3, r3
 8013216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801321a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801321e:	b29a      	uxth	r2, r3
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8013226:	2300      	movs	r3, #0
}
 8013228:	4618      	mov	r0, r3
 801322a:	370c      	adds	r7, #12
 801322c:	46bd      	mov	sp, r7
 801322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013232:	4770      	bx	lr

08013234 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8013234:	b480      	push	{r7}
 8013236:	b085      	sub	sp, #20
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013242:	b29b      	uxth	r3, r3
 8013244:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8013246:	68fb      	ldr	r3, [r7, #12]
}
 8013248:	4618      	mov	r0, r3
 801324a:	3714      	adds	r7, #20
 801324c:	46bd      	mov	sp, r7
 801324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013252:	4770      	bx	lr

08013254 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013254:	b480      	push	{r7}
 8013256:	b08b      	sub	sp, #44	; 0x2c
 8013258:	af00      	add	r7, sp, #0
 801325a:	60f8      	str	r0, [r7, #12]
 801325c:	60b9      	str	r1, [r7, #8]
 801325e:	4611      	mov	r1, r2
 8013260:	461a      	mov	r2, r3
 8013262:	460b      	mov	r3, r1
 8013264:	80fb      	strh	r3, [r7, #6]
 8013266:	4613      	mov	r3, r2
 8013268:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801326a:	88bb      	ldrh	r3, [r7, #4]
 801326c:	3301      	adds	r3, #1
 801326e:	085b      	lsrs	r3, r3, #1
 8013270:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801327a:	88fa      	ldrh	r2, [r7, #6]
 801327c:	697b      	ldr	r3, [r7, #20]
 801327e:	4413      	add	r3, r2
 8013280:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013284:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8013286:	69bb      	ldr	r3, [r7, #24]
 8013288:	627b      	str	r3, [r7, #36]	; 0x24
 801328a:	e01b      	b.n	80132c4 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 801328c:	69fb      	ldr	r3, [r7, #28]
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8013292:	69fb      	ldr	r3, [r7, #28]
 8013294:	3301      	adds	r3, #1
 8013296:	781b      	ldrb	r3, [r3, #0]
 8013298:	021b      	lsls	r3, r3, #8
 801329a:	b21a      	sxth	r2, r3
 801329c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80132a0:	4313      	orrs	r3, r2
 80132a2:	b21b      	sxth	r3, r3
 80132a4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80132a6:	6a3b      	ldr	r3, [r7, #32]
 80132a8:	8a7a      	ldrh	r2, [r7, #18]
 80132aa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80132ac:	6a3b      	ldr	r3, [r7, #32]
 80132ae:	3302      	adds	r3, #2
 80132b0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80132b2:	69fb      	ldr	r3, [r7, #28]
 80132b4:	3301      	adds	r3, #1
 80132b6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80132b8:	69fb      	ldr	r3, [r7, #28]
 80132ba:	3301      	adds	r3, #1
 80132bc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80132be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132c0:	3b01      	subs	r3, #1
 80132c2:	627b      	str	r3, [r7, #36]	; 0x24
 80132c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d1e0      	bne.n	801328c <USB_WritePMA+0x38>
  }
}
 80132ca:	bf00      	nop
 80132cc:	bf00      	nop
 80132ce:	372c      	adds	r7, #44	; 0x2c
 80132d0:	46bd      	mov	sp, r7
 80132d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d6:	4770      	bx	lr

080132d8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80132d8:	b480      	push	{r7}
 80132da:	b08b      	sub	sp, #44	; 0x2c
 80132dc:	af00      	add	r7, sp, #0
 80132de:	60f8      	str	r0, [r7, #12]
 80132e0:	60b9      	str	r1, [r7, #8]
 80132e2:	4611      	mov	r1, r2
 80132e4:	461a      	mov	r2, r3
 80132e6:	460b      	mov	r3, r1
 80132e8:	80fb      	strh	r3, [r7, #6]
 80132ea:	4613      	mov	r3, r2
 80132ec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80132ee:	88bb      	ldrh	r3, [r7, #4]
 80132f0:	085b      	lsrs	r3, r3, #1
 80132f2:	b29b      	uxth	r3, r3
 80132f4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80132fe:	88fa      	ldrh	r2, [r7, #6]
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	4413      	add	r3, r2
 8013304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013308:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801330a:	69bb      	ldr	r3, [r7, #24]
 801330c:	627b      	str	r3, [r7, #36]	; 0x24
 801330e:	e018      	b.n	8013342 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8013310:	6a3b      	ldr	r3, [r7, #32]
 8013312:	881b      	ldrh	r3, [r3, #0]
 8013314:	b29b      	uxth	r3, r3
 8013316:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8013318:	6a3b      	ldr	r3, [r7, #32]
 801331a:	3302      	adds	r3, #2
 801331c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801331e:	693b      	ldr	r3, [r7, #16]
 8013320:	b2da      	uxtb	r2, r3
 8013322:	69fb      	ldr	r3, [r7, #28]
 8013324:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013326:	69fb      	ldr	r3, [r7, #28]
 8013328:	3301      	adds	r3, #1
 801332a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	0a1b      	lsrs	r3, r3, #8
 8013330:	b2da      	uxtb	r2, r3
 8013332:	69fb      	ldr	r3, [r7, #28]
 8013334:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013336:	69fb      	ldr	r3, [r7, #28]
 8013338:	3301      	adds	r3, #1
 801333a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801333e:	3b01      	subs	r3, #1
 8013340:	627b      	str	r3, [r7, #36]	; 0x24
 8013342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013344:	2b00      	cmp	r3, #0
 8013346:	d1e3      	bne.n	8013310 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8013348:	88bb      	ldrh	r3, [r7, #4]
 801334a:	f003 0301 	and.w	r3, r3, #1
 801334e:	b29b      	uxth	r3, r3
 8013350:	2b00      	cmp	r3, #0
 8013352:	d007      	beq.n	8013364 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8013354:	6a3b      	ldr	r3, [r7, #32]
 8013356:	881b      	ldrh	r3, [r3, #0]
 8013358:	b29b      	uxth	r3, r3
 801335a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	b2da      	uxtb	r2, r3
 8013360:	69fb      	ldr	r3, [r7, #28]
 8013362:	701a      	strb	r2, [r3, #0]
  }
}
 8013364:	bf00      	nop
 8013366:	372c      	adds	r7, #44	; 0x2c
 8013368:	46bd      	mov	sp, r7
 801336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336e:	4770      	bx	lr

08013370 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b084      	sub	sp, #16
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
 8013378:	460b      	mov	r3, r1
 801337a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801337c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013380:	f002 f9e6 	bl	8015750 <USBD_static_malloc>
 8013384:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d105      	bne.n	8013398 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2200      	movs	r2, #0
 8013390:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013394:	2302      	movs	r3, #2
 8013396:	e066      	b.n	8013466 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	68fa      	ldr	r2, [r7, #12]
 801339c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	7c1b      	ldrb	r3, [r3, #16]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d119      	bne.n	80133dc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80133a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80133ac:	2202      	movs	r2, #2
 80133ae:	2181      	movs	r1, #129	; 0x81
 80133b0:	6878      	ldr	r0, [r7, #4]
 80133b2:	f002 f874 	bl	801549e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	2201      	movs	r2, #1
 80133ba:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80133bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80133c0:	2202      	movs	r2, #2
 80133c2:	2101      	movs	r1, #1
 80133c4:	6878      	ldr	r0, [r7, #4]
 80133c6:	f002 f86a 	bl	801549e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2201      	movs	r2, #1
 80133ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	2210      	movs	r2, #16
 80133d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80133da:	e016      	b.n	801340a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80133dc:	2340      	movs	r3, #64	; 0x40
 80133de:	2202      	movs	r2, #2
 80133e0:	2181      	movs	r1, #129	; 0x81
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f002 f85b 	bl	801549e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2201      	movs	r2, #1
 80133ec:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80133ee:	2340      	movs	r3, #64	; 0x40
 80133f0:	2202      	movs	r2, #2
 80133f2:	2101      	movs	r1, #1
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f002 f852 	bl	801549e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2201      	movs	r2, #1
 80133fe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	2210      	movs	r2, #16
 8013406:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801340a:	2308      	movs	r3, #8
 801340c:	2203      	movs	r2, #3
 801340e:	2182      	movs	r1, #130	; 0x82
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f002 f844 	bl	801549e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	2201      	movs	r2, #1
 801341a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	2200      	movs	r2, #0
 801342c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	2200      	movs	r2, #0
 8013434:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	7c1b      	ldrb	r3, [r3, #16]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d109      	bne.n	8013454 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013446:	f44f 7300 	mov.w	r3, #512	; 0x200
 801344a:	2101      	movs	r1, #1
 801344c:	6878      	ldr	r0, [r7, #4]
 801344e:	f002 f915 	bl	801567c <USBD_LL_PrepareReceive>
 8013452:	e007      	b.n	8013464 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801345a:	2340      	movs	r3, #64	; 0x40
 801345c:	2101      	movs	r1, #1
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f002 f90c 	bl	801567c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013464:	2300      	movs	r3, #0
}
 8013466:	4618      	mov	r0, r3
 8013468:	3710      	adds	r7, #16
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}

0801346e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801346e:	b580      	push	{r7, lr}
 8013470:	b082      	sub	sp, #8
 8013472:	af00      	add	r7, sp, #0
 8013474:	6078      	str	r0, [r7, #4]
 8013476:	460b      	mov	r3, r1
 8013478:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801347a:	2181      	movs	r1, #129	; 0x81
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f002 f834 	bl	80154ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	2200      	movs	r2, #0
 8013486:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013488:	2101      	movs	r1, #1
 801348a:	6878      	ldr	r0, [r7, #4]
 801348c:	f002 f82d 	bl	80154ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	2200      	movs	r2, #0
 8013494:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013498:	2182      	movs	r1, #130	; 0x82
 801349a:	6878      	ldr	r0, [r7, #4]
 801349c:	f002 f825 	bl	80154ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	2200      	movs	r2, #0
 80134a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2200      	movs	r2, #0
 80134ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d00e      	beq.n	80134d8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80134c0:	685b      	ldr	r3, [r3, #4]
 80134c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80134ca:	4618      	mov	r0, r3
 80134cc:	f002 f94e 	bl	801576c <USBD_static_free>
    pdev->pClassData = NULL;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2200      	movs	r2, #0
 80134d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80134d8:	2300      	movs	r3, #0
}
 80134da:	4618      	mov	r0, r3
 80134dc:	3708      	adds	r7, #8
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}
	...

080134e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b086      	sub	sp, #24
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80134f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80134f6:	2300      	movs	r3, #0
 80134f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80134fa:	2300      	movs	r3, #0
 80134fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80134fe:	2300      	movs	r3, #0
 8013500:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013502:	693b      	ldr	r3, [r7, #16]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d101      	bne.n	801350c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8013508:	2303      	movs	r3, #3
 801350a:	e0af      	b.n	801366c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	781b      	ldrb	r3, [r3, #0]
 8013510:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013514:	2b00      	cmp	r3, #0
 8013516:	d03f      	beq.n	8013598 <USBD_CDC_Setup+0xb4>
 8013518:	2b20      	cmp	r3, #32
 801351a:	f040 809f 	bne.w	801365c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	88db      	ldrh	r3, [r3, #6]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d02e      	beq.n	8013584 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	b25b      	sxtb	r3, r3
 801352c:	2b00      	cmp	r3, #0
 801352e:	da16      	bge.n	801355e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013536:	689b      	ldr	r3, [r3, #8]
 8013538:	683a      	ldr	r2, [r7, #0]
 801353a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 801353c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801353e:	683a      	ldr	r2, [r7, #0]
 8013540:	88d2      	ldrh	r2, [r2, #6]
 8013542:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	88db      	ldrh	r3, [r3, #6]
 8013548:	2b07      	cmp	r3, #7
 801354a:	bf28      	it	cs
 801354c:	2307      	movcs	r3, #7
 801354e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013550:	693b      	ldr	r3, [r7, #16]
 8013552:	89fa      	ldrh	r2, [r7, #14]
 8013554:	4619      	mov	r1, r3
 8013556:	6878      	ldr	r0, [r7, #4]
 8013558:	f001 fa9f 	bl	8014a9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 801355c:	e085      	b.n	801366a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	785a      	ldrb	r2, [r3, #1]
 8013562:	693b      	ldr	r3, [r7, #16]
 8013564:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	88db      	ldrh	r3, [r3, #6]
 801356c:	b2da      	uxtb	r2, r3
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8013574:	6939      	ldr	r1, [r7, #16]
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	88db      	ldrh	r3, [r3, #6]
 801357a:	461a      	mov	r2, r3
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f001 fab8 	bl	8014af2 <USBD_CtlPrepareRx>
      break;
 8013582:	e072      	b.n	801366a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801358a:	689b      	ldr	r3, [r3, #8]
 801358c:	683a      	ldr	r2, [r7, #0]
 801358e:	7850      	ldrb	r0, [r2, #1]
 8013590:	2200      	movs	r2, #0
 8013592:	6839      	ldr	r1, [r7, #0]
 8013594:	4798      	blx	r3
      break;
 8013596:	e068      	b.n	801366a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013598:	683b      	ldr	r3, [r7, #0]
 801359a:	785b      	ldrb	r3, [r3, #1]
 801359c:	2b0b      	cmp	r3, #11
 801359e:	d852      	bhi.n	8013646 <USBD_CDC_Setup+0x162>
 80135a0:	a201      	add	r2, pc, #4	; (adr r2, 80135a8 <USBD_CDC_Setup+0xc4>)
 80135a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135a6:	bf00      	nop
 80135a8:	080135d9 	.word	0x080135d9
 80135ac:	08013655 	.word	0x08013655
 80135b0:	08013647 	.word	0x08013647
 80135b4:	08013647 	.word	0x08013647
 80135b8:	08013647 	.word	0x08013647
 80135bc:	08013647 	.word	0x08013647
 80135c0:	08013647 	.word	0x08013647
 80135c4:	08013647 	.word	0x08013647
 80135c8:	08013647 	.word	0x08013647
 80135cc:	08013647 	.word	0x08013647
 80135d0:	08013603 	.word	0x08013603
 80135d4:	0801362d 	.word	0x0801362d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80135de:	b2db      	uxtb	r3, r3
 80135e0:	2b03      	cmp	r3, #3
 80135e2:	d107      	bne.n	80135f4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80135e4:	f107 030a 	add.w	r3, r7, #10
 80135e8:	2202      	movs	r2, #2
 80135ea:	4619      	mov	r1, r3
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f001 fa54 	bl	8014a9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80135f2:	e032      	b.n	801365a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80135f4:	6839      	ldr	r1, [r7, #0]
 80135f6:	6878      	ldr	r0, [r7, #4]
 80135f8:	f001 f9de 	bl	80149b8 <USBD_CtlError>
            ret = USBD_FAIL;
 80135fc:	2303      	movs	r3, #3
 80135fe:	75fb      	strb	r3, [r7, #23]
          break;
 8013600:	e02b      	b.n	801365a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013608:	b2db      	uxtb	r3, r3
 801360a:	2b03      	cmp	r3, #3
 801360c:	d107      	bne.n	801361e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801360e:	f107 030d 	add.w	r3, r7, #13
 8013612:	2201      	movs	r2, #1
 8013614:	4619      	mov	r1, r3
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f001 fa3f 	bl	8014a9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801361c:	e01d      	b.n	801365a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801361e:	6839      	ldr	r1, [r7, #0]
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	f001 f9c9 	bl	80149b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8013626:	2303      	movs	r3, #3
 8013628:	75fb      	strb	r3, [r7, #23]
          break;
 801362a:	e016      	b.n	801365a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013632:	b2db      	uxtb	r3, r3
 8013634:	2b03      	cmp	r3, #3
 8013636:	d00f      	beq.n	8013658 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8013638:	6839      	ldr	r1, [r7, #0]
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f001 f9bc 	bl	80149b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8013640:	2303      	movs	r3, #3
 8013642:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013644:	e008      	b.n	8013658 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013646:	6839      	ldr	r1, [r7, #0]
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	f001 f9b5 	bl	80149b8 <USBD_CtlError>
          ret = USBD_FAIL;
 801364e:	2303      	movs	r3, #3
 8013650:	75fb      	strb	r3, [r7, #23]
          break;
 8013652:	e002      	b.n	801365a <USBD_CDC_Setup+0x176>
          break;
 8013654:	bf00      	nop
 8013656:	e008      	b.n	801366a <USBD_CDC_Setup+0x186>
          break;
 8013658:	bf00      	nop
      }
      break;
 801365a:	e006      	b.n	801366a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 801365c:	6839      	ldr	r1, [r7, #0]
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	f001 f9aa 	bl	80149b8 <USBD_CtlError>
      ret = USBD_FAIL;
 8013664:	2303      	movs	r3, #3
 8013666:	75fb      	strb	r3, [r7, #23]
      break;
 8013668:	bf00      	nop
  }

  return (uint8_t)ret;
 801366a:	7dfb      	ldrb	r3, [r7, #23]
}
 801366c:	4618      	mov	r0, r3
 801366e:	3718      	adds	r7, #24
 8013670:	46bd      	mov	sp, r7
 8013672:	bd80      	pop	{r7, pc}

08013674 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b084      	sub	sp, #16
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	460b      	mov	r3, r1
 801367e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013686:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801368e:	2b00      	cmp	r3, #0
 8013690:	d101      	bne.n	8013696 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013692:	2303      	movs	r3, #3
 8013694:	e04f      	b.n	8013736 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801369c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801369e:	78fa      	ldrb	r2, [r7, #3]
 80136a0:	6879      	ldr	r1, [r7, #4]
 80136a2:	4613      	mov	r3, r2
 80136a4:	009b      	lsls	r3, r3, #2
 80136a6:	4413      	add	r3, r2
 80136a8:	009b      	lsls	r3, r3, #2
 80136aa:	440b      	add	r3, r1
 80136ac:	3318      	adds	r3, #24
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d029      	beq.n	8013708 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80136b4:	78fa      	ldrb	r2, [r7, #3]
 80136b6:	6879      	ldr	r1, [r7, #4]
 80136b8:	4613      	mov	r3, r2
 80136ba:	009b      	lsls	r3, r3, #2
 80136bc:	4413      	add	r3, r2
 80136be:	009b      	lsls	r3, r3, #2
 80136c0:	440b      	add	r3, r1
 80136c2:	3318      	adds	r3, #24
 80136c4:	681a      	ldr	r2, [r3, #0]
 80136c6:	78f9      	ldrb	r1, [r7, #3]
 80136c8:	68f8      	ldr	r0, [r7, #12]
 80136ca:	460b      	mov	r3, r1
 80136cc:	009b      	lsls	r3, r3, #2
 80136ce:	440b      	add	r3, r1
 80136d0:	00db      	lsls	r3, r3, #3
 80136d2:	4403      	add	r3, r0
 80136d4:	3320      	adds	r3, #32
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80136dc:	fb01 f303 	mul.w	r3, r1, r3
 80136e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d110      	bne.n	8013708 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80136e6:	78fa      	ldrb	r2, [r7, #3]
 80136e8:	6879      	ldr	r1, [r7, #4]
 80136ea:	4613      	mov	r3, r2
 80136ec:	009b      	lsls	r3, r3, #2
 80136ee:	4413      	add	r3, r2
 80136f0:	009b      	lsls	r3, r3, #2
 80136f2:	440b      	add	r3, r1
 80136f4:	3318      	adds	r3, #24
 80136f6:	2200      	movs	r2, #0
 80136f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80136fa:	78f9      	ldrb	r1, [r7, #3]
 80136fc:	2300      	movs	r3, #0
 80136fe:	2200      	movs	r2, #0
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f001 ff9a 	bl	801563a <USBD_LL_Transmit>
 8013706:	e015      	b.n	8013734 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	2200      	movs	r2, #0
 801370c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013716:	691b      	ldr	r3, [r3, #16]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d00b      	beq.n	8013734 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013722:	691b      	ldr	r3, [r3, #16]
 8013724:	68ba      	ldr	r2, [r7, #8]
 8013726:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801372a:	68ba      	ldr	r2, [r7, #8]
 801372c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013730:	78fa      	ldrb	r2, [r7, #3]
 8013732:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013734:	2300      	movs	r3, #0
}
 8013736:	4618      	mov	r0, r3
 8013738:	3710      	adds	r7, #16
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}

0801373e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801373e:	b580      	push	{r7, lr}
 8013740:	b084      	sub	sp, #16
 8013742:	af00      	add	r7, sp, #0
 8013744:	6078      	str	r0, [r7, #4]
 8013746:	460b      	mov	r3, r1
 8013748:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013750:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013758:	2b00      	cmp	r3, #0
 801375a:	d101      	bne.n	8013760 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801375c:	2303      	movs	r3, #3
 801375e:	e015      	b.n	801378c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013760:	78fb      	ldrb	r3, [r7, #3]
 8013762:	4619      	mov	r1, r3
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	f001 ffaa 	bl	80156be <USBD_LL_GetRxDataSize>
 801376a:	4602      	mov	r2, r0
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013778:	68db      	ldr	r3, [r3, #12]
 801377a:	68fa      	ldr	r2, [r7, #12]
 801377c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013780:	68fa      	ldr	r2, [r7, #12]
 8013782:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013786:	4611      	mov	r1, r2
 8013788:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801378a:	2300      	movs	r3, #0
}
 801378c:	4618      	mov	r0, r3
 801378e:	3710      	adds	r7, #16
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}

08013794 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b084      	sub	sp, #16
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80137a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d101      	bne.n	80137ae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80137aa:	2303      	movs	r3, #3
 80137ac:	e01b      	b.n	80137e6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d015      	beq.n	80137e4 <USBD_CDC_EP0_RxReady+0x50>
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80137be:	2bff      	cmp	r3, #255	; 0xff
 80137c0:	d010      	beq.n	80137e4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80137c8:	689b      	ldr	r3, [r3, #8]
 80137ca:	68fa      	ldr	r2, [r7, #12]
 80137cc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80137d0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80137d2:	68fa      	ldr	r2, [r7, #12]
 80137d4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80137d8:	b292      	uxth	r2, r2
 80137da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	22ff      	movs	r2, #255	; 0xff
 80137e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80137e4:	2300      	movs	r3, #0
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3710      	adds	r7, #16
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
	...

080137f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80137f0:	b480      	push	{r7}
 80137f2:	b083      	sub	sp, #12
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2243      	movs	r2, #67	; 0x43
 80137fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80137fe:	4b03      	ldr	r3, [pc, #12]	; (801380c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8013800:	4618      	mov	r0, r3
 8013802:	370c      	adds	r7, #12
 8013804:	46bd      	mov	sp, r7
 8013806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380a:	4770      	bx	lr
 801380c:	200000c0 	.word	0x200000c0

08013810 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013810:	b480      	push	{r7}
 8013812:	b083      	sub	sp, #12
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	2243      	movs	r2, #67	; 0x43
 801381c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801381e:	4b03      	ldr	r3, [pc, #12]	; (801382c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8013820:	4618      	mov	r0, r3
 8013822:	370c      	adds	r7, #12
 8013824:	46bd      	mov	sp, r7
 8013826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382a:	4770      	bx	lr
 801382c:	2000007c 	.word	0x2000007c

08013830 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013830:	b480      	push	{r7}
 8013832:	b083      	sub	sp, #12
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	2243      	movs	r2, #67	; 0x43
 801383c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801383e:	4b03      	ldr	r3, [pc, #12]	; (801384c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8013840:	4618      	mov	r0, r3
 8013842:	370c      	adds	r7, #12
 8013844:	46bd      	mov	sp, r7
 8013846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384a:	4770      	bx	lr
 801384c:	20000104 	.word	0x20000104

08013850 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013850:	b480      	push	{r7}
 8013852:	b083      	sub	sp, #12
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	220a      	movs	r2, #10
 801385c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801385e:	4b03      	ldr	r3, [pc, #12]	; (801386c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013860:	4618      	mov	r0, r3
 8013862:	370c      	adds	r7, #12
 8013864:	46bd      	mov	sp, r7
 8013866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386a:	4770      	bx	lr
 801386c:	20000038 	.word	0x20000038

08013870 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013870:	b480      	push	{r7}
 8013872:	b083      	sub	sp, #12
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
 8013878:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d101      	bne.n	8013884 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013880:	2303      	movs	r3, #3
 8013882:	e004      	b.n	801388e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	683a      	ldr	r2, [r7, #0]
 8013888:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801388c:	2300      	movs	r3, #0
}
 801388e:	4618      	mov	r0, r3
 8013890:	370c      	adds	r7, #12
 8013892:	46bd      	mov	sp, r7
 8013894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013898:	4770      	bx	lr

0801389a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801389a:	b480      	push	{r7}
 801389c:	b087      	sub	sp, #28
 801389e:	af00      	add	r7, sp, #0
 80138a0:	60f8      	str	r0, [r7, #12]
 80138a2:	60b9      	str	r1, [r7, #8]
 80138a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80138ac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80138ae:	697b      	ldr	r3, [r7, #20]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d101      	bne.n	80138b8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80138b4:	2303      	movs	r3, #3
 80138b6:	e008      	b.n	80138ca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80138b8:	697b      	ldr	r3, [r7, #20]
 80138ba:	68ba      	ldr	r2, [r7, #8]
 80138bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	687a      	ldr	r2, [r7, #4]
 80138c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80138c8:	2300      	movs	r3, #0
}
 80138ca:	4618      	mov	r0, r3
 80138cc:	371c      	adds	r7, #28
 80138ce:	46bd      	mov	sp, r7
 80138d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d4:	4770      	bx	lr

080138d6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80138d6:	b480      	push	{r7}
 80138d8:	b085      	sub	sp, #20
 80138da:	af00      	add	r7, sp, #0
 80138dc:	6078      	str	r0, [r7, #4]
 80138de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80138e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d101      	bne.n	80138f2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80138ee:	2303      	movs	r3, #3
 80138f0:	e004      	b.n	80138fc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	683a      	ldr	r2, [r7, #0]
 80138f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80138fa:	2300      	movs	r3, #0
}
 80138fc:	4618      	mov	r0, r3
 80138fe:	3714      	adds	r7, #20
 8013900:	46bd      	mov	sp, r7
 8013902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013906:	4770      	bx	lr

08013908 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b084      	sub	sp, #16
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013916:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801391e:	2b00      	cmp	r3, #0
 8013920:	d101      	bne.n	8013926 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013922:	2303      	movs	r3, #3
 8013924:	e016      	b.n	8013954 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	7c1b      	ldrb	r3, [r3, #16]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d109      	bne.n	8013942 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013938:	2101      	movs	r1, #1
 801393a:	6878      	ldr	r0, [r7, #4]
 801393c:	f001 fe9e 	bl	801567c <USBD_LL_PrepareReceive>
 8013940:	e007      	b.n	8013952 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013948:	2340      	movs	r3, #64	; 0x40
 801394a:	2101      	movs	r1, #1
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f001 fe95 	bl	801567c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013952:	2300      	movs	r3, #0
}
 8013954:	4618      	mov	r0, r3
 8013956:	3710      	adds	r7, #16
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}

0801395c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b086      	sub	sp, #24
 8013960:	af00      	add	r7, sp, #0
 8013962:	60f8      	str	r0, [r7, #12]
 8013964:	60b9      	str	r1, [r7, #8]
 8013966:	4613      	mov	r3, r2
 8013968:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d101      	bne.n	8013974 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013970:	2303      	movs	r3, #3
 8013972:	e01f      	b.n	80139b4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	2200      	movs	r2, #0
 8013978:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	2200      	movs	r2, #0
 8013980:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	2200      	movs	r2, #0
 8013988:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d003      	beq.n	801399a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	68ba      	ldr	r2, [r7, #8]
 8013996:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	2201      	movs	r2, #1
 801399e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	79fa      	ldrb	r2, [r7, #7]
 80139a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80139a8:	68f8      	ldr	r0, [r7, #12]
 80139aa:	f001 fcfd 	bl	80153a8 <USBD_LL_Init>
 80139ae:	4603      	mov	r3, r0
 80139b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80139b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	3718      	adds	r7, #24
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}

080139bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b084      	sub	sp, #16
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80139c6:	2300      	movs	r3, #0
 80139c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d101      	bne.n	80139d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80139d0:	2303      	movs	r3, #3
 80139d2:	e016      	b.n	8013a02 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	683a      	ldr	r2, [r7, #0]
 80139d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80139e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d00b      	beq.n	8013a00 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80139ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139f0:	f107 020e 	add.w	r2, r7, #14
 80139f4:	4610      	mov	r0, r2
 80139f6:	4798      	blx	r3
 80139f8:	4602      	mov	r2, r0
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8013a00:	2300      	movs	r3, #0
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	3710      	adds	r7, #16
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd80      	pop	{r7, pc}

08013a0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013a0a:	b580      	push	{r7, lr}
 8013a0c:	b082      	sub	sp, #8
 8013a0e:	af00      	add	r7, sp, #0
 8013a10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013a12:	6878      	ldr	r0, [r7, #4]
 8013a14:	f001 fd28 	bl	8015468 <USBD_LL_Start>
 8013a18:	4603      	mov	r3, r0
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3708      	adds	r7, #8
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}

08013a22 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013a22:	b480      	push	{r7}
 8013a24:	b083      	sub	sp, #12
 8013a26:	af00      	add	r7, sp, #0
 8013a28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013a2a:	2300      	movs	r3, #0
}
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	370c      	adds	r7, #12
 8013a30:	46bd      	mov	sp, r7
 8013a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a36:	4770      	bx	lr

08013a38 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b084      	sub	sp, #16
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	6078      	str	r0, [r7, #4]
 8013a40:	460b      	mov	r3, r1
 8013a42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013a44:	2303      	movs	r3, #3
 8013a46:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d009      	beq.n	8013a66 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	78fa      	ldrb	r2, [r7, #3]
 8013a5c:	4611      	mov	r1, r2
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	4798      	blx	r3
 8013a62:	4603      	mov	r3, r0
 8013a64:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a68:	4618      	mov	r0, r3
 8013a6a:	3710      	adds	r7, #16
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}

08013a70 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b082      	sub	sp, #8
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
 8013a78:	460b      	mov	r3, r1
 8013a7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d007      	beq.n	8013a96 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	78fa      	ldrb	r2, [r7, #3]
 8013a90:	4611      	mov	r1, r2
 8013a92:	6878      	ldr	r0, [r7, #4]
 8013a94:	4798      	blx	r3
  }

  return USBD_OK;
 8013a96:	2300      	movs	r3, #0
}
 8013a98:	4618      	mov	r0, r3
 8013a9a:	3708      	adds	r7, #8
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}

08013aa0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b084      	sub	sp, #16
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013ab0:	6839      	ldr	r1, [r7, #0]
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f000 ff46 	bl	8014944 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2201      	movs	r2, #1
 8013abc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013ac6:	461a      	mov	r2, r3
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013ad4:	f003 031f 	and.w	r3, r3, #31
 8013ad8:	2b02      	cmp	r3, #2
 8013ada:	d01a      	beq.n	8013b12 <USBD_LL_SetupStage+0x72>
 8013adc:	2b02      	cmp	r3, #2
 8013ade:	d822      	bhi.n	8013b26 <USBD_LL_SetupStage+0x86>
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d002      	beq.n	8013aea <USBD_LL_SetupStage+0x4a>
 8013ae4:	2b01      	cmp	r3, #1
 8013ae6:	d00a      	beq.n	8013afe <USBD_LL_SetupStage+0x5e>
 8013ae8:	e01d      	b.n	8013b26 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013af0:	4619      	mov	r1, r3
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f000 f9ee 	bl	8013ed4 <USBD_StdDevReq>
 8013af8:	4603      	mov	r3, r0
 8013afa:	73fb      	strb	r3, [r7, #15]
      break;
 8013afc:	e020      	b.n	8013b40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013b04:	4619      	mov	r1, r3
 8013b06:	6878      	ldr	r0, [r7, #4]
 8013b08:	f000 fa52 	bl	8013fb0 <USBD_StdItfReq>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8013b10:	e016      	b.n	8013b40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013b18:	4619      	mov	r1, r3
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f000 fa91 	bl	8014042 <USBD_StdEPReq>
 8013b20:	4603      	mov	r3, r0
 8013b22:	73fb      	strb	r3, [r7, #15]
      break;
 8013b24:	e00c      	b.n	8013b40 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013b2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013b30:	b2db      	uxtb	r3, r3
 8013b32:	4619      	mov	r1, r3
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f001 fcf7 	bl	8015528 <USBD_LL_StallEP>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8013b3e:	bf00      	nop
  }

  return ret;
 8013b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b42:	4618      	mov	r0, r3
 8013b44:	3710      	adds	r7, #16
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}

08013b4a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013b4a:	b580      	push	{r7, lr}
 8013b4c:	b086      	sub	sp, #24
 8013b4e:	af00      	add	r7, sp, #0
 8013b50:	60f8      	str	r0, [r7, #12]
 8013b52:	460b      	mov	r3, r1
 8013b54:	607a      	str	r2, [r7, #4]
 8013b56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013b58:	7afb      	ldrb	r3, [r7, #11]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d138      	bne.n	8013bd0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013b64:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013b6c:	2b03      	cmp	r3, #3
 8013b6e:	d14a      	bne.n	8013c06 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	689a      	ldr	r2, [r3, #8]
 8013b74:	693b      	ldr	r3, [r7, #16]
 8013b76:	68db      	ldr	r3, [r3, #12]
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d913      	bls.n	8013ba4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013b7c:	693b      	ldr	r3, [r7, #16]
 8013b7e:	689a      	ldr	r2, [r3, #8]
 8013b80:	693b      	ldr	r3, [r7, #16]
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	1ad2      	subs	r2, r2, r3
 8013b86:	693b      	ldr	r3, [r7, #16]
 8013b88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	68da      	ldr	r2, [r3, #12]
 8013b8e:	693b      	ldr	r3, [r7, #16]
 8013b90:	689b      	ldr	r3, [r3, #8]
 8013b92:	4293      	cmp	r3, r2
 8013b94:	bf28      	it	cs
 8013b96:	4613      	movcs	r3, r2
 8013b98:	461a      	mov	r2, r3
 8013b9a:	6879      	ldr	r1, [r7, #4]
 8013b9c:	68f8      	ldr	r0, [r7, #12]
 8013b9e:	f000 ffc5 	bl	8014b2c <USBD_CtlContinueRx>
 8013ba2:	e030      	b.n	8013c06 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013baa:	b2db      	uxtb	r3, r3
 8013bac:	2b03      	cmp	r3, #3
 8013bae:	d10b      	bne.n	8013bc8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bb6:	691b      	ldr	r3, [r3, #16]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d005      	beq.n	8013bc8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bc2:	691b      	ldr	r3, [r3, #16]
 8013bc4:	68f8      	ldr	r0, [r7, #12]
 8013bc6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013bc8:	68f8      	ldr	r0, [r7, #12]
 8013bca:	f000 ffc0 	bl	8014b4e <USBD_CtlSendStatus>
 8013bce:	e01a      	b.n	8013c06 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013bd6:	b2db      	uxtb	r3, r3
 8013bd8:	2b03      	cmp	r3, #3
 8013bda:	d114      	bne.n	8013c06 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013be2:	699b      	ldr	r3, [r3, #24]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d00e      	beq.n	8013c06 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bee:	699b      	ldr	r3, [r3, #24]
 8013bf0:	7afa      	ldrb	r2, [r7, #11]
 8013bf2:	4611      	mov	r1, r2
 8013bf4:	68f8      	ldr	r0, [r7, #12]
 8013bf6:	4798      	blx	r3
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013bfc:	7dfb      	ldrb	r3, [r7, #23]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d001      	beq.n	8013c06 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8013c02:	7dfb      	ldrb	r3, [r7, #23]
 8013c04:	e000      	b.n	8013c08 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8013c06:	2300      	movs	r3, #0
}
 8013c08:	4618      	mov	r0, r3
 8013c0a:	3718      	adds	r7, #24
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}

08013c10 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b086      	sub	sp, #24
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	60f8      	str	r0, [r7, #12]
 8013c18:	460b      	mov	r3, r1
 8013c1a:	607a      	str	r2, [r7, #4]
 8013c1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013c1e:	7afb      	ldrb	r3, [r7, #11]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d16b      	bne.n	8013cfc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	3314      	adds	r3, #20
 8013c28:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013c30:	2b02      	cmp	r3, #2
 8013c32:	d156      	bne.n	8013ce2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8013c34:	693b      	ldr	r3, [r7, #16]
 8013c36:	689a      	ldr	r2, [r3, #8]
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	68db      	ldr	r3, [r3, #12]
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	d914      	bls.n	8013c6a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013c40:	693b      	ldr	r3, [r7, #16]
 8013c42:	689a      	ldr	r2, [r3, #8]
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	68db      	ldr	r3, [r3, #12]
 8013c48:	1ad2      	subs	r2, r2, r3
 8013c4a:	693b      	ldr	r3, [r7, #16]
 8013c4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	689b      	ldr	r3, [r3, #8]
 8013c52:	461a      	mov	r2, r3
 8013c54:	6879      	ldr	r1, [r7, #4]
 8013c56:	68f8      	ldr	r0, [r7, #12]
 8013c58:	f000 ff3a 	bl	8014ad0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	2200      	movs	r2, #0
 8013c60:	2100      	movs	r1, #0
 8013c62:	68f8      	ldr	r0, [r7, #12]
 8013c64:	f001 fd0a 	bl	801567c <USBD_LL_PrepareReceive>
 8013c68:	e03b      	b.n	8013ce2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013c6a:	693b      	ldr	r3, [r7, #16]
 8013c6c:	68da      	ldr	r2, [r3, #12]
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	689b      	ldr	r3, [r3, #8]
 8013c72:	429a      	cmp	r2, r3
 8013c74:	d11c      	bne.n	8013cb0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013c76:	693b      	ldr	r3, [r7, #16]
 8013c78:	685a      	ldr	r2, [r3, #4]
 8013c7a:	693b      	ldr	r3, [r7, #16]
 8013c7c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d316      	bcc.n	8013cb0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013c82:	693b      	ldr	r3, [r7, #16]
 8013c84:	685a      	ldr	r2, [r3, #4]
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013c8c:	429a      	cmp	r2, r3
 8013c8e:	d20f      	bcs.n	8013cb0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013c90:	2200      	movs	r2, #0
 8013c92:	2100      	movs	r1, #0
 8013c94:	68f8      	ldr	r0, [r7, #12]
 8013c96:	f000 ff1b 	bl	8014ad0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	2100      	movs	r1, #0
 8013ca8:	68f8      	ldr	r0, [r7, #12]
 8013caa:	f001 fce7 	bl	801567c <USBD_LL_PrepareReceive>
 8013cae:	e018      	b.n	8013ce2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013cb6:	b2db      	uxtb	r3, r3
 8013cb8:	2b03      	cmp	r3, #3
 8013cba:	d10b      	bne.n	8013cd4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cc2:	68db      	ldr	r3, [r3, #12]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d005      	beq.n	8013cd4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cce:	68db      	ldr	r3, [r3, #12]
 8013cd0:	68f8      	ldr	r0, [r7, #12]
 8013cd2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013cd4:	2180      	movs	r1, #128	; 0x80
 8013cd6:	68f8      	ldr	r0, [r7, #12]
 8013cd8:	f001 fc26 	bl	8015528 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013cdc:	68f8      	ldr	r0, [r7, #12]
 8013cde:	f000 ff49 	bl	8014b74 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013ce8:	2b01      	cmp	r3, #1
 8013cea:	d122      	bne.n	8013d32 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8013cec:	68f8      	ldr	r0, [r7, #12]
 8013cee:	f7ff fe98 	bl	8013a22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013cfa:	e01a      	b.n	8013d32 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d02:	b2db      	uxtb	r3, r3
 8013d04:	2b03      	cmp	r3, #3
 8013d06:	d114      	bne.n	8013d32 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d0e:	695b      	ldr	r3, [r3, #20]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d00e      	beq.n	8013d32 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d1a:	695b      	ldr	r3, [r3, #20]
 8013d1c:	7afa      	ldrb	r2, [r7, #11]
 8013d1e:	4611      	mov	r1, r2
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	4798      	blx	r3
 8013d24:	4603      	mov	r3, r0
 8013d26:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013d28:	7dfb      	ldrb	r3, [r7, #23]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d001      	beq.n	8013d32 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8013d2e:	7dfb      	ldrb	r3, [r7, #23]
 8013d30:	e000      	b.n	8013d34 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8013d32:	2300      	movs	r3, #0
}
 8013d34:	4618      	mov	r0, r3
 8013d36:	3718      	adds	r7, #24
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}

08013d3c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b082      	sub	sp, #8
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2201      	movs	r2, #1
 8013d48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2200      	movs	r2, #0
 8013d50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2200      	movs	r2, #0
 8013d58:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d101      	bne.n	8013d70 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8013d6c:	2303      	movs	r3, #3
 8013d6e:	e02f      	b.n	8013dd0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d00f      	beq.n	8013d9a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d009      	beq.n	8013d9a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d8c:	685b      	ldr	r3, [r3, #4]
 8013d8e:	687a      	ldr	r2, [r7, #4]
 8013d90:	6852      	ldr	r2, [r2, #4]
 8013d92:	b2d2      	uxtb	r2, r2
 8013d94:	4611      	mov	r1, r2
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013d9a:	2340      	movs	r3, #64	; 0x40
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	2100      	movs	r1, #0
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f001 fb7c 	bl	801549e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	2201      	movs	r2, #1
 8013daa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	2240      	movs	r2, #64	; 0x40
 8013db2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013db6:	2340      	movs	r3, #64	; 0x40
 8013db8:	2200      	movs	r2, #0
 8013dba:	2180      	movs	r1, #128	; 0x80
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f001 fb6e 	bl	801549e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	2201      	movs	r2, #1
 8013dc6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2240      	movs	r2, #64	; 0x40
 8013dcc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8013dce:	2300      	movs	r3, #0
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3708      	adds	r7, #8
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}

08013dd8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013dd8:	b480      	push	{r7}
 8013dda:	b083      	sub	sp, #12
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
 8013de0:	460b      	mov	r3, r1
 8013de2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	78fa      	ldrb	r2, [r7, #3]
 8013de8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013dea:	2300      	movs	r3, #0
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	370c      	adds	r7, #12
 8013df0:	46bd      	mov	sp, r7
 8013df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df6:	4770      	bx	lr

08013df8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013df8:	b480      	push	{r7}
 8013dfa:	b083      	sub	sp, #12
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e06:	b2da      	uxtb	r2, r3
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	2204      	movs	r2, #4
 8013e12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013e16:	2300      	movs	r3, #0
}
 8013e18:	4618      	mov	r0, r3
 8013e1a:	370c      	adds	r7, #12
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e22:	4770      	bx	lr

08013e24 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013e24:	b480      	push	{r7}
 8013e26:	b083      	sub	sp, #12
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e32:	b2db      	uxtb	r3, r3
 8013e34:	2b04      	cmp	r3, #4
 8013e36:	d106      	bne.n	8013e46 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013e3e:	b2da      	uxtb	r2, r3
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013e46:	2300      	movs	r3, #0
}
 8013e48:	4618      	mov	r0, r3
 8013e4a:	370c      	adds	r7, #12
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e52:	4770      	bx	lr

08013e54 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b082      	sub	sp, #8
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d101      	bne.n	8013e6a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8013e66:	2303      	movs	r3, #3
 8013e68:	e012      	b.n	8013e90 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e70:	b2db      	uxtb	r3, r3
 8013e72:	2b03      	cmp	r3, #3
 8013e74:	d10b      	bne.n	8013e8e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e7c:	69db      	ldr	r3, [r3, #28]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d005      	beq.n	8013e8e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e88:	69db      	ldr	r3, [r3, #28]
 8013e8a:	6878      	ldr	r0, [r7, #4]
 8013e8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013e8e:	2300      	movs	r3, #0
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3708      	adds	r7, #8
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}

08013e98 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013e98:	b480      	push	{r7}
 8013e9a:	b087      	sub	sp, #28
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013ea4:	697b      	ldr	r3, [r7, #20]
 8013ea6:	781b      	ldrb	r3, [r3, #0]
 8013ea8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	3301      	adds	r3, #1
 8013eae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013eb0:	697b      	ldr	r3, [r7, #20]
 8013eb2:	781b      	ldrb	r3, [r3, #0]
 8013eb4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013eb6:	8a3b      	ldrh	r3, [r7, #16]
 8013eb8:	021b      	lsls	r3, r3, #8
 8013eba:	b21a      	sxth	r2, r3
 8013ebc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013ec0:	4313      	orrs	r3, r2
 8013ec2:	b21b      	sxth	r3, r3
 8013ec4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013ec6:	89fb      	ldrh	r3, [r7, #14]
}
 8013ec8:	4618      	mov	r0, r3
 8013eca:	371c      	adds	r7, #28
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed2:	4770      	bx	lr

08013ed4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
 8013edc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ee2:	683b      	ldr	r3, [r7, #0]
 8013ee4:	781b      	ldrb	r3, [r3, #0]
 8013ee6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013eea:	2b40      	cmp	r3, #64	; 0x40
 8013eec:	d005      	beq.n	8013efa <USBD_StdDevReq+0x26>
 8013eee:	2b40      	cmp	r3, #64	; 0x40
 8013ef0:	d853      	bhi.n	8013f9a <USBD_StdDevReq+0xc6>
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d00b      	beq.n	8013f0e <USBD_StdDevReq+0x3a>
 8013ef6:	2b20      	cmp	r3, #32
 8013ef8:	d14f      	bne.n	8013f9a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f00:	689b      	ldr	r3, [r3, #8]
 8013f02:	6839      	ldr	r1, [r7, #0]
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	4798      	blx	r3
 8013f08:	4603      	mov	r3, r0
 8013f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8013f0c:	e04a      	b.n	8013fa4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	785b      	ldrb	r3, [r3, #1]
 8013f12:	2b09      	cmp	r3, #9
 8013f14:	d83b      	bhi.n	8013f8e <USBD_StdDevReq+0xba>
 8013f16:	a201      	add	r2, pc, #4	; (adr r2, 8013f1c <USBD_StdDevReq+0x48>)
 8013f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f1c:	08013f71 	.word	0x08013f71
 8013f20:	08013f85 	.word	0x08013f85
 8013f24:	08013f8f 	.word	0x08013f8f
 8013f28:	08013f7b 	.word	0x08013f7b
 8013f2c:	08013f8f 	.word	0x08013f8f
 8013f30:	08013f4f 	.word	0x08013f4f
 8013f34:	08013f45 	.word	0x08013f45
 8013f38:	08013f8f 	.word	0x08013f8f
 8013f3c:	08013f67 	.word	0x08013f67
 8013f40:	08013f59 	.word	0x08013f59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013f44:	6839      	ldr	r1, [r7, #0]
 8013f46:	6878      	ldr	r0, [r7, #4]
 8013f48:	f000 f9de 	bl	8014308 <USBD_GetDescriptor>
          break;
 8013f4c:	e024      	b.n	8013f98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013f4e:	6839      	ldr	r1, [r7, #0]
 8013f50:	6878      	ldr	r0, [r7, #4]
 8013f52:	f000 fb6d 	bl	8014630 <USBD_SetAddress>
          break;
 8013f56:	e01f      	b.n	8013f98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013f58:	6839      	ldr	r1, [r7, #0]
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f000 fbac 	bl	80146b8 <USBD_SetConfig>
 8013f60:	4603      	mov	r3, r0
 8013f62:	73fb      	strb	r3, [r7, #15]
          break;
 8013f64:	e018      	b.n	8013f98 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013f66:	6839      	ldr	r1, [r7, #0]
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f000 fc4b 	bl	8014804 <USBD_GetConfig>
          break;
 8013f6e:	e013      	b.n	8013f98 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013f70:	6839      	ldr	r1, [r7, #0]
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f000 fc7c 	bl	8014870 <USBD_GetStatus>
          break;
 8013f78:	e00e      	b.n	8013f98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013f7a:	6839      	ldr	r1, [r7, #0]
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f000 fcab 	bl	80148d8 <USBD_SetFeature>
          break;
 8013f82:	e009      	b.n	8013f98 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013f84:	6839      	ldr	r1, [r7, #0]
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	f000 fcba 	bl	8014900 <USBD_ClrFeature>
          break;
 8013f8c:	e004      	b.n	8013f98 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8013f8e:	6839      	ldr	r1, [r7, #0]
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f000 fd11 	bl	80149b8 <USBD_CtlError>
          break;
 8013f96:	bf00      	nop
      }
      break;
 8013f98:	e004      	b.n	8013fa4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8013f9a:	6839      	ldr	r1, [r7, #0]
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f000 fd0b 	bl	80149b8 <USBD_CtlError>
      break;
 8013fa2:	bf00      	nop
  }

  return ret;
 8013fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	3710      	adds	r7, #16
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd80      	pop	{r7, pc}
 8013fae:	bf00      	nop

08013fb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b084      	sub	sp, #16
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
 8013fb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013fba:	2300      	movs	r3, #0
 8013fbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013fbe:	683b      	ldr	r3, [r7, #0]
 8013fc0:	781b      	ldrb	r3, [r3, #0]
 8013fc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013fc6:	2b40      	cmp	r3, #64	; 0x40
 8013fc8:	d005      	beq.n	8013fd6 <USBD_StdItfReq+0x26>
 8013fca:	2b40      	cmp	r3, #64	; 0x40
 8013fcc:	d82f      	bhi.n	801402e <USBD_StdItfReq+0x7e>
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d001      	beq.n	8013fd6 <USBD_StdItfReq+0x26>
 8013fd2:	2b20      	cmp	r3, #32
 8013fd4:	d12b      	bne.n	801402e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fdc:	b2db      	uxtb	r3, r3
 8013fde:	3b01      	subs	r3, #1
 8013fe0:	2b02      	cmp	r3, #2
 8013fe2:	d81d      	bhi.n	8014020 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	889b      	ldrh	r3, [r3, #4]
 8013fe8:	b2db      	uxtb	r3, r3
 8013fea:	2b01      	cmp	r3, #1
 8013fec:	d813      	bhi.n	8014016 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ff4:	689b      	ldr	r3, [r3, #8]
 8013ff6:	6839      	ldr	r1, [r7, #0]
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	4798      	blx	r3
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	88db      	ldrh	r3, [r3, #6]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d110      	bne.n	801402a <USBD_StdItfReq+0x7a>
 8014008:	7bfb      	ldrb	r3, [r7, #15]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d10d      	bne.n	801402a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801400e:	6878      	ldr	r0, [r7, #4]
 8014010:	f000 fd9d 	bl	8014b4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014014:	e009      	b.n	801402a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8014016:	6839      	ldr	r1, [r7, #0]
 8014018:	6878      	ldr	r0, [r7, #4]
 801401a:	f000 fccd 	bl	80149b8 <USBD_CtlError>
          break;
 801401e:	e004      	b.n	801402a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8014020:	6839      	ldr	r1, [r7, #0]
 8014022:	6878      	ldr	r0, [r7, #4]
 8014024:	f000 fcc8 	bl	80149b8 <USBD_CtlError>
          break;
 8014028:	e000      	b.n	801402c <USBD_StdItfReq+0x7c>
          break;
 801402a:	bf00      	nop
      }
      break;
 801402c:	e004      	b.n	8014038 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801402e:	6839      	ldr	r1, [r7, #0]
 8014030:	6878      	ldr	r0, [r7, #4]
 8014032:	f000 fcc1 	bl	80149b8 <USBD_CtlError>
      break;
 8014036:	bf00      	nop
  }

  return ret;
 8014038:	7bfb      	ldrb	r3, [r7, #15]
}
 801403a:	4618      	mov	r0, r3
 801403c:	3710      	adds	r7, #16
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}

08014042 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014042:	b580      	push	{r7, lr}
 8014044:	b084      	sub	sp, #16
 8014046:	af00      	add	r7, sp, #0
 8014048:	6078      	str	r0, [r7, #4]
 801404a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801404c:	2300      	movs	r3, #0
 801404e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	889b      	ldrh	r3, [r3, #4]
 8014054:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014056:	683b      	ldr	r3, [r7, #0]
 8014058:	781b      	ldrb	r3, [r3, #0]
 801405a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801405e:	2b40      	cmp	r3, #64	; 0x40
 8014060:	d007      	beq.n	8014072 <USBD_StdEPReq+0x30>
 8014062:	2b40      	cmp	r3, #64	; 0x40
 8014064:	f200 8145 	bhi.w	80142f2 <USBD_StdEPReq+0x2b0>
 8014068:	2b00      	cmp	r3, #0
 801406a:	d00c      	beq.n	8014086 <USBD_StdEPReq+0x44>
 801406c:	2b20      	cmp	r3, #32
 801406e:	f040 8140 	bne.w	80142f2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014078:	689b      	ldr	r3, [r3, #8]
 801407a:	6839      	ldr	r1, [r7, #0]
 801407c:	6878      	ldr	r0, [r7, #4]
 801407e:	4798      	blx	r3
 8014080:	4603      	mov	r3, r0
 8014082:	73fb      	strb	r3, [r7, #15]
      break;
 8014084:	e13a      	b.n	80142fc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014086:	683b      	ldr	r3, [r7, #0]
 8014088:	785b      	ldrb	r3, [r3, #1]
 801408a:	2b03      	cmp	r3, #3
 801408c:	d007      	beq.n	801409e <USBD_StdEPReq+0x5c>
 801408e:	2b03      	cmp	r3, #3
 8014090:	f300 8129 	bgt.w	80142e6 <USBD_StdEPReq+0x2a4>
 8014094:	2b00      	cmp	r3, #0
 8014096:	d07f      	beq.n	8014198 <USBD_StdEPReq+0x156>
 8014098:	2b01      	cmp	r3, #1
 801409a:	d03c      	beq.n	8014116 <USBD_StdEPReq+0xd4>
 801409c:	e123      	b.n	80142e6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140a4:	b2db      	uxtb	r3, r3
 80140a6:	2b02      	cmp	r3, #2
 80140a8:	d002      	beq.n	80140b0 <USBD_StdEPReq+0x6e>
 80140aa:	2b03      	cmp	r3, #3
 80140ac:	d016      	beq.n	80140dc <USBD_StdEPReq+0x9a>
 80140ae:	e02c      	b.n	801410a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80140b0:	7bbb      	ldrb	r3, [r7, #14]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d00d      	beq.n	80140d2 <USBD_StdEPReq+0x90>
 80140b6:	7bbb      	ldrb	r3, [r7, #14]
 80140b8:	2b80      	cmp	r3, #128	; 0x80
 80140ba:	d00a      	beq.n	80140d2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80140bc:	7bbb      	ldrb	r3, [r7, #14]
 80140be:	4619      	mov	r1, r3
 80140c0:	6878      	ldr	r0, [r7, #4]
 80140c2:	f001 fa31 	bl	8015528 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80140c6:	2180      	movs	r1, #128	; 0x80
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f001 fa2d 	bl	8015528 <USBD_LL_StallEP>
 80140ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80140d0:	e020      	b.n	8014114 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80140d2:	6839      	ldr	r1, [r7, #0]
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	f000 fc6f 	bl	80149b8 <USBD_CtlError>
              break;
 80140da:	e01b      	b.n	8014114 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80140dc:	683b      	ldr	r3, [r7, #0]
 80140de:	885b      	ldrh	r3, [r3, #2]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d10e      	bne.n	8014102 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80140e4:	7bbb      	ldrb	r3, [r7, #14]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d00b      	beq.n	8014102 <USBD_StdEPReq+0xc0>
 80140ea:	7bbb      	ldrb	r3, [r7, #14]
 80140ec:	2b80      	cmp	r3, #128	; 0x80
 80140ee:	d008      	beq.n	8014102 <USBD_StdEPReq+0xc0>
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	88db      	ldrh	r3, [r3, #6]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d104      	bne.n	8014102 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80140f8:	7bbb      	ldrb	r3, [r7, #14]
 80140fa:	4619      	mov	r1, r3
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f001 fa13 	bl	8015528 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014102:	6878      	ldr	r0, [r7, #4]
 8014104:	f000 fd23 	bl	8014b4e <USBD_CtlSendStatus>

              break;
 8014108:	e004      	b.n	8014114 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801410a:	6839      	ldr	r1, [r7, #0]
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f000 fc53 	bl	80149b8 <USBD_CtlError>
              break;
 8014112:	bf00      	nop
          }
          break;
 8014114:	e0ec      	b.n	80142f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801411c:	b2db      	uxtb	r3, r3
 801411e:	2b02      	cmp	r3, #2
 8014120:	d002      	beq.n	8014128 <USBD_StdEPReq+0xe6>
 8014122:	2b03      	cmp	r3, #3
 8014124:	d016      	beq.n	8014154 <USBD_StdEPReq+0x112>
 8014126:	e030      	b.n	801418a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014128:	7bbb      	ldrb	r3, [r7, #14]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d00d      	beq.n	801414a <USBD_StdEPReq+0x108>
 801412e:	7bbb      	ldrb	r3, [r7, #14]
 8014130:	2b80      	cmp	r3, #128	; 0x80
 8014132:	d00a      	beq.n	801414a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014134:	7bbb      	ldrb	r3, [r7, #14]
 8014136:	4619      	mov	r1, r3
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	f001 f9f5 	bl	8015528 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801413e:	2180      	movs	r1, #128	; 0x80
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f001 f9f1 	bl	8015528 <USBD_LL_StallEP>
 8014146:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014148:	e025      	b.n	8014196 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801414a:	6839      	ldr	r1, [r7, #0]
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f000 fc33 	bl	80149b8 <USBD_CtlError>
              break;
 8014152:	e020      	b.n	8014196 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014154:	683b      	ldr	r3, [r7, #0]
 8014156:	885b      	ldrh	r3, [r3, #2]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d11b      	bne.n	8014194 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801415c:	7bbb      	ldrb	r3, [r7, #14]
 801415e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014162:	2b00      	cmp	r3, #0
 8014164:	d004      	beq.n	8014170 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014166:	7bbb      	ldrb	r3, [r7, #14]
 8014168:	4619      	mov	r1, r3
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f001 f9fb 	bl	8015566 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f000 fcec 	bl	8014b4e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801417c:	689b      	ldr	r3, [r3, #8]
 801417e:	6839      	ldr	r1, [r7, #0]
 8014180:	6878      	ldr	r0, [r7, #4]
 8014182:	4798      	blx	r3
 8014184:	4603      	mov	r3, r0
 8014186:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8014188:	e004      	b.n	8014194 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801418a:	6839      	ldr	r1, [r7, #0]
 801418c:	6878      	ldr	r0, [r7, #4]
 801418e:	f000 fc13 	bl	80149b8 <USBD_CtlError>
              break;
 8014192:	e000      	b.n	8014196 <USBD_StdEPReq+0x154>
              break;
 8014194:	bf00      	nop
          }
          break;
 8014196:	e0ab      	b.n	80142f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801419e:	b2db      	uxtb	r3, r3
 80141a0:	2b02      	cmp	r3, #2
 80141a2:	d002      	beq.n	80141aa <USBD_StdEPReq+0x168>
 80141a4:	2b03      	cmp	r3, #3
 80141a6:	d032      	beq.n	801420e <USBD_StdEPReq+0x1cc>
 80141a8:	e097      	b.n	80142da <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80141aa:	7bbb      	ldrb	r3, [r7, #14]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d007      	beq.n	80141c0 <USBD_StdEPReq+0x17e>
 80141b0:	7bbb      	ldrb	r3, [r7, #14]
 80141b2:	2b80      	cmp	r3, #128	; 0x80
 80141b4:	d004      	beq.n	80141c0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80141b6:	6839      	ldr	r1, [r7, #0]
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f000 fbfd 	bl	80149b8 <USBD_CtlError>
                break;
 80141be:	e091      	b.n	80142e4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80141c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	da0b      	bge.n	80141e0 <USBD_StdEPReq+0x19e>
 80141c8:	7bbb      	ldrb	r3, [r7, #14]
 80141ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80141ce:	4613      	mov	r3, r2
 80141d0:	009b      	lsls	r3, r3, #2
 80141d2:	4413      	add	r3, r2
 80141d4:	009b      	lsls	r3, r3, #2
 80141d6:	3310      	adds	r3, #16
 80141d8:	687a      	ldr	r2, [r7, #4]
 80141da:	4413      	add	r3, r2
 80141dc:	3304      	adds	r3, #4
 80141de:	e00b      	b.n	80141f8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80141e0:	7bbb      	ldrb	r3, [r7, #14]
 80141e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80141e6:	4613      	mov	r3, r2
 80141e8:	009b      	lsls	r3, r3, #2
 80141ea:	4413      	add	r3, r2
 80141ec:	009b      	lsls	r3, r3, #2
 80141ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80141f2:	687a      	ldr	r2, [r7, #4]
 80141f4:	4413      	add	r3, r2
 80141f6:	3304      	adds	r3, #4
 80141f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	2200      	movs	r2, #0
 80141fe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	2202      	movs	r2, #2
 8014204:	4619      	mov	r1, r3
 8014206:	6878      	ldr	r0, [r7, #4]
 8014208:	f000 fc47 	bl	8014a9a <USBD_CtlSendData>
              break;
 801420c:	e06a      	b.n	80142e4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801420e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014212:	2b00      	cmp	r3, #0
 8014214:	da11      	bge.n	801423a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014216:	7bbb      	ldrb	r3, [r7, #14]
 8014218:	f003 020f 	and.w	r2, r3, #15
 801421c:	6879      	ldr	r1, [r7, #4]
 801421e:	4613      	mov	r3, r2
 8014220:	009b      	lsls	r3, r3, #2
 8014222:	4413      	add	r3, r2
 8014224:	009b      	lsls	r3, r3, #2
 8014226:	440b      	add	r3, r1
 8014228:	3324      	adds	r3, #36	; 0x24
 801422a:	881b      	ldrh	r3, [r3, #0]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d117      	bne.n	8014260 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014230:	6839      	ldr	r1, [r7, #0]
 8014232:	6878      	ldr	r0, [r7, #4]
 8014234:	f000 fbc0 	bl	80149b8 <USBD_CtlError>
                  break;
 8014238:	e054      	b.n	80142e4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801423a:	7bbb      	ldrb	r3, [r7, #14]
 801423c:	f003 020f 	and.w	r2, r3, #15
 8014240:	6879      	ldr	r1, [r7, #4]
 8014242:	4613      	mov	r3, r2
 8014244:	009b      	lsls	r3, r3, #2
 8014246:	4413      	add	r3, r2
 8014248:	009b      	lsls	r3, r3, #2
 801424a:	440b      	add	r3, r1
 801424c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014250:	881b      	ldrh	r3, [r3, #0]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d104      	bne.n	8014260 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014256:	6839      	ldr	r1, [r7, #0]
 8014258:	6878      	ldr	r0, [r7, #4]
 801425a:	f000 fbad 	bl	80149b8 <USBD_CtlError>
                  break;
 801425e:	e041      	b.n	80142e4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014260:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014264:	2b00      	cmp	r3, #0
 8014266:	da0b      	bge.n	8014280 <USBD_StdEPReq+0x23e>
 8014268:	7bbb      	ldrb	r3, [r7, #14]
 801426a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801426e:	4613      	mov	r3, r2
 8014270:	009b      	lsls	r3, r3, #2
 8014272:	4413      	add	r3, r2
 8014274:	009b      	lsls	r3, r3, #2
 8014276:	3310      	adds	r3, #16
 8014278:	687a      	ldr	r2, [r7, #4]
 801427a:	4413      	add	r3, r2
 801427c:	3304      	adds	r3, #4
 801427e:	e00b      	b.n	8014298 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014280:	7bbb      	ldrb	r3, [r7, #14]
 8014282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014286:	4613      	mov	r3, r2
 8014288:	009b      	lsls	r3, r3, #2
 801428a:	4413      	add	r3, r2
 801428c:	009b      	lsls	r3, r3, #2
 801428e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014292:	687a      	ldr	r2, [r7, #4]
 8014294:	4413      	add	r3, r2
 8014296:	3304      	adds	r3, #4
 8014298:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801429a:	7bbb      	ldrb	r3, [r7, #14]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d002      	beq.n	80142a6 <USBD_StdEPReq+0x264>
 80142a0:	7bbb      	ldrb	r3, [r7, #14]
 80142a2:	2b80      	cmp	r3, #128	; 0x80
 80142a4:	d103      	bne.n	80142ae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80142a6:	68bb      	ldr	r3, [r7, #8]
 80142a8:	2200      	movs	r2, #0
 80142aa:	601a      	str	r2, [r3, #0]
 80142ac:	e00e      	b.n	80142cc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80142ae:	7bbb      	ldrb	r3, [r7, #14]
 80142b0:	4619      	mov	r1, r3
 80142b2:	6878      	ldr	r0, [r7, #4]
 80142b4:	f001 f976 	bl	80155a4 <USBD_LL_IsStallEP>
 80142b8:	4603      	mov	r3, r0
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d003      	beq.n	80142c6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80142be:	68bb      	ldr	r3, [r7, #8]
 80142c0:	2201      	movs	r2, #1
 80142c2:	601a      	str	r2, [r3, #0]
 80142c4:	e002      	b.n	80142cc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80142c6:	68bb      	ldr	r3, [r7, #8]
 80142c8:	2200      	movs	r2, #0
 80142ca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	2202      	movs	r2, #2
 80142d0:	4619      	mov	r1, r3
 80142d2:	6878      	ldr	r0, [r7, #4]
 80142d4:	f000 fbe1 	bl	8014a9a <USBD_CtlSendData>
              break;
 80142d8:	e004      	b.n	80142e4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80142da:	6839      	ldr	r1, [r7, #0]
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f000 fb6b 	bl	80149b8 <USBD_CtlError>
              break;
 80142e2:	bf00      	nop
          }
          break;
 80142e4:	e004      	b.n	80142f0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80142e6:	6839      	ldr	r1, [r7, #0]
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f000 fb65 	bl	80149b8 <USBD_CtlError>
          break;
 80142ee:	bf00      	nop
      }
      break;
 80142f0:	e004      	b.n	80142fc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80142f2:	6839      	ldr	r1, [r7, #0]
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f000 fb5f 	bl	80149b8 <USBD_CtlError>
      break;
 80142fa:	bf00      	nop
  }

  return ret;
 80142fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3710      	adds	r7, #16
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}
	...

08014308 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b084      	sub	sp, #16
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
 8014310:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014312:	2300      	movs	r3, #0
 8014314:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014316:	2300      	movs	r3, #0
 8014318:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801431a:	2300      	movs	r3, #0
 801431c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801431e:	683b      	ldr	r3, [r7, #0]
 8014320:	885b      	ldrh	r3, [r3, #2]
 8014322:	0a1b      	lsrs	r3, r3, #8
 8014324:	b29b      	uxth	r3, r3
 8014326:	3b01      	subs	r3, #1
 8014328:	2b0e      	cmp	r3, #14
 801432a:	f200 8152 	bhi.w	80145d2 <USBD_GetDescriptor+0x2ca>
 801432e:	a201      	add	r2, pc, #4	; (adr r2, 8014334 <USBD_GetDescriptor+0x2c>)
 8014330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014334:	080143a5 	.word	0x080143a5
 8014338:	080143bd 	.word	0x080143bd
 801433c:	080143fd 	.word	0x080143fd
 8014340:	080145d3 	.word	0x080145d3
 8014344:	080145d3 	.word	0x080145d3
 8014348:	08014573 	.word	0x08014573
 801434c:	0801459f 	.word	0x0801459f
 8014350:	080145d3 	.word	0x080145d3
 8014354:	080145d3 	.word	0x080145d3
 8014358:	080145d3 	.word	0x080145d3
 801435c:	080145d3 	.word	0x080145d3
 8014360:	080145d3 	.word	0x080145d3
 8014364:	080145d3 	.word	0x080145d3
 8014368:	080145d3 	.word	0x080145d3
 801436c:	08014371 	.word	0x08014371
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014376:	69db      	ldr	r3, [r3, #28]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d00b      	beq.n	8014394 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014382:	69db      	ldr	r3, [r3, #28]
 8014384:	687a      	ldr	r2, [r7, #4]
 8014386:	7c12      	ldrb	r2, [r2, #16]
 8014388:	f107 0108 	add.w	r1, r7, #8
 801438c:	4610      	mov	r0, r2
 801438e:	4798      	blx	r3
 8014390:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014392:	e126      	b.n	80145e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014394:	6839      	ldr	r1, [r7, #0]
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f000 fb0e 	bl	80149b8 <USBD_CtlError>
        err++;
 801439c:	7afb      	ldrb	r3, [r7, #11]
 801439e:	3301      	adds	r3, #1
 80143a0:	72fb      	strb	r3, [r7, #11]
      break;
 80143a2:	e11e      	b.n	80145e2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	687a      	ldr	r2, [r7, #4]
 80143ae:	7c12      	ldrb	r2, [r2, #16]
 80143b0:	f107 0108 	add.w	r1, r7, #8
 80143b4:	4610      	mov	r0, r2
 80143b6:	4798      	blx	r3
 80143b8:	60f8      	str	r0, [r7, #12]
      break;
 80143ba:	e112      	b.n	80145e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	7c1b      	ldrb	r3, [r3, #16]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d10d      	bne.n	80143e0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143cc:	f107 0208 	add.w	r2, r7, #8
 80143d0:	4610      	mov	r0, r2
 80143d2:	4798      	blx	r3
 80143d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	3301      	adds	r3, #1
 80143da:	2202      	movs	r2, #2
 80143dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80143de:	e100      	b.n	80145e2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143e8:	f107 0208 	add.w	r2, r7, #8
 80143ec:	4610      	mov	r0, r2
 80143ee:	4798      	blx	r3
 80143f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	3301      	adds	r3, #1
 80143f6:	2202      	movs	r2, #2
 80143f8:	701a      	strb	r2, [r3, #0]
      break;
 80143fa:	e0f2      	b.n	80145e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	885b      	ldrh	r3, [r3, #2]
 8014400:	b2db      	uxtb	r3, r3
 8014402:	2b05      	cmp	r3, #5
 8014404:	f200 80ac 	bhi.w	8014560 <USBD_GetDescriptor+0x258>
 8014408:	a201      	add	r2, pc, #4	; (adr r2, 8014410 <USBD_GetDescriptor+0x108>)
 801440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801440e:	bf00      	nop
 8014410:	08014429 	.word	0x08014429
 8014414:	0801445d 	.word	0x0801445d
 8014418:	08014491 	.word	0x08014491
 801441c:	080144c5 	.word	0x080144c5
 8014420:	080144f9 	.word	0x080144f9
 8014424:	0801452d 	.word	0x0801452d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801442e:	685b      	ldr	r3, [r3, #4]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d00b      	beq.n	801444c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801443a:	685b      	ldr	r3, [r3, #4]
 801443c:	687a      	ldr	r2, [r7, #4]
 801443e:	7c12      	ldrb	r2, [r2, #16]
 8014440:	f107 0108 	add.w	r1, r7, #8
 8014444:	4610      	mov	r0, r2
 8014446:	4798      	blx	r3
 8014448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801444a:	e091      	b.n	8014570 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801444c:	6839      	ldr	r1, [r7, #0]
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f000 fab2 	bl	80149b8 <USBD_CtlError>
            err++;
 8014454:	7afb      	ldrb	r3, [r7, #11]
 8014456:	3301      	adds	r3, #1
 8014458:	72fb      	strb	r3, [r7, #11]
          break;
 801445a:	e089      	b.n	8014570 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014462:	689b      	ldr	r3, [r3, #8]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d00b      	beq.n	8014480 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801446e:	689b      	ldr	r3, [r3, #8]
 8014470:	687a      	ldr	r2, [r7, #4]
 8014472:	7c12      	ldrb	r2, [r2, #16]
 8014474:	f107 0108 	add.w	r1, r7, #8
 8014478:	4610      	mov	r0, r2
 801447a:	4798      	blx	r3
 801447c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801447e:	e077      	b.n	8014570 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014480:	6839      	ldr	r1, [r7, #0]
 8014482:	6878      	ldr	r0, [r7, #4]
 8014484:	f000 fa98 	bl	80149b8 <USBD_CtlError>
            err++;
 8014488:	7afb      	ldrb	r3, [r7, #11]
 801448a:	3301      	adds	r3, #1
 801448c:	72fb      	strb	r3, [r7, #11]
          break;
 801448e:	e06f      	b.n	8014570 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014496:	68db      	ldr	r3, [r3, #12]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d00b      	beq.n	80144b4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144a2:	68db      	ldr	r3, [r3, #12]
 80144a4:	687a      	ldr	r2, [r7, #4]
 80144a6:	7c12      	ldrb	r2, [r2, #16]
 80144a8:	f107 0108 	add.w	r1, r7, #8
 80144ac:	4610      	mov	r0, r2
 80144ae:	4798      	blx	r3
 80144b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80144b2:	e05d      	b.n	8014570 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80144b4:	6839      	ldr	r1, [r7, #0]
 80144b6:	6878      	ldr	r0, [r7, #4]
 80144b8:	f000 fa7e 	bl	80149b8 <USBD_CtlError>
            err++;
 80144bc:	7afb      	ldrb	r3, [r7, #11]
 80144be:	3301      	adds	r3, #1
 80144c0:	72fb      	strb	r3, [r7, #11]
          break;
 80144c2:	e055      	b.n	8014570 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144ca:	691b      	ldr	r3, [r3, #16]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d00b      	beq.n	80144e8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144d6:	691b      	ldr	r3, [r3, #16]
 80144d8:	687a      	ldr	r2, [r7, #4]
 80144da:	7c12      	ldrb	r2, [r2, #16]
 80144dc:	f107 0108 	add.w	r1, r7, #8
 80144e0:	4610      	mov	r0, r2
 80144e2:	4798      	blx	r3
 80144e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80144e6:	e043      	b.n	8014570 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80144e8:	6839      	ldr	r1, [r7, #0]
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f000 fa64 	bl	80149b8 <USBD_CtlError>
            err++;
 80144f0:	7afb      	ldrb	r3, [r7, #11]
 80144f2:	3301      	adds	r3, #1
 80144f4:	72fb      	strb	r3, [r7, #11]
          break;
 80144f6:	e03b      	b.n	8014570 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144fe:	695b      	ldr	r3, [r3, #20]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d00b      	beq.n	801451c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801450a:	695b      	ldr	r3, [r3, #20]
 801450c:	687a      	ldr	r2, [r7, #4]
 801450e:	7c12      	ldrb	r2, [r2, #16]
 8014510:	f107 0108 	add.w	r1, r7, #8
 8014514:	4610      	mov	r0, r2
 8014516:	4798      	blx	r3
 8014518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801451a:	e029      	b.n	8014570 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801451c:	6839      	ldr	r1, [r7, #0]
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	f000 fa4a 	bl	80149b8 <USBD_CtlError>
            err++;
 8014524:	7afb      	ldrb	r3, [r7, #11]
 8014526:	3301      	adds	r3, #1
 8014528:	72fb      	strb	r3, [r7, #11]
          break;
 801452a:	e021      	b.n	8014570 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014532:	699b      	ldr	r3, [r3, #24]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d00b      	beq.n	8014550 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801453e:	699b      	ldr	r3, [r3, #24]
 8014540:	687a      	ldr	r2, [r7, #4]
 8014542:	7c12      	ldrb	r2, [r2, #16]
 8014544:	f107 0108 	add.w	r1, r7, #8
 8014548:	4610      	mov	r0, r2
 801454a:	4798      	blx	r3
 801454c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801454e:	e00f      	b.n	8014570 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014550:	6839      	ldr	r1, [r7, #0]
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f000 fa30 	bl	80149b8 <USBD_CtlError>
            err++;
 8014558:	7afb      	ldrb	r3, [r7, #11]
 801455a:	3301      	adds	r3, #1
 801455c:	72fb      	strb	r3, [r7, #11]
          break;
 801455e:	e007      	b.n	8014570 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014560:	6839      	ldr	r1, [r7, #0]
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	f000 fa28 	bl	80149b8 <USBD_CtlError>
          err++;
 8014568:	7afb      	ldrb	r3, [r7, #11]
 801456a:	3301      	adds	r3, #1
 801456c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801456e:	bf00      	nop
      }
      break;
 8014570:	e037      	b.n	80145e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	7c1b      	ldrb	r3, [r3, #16]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d109      	bne.n	801458e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014582:	f107 0208 	add.w	r2, r7, #8
 8014586:	4610      	mov	r0, r2
 8014588:	4798      	blx	r3
 801458a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801458c:	e029      	b.n	80145e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801458e:	6839      	ldr	r1, [r7, #0]
 8014590:	6878      	ldr	r0, [r7, #4]
 8014592:	f000 fa11 	bl	80149b8 <USBD_CtlError>
        err++;
 8014596:	7afb      	ldrb	r3, [r7, #11]
 8014598:	3301      	adds	r3, #1
 801459a:	72fb      	strb	r3, [r7, #11]
      break;
 801459c:	e021      	b.n	80145e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	7c1b      	ldrb	r3, [r3, #16]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d10d      	bne.n	80145c2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145ae:	f107 0208 	add.w	r2, r7, #8
 80145b2:	4610      	mov	r0, r2
 80145b4:	4798      	blx	r3
 80145b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	3301      	adds	r3, #1
 80145bc:	2207      	movs	r2, #7
 80145be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80145c0:	e00f      	b.n	80145e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80145c2:	6839      	ldr	r1, [r7, #0]
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f000 f9f7 	bl	80149b8 <USBD_CtlError>
        err++;
 80145ca:	7afb      	ldrb	r3, [r7, #11]
 80145cc:	3301      	adds	r3, #1
 80145ce:	72fb      	strb	r3, [r7, #11]
      break;
 80145d0:	e007      	b.n	80145e2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80145d2:	6839      	ldr	r1, [r7, #0]
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f000 f9ef 	bl	80149b8 <USBD_CtlError>
      err++;
 80145da:	7afb      	ldrb	r3, [r7, #11]
 80145dc:	3301      	adds	r3, #1
 80145de:	72fb      	strb	r3, [r7, #11]
      break;
 80145e0:	bf00      	nop
  }

  if (err != 0U)
 80145e2:	7afb      	ldrb	r3, [r7, #11]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d11e      	bne.n	8014626 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	88db      	ldrh	r3, [r3, #6]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d016      	beq.n	801461e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80145f0:	893b      	ldrh	r3, [r7, #8]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d00e      	beq.n	8014614 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80145f6:	683b      	ldr	r3, [r7, #0]
 80145f8:	88da      	ldrh	r2, [r3, #6]
 80145fa:	893b      	ldrh	r3, [r7, #8]
 80145fc:	4293      	cmp	r3, r2
 80145fe:	bf28      	it	cs
 8014600:	4613      	movcs	r3, r2
 8014602:	b29b      	uxth	r3, r3
 8014604:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014606:	893b      	ldrh	r3, [r7, #8]
 8014608:	461a      	mov	r2, r3
 801460a:	68f9      	ldr	r1, [r7, #12]
 801460c:	6878      	ldr	r0, [r7, #4]
 801460e:	f000 fa44 	bl	8014a9a <USBD_CtlSendData>
 8014612:	e009      	b.n	8014628 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014614:	6839      	ldr	r1, [r7, #0]
 8014616:	6878      	ldr	r0, [r7, #4]
 8014618:	f000 f9ce 	bl	80149b8 <USBD_CtlError>
 801461c:	e004      	b.n	8014628 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	f000 fa95 	bl	8014b4e <USBD_CtlSendStatus>
 8014624:	e000      	b.n	8014628 <USBD_GetDescriptor+0x320>
    return;
 8014626:	bf00      	nop
  }
}
 8014628:	3710      	adds	r7, #16
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
 801462e:	bf00      	nop

08014630 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b084      	sub	sp, #16
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
 8014638:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	889b      	ldrh	r3, [r3, #4]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d131      	bne.n	80146a6 <USBD_SetAddress+0x76>
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	88db      	ldrh	r3, [r3, #6]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d12d      	bne.n	80146a6 <USBD_SetAddress+0x76>
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	885b      	ldrh	r3, [r3, #2]
 801464e:	2b7f      	cmp	r3, #127	; 0x7f
 8014650:	d829      	bhi.n	80146a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	885b      	ldrh	r3, [r3, #2]
 8014656:	b2db      	uxtb	r3, r3
 8014658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801465c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014664:	b2db      	uxtb	r3, r3
 8014666:	2b03      	cmp	r3, #3
 8014668:	d104      	bne.n	8014674 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801466a:	6839      	ldr	r1, [r7, #0]
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	f000 f9a3 	bl	80149b8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014672:	e01d      	b.n	80146b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	7bfa      	ldrb	r2, [r7, #15]
 8014678:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801467c:	7bfb      	ldrb	r3, [r7, #15]
 801467e:	4619      	mov	r1, r3
 8014680:	6878      	ldr	r0, [r7, #4]
 8014682:	f000 ffbb 	bl	80155fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f000 fa61 	bl	8014b4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801468c:	7bfb      	ldrb	r3, [r7, #15]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d004      	beq.n	801469c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	2202      	movs	r2, #2
 8014696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801469a:	e009      	b.n	80146b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2201      	movs	r2, #1
 80146a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146a4:	e004      	b.n	80146b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80146a6:	6839      	ldr	r1, [r7, #0]
 80146a8:	6878      	ldr	r0, [r7, #4]
 80146aa:	f000 f985 	bl	80149b8 <USBD_CtlError>
  }
}
 80146ae:	bf00      	nop
 80146b0:	bf00      	nop
 80146b2:	3710      	adds	r7, #16
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}

080146b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b084      	sub	sp, #16
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
 80146c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80146c2:	2300      	movs	r3, #0
 80146c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80146c6:	683b      	ldr	r3, [r7, #0]
 80146c8:	885b      	ldrh	r3, [r3, #2]
 80146ca:	b2da      	uxtb	r2, r3
 80146cc:	4b4c      	ldr	r3, [pc, #304]	; (8014800 <USBD_SetConfig+0x148>)
 80146ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80146d0:	4b4b      	ldr	r3, [pc, #300]	; (8014800 <USBD_SetConfig+0x148>)
 80146d2:	781b      	ldrb	r3, [r3, #0]
 80146d4:	2b01      	cmp	r3, #1
 80146d6:	d905      	bls.n	80146e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80146d8:	6839      	ldr	r1, [r7, #0]
 80146da:	6878      	ldr	r0, [r7, #4]
 80146dc:	f000 f96c 	bl	80149b8 <USBD_CtlError>
    return USBD_FAIL;
 80146e0:	2303      	movs	r3, #3
 80146e2:	e088      	b.n	80147f6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146ea:	b2db      	uxtb	r3, r3
 80146ec:	2b02      	cmp	r3, #2
 80146ee:	d002      	beq.n	80146f6 <USBD_SetConfig+0x3e>
 80146f0:	2b03      	cmp	r3, #3
 80146f2:	d025      	beq.n	8014740 <USBD_SetConfig+0x88>
 80146f4:	e071      	b.n	80147da <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80146f6:	4b42      	ldr	r3, [pc, #264]	; (8014800 <USBD_SetConfig+0x148>)
 80146f8:	781b      	ldrb	r3, [r3, #0]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d01c      	beq.n	8014738 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80146fe:	4b40      	ldr	r3, [pc, #256]	; (8014800 <USBD_SetConfig+0x148>)
 8014700:	781b      	ldrb	r3, [r3, #0]
 8014702:	461a      	mov	r2, r3
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014708:	4b3d      	ldr	r3, [pc, #244]	; (8014800 <USBD_SetConfig+0x148>)
 801470a:	781b      	ldrb	r3, [r3, #0]
 801470c:	4619      	mov	r1, r3
 801470e:	6878      	ldr	r0, [r7, #4]
 8014710:	f7ff f992 	bl	8013a38 <USBD_SetClassConfig>
 8014714:	4603      	mov	r3, r0
 8014716:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014718:	7bfb      	ldrb	r3, [r7, #15]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d004      	beq.n	8014728 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801471e:	6839      	ldr	r1, [r7, #0]
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f000 f949 	bl	80149b8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014726:	e065      	b.n	80147f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f000 fa10 	bl	8014b4e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	2203      	movs	r2, #3
 8014732:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014736:	e05d      	b.n	80147f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014738:	6878      	ldr	r0, [r7, #4]
 801473a:	f000 fa08 	bl	8014b4e <USBD_CtlSendStatus>
      break;
 801473e:	e059      	b.n	80147f4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014740:	4b2f      	ldr	r3, [pc, #188]	; (8014800 <USBD_SetConfig+0x148>)
 8014742:	781b      	ldrb	r3, [r3, #0]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d112      	bne.n	801476e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2202      	movs	r2, #2
 801474c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014750:	4b2b      	ldr	r3, [pc, #172]	; (8014800 <USBD_SetConfig+0x148>)
 8014752:	781b      	ldrb	r3, [r3, #0]
 8014754:	461a      	mov	r2, r3
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801475a:	4b29      	ldr	r3, [pc, #164]	; (8014800 <USBD_SetConfig+0x148>)
 801475c:	781b      	ldrb	r3, [r3, #0]
 801475e:	4619      	mov	r1, r3
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f7ff f985 	bl	8013a70 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014766:	6878      	ldr	r0, [r7, #4]
 8014768:	f000 f9f1 	bl	8014b4e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801476c:	e042      	b.n	80147f4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801476e:	4b24      	ldr	r3, [pc, #144]	; (8014800 <USBD_SetConfig+0x148>)
 8014770:	781b      	ldrb	r3, [r3, #0]
 8014772:	461a      	mov	r2, r3
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	685b      	ldr	r3, [r3, #4]
 8014778:	429a      	cmp	r2, r3
 801477a:	d02a      	beq.n	80147d2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	685b      	ldr	r3, [r3, #4]
 8014780:	b2db      	uxtb	r3, r3
 8014782:	4619      	mov	r1, r3
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f7ff f973 	bl	8013a70 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801478a:	4b1d      	ldr	r3, [pc, #116]	; (8014800 <USBD_SetConfig+0x148>)
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	461a      	mov	r2, r3
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014794:	4b1a      	ldr	r3, [pc, #104]	; (8014800 <USBD_SetConfig+0x148>)
 8014796:	781b      	ldrb	r3, [r3, #0]
 8014798:	4619      	mov	r1, r3
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	f7ff f94c 	bl	8013a38 <USBD_SetClassConfig>
 80147a0:	4603      	mov	r3, r0
 80147a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80147a4:	7bfb      	ldrb	r3, [r7, #15]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d00f      	beq.n	80147ca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80147aa:	6839      	ldr	r1, [r7, #0]
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f000 f903 	bl	80149b8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	685b      	ldr	r3, [r3, #4]
 80147b6:	b2db      	uxtb	r3, r3
 80147b8:	4619      	mov	r1, r3
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	f7ff f958 	bl	8013a70 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2202      	movs	r2, #2
 80147c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80147c8:	e014      	b.n	80147f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f000 f9bf 	bl	8014b4e <USBD_CtlSendStatus>
      break;
 80147d0:	e010      	b.n	80147f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80147d2:	6878      	ldr	r0, [r7, #4]
 80147d4:	f000 f9bb 	bl	8014b4e <USBD_CtlSendStatus>
      break;
 80147d8:	e00c      	b.n	80147f4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80147da:	6839      	ldr	r1, [r7, #0]
 80147dc:	6878      	ldr	r0, [r7, #4]
 80147de:	f000 f8eb 	bl	80149b8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80147e2:	4b07      	ldr	r3, [pc, #28]	; (8014800 <USBD_SetConfig+0x148>)
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	4619      	mov	r1, r3
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f7ff f941 	bl	8013a70 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80147ee:	2303      	movs	r3, #3
 80147f0:	73fb      	strb	r3, [r7, #15]
      break;
 80147f2:	bf00      	nop
  }

  return ret;
 80147f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	3710      	adds	r7, #16
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd80      	pop	{r7, pc}
 80147fe:	bf00      	nop
 8014800:	20000b78 	.word	0x20000b78

08014804 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b082      	sub	sp, #8
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
 801480c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	88db      	ldrh	r3, [r3, #6]
 8014812:	2b01      	cmp	r3, #1
 8014814:	d004      	beq.n	8014820 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014816:	6839      	ldr	r1, [r7, #0]
 8014818:	6878      	ldr	r0, [r7, #4]
 801481a:	f000 f8cd 	bl	80149b8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801481e:	e023      	b.n	8014868 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014826:	b2db      	uxtb	r3, r3
 8014828:	2b02      	cmp	r3, #2
 801482a:	dc02      	bgt.n	8014832 <USBD_GetConfig+0x2e>
 801482c:	2b00      	cmp	r3, #0
 801482e:	dc03      	bgt.n	8014838 <USBD_GetConfig+0x34>
 8014830:	e015      	b.n	801485e <USBD_GetConfig+0x5a>
 8014832:	2b03      	cmp	r3, #3
 8014834:	d00b      	beq.n	801484e <USBD_GetConfig+0x4a>
 8014836:	e012      	b.n	801485e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2200      	movs	r2, #0
 801483c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	3308      	adds	r3, #8
 8014842:	2201      	movs	r2, #1
 8014844:	4619      	mov	r1, r3
 8014846:	6878      	ldr	r0, [r7, #4]
 8014848:	f000 f927 	bl	8014a9a <USBD_CtlSendData>
        break;
 801484c:	e00c      	b.n	8014868 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	3304      	adds	r3, #4
 8014852:	2201      	movs	r2, #1
 8014854:	4619      	mov	r1, r3
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f000 f91f 	bl	8014a9a <USBD_CtlSendData>
        break;
 801485c:	e004      	b.n	8014868 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801485e:	6839      	ldr	r1, [r7, #0]
 8014860:	6878      	ldr	r0, [r7, #4]
 8014862:	f000 f8a9 	bl	80149b8 <USBD_CtlError>
        break;
 8014866:	bf00      	nop
}
 8014868:	bf00      	nop
 801486a:	3708      	adds	r7, #8
 801486c:	46bd      	mov	sp, r7
 801486e:	bd80      	pop	{r7, pc}

08014870 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b082      	sub	sp, #8
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
 8014878:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014880:	b2db      	uxtb	r3, r3
 8014882:	3b01      	subs	r3, #1
 8014884:	2b02      	cmp	r3, #2
 8014886:	d81e      	bhi.n	80148c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	88db      	ldrh	r3, [r3, #6]
 801488c:	2b02      	cmp	r3, #2
 801488e:	d004      	beq.n	801489a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014890:	6839      	ldr	r1, [r7, #0]
 8014892:	6878      	ldr	r0, [r7, #4]
 8014894:	f000 f890 	bl	80149b8 <USBD_CtlError>
        break;
 8014898:	e01a      	b.n	80148d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	2201      	movs	r2, #1
 801489e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d005      	beq.n	80148b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	68db      	ldr	r3, [r3, #12]
 80148ae:	f043 0202 	orr.w	r2, r3, #2
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	330c      	adds	r3, #12
 80148ba:	2202      	movs	r2, #2
 80148bc:	4619      	mov	r1, r3
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f000 f8eb 	bl	8014a9a <USBD_CtlSendData>
      break;
 80148c4:	e004      	b.n	80148d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80148c6:	6839      	ldr	r1, [r7, #0]
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f000 f875 	bl	80149b8 <USBD_CtlError>
      break;
 80148ce:	bf00      	nop
  }
}
 80148d0:	bf00      	nop
 80148d2:	3708      	adds	r7, #8
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}

080148d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
 80148e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80148e2:	683b      	ldr	r3, [r7, #0]
 80148e4:	885b      	ldrh	r3, [r3, #2]
 80148e6:	2b01      	cmp	r3, #1
 80148e8:	d106      	bne.n	80148f8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2201      	movs	r2, #1
 80148ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	f000 f92b 	bl	8014b4e <USBD_CtlSendStatus>
  }
}
 80148f8:	bf00      	nop
 80148fa:	3708      	adds	r7, #8
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}

08014900 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b082      	sub	sp, #8
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
 8014908:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014910:	b2db      	uxtb	r3, r3
 8014912:	3b01      	subs	r3, #1
 8014914:	2b02      	cmp	r3, #2
 8014916:	d80b      	bhi.n	8014930 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	885b      	ldrh	r3, [r3, #2]
 801491c:	2b01      	cmp	r3, #1
 801491e:	d10c      	bne.n	801493a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	2200      	movs	r2, #0
 8014924:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014928:	6878      	ldr	r0, [r7, #4]
 801492a:	f000 f910 	bl	8014b4e <USBD_CtlSendStatus>
      }
      break;
 801492e:	e004      	b.n	801493a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014930:	6839      	ldr	r1, [r7, #0]
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f000 f840 	bl	80149b8 <USBD_CtlError>
      break;
 8014938:	e000      	b.n	801493c <USBD_ClrFeature+0x3c>
      break;
 801493a:	bf00      	nop
  }
}
 801493c:	bf00      	nop
 801493e:	3708      	adds	r7, #8
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}

08014944 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b084      	sub	sp, #16
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
 801494c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	781a      	ldrb	r2, [r3, #0]
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	3301      	adds	r3, #1
 801495e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	781a      	ldrb	r2, [r3, #0]
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	3301      	adds	r3, #1
 801496c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801496e:	68f8      	ldr	r0, [r7, #12]
 8014970:	f7ff fa92 	bl	8013e98 <SWAPBYTE>
 8014974:	4603      	mov	r3, r0
 8014976:	461a      	mov	r2, r3
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	3301      	adds	r3, #1
 8014980:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	3301      	adds	r3, #1
 8014986:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014988:	68f8      	ldr	r0, [r7, #12]
 801498a:	f7ff fa85 	bl	8013e98 <SWAPBYTE>
 801498e:	4603      	mov	r3, r0
 8014990:	461a      	mov	r2, r3
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	3301      	adds	r3, #1
 801499a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	3301      	adds	r3, #1
 80149a0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80149a2:	68f8      	ldr	r0, [r7, #12]
 80149a4:	f7ff fa78 	bl	8013e98 <SWAPBYTE>
 80149a8:	4603      	mov	r3, r0
 80149aa:	461a      	mov	r2, r3
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	80da      	strh	r2, [r3, #6]
}
 80149b0:	bf00      	nop
 80149b2:	3710      	adds	r7, #16
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}

080149b8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b082      	sub	sp, #8
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
 80149c0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80149c2:	2180      	movs	r1, #128	; 0x80
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f000 fdaf 	bl	8015528 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80149ca:	2100      	movs	r1, #0
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f000 fdab 	bl	8015528 <USBD_LL_StallEP>
}
 80149d2:	bf00      	nop
 80149d4:	3708      	adds	r7, #8
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}

080149da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80149da:	b580      	push	{r7, lr}
 80149dc:	b086      	sub	sp, #24
 80149de:	af00      	add	r7, sp, #0
 80149e0:	60f8      	str	r0, [r7, #12]
 80149e2:	60b9      	str	r1, [r7, #8]
 80149e4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80149e6:	2300      	movs	r3, #0
 80149e8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d036      	beq.n	8014a5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80149f4:	6938      	ldr	r0, [r7, #16]
 80149f6:	f000 f836 	bl	8014a66 <USBD_GetLen>
 80149fa:	4603      	mov	r3, r0
 80149fc:	3301      	adds	r3, #1
 80149fe:	b29b      	uxth	r3, r3
 8014a00:	005b      	lsls	r3, r3, #1
 8014a02:	b29a      	uxth	r2, r3
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014a08:	7dfb      	ldrb	r3, [r7, #23]
 8014a0a:	68ba      	ldr	r2, [r7, #8]
 8014a0c:	4413      	add	r3, r2
 8014a0e:	687a      	ldr	r2, [r7, #4]
 8014a10:	7812      	ldrb	r2, [r2, #0]
 8014a12:	701a      	strb	r2, [r3, #0]
  idx++;
 8014a14:	7dfb      	ldrb	r3, [r7, #23]
 8014a16:	3301      	adds	r3, #1
 8014a18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014a1a:	7dfb      	ldrb	r3, [r7, #23]
 8014a1c:	68ba      	ldr	r2, [r7, #8]
 8014a1e:	4413      	add	r3, r2
 8014a20:	2203      	movs	r2, #3
 8014a22:	701a      	strb	r2, [r3, #0]
  idx++;
 8014a24:	7dfb      	ldrb	r3, [r7, #23]
 8014a26:	3301      	adds	r3, #1
 8014a28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014a2a:	e013      	b.n	8014a54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014a2c:	7dfb      	ldrb	r3, [r7, #23]
 8014a2e:	68ba      	ldr	r2, [r7, #8]
 8014a30:	4413      	add	r3, r2
 8014a32:	693a      	ldr	r2, [r7, #16]
 8014a34:	7812      	ldrb	r2, [r2, #0]
 8014a36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014a38:	693b      	ldr	r3, [r7, #16]
 8014a3a:	3301      	adds	r3, #1
 8014a3c:	613b      	str	r3, [r7, #16]
    idx++;
 8014a3e:	7dfb      	ldrb	r3, [r7, #23]
 8014a40:	3301      	adds	r3, #1
 8014a42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014a44:	7dfb      	ldrb	r3, [r7, #23]
 8014a46:	68ba      	ldr	r2, [r7, #8]
 8014a48:	4413      	add	r3, r2
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	701a      	strb	r2, [r3, #0]
    idx++;
 8014a4e:	7dfb      	ldrb	r3, [r7, #23]
 8014a50:	3301      	adds	r3, #1
 8014a52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014a54:	693b      	ldr	r3, [r7, #16]
 8014a56:	781b      	ldrb	r3, [r3, #0]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d1e7      	bne.n	8014a2c <USBD_GetString+0x52>
 8014a5c:	e000      	b.n	8014a60 <USBD_GetString+0x86>
    return;
 8014a5e:	bf00      	nop
  }
}
 8014a60:	3718      	adds	r7, #24
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}

08014a66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014a66:	b480      	push	{r7}
 8014a68:	b085      	sub	sp, #20
 8014a6a:	af00      	add	r7, sp, #0
 8014a6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014a6e:	2300      	movs	r3, #0
 8014a70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014a76:	e005      	b.n	8014a84 <USBD_GetLen+0x1e>
  {
    len++;
 8014a78:	7bfb      	ldrb	r3, [r7, #15]
 8014a7a:	3301      	adds	r3, #1
 8014a7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	3301      	adds	r3, #1
 8014a82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	781b      	ldrb	r3, [r3, #0]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d1f5      	bne.n	8014a78 <USBD_GetLen+0x12>
  }

  return len;
 8014a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3714      	adds	r7, #20
 8014a92:	46bd      	mov	sp, r7
 8014a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a98:	4770      	bx	lr

08014a9a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014a9a:	b580      	push	{r7, lr}
 8014a9c:	b084      	sub	sp, #16
 8014a9e:	af00      	add	r7, sp, #0
 8014aa0:	60f8      	str	r0, [r7, #12]
 8014aa2:	60b9      	str	r1, [r7, #8]
 8014aa4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	2202      	movs	r2, #2
 8014aaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	687a      	ldr	r2, [r7, #4]
 8014ab2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	687a      	ldr	r2, [r7, #4]
 8014ab8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	68ba      	ldr	r2, [r7, #8]
 8014abe:	2100      	movs	r1, #0
 8014ac0:	68f8      	ldr	r0, [r7, #12]
 8014ac2:	f000 fdba 	bl	801563a <USBD_LL_Transmit>

  return USBD_OK;
 8014ac6:	2300      	movs	r3, #0
}
 8014ac8:	4618      	mov	r0, r3
 8014aca:	3710      	adds	r7, #16
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd80      	pop	{r7, pc}

08014ad0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b084      	sub	sp, #16
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	60f8      	str	r0, [r7, #12]
 8014ad8:	60b9      	str	r1, [r7, #8]
 8014ada:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	68ba      	ldr	r2, [r7, #8]
 8014ae0:	2100      	movs	r1, #0
 8014ae2:	68f8      	ldr	r0, [r7, #12]
 8014ae4:	f000 fda9 	bl	801563a <USBD_LL_Transmit>

  return USBD_OK;
 8014ae8:	2300      	movs	r3, #0
}
 8014aea:	4618      	mov	r0, r3
 8014aec:	3710      	adds	r7, #16
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}

08014af2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014af2:	b580      	push	{r7, lr}
 8014af4:	b084      	sub	sp, #16
 8014af6:	af00      	add	r7, sp, #0
 8014af8:	60f8      	str	r0, [r7, #12]
 8014afa:	60b9      	str	r1, [r7, #8]
 8014afc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2203      	movs	r2, #3
 8014b02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	687a      	ldr	r2, [r7, #4]
 8014b0a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	687a      	ldr	r2, [r7, #4]
 8014b12:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	68ba      	ldr	r2, [r7, #8]
 8014b1a:	2100      	movs	r1, #0
 8014b1c:	68f8      	ldr	r0, [r7, #12]
 8014b1e:	f000 fdad 	bl	801567c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014b22:	2300      	movs	r3, #0
}
 8014b24:	4618      	mov	r0, r3
 8014b26:	3710      	adds	r7, #16
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}

08014b2c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b084      	sub	sp, #16
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	60f8      	str	r0, [r7, #12]
 8014b34:	60b9      	str	r1, [r7, #8]
 8014b36:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	68ba      	ldr	r2, [r7, #8]
 8014b3c:	2100      	movs	r1, #0
 8014b3e:	68f8      	ldr	r0, [r7, #12]
 8014b40:	f000 fd9c 	bl	801567c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014b44:	2300      	movs	r3, #0
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	3710      	adds	r7, #16
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bd80      	pop	{r7, pc}

08014b4e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014b4e:	b580      	push	{r7, lr}
 8014b50:	b082      	sub	sp, #8
 8014b52:	af00      	add	r7, sp, #0
 8014b54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	2204      	movs	r2, #4
 8014b5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014b5e:	2300      	movs	r3, #0
 8014b60:	2200      	movs	r2, #0
 8014b62:	2100      	movs	r1, #0
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f000 fd68 	bl	801563a <USBD_LL_Transmit>

  return USBD_OK;
 8014b6a:	2300      	movs	r3, #0
}
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	3708      	adds	r7, #8
 8014b70:	46bd      	mov	sp, r7
 8014b72:	bd80      	pop	{r7, pc}

08014b74 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b082      	sub	sp, #8
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	2205      	movs	r2, #5
 8014b80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014b84:	2300      	movs	r3, #0
 8014b86:	2200      	movs	r2, #0
 8014b88:	2100      	movs	r1, #0
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f000 fd76 	bl	801567c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014b90:	2300      	movs	r3, #0
}
 8014b92:	4618      	mov	r0, r3
 8014b94:	3708      	adds	r7, #8
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bd80      	pop	{r7, pc}
	...

08014b9c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	4912      	ldr	r1, [pc, #72]	; (8014bec <MX_USB_Device_Init+0x50>)
 8014ba4:	4812      	ldr	r0, [pc, #72]	; (8014bf0 <MX_USB_Device_Init+0x54>)
 8014ba6:	f7fe fed9 	bl	801395c <USBD_Init>
 8014baa:	4603      	mov	r3, r0
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d001      	beq.n	8014bb4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8014bb0:	f7f3 ff9a 	bl	8008ae8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8014bb4:	490f      	ldr	r1, [pc, #60]	; (8014bf4 <MX_USB_Device_Init+0x58>)
 8014bb6:	480e      	ldr	r0, [pc, #56]	; (8014bf0 <MX_USB_Device_Init+0x54>)
 8014bb8:	f7fe ff00 	bl	80139bc <USBD_RegisterClass>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d001      	beq.n	8014bc6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8014bc2:	f7f3 ff91 	bl	8008ae8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8014bc6:	490c      	ldr	r1, [pc, #48]	; (8014bf8 <MX_USB_Device_Init+0x5c>)
 8014bc8:	4809      	ldr	r0, [pc, #36]	; (8014bf0 <MX_USB_Device_Init+0x54>)
 8014bca:	f7fe fe51 	bl	8013870 <USBD_CDC_RegisterInterface>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d001      	beq.n	8014bd8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8014bd4:	f7f3 ff88 	bl	8008ae8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8014bd8:	4805      	ldr	r0, [pc, #20]	; (8014bf0 <MX_USB_Device_Init+0x54>)
 8014bda:	f7fe ff16 	bl	8013a0a <USBD_Start>
 8014bde:	4603      	mov	r3, r0
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d001      	beq.n	8014be8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8014be4:	f7f3 ff80 	bl	8008ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8014be8:	bf00      	nop
 8014bea:	bd80      	pop	{r7, pc}
 8014bec:	20000164 	.word	0x20000164
 8014bf0:	20000b7c 	.word	0x20000b7c
 8014bf4:	20000044 	.word	0x20000044
 8014bf8:	20000150 	.word	0x20000150

08014bfc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014c00:	2200      	movs	r2, #0
 8014c02:	4905      	ldr	r1, [pc, #20]	; (8014c18 <CDC_Init_FS+0x1c>)
 8014c04:	4805      	ldr	r0, [pc, #20]	; (8014c1c <CDC_Init_FS+0x20>)
 8014c06:	f7fe fe48 	bl	801389a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014c0a:	4905      	ldr	r1, [pc, #20]	; (8014c20 <CDC_Init_FS+0x24>)
 8014c0c:	4803      	ldr	r0, [pc, #12]	; (8014c1c <CDC_Init_FS+0x20>)
 8014c0e:	f7fe fe62 	bl	80138d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014c12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014c14:	4618      	mov	r0, r3
 8014c16:	bd80      	pop	{r7, pc}
 8014c18:	20002678 	.word	0x20002678
 8014c1c:	20000b7c 	.word	0x20000b7c
 8014c20:	20001e78 	.word	0x20001e78

08014c24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014c24:	b480      	push	{r7}
 8014c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014c28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c32:	4770      	bx	lr

08014c34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014c34:	b480      	push	{r7}
 8014c36:	b085      	sub	sp, #20
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	6039      	str	r1, [r7, #0]
 8014c3e:	71fb      	strb	r3, [r7, #7]
 8014c40:	4613      	mov	r3, r2
 8014c42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 8014c44:	683b      	ldr	r3, [r7, #0]
 8014c46:	60fb      	str	r3, [r7, #12]

  switch(cmd)
 8014c48:	79fb      	ldrb	r3, [r7, #7]
 8014c4a:	2b23      	cmp	r3, #35	; 0x23
 8014c4c:	f200 80af 	bhi.w	8014dae <CDC_Control_FS+0x17a>
 8014c50:	a201      	add	r2, pc, #4	; (adr r2, 8014c58 <CDC_Control_FS+0x24>)
 8014c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c56:	bf00      	nop
 8014c58:	08014daf 	.word	0x08014daf
 8014c5c:	08014daf 	.word	0x08014daf
 8014c60:	08014daf 	.word	0x08014daf
 8014c64:	08014daf 	.word	0x08014daf
 8014c68:	08014daf 	.word	0x08014daf
 8014c6c:	08014daf 	.word	0x08014daf
 8014c70:	08014daf 	.word	0x08014daf
 8014c74:	08014daf 	.word	0x08014daf
 8014c78:	08014daf 	.word	0x08014daf
 8014c7c:	08014daf 	.word	0x08014daf
 8014c80:	08014daf 	.word	0x08014daf
 8014c84:	08014daf 	.word	0x08014daf
 8014c88:	08014daf 	.word	0x08014daf
 8014c8c:	08014daf 	.word	0x08014daf
 8014c90:	08014daf 	.word	0x08014daf
 8014c94:	08014daf 	.word	0x08014daf
 8014c98:	08014daf 	.word	0x08014daf
 8014c9c:	08014daf 	.word	0x08014daf
 8014ca0:	08014daf 	.word	0x08014daf
 8014ca4:	08014daf 	.word	0x08014daf
 8014ca8:	08014daf 	.word	0x08014daf
 8014cac:	08014daf 	.word	0x08014daf
 8014cb0:	08014daf 	.word	0x08014daf
 8014cb4:	08014daf 	.word	0x08014daf
 8014cb8:	08014daf 	.word	0x08014daf
 8014cbc:	08014daf 	.word	0x08014daf
 8014cc0:	08014daf 	.word	0x08014daf
 8014cc4:	08014daf 	.word	0x08014daf
 8014cc8:	08014daf 	.word	0x08014daf
 8014ccc:	08014daf 	.word	0x08014daf
 8014cd0:	08014daf 	.word	0x08014daf
 8014cd4:	08014daf 	.word	0x08014daf
 8014cd8:	08014ce9 	.word	0x08014ce9
 8014cdc:	08014d43 	.word	0x08014d43
 8014ce0:	08014d97 	.word	0x08014d97
 8014ce4:	08014daf 	.word	0x08014daf
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 8014ce8:	683b      	ldr	r3, [r7, #0]
 8014cea:	781b      	ldrb	r3, [r3, #0]
 8014cec:	461a      	mov	r2, r3
 8014cee:	4b34      	ldr	r3, [pc, #208]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014cf0:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 8014cf2:	4b33      	ldr	r3, [pc, #204]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	683a      	ldr	r2, [r7, #0]
 8014cf8:	3201      	adds	r2, #1
 8014cfa:	7812      	ldrb	r2, [r2, #0]
 8014cfc:	0212      	lsls	r2, r2, #8
 8014cfe:	4313      	orrs	r3, r2
 8014d00:	4a2f      	ldr	r2, [pc, #188]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014d02:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 8014d04:	4b2e      	ldr	r3, [pc, #184]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	683a      	ldr	r2, [r7, #0]
 8014d0a:	3202      	adds	r2, #2
 8014d0c:	7812      	ldrb	r2, [r2, #0]
 8014d0e:	0412      	lsls	r2, r2, #16
 8014d10:	4313      	orrs	r3, r2
 8014d12:	4a2b      	ldr	r2, [pc, #172]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014d14:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 8014d16:	4b2a      	ldr	r3, [pc, #168]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	683a      	ldr	r2, [r7, #0]
 8014d1c:	3203      	adds	r2, #3
 8014d1e:	7812      	ldrb	r2, [r2, #0]
 8014d20:	0612      	lsls	r2, r2, #24
 8014d22:	4313      	orrs	r3, r2
 8014d24:	4a26      	ldr	r2, [pc, #152]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014d26:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	791a      	ldrb	r2, [r3, #4]
 8014d2c:	4b24      	ldr	r3, [pc, #144]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014d2e:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	795a      	ldrb	r2, [r3, #5]
 8014d34:	4b22      	ldr	r3, [pc, #136]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014d36:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 8014d38:	683b      	ldr	r3, [r7, #0]
 8014d3a:	799a      	ldrb	r2, [r3, #6]
 8014d3c:	4b20      	ldr	r3, [pc, #128]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014d3e:	719a      	strb	r2, [r3, #6]

    break;
 8014d40:	e036      	b.n	8014db0 <CDC_Control_FS+0x17c>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8014d42:	4b1f      	ldr	r3, [pc, #124]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	b2da      	uxtb	r2, r3
 8014d48:	683b      	ldr	r3, [r7, #0]
 8014d4a:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8014d4c:	4b1c      	ldr	r3, [pc, #112]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	0a1a      	lsrs	r2, r3, #8
 8014d52:	683b      	ldr	r3, [r7, #0]
 8014d54:	3301      	adds	r3, #1
 8014d56:	b2d2      	uxtb	r2, r2
 8014d58:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8014d5a:	4b19      	ldr	r3, [pc, #100]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	0c1a      	lsrs	r2, r3, #16
 8014d60:	683b      	ldr	r3, [r7, #0]
 8014d62:	3302      	adds	r3, #2
 8014d64:	b2d2      	uxtb	r2, r2
 8014d66:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8014d68:	4b15      	ldr	r3, [pc, #84]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	0e1a      	lsrs	r2, r3, #24
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	3303      	adds	r3, #3
 8014d72:	b2d2      	uxtb	r2, r2
 8014d74:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	3304      	adds	r3, #4
 8014d7a:	4a11      	ldr	r2, [pc, #68]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014d7c:	7912      	ldrb	r2, [r2, #4]
 8014d7e:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	3305      	adds	r3, #5
 8014d84:	4a0e      	ldr	r2, [pc, #56]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014d86:	7952      	ldrb	r2, [r2, #5]
 8014d88:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	3306      	adds	r3, #6
 8014d8e:	4a0c      	ldr	r2, [pc, #48]	; (8014dc0 <CDC_Control_FS+0x18c>)
 8014d90:	7992      	ldrb	r2, [r2, #6]
 8014d92:	701a      	strb	r2, [r3, #0]

    break;
 8014d94:	e00c      	b.n	8014db0 <CDC_Control_FS+0x17c>

    case CDC_SET_CONTROL_LINE_STATE:
      is_opened = req->wValue & 0x01;   // 0 bit: DTR, 1 bit: RTS
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	885b      	ldrh	r3, [r3, #2]
 8014d9a:	f003 0301 	and.w	r3, r3, #1
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	bf14      	ite	ne
 8014da2:	2301      	movne	r3, #1
 8014da4:	2300      	moveq	r3, #0
 8014da6:	b2da      	uxtb	r2, r3
 8014da8:	4b06      	ldr	r3, [pc, #24]	; (8014dc4 <CDC_Control_FS+0x190>)
 8014daa:	701a      	strb	r2, [r3, #0]

    break;
 8014dac:	e000      	b.n	8014db0 <CDC_Control_FS+0x17c>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014dae:	bf00      	nop
  }

  return (USBD_OK);
 8014db0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	3714      	adds	r7, #20
 8014db6:	46bd      	mov	sp, r7
 8014db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dbc:	4770      	bx	lr
 8014dbe:	bf00      	nop
 8014dc0:	20000148 	.word	0x20000148
 8014dc4:	20001e74 	.word	0x20001e74

08014dc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014dc8:	b590      	push	{r4, r7, lr}
 8014dca:	b085      	sub	sp, #20
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
 8014dd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  qbufferWrite(&q_rx, Buf, *Len);
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	461a      	mov	r2, r3
 8014dd8:	6879      	ldr	r1, [r7, #4]
 8014dda:	480f      	ldr	r0, [pc, #60]	; (8014e18 <CDC_Receive_FS+0x50>)
 8014ddc:	f7f4 f811 	bl	8008e02 <qbufferWrite>


  uint32_t buf_len;

  buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 8014de0:	4b0d      	ldr	r3, [pc, #52]	; (8014e18 <CDC_Receive_FS+0x50>)
 8014de2:	689c      	ldr	r4, [r3, #8]
 8014de4:	480c      	ldr	r0, [pc, #48]	; (8014e18 <CDC_Receive_FS+0x50>)
 8014de6:	f7f4 f8c0 	bl	8008f6a <qbufferAvailable>
 8014dea:	4603      	mov	r3, r0
 8014dec:	1ae3      	subs	r3, r4, r3
 8014dee:	3b01      	subs	r3, #1
 8014df0:	60fb      	str	r3, [r7, #12]

  if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	2b3f      	cmp	r3, #63	; 0x3f
 8014df6:	d907      	bls.n	8014e08 <CDC_Receive_FS+0x40>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014df8:	6879      	ldr	r1, [r7, #4]
 8014dfa:	4808      	ldr	r0, [pc, #32]	; (8014e1c <CDC_Receive_FS+0x54>)
 8014dfc:	f7fe fd6b 	bl	80138d6 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014e00:	4806      	ldr	r0, [pc, #24]	; (8014e1c <CDC_Receive_FS+0x54>)
 8014e02:	f7fe fd81 	bl	8013908 <USBD_CDC_ReceivePacket>
 8014e06:	e002      	b.n	8014e0e <CDC_Receive_FS+0x46>
  }
  else
  {
    is_rx_full = true;
 8014e08:	4b05      	ldr	r3, [pc, #20]	; (8014e20 <CDC_Receive_FS+0x58>)
 8014e0a:	2201      	movs	r2, #1
 8014e0c:	701a      	strb	r2, [r3, #0]
  }

    return (USBD_OK);
 8014e0e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014e10:	4618      	mov	r0, r3
 8014e12:	3714      	adds	r7, #20
 8014e14:	46bd      	mov	sp, r7
 8014e16:	bd90      	pop	{r4, r7, pc}
 8014e18:	20000e4c 	.word	0x20000e4c
 8014e1c:	20000b7c 	.word	0x20000b7c
 8014e20:	20001e75 	.word	0x20001e75

08014e24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014e24:	b480      	push	{r7}
 8014e26:	b087      	sub	sp, #28
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	60f8      	str	r0, [r7, #12]
 8014e2c:	60b9      	str	r1, [r7, #8]
 8014e2e:	4613      	mov	r3, r2
 8014e30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014e32:	2300      	movs	r3, #0
 8014e34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	371c      	adds	r7, #28
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e44:	4770      	bx	lr
	...

08014e48 <cdcIfInit>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool cdcIfInit(void)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	af00      	add	r7, sp, #0
  is_opened = false;
 8014e4c:	4b08      	ldr	r3, [pc, #32]	; (8014e70 <cdcIfInit+0x28>)
 8014e4e:	2200      	movs	r2, #0
 8014e50:	701a      	strb	r2, [r3, #0]
  qbufferCreate(&q_rx, q_rx_buf, 2048);
 8014e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014e56:	4907      	ldr	r1, [pc, #28]	; (8014e74 <cdcIfInit+0x2c>)
 8014e58:	4807      	ldr	r0, [pc, #28]	; (8014e78 <cdcIfInit+0x30>)
 8014e5a:	f7f3 ffb4 	bl	8008dc6 <qbufferCreate>
  qbufferCreate(&q_tx, q_tx_buf, 2048);
 8014e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014e62:	4906      	ldr	r1, [pc, #24]	; (8014e7c <cdcIfInit+0x34>)
 8014e64:	4806      	ldr	r0, [pc, #24]	; (8014e80 <cdcIfInit+0x38>)
 8014e66:	f7f3 ffae 	bl	8008dc6 <qbufferCreate>

  return true;
 8014e6a:	2301      	movs	r3, #1
}
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	bd80      	pop	{r7, pc}
 8014e70:	20001e74 	.word	0x20001e74
 8014e74:	20000e74 	.word	0x20000e74
 8014e78:	20000e4c 	.word	0x20000e4c
 8014e7c:	20001674 	.word	0x20001674
 8014e80:	20000e60 	.word	0x20000e60

08014e84 <cdcIfAvailable>:

uint32_t cdcIfAvailable(void)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	af00      	add	r7, sp, #0
  return qbufferAvailable(&q_rx);
 8014e88:	4802      	ldr	r0, [pc, #8]	; (8014e94 <cdcIfAvailable+0x10>)
 8014e8a:	f7f4 f86e 	bl	8008f6a <qbufferAvailable>
 8014e8e:	4603      	mov	r3, r0
}
 8014e90:	4618      	mov	r0, r3
 8014e92:	bd80      	pop	{r7, pc}
 8014e94:	20000e4c 	.word	0x20000e4c

08014e98 <cdcIfRead>:

uint8_t cdcIfRead(void)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b082      	sub	sp, #8
 8014e9c:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	71fb      	strb	r3, [r7, #7]

  qbufferRead(&q_rx, &ret, 1);
 8014ea2:	1dfb      	adds	r3, r7, #7
 8014ea4:	2201      	movs	r2, #1
 8014ea6:	4619      	mov	r1, r3
 8014ea8:	4803      	ldr	r0, [pc, #12]	; (8014eb8 <cdcIfRead+0x20>)
 8014eaa:	f7f4 f806 	bl	8008eba <qbufferRead>

  return ret;
 8014eae:	79fb      	ldrb	r3, [r7, #7]
}
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	3708      	adds	r7, #8
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}
 8014eb8:	20000e4c 	.word	0x20000e4c

08014ebc <cdcIfWrite>:

uint32_t cdcIfWrite(uint8_t *p_data, uint32_t length)
{
 8014ebc:	b590      	push	{r4, r7, lr}
 8014ebe:	b087      	sub	sp, #28
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
 8014ec4:	6039      	str	r1, [r7, #0]
  uint32_t tx_len;
  uint32_t buf_len;
  uint32_t sent_len;


  if (cdcIfIsConnected() != true) return 0;
 8014ec6:	f000 f84f 	bl	8014f68 <cdcIfIsConnected>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	f083 0301 	eor.w	r3, r3, #1
 8014ed0:	b2db      	uxtb	r3, r3
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d001      	beq.n	8014eda <cdcIfWrite+0x1e>
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	e03f      	b.n	8014f5a <cdcIfWrite+0x9e>


  sent_len = 0;
 8014eda:	2300      	movs	r3, #0
 8014edc:	613b      	str	r3, [r7, #16]

  pre_time = HAL_GetTick();
 8014ede:	f7f5 fff5 	bl	800aecc <HAL_GetTick>
 8014ee2:	60f8      	str	r0, [r7, #12]
  while(sent_len < length)
 8014ee4:	e030      	b.n	8014f48 <cdcIfWrite+0x8c>
  {
    buf_len = (q_tx.len - qbufferAvailable(&q_tx)) - 1;
 8014ee6:	4b1f      	ldr	r3, [pc, #124]	; (8014f64 <cdcIfWrite+0xa8>)
 8014ee8:	689c      	ldr	r4, [r3, #8]
 8014eea:	481e      	ldr	r0, [pc, #120]	; (8014f64 <cdcIfWrite+0xa8>)
 8014eec:	f7f4 f83d 	bl	8008f6a <qbufferAvailable>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	1ae3      	subs	r3, r4, r3
 8014ef4:	3b01      	subs	r3, #1
 8014ef6:	60bb      	str	r3, [r7, #8]
    tx_len = length;
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	617b      	str	r3, [r7, #20]

    if (tx_len > buf_len)
 8014efc:	697a      	ldr	r2, [r7, #20]
 8014efe:	68bb      	ldr	r3, [r7, #8]
 8014f00:	429a      	cmp	r2, r3
 8014f02:	d901      	bls.n	8014f08 <cdcIfWrite+0x4c>
    {
      tx_len = buf_len;
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	617b      	str	r3, [r7, #20]
    }

    if (tx_len > 0)
 8014f08:	697b      	ldr	r3, [r7, #20]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d00c      	beq.n	8014f28 <cdcIfWrite+0x6c>
    {
      qbufferWrite(&q_tx, p_data, tx_len);
 8014f0e:	697a      	ldr	r2, [r7, #20]
 8014f10:	6879      	ldr	r1, [r7, #4]
 8014f12:	4814      	ldr	r0, [pc, #80]	; (8014f64 <cdcIfWrite+0xa8>)
 8014f14:	f7f3 ff75 	bl	8008e02 <qbufferWrite>
      p_data += tx_len;
 8014f18:	687a      	ldr	r2, [r7, #4]
 8014f1a:	697b      	ldr	r3, [r7, #20]
 8014f1c:	4413      	add	r3, r2
 8014f1e:	607b      	str	r3, [r7, #4]
      sent_len += tx_len;
 8014f20:	693a      	ldr	r2, [r7, #16]
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	4413      	add	r3, r2
 8014f26:	613b      	str	r3, [r7, #16]
    }

    if (cdcIfIsConnected() != true)
 8014f28:	f000 f81e 	bl	8014f68 <cdcIfIsConnected>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	f083 0301 	eor.w	r3, r3, #1
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d10c      	bne.n	8014f52 <cdcIfWrite+0x96>
    {
      break;
    }

    if (millis()-pre_time >= 100)
 8014f38:	f7f3 fd75 	bl	8008a26 <millis>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	461a      	mov	r2, r3
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	1ad3      	subs	r3, r2, r3
 8014f44:	2b63      	cmp	r3, #99	; 0x63
 8014f46:	d806      	bhi.n	8014f56 <cdcIfWrite+0x9a>
  while(sent_len < length)
 8014f48:	693a      	ldr	r2, [r7, #16]
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d3ca      	bcc.n	8014ee6 <cdcIfWrite+0x2a>
 8014f50:	e002      	b.n	8014f58 <cdcIfWrite+0x9c>
      break;
 8014f52:	bf00      	nop
 8014f54:	e000      	b.n	8014f58 <cdcIfWrite+0x9c>
    {
      break;
 8014f56:	bf00      	nop
    }
  }

  return sent_len;
 8014f58:	693b      	ldr	r3, [r7, #16]
}
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	371c      	adds	r7, #28
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	bd90      	pop	{r4, r7, pc}
 8014f62:	bf00      	nop
 8014f64:	20000e60 	.word	0x20000e60

08014f68 <cdcIfIsConnected>:
{
  return LineCoding.bitrate;
}

bool cdcIfIsConnected(void)
{
 8014f68:	b480      	push	{r7}
 8014f6a:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.pClassData == NULL)
 8014f6c:	4b11      	ldr	r3, [pc, #68]	; (8014fb4 <cdcIfIsConnected+0x4c>)
 8014f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d101      	bne.n	8014f7a <cdcIfIsConnected+0x12>
  {
    return false;
 8014f76:	2300      	movs	r3, #0
 8014f78:	e017      	b.n	8014faa <cdcIfIsConnected+0x42>
  }
  if (is_opened == false)
 8014f7a:	4b0f      	ldr	r3, [pc, #60]	; (8014fb8 <cdcIfIsConnected+0x50>)
 8014f7c:	781b      	ldrb	r3, [r3, #0]
 8014f7e:	f083 0301 	eor.w	r3, r3, #1
 8014f82:	b2db      	uxtb	r3, r3
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d001      	beq.n	8014f8c <cdcIfIsConnected+0x24>
  {
    return false;
 8014f88:	2300      	movs	r3, #0
 8014f8a:	e00e      	b.n	8014faa <cdcIfIsConnected+0x42>
  }
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8014f8c:	4b09      	ldr	r3, [pc, #36]	; (8014fb4 <cdcIfIsConnected+0x4c>)
 8014f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f92:	b2db      	uxtb	r3, r3
 8014f94:	2b03      	cmp	r3, #3
 8014f96:	d001      	beq.n	8014f9c <cdcIfIsConnected+0x34>
  {
    return false;
 8014f98:	2300      	movs	r3, #0
 8014f9a:	e006      	b.n	8014faa <cdcIfIsConnected+0x42>
  }
  if (hUsbDeviceFS.dev_config == 0)
 8014f9c:	4b05      	ldr	r3, [pc, #20]	; (8014fb4 <cdcIfIsConnected+0x4c>)
 8014f9e:	685b      	ldr	r3, [r3, #4]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d101      	bne.n	8014fa8 <cdcIfIsConnected+0x40>
  {
    return false;
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	e000      	b.n	8014faa <cdcIfIsConnected+0x42>
  }

  return true;
 8014fa8:	2301      	movs	r3, #1
}
 8014faa:	4618      	mov	r0, r3
 8014fac:	46bd      	mov	sp, r7
 8014fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb2:	4770      	bx	lr
 8014fb4:	20000b7c 	.word	0x20000b7c
 8014fb8:	20001e74 	.word	0x20001e74

08014fbc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014fbc:	b480      	push	{r7}
 8014fbe:	b083      	sub	sp, #12
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	6039      	str	r1, [r7, #0]
 8014fc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	2212      	movs	r2, #18
 8014fcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8014fce:	4b03      	ldr	r3, [pc, #12]	; (8014fdc <USBD_CDC_DeviceDescriptor+0x20>)
}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	370c      	adds	r7, #12
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fda:	4770      	bx	lr
 8014fdc:	20000184 	.word	0x20000184

08014fe0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	b083      	sub	sp, #12
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	6039      	str	r1, [r7, #0]
 8014fea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014fec:	683b      	ldr	r3, [r7, #0]
 8014fee:	2204      	movs	r2, #4
 8014ff0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014ff2:	4b03      	ldr	r3, [pc, #12]	; (8015000 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	370c      	adds	r7, #12
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffe:	4770      	bx	lr
 8015000:	20000198 	.word	0x20000198

08015004 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b082      	sub	sp, #8
 8015008:	af00      	add	r7, sp, #0
 801500a:	4603      	mov	r3, r0
 801500c:	6039      	str	r1, [r7, #0]
 801500e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015010:	79fb      	ldrb	r3, [r7, #7]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d105      	bne.n	8015022 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015016:	683a      	ldr	r2, [r7, #0]
 8015018:	4907      	ldr	r1, [pc, #28]	; (8015038 <USBD_CDC_ProductStrDescriptor+0x34>)
 801501a:	4808      	ldr	r0, [pc, #32]	; (801503c <USBD_CDC_ProductStrDescriptor+0x38>)
 801501c:	f7ff fcdd 	bl	80149da <USBD_GetString>
 8015020:	e004      	b.n	801502c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015022:	683a      	ldr	r2, [r7, #0]
 8015024:	4904      	ldr	r1, [pc, #16]	; (8015038 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015026:	4805      	ldr	r0, [pc, #20]	; (801503c <USBD_CDC_ProductStrDescriptor+0x38>)
 8015028:	f7ff fcd7 	bl	80149da <USBD_GetString>
  }
  return USBD_StrDesc;
 801502c:	4b02      	ldr	r3, [pc, #8]	; (8015038 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801502e:	4618      	mov	r0, r3
 8015030:	3708      	adds	r7, #8
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	20002e78 	.word	0x20002e78
 801503c:	08018da8 	.word	0x08018da8

08015040 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b082      	sub	sp, #8
 8015044:	af00      	add	r7, sp, #0
 8015046:	4603      	mov	r3, r0
 8015048:	6039      	str	r1, [r7, #0]
 801504a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801504c:	683a      	ldr	r2, [r7, #0]
 801504e:	4904      	ldr	r1, [pc, #16]	; (8015060 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8015050:	4804      	ldr	r0, [pc, #16]	; (8015064 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8015052:	f7ff fcc2 	bl	80149da <USBD_GetString>
  return USBD_StrDesc;
 8015056:	4b02      	ldr	r3, [pc, #8]	; (8015060 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8015058:	4618      	mov	r0, r3
 801505a:	3708      	adds	r7, #8
 801505c:	46bd      	mov	sp, r7
 801505e:	bd80      	pop	{r7, pc}
 8015060:	20002e78 	.word	0x20002e78
 8015064:	08018dc0 	.word	0x08018dc0

08015068 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b082      	sub	sp, #8
 801506c:	af00      	add	r7, sp, #0
 801506e:	4603      	mov	r3, r0
 8015070:	6039      	str	r1, [r7, #0]
 8015072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015074:	683b      	ldr	r3, [r7, #0]
 8015076:	221a      	movs	r2, #26
 8015078:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801507a:	f000 f843 	bl	8015104 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801507e:	4b02      	ldr	r3, [pc, #8]	; (8015088 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8015080:	4618      	mov	r0, r3
 8015082:	3708      	adds	r7, #8
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}
 8015088:	2000019c 	.word	0x2000019c

0801508c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b082      	sub	sp, #8
 8015090:	af00      	add	r7, sp, #0
 8015092:	4603      	mov	r3, r0
 8015094:	6039      	str	r1, [r7, #0]
 8015096:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015098:	79fb      	ldrb	r3, [r7, #7]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d105      	bne.n	80150aa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801509e:	683a      	ldr	r2, [r7, #0]
 80150a0:	4907      	ldr	r1, [pc, #28]	; (80150c0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80150a2:	4808      	ldr	r0, [pc, #32]	; (80150c4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80150a4:	f7ff fc99 	bl	80149da <USBD_GetString>
 80150a8:	e004      	b.n	80150b4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80150aa:	683a      	ldr	r2, [r7, #0]
 80150ac:	4904      	ldr	r1, [pc, #16]	; (80150c0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80150ae:	4805      	ldr	r0, [pc, #20]	; (80150c4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80150b0:	f7ff fc93 	bl	80149da <USBD_GetString>
  }
  return USBD_StrDesc;
 80150b4:	4b02      	ldr	r3, [pc, #8]	; (80150c0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3708      	adds	r7, #8
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}
 80150be:	bf00      	nop
 80150c0:	20002e78 	.word	0x20002e78
 80150c4:	08018dd4 	.word	0x08018dd4

080150c8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b082      	sub	sp, #8
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	4603      	mov	r3, r0
 80150d0:	6039      	str	r1, [r7, #0]
 80150d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80150d4:	79fb      	ldrb	r3, [r7, #7]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d105      	bne.n	80150e6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80150da:	683a      	ldr	r2, [r7, #0]
 80150dc:	4907      	ldr	r1, [pc, #28]	; (80150fc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80150de:	4808      	ldr	r0, [pc, #32]	; (8015100 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80150e0:	f7ff fc7b 	bl	80149da <USBD_GetString>
 80150e4:	e004      	b.n	80150f0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80150e6:	683a      	ldr	r2, [r7, #0]
 80150e8:	4904      	ldr	r1, [pc, #16]	; (80150fc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80150ea:	4805      	ldr	r0, [pc, #20]	; (8015100 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80150ec:	f7ff fc75 	bl	80149da <USBD_GetString>
  }
  return USBD_StrDesc;
 80150f0:	4b02      	ldr	r3, [pc, #8]	; (80150fc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80150f2:	4618      	mov	r0, r3
 80150f4:	3708      	adds	r7, #8
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}
 80150fa:	bf00      	nop
 80150fc:	20002e78 	.word	0x20002e78
 8015100:	08018de0 	.word	0x08018de0

08015104 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801510a:	4b0f      	ldr	r3, [pc, #60]	; (8015148 <Get_SerialNum+0x44>)
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015110:	4b0e      	ldr	r3, [pc, #56]	; (801514c <Get_SerialNum+0x48>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015116:	4b0e      	ldr	r3, [pc, #56]	; (8015150 <Get_SerialNum+0x4c>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801511c:	68fa      	ldr	r2, [r7, #12]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	4413      	add	r3, r2
 8015122:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d009      	beq.n	801513e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801512a:	2208      	movs	r2, #8
 801512c:	4909      	ldr	r1, [pc, #36]	; (8015154 <Get_SerialNum+0x50>)
 801512e:	68f8      	ldr	r0, [r7, #12]
 8015130:	f000 f814 	bl	801515c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015134:	2204      	movs	r2, #4
 8015136:	4908      	ldr	r1, [pc, #32]	; (8015158 <Get_SerialNum+0x54>)
 8015138:	68b8      	ldr	r0, [r7, #8]
 801513a:	f000 f80f 	bl	801515c <IntToUnicode>
  }
}
 801513e:	bf00      	nop
 8015140:	3710      	adds	r7, #16
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}
 8015146:	bf00      	nop
 8015148:	1fff7590 	.word	0x1fff7590
 801514c:	1fff7594 	.word	0x1fff7594
 8015150:	1fff7598 	.word	0x1fff7598
 8015154:	2000019e 	.word	0x2000019e
 8015158:	200001ae 	.word	0x200001ae

0801515c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801515c:	b480      	push	{r7}
 801515e:	b087      	sub	sp, #28
 8015160:	af00      	add	r7, sp, #0
 8015162:	60f8      	str	r0, [r7, #12]
 8015164:	60b9      	str	r1, [r7, #8]
 8015166:	4613      	mov	r3, r2
 8015168:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801516a:	2300      	movs	r3, #0
 801516c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801516e:	2300      	movs	r3, #0
 8015170:	75fb      	strb	r3, [r7, #23]
 8015172:	e027      	b.n	80151c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	0f1b      	lsrs	r3, r3, #28
 8015178:	2b09      	cmp	r3, #9
 801517a:	d80b      	bhi.n	8015194 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	0f1b      	lsrs	r3, r3, #28
 8015180:	b2da      	uxtb	r2, r3
 8015182:	7dfb      	ldrb	r3, [r7, #23]
 8015184:	005b      	lsls	r3, r3, #1
 8015186:	4619      	mov	r1, r3
 8015188:	68bb      	ldr	r3, [r7, #8]
 801518a:	440b      	add	r3, r1
 801518c:	3230      	adds	r2, #48	; 0x30
 801518e:	b2d2      	uxtb	r2, r2
 8015190:	701a      	strb	r2, [r3, #0]
 8015192:	e00a      	b.n	80151aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	0f1b      	lsrs	r3, r3, #28
 8015198:	b2da      	uxtb	r2, r3
 801519a:	7dfb      	ldrb	r3, [r7, #23]
 801519c:	005b      	lsls	r3, r3, #1
 801519e:	4619      	mov	r1, r3
 80151a0:	68bb      	ldr	r3, [r7, #8]
 80151a2:	440b      	add	r3, r1
 80151a4:	3237      	adds	r2, #55	; 0x37
 80151a6:	b2d2      	uxtb	r2, r2
 80151a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	011b      	lsls	r3, r3, #4
 80151ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80151b0:	7dfb      	ldrb	r3, [r7, #23]
 80151b2:	005b      	lsls	r3, r3, #1
 80151b4:	3301      	adds	r3, #1
 80151b6:	68ba      	ldr	r2, [r7, #8]
 80151b8:	4413      	add	r3, r2
 80151ba:	2200      	movs	r2, #0
 80151bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80151be:	7dfb      	ldrb	r3, [r7, #23]
 80151c0:	3301      	adds	r3, #1
 80151c2:	75fb      	strb	r3, [r7, #23]
 80151c4:	7dfa      	ldrb	r2, [r7, #23]
 80151c6:	79fb      	ldrb	r3, [r7, #7]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d3d3      	bcc.n	8015174 <IntToUnicode+0x18>
  }
}
 80151cc:	bf00      	nop
 80151ce:	bf00      	nop
 80151d0:	371c      	adds	r7, #28
 80151d2:	46bd      	mov	sp, r7
 80151d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d8:	4770      	bx	lr
	...

080151dc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b098      	sub	sp, #96	; 0x60
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80151e4:	f107 030c 	add.w	r3, r7, #12
 80151e8:	2254      	movs	r2, #84	; 0x54
 80151ea:	2100      	movs	r1, #0
 80151ec:	4618      	mov	r0, r3
 80151ee:	f001 fb33 	bl	8016858 <memset>
  if(pcdHandle->Instance==USB)
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	4a15      	ldr	r2, [pc, #84]	; (801524c <HAL_PCD_MspInit+0x70>)
 80151f8:	4293      	cmp	r3, r2
 80151fa:	d123      	bne.n	8015244 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80151fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015200:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8015202:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015206:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8015208:	f107 030c 	add.w	r3, r7, #12
 801520c:	4618      	mov	r0, r3
 801520e:	f7f9 f879 	bl	800e304 <HAL_RCCEx_PeriphCLKConfig>
 8015212:	4603      	mov	r3, r0
 8015214:	2b00      	cmp	r3, #0
 8015216:	d001      	beq.n	801521c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8015218:	f7f3 fc66 	bl	8008ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801521c:	4b0c      	ldr	r3, [pc, #48]	; (8015250 <HAL_PCD_MspInit+0x74>)
 801521e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015220:	4a0b      	ldr	r2, [pc, #44]	; (8015250 <HAL_PCD_MspInit+0x74>)
 8015222:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015226:	6593      	str	r3, [r2, #88]	; 0x58
 8015228:	4b09      	ldr	r3, [pc, #36]	; (8015250 <HAL_PCD_MspInit+0x74>)
 801522a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801522c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015230:	60bb      	str	r3, [r7, #8]
 8015232:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8015234:	2200      	movs	r2, #0
 8015236:	2100      	movs	r1, #0
 8015238:	2014      	movs	r0, #20
 801523a:	f7f5 ff50 	bl	800b0de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801523e:	2014      	movs	r0, #20
 8015240:	f7f5 ff67 	bl	800b112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8015244:	bf00      	nop
 8015246:	3760      	adds	r7, #96	; 0x60
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}
 801524c:	40005c00 	.word	0x40005c00
 8015250:	40021000 	.word	0x40021000

08015254 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b082      	sub	sp, #8
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8015268:	4619      	mov	r1, r3
 801526a:	4610      	mov	r0, r2
 801526c:	f7fe fc18 	bl	8013aa0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8015270:	bf00      	nop
 8015272:	3708      	adds	r7, #8
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}

08015278 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b082      	sub	sp, #8
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
 8015280:	460b      	mov	r3, r1
 8015282:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801528a:	78fa      	ldrb	r2, [r7, #3]
 801528c:	6879      	ldr	r1, [r7, #4]
 801528e:	4613      	mov	r3, r2
 8015290:	009b      	lsls	r3, r3, #2
 8015292:	4413      	add	r3, r2
 8015294:	00db      	lsls	r3, r3, #3
 8015296:	440b      	add	r3, r1
 8015298:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801529c:	681a      	ldr	r2, [r3, #0]
 801529e:	78fb      	ldrb	r3, [r7, #3]
 80152a0:	4619      	mov	r1, r3
 80152a2:	f7fe fc52 	bl	8013b4a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80152a6:	bf00      	nop
 80152a8:	3708      	adds	r7, #8
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}

080152ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152ae:	b580      	push	{r7, lr}
 80152b0:	b082      	sub	sp, #8
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	6078      	str	r0, [r7, #4]
 80152b6:	460b      	mov	r3, r1
 80152b8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 80152c0:	78fa      	ldrb	r2, [r7, #3]
 80152c2:	6879      	ldr	r1, [r7, #4]
 80152c4:	4613      	mov	r3, r2
 80152c6:	009b      	lsls	r3, r3, #2
 80152c8:	4413      	add	r3, r2
 80152ca:	00db      	lsls	r3, r3, #3
 80152cc:	440b      	add	r3, r1
 80152ce:	3324      	adds	r3, #36	; 0x24
 80152d0:	681a      	ldr	r2, [r3, #0]
 80152d2:	78fb      	ldrb	r3, [r7, #3]
 80152d4:	4619      	mov	r1, r3
 80152d6:	f7fe fc9b 	bl	8013c10 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80152da:	bf00      	nop
 80152dc:	3708      	adds	r7, #8
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}

080152e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152e2:	b580      	push	{r7, lr}
 80152e4:	b082      	sub	sp, #8
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80152f0:	4618      	mov	r0, r3
 80152f2:	f7fe fdaf 	bl	8013e54 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80152f6:	bf00      	nop
 80152f8:	3708      	adds	r7, #8
 80152fa:	46bd      	mov	sp, r7
 80152fc:	bd80      	pop	{r7, pc}

080152fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152fe:	b580      	push	{r7, lr}
 8015300:	b084      	sub	sp, #16
 8015302:	af00      	add	r7, sp, #0
 8015304:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015306:	2301      	movs	r3, #1
 8015308:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	795b      	ldrb	r3, [r3, #5]
 801530e:	2b02      	cmp	r3, #2
 8015310:	d001      	beq.n	8015316 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015312:	f7f3 fbe9 	bl	8008ae8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801531c:	7bfa      	ldrb	r2, [r7, #15]
 801531e:	4611      	mov	r1, r2
 8015320:	4618      	mov	r0, r3
 8015322:	f7fe fd59 	bl	8013dd8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801532c:	4618      	mov	r0, r3
 801532e:	f7fe fd05 	bl	8013d3c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8015332:	bf00      	nop
 8015334:	3710      	adds	r7, #16
 8015336:	46bd      	mov	sp, r7
 8015338:	bd80      	pop	{r7, pc}
	...

0801533c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b082      	sub	sp, #8
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801534a:	4618      	mov	r0, r3
 801534c:	f7fe fd54 	bl	8013df8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	7a5b      	ldrb	r3, [r3, #9]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d005      	beq.n	8015364 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015358:	4b04      	ldr	r3, [pc, #16]	; (801536c <HAL_PCD_SuspendCallback+0x30>)
 801535a:	691b      	ldr	r3, [r3, #16]
 801535c:	4a03      	ldr	r2, [pc, #12]	; (801536c <HAL_PCD_SuspendCallback+0x30>)
 801535e:	f043 0306 	orr.w	r3, r3, #6
 8015362:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8015364:	bf00      	nop
 8015366:	3708      	adds	r7, #8
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}
 801536c:	e000ed00 	.word	0xe000ed00

08015370 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b082      	sub	sp, #8
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	7a5b      	ldrb	r3, [r3, #9]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d007      	beq.n	8015390 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015380:	4b08      	ldr	r3, [pc, #32]	; (80153a4 <HAL_PCD_ResumeCallback+0x34>)
 8015382:	691b      	ldr	r3, [r3, #16]
 8015384:	4a07      	ldr	r2, [pc, #28]	; (80153a4 <HAL_PCD_ResumeCallback+0x34>)
 8015386:	f023 0306 	bic.w	r3, r3, #6
 801538a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801538c:	f000 f9f8 	bl	8015780 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015396:	4618      	mov	r0, r3
 8015398:	f7fe fd44 	bl	8013e24 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801539c:	bf00      	nop
 801539e:	3708      	adds	r7, #8
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}
 80153a4:	e000ed00 	.word	0xe000ed00

080153a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b082      	sub	sp, #8
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80153b0:	4a2b      	ldr	r2, [pc, #172]	; (8015460 <USBD_LL_Init+0xb8>)
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	4a29      	ldr	r2, [pc, #164]	; (8015460 <USBD_LL_Init+0xb8>)
 80153bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80153c0:	4b27      	ldr	r3, [pc, #156]	; (8015460 <USBD_LL_Init+0xb8>)
 80153c2:	4a28      	ldr	r2, [pc, #160]	; (8015464 <USBD_LL_Init+0xbc>)
 80153c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80153c6:	4b26      	ldr	r3, [pc, #152]	; (8015460 <USBD_LL_Init+0xb8>)
 80153c8:	2208      	movs	r2, #8
 80153ca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80153cc:	4b24      	ldr	r3, [pc, #144]	; (8015460 <USBD_LL_Init+0xb8>)
 80153ce:	2202      	movs	r2, #2
 80153d0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80153d2:	4b23      	ldr	r3, [pc, #140]	; (8015460 <USBD_LL_Init+0xb8>)
 80153d4:	2202      	movs	r2, #2
 80153d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80153d8:	4b21      	ldr	r3, [pc, #132]	; (8015460 <USBD_LL_Init+0xb8>)
 80153da:	2200      	movs	r2, #0
 80153dc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80153de:	4b20      	ldr	r3, [pc, #128]	; (8015460 <USBD_LL_Init+0xb8>)
 80153e0:	2200      	movs	r2, #0
 80153e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80153e4:	4b1e      	ldr	r3, [pc, #120]	; (8015460 <USBD_LL_Init+0xb8>)
 80153e6:	2200      	movs	r2, #0
 80153e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80153ea:	4b1d      	ldr	r3, [pc, #116]	; (8015460 <USBD_LL_Init+0xb8>)
 80153ec:	2200      	movs	r2, #0
 80153ee:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80153f0:	481b      	ldr	r0, [pc, #108]	; (8015460 <USBD_LL_Init+0xb8>)
 80153f2:	f7f6 fbef 	bl	800bbd4 <HAL_PCD_Init>
 80153f6:	4603      	mov	r3, r0
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d001      	beq.n	8015400 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80153fc:	f7f3 fb74 	bl	8008ae8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015406:	2318      	movs	r3, #24
 8015408:	2200      	movs	r2, #0
 801540a:	2100      	movs	r1, #0
 801540c:	f7f8 f8a9 	bl	800d562 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015416:	2358      	movs	r3, #88	; 0x58
 8015418:	2200      	movs	r2, #0
 801541a:	2180      	movs	r1, #128	; 0x80
 801541c:	f7f8 f8a1 	bl	800d562 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015426:	23c0      	movs	r3, #192	; 0xc0
 8015428:	2200      	movs	r2, #0
 801542a:	2181      	movs	r1, #129	; 0x81
 801542c:	f7f8 f899 	bl	800d562 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015436:	f44f 7388 	mov.w	r3, #272	; 0x110
 801543a:	2200      	movs	r2, #0
 801543c:	2101      	movs	r1, #1
 801543e:	f7f8 f890 	bl	800d562 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015448:	f44f 7380 	mov.w	r3, #256	; 0x100
 801544c:	2200      	movs	r2, #0
 801544e:	2182      	movs	r1, #130	; 0x82
 8015450:	f7f8 f887 	bl	800d562 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015454:	2300      	movs	r3, #0
}
 8015456:	4618      	mov	r0, r3
 8015458:	3708      	adds	r7, #8
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}
 801545e:	bf00      	nop
 8015460:	20003078 	.word	0x20003078
 8015464:	40005c00 	.word	0x40005c00

08015468 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b084      	sub	sp, #16
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015470:	2300      	movs	r3, #0
 8015472:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015474:	2300      	movs	r3, #0
 8015476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801547e:	4618      	mov	r0, r3
 8015480:	f7f6 fc76 	bl	800bd70 <HAL_PCD_Start>
 8015484:	4603      	mov	r3, r0
 8015486:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015488:	7bfb      	ldrb	r3, [r7, #15]
 801548a:	4618      	mov	r0, r3
 801548c:	f000 f97e 	bl	801578c <USBD_Get_USB_Status>
 8015490:	4603      	mov	r3, r0
 8015492:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015494:	7bbb      	ldrb	r3, [r7, #14]
}
 8015496:	4618      	mov	r0, r3
 8015498:	3710      	adds	r7, #16
 801549a:	46bd      	mov	sp, r7
 801549c:	bd80      	pop	{r7, pc}

0801549e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801549e:	b580      	push	{r7, lr}
 80154a0:	b084      	sub	sp, #16
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	6078      	str	r0, [r7, #4]
 80154a6:	4608      	mov	r0, r1
 80154a8:	4611      	mov	r1, r2
 80154aa:	461a      	mov	r2, r3
 80154ac:	4603      	mov	r3, r0
 80154ae:	70fb      	strb	r3, [r7, #3]
 80154b0:	460b      	mov	r3, r1
 80154b2:	70bb      	strb	r3, [r7, #2]
 80154b4:	4613      	mov	r3, r2
 80154b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154b8:	2300      	movs	r3, #0
 80154ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154bc:	2300      	movs	r3, #0
 80154be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80154c6:	78bb      	ldrb	r3, [r7, #2]
 80154c8:	883a      	ldrh	r2, [r7, #0]
 80154ca:	78f9      	ldrb	r1, [r7, #3]
 80154cc:	f7f6 fdbd 	bl	800c04a <HAL_PCD_EP_Open>
 80154d0:	4603      	mov	r3, r0
 80154d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80154d4:	7bfb      	ldrb	r3, [r7, #15]
 80154d6:	4618      	mov	r0, r3
 80154d8:	f000 f958 	bl	801578c <USBD_Get_USB_Status>
 80154dc:	4603      	mov	r3, r0
 80154de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80154e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80154e2:	4618      	mov	r0, r3
 80154e4:	3710      	adds	r7, #16
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}

080154ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80154ea:	b580      	push	{r7, lr}
 80154ec:	b084      	sub	sp, #16
 80154ee:	af00      	add	r7, sp, #0
 80154f0:	6078      	str	r0, [r7, #4]
 80154f2:	460b      	mov	r3, r1
 80154f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154f6:	2300      	movs	r3, #0
 80154f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154fa:	2300      	movs	r3, #0
 80154fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015504:	78fa      	ldrb	r2, [r7, #3]
 8015506:	4611      	mov	r1, r2
 8015508:	4618      	mov	r0, r3
 801550a:	f7f6 fdfb 	bl	800c104 <HAL_PCD_EP_Close>
 801550e:	4603      	mov	r3, r0
 8015510:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015512:	7bfb      	ldrb	r3, [r7, #15]
 8015514:	4618      	mov	r0, r3
 8015516:	f000 f939 	bl	801578c <USBD_Get_USB_Status>
 801551a:	4603      	mov	r3, r0
 801551c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801551e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015520:	4618      	mov	r0, r3
 8015522:	3710      	adds	r7, #16
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}

08015528 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b084      	sub	sp, #16
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
 8015530:	460b      	mov	r3, r1
 8015532:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015534:	2300      	movs	r3, #0
 8015536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015538:	2300      	movs	r3, #0
 801553a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015542:	78fa      	ldrb	r2, [r7, #3]
 8015544:	4611      	mov	r1, r2
 8015546:	4618      	mov	r0, r3
 8015548:	f7f6 fea4 	bl	800c294 <HAL_PCD_EP_SetStall>
 801554c:	4603      	mov	r3, r0
 801554e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015550:	7bfb      	ldrb	r3, [r7, #15]
 8015552:	4618      	mov	r0, r3
 8015554:	f000 f91a 	bl	801578c <USBD_Get_USB_Status>
 8015558:	4603      	mov	r3, r0
 801555a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801555c:	7bbb      	ldrb	r3, [r7, #14]
}
 801555e:	4618      	mov	r0, r3
 8015560:	3710      	adds	r7, #16
 8015562:	46bd      	mov	sp, r7
 8015564:	bd80      	pop	{r7, pc}

08015566 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015566:	b580      	push	{r7, lr}
 8015568:	b084      	sub	sp, #16
 801556a:	af00      	add	r7, sp, #0
 801556c:	6078      	str	r0, [r7, #4]
 801556e:	460b      	mov	r3, r1
 8015570:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015572:	2300      	movs	r3, #0
 8015574:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015576:	2300      	movs	r3, #0
 8015578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015580:	78fa      	ldrb	r2, [r7, #3]
 8015582:	4611      	mov	r1, r2
 8015584:	4618      	mov	r0, r3
 8015586:	f7f6 fed7 	bl	800c338 <HAL_PCD_EP_ClrStall>
 801558a:	4603      	mov	r3, r0
 801558c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801558e:	7bfb      	ldrb	r3, [r7, #15]
 8015590:	4618      	mov	r0, r3
 8015592:	f000 f8fb 	bl	801578c <USBD_Get_USB_Status>
 8015596:	4603      	mov	r3, r0
 8015598:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801559a:	7bbb      	ldrb	r3, [r7, #14]
}
 801559c:	4618      	mov	r0, r3
 801559e:	3710      	adds	r7, #16
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}

080155a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80155a4:	b480      	push	{r7}
 80155a6:	b085      	sub	sp, #20
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]
 80155ac:	460b      	mov	r3, r1
 80155ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80155b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80155b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	da0b      	bge.n	80155d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80155c0:	78fb      	ldrb	r3, [r7, #3]
 80155c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80155c6:	68f9      	ldr	r1, [r7, #12]
 80155c8:	4613      	mov	r3, r2
 80155ca:	009b      	lsls	r3, r3, #2
 80155cc:	4413      	add	r3, r2
 80155ce:	00db      	lsls	r3, r3, #3
 80155d0:	440b      	add	r3, r1
 80155d2:	3312      	adds	r3, #18
 80155d4:	781b      	ldrb	r3, [r3, #0]
 80155d6:	e00b      	b.n	80155f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80155d8:	78fb      	ldrb	r3, [r7, #3]
 80155da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80155de:	68f9      	ldr	r1, [r7, #12]
 80155e0:	4613      	mov	r3, r2
 80155e2:	009b      	lsls	r3, r3, #2
 80155e4:	4413      	add	r3, r2
 80155e6:	00db      	lsls	r3, r3, #3
 80155e8:	440b      	add	r3, r1
 80155ea:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 80155ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3714      	adds	r7, #20
 80155f4:	46bd      	mov	sp, r7
 80155f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fa:	4770      	bx	lr

080155fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b084      	sub	sp, #16
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	460b      	mov	r3, r1
 8015606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015608:	2300      	movs	r3, #0
 801560a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801560c:	2300      	movs	r3, #0
 801560e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015616:	78fa      	ldrb	r2, [r7, #3]
 8015618:	4611      	mov	r1, r2
 801561a:	4618      	mov	r0, r3
 801561c:	f7f6 fcf1 	bl	800c002 <HAL_PCD_SetAddress>
 8015620:	4603      	mov	r3, r0
 8015622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015624:	7bfb      	ldrb	r3, [r7, #15]
 8015626:	4618      	mov	r0, r3
 8015628:	f000 f8b0 	bl	801578c <USBD_Get_USB_Status>
 801562c:	4603      	mov	r3, r0
 801562e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015630:	7bbb      	ldrb	r3, [r7, #14]
}
 8015632:	4618      	mov	r0, r3
 8015634:	3710      	adds	r7, #16
 8015636:	46bd      	mov	sp, r7
 8015638:	bd80      	pop	{r7, pc}

0801563a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801563a:	b580      	push	{r7, lr}
 801563c:	b086      	sub	sp, #24
 801563e:	af00      	add	r7, sp, #0
 8015640:	60f8      	str	r0, [r7, #12]
 8015642:	607a      	str	r2, [r7, #4]
 8015644:	603b      	str	r3, [r7, #0]
 8015646:	460b      	mov	r3, r1
 8015648:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801564a:	2300      	movs	r3, #0
 801564c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801564e:	2300      	movs	r3, #0
 8015650:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015658:	7af9      	ldrb	r1, [r7, #11]
 801565a:	683b      	ldr	r3, [r7, #0]
 801565c:	687a      	ldr	r2, [r7, #4]
 801565e:	f7f6 fde2 	bl	800c226 <HAL_PCD_EP_Transmit>
 8015662:	4603      	mov	r3, r0
 8015664:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015666:	7dfb      	ldrb	r3, [r7, #23]
 8015668:	4618      	mov	r0, r3
 801566a:	f000 f88f 	bl	801578c <USBD_Get_USB_Status>
 801566e:	4603      	mov	r3, r0
 8015670:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015672:	7dbb      	ldrb	r3, [r7, #22]
}
 8015674:	4618      	mov	r0, r3
 8015676:	3718      	adds	r7, #24
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}

0801567c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b086      	sub	sp, #24
 8015680:	af00      	add	r7, sp, #0
 8015682:	60f8      	str	r0, [r7, #12]
 8015684:	607a      	str	r2, [r7, #4]
 8015686:	603b      	str	r3, [r7, #0]
 8015688:	460b      	mov	r3, r1
 801568a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801568c:	2300      	movs	r3, #0
 801568e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015690:	2300      	movs	r3, #0
 8015692:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801569a:	7af9      	ldrb	r1, [r7, #11]
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	687a      	ldr	r2, [r7, #4]
 80156a0:	f7f6 fd78 	bl	800c194 <HAL_PCD_EP_Receive>
 80156a4:	4603      	mov	r3, r0
 80156a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156a8:	7dfb      	ldrb	r3, [r7, #23]
 80156aa:	4618      	mov	r0, r3
 80156ac:	f000 f86e 	bl	801578c <USBD_Get_USB_Status>
 80156b0:	4603      	mov	r3, r0
 80156b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80156b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80156b6:	4618      	mov	r0, r3
 80156b8:	3718      	adds	r7, #24
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd80      	pop	{r7, pc}

080156be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80156be:	b580      	push	{r7, lr}
 80156c0:	b082      	sub	sp, #8
 80156c2:	af00      	add	r7, sp, #0
 80156c4:	6078      	str	r0, [r7, #4]
 80156c6:	460b      	mov	r3, r1
 80156c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80156d0:	78fa      	ldrb	r2, [r7, #3]
 80156d2:	4611      	mov	r1, r2
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7f6 fd8e 	bl	800c1f6 <HAL_PCD_EP_GetRxCount>
 80156da:	4603      	mov	r3, r0
}
 80156dc:	4618      	mov	r0, r3
 80156de:	3708      	adds	r7, #8
 80156e0:	46bd      	mov	sp, r7
 80156e2:	bd80      	pop	{r7, pc}

080156e4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
 80156ec:	460b      	mov	r3, r1
 80156ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80156f0:	78fb      	ldrb	r3, [r7, #3]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d002      	beq.n	80156fc <HAL_PCDEx_LPM_Callback+0x18>
 80156f6:	2b01      	cmp	r3, #1
 80156f8:	d013      	beq.n	8015722 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80156fa:	e023      	b.n	8015744 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	7a5b      	ldrb	r3, [r3, #9]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d007      	beq.n	8015714 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015704:	f000 f83c 	bl	8015780 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015708:	4b10      	ldr	r3, [pc, #64]	; (801574c <HAL_PCDEx_LPM_Callback+0x68>)
 801570a:	691b      	ldr	r3, [r3, #16]
 801570c:	4a0f      	ldr	r2, [pc, #60]	; (801574c <HAL_PCDEx_LPM_Callback+0x68>)
 801570e:	f023 0306 	bic.w	r3, r3, #6
 8015712:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801571a:	4618      	mov	r0, r3
 801571c:	f7fe fb82 	bl	8013e24 <USBD_LL_Resume>
    break;
 8015720:	e010      	b.n	8015744 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015728:	4618      	mov	r0, r3
 801572a:	f7fe fb65 	bl	8013df8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	7a5b      	ldrb	r3, [r3, #9]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d005      	beq.n	8015742 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015736:	4b05      	ldr	r3, [pc, #20]	; (801574c <HAL_PCDEx_LPM_Callback+0x68>)
 8015738:	691b      	ldr	r3, [r3, #16]
 801573a:	4a04      	ldr	r2, [pc, #16]	; (801574c <HAL_PCDEx_LPM_Callback+0x68>)
 801573c:	f043 0306 	orr.w	r3, r3, #6
 8015740:	6113      	str	r3, [r2, #16]
    break;
 8015742:	bf00      	nop
}
 8015744:	bf00      	nop
 8015746:	3708      	adds	r7, #8
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}
 801574c:	e000ed00 	.word	0xe000ed00

08015750 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015750:	b480      	push	{r7}
 8015752:	b083      	sub	sp, #12
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015758:	4b03      	ldr	r3, [pc, #12]	; (8015768 <USBD_static_malloc+0x18>)
}
 801575a:	4618      	mov	r0, r3
 801575c:	370c      	adds	r7, #12
 801575e:	46bd      	mov	sp, r7
 8015760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015764:	4770      	bx	lr
 8015766:	bf00      	nop
 8015768:	20003354 	.word	0x20003354

0801576c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801576c:	b480      	push	{r7}
 801576e:	b083      	sub	sp, #12
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]

}
 8015774:	bf00      	nop
 8015776:	370c      	adds	r7, #12
 8015778:	46bd      	mov	sp, r7
 801577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577e:	4770      	bx	lr

08015780 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015780:	b580      	push	{r7, lr}
 8015782:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015784:	f7f3 f956 	bl	8008a34 <SystemClock_Config>
}
 8015788:	bf00      	nop
 801578a:	bd80      	pop	{r7, pc}

0801578c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801578c:	b480      	push	{r7}
 801578e:	b085      	sub	sp, #20
 8015790:	af00      	add	r7, sp, #0
 8015792:	4603      	mov	r3, r0
 8015794:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015796:	2300      	movs	r3, #0
 8015798:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801579a:	79fb      	ldrb	r3, [r7, #7]
 801579c:	2b03      	cmp	r3, #3
 801579e:	d817      	bhi.n	80157d0 <USBD_Get_USB_Status+0x44>
 80157a0:	a201      	add	r2, pc, #4	; (adr r2, 80157a8 <USBD_Get_USB_Status+0x1c>)
 80157a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157a6:	bf00      	nop
 80157a8:	080157b9 	.word	0x080157b9
 80157ac:	080157bf 	.word	0x080157bf
 80157b0:	080157c5 	.word	0x080157c5
 80157b4:	080157cb 	.word	0x080157cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80157b8:	2300      	movs	r3, #0
 80157ba:	73fb      	strb	r3, [r7, #15]
    break;
 80157bc:	e00b      	b.n	80157d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80157be:	2303      	movs	r3, #3
 80157c0:	73fb      	strb	r3, [r7, #15]
    break;
 80157c2:	e008      	b.n	80157d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80157c4:	2301      	movs	r3, #1
 80157c6:	73fb      	strb	r3, [r7, #15]
    break;
 80157c8:	e005      	b.n	80157d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80157ca:	2303      	movs	r3, #3
 80157cc:	73fb      	strb	r3, [r7, #15]
    break;
 80157ce:	e002      	b.n	80157d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80157d0:	2303      	movs	r3, #3
 80157d2:	73fb      	strb	r3, [r7, #15]
    break;
 80157d4:	bf00      	nop
  }
  return usb_status;
 80157d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80157d8:	4618      	mov	r0, r3
 80157da:	3714      	adds	r7, #20
 80157dc:	46bd      	mov	sp, r7
 80157de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e2:	4770      	bx	lr

080157e4 <main>:


#include "main.h"

int main(void)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	af00      	add	r7, sp, #0
  hwInit();
 80157e8:	f7f5 fa76 	bl	800acd8 <hwInit>
  apInit();
 80157ec:	f7f3 f808 	bl	8008800 <apInit>

  apMain();
 80157f0:	f7f3 f810 	bl	8008814 <apMain>
 80157f4:	2300      	movs	r3, #0
}
 80157f6:	4618      	mov	r0, r3
 80157f8:	bd80      	pop	{r7, pc}

080157fa <sulp>:
 80157fa:	b570      	push	{r4, r5, r6, lr}
 80157fc:	4604      	mov	r4, r0
 80157fe:	460d      	mov	r5, r1
 8015800:	ec45 4b10 	vmov	d0, r4, r5
 8015804:	4616      	mov	r6, r2
 8015806:	f002 f8a7 	bl	8017958 <__ulp>
 801580a:	ec51 0b10 	vmov	r0, r1, d0
 801580e:	b17e      	cbz	r6, 8015830 <sulp+0x36>
 8015810:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015814:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015818:	2b00      	cmp	r3, #0
 801581a:	dd09      	ble.n	8015830 <sulp+0x36>
 801581c:	051b      	lsls	r3, r3, #20
 801581e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015822:	2400      	movs	r4, #0
 8015824:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015828:	4622      	mov	r2, r4
 801582a:	462b      	mov	r3, r5
 801582c:	f7f2 fb14 	bl	8007e58 <__aeabi_dmul>
 8015830:	bd70      	pop	{r4, r5, r6, pc}
 8015832:	0000      	movs	r0, r0
 8015834:	0000      	movs	r0, r0
	...

08015838 <_strtod_l>:
 8015838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801583c:	ed2d 8b02 	vpush	{d8}
 8015840:	b09b      	sub	sp, #108	; 0x6c
 8015842:	4604      	mov	r4, r0
 8015844:	9213      	str	r2, [sp, #76]	; 0x4c
 8015846:	2200      	movs	r2, #0
 8015848:	9216      	str	r2, [sp, #88]	; 0x58
 801584a:	460d      	mov	r5, r1
 801584c:	f04f 0800 	mov.w	r8, #0
 8015850:	f04f 0900 	mov.w	r9, #0
 8015854:	460a      	mov	r2, r1
 8015856:	9215      	str	r2, [sp, #84]	; 0x54
 8015858:	7811      	ldrb	r1, [r2, #0]
 801585a:	292b      	cmp	r1, #43	; 0x2b
 801585c:	d04c      	beq.n	80158f8 <_strtod_l+0xc0>
 801585e:	d83a      	bhi.n	80158d6 <_strtod_l+0x9e>
 8015860:	290d      	cmp	r1, #13
 8015862:	d834      	bhi.n	80158ce <_strtod_l+0x96>
 8015864:	2908      	cmp	r1, #8
 8015866:	d834      	bhi.n	80158d2 <_strtod_l+0x9a>
 8015868:	2900      	cmp	r1, #0
 801586a:	d03d      	beq.n	80158e8 <_strtod_l+0xb0>
 801586c:	2200      	movs	r2, #0
 801586e:	920a      	str	r2, [sp, #40]	; 0x28
 8015870:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8015872:	7832      	ldrb	r2, [r6, #0]
 8015874:	2a30      	cmp	r2, #48	; 0x30
 8015876:	f040 80b4 	bne.w	80159e2 <_strtod_l+0x1aa>
 801587a:	7872      	ldrb	r2, [r6, #1]
 801587c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015880:	2a58      	cmp	r2, #88	; 0x58
 8015882:	d170      	bne.n	8015966 <_strtod_l+0x12e>
 8015884:	9302      	str	r3, [sp, #8]
 8015886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015888:	9301      	str	r3, [sp, #4]
 801588a:	ab16      	add	r3, sp, #88	; 0x58
 801588c:	9300      	str	r3, [sp, #0]
 801588e:	4a8e      	ldr	r2, [pc, #568]	; (8015ac8 <_strtod_l+0x290>)
 8015890:	ab17      	add	r3, sp, #92	; 0x5c
 8015892:	a915      	add	r1, sp, #84	; 0x54
 8015894:	4620      	mov	r0, r4
 8015896:	f001 f945 	bl	8016b24 <__gethex>
 801589a:	f010 070f 	ands.w	r7, r0, #15
 801589e:	4605      	mov	r5, r0
 80158a0:	d005      	beq.n	80158ae <_strtod_l+0x76>
 80158a2:	2f06      	cmp	r7, #6
 80158a4:	d12a      	bne.n	80158fc <_strtod_l+0xc4>
 80158a6:	3601      	adds	r6, #1
 80158a8:	2300      	movs	r3, #0
 80158aa:	9615      	str	r6, [sp, #84]	; 0x54
 80158ac:	930a      	str	r3, [sp, #40]	; 0x28
 80158ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	f040 857f 	bne.w	80163b4 <_strtod_l+0xb7c>
 80158b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158b8:	b1db      	cbz	r3, 80158f2 <_strtod_l+0xba>
 80158ba:	4642      	mov	r2, r8
 80158bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80158c0:	ec43 2b10 	vmov	d0, r2, r3
 80158c4:	b01b      	add	sp, #108	; 0x6c
 80158c6:	ecbd 8b02 	vpop	{d8}
 80158ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158ce:	2920      	cmp	r1, #32
 80158d0:	d1cc      	bne.n	801586c <_strtod_l+0x34>
 80158d2:	3201      	adds	r2, #1
 80158d4:	e7bf      	b.n	8015856 <_strtod_l+0x1e>
 80158d6:	292d      	cmp	r1, #45	; 0x2d
 80158d8:	d1c8      	bne.n	801586c <_strtod_l+0x34>
 80158da:	2101      	movs	r1, #1
 80158dc:	910a      	str	r1, [sp, #40]	; 0x28
 80158de:	1c51      	adds	r1, r2, #1
 80158e0:	9115      	str	r1, [sp, #84]	; 0x54
 80158e2:	7852      	ldrb	r2, [r2, #1]
 80158e4:	2a00      	cmp	r2, #0
 80158e6:	d1c3      	bne.n	8015870 <_strtod_l+0x38>
 80158e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80158ea:	9515      	str	r5, [sp, #84]	; 0x54
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	f040 855f 	bne.w	80163b0 <_strtod_l+0xb78>
 80158f2:	4642      	mov	r2, r8
 80158f4:	464b      	mov	r3, r9
 80158f6:	e7e3      	b.n	80158c0 <_strtod_l+0x88>
 80158f8:	2100      	movs	r1, #0
 80158fa:	e7ef      	b.n	80158dc <_strtod_l+0xa4>
 80158fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80158fe:	b13a      	cbz	r2, 8015910 <_strtod_l+0xd8>
 8015900:	2135      	movs	r1, #53	; 0x35
 8015902:	a818      	add	r0, sp, #96	; 0x60
 8015904:	f002 f925 	bl	8017b52 <__copybits>
 8015908:	9916      	ldr	r1, [sp, #88]	; 0x58
 801590a:	4620      	mov	r0, r4
 801590c:	f001 fcf8 	bl	8017300 <_Bfree>
 8015910:	3f01      	subs	r7, #1
 8015912:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015914:	2f04      	cmp	r7, #4
 8015916:	d806      	bhi.n	8015926 <_strtod_l+0xee>
 8015918:	e8df f007 	tbb	[pc, r7]
 801591c:	201d0314 	.word	0x201d0314
 8015920:	14          	.byte	0x14
 8015921:	00          	.byte	0x00
 8015922:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8015926:	05e9      	lsls	r1, r5, #23
 8015928:	bf48      	it	mi
 801592a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801592e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015932:	0d1b      	lsrs	r3, r3, #20
 8015934:	051b      	lsls	r3, r3, #20
 8015936:	2b00      	cmp	r3, #0
 8015938:	d1b9      	bne.n	80158ae <_strtod_l+0x76>
 801593a:	f000 ffed 	bl	8016918 <__errno>
 801593e:	2322      	movs	r3, #34	; 0x22
 8015940:	6003      	str	r3, [r0, #0]
 8015942:	e7b4      	b.n	80158ae <_strtod_l+0x76>
 8015944:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8015948:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801594c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015950:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8015954:	e7e7      	b.n	8015926 <_strtod_l+0xee>
 8015956:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015ad0 <_strtod_l+0x298>
 801595a:	e7e4      	b.n	8015926 <_strtod_l+0xee>
 801595c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8015960:	f04f 38ff 	mov.w	r8, #4294967295
 8015964:	e7df      	b.n	8015926 <_strtod_l+0xee>
 8015966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015968:	1c5a      	adds	r2, r3, #1
 801596a:	9215      	str	r2, [sp, #84]	; 0x54
 801596c:	785b      	ldrb	r3, [r3, #1]
 801596e:	2b30      	cmp	r3, #48	; 0x30
 8015970:	d0f9      	beq.n	8015966 <_strtod_l+0x12e>
 8015972:	2b00      	cmp	r3, #0
 8015974:	d09b      	beq.n	80158ae <_strtod_l+0x76>
 8015976:	2301      	movs	r3, #1
 8015978:	f04f 0a00 	mov.w	sl, #0
 801597c:	9304      	str	r3, [sp, #16]
 801597e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015980:	930b      	str	r3, [sp, #44]	; 0x2c
 8015982:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015986:	46d3      	mov	fp, sl
 8015988:	220a      	movs	r2, #10
 801598a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801598c:	7806      	ldrb	r6, [r0, #0]
 801598e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015992:	b2d9      	uxtb	r1, r3
 8015994:	2909      	cmp	r1, #9
 8015996:	d926      	bls.n	80159e6 <_strtod_l+0x1ae>
 8015998:	494c      	ldr	r1, [pc, #304]	; (8015acc <_strtod_l+0x294>)
 801599a:	2201      	movs	r2, #1
 801599c:	f000 ff64 	bl	8016868 <strncmp>
 80159a0:	2800      	cmp	r0, #0
 80159a2:	d030      	beq.n	8015a06 <_strtod_l+0x1ce>
 80159a4:	2000      	movs	r0, #0
 80159a6:	4632      	mov	r2, r6
 80159a8:	9005      	str	r0, [sp, #20]
 80159aa:	465e      	mov	r6, fp
 80159ac:	4603      	mov	r3, r0
 80159ae:	2a65      	cmp	r2, #101	; 0x65
 80159b0:	d001      	beq.n	80159b6 <_strtod_l+0x17e>
 80159b2:	2a45      	cmp	r2, #69	; 0x45
 80159b4:	d113      	bne.n	80159de <_strtod_l+0x1a6>
 80159b6:	b91e      	cbnz	r6, 80159c0 <_strtod_l+0x188>
 80159b8:	9a04      	ldr	r2, [sp, #16]
 80159ba:	4302      	orrs	r2, r0
 80159bc:	d094      	beq.n	80158e8 <_strtod_l+0xb0>
 80159be:	2600      	movs	r6, #0
 80159c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80159c2:	1c6a      	adds	r2, r5, #1
 80159c4:	9215      	str	r2, [sp, #84]	; 0x54
 80159c6:	786a      	ldrb	r2, [r5, #1]
 80159c8:	2a2b      	cmp	r2, #43	; 0x2b
 80159ca:	d074      	beq.n	8015ab6 <_strtod_l+0x27e>
 80159cc:	2a2d      	cmp	r2, #45	; 0x2d
 80159ce:	d078      	beq.n	8015ac2 <_strtod_l+0x28a>
 80159d0:	f04f 0c00 	mov.w	ip, #0
 80159d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80159d8:	2909      	cmp	r1, #9
 80159da:	d97f      	bls.n	8015adc <_strtod_l+0x2a4>
 80159dc:	9515      	str	r5, [sp, #84]	; 0x54
 80159de:	2700      	movs	r7, #0
 80159e0:	e09e      	b.n	8015b20 <_strtod_l+0x2e8>
 80159e2:	2300      	movs	r3, #0
 80159e4:	e7c8      	b.n	8015978 <_strtod_l+0x140>
 80159e6:	f1bb 0f08 	cmp.w	fp, #8
 80159ea:	bfd8      	it	le
 80159ec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80159ee:	f100 0001 	add.w	r0, r0, #1
 80159f2:	bfda      	itte	le
 80159f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80159f8:	9309      	strle	r3, [sp, #36]	; 0x24
 80159fa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80159fe:	f10b 0b01 	add.w	fp, fp, #1
 8015a02:	9015      	str	r0, [sp, #84]	; 0x54
 8015a04:	e7c1      	b.n	801598a <_strtod_l+0x152>
 8015a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a08:	1c5a      	adds	r2, r3, #1
 8015a0a:	9215      	str	r2, [sp, #84]	; 0x54
 8015a0c:	785a      	ldrb	r2, [r3, #1]
 8015a0e:	f1bb 0f00 	cmp.w	fp, #0
 8015a12:	d037      	beq.n	8015a84 <_strtod_l+0x24c>
 8015a14:	9005      	str	r0, [sp, #20]
 8015a16:	465e      	mov	r6, fp
 8015a18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8015a1c:	2b09      	cmp	r3, #9
 8015a1e:	d912      	bls.n	8015a46 <_strtod_l+0x20e>
 8015a20:	2301      	movs	r3, #1
 8015a22:	e7c4      	b.n	80159ae <_strtod_l+0x176>
 8015a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a26:	1c5a      	adds	r2, r3, #1
 8015a28:	9215      	str	r2, [sp, #84]	; 0x54
 8015a2a:	785a      	ldrb	r2, [r3, #1]
 8015a2c:	3001      	adds	r0, #1
 8015a2e:	2a30      	cmp	r2, #48	; 0x30
 8015a30:	d0f8      	beq.n	8015a24 <_strtod_l+0x1ec>
 8015a32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015a36:	2b08      	cmp	r3, #8
 8015a38:	f200 84c1 	bhi.w	80163be <_strtod_l+0xb86>
 8015a3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a3e:	9005      	str	r0, [sp, #20]
 8015a40:	2000      	movs	r0, #0
 8015a42:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a44:	4606      	mov	r6, r0
 8015a46:	3a30      	subs	r2, #48	; 0x30
 8015a48:	f100 0301 	add.w	r3, r0, #1
 8015a4c:	d014      	beq.n	8015a78 <_strtod_l+0x240>
 8015a4e:	9905      	ldr	r1, [sp, #20]
 8015a50:	4419      	add	r1, r3
 8015a52:	9105      	str	r1, [sp, #20]
 8015a54:	4633      	mov	r3, r6
 8015a56:	eb00 0c06 	add.w	ip, r0, r6
 8015a5a:	210a      	movs	r1, #10
 8015a5c:	4563      	cmp	r3, ip
 8015a5e:	d113      	bne.n	8015a88 <_strtod_l+0x250>
 8015a60:	1833      	adds	r3, r6, r0
 8015a62:	2b08      	cmp	r3, #8
 8015a64:	f106 0601 	add.w	r6, r6, #1
 8015a68:	4406      	add	r6, r0
 8015a6a:	dc1a      	bgt.n	8015aa2 <_strtod_l+0x26a>
 8015a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a6e:	230a      	movs	r3, #10
 8015a70:	fb03 2301 	mla	r3, r3, r1, r2
 8015a74:	9309      	str	r3, [sp, #36]	; 0x24
 8015a76:	2300      	movs	r3, #0
 8015a78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015a7a:	1c51      	adds	r1, r2, #1
 8015a7c:	9115      	str	r1, [sp, #84]	; 0x54
 8015a7e:	7852      	ldrb	r2, [r2, #1]
 8015a80:	4618      	mov	r0, r3
 8015a82:	e7c9      	b.n	8015a18 <_strtod_l+0x1e0>
 8015a84:	4658      	mov	r0, fp
 8015a86:	e7d2      	b.n	8015a2e <_strtod_l+0x1f6>
 8015a88:	2b08      	cmp	r3, #8
 8015a8a:	f103 0301 	add.w	r3, r3, #1
 8015a8e:	dc03      	bgt.n	8015a98 <_strtod_l+0x260>
 8015a90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015a92:	434f      	muls	r7, r1
 8015a94:	9709      	str	r7, [sp, #36]	; 0x24
 8015a96:	e7e1      	b.n	8015a5c <_strtod_l+0x224>
 8015a98:	2b10      	cmp	r3, #16
 8015a9a:	bfd8      	it	le
 8015a9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8015aa0:	e7dc      	b.n	8015a5c <_strtod_l+0x224>
 8015aa2:	2e10      	cmp	r6, #16
 8015aa4:	bfdc      	itt	le
 8015aa6:	230a      	movle	r3, #10
 8015aa8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8015aac:	e7e3      	b.n	8015a76 <_strtod_l+0x23e>
 8015aae:	2300      	movs	r3, #0
 8015ab0:	9305      	str	r3, [sp, #20]
 8015ab2:	2301      	movs	r3, #1
 8015ab4:	e780      	b.n	80159b8 <_strtod_l+0x180>
 8015ab6:	f04f 0c00 	mov.w	ip, #0
 8015aba:	1caa      	adds	r2, r5, #2
 8015abc:	9215      	str	r2, [sp, #84]	; 0x54
 8015abe:	78aa      	ldrb	r2, [r5, #2]
 8015ac0:	e788      	b.n	80159d4 <_strtod_l+0x19c>
 8015ac2:	f04f 0c01 	mov.w	ip, #1
 8015ac6:	e7f8      	b.n	8015aba <_strtod_l+0x282>
 8015ac8:	08018e54 	.word	0x08018e54
 8015acc:	08018e44 	.word	0x08018e44
 8015ad0:	7ff00000 	.word	0x7ff00000
 8015ad4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015ad6:	1c51      	adds	r1, r2, #1
 8015ad8:	9115      	str	r1, [sp, #84]	; 0x54
 8015ada:	7852      	ldrb	r2, [r2, #1]
 8015adc:	2a30      	cmp	r2, #48	; 0x30
 8015ade:	d0f9      	beq.n	8015ad4 <_strtod_l+0x29c>
 8015ae0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8015ae4:	2908      	cmp	r1, #8
 8015ae6:	f63f af7a 	bhi.w	80159de <_strtod_l+0x1a6>
 8015aea:	3a30      	subs	r2, #48	; 0x30
 8015aec:	9208      	str	r2, [sp, #32]
 8015aee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015af0:	920c      	str	r2, [sp, #48]	; 0x30
 8015af2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015af4:	1c57      	adds	r7, r2, #1
 8015af6:	9715      	str	r7, [sp, #84]	; 0x54
 8015af8:	7852      	ldrb	r2, [r2, #1]
 8015afa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015afe:	f1be 0f09 	cmp.w	lr, #9
 8015b02:	d938      	bls.n	8015b76 <_strtod_l+0x33e>
 8015b04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015b06:	1a7f      	subs	r7, r7, r1
 8015b08:	2f08      	cmp	r7, #8
 8015b0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015b0e:	dc03      	bgt.n	8015b18 <_strtod_l+0x2e0>
 8015b10:	9908      	ldr	r1, [sp, #32]
 8015b12:	428f      	cmp	r7, r1
 8015b14:	bfa8      	it	ge
 8015b16:	460f      	movge	r7, r1
 8015b18:	f1bc 0f00 	cmp.w	ip, #0
 8015b1c:	d000      	beq.n	8015b20 <_strtod_l+0x2e8>
 8015b1e:	427f      	negs	r7, r7
 8015b20:	2e00      	cmp	r6, #0
 8015b22:	d14f      	bne.n	8015bc4 <_strtod_l+0x38c>
 8015b24:	9904      	ldr	r1, [sp, #16]
 8015b26:	4301      	orrs	r1, r0
 8015b28:	f47f aec1 	bne.w	80158ae <_strtod_l+0x76>
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	f47f aedb 	bne.w	80158e8 <_strtod_l+0xb0>
 8015b32:	2a69      	cmp	r2, #105	; 0x69
 8015b34:	d029      	beq.n	8015b8a <_strtod_l+0x352>
 8015b36:	dc26      	bgt.n	8015b86 <_strtod_l+0x34e>
 8015b38:	2a49      	cmp	r2, #73	; 0x49
 8015b3a:	d026      	beq.n	8015b8a <_strtod_l+0x352>
 8015b3c:	2a4e      	cmp	r2, #78	; 0x4e
 8015b3e:	f47f aed3 	bne.w	80158e8 <_strtod_l+0xb0>
 8015b42:	499b      	ldr	r1, [pc, #620]	; (8015db0 <_strtod_l+0x578>)
 8015b44:	a815      	add	r0, sp, #84	; 0x54
 8015b46:	f001 fa2d 	bl	8016fa4 <__match>
 8015b4a:	2800      	cmp	r0, #0
 8015b4c:	f43f aecc 	beq.w	80158e8 <_strtod_l+0xb0>
 8015b50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b52:	781b      	ldrb	r3, [r3, #0]
 8015b54:	2b28      	cmp	r3, #40	; 0x28
 8015b56:	d12f      	bne.n	8015bb8 <_strtod_l+0x380>
 8015b58:	4996      	ldr	r1, [pc, #600]	; (8015db4 <_strtod_l+0x57c>)
 8015b5a:	aa18      	add	r2, sp, #96	; 0x60
 8015b5c:	a815      	add	r0, sp, #84	; 0x54
 8015b5e:	f001 fa35 	bl	8016fcc <__hexnan>
 8015b62:	2805      	cmp	r0, #5
 8015b64:	d128      	bne.n	8015bb8 <_strtod_l+0x380>
 8015b66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015b68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015b6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015b70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8015b74:	e69b      	b.n	80158ae <_strtod_l+0x76>
 8015b76:	9f08      	ldr	r7, [sp, #32]
 8015b78:	210a      	movs	r1, #10
 8015b7a:	fb01 2107 	mla	r1, r1, r7, r2
 8015b7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015b82:	9208      	str	r2, [sp, #32]
 8015b84:	e7b5      	b.n	8015af2 <_strtod_l+0x2ba>
 8015b86:	2a6e      	cmp	r2, #110	; 0x6e
 8015b88:	e7d9      	b.n	8015b3e <_strtod_l+0x306>
 8015b8a:	498b      	ldr	r1, [pc, #556]	; (8015db8 <_strtod_l+0x580>)
 8015b8c:	a815      	add	r0, sp, #84	; 0x54
 8015b8e:	f001 fa09 	bl	8016fa4 <__match>
 8015b92:	2800      	cmp	r0, #0
 8015b94:	f43f aea8 	beq.w	80158e8 <_strtod_l+0xb0>
 8015b98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b9a:	4988      	ldr	r1, [pc, #544]	; (8015dbc <_strtod_l+0x584>)
 8015b9c:	3b01      	subs	r3, #1
 8015b9e:	a815      	add	r0, sp, #84	; 0x54
 8015ba0:	9315      	str	r3, [sp, #84]	; 0x54
 8015ba2:	f001 f9ff 	bl	8016fa4 <__match>
 8015ba6:	b910      	cbnz	r0, 8015bae <_strtod_l+0x376>
 8015ba8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015baa:	3301      	adds	r3, #1
 8015bac:	9315      	str	r3, [sp, #84]	; 0x54
 8015bae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8015dcc <_strtod_l+0x594>
 8015bb2:	f04f 0800 	mov.w	r8, #0
 8015bb6:	e67a      	b.n	80158ae <_strtod_l+0x76>
 8015bb8:	4881      	ldr	r0, [pc, #516]	; (8015dc0 <_strtod_l+0x588>)
 8015bba:	f000 fef1 	bl	80169a0 <nan>
 8015bbe:	ec59 8b10 	vmov	r8, r9, d0
 8015bc2:	e674      	b.n	80158ae <_strtod_l+0x76>
 8015bc4:	9b05      	ldr	r3, [sp, #20]
 8015bc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015bc8:	1afb      	subs	r3, r7, r3
 8015bca:	f1bb 0f00 	cmp.w	fp, #0
 8015bce:	bf08      	it	eq
 8015bd0:	46b3      	moveq	fp, r6
 8015bd2:	2e10      	cmp	r6, #16
 8015bd4:	9308      	str	r3, [sp, #32]
 8015bd6:	4635      	mov	r5, r6
 8015bd8:	bfa8      	it	ge
 8015bda:	2510      	movge	r5, #16
 8015bdc:	f7f2 f8c2 	bl	8007d64 <__aeabi_ui2d>
 8015be0:	2e09      	cmp	r6, #9
 8015be2:	4680      	mov	r8, r0
 8015be4:	4689      	mov	r9, r1
 8015be6:	dd13      	ble.n	8015c10 <_strtod_l+0x3d8>
 8015be8:	4b76      	ldr	r3, [pc, #472]	; (8015dc4 <_strtod_l+0x58c>)
 8015bea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015bee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015bf2:	f7f2 f931 	bl	8007e58 <__aeabi_dmul>
 8015bf6:	4680      	mov	r8, r0
 8015bf8:	4650      	mov	r0, sl
 8015bfa:	4689      	mov	r9, r1
 8015bfc:	f7f2 f8b2 	bl	8007d64 <__aeabi_ui2d>
 8015c00:	4602      	mov	r2, r0
 8015c02:	460b      	mov	r3, r1
 8015c04:	4640      	mov	r0, r8
 8015c06:	4649      	mov	r1, r9
 8015c08:	f7f1 ff70 	bl	8007aec <__adddf3>
 8015c0c:	4680      	mov	r8, r0
 8015c0e:	4689      	mov	r9, r1
 8015c10:	2e0f      	cmp	r6, #15
 8015c12:	dc38      	bgt.n	8015c86 <_strtod_l+0x44e>
 8015c14:	9b08      	ldr	r3, [sp, #32]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	f43f ae49 	beq.w	80158ae <_strtod_l+0x76>
 8015c1c:	dd24      	ble.n	8015c68 <_strtod_l+0x430>
 8015c1e:	2b16      	cmp	r3, #22
 8015c20:	dc0b      	bgt.n	8015c3a <_strtod_l+0x402>
 8015c22:	4968      	ldr	r1, [pc, #416]	; (8015dc4 <_strtod_l+0x58c>)
 8015c24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c2c:	4642      	mov	r2, r8
 8015c2e:	464b      	mov	r3, r9
 8015c30:	f7f2 f912 	bl	8007e58 <__aeabi_dmul>
 8015c34:	4680      	mov	r8, r0
 8015c36:	4689      	mov	r9, r1
 8015c38:	e639      	b.n	80158ae <_strtod_l+0x76>
 8015c3a:	9a08      	ldr	r2, [sp, #32]
 8015c3c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8015c40:	4293      	cmp	r3, r2
 8015c42:	db20      	blt.n	8015c86 <_strtod_l+0x44e>
 8015c44:	4c5f      	ldr	r4, [pc, #380]	; (8015dc4 <_strtod_l+0x58c>)
 8015c46:	f1c6 060f 	rsb	r6, r6, #15
 8015c4a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8015c4e:	4642      	mov	r2, r8
 8015c50:	464b      	mov	r3, r9
 8015c52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c56:	f7f2 f8ff 	bl	8007e58 <__aeabi_dmul>
 8015c5a:	9b08      	ldr	r3, [sp, #32]
 8015c5c:	1b9e      	subs	r6, r3, r6
 8015c5e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8015c62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015c66:	e7e3      	b.n	8015c30 <_strtod_l+0x3f8>
 8015c68:	9b08      	ldr	r3, [sp, #32]
 8015c6a:	3316      	adds	r3, #22
 8015c6c:	db0b      	blt.n	8015c86 <_strtod_l+0x44e>
 8015c6e:	9b05      	ldr	r3, [sp, #20]
 8015c70:	1bdf      	subs	r7, r3, r7
 8015c72:	4b54      	ldr	r3, [pc, #336]	; (8015dc4 <_strtod_l+0x58c>)
 8015c74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8015c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015c7c:	4640      	mov	r0, r8
 8015c7e:	4649      	mov	r1, r9
 8015c80:	f7f2 fa14 	bl	80080ac <__aeabi_ddiv>
 8015c84:	e7d6      	b.n	8015c34 <_strtod_l+0x3fc>
 8015c86:	9b08      	ldr	r3, [sp, #32]
 8015c88:	1b75      	subs	r5, r6, r5
 8015c8a:	441d      	add	r5, r3
 8015c8c:	2d00      	cmp	r5, #0
 8015c8e:	dd70      	ble.n	8015d72 <_strtod_l+0x53a>
 8015c90:	f015 030f 	ands.w	r3, r5, #15
 8015c94:	d00a      	beq.n	8015cac <_strtod_l+0x474>
 8015c96:	494b      	ldr	r1, [pc, #300]	; (8015dc4 <_strtod_l+0x58c>)
 8015c98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015c9c:	4642      	mov	r2, r8
 8015c9e:	464b      	mov	r3, r9
 8015ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ca4:	f7f2 f8d8 	bl	8007e58 <__aeabi_dmul>
 8015ca8:	4680      	mov	r8, r0
 8015caa:	4689      	mov	r9, r1
 8015cac:	f035 050f 	bics.w	r5, r5, #15
 8015cb0:	d04d      	beq.n	8015d4e <_strtod_l+0x516>
 8015cb2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8015cb6:	dd22      	ble.n	8015cfe <_strtod_l+0x4c6>
 8015cb8:	2500      	movs	r5, #0
 8015cba:	46ab      	mov	fp, r5
 8015cbc:	9509      	str	r5, [sp, #36]	; 0x24
 8015cbe:	9505      	str	r5, [sp, #20]
 8015cc0:	2322      	movs	r3, #34	; 0x22
 8015cc2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8015dcc <_strtod_l+0x594>
 8015cc6:	6023      	str	r3, [r4, #0]
 8015cc8:	f04f 0800 	mov.w	r8, #0
 8015ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	f43f aded 	beq.w	80158ae <_strtod_l+0x76>
 8015cd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015cd6:	4620      	mov	r0, r4
 8015cd8:	f001 fb12 	bl	8017300 <_Bfree>
 8015cdc:	9905      	ldr	r1, [sp, #20]
 8015cde:	4620      	mov	r0, r4
 8015ce0:	f001 fb0e 	bl	8017300 <_Bfree>
 8015ce4:	4659      	mov	r1, fp
 8015ce6:	4620      	mov	r0, r4
 8015ce8:	f001 fb0a 	bl	8017300 <_Bfree>
 8015cec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015cee:	4620      	mov	r0, r4
 8015cf0:	f001 fb06 	bl	8017300 <_Bfree>
 8015cf4:	4629      	mov	r1, r5
 8015cf6:	4620      	mov	r0, r4
 8015cf8:	f001 fb02 	bl	8017300 <_Bfree>
 8015cfc:	e5d7      	b.n	80158ae <_strtod_l+0x76>
 8015cfe:	4b32      	ldr	r3, [pc, #200]	; (8015dc8 <_strtod_l+0x590>)
 8015d00:	9304      	str	r3, [sp, #16]
 8015d02:	2300      	movs	r3, #0
 8015d04:	112d      	asrs	r5, r5, #4
 8015d06:	4640      	mov	r0, r8
 8015d08:	4649      	mov	r1, r9
 8015d0a:	469a      	mov	sl, r3
 8015d0c:	2d01      	cmp	r5, #1
 8015d0e:	dc21      	bgt.n	8015d54 <_strtod_l+0x51c>
 8015d10:	b10b      	cbz	r3, 8015d16 <_strtod_l+0x4de>
 8015d12:	4680      	mov	r8, r0
 8015d14:	4689      	mov	r9, r1
 8015d16:	492c      	ldr	r1, [pc, #176]	; (8015dc8 <_strtod_l+0x590>)
 8015d18:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8015d1c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015d20:	4642      	mov	r2, r8
 8015d22:	464b      	mov	r3, r9
 8015d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d28:	f7f2 f896 	bl	8007e58 <__aeabi_dmul>
 8015d2c:	4b27      	ldr	r3, [pc, #156]	; (8015dcc <_strtod_l+0x594>)
 8015d2e:	460a      	mov	r2, r1
 8015d30:	400b      	ands	r3, r1
 8015d32:	4927      	ldr	r1, [pc, #156]	; (8015dd0 <_strtod_l+0x598>)
 8015d34:	428b      	cmp	r3, r1
 8015d36:	4680      	mov	r8, r0
 8015d38:	d8be      	bhi.n	8015cb8 <_strtod_l+0x480>
 8015d3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015d3e:	428b      	cmp	r3, r1
 8015d40:	bf86      	itte	hi
 8015d42:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8015dd4 <_strtod_l+0x59c>
 8015d46:	f04f 38ff 	movhi.w	r8, #4294967295
 8015d4a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8015d4e:	2300      	movs	r3, #0
 8015d50:	9304      	str	r3, [sp, #16]
 8015d52:	e07b      	b.n	8015e4c <_strtod_l+0x614>
 8015d54:	07ea      	lsls	r2, r5, #31
 8015d56:	d505      	bpl.n	8015d64 <_strtod_l+0x52c>
 8015d58:	9b04      	ldr	r3, [sp, #16]
 8015d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d5e:	f7f2 f87b 	bl	8007e58 <__aeabi_dmul>
 8015d62:	2301      	movs	r3, #1
 8015d64:	9a04      	ldr	r2, [sp, #16]
 8015d66:	3208      	adds	r2, #8
 8015d68:	f10a 0a01 	add.w	sl, sl, #1
 8015d6c:	106d      	asrs	r5, r5, #1
 8015d6e:	9204      	str	r2, [sp, #16]
 8015d70:	e7cc      	b.n	8015d0c <_strtod_l+0x4d4>
 8015d72:	d0ec      	beq.n	8015d4e <_strtod_l+0x516>
 8015d74:	426d      	negs	r5, r5
 8015d76:	f015 020f 	ands.w	r2, r5, #15
 8015d7a:	d00a      	beq.n	8015d92 <_strtod_l+0x55a>
 8015d7c:	4b11      	ldr	r3, [pc, #68]	; (8015dc4 <_strtod_l+0x58c>)
 8015d7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015d82:	4640      	mov	r0, r8
 8015d84:	4649      	mov	r1, r9
 8015d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d8a:	f7f2 f98f 	bl	80080ac <__aeabi_ddiv>
 8015d8e:	4680      	mov	r8, r0
 8015d90:	4689      	mov	r9, r1
 8015d92:	112d      	asrs	r5, r5, #4
 8015d94:	d0db      	beq.n	8015d4e <_strtod_l+0x516>
 8015d96:	2d1f      	cmp	r5, #31
 8015d98:	dd1e      	ble.n	8015dd8 <_strtod_l+0x5a0>
 8015d9a:	2500      	movs	r5, #0
 8015d9c:	46ab      	mov	fp, r5
 8015d9e:	9509      	str	r5, [sp, #36]	; 0x24
 8015da0:	9505      	str	r5, [sp, #20]
 8015da2:	2322      	movs	r3, #34	; 0x22
 8015da4:	f04f 0800 	mov.w	r8, #0
 8015da8:	f04f 0900 	mov.w	r9, #0
 8015dac:	6023      	str	r3, [r4, #0]
 8015dae:	e78d      	b.n	8015ccc <_strtod_l+0x494>
 8015db0:	08018e4f 	.word	0x08018e4f
 8015db4:	08018e68 	.word	0x08018e68
 8015db8:	08018e46 	.word	0x08018e46
 8015dbc:	08018e49 	.word	0x08018e49
 8015dc0:	08019202 	.word	0x08019202
 8015dc4:	080190c0 	.word	0x080190c0
 8015dc8:	08019098 	.word	0x08019098
 8015dcc:	7ff00000 	.word	0x7ff00000
 8015dd0:	7ca00000 	.word	0x7ca00000
 8015dd4:	7fefffff 	.word	0x7fefffff
 8015dd8:	f015 0310 	ands.w	r3, r5, #16
 8015ddc:	bf18      	it	ne
 8015dde:	236a      	movne	r3, #106	; 0x6a
 8015de0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8016184 <_strtod_l+0x94c>
 8015de4:	9304      	str	r3, [sp, #16]
 8015de6:	4640      	mov	r0, r8
 8015de8:	4649      	mov	r1, r9
 8015dea:	2300      	movs	r3, #0
 8015dec:	07ea      	lsls	r2, r5, #31
 8015dee:	d504      	bpl.n	8015dfa <_strtod_l+0x5c2>
 8015df0:	e9da 2300 	ldrd	r2, r3, [sl]
 8015df4:	f7f2 f830 	bl	8007e58 <__aeabi_dmul>
 8015df8:	2301      	movs	r3, #1
 8015dfa:	106d      	asrs	r5, r5, #1
 8015dfc:	f10a 0a08 	add.w	sl, sl, #8
 8015e00:	d1f4      	bne.n	8015dec <_strtod_l+0x5b4>
 8015e02:	b10b      	cbz	r3, 8015e08 <_strtod_l+0x5d0>
 8015e04:	4680      	mov	r8, r0
 8015e06:	4689      	mov	r9, r1
 8015e08:	9b04      	ldr	r3, [sp, #16]
 8015e0a:	b1bb      	cbz	r3, 8015e3c <_strtod_l+0x604>
 8015e0c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8015e10:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	4649      	mov	r1, r9
 8015e18:	dd10      	ble.n	8015e3c <_strtod_l+0x604>
 8015e1a:	2b1f      	cmp	r3, #31
 8015e1c:	f340 811e 	ble.w	801605c <_strtod_l+0x824>
 8015e20:	2b34      	cmp	r3, #52	; 0x34
 8015e22:	bfde      	ittt	le
 8015e24:	f04f 33ff 	movle.w	r3, #4294967295
 8015e28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8015e2c:	4093      	lslle	r3, r2
 8015e2e:	f04f 0800 	mov.w	r8, #0
 8015e32:	bfcc      	ite	gt
 8015e34:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8015e38:	ea03 0901 	andle.w	r9, r3, r1
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	2300      	movs	r3, #0
 8015e40:	4640      	mov	r0, r8
 8015e42:	4649      	mov	r1, r9
 8015e44:	f7f2 fa70 	bl	8008328 <__aeabi_dcmpeq>
 8015e48:	2800      	cmp	r0, #0
 8015e4a:	d1a6      	bne.n	8015d9a <_strtod_l+0x562>
 8015e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e4e:	9300      	str	r3, [sp, #0]
 8015e50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e52:	4633      	mov	r3, r6
 8015e54:	465a      	mov	r2, fp
 8015e56:	4620      	mov	r0, r4
 8015e58:	f001 faba 	bl	80173d0 <__s2b>
 8015e5c:	9009      	str	r0, [sp, #36]	; 0x24
 8015e5e:	2800      	cmp	r0, #0
 8015e60:	f43f af2a 	beq.w	8015cb8 <_strtod_l+0x480>
 8015e64:	9a08      	ldr	r2, [sp, #32]
 8015e66:	9b05      	ldr	r3, [sp, #20]
 8015e68:	2a00      	cmp	r2, #0
 8015e6a:	eba3 0307 	sub.w	r3, r3, r7
 8015e6e:	bfa8      	it	ge
 8015e70:	2300      	movge	r3, #0
 8015e72:	930c      	str	r3, [sp, #48]	; 0x30
 8015e74:	2500      	movs	r5, #0
 8015e76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015e7a:	9312      	str	r3, [sp, #72]	; 0x48
 8015e7c:	46ab      	mov	fp, r5
 8015e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e80:	4620      	mov	r0, r4
 8015e82:	6859      	ldr	r1, [r3, #4]
 8015e84:	f001 f9fc 	bl	8017280 <_Balloc>
 8015e88:	9005      	str	r0, [sp, #20]
 8015e8a:	2800      	cmp	r0, #0
 8015e8c:	f43f af18 	beq.w	8015cc0 <_strtod_l+0x488>
 8015e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e92:	691a      	ldr	r2, [r3, #16]
 8015e94:	3202      	adds	r2, #2
 8015e96:	f103 010c 	add.w	r1, r3, #12
 8015e9a:	0092      	lsls	r2, r2, #2
 8015e9c:	300c      	adds	r0, #12
 8015e9e:	f000 fd70 	bl	8016982 <memcpy>
 8015ea2:	ec49 8b10 	vmov	d0, r8, r9
 8015ea6:	aa18      	add	r2, sp, #96	; 0x60
 8015ea8:	a917      	add	r1, sp, #92	; 0x5c
 8015eaa:	4620      	mov	r0, r4
 8015eac:	f001 fdc4 	bl	8017a38 <__d2b>
 8015eb0:	ec49 8b18 	vmov	d8, r8, r9
 8015eb4:	9016      	str	r0, [sp, #88]	; 0x58
 8015eb6:	2800      	cmp	r0, #0
 8015eb8:	f43f af02 	beq.w	8015cc0 <_strtod_l+0x488>
 8015ebc:	2101      	movs	r1, #1
 8015ebe:	4620      	mov	r0, r4
 8015ec0:	f001 fb1e 	bl	8017500 <__i2b>
 8015ec4:	4683      	mov	fp, r0
 8015ec6:	2800      	cmp	r0, #0
 8015ec8:	f43f aefa 	beq.w	8015cc0 <_strtod_l+0x488>
 8015ecc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8015ece:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015ed0:	2e00      	cmp	r6, #0
 8015ed2:	bfab      	itete	ge
 8015ed4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8015ed6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8015ed8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8015eda:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8015ede:	bfac      	ite	ge
 8015ee0:	eb06 0a03 	addge.w	sl, r6, r3
 8015ee4:	1b9f      	sublt	r7, r3, r6
 8015ee6:	9b04      	ldr	r3, [sp, #16]
 8015ee8:	1af6      	subs	r6, r6, r3
 8015eea:	4416      	add	r6, r2
 8015eec:	4ba0      	ldr	r3, [pc, #640]	; (8016170 <_strtod_l+0x938>)
 8015eee:	3e01      	subs	r6, #1
 8015ef0:	429e      	cmp	r6, r3
 8015ef2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015ef6:	f280 80c4 	bge.w	8016082 <_strtod_l+0x84a>
 8015efa:	1b9b      	subs	r3, r3, r6
 8015efc:	2b1f      	cmp	r3, #31
 8015efe:	eba2 0203 	sub.w	r2, r2, r3
 8015f02:	f04f 0101 	mov.w	r1, #1
 8015f06:	f300 80b0 	bgt.w	801606a <_strtod_l+0x832>
 8015f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8015f0e:	930e      	str	r3, [sp, #56]	; 0x38
 8015f10:	2300      	movs	r3, #0
 8015f12:	930d      	str	r3, [sp, #52]	; 0x34
 8015f14:	eb0a 0602 	add.w	r6, sl, r2
 8015f18:	9b04      	ldr	r3, [sp, #16]
 8015f1a:	45b2      	cmp	sl, r6
 8015f1c:	4417      	add	r7, r2
 8015f1e:	441f      	add	r7, r3
 8015f20:	4653      	mov	r3, sl
 8015f22:	bfa8      	it	ge
 8015f24:	4633      	movge	r3, r6
 8015f26:	42bb      	cmp	r3, r7
 8015f28:	bfa8      	it	ge
 8015f2a:	463b      	movge	r3, r7
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	bfc2      	ittt	gt
 8015f30:	1af6      	subgt	r6, r6, r3
 8015f32:	1aff      	subgt	r7, r7, r3
 8015f34:	ebaa 0a03 	subgt.w	sl, sl, r3
 8015f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	dd17      	ble.n	8015f6e <_strtod_l+0x736>
 8015f3e:	4659      	mov	r1, fp
 8015f40:	461a      	mov	r2, r3
 8015f42:	4620      	mov	r0, r4
 8015f44:	f001 fb9c 	bl	8017680 <__pow5mult>
 8015f48:	4683      	mov	fp, r0
 8015f4a:	2800      	cmp	r0, #0
 8015f4c:	f43f aeb8 	beq.w	8015cc0 <_strtod_l+0x488>
 8015f50:	4601      	mov	r1, r0
 8015f52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015f54:	4620      	mov	r0, r4
 8015f56:	f001 fae9 	bl	801752c <__multiply>
 8015f5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8015f5c:	2800      	cmp	r0, #0
 8015f5e:	f43f aeaf 	beq.w	8015cc0 <_strtod_l+0x488>
 8015f62:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015f64:	4620      	mov	r0, r4
 8015f66:	f001 f9cb 	bl	8017300 <_Bfree>
 8015f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f6c:	9316      	str	r3, [sp, #88]	; 0x58
 8015f6e:	2e00      	cmp	r6, #0
 8015f70:	f300 808c 	bgt.w	801608c <_strtod_l+0x854>
 8015f74:	9b08      	ldr	r3, [sp, #32]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	dd08      	ble.n	8015f8c <_strtod_l+0x754>
 8015f7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015f7c:	9905      	ldr	r1, [sp, #20]
 8015f7e:	4620      	mov	r0, r4
 8015f80:	f001 fb7e 	bl	8017680 <__pow5mult>
 8015f84:	9005      	str	r0, [sp, #20]
 8015f86:	2800      	cmp	r0, #0
 8015f88:	f43f ae9a 	beq.w	8015cc0 <_strtod_l+0x488>
 8015f8c:	2f00      	cmp	r7, #0
 8015f8e:	dd08      	ble.n	8015fa2 <_strtod_l+0x76a>
 8015f90:	9905      	ldr	r1, [sp, #20]
 8015f92:	463a      	mov	r2, r7
 8015f94:	4620      	mov	r0, r4
 8015f96:	f001 fbcd 	bl	8017734 <__lshift>
 8015f9a:	9005      	str	r0, [sp, #20]
 8015f9c:	2800      	cmp	r0, #0
 8015f9e:	f43f ae8f 	beq.w	8015cc0 <_strtod_l+0x488>
 8015fa2:	f1ba 0f00 	cmp.w	sl, #0
 8015fa6:	dd08      	ble.n	8015fba <_strtod_l+0x782>
 8015fa8:	4659      	mov	r1, fp
 8015faa:	4652      	mov	r2, sl
 8015fac:	4620      	mov	r0, r4
 8015fae:	f001 fbc1 	bl	8017734 <__lshift>
 8015fb2:	4683      	mov	fp, r0
 8015fb4:	2800      	cmp	r0, #0
 8015fb6:	f43f ae83 	beq.w	8015cc0 <_strtod_l+0x488>
 8015fba:	9a05      	ldr	r2, [sp, #20]
 8015fbc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015fbe:	4620      	mov	r0, r4
 8015fc0:	f001 fc40 	bl	8017844 <__mdiff>
 8015fc4:	4605      	mov	r5, r0
 8015fc6:	2800      	cmp	r0, #0
 8015fc8:	f43f ae7a 	beq.w	8015cc0 <_strtod_l+0x488>
 8015fcc:	68c3      	ldr	r3, [r0, #12]
 8015fce:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	60c3      	str	r3, [r0, #12]
 8015fd4:	4659      	mov	r1, fp
 8015fd6:	f001 fc19 	bl	801780c <__mcmp>
 8015fda:	2800      	cmp	r0, #0
 8015fdc:	da60      	bge.n	80160a0 <_strtod_l+0x868>
 8015fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fe0:	ea53 0308 	orrs.w	r3, r3, r8
 8015fe4:	f040 8084 	bne.w	80160f0 <_strtod_l+0x8b8>
 8015fe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d17f      	bne.n	80160f0 <_strtod_l+0x8b8>
 8015ff0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015ff4:	0d1b      	lsrs	r3, r3, #20
 8015ff6:	051b      	lsls	r3, r3, #20
 8015ff8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015ffc:	d978      	bls.n	80160f0 <_strtod_l+0x8b8>
 8015ffe:	696b      	ldr	r3, [r5, #20]
 8016000:	b913      	cbnz	r3, 8016008 <_strtod_l+0x7d0>
 8016002:	692b      	ldr	r3, [r5, #16]
 8016004:	2b01      	cmp	r3, #1
 8016006:	dd73      	ble.n	80160f0 <_strtod_l+0x8b8>
 8016008:	4629      	mov	r1, r5
 801600a:	2201      	movs	r2, #1
 801600c:	4620      	mov	r0, r4
 801600e:	f001 fb91 	bl	8017734 <__lshift>
 8016012:	4659      	mov	r1, fp
 8016014:	4605      	mov	r5, r0
 8016016:	f001 fbf9 	bl	801780c <__mcmp>
 801601a:	2800      	cmp	r0, #0
 801601c:	dd68      	ble.n	80160f0 <_strtod_l+0x8b8>
 801601e:	9904      	ldr	r1, [sp, #16]
 8016020:	4a54      	ldr	r2, [pc, #336]	; (8016174 <_strtod_l+0x93c>)
 8016022:	464b      	mov	r3, r9
 8016024:	2900      	cmp	r1, #0
 8016026:	f000 8084 	beq.w	8016132 <_strtod_l+0x8fa>
 801602a:	ea02 0109 	and.w	r1, r2, r9
 801602e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016032:	dc7e      	bgt.n	8016132 <_strtod_l+0x8fa>
 8016034:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016038:	f77f aeb3 	ble.w	8015da2 <_strtod_l+0x56a>
 801603c:	4b4e      	ldr	r3, [pc, #312]	; (8016178 <_strtod_l+0x940>)
 801603e:	4640      	mov	r0, r8
 8016040:	4649      	mov	r1, r9
 8016042:	2200      	movs	r2, #0
 8016044:	f7f1 ff08 	bl	8007e58 <__aeabi_dmul>
 8016048:	4b4a      	ldr	r3, [pc, #296]	; (8016174 <_strtod_l+0x93c>)
 801604a:	400b      	ands	r3, r1
 801604c:	4680      	mov	r8, r0
 801604e:	4689      	mov	r9, r1
 8016050:	2b00      	cmp	r3, #0
 8016052:	f47f ae3f 	bne.w	8015cd4 <_strtod_l+0x49c>
 8016056:	2322      	movs	r3, #34	; 0x22
 8016058:	6023      	str	r3, [r4, #0]
 801605a:	e63b      	b.n	8015cd4 <_strtod_l+0x49c>
 801605c:	f04f 32ff 	mov.w	r2, #4294967295
 8016060:	fa02 f303 	lsl.w	r3, r2, r3
 8016064:	ea03 0808 	and.w	r8, r3, r8
 8016068:	e6e8      	b.n	8015e3c <_strtod_l+0x604>
 801606a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801606e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016072:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016076:	36e2      	adds	r6, #226	; 0xe2
 8016078:	fa01 f306 	lsl.w	r3, r1, r6
 801607c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8016080:	e748      	b.n	8015f14 <_strtod_l+0x6dc>
 8016082:	2100      	movs	r1, #0
 8016084:	2301      	movs	r3, #1
 8016086:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801608a:	e743      	b.n	8015f14 <_strtod_l+0x6dc>
 801608c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801608e:	4632      	mov	r2, r6
 8016090:	4620      	mov	r0, r4
 8016092:	f001 fb4f 	bl	8017734 <__lshift>
 8016096:	9016      	str	r0, [sp, #88]	; 0x58
 8016098:	2800      	cmp	r0, #0
 801609a:	f47f af6b 	bne.w	8015f74 <_strtod_l+0x73c>
 801609e:	e60f      	b.n	8015cc0 <_strtod_l+0x488>
 80160a0:	46ca      	mov	sl, r9
 80160a2:	d171      	bne.n	8016188 <_strtod_l+0x950>
 80160a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80160a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80160aa:	b352      	cbz	r2, 8016102 <_strtod_l+0x8ca>
 80160ac:	4a33      	ldr	r2, [pc, #204]	; (801617c <_strtod_l+0x944>)
 80160ae:	4293      	cmp	r3, r2
 80160b0:	d12a      	bne.n	8016108 <_strtod_l+0x8d0>
 80160b2:	9b04      	ldr	r3, [sp, #16]
 80160b4:	4641      	mov	r1, r8
 80160b6:	b1fb      	cbz	r3, 80160f8 <_strtod_l+0x8c0>
 80160b8:	4b2e      	ldr	r3, [pc, #184]	; (8016174 <_strtod_l+0x93c>)
 80160ba:	ea09 0303 	and.w	r3, r9, r3
 80160be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80160c2:	f04f 32ff 	mov.w	r2, #4294967295
 80160c6:	d81a      	bhi.n	80160fe <_strtod_l+0x8c6>
 80160c8:	0d1b      	lsrs	r3, r3, #20
 80160ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80160ce:	fa02 f303 	lsl.w	r3, r2, r3
 80160d2:	4299      	cmp	r1, r3
 80160d4:	d118      	bne.n	8016108 <_strtod_l+0x8d0>
 80160d6:	4b2a      	ldr	r3, [pc, #168]	; (8016180 <_strtod_l+0x948>)
 80160d8:	459a      	cmp	sl, r3
 80160da:	d102      	bne.n	80160e2 <_strtod_l+0x8aa>
 80160dc:	3101      	adds	r1, #1
 80160de:	f43f adef 	beq.w	8015cc0 <_strtod_l+0x488>
 80160e2:	4b24      	ldr	r3, [pc, #144]	; (8016174 <_strtod_l+0x93c>)
 80160e4:	ea0a 0303 	and.w	r3, sl, r3
 80160e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80160ec:	f04f 0800 	mov.w	r8, #0
 80160f0:	9b04      	ldr	r3, [sp, #16]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d1a2      	bne.n	801603c <_strtod_l+0x804>
 80160f6:	e5ed      	b.n	8015cd4 <_strtod_l+0x49c>
 80160f8:	f04f 33ff 	mov.w	r3, #4294967295
 80160fc:	e7e9      	b.n	80160d2 <_strtod_l+0x89a>
 80160fe:	4613      	mov	r3, r2
 8016100:	e7e7      	b.n	80160d2 <_strtod_l+0x89a>
 8016102:	ea53 0308 	orrs.w	r3, r3, r8
 8016106:	d08a      	beq.n	801601e <_strtod_l+0x7e6>
 8016108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801610a:	b1e3      	cbz	r3, 8016146 <_strtod_l+0x90e>
 801610c:	ea13 0f0a 	tst.w	r3, sl
 8016110:	d0ee      	beq.n	80160f0 <_strtod_l+0x8b8>
 8016112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016114:	9a04      	ldr	r2, [sp, #16]
 8016116:	4640      	mov	r0, r8
 8016118:	4649      	mov	r1, r9
 801611a:	b1c3      	cbz	r3, 801614e <_strtod_l+0x916>
 801611c:	f7ff fb6d 	bl	80157fa <sulp>
 8016120:	4602      	mov	r2, r0
 8016122:	460b      	mov	r3, r1
 8016124:	ec51 0b18 	vmov	r0, r1, d8
 8016128:	f7f1 fce0 	bl	8007aec <__adddf3>
 801612c:	4680      	mov	r8, r0
 801612e:	4689      	mov	r9, r1
 8016130:	e7de      	b.n	80160f0 <_strtod_l+0x8b8>
 8016132:	4013      	ands	r3, r2
 8016134:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016138:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801613c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016140:	f04f 38ff 	mov.w	r8, #4294967295
 8016144:	e7d4      	b.n	80160f0 <_strtod_l+0x8b8>
 8016146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016148:	ea13 0f08 	tst.w	r3, r8
 801614c:	e7e0      	b.n	8016110 <_strtod_l+0x8d8>
 801614e:	f7ff fb54 	bl	80157fa <sulp>
 8016152:	4602      	mov	r2, r0
 8016154:	460b      	mov	r3, r1
 8016156:	ec51 0b18 	vmov	r0, r1, d8
 801615a:	f7f1 fcc5 	bl	8007ae8 <__aeabi_dsub>
 801615e:	2200      	movs	r2, #0
 8016160:	2300      	movs	r3, #0
 8016162:	4680      	mov	r8, r0
 8016164:	4689      	mov	r9, r1
 8016166:	f7f2 f8df 	bl	8008328 <__aeabi_dcmpeq>
 801616a:	2800      	cmp	r0, #0
 801616c:	d0c0      	beq.n	80160f0 <_strtod_l+0x8b8>
 801616e:	e618      	b.n	8015da2 <_strtod_l+0x56a>
 8016170:	fffffc02 	.word	0xfffffc02
 8016174:	7ff00000 	.word	0x7ff00000
 8016178:	39500000 	.word	0x39500000
 801617c:	000fffff 	.word	0x000fffff
 8016180:	7fefffff 	.word	0x7fefffff
 8016184:	08018e80 	.word	0x08018e80
 8016188:	4659      	mov	r1, fp
 801618a:	4628      	mov	r0, r5
 801618c:	f001 fcae 	bl	8017aec <__ratio>
 8016190:	ec57 6b10 	vmov	r6, r7, d0
 8016194:	ee10 0a10 	vmov	r0, s0
 8016198:	2200      	movs	r2, #0
 801619a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801619e:	4639      	mov	r1, r7
 80161a0:	f7f2 f8d6 	bl	8008350 <__aeabi_dcmple>
 80161a4:	2800      	cmp	r0, #0
 80161a6:	d071      	beq.n	801628c <_strtod_l+0xa54>
 80161a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d17c      	bne.n	80162a8 <_strtod_l+0xa70>
 80161ae:	f1b8 0f00 	cmp.w	r8, #0
 80161b2:	d15a      	bne.n	801626a <_strtod_l+0xa32>
 80161b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d15d      	bne.n	8016278 <_strtod_l+0xa40>
 80161bc:	4b90      	ldr	r3, [pc, #576]	; (8016400 <_strtod_l+0xbc8>)
 80161be:	2200      	movs	r2, #0
 80161c0:	4630      	mov	r0, r6
 80161c2:	4639      	mov	r1, r7
 80161c4:	f7f2 f8ba 	bl	800833c <__aeabi_dcmplt>
 80161c8:	2800      	cmp	r0, #0
 80161ca:	d15c      	bne.n	8016286 <_strtod_l+0xa4e>
 80161cc:	4630      	mov	r0, r6
 80161ce:	4639      	mov	r1, r7
 80161d0:	4b8c      	ldr	r3, [pc, #560]	; (8016404 <_strtod_l+0xbcc>)
 80161d2:	2200      	movs	r2, #0
 80161d4:	f7f1 fe40 	bl	8007e58 <__aeabi_dmul>
 80161d8:	4606      	mov	r6, r0
 80161da:	460f      	mov	r7, r1
 80161dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80161e0:	9606      	str	r6, [sp, #24]
 80161e2:	9307      	str	r3, [sp, #28]
 80161e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80161e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80161ec:	4b86      	ldr	r3, [pc, #536]	; (8016408 <_strtod_l+0xbd0>)
 80161ee:	ea0a 0303 	and.w	r3, sl, r3
 80161f2:	930d      	str	r3, [sp, #52]	; 0x34
 80161f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80161f6:	4b85      	ldr	r3, [pc, #532]	; (801640c <_strtod_l+0xbd4>)
 80161f8:	429a      	cmp	r2, r3
 80161fa:	f040 8090 	bne.w	801631e <_strtod_l+0xae6>
 80161fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8016202:	ec49 8b10 	vmov	d0, r8, r9
 8016206:	f001 fba7 	bl	8017958 <__ulp>
 801620a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801620e:	ec51 0b10 	vmov	r0, r1, d0
 8016212:	f7f1 fe21 	bl	8007e58 <__aeabi_dmul>
 8016216:	4642      	mov	r2, r8
 8016218:	464b      	mov	r3, r9
 801621a:	f7f1 fc67 	bl	8007aec <__adddf3>
 801621e:	460b      	mov	r3, r1
 8016220:	4979      	ldr	r1, [pc, #484]	; (8016408 <_strtod_l+0xbd0>)
 8016222:	4a7b      	ldr	r2, [pc, #492]	; (8016410 <_strtod_l+0xbd8>)
 8016224:	4019      	ands	r1, r3
 8016226:	4291      	cmp	r1, r2
 8016228:	4680      	mov	r8, r0
 801622a:	d944      	bls.n	80162b6 <_strtod_l+0xa7e>
 801622c:	ee18 2a90 	vmov	r2, s17
 8016230:	4b78      	ldr	r3, [pc, #480]	; (8016414 <_strtod_l+0xbdc>)
 8016232:	429a      	cmp	r2, r3
 8016234:	d104      	bne.n	8016240 <_strtod_l+0xa08>
 8016236:	ee18 3a10 	vmov	r3, s16
 801623a:	3301      	adds	r3, #1
 801623c:	f43f ad40 	beq.w	8015cc0 <_strtod_l+0x488>
 8016240:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8016414 <_strtod_l+0xbdc>
 8016244:	f04f 38ff 	mov.w	r8, #4294967295
 8016248:	9916      	ldr	r1, [sp, #88]	; 0x58
 801624a:	4620      	mov	r0, r4
 801624c:	f001 f858 	bl	8017300 <_Bfree>
 8016250:	9905      	ldr	r1, [sp, #20]
 8016252:	4620      	mov	r0, r4
 8016254:	f001 f854 	bl	8017300 <_Bfree>
 8016258:	4659      	mov	r1, fp
 801625a:	4620      	mov	r0, r4
 801625c:	f001 f850 	bl	8017300 <_Bfree>
 8016260:	4629      	mov	r1, r5
 8016262:	4620      	mov	r0, r4
 8016264:	f001 f84c 	bl	8017300 <_Bfree>
 8016268:	e609      	b.n	8015e7e <_strtod_l+0x646>
 801626a:	f1b8 0f01 	cmp.w	r8, #1
 801626e:	d103      	bne.n	8016278 <_strtod_l+0xa40>
 8016270:	f1b9 0f00 	cmp.w	r9, #0
 8016274:	f43f ad95 	beq.w	8015da2 <_strtod_l+0x56a>
 8016278:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80163d0 <_strtod_l+0xb98>
 801627c:	4f60      	ldr	r7, [pc, #384]	; (8016400 <_strtod_l+0xbc8>)
 801627e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016282:	2600      	movs	r6, #0
 8016284:	e7ae      	b.n	80161e4 <_strtod_l+0x9ac>
 8016286:	4f5f      	ldr	r7, [pc, #380]	; (8016404 <_strtod_l+0xbcc>)
 8016288:	2600      	movs	r6, #0
 801628a:	e7a7      	b.n	80161dc <_strtod_l+0x9a4>
 801628c:	4b5d      	ldr	r3, [pc, #372]	; (8016404 <_strtod_l+0xbcc>)
 801628e:	4630      	mov	r0, r6
 8016290:	4639      	mov	r1, r7
 8016292:	2200      	movs	r2, #0
 8016294:	f7f1 fde0 	bl	8007e58 <__aeabi_dmul>
 8016298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801629a:	4606      	mov	r6, r0
 801629c:	460f      	mov	r7, r1
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d09c      	beq.n	80161dc <_strtod_l+0x9a4>
 80162a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80162a6:	e79d      	b.n	80161e4 <_strtod_l+0x9ac>
 80162a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80163d8 <_strtod_l+0xba0>
 80162ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80162b0:	ec57 6b17 	vmov	r6, r7, d7
 80162b4:	e796      	b.n	80161e4 <_strtod_l+0x9ac>
 80162b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80162ba:	9b04      	ldr	r3, [sp, #16]
 80162bc:	46ca      	mov	sl, r9
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d1c2      	bne.n	8016248 <_strtod_l+0xa10>
 80162c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80162c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80162c8:	0d1b      	lsrs	r3, r3, #20
 80162ca:	051b      	lsls	r3, r3, #20
 80162cc:	429a      	cmp	r2, r3
 80162ce:	d1bb      	bne.n	8016248 <_strtod_l+0xa10>
 80162d0:	4630      	mov	r0, r6
 80162d2:	4639      	mov	r1, r7
 80162d4:	f7f2 f8f8 	bl	80084c8 <__aeabi_d2lz>
 80162d8:	f7f1 fd90 	bl	8007dfc <__aeabi_l2d>
 80162dc:	4602      	mov	r2, r0
 80162de:	460b      	mov	r3, r1
 80162e0:	4630      	mov	r0, r6
 80162e2:	4639      	mov	r1, r7
 80162e4:	f7f1 fc00 	bl	8007ae8 <__aeabi_dsub>
 80162e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80162ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80162ee:	ea43 0308 	orr.w	r3, r3, r8
 80162f2:	4313      	orrs	r3, r2
 80162f4:	4606      	mov	r6, r0
 80162f6:	460f      	mov	r7, r1
 80162f8:	d054      	beq.n	80163a4 <_strtod_l+0xb6c>
 80162fa:	a339      	add	r3, pc, #228	; (adr r3, 80163e0 <_strtod_l+0xba8>)
 80162fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016300:	f7f2 f81c 	bl	800833c <__aeabi_dcmplt>
 8016304:	2800      	cmp	r0, #0
 8016306:	f47f ace5 	bne.w	8015cd4 <_strtod_l+0x49c>
 801630a:	a337      	add	r3, pc, #220	; (adr r3, 80163e8 <_strtod_l+0xbb0>)
 801630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016310:	4630      	mov	r0, r6
 8016312:	4639      	mov	r1, r7
 8016314:	f7f2 f830 	bl	8008378 <__aeabi_dcmpgt>
 8016318:	2800      	cmp	r0, #0
 801631a:	d095      	beq.n	8016248 <_strtod_l+0xa10>
 801631c:	e4da      	b.n	8015cd4 <_strtod_l+0x49c>
 801631e:	9b04      	ldr	r3, [sp, #16]
 8016320:	b333      	cbz	r3, 8016370 <_strtod_l+0xb38>
 8016322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016324:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016328:	d822      	bhi.n	8016370 <_strtod_l+0xb38>
 801632a:	a331      	add	r3, pc, #196	; (adr r3, 80163f0 <_strtod_l+0xbb8>)
 801632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016330:	4630      	mov	r0, r6
 8016332:	4639      	mov	r1, r7
 8016334:	f7f2 f80c 	bl	8008350 <__aeabi_dcmple>
 8016338:	b1a0      	cbz	r0, 8016364 <_strtod_l+0xb2c>
 801633a:	4639      	mov	r1, r7
 801633c:	4630      	mov	r0, r6
 801633e:	f7f2 f83b 	bl	80083b8 <__aeabi_d2uiz>
 8016342:	2801      	cmp	r0, #1
 8016344:	bf38      	it	cc
 8016346:	2001      	movcc	r0, #1
 8016348:	f7f1 fd0c 	bl	8007d64 <__aeabi_ui2d>
 801634c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801634e:	4606      	mov	r6, r0
 8016350:	460f      	mov	r7, r1
 8016352:	bb23      	cbnz	r3, 801639e <_strtod_l+0xb66>
 8016354:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016358:	9010      	str	r0, [sp, #64]	; 0x40
 801635a:	9311      	str	r3, [sp, #68]	; 0x44
 801635c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016360:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016368:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801636c:	1a9b      	subs	r3, r3, r2
 801636e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016370:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016374:	eeb0 0a48 	vmov.f32	s0, s16
 8016378:	eef0 0a68 	vmov.f32	s1, s17
 801637c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016380:	f001 faea 	bl	8017958 <__ulp>
 8016384:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016388:	ec53 2b10 	vmov	r2, r3, d0
 801638c:	f7f1 fd64 	bl	8007e58 <__aeabi_dmul>
 8016390:	ec53 2b18 	vmov	r2, r3, d8
 8016394:	f7f1 fbaa 	bl	8007aec <__adddf3>
 8016398:	4680      	mov	r8, r0
 801639a:	4689      	mov	r9, r1
 801639c:	e78d      	b.n	80162ba <_strtod_l+0xa82>
 801639e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80163a2:	e7db      	b.n	801635c <_strtod_l+0xb24>
 80163a4:	a314      	add	r3, pc, #80	; (adr r3, 80163f8 <_strtod_l+0xbc0>)
 80163a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163aa:	f7f1 ffc7 	bl	800833c <__aeabi_dcmplt>
 80163ae:	e7b3      	b.n	8016318 <_strtod_l+0xae0>
 80163b0:	2300      	movs	r3, #0
 80163b2:	930a      	str	r3, [sp, #40]	; 0x28
 80163b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80163b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163b8:	6013      	str	r3, [r2, #0]
 80163ba:	f7ff ba7c 	b.w	80158b6 <_strtod_l+0x7e>
 80163be:	2a65      	cmp	r2, #101	; 0x65
 80163c0:	f43f ab75 	beq.w	8015aae <_strtod_l+0x276>
 80163c4:	2a45      	cmp	r2, #69	; 0x45
 80163c6:	f43f ab72 	beq.w	8015aae <_strtod_l+0x276>
 80163ca:	2301      	movs	r3, #1
 80163cc:	f7ff bbaa 	b.w	8015b24 <_strtod_l+0x2ec>
 80163d0:	00000000 	.word	0x00000000
 80163d4:	bff00000 	.word	0xbff00000
 80163d8:	00000000 	.word	0x00000000
 80163dc:	3ff00000 	.word	0x3ff00000
 80163e0:	94a03595 	.word	0x94a03595
 80163e4:	3fdfffff 	.word	0x3fdfffff
 80163e8:	35afe535 	.word	0x35afe535
 80163ec:	3fe00000 	.word	0x3fe00000
 80163f0:	ffc00000 	.word	0xffc00000
 80163f4:	41dfffff 	.word	0x41dfffff
 80163f8:	94a03595 	.word	0x94a03595
 80163fc:	3fcfffff 	.word	0x3fcfffff
 8016400:	3ff00000 	.word	0x3ff00000
 8016404:	3fe00000 	.word	0x3fe00000
 8016408:	7ff00000 	.word	0x7ff00000
 801640c:	7fe00000 	.word	0x7fe00000
 8016410:	7c9fffff 	.word	0x7c9fffff
 8016414:	7fefffff 	.word	0x7fefffff

08016418 <strtof>:
 8016418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801641c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80164e0 <strtof+0xc8>
 8016420:	4b2a      	ldr	r3, [pc, #168]	; (80164cc <strtof+0xb4>)
 8016422:	460a      	mov	r2, r1
 8016424:	ed2d 8b02 	vpush	{d8}
 8016428:	4601      	mov	r1, r0
 801642a:	f8d8 0000 	ldr.w	r0, [r8]
 801642e:	f7ff fa03 	bl	8015838 <_strtod_l>
 8016432:	ec55 4b10 	vmov	r4, r5, d0
 8016436:	ee10 2a10 	vmov	r2, s0
 801643a:	ee10 0a10 	vmov	r0, s0
 801643e:	462b      	mov	r3, r5
 8016440:	4629      	mov	r1, r5
 8016442:	f7f1 ffa3 	bl	800838c <__aeabi_dcmpun>
 8016446:	b190      	cbz	r0, 801646e <strtof+0x56>
 8016448:	2d00      	cmp	r5, #0
 801644a:	4821      	ldr	r0, [pc, #132]	; (80164d0 <strtof+0xb8>)
 801644c:	da09      	bge.n	8016462 <strtof+0x4a>
 801644e:	f000 faaf 	bl	80169b0 <nanf>
 8016452:	eeb1 8a40 	vneg.f32	s16, s0
 8016456:	eeb0 0a48 	vmov.f32	s0, s16
 801645a:	ecbd 8b02 	vpop	{d8}
 801645e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016462:	ecbd 8b02 	vpop	{d8}
 8016466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801646a:	f000 baa1 	b.w	80169b0 <nanf>
 801646e:	4620      	mov	r0, r4
 8016470:	4629      	mov	r1, r5
 8016472:	f7f1 ffc1 	bl	80083f8 <__aeabi_d2f>
 8016476:	ee08 0a10 	vmov	s16, r0
 801647a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80164d4 <strtof+0xbc>
 801647e:	eeb0 7ac8 	vabs.f32	s14, s16
 8016482:	eeb4 7a67 	vcmp.f32	s14, s15
 8016486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801648a:	dd11      	ble.n	80164b0 <strtof+0x98>
 801648c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8016490:	4b11      	ldr	r3, [pc, #68]	; (80164d8 <strtof+0xc0>)
 8016492:	f04f 32ff 	mov.w	r2, #4294967295
 8016496:	4620      	mov	r0, r4
 8016498:	4639      	mov	r1, r7
 801649a:	f7f1 ff77 	bl	800838c <__aeabi_dcmpun>
 801649e:	b980      	cbnz	r0, 80164c2 <strtof+0xaa>
 80164a0:	4b0d      	ldr	r3, [pc, #52]	; (80164d8 <strtof+0xc0>)
 80164a2:	f04f 32ff 	mov.w	r2, #4294967295
 80164a6:	4620      	mov	r0, r4
 80164a8:	4639      	mov	r1, r7
 80164aa:	f7f1 ff51 	bl	8008350 <__aeabi_dcmple>
 80164ae:	b940      	cbnz	r0, 80164c2 <strtof+0xaa>
 80164b0:	ee18 3a10 	vmov	r3, s16
 80164b4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80164b8:	d1cd      	bne.n	8016456 <strtof+0x3e>
 80164ba:	4b08      	ldr	r3, [pc, #32]	; (80164dc <strtof+0xc4>)
 80164bc:	402b      	ands	r3, r5
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d0c9      	beq.n	8016456 <strtof+0x3e>
 80164c2:	f8d8 3000 	ldr.w	r3, [r8]
 80164c6:	2222      	movs	r2, #34	; 0x22
 80164c8:	601a      	str	r2, [r3, #0]
 80164ca:	e7c4      	b.n	8016456 <strtof+0x3e>
 80164cc:	200001c4 	.word	0x200001c4
 80164d0:	08019202 	.word	0x08019202
 80164d4:	7f7fffff 	.word	0x7f7fffff
 80164d8:	7fefffff 	.word	0x7fefffff
 80164dc:	7ff00000 	.word	0x7ff00000
 80164e0:	2000037c 	.word	0x2000037c

080164e4 <_strtoul_l.constprop.0>:
 80164e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80164e8:	4f36      	ldr	r7, [pc, #216]	; (80165c4 <_strtoul_l.constprop.0+0xe0>)
 80164ea:	4686      	mov	lr, r0
 80164ec:	460d      	mov	r5, r1
 80164ee:	4628      	mov	r0, r5
 80164f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80164f4:	5d3e      	ldrb	r6, [r7, r4]
 80164f6:	f016 0608 	ands.w	r6, r6, #8
 80164fa:	d1f8      	bne.n	80164ee <_strtoul_l.constprop.0+0xa>
 80164fc:	2c2d      	cmp	r4, #45	; 0x2d
 80164fe:	d130      	bne.n	8016562 <_strtoul_l.constprop.0+0x7e>
 8016500:	782c      	ldrb	r4, [r5, #0]
 8016502:	2601      	movs	r6, #1
 8016504:	1c85      	adds	r5, r0, #2
 8016506:	2b00      	cmp	r3, #0
 8016508:	d057      	beq.n	80165ba <_strtoul_l.constprop.0+0xd6>
 801650a:	2b10      	cmp	r3, #16
 801650c:	d109      	bne.n	8016522 <_strtoul_l.constprop.0+0x3e>
 801650e:	2c30      	cmp	r4, #48	; 0x30
 8016510:	d107      	bne.n	8016522 <_strtoul_l.constprop.0+0x3e>
 8016512:	7828      	ldrb	r0, [r5, #0]
 8016514:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016518:	2858      	cmp	r0, #88	; 0x58
 801651a:	d149      	bne.n	80165b0 <_strtoul_l.constprop.0+0xcc>
 801651c:	786c      	ldrb	r4, [r5, #1]
 801651e:	2310      	movs	r3, #16
 8016520:	3502      	adds	r5, #2
 8016522:	f04f 38ff 	mov.w	r8, #4294967295
 8016526:	2700      	movs	r7, #0
 8016528:	fbb8 f8f3 	udiv	r8, r8, r3
 801652c:	fb03 f908 	mul.w	r9, r3, r8
 8016530:	ea6f 0909 	mvn.w	r9, r9
 8016534:	4638      	mov	r0, r7
 8016536:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801653a:	f1bc 0f09 	cmp.w	ip, #9
 801653e:	d815      	bhi.n	801656c <_strtoul_l.constprop.0+0x88>
 8016540:	4664      	mov	r4, ip
 8016542:	42a3      	cmp	r3, r4
 8016544:	dd23      	ble.n	801658e <_strtoul_l.constprop.0+0xaa>
 8016546:	f1b7 3fff 	cmp.w	r7, #4294967295
 801654a:	d007      	beq.n	801655c <_strtoul_l.constprop.0+0x78>
 801654c:	4580      	cmp	r8, r0
 801654e:	d31b      	bcc.n	8016588 <_strtoul_l.constprop.0+0xa4>
 8016550:	d101      	bne.n	8016556 <_strtoul_l.constprop.0+0x72>
 8016552:	45a1      	cmp	r9, r4
 8016554:	db18      	blt.n	8016588 <_strtoul_l.constprop.0+0xa4>
 8016556:	fb00 4003 	mla	r0, r0, r3, r4
 801655a:	2701      	movs	r7, #1
 801655c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016560:	e7e9      	b.n	8016536 <_strtoul_l.constprop.0+0x52>
 8016562:	2c2b      	cmp	r4, #43	; 0x2b
 8016564:	bf04      	itt	eq
 8016566:	782c      	ldrbeq	r4, [r5, #0]
 8016568:	1c85      	addeq	r5, r0, #2
 801656a:	e7cc      	b.n	8016506 <_strtoul_l.constprop.0+0x22>
 801656c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016570:	f1bc 0f19 	cmp.w	ip, #25
 8016574:	d801      	bhi.n	801657a <_strtoul_l.constprop.0+0x96>
 8016576:	3c37      	subs	r4, #55	; 0x37
 8016578:	e7e3      	b.n	8016542 <_strtoul_l.constprop.0+0x5e>
 801657a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801657e:	f1bc 0f19 	cmp.w	ip, #25
 8016582:	d804      	bhi.n	801658e <_strtoul_l.constprop.0+0xaa>
 8016584:	3c57      	subs	r4, #87	; 0x57
 8016586:	e7dc      	b.n	8016542 <_strtoul_l.constprop.0+0x5e>
 8016588:	f04f 37ff 	mov.w	r7, #4294967295
 801658c:	e7e6      	b.n	801655c <_strtoul_l.constprop.0+0x78>
 801658e:	1c7b      	adds	r3, r7, #1
 8016590:	d106      	bne.n	80165a0 <_strtoul_l.constprop.0+0xbc>
 8016592:	2322      	movs	r3, #34	; 0x22
 8016594:	f8ce 3000 	str.w	r3, [lr]
 8016598:	4638      	mov	r0, r7
 801659a:	b932      	cbnz	r2, 80165aa <_strtoul_l.constprop.0+0xc6>
 801659c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165a0:	b106      	cbz	r6, 80165a4 <_strtoul_l.constprop.0+0xc0>
 80165a2:	4240      	negs	r0, r0
 80165a4:	2a00      	cmp	r2, #0
 80165a6:	d0f9      	beq.n	801659c <_strtoul_l.constprop.0+0xb8>
 80165a8:	b107      	cbz	r7, 80165ac <_strtoul_l.constprop.0+0xc8>
 80165aa:	1e69      	subs	r1, r5, #1
 80165ac:	6011      	str	r1, [r2, #0]
 80165ae:	e7f5      	b.n	801659c <_strtoul_l.constprop.0+0xb8>
 80165b0:	2430      	movs	r4, #48	; 0x30
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d1b5      	bne.n	8016522 <_strtoul_l.constprop.0+0x3e>
 80165b6:	2308      	movs	r3, #8
 80165b8:	e7b3      	b.n	8016522 <_strtoul_l.constprop.0+0x3e>
 80165ba:	2c30      	cmp	r4, #48	; 0x30
 80165bc:	d0a9      	beq.n	8016512 <_strtoul_l.constprop.0+0x2e>
 80165be:	230a      	movs	r3, #10
 80165c0:	e7af      	b.n	8016522 <_strtoul_l.constprop.0+0x3e>
 80165c2:	bf00      	nop
 80165c4:	08018ea9 	.word	0x08018ea9

080165c8 <strtoul>:
 80165c8:	4613      	mov	r3, r2
 80165ca:	460a      	mov	r2, r1
 80165cc:	4601      	mov	r1, r0
 80165ce:	4802      	ldr	r0, [pc, #8]	; (80165d8 <strtoul+0x10>)
 80165d0:	6800      	ldr	r0, [r0, #0]
 80165d2:	f7ff bf87 	b.w	80164e4 <_strtoul_l.constprop.0>
 80165d6:	bf00      	nop
 80165d8:	2000037c 	.word	0x2000037c

080165dc <std>:
 80165dc:	2300      	movs	r3, #0
 80165de:	b510      	push	{r4, lr}
 80165e0:	4604      	mov	r4, r0
 80165e2:	e9c0 3300 	strd	r3, r3, [r0]
 80165e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80165ea:	6083      	str	r3, [r0, #8]
 80165ec:	8181      	strh	r1, [r0, #12]
 80165ee:	6643      	str	r3, [r0, #100]	; 0x64
 80165f0:	81c2      	strh	r2, [r0, #14]
 80165f2:	6183      	str	r3, [r0, #24]
 80165f4:	4619      	mov	r1, r3
 80165f6:	2208      	movs	r2, #8
 80165f8:	305c      	adds	r0, #92	; 0x5c
 80165fa:	f000 f92d 	bl	8016858 <memset>
 80165fe:	4b0d      	ldr	r3, [pc, #52]	; (8016634 <std+0x58>)
 8016600:	6263      	str	r3, [r4, #36]	; 0x24
 8016602:	4b0d      	ldr	r3, [pc, #52]	; (8016638 <std+0x5c>)
 8016604:	62a3      	str	r3, [r4, #40]	; 0x28
 8016606:	4b0d      	ldr	r3, [pc, #52]	; (801663c <std+0x60>)
 8016608:	62e3      	str	r3, [r4, #44]	; 0x2c
 801660a:	4b0d      	ldr	r3, [pc, #52]	; (8016640 <std+0x64>)
 801660c:	6323      	str	r3, [r4, #48]	; 0x30
 801660e:	4b0d      	ldr	r3, [pc, #52]	; (8016644 <std+0x68>)
 8016610:	6224      	str	r4, [r4, #32]
 8016612:	429c      	cmp	r4, r3
 8016614:	d006      	beq.n	8016624 <std+0x48>
 8016616:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801661a:	4294      	cmp	r4, r2
 801661c:	d002      	beq.n	8016624 <std+0x48>
 801661e:	33d0      	adds	r3, #208	; 0xd0
 8016620:	429c      	cmp	r4, r3
 8016622:	d105      	bne.n	8016630 <std+0x54>
 8016624:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801662c:	f000 b99e 	b.w	801696c <__retarget_lock_init_recursive>
 8016630:	bd10      	pop	{r4, pc}
 8016632:	bf00      	nop
 8016634:	08016761 	.word	0x08016761
 8016638:	08016783 	.word	0x08016783
 801663c:	080167bb 	.word	0x080167bb
 8016640:	080167df 	.word	0x080167df
 8016644:	20003574 	.word	0x20003574

08016648 <stdio_exit_handler>:
 8016648:	4a02      	ldr	r2, [pc, #8]	; (8016654 <stdio_exit_handler+0xc>)
 801664a:	4903      	ldr	r1, [pc, #12]	; (8016658 <stdio_exit_handler+0x10>)
 801664c:	4803      	ldr	r0, [pc, #12]	; (801665c <stdio_exit_handler+0x14>)
 801664e:	f000 b869 	b.w	8016724 <_fwalk_sglue>
 8016652:	bf00      	nop
 8016654:	200001b8 	.word	0x200001b8
 8016658:	080182d1 	.word	0x080182d1
 801665c:	20000330 	.word	0x20000330

08016660 <cleanup_stdio>:
 8016660:	6841      	ldr	r1, [r0, #4]
 8016662:	4b0c      	ldr	r3, [pc, #48]	; (8016694 <cleanup_stdio+0x34>)
 8016664:	4299      	cmp	r1, r3
 8016666:	b510      	push	{r4, lr}
 8016668:	4604      	mov	r4, r0
 801666a:	d001      	beq.n	8016670 <cleanup_stdio+0x10>
 801666c:	f001 fe30 	bl	80182d0 <_fflush_r>
 8016670:	68a1      	ldr	r1, [r4, #8]
 8016672:	4b09      	ldr	r3, [pc, #36]	; (8016698 <cleanup_stdio+0x38>)
 8016674:	4299      	cmp	r1, r3
 8016676:	d002      	beq.n	801667e <cleanup_stdio+0x1e>
 8016678:	4620      	mov	r0, r4
 801667a:	f001 fe29 	bl	80182d0 <_fflush_r>
 801667e:	68e1      	ldr	r1, [r4, #12]
 8016680:	4b06      	ldr	r3, [pc, #24]	; (801669c <cleanup_stdio+0x3c>)
 8016682:	4299      	cmp	r1, r3
 8016684:	d004      	beq.n	8016690 <cleanup_stdio+0x30>
 8016686:	4620      	mov	r0, r4
 8016688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801668c:	f001 be20 	b.w	80182d0 <_fflush_r>
 8016690:	bd10      	pop	{r4, pc}
 8016692:	bf00      	nop
 8016694:	20003574 	.word	0x20003574
 8016698:	200035dc 	.word	0x200035dc
 801669c:	20003644 	.word	0x20003644

080166a0 <global_stdio_init.part.0>:
 80166a0:	b510      	push	{r4, lr}
 80166a2:	4b0b      	ldr	r3, [pc, #44]	; (80166d0 <global_stdio_init.part.0+0x30>)
 80166a4:	4c0b      	ldr	r4, [pc, #44]	; (80166d4 <global_stdio_init.part.0+0x34>)
 80166a6:	4a0c      	ldr	r2, [pc, #48]	; (80166d8 <global_stdio_init.part.0+0x38>)
 80166a8:	601a      	str	r2, [r3, #0]
 80166aa:	4620      	mov	r0, r4
 80166ac:	2200      	movs	r2, #0
 80166ae:	2104      	movs	r1, #4
 80166b0:	f7ff ff94 	bl	80165dc <std>
 80166b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80166b8:	2201      	movs	r2, #1
 80166ba:	2109      	movs	r1, #9
 80166bc:	f7ff ff8e 	bl	80165dc <std>
 80166c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80166c4:	2202      	movs	r2, #2
 80166c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166ca:	2112      	movs	r1, #18
 80166cc:	f7ff bf86 	b.w	80165dc <std>
 80166d0:	200036ac 	.word	0x200036ac
 80166d4:	20003574 	.word	0x20003574
 80166d8:	08016649 	.word	0x08016649

080166dc <__sfp_lock_acquire>:
 80166dc:	4801      	ldr	r0, [pc, #4]	; (80166e4 <__sfp_lock_acquire+0x8>)
 80166de:	f000 b946 	b.w	801696e <__retarget_lock_acquire_recursive>
 80166e2:	bf00      	nop
 80166e4:	200036b5 	.word	0x200036b5

080166e8 <__sfp_lock_release>:
 80166e8:	4801      	ldr	r0, [pc, #4]	; (80166f0 <__sfp_lock_release+0x8>)
 80166ea:	f000 b941 	b.w	8016970 <__retarget_lock_release_recursive>
 80166ee:	bf00      	nop
 80166f0:	200036b5 	.word	0x200036b5

080166f4 <__sinit>:
 80166f4:	b510      	push	{r4, lr}
 80166f6:	4604      	mov	r4, r0
 80166f8:	f7ff fff0 	bl	80166dc <__sfp_lock_acquire>
 80166fc:	6a23      	ldr	r3, [r4, #32]
 80166fe:	b11b      	cbz	r3, 8016708 <__sinit+0x14>
 8016700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016704:	f7ff bff0 	b.w	80166e8 <__sfp_lock_release>
 8016708:	4b04      	ldr	r3, [pc, #16]	; (801671c <__sinit+0x28>)
 801670a:	6223      	str	r3, [r4, #32]
 801670c:	4b04      	ldr	r3, [pc, #16]	; (8016720 <__sinit+0x2c>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d1f5      	bne.n	8016700 <__sinit+0xc>
 8016714:	f7ff ffc4 	bl	80166a0 <global_stdio_init.part.0>
 8016718:	e7f2      	b.n	8016700 <__sinit+0xc>
 801671a:	bf00      	nop
 801671c:	08016661 	.word	0x08016661
 8016720:	200036ac 	.word	0x200036ac

08016724 <_fwalk_sglue>:
 8016724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016728:	4607      	mov	r7, r0
 801672a:	4688      	mov	r8, r1
 801672c:	4614      	mov	r4, r2
 801672e:	2600      	movs	r6, #0
 8016730:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016734:	f1b9 0901 	subs.w	r9, r9, #1
 8016738:	d505      	bpl.n	8016746 <_fwalk_sglue+0x22>
 801673a:	6824      	ldr	r4, [r4, #0]
 801673c:	2c00      	cmp	r4, #0
 801673e:	d1f7      	bne.n	8016730 <_fwalk_sglue+0xc>
 8016740:	4630      	mov	r0, r6
 8016742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016746:	89ab      	ldrh	r3, [r5, #12]
 8016748:	2b01      	cmp	r3, #1
 801674a:	d907      	bls.n	801675c <_fwalk_sglue+0x38>
 801674c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016750:	3301      	adds	r3, #1
 8016752:	d003      	beq.n	801675c <_fwalk_sglue+0x38>
 8016754:	4629      	mov	r1, r5
 8016756:	4638      	mov	r0, r7
 8016758:	47c0      	blx	r8
 801675a:	4306      	orrs	r6, r0
 801675c:	3568      	adds	r5, #104	; 0x68
 801675e:	e7e9      	b.n	8016734 <_fwalk_sglue+0x10>

08016760 <__sread>:
 8016760:	b510      	push	{r4, lr}
 8016762:	460c      	mov	r4, r1
 8016764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016768:	f000 f8b2 	bl	80168d0 <_read_r>
 801676c:	2800      	cmp	r0, #0
 801676e:	bfab      	itete	ge
 8016770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016772:	89a3      	ldrhlt	r3, [r4, #12]
 8016774:	181b      	addge	r3, r3, r0
 8016776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801677a:	bfac      	ite	ge
 801677c:	6563      	strge	r3, [r4, #84]	; 0x54
 801677e:	81a3      	strhlt	r3, [r4, #12]
 8016780:	bd10      	pop	{r4, pc}

08016782 <__swrite>:
 8016782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016786:	461f      	mov	r7, r3
 8016788:	898b      	ldrh	r3, [r1, #12]
 801678a:	05db      	lsls	r3, r3, #23
 801678c:	4605      	mov	r5, r0
 801678e:	460c      	mov	r4, r1
 8016790:	4616      	mov	r6, r2
 8016792:	d505      	bpl.n	80167a0 <__swrite+0x1e>
 8016794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016798:	2302      	movs	r3, #2
 801679a:	2200      	movs	r2, #0
 801679c:	f000 f886 	bl	80168ac <_lseek_r>
 80167a0:	89a3      	ldrh	r3, [r4, #12]
 80167a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80167a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80167aa:	81a3      	strh	r3, [r4, #12]
 80167ac:	4632      	mov	r2, r6
 80167ae:	463b      	mov	r3, r7
 80167b0:	4628      	mov	r0, r5
 80167b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167b6:	f000 b89d 	b.w	80168f4 <_write_r>

080167ba <__sseek>:
 80167ba:	b510      	push	{r4, lr}
 80167bc:	460c      	mov	r4, r1
 80167be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167c2:	f000 f873 	bl	80168ac <_lseek_r>
 80167c6:	1c43      	adds	r3, r0, #1
 80167c8:	89a3      	ldrh	r3, [r4, #12]
 80167ca:	bf15      	itete	ne
 80167cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80167ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80167d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80167d6:	81a3      	strheq	r3, [r4, #12]
 80167d8:	bf18      	it	ne
 80167da:	81a3      	strhne	r3, [r4, #12]
 80167dc:	bd10      	pop	{r4, pc}

080167de <__sclose>:
 80167de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167e2:	f000 b853 	b.w	801688c <_close_r>

080167e6 <_vsniprintf_r>:
 80167e6:	b530      	push	{r4, r5, lr}
 80167e8:	4614      	mov	r4, r2
 80167ea:	2c00      	cmp	r4, #0
 80167ec:	b09b      	sub	sp, #108	; 0x6c
 80167ee:	4605      	mov	r5, r0
 80167f0:	461a      	mov	r2, r3
 80167f2:	da05      	bge.n	8016800 <_vsniprintf_r+0x1a>
 80167f4:	238b      	movs	r3, #139	; 0x8b
 80167f6:	6003      	str	r3, [r0, #0]
 80167f8:	f04f 30ff 	mov.w	r0, #4294967295
 80167fc:	b01b      	add	sp, #108	; 0x6c
 80167fe:	bd30      	pop	{r4, r5, pc}
 8016800:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016804:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016808:	bf14      	ite	ne
 801680a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801680e:	4623      	moveq	r3, r4
 8016810:	9302      	str	r3, [sp, #8]
 8016812:	9305      	str	r3, [sp, #20]
 8016814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016818:	9100      	str	r1, [sp, #0]
 801681a:	9104      	str	r1, [sp, #16]
 801681c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016820:	4669      	mov	r1, sp
 8016822:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016824:	f001 fa40 	bl	8017ca8 <_svfiprintf_r>
 8016828:	1c43      	adds	r3, r0, #1
 801682a:	bfbc      	itt	lt
 801682c:	238b      	movlt	r3, #139	; 0x8b
 801682e:	602b      	strlt	r3, [r5, #0]
 8016830:	2c00      	cmp	r4, #0
 8016832:	d0e3      	beq.n	80167fc <_vsniprintf_r+0x16>
 8016834:	9b00      	ldr	r3, [sp, #0]
 8016836:	2200      	movs	r2, #0
 8016838:	701a      	strb	r2, [r3, #0]
 801683a:	e7df      	b.n	80167fc <_vsniprintf_r+0x16>

0801683c <vsniprintf>:
 801683c:	b507      	push	{r0, r1, r2, lr}
 801683e:	9300      	str	r3, [sp, #0]
 8016840:	4613      	mov	r3, r2
 8016842:	460a      	mov	r2, r1
 8016844:	4601      	mov	r1, r0
 8016846:	4803      	ldr	r0, [pc, #12]	; (8016854 <vsniprintf+0x18>)
 8016848:	6800      	ldr	r0, [r0, #0]
 801684a:	f7ff ffcc 	bl	80167e6 <_vsniprintf_r>
 801684e:	b003      	add	sp, #12
 8016850:	f85d fb04 	ldr.w	pc, [sp], #4
 8016854:	2000037c 	.word	0x2000037c

08016858 <memset>:
 8016858:	4402      	add	r2, r0
 801685a:	4603      	mov	r3, r0
 801685c:	4293      	cmp	r3, r2
 801685e:	d100      	bne.n	8016862 <memset+0xa>
 8016860:	4770      	bx	lr
 8016862:	f803 1b01 	strb.w	r1, [r3], #1
 8016866:	e7f9      	b.n	801685c <memset+0x4>

08016868 <strncmp>:
 8016868:	b510      	push	{r4, lr}
 801686a:	b16a      	cbz	r2, 8016888 <strncmp+0x20>
 801686c:	3901      	subs	r1, #1
 801686e:	1884      	adds	r4, r0, r2
 8016870:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016874:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016878:	429a      	cmp	r2, r3
 801687a:	d103      	bne.n	8016884 <strncmp+0x1c>
 801687c:	42a0      	cmp	r0, r4
 801687e:	d001      	beq.n	8016884 <strncmp+0x1c>
 8016880:	2a00      	cmp	r2, #0
 8016882:	d1f5      	bne.n	8016870 <strncmp+0x8>
 8016884:	1ad0      	subs	r0, r2, r3
 8016886:	bd10      	pop	{r4, pc}
 8016888:	4610      	mov	r0, r2
 801688a:	e7fc      	b.n	8016886 <strncmp+0x1e>

0801688c <_close_r>:
 801688c:	b538      	push	{r3, r4, r5, lr}
 801688e:	4d06      	ldr	r5, [pc, #24]	; (80168a8 <_close_r+0x1c>)
 8016890:	2300      	movs	r3, #0
 8016892:	4604      	mov	r4, r0
 8016894:	4608      	mov	r0, r1
 8016896:	602b      	str	r3, [r5, #0]
 8016898:	f7f2 f9eb 	bl	8008c72 <_close>
 801689c:	1c43      	adds	r3, r0, #1
 801689e:	d102      	bne.n	80168a6 <_close_r+0x1a>
 80168a0:	682b      	ldr	r3, [r5, #0]
 80168a2:	b103      	cbz	r3, 80168a6 <_close_r+0x1a>
 80168a4:	6023      	str	r3, [r4, #0]
 80168a6:	bd38      	pop	{r3, r4, r5, pc}
 80168a8:	200036b0 	.word	0x200036b0

080168ac <_lseek_r>:
 80168ac:	b538      	push	{r3, r4, r5, lr}
 80168ae:	4d07      	ldr	r5, [pc, #28]	; (80168cc <_lseek_r+0x20>)
 80168b0:	4604      	mov	r4, r0
 80168b2:	4608      	mov	r0, r1
 80168b4:	4611      	mov	r1, r2
 80168b6:	2200      	movs	r2, #0
 80168b8:	602a      	str	r2, [r5, #0]
 80168ba:	461a      	mov	r2, r3
 80168bc:	f7f2 fa00 	bl	8008cc0 <_lseek>
 80168c0:	1c43      	adds	r3, r0, #1
 80168c2:	d102      	bne.n	80168ca <_lseek_r+0x1e>
 80168c4:	682b      	ldr	r3, [r5, #0]
 80168c6:	b103      	cbz	r3, 80168ca <_lseek_r+0x1e>
 80168c8:	6023      	str	r3, [r4, #0]
 80168ca:	bd38      	pop	{r3, r4, r5, pc}
 80168cc:	200036b0 	.word	0x200036b0

080168d0 <_read_r>:
 80168d0:	b538      	push	{r3, r4, r5, lr}
 80168d2:	4d07      	ldr	r5, [pc, #28]	; (80168f0 <_read_r+0x20>)
 80168d4:	4604      	mov	r4, r0
 80168d6:	4608      	mov	r0, r1
 80168d8:	4611      	mov	r1, r2
 80168da:	2200      	movs	r2, #0
 80168dc:	602a      	str	r2, [r5, #0]
 80168de:	461a      	mov	r2, r3
 80168e0:	f7f2 f98e 	bl	8008c00 <_read>
 80168e4:	1c43      	adds	r3, r0, #1
 80168e6:	d102      	bne.n	80168ee <_read_r+0x1e>
 80168e8:	682b      	ldr	r3, [r5, #0]
 80168ea:	b103      	cbz	r3, 80168ee <_read_r+0x1e>
 80168ec:	6023      	str	r3, [r4, #0]
 80168ee:	bd38      	pop	{r3, r4, r5, pc}
 80168f0:	200036b0 	.word	0x200036b0

080168f4 <_write_r>:
 80168f4:	b538      	push	{r3, r4, r5, lr}
 80168f6:	4d07      	ldr	r5, [pc, #28]	; (8016914 <_write_r+0x20>)
 80168f8:	4604      	mov	r4, r0
 80168fa:	4608      	mov	r0, r1
 80168fc:	4611      	mov	r1, r2
 80168fe:	2200      	movs	r2, #0
 8016900:	602a      	str	r2, [r5, #0]
 8016902:	461a      	mov	r2, r3
 8016904:	f7f2 f999 	bl	8008c3a <_write>
 8016908:	1c43      	adds	r3, r0, #1
 801690a:	d102      	bne.n	8016912 <_write_r+0x1e>
 801690c:	682b      	ldr	r3, [r5, #0]
 801690e:	b103      	cbz	r3, 8016912 <_write_r+0x1e>
 8016910:	6023      	str	r3, [r4, #0]
 8016912:	bd38      	pop	{r3, r4, r5, pc}
 8016914:	200036b0 	.word	0x200036b0

08016918 <__errno>:
 8016918:	4b01      	ldr	r3, [pc, #4]	; (8016920 <__errno+0x8>)
 801691a:	6818      	ldr	r0, [r3, #0]
 801691c:	4770      	bx	lr
 801691e:	bf00      	nop
 8016920:	2000037c 	.word	0x2000037c

08016924 <__libc_init_array>:
 8016924:	b570      	push	{r4, r5, r6, lr}
 8016926:	4d0d      	ldr	r5, [pc, #52]	; (801695c <__libc_init_array+0x38>)
 8016928:	4c0d      	ldr	r4, [pc, #52]	; (8016960 <__libc_init_array+0x3c>)
 801692a:	1b64      	subs	r4, r4, r5
 801692c:	10a4      	asrs	r4, r4, #2
 801692e:	2600      	movs	r6, #0
 8016930:	42a6      	cmp	r6, r4
 8016932:	d109      	bne.n	8016948 <__libc_init_array+0x24>
 8016934:	4d0b      	ldr	r5, [pc, #44]	; (8016964 <__libc_init_array+0x40>)
 8016936:	4c0c      	ldr	r4, [pc, #48]	; (8016968 <__libc_init_array+0x44>)
 8016938:	f002 f84a 	bl	80189d0 <_init>
 801693c:	1b64      	subs	r4, r4, r5
 801693e:	10a4      	asrs	r4, r4, #2
 8016940:	2600      	movs	r6, #0
 8016942:	42a6      	cmp	r6, r4
 8016944:	d105      	bne.n	8016952 <__libc_init_array+0x2e>
 8016946:	bd70      	pop	{r4, r5, r6, pc}
 8016948:	f855 3b04 	ldr.w	r3, [r5], #4
 801694c:	4798      	blx	r3
 801694e:	3601      	adds	r6, #1
 8016950:	e7ee      	b.n	8016930 <__libc_init_array+0xc>
 8016952:	f855 3b04 	ldr.w	r3, [r5], #4
 8016956:	4798      	blx	r3
 8016958:	3601      	adds	r6, #1
 801695a:	e7f2      	b.n	8016942 <__libc_init_array+0x1e>
 801695c:	0801920c 	.word	0x0801920c
 8016960:	0801920c 	.word	0x0801920c
 8016964:	0801920c 	.word	0x0801920c
 8016968:	08019210 	.word	0x08019210

0801696c <__retarget_lock_init_recursive>:
 801696c:	4770      	bx	lr

0801696e <__retarget_lock_acquire_recursive>:
 801696e:	4770      	bx	lr

08016970 <__retarget_lock_release_recursive>:
 8016970:	4770      	bx	lr

08016972 <strcpy>:
 8016972:	4603      	mov	r3, r0
 8016974:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016978:	f803 2b01 	strb.w	r2, [r3], #1
 801697c:	2a00      	cmp	r2, #0
 801697e:	d1f9      	bne.n	8016974 <strcpy+0x2>
 8016980:	4770      	bx	lr

08016982 <memcpy>:
 8016982:	440a      	add	r2, r1
 8016984:	4291      	cmp	r1, r2
 8016986:	f100 33ff 	add.w	r3, r0, #4294967295
 801698a:	d100      	bne.n	801698e <memcpy+0xc>
 801698c:	4770      	bx	lr
 801698e:	b510      	push	{r4, lr}
 8016990:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016994:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016998:	4291      	cmp	r1, r2
 801699a:	d1f9      	bne.n	8016990 <memcpy+0xe>
 801699c:	bd10      	pop	{r4, pc}
	...

080169a0 <nan>:
 80169a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80169a8 <nan+0x8>
 80169a4:	4770      	bx	lr
 80169a6:	bf00      	nop
 80169a8:	00000000 	.word	0x00000000
 80169ac:	7ff80000 	.word	0x7ff80000

080169b0 <nanf>:
 80169b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80169b8 <nanf+0x8>
 80169b4:	4770      	bx	lr
 80169b6:	bf00      	nop
 80169b8:	7fc00000 	.word	0x7fc00000

080169bc <_free_r>:
 80169bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80169be:	2900      	cmp	r1, #0
 80169c0:	d044      	beq.n	8016a4c <_free_r+0x90>
 80169c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169c6:	9001      	str	r0, [sp, #4]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	f1a1 0404 	sub.w	r4, r1, #4
 80169ce:	bfb8      	it	lt
 80169d0:	18e4      	addlt	r4, r4, r3
 80169d2:	f000 fc49 	bl	8017268 <__malloc_lock>
 80169d6:	4a1e      	ldr	r2, [pc, #120]	; (8016a50 <_free_r+0x94>)
 80169d8:	9801      	ldr	r0, [sp, #4]
 80169da:	6813      	ldr	r3, [r2, #0]
 80169dc:	b933      	cbnz	r3, 80169ec <_free_r+0x30>
 80169de:	6063      	str	r3, [r4, #4]
 80169e0:	6014      	str	r4, [r2, #0]
 80169e2:	b003      	add	sp, #12
 80169e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80169e8:	f000 bc44 	b.w	8017274 <__malloc_unlock>
 80169ec:	42a3      	cmp	r3, r4
 80169ee:	d908      	bls.n	8016a02 <_free_r+0x46>
 80169f0:	6825      	ldr	r5, [r4, #0]
 80169f2:	1961      	adds	r1, r4, r5
 80169f4:	428b      	cmp	r3, r1
 80169f6:	bf01      	itttt	eq
 80169f8:	6819      	ldreq	r1, [r3, #0]
 80169fa:	685b      	ldreq	r3, [r3, #4]
 80169fc:	1949      	addeq	r1, r1, r5
 80169fe:	6021      	streq	r1, [r4, #0]
 8016a00:	e7ed      	b.n	80169de <_free_r+0x22>
 8016a02:	461a      	mov	r2, r3
 8016a04:	685b      	ldr	r3, [r3, #4]
 8016a06:	b10b      	cbz	r3, 8016a0c <_free_r+0x50>
 8016a08:	42a3      	cmp	r3, r4
 8016a0a:	d9fa      	bls.n	8016a02 <_free_r+0x46>
 8016a0c:	6811      	ldr	r1, [r2, #0]
 8016a0e:	1855      	adds	r5, r2, r1
 8016a10:	42a5      	cmp	r5, r4
 8016a12:	d10b      	bne.n	8016a2c <_free_r+0x70>
 8016a14:	6824      	ldr	r4, [r4, #0]
 8016a16:	4421      	add	r1, r4
 8016a18:	1854      	adds	r4, r2, r1
 8016a1a:	42a3      	cmp	r3, r4
 8016a1c:	6011      	str	r1, [r2, #0]
 8016a1e:	d1e0      	bne.n	80169e2 <_free_r+0x26>
 8016a20:	681c      	ldr	r4, [r3, #0]
 8016a22:	685b      	ldr	r3, [r3, #4]
 8016a24:	6053      	str	r3, [r2, #4]
 8016a26:	440c      	add	r4, r1
 8016a28:	6014      	str	r4, [r2, #0]
 8016a2a:	e7da      	b.n	80169e2 <_free_r+0x26>
 8016a2c:	d902      	bls.n	8016a34 <_free_r+0x78>
 8016a2e:	230c      	movs	r3, #12
 8016a30:	6003      	str	r3, [r0, #0]
 8016a32:	e7d6      	b.n	80169e2 <_free_r+0x26>
 8016a34:	6825      	ldr	r5, [r4, #0]
 8016a36:	1961      	adds	r1, r4, r5
 8016a38:	428b      	cmp	r3, r1
 8016a3a:	bf04      	itt	eq
 8016a3c:	6819      	ldreq	r1, [r3, #0]
 8016a3e:	685b      	ldreq	r3, [r3, #4]
 8016a40:	6063      	str	r3, [r4, #4]
 8016a42:	bf04      	itt	eq
 8016a44:	1949      	addeq	r1, r1, r5
 8016a46:	6021      	streq	r1, [r4, #0]
 8016a48:	6054      	str	r4, [r2, #4]
 8016a4a:	e7ca      	b.n	80169e2 <_free_r+0x26>
 8016a4c:	b003      	add	sp, #12
 8016a4e:	bd30      	pop	{r4, r5, pc}
 8016a50:	200036b8 	.word	0x200036b8

08016a54 <rshift>:
 8016a54:	6903      	ldr	r3, [r0, #16]
 8016a56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016a5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016a62:	f100 0414 	add.w	r4, r0, #20
 8016a66:	dd45      	ble.n	8016af4 <rshift+0xa0>
 8016a68:	f011 011f 	ands.w	r1, r1, #31
 8016a6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016a70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016a74:	d10c      	bne.n	8016a90 <rshift+0x3c>
 8016a76:	f100 0710 	add.w	r7, r0, #16
 8016a7a:	4629      	mov	r1, r5
 8016a7c:	42b1      	cmp	r1, r6
 8016a7e:	d334      	bcc.n	8016aea <rshift+0x96>
 8016a80:	1a9b      	subs	r3, r3, r2
 8016a82:	009b      	lsls	r3, r3, #2
 8016a84:	1eea      	subs	r2, r5, #3
 8016a86:	4296      	cmp	r6, r2
 8016a88:	bf38      	it	cc
 8016a8a:	2300      	movcc	r3, #0
 8016a8c:	4423      	add	r3, r4
 8016a8e:	e015      	b.n	8016abc <rshift+0x68>
 8016a90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016a94:	f1c1 0820 	rsb	r8, r1, #32
 8016a98:	40cf      	lsrs	r7, r1
 8016a9a:	f105 0e04 	add.w	lr, r5, #4
 8016a9e:	46a1      	mov	r9, r4
 8016aa0:	4576      	cmp	r6, lr
 8016aa2:	46f4      	mov	ip, lr
 8016aa4:	d815      	bhi.n	8016ad2 <rshift+0x7e>
 8016aa6:	1a9a      	subs	r2, r3, r2
 8016aa8:	0092      	lsls	r2, r2, #2
 8016aaa:	3a04      	subs	r2, #4
 8016aac:	3501      	adds	r5, #1
 8016aae:	42ae      	cmp	r6, r5
 8016ab0:	bf38      	it	cc
 8016ab2:	2200      	movcc	r2, #0
 8016ab4:	18a3      	adds	r3, r4, r2
 8016ab6:	50a7      	str	r7, [r4, r2]
 8016ab8:	b107      	cbz	r7, 8016abc <rshift+0x68>
 8016aba:	3304      	adds	r3, #4
 8016abc:	1b1a      	subs	r2, r3, r4
 8016abe:	42a3      	cmp	r3, r4
 8016ac0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016ac4:	bf08      	it	eq
 8016ac6:	2300      	moveq	r3, #0
 8016ac8:	6102      	str	r2, [r0, #16]
 8016aca:	bf08      	it	eq
 8016acc:	6143      	streq	r3, [r0, #20]
 8016ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ad2:	f8dc c000 	ldr.w	ip, [ip]
 8016ad6:	fa0c fc08 	lsl.w	ip, ip, r8
 8016ada:	ea4c 0707 	orr.w	r7, ip, r7
 8016ade:	f849 7b04 	str.w	r7, [r9], #4
 8016ae2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016ae6:	40cf      	lsrs	r7, r1
 8016ae8:	e7da      	b.n	8016aa0 <rshift+0x4c>
 8016aea:	f851 cb04 	ldr.w	ip, [r1], #4
 8016aee:	f847 cf04 	str.w	ip, [r7, #4]!
 8016af2:	e7c3      	b.n	8016a7c <rshift+0x28>
 8016af4:	4623      	mov	r3, r4
 8016af6:	e7e1      	b.n	8016abc <rshift+0x68>

08016af8 <__hexdig_fun>:
 8016af8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016afc:	2b09      	cmp	r3, #9
 8016afe:	d802      	bhi.n	8016b06 <__hexdig_fun+0xe>
 8016b00:	3820      	subs	r0, #32
 8016b02:	b2c0      	uxtb	r0, r0
 8016b04:	4770      	bx	lr
 8016b06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016b0a:	2b05      	cmp	r3, #5
 8016b0c:	d801      	bhi.n	8016b12 <__hexdig_fun+0x1a>
 8016b0e:	3847      	subs	r0, #71	; 0x47
 8016b10:	e7f7      	b.n	8016b02 <__hexdig_fun+0xa>
 8016b12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016b16:	2b05      	cmp	r3, #5
 8016b18:	d801      	bhi.n	8016b1e <__hexdig_fun+0x26>
 8016b1a:	3827      	subs	r0, #39	; 0x27
 8016b1c:	e7f1      	b.n	8016b02 <__hexdig_fun+0xa>
 8016b1e:	2000      	movs	r0, #0
 8016b20:	4770      	bx	lr
	...

08016b24 <__gethex>:
 8016b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b28:	4617      	mov	r7, r2
 8016b2a:	680a      	ldr	r2, [r1, #0]
 8016b2c:	b085      	sub	sp, #20
 8016b2e:	f102 0b02 	add.w	fp, r2, #2
 8016b32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016b36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016b3a:	4681      	mov	r9, r0
 8016b3c:	468a      	mov	sl, r1
 8016b3e:	9302      	str	r3, [sp, #8]
 8016b40:	32fe      	adds	r2, #254	; 0xfe
 8016b42:	eb02 030b 	add.w	r3, r2, fp
 8016b46:	46d8      	mov	r8, fp
 8016b48:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8016b4c:	9301      	str	r3, [sp, #4]
 8016b4e:	2830      	cmp	r0, #48	; 0x30
 8016b50:	d0f7      	beq.n	8016b42 <__gethex+0x1e>
 8016b52:	f7ff ffd1 	bl	8016af8 <__hexdig_fun>
 8016b56:	4604      	mov	r4, r0
 8016b58:	2800      	cmp	r0, #0
 8016b5a:	d138      	bne.n	8016bce <__gethex+0xaa>
 8016b5c:	49a7      	ldr	r1, [pc, #668]	; (8016dfc <__gethex+0x2d8>)
 8016b5e:	2201      	movs	r2, #1
 8016b60:	4640      	mov	r0, r8
 8016b62:	f7ff fe81 	bl	8016868 <strncmp>
 8016b66:	4606      	mov	r6, r0
 8016b68:	2800      	cmp	r0, #0
 8016b6a:	d169      	bne.n	8016c40 <__gethex+0x11c>
 8016b6c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8016b70:	465d      	mov	r5, fp
 8016b72:	f7ff ffc1 	bl	8016af8 <__hexdig_fun>
 8016b76:	2800      	cmp	r0, #0
 8016b78:	d064      	beq.n	8016c44 <__gethex+0x120>
 8016b7a:	465a      	mov	r2, fp
 8016b7c:	7810      	ldrb	r0, [r2, #0]
 8016b7e:	2830      	cmp	r0, #48	; 0x30
 8016b80:	4690      	mov	r8, r2
 8016b82:	f102 0201 	add.w	r2, r2, #1
 8016b86:	d0f9      	beq.n	8016b7c <__gethex+0x58>
 8016b88:	f7ff ffb6 	bl	8016af8 <__hexdig_fun>
 8016b8c:	2301      	movs	r3, #1
 8016b8e:	fab0 f480 	clz	r4, r0
 8016b92:	0964      	lsrs	r4, r4, #5
 8016b94:	465e      	mov	r6, fp
 8016b96:	9301      	str	r3, [sp, #4]
 8016b98:	4642      	mov	r2, r8
 8016b9a:	4615      	mov	r5, r2
 8016b9c:	3201      	adds	r2, #1
 8016b9e:	7828      	ldrb	r0, [r5, #0]
 8016ba0:	f7ff ffaa 	bl	8016af8 <__hexdig_fun>
 8016ba4:	2800      	cmp	r0, #0
 8016ba6:	d1f8      	bne.n	8016b9a <__gethex+0x76>
 8016ba8:	4994      	ldr	r1, [pc, #592]	; (8016dfc <__gethex+0x2d8>)
 8016baa:	2201      	movs	r2, #1
 8016bac:	4628      	mov	r0, r5
 8016bae:	f7ff fe5b 	bl	8016868 <strncmp>
 8016bb2:	b978      	cbnz	r0, 8016bd4 <__gethex+0xb0>
 8016bb4:	b946      	cbnz	r6, 8016bc8 <__gethex+0xa4>
 8016bb6:	1c6e      	adds	r6, r5, #1
 8016bb8:	4632      	mov	r2, r6
 8016bba:	4615      	mov	r5, r2
 8016bbc:	3201      	adds	r2, #1
 8016bbe:	7828      	ldrb	r0, [r5, #0]
 8016bc0:	f7ff ff9a 	bl	8016af8 <__hexdig_fun>
 8016bc4:	2800      	cmp	r0, #0
 8016bc6:	d1f8      	bne.n	8016bba <__gethex+0x96>
 8016bc8:	1b73      	subs	r3, r6, r5
 8016bca:	009e      	lsls	r6, r3, #2
 8016bcc:	e004      	b.n	8016bd8 <__gethex+0xb4>
 8016bce:	2400      	movs	r4, #0
 8016bd0:	4626      	mov	r6, r4
 8016bd2:	e7e1      	b.n	8016b98 <__gethex+0x74>
 8016bd4:	2e00      	cmp	r6, #0
 8016bd6:	d1f7      	bne.n	8016bc8 <__gethex+0xa4>
 8016bd8:	782b      	ldrb	r3, [r5, #0]
 8016bda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016bde:	2b50      	cmp	r3, #80	; 0x50
 8016be0:	d13d      	bne.n	8016c5e <__gethex+0x13a>
 8016be2:	786b      	ldrb	r3, [r5, #1]
 8016be4:	2b2b      	cmp	r3, #43	; 0x2b
 8016be6:	d02f      	beq.n	8016c48 <__gethex+0x124>
 8016be8:	2b2d      	cmp	r3, #45	; 0x2d
 8016bea:	d031      	beq.n	8016c50 <__gethex+0x12c>
 8016bec:	1c69      	adds	r1, r5, #1
 8016bee:	f04f 0b00 	mov.w	fp, #0
 8016bf2:	7808      	ldrb	r0, [r1, #0]
 8016bf4:	f7ff ff80 	bl	8016af8 <__hexdig_fun>
 8016bf8:	1e42      	subs	r2, r0, #1
 8016bfa:	b2d2      	uxtb	r2, r2
 8016bfc:	2a18      	cmp	r2, #24
 8016bfe:	d82e      	bhi.n	8016c5e <__gethex+0x13a>
 8016c00:	f1a0 0210 	sub.w	r2, r0, #16
 8016c04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016c08:	f7ff ff76 	bl	8016af8 <__hexdig_fun>
 8016c0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8016c10:	fa5f fc8c 	uxtb.w	ip, ip
 8016c14:	f1bc 0f18 	cmp.w	ip, #24
 8016c18:	d91d      	bls.n	8016c56 <__gethex+0x132>
 8016c1a:	f1bb 0f00 	cmp.w	fp, #0
 8016c1e:	d000      	beq.n	8016c22 <__gethex+0xfe>
 8016c20:	4252      	negs	r2, r2
 8016c22:	4416      	add	r6, r2
 8016c24:	f8ca 1000 	str.w	r1, [sl]
 8016c28:	b1dc      	cbz	r4, 8016c62 <__gethex+0x13e>
 8016c2a:	9b01      	ldr	r3, [sp, #4]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	bf14      	ite	ne
 8016c30:	f04f 0800 	movne.w	r8, #0
 8016c34:	f04f 0806 	moveq.w	r8, #6
 8016c38:	4640      	mov	r0, r8
 8016c3a:	b005      	add	sp, #20
 8016c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c40:	4645      	mov	r5, r8
 8016c42:	4626      	mov	r6, r4
 8016c44:	2401      	movs	r4, #1
 8016c46:	e7c7      	b.n	8016bd8 <__gethex+0xb4>
 8016c48:	f04f 0b00 	mov.w	fp, #0
 8016c4c:	1ca9      	adds	r1, r5, #2
 8016c4e:	e7d0      	b.n	8016bf2 <__gethex+0xce>
 8016c50:	f04f 0b01 	mov.w	fp, #1
 8016c54:	e7fa      	b.n	8016c4c <__gethex+0x128>
 8016c56:	230a      	movs	r3, #10
 8016c58:	fb03 0002 	mla	r0, r3, r2, r0
 8016c5c:	e7d0      	b.n	8016c00 <__gethex+0xdc>
 8016c5e:	4629      	mov	r1, r5
 8016c60:	e7e0      	b.n	8016c24 <__gethex+0x100>
 8016c62:	eba5 0308 	sub.w	r3, r5, r8
 8016c66:	3b01      	subs	r3, #1
 8016c68:	4621      	mov	r1, r4
 8016c6a:	2b07      	cmp	r3, #7
 8016c6c:	dc0a      	bgt.n	8016c84 <__gethex+0x160>
 8016c6e:	4648      	mov	r0, r9
 8016c70:	f000 fb06 	bl	8017280 <_Balloc>
 8016c74:	4604      	mov	r4, r0
 8016c76:	b940      	cbnz	r0, 8016c8a <__gethex+0x166>
 8016c78:	4b61      	ldr	r3, [pc, #388]	; (8016e00 <__gethex+0x2dc>)
 8016c7a:	4602      	mov	r2, r0
 8016c7c:	21e4      	movs	r1, #228	; 0xe4
 8016c7e:	4861      	ldr	r0, [pc, #388]	; (8016e04 <__gethex+0x2e0>)
 8016c80:	f001 fb78 	bl	8018374 <__assert_func>
 8016c84:	3101      	adds	r1, #1
 8016c86:	105b      	asrs	r3, r3, #1
 8016c88:	e7ef      	b.n	8016c6a <__gethex+0x146>
 8016c8a:	f100 0a14 	add.w	sl, r0, #20
 8016c8e:	2300      	movs	r3, #0
 8016c90:	495a      	ldr	r1, [pc, #360]	; (8016dfc <__gethex+0x2d8>)
 8016c92:	f8cd a004 	str.w	sl, [sp, #4]
 8016c96:	469b      	mov	fp, r3
 8016c98:	45a8      	cmp	r8, r5
 8016c9a:	d342      	bcc.n	8016d22 <__gethex+0x1fe>
 8016c9c:	9801      	ldr	r0, [sp, #4]
 8016c9e:	f840 bb04 	str.w	fp, [r0], #4
 8016ca2:	eba0 000a 	sub.w	r0, r0, sl
 8016ca6:	1080      	asrs	r0, r0, #2
 8016ca8:	6120      	str	r0, [r4, #16]
 8016caa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8016cae:	4658      	mov	r0, fp
 8016cb0:	f000 fbd8 	bl	8017464 <__hi0bits>
 8016cb4:	683d      	ldr	r5, [r7, #0]
 8016cb6:	eba8 0000 	sub.w	r0, r8, r0
 8016cba:	42a8      	cmp	r0, r5
 8016cbc:	dd59      	ble.n	8016d72 <__gethex+0x24e>
 8016cbe:	eba0 0805 	sub.w	r8, r0, r5
 8016cc2:	4641      	mov	r1, r8
 8016cc4:	4620      	mov	r0, r4
 8016cc6:	f000 ff67 	bl	8017b98 <__any_on>
 8016cca:	4683      	mov	fp, r0
 8016ccc:	b1b8      	cbz	r0, 8016cfe <__gethex+0x1da>
 8016cce:	f108 33ff 	add.w	r3, r8, #4294967295
 8016cd2:	1159      	asrs	r1, r3, #5
 8016cd4:	f003 021f 	and.w	r2, r3, #31
 8016cd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016cdc:	f04f 0b01 	mov.w	fp, #1
 8016ce0:	fa0b f202 	lsl.w	r2, fp, r2
 8016ce4:	420a      	tst	r2, r1
 8016ce6:	d00a      	beq.n	8016cfe <__gethex+0x1da>
 8016ce8:	455b      	cmp	r3, fp
 8016cea:	dd06      	ble.n	8016cfa <__gethex+0x1d6>
 8016cec:	f1a8 0102 	sub.w	r1, r8, #2
 8016cf0:	4620      	mov	r0, r4
 8016cf2:	f000 ff51 	bl	8017b98 <__any_on>
 8016cf6:	2800      	cmp	r0, #0
 8016cf8:	d138      	bne.n	8016d6c <__gethex+0x248>
 8016cfa:	f04f 0b02 	mov.w	fp, #2
 8016cfe:	4641      	mov	r1, r8
 8016d00:	4620      	mov	r0, r4
 8016d02:	f7ff fea7 	bl	8016a54 <rshift>
 8016d06:	4446      	add	r6, r8
 8016d08:	68bb      	ldr	r3, [r7, #8]
 8016d0a:	42b3      	cmp	r3, r6
 8016d0c:	da41      	bge.n	8016d92 <__gethex+0x26e>
 8016d0e:	4621      	mov	r1, r4
 8016d10:	4648      	mov	r0, r9
 8016d12:	f000 faf5 	bl	8017300 <_Bfree>
 8016d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016d18:	2300      	movs	r3, #0
 8016d1a:	6013      	str	r3, [r2, #0]
 8016d1c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8016d20:	e78a      	b.n	8016c38 <__gethex+0x114>
 8016d22:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8016d26:	2a2e      	cmp	r2, #46	; 0x2e
 8016d28:	d014      	beq.n	8016d54 <__gethex+0x230>
 8016d2a:	2b20      	cmp	r3, #32
 8016d2c:	d106      	bne.n	8016d3c <__gethex+0x218>
 8016d2e:	9b01      	ldr	r3, [sp, #4]
 8016d30:	f843 bb04 	str.w	fp, [r3], #4
 8016d34:	f04f 0b00 	mov.w	fp, #0
 8016d38:	9301      	str	r3, [sp, #4]
 8016d3a:	465b      	mov	r3, fp
 8016d3c:	7828      	ldrb	r0, [r5, #0]
 8016d3e:	9303      	str	r3, [sp, #12]
 8016d40:	f7ff feda 	bl	8016af8 <__hexdig_fun>
 8016d44:	9b03      	ldr	r3, [sp, #12]
 8016d46:	f000 000f 	and.w	r0, r0, #15
 8016d4a:	4098      	lsls	r0, r3
 8016d4c:	ea4b 0b00 	orr.w	fp, fp, r0
 8016d50:	3304      	adds	r3, #4
 8016d52:	e7a1      	b.n	8016c98 <__gethex+0x174>
 8016d54:	45a8      	cmp	r8, r5
 8016d56:	d8e8      	bhi.n	8016d2a <__gethex+0x206>
 8016d58:	2201      	movs	r2, #1
 8016d5a:	4628      	mov	r0, r5
 8016d5c:	9303      	str	r3, [sp, #12]
 8016d5e:	f7ff fd83 	bl	8016868 <strncmp>
 8016d62:	4926      	ldr	r1, [pc, #152]	; (8016dfc <__gethex+0x2d8>)
 8016d64:	9b03      	ldr	r3, [sp, #12]
 8016d66:	2800      	cmp	r0, #0
 8016d68:	d1df      	bne.n	8016d2a <__gethex+0x206>
 8016d6a:	e795      	b.n	8016c98 <__gethex+0x174>
 8016d6c:	f04f 0b03 	mov.w	fp, #3
 8016d70:	e7c5      	b.n	8016cfe <__gethex+0x1da>
 8016d72:	da0b      	bge.n	8016d8c <__gethex+0x268>
 8016d74:	eba5 0800 	sub.w	r8, r5, r0
 8016d78:	4621      	mov	r1, r4
 8016d7a:	4642      	mov	r2, r8
 8016d7c:	4648      	mov	r0, r9
 8016d7e:	f000 fcd9 	bl	8017734 <__lshift>
 8016d82:	eba6 0608 	sub.w	r6, r6, r8
 8016d86:	4604      	mov	r4, r0
 8016d88:	f100 0a14 	add.w	sl, r0, #20
 8016d8c:	f04f 0b00 	mov.w	fp, #0
 8016d90:	e7ba      	b.n	8016d08 <__gethex+0x1e4>
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	42b3      	cmp	r3, r6
 8016d96:	dd73      	ble.n	8016e80 <__gethex+0x35c>
 8016d98:	1b9e      	subs	r6, r3, r6
 8016d9a:	42b5      	cmp	r5, r6
 8016d9c:	dc34      	bgt.n	8016e08 <__gethex+0x2e4>
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	2b02      	cmp	r3, #2
 8016da2:	d023      	beq.n	8016dec <__gethex+0x2c8>
 8016da4:	2b03      	cmp	r3, #3
 8016da6:	d025      	beq.n	8016df4 <__gethex+0x2d0>
 8016da8:	2b01      	cmp	r3, #1
 8016daa:	d115      	bne.n	8016dd8 <__gethex+0x2b4>
 8016dac:	42b5      	cmp	r5, r6
 8016dae:	d113      	bne.n	8016dd8 <__gethex+0x2b4>
 8016db0:	2d01      	cmp	r5, #1
 8016db2:	d10b      	bne.n	8016dcc <__gethex+0x2a8>
 8016db4:	9a02      	ldr	r2, [sp, #8]
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	6013      	str	r3, [r2, #0]
 8016dba:	2301      	movs	r3, #1
 8016dbc:	6123      	str	r3, [r4, #16]
 8016dbe:	f8ca 3000 	str.w	r3, [sl]
 8016dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016dc4:	f04f 0862 	mov.w	r8, #98	; 0x62
 8016dc8:	601c      	str	r4, [r3, #0]
 8016dca:	e735      	b.n	8016c38 <__gethex+0x114>
 8016dcc:	1e69      	subs	r1, r5, #1
 8016dce:	4620      	mov	r0, r4
 8016dd0:	f000 fee2 	bl	8017b98 <__any_on>
 8016dd4:	2800      	cmp	r0, #0
 8016dd6:	d1ed      	bne.n	8016db4 <__gethex+0x290>
 8016dd8:	4621      	mov	r1, r4
 8016dda:	4648      	mov	r0, r9
 8016ddc:	f000 fa90 	bl	8017300 <_Bfree>
 8016de0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016de2:	2300      	movs	r3, #0
 8016de4:	6013      	str	r3, [r2, #0]
 8016de6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8016dea:	e725      	b.n	8016c38 <__gethex+0x114>
 8016dec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d1f2      	bne.n	8016dd8 <__gethex+0x2b4>
 8016df2:	e7df      	b.n	8016db4 <__gethex+0x290>
 8016df4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d1dc      	bne.n	8016db4 <__gethex+0x290>
 8016dfa:	e7ed      	b.n	8016dd8 <__gethex+0x2b4>
 8016dfc:	08018e44 	.word	0x08018e44
 8016e00:	08018fb1 	.word	0x08018fb1
 8016e04:	08018fc2 	.word	0x08018fc2
 8016e08:	f106 38ff 	add.w	r8, r6, #4294967295
 8016e0c:	f1bb 0f00 	cmp.w	fp, #0
 8016e10:	d133      	bne.n	8016e7a <__gethex+0x356>
 8016e12:	f1b8 0f00 	cmp.w	r8, #0
 8016e16:	d004      	beq.n	8016e22 <__gethex+0x2fe>
 8016e18:	4641      	mov	r1, r8
 8016e1a:	4620      	mov	r0, r4
 8016e1c:	f000 febc 	bl	8017b98 <__any_on>
 8016e20:	4683      	mov	fp, r0
 8016e22:	ea4f 1268 	mov.w	r2, r8, asr #5
 8016e26:	2301      	movs	r3, #1
 8016e28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016e2c:	f008 081f 	and.w	r8, r8, #31
 8016e30:	fa03 f308 	lsl.w	r3, r3, r8
 8016e34:	4213      	tst	r3, r2
 8016e36:	4631      	mov	r1, r6
 8016e38:	4620      	mov	r0, r4
 8016e3a:	bf18      	it	ne
 8016e3c:	f04b 0b02 	orrne.w	fp, fp, #2
 8016e40:	1bad      	subs	r5, r5, r6
 8016e42:	f7ff fe07 	bl	8016a54 <rshift>
 8016e46:	687e      	ldr	r6, [r7, #4]
 8016e48:	f04f 0802 	mov.w	r8, #2
 8016e4c:	f1bb 0f00 	cmp.w	fp, #0
 8016e50:	d04a      	beq.n	8016ee8 <__gethex+0x3c4>
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	2b02      	cmp	r3, #2
 8016e56:	d016      	beq.n	8016e86 <__gethex+0x362>
 8016e58:	2b03      	cmp	r3, #3
 8016e5a:	d018      	beq.n	8016e8e <__gethex+0x36a>
 8016e5c:	2b01      	cmp	r3, #1
 8016e5e:	d109      	bne.n	8016e74 <__gethex+0x350>
 8016e60:	f01b 0f02 	tst.w	fp, #2
 8016e64:	d006      	beq.n	8016e74 <__gethex+0x350>
 8016e66:	f8da 3000 	ldr.w	r3, [sl]
 8016e6a:	ea4b 0b03 	orr.w	fp, fp, r3
 8016e6e:	f01b 0f01 	tst.w	fp, #1
 8016e72:	d10f      	bne.n	8016e94 <__gethex+0x370>
 8016e74:	f048 0810 	orr.w	r8, r8, #16
 8016e78:	e036      	b.n	8016ee8 <__gethex+0x3c4>
 8016e7a:	f04f 0b01 	mov.w	fp, #1
 8016e7e:	e7d0      	b.n	8016e22 <__gethex+0x2fe>
 8016e80:	f04f 0801 	mov.w	r8, #1
 8016e84:	e7e2      	b.n	8016e4c <__gethex+0x328>
 8016e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e88:	f1c3 0301 	rsb	r3, r3, #1
 8016e8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d0ef      	beq.n	8016e74 <__gethex+0x350>
 8016e94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016e98:	f104 0214 	add.w	r2, r4, #20
 8016e9c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8016ea0:	9301      	str	r3, [sp, #4]
 8016ea2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	4694      	mov	ip, r2
 8016eaa:	f852 1b04 	ldr.w	r1, [r2], #4
 8016eae:	f1b1 3fff 	cmp.w	r1, #4294967295
 8016eb2:	d01e      	beq.n	8016ef2 <__gethex+0x3ce>
 8016eb4:	3101      	adds	r1, #1
 8016eb6:	f8cc 1000 	str.w	r1, [ip]
 8016eba:	f1b8 0f02 	cmp.w	r8, #2
 8016ebe:	f104 0214 	add.w	r2, r4, #20
 8016ec2:	d13d      	bne.n	8016f40 <__gethex+0x41c>
 8016ec4:	683b      	ldr	r3, [r7, #0]
 8016ec6:	3b01      	subs	r3, #1
 8016ec8:	42ab      	cmp	r3, r5
 8016eca:	d10b      	bne.n	8016ee4 <__gethex+0x3c0>
 8016ecc:	1169      	asrs	r1, r5, #5
 8016ece:	2301      	movs	r3, #1
 8016ed0:	f005 051f 	and.w	r5, r5, #31
 8016ed4:	fa03 f505 	lsl.w	r5, r3, r5
 8016ed8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016edc:	421d      	tst	r5, r3
 8016ede:	bf18      	it	ne
 8016ee0:	f04f 0801 	movne.w	r8, #1
 8016ee4:	f048 0820 	orr.w	r8, r8, #32
 8016ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016eea:	601c      	str	r4, [r3, #0]
 8016eec:	9b02      	ldr	r3, [sp, #8]
 8016eee:	601e      	str	r6, [r3, #0]
 8016ef0:	e6a2      	b.n	8016c38 <__gethex+0x114>
 8016ef2:	4290      	cmp	r0, r2
 8016ef4:	f842 3c04 	str.w	r3, [r2, #-4]
 8016ef8:	d8d6      	bhi.n	8016ea8 <__gethex+0x384>
 8016efa:	68a2      	ldr	r2, [r4, #8]
 8016efc:	4593      	cmp	fp, r2
 8016efe:	db17      	blt.n	8016f30 <__gethex+0x40c>
 8016f00:	6861      	ldr	r1, [r4, #4]
 8016f02:	4648      	mov	r0, r9
 8016f04:	3101      	adds	r1, #1
 8016f06:	f000 f9bb 	bl	8017280 <_Balloc>
 8016f0a:	4682      	mov	sl, r0
 8016f0c:	b918      	cbnz	r0, 8016f16 <__gethex+0x3f2>
 8016f0e:	4b1b      	ldr	r3, [pc, #108]	; (8016f7c <__gethex+0x458>)
 8016f10:	4602      	mov	r2, r0
 8016f12:	2184      	movs	r1, #132	; 0x84
 8016f14:	e6b3      	b.n	8016c7e <__gethex+0x15a>
 8016f16:	6922      	ldr	r2, [r4, #16]
 8016f18:	3202      	adds	r2, #2
 8016f1a:	f104 010c 	add.w	r1, r4, #12
 8016f1e:	0092      	lsls	r2, r2, #2
 8016f20:	300c      	adds	r0, #12
 8016f22:	f7ff fd2e 	bl	8016982 <memcpy>
 8016f26:	4621      	mov	r1, r4
 8016f28:	4648      	mov	r0, r9
 8016f2a:	f000 f9e9 	bl	8017300 <_Bfree>
 8016f2e:	4654      	mov	r4, sl
 8016f30:	6922      	ldr	r2, [r4, #16]
 8016f32:	1c51      	adds	r1, r2, #1
 8016f34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016f38:	6121      	str	r1, [r4, #16]
 8016f3a:	2101      	movs	r1, #1
 8016f3c:	6151      	str	r1, [r2, #20]
 8016f3e:	e7bc      	b.n	8016eba <__gethex+0x396>
 8016f40:	6921      	ldr	r1, [r4, #16]
 8016f42:	4559      	cmp	r1, fp
 8016f44:	dd0b      	ble.n	8016f5e <__gethex+0x43a>
 8016f46:	2101      	movs	r1, #1
 8016f48:	4620      	mov	r0, r4
 8016f4a:	f7ff fd83 	bl	8016a54 <rshift>
 8016f4e:	68bb      	ldr	r3, [r7, #8]
 8016f50:	3601      	adds	r6, #1
 8016f52:	42b3      	cmp	r3, r6
 8016f54:	f6ff aedb 	blt.w	8016d0e <__gethex+0x1ea>
 8016f58:	f04f 0801 	mov.w	r8, #1
 8016f5c:	e7c2      	b.n	8016ee4 <__gethex+0x3c0>
 8016f5e:	f015 051f 	ands.w	r5, r5, #31
 8016f62:	d0f9      	beq.n	8016f58 <__gethex+0x434>
 8016f64:	9b01      	ldr	r3, [sp, #4]
 8016f66:	441a      	add	r2, r3
 8016f68:	f1c5 0520 	rsb	r5, r5, #32
 8016f6c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8016f70:	f000 fa78 	bl	8017464 <__hi0bits>
 8016f74:	42a8      	cmp	r0, r5
 8016f76:	dbe6      	blt.n	8016f46 <__gethex+0x422>
 8016f78:	e7ee      	b.n	8016f58 <__gethex+0x434>
 8016f7a:	bf00      	nop
 8016f7c:	08018fb1 	.word	0x08018fb1

08016f80 <L_shift>:
 8016f80:	f1c2 0208 	rsb	r2, r2, #8
 8016f84:	0092      	lsls	r2, r2, #2
 8016f86:	b570      	push	{r4, r5, r6, lr}
 8016f88:	f1c2 0620 	rsb	r6, r2, #32
 8016f8c:	6843      	ldr	r3, [r0, #4]
 8016f8e:	6804      	ldr	r4, [r0, #0]
 8016f90:	fa03 f506 	lsl.w	r5, r3, r6
 8016f94:	432c      	orrs	r4, r5
 8016f96:	40d3      	lsrs	r3, r2
 8016f98:	6004      	str	r4, [r0, #0]
 8016f9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8016f9e:	4288      	cmp	r0, r1
 8016fa0:	d3f4      	bcc.n	8016f8c <L_shift+0xc>
 8016fa2:	bd70      	pop	{r4, r5, r6, pc}

08016fa4 <__match>:
 8016fa4:	b530      	push	{r4, r5, lr}
 8016fa6:	6803      	ldr	r3, [r0, #0]
 8016fa8:	3301      	adds	r3, #1
 8016faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016fae:	b914      	cbnz	r4, 8016fb6 <__match+0x12>
 8016fb0:	6003      	str	r3, [r0, #0]
 8016fb2:	2001      	movs	r0, #1
 8016fb4:	bd30      	pop	{r4, r5, pc}
 8016fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016fba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016fbe:	2d19      	cmp	r5, #25
 8016fc0:	bf98      	it	ls
 8016fc2:	3220      	addls	r2, #32
 8016fc4:	42a2      	cmp	r2, r4
 8016fc6:	d0f0      	beq.n	8016faa <__match+0x6>
 8016fc8:	2000      	movs	r0, #0
 8016fca:	e7f3      	b.n	8016fb4 <__match+0x10>

08016fcc <__hexnan>:
 8016fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fd0:	680b      	ldr	r3, [r1, #0]
 8016fd2:	6801      	ldr	r1, [r0, #0]
 8016fd4:	115e      	asrs	r6, r3, #5
 8016fd6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016fda:	f013 031f 	ands.w	r3, r3, #31
 8016fde:	b087      	sub	sp, #28
 8016fe0:	bf18      	it	ne
 8016fe2:	3604      	addne	r6, #4
 8016fe4:	2500      	movs	r5, #0
 8016fe6:	1f37      	subs	r7, r6, #4
 8016fe8:	4682      	mov	sl, r0
 8016fea:	4690      	mov	r8, r2
 8016fec:	9301      	str	r3, [sp, #4]
 8016fee:	f846 5c04 	str.w	r5, [r6, #-4]
 8016ff2:	46b9      	mov	r9, r7
 8016ff4:	463c      	mov	r4, r7
 8016ff6:	9502      	str	r5, [sp, #8]
 8016ff8:	46ab      	mov	fp, r5
 8016ffa:	784a      	ldrb	r2, [r1, #1]
 8016ffc:	1c4b      	adds	r3, r1, #1
 8016ffe:	9303      	str	r3, [sp, #12]
 8017000:	b342      	cbz	r2, 8017054 <__hexnan+0x88>
 8017002:	4610      	mov	r0, r2
 8017004:	9105      	str	r1, [sp, #20]
 8017006:	9204      	str	r2, [sp, #16]
 8017008:	f7ff fd76 	bl	8016af8 <__hexdig_fun>
 801700c:	2800      	cmp	r0, #0
 801700e:	d14f      	bne.n	80170b0 <__hexnan+0xe4>
 8017010:	9a04      	ldr	r2, [sp, #16]
 8017012:	9905      	ldr	r1, [sp, #20]
 8017014:	2a20      	cmp	r2, #32
 8017016:	d818      	bhi.n	801704a <__hexnan+0x7e>
 8017018:	9b02      	ldr	r3, [sp, #8]
 801701a:	459b      	cmp	fp, r3
 801701c:	dd13      	ble.n	8017046 <__hexnan+0x7a>
 801701e:	454c      	cmp	r4, r9
 8017020:	d206      	bcs.n	8017030 <__hexnan+0x64>
 8017022:	2d07      	cmp	r5, #7
 8017024:	dc04      	bgt.n	8017030 <__hexnan+0x64>
 8017026:	462a      	mov	r2, r5
 8017028:	4649      	mov	r1, r9
 801702a:	4620      	mov	r0, r4
 801702c:	f7ff ffa8 	bl	8016f80 <L_shift>
 8017030:	4544      	cmp	r4, r8
 8017032:	d950      	bls.n	80170d6 <__hexnan+0x10a>
 8017034:	2300      	movs	r3, #0
 8017036:	f1a4 0904 	sub.w	r9, r4, #4
 801703a:	f844 3c04 	str.w	r3, [r4, #-4]
 801703e:	f8cd b008 	str.w	fp, [sp, #8]
 8017042:	464c      	mov	r4, r9
 8017044:	461d      	mov	r5, r3
 8017046:	9903      	ldr	r1, [sp, #12]
 8017048:	e7d7      	b.n	8016ffa <__hexnan+0x2e>
 801704a:	2a29      	cmp	r2, #41	; 0x29
 801704c:	d155      	bne.n	80170fa <__hexnan+0x12e>
 801704e:	3102      	adds	r1, #2
 8017050:	f8ca 1000 	str.w	r1, [sl]
 8017054:	f1bb 0f00 	cmp.w	fp, #0
 8017058:	d04f      	beq.n	80170fa <__hexnan+0x12e>
 801705a:	454c      	cmp	r4, r9
 801705c:	d206      	bcs.n	801706c <__hexnan+0xa0>
 801705e:	2d07      	cmp	r5, #7
 8017060:	dc04      	bgt.n	801706c <__hexnan+0xa0>
 8017062:	462a      	mov	r2, r5
 8017064:	4649      	mov	r1, r9
 8017066:	4620      	mov	r0, r4
 8017068:	f7ff ff8a 	bl	8016f80 <L_shift>
 801706c:	4544      	cmp	r4, r8
 801706e:	d934      	bls.n	80170da <__hexnan+0x10e>
 8017070:	f1a8 0204 	sub.w	r2, r8, #4
 8017074:	4623      	mov	r3, r4
 8017076:	f853 1b04 	ldr.w	r1, [r3], #4
 801707a:	f842 1f04 	str.w	r1, [r2, #4]!
 801707e:	429f      	cmp	r7, r3
 8017080:	d2f9      	bcs.n	8017076 <__hexnan+0xaa>
 8017082:	1b3b      	subs	r3, r7, r4
 8017084:	f023 0303 	bic.w	r3, r3, #3
 8017088:	3304      	adds	r3, #4
 801708a:	3e03      	subs	r6, #3
 801708c:	3401      	adds	r4, #1
 801708e:	42a6      	cmp	r6, r4
 8017090:	bf38      	it	cc
 8017092:	2304      	movcc	r3, #4
 8017094:	4443      	add	r3, r8
 8017096:	2200      	movs	r2, #0
 8017098:	f843 2b04 	str.w	r2, [r3], #4
 801709c:	429f      	cmp	r7, r3
 801709e:	d2fb      	bcs.n	8017098 <__hexnan+0xcc>
 80170a0:	683b      	ldr	r3, [r7, #0]
 80170a2:	b91b      	cbnz	r3, 80170ac <__hexnan+0xe0>
 80170a4:	4547      	cmp	r7, r8
 80170a6:	d126      	bne.n	80170f6 <__hexnan+0x12a>
 80170a8:	2301      	movs	r3, #1
 80170aa:	603b      	str	r3, [r7, #0]
 80170ac:	2005      	movs	r0, #5
 80170ae:	e025      	b.n	80170fc <__hexnan+0x130>
 80170b0:	3501      	adds	r5, #1
 80170b2:	2d08      	cmp	r5, #8
 80170b4:	f10b 0b01 	add.w	fp, fp, #1
 80170b8:	dd06      	ble.n	80170c8 <__hexnan+0xfc>
 80170ba:	4544      	cmp	r4, r8
 80170bc:	d9c3      	bls.n	8017046 <__hexnan+0x7a>
 80170be:	2300      	movs	r3, #0
 80170c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80170c4:	2501      	movs	r5, #1
 80170c6:	3c04      	subs	r4, #4
 80170c8:	6822      	ldr	r2, [r4, #0]
 80170ca:	f000 000f 	and.w	r0, r0, #15
 80170ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80170d2:	6020      	str	r0, [r4, #0]
 80170d4:	e7b7      	b.n	8017046 <__hexnan+0x7a>
 80170d6:	2508      	movs	r5, #8
 80170d8:	e7b5      	b.n	8017046 <__hexnan+0x7a>
 80170da:	9b01      	ldr	r3, [sp, #4]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d0df      	beq.n	80170a0 <__hexnan+0xd4>
 80170e0:	f1c3 0320 	rsb	r3, r3, #32
 80170e4:	f04f 32ff 	mov.w	r2, #4294967295
 80170e8:	40da      	lsrs	r2, r3
 80170ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80170ee:	4013      	ands	r3, r2
 80170f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80170f4:	e7d4      	b.n	80170a0 <__hexnan+0xd4>
 80170f6:	3f04      	subs	r7, #4
 80170f8:	e7d2      	b.n	80170a0 <__hexnan+0xd4>
 80170fa:	2004      	movs	r0, #4
 80170fc:	b007      	add	sp, #28
 80170fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017104 <sbrk_aligned>:
 8017104:	b570      	push	{r4, r5, r6, lr}
 8017106:	4e0e      	ldr	r6, [pc, #56]	; (8017140 <sbrk_aligned+0x3c>)
 8017108:	460c      	mov	r4, r1
 801710a:	6831      	ldr	r1, [r6, #0]
 801710c:	4605      	mov	r5, r0
 801710e:	b911      	cbnz	r1, 8017116 <sbrk_aligned+0x12>
 8017110:	f001 f920 	bl	8018354 <_sbrk_r>
 8017114:	6030      	str	r0, [r6, #0]
 8017116:	4621      	mov	r1, r4
 8017118:	4628      	mov	r0, r5
 801711a:	f001 f91b 	bl	8018354 <_sbrk_r>
 801711e:	1c43      	adds	r3, r0, #1
 8017120:	d00a      	beq.n	8017138 <sbrk_aligned+0x34>
 8017122:	1cc4      	adds	r4, r0, #3
 8017124:	f024 0403 	bic.w	r4, r4, #3
 8017128:	42a0      	cmp	r0, r4
 801712a:	d007      	beq.n	801713c <sbrk_aligned+0x38>
 801712c:	1a21      	subs	r1, r4, r0
 801712e:	4628      	mov	r0, r5
 8017130:	f001 f910 	bl	8018354 <_sbrk_r>
 8017134:	3001      	adds	r0, #1
 8017136:	d101      	bne.n	801713c <sbrk_aligned+0x38>
 8017138:	f04f 34ff 	mov.w	r4, #4294967295
 801713c:	4620      	mov	r0, r4
 801713e:	bd70      	pop	{r4, r5, r6, pc}
 8017140:	200036bc 	.word	0x200036bc

08017144 <_malloc_r>:
 8017144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017148:	1ccd      	adds	r5, r1, #3
 801714a:	f025 0503 	bic.w	r5, r5, #3
 801714e:	3508      	adds	r5, #8
 8017150:	2d0c      	cmp	r5, #12
 8017152:	bf38      	it	cc
 8017154:	250c      	movcc	r5, #12
 8017156:	2d00      	cmp	r5, #0
 8017158:	4607      	mov	r7, r0
 801715a:	db01      	blt.n	8017160 <_malloc_r+0x1c>
 801715c:	42a9      	cmp	r1, r5
 801715e:	d905      	bls.n	801716c <_malloc_r+0x28>
 8017160:	230c      	movs	r3, #12
 8017162:	603b      	str	r3, [r7, #0]
 8017164:	2600      	movs	r6, #0
 8017166:	4630      	mov	r0, r6
 8017168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801716c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017240 <_malloc_r+0xfc>
 8017170:	f000 f87a 	bl	8017268 <__malloc_lock>
 8017174:	f8d8 3000 	ldr.w	r3, [r8]
 8017178:	461c      	mov	r4, r3
 801717a:	bb5c      	cbnz	r4, 80171d4 <_malloc_r+0x90>
 801717c:	4629      	mov	r1, r5
 801717e:	4638      	mov	r0, r7
 8017180:	f7ff ffc0 	bl	8017104 <sbrk_aligned>
 8017184:	1c43      	adds	r3, r0, #1
 8017186:	4604      	mov	r4, r0
 8017188:	d155      	bne.n	8017236 <_malloc_r+0xf2>
 801718a:	f8d8 4000 	ldr.w	r4, [r8]
 801718e:	4626      	mov	r6, r4
 8017190:	2e00      	cmp	r6, #0
 8017192:	d145      	bne.n	8017220 <_malloc_r+0xdc>
 8017194:	2c00      	cmp	r4, #0
 8017196:	d048      	beq.n	801722a <_malloc_r+0xe6>
 8017198:	6823      	ldr	r3, [r4, #0]
 801719a:	4631      	mov	r1, r6
 801719c:	4638      	mov	r0, r7
 801719e:	eb04 0903 	add.w	r9, r4, r3
 80171a2:	f001 f8d7 	bl	8018354 <_sbrk_r>
 80171a6:	4581      	cmp	r9, r0
 80171a8:	d13f      	bne.n	801722a <_malloc_r+0xe6>
 80171aa:	6821      	ldr	r1, [r4, #0]
 80171ac:	1a6d      	subs	r5, r5, r1
 80171ae:	4629      	mov	r1, r5
 80171b0:	4638      	mov	r0, r7
 80171b2:	f7ff ffa7 	bl	8017104 <sbrk_aligned>
 80171b6:	3001      	adds	r0, #1
 80171b8:	d037      	beq.n	801722a <_malloc_r+0xe6>
 80171ba:	6823      	ldr	r3, [r4, #0]
 80171bc:	442b      	add	r3, r5
 80171be:	6023      	str	r3, [r4, #0]
 80171c0:	f8d8 3000 	ldr.w	r3, [r8]
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d038      	beq.n	801723a <_malloc_r+0xf6>
 80171c8:	685a      	ldr	r2, [r3, #4]
 80171ca:	42a2      	cmp	r2, r4
 80171cc:	d12b      	bne.n	8017226 <_malloc_r+0xe2>
 80171ce:	2200      	movs	r2, #0
 80171d0:	605a      	str	r2, [r3, #4]
 80171d2:	e00f      	b.n	80171f4 <_malloc_r+0xb0>
 80171d4:	6822      	ldr	r2, [r4, #0]
 80171d6:	1b52      	subs	r2, r2, r5
 80171d8:	d41f      	bmi.n	801721a <_malloc_r+0xd6>
 80171da:	2a0b      	cmp	r2, #11
 80171dc:	d917      	bls.n	801720e <_malloc_r+0xca>
 80171de:	1961      	adds	r1, r4, r5
 80171e0:	42a3      	cmp	r3, r4
 80171e2:	6025      	str	r5, [r4, #0]
 80171e4:	bf18      	it	ne
 80171e6:	6059      	strne	r1, [r3, #4]
 80171e8:	6863      	ldr	r3, [r4, #4]
 80171ea:	bf08      	it	eq
 80171ec:	f8c8 1000 	streq.w	r1, [r8]
 80171f0:	5162      	str	r2, [r4, r5]
 80171f2:	604b      	str	r3, [r1, #4]
 80171f4:	4638      	mov	r0, r7
 80171f6:	f104 060b 	add.w	r6, r4, #11
 80171fa:	f000 f83b 	bl	8017274 <__malloc_unlock>
 80171fe:	f026 0607 	bic.w	r6, r6, #7
 8017202:	1d23      	adds	r3, r4, #4
 8017204:	1af2      	subs	r2, r6, r3
 8017206:	d0ae      	beq.n	8017166 <_malloc_r+0x22>
 8017208:	1b9b      	subs	r3, r3, r6
 801720a:	50a3      	str	r3, [r4, r2]
 801720c:	e7ab      	b.n	8017166 <_malloc_r+0x22>
 801720e:	42a3      	cmp	r3, r4
 8017210:	6862      	ldr	r2, [r4, #4]
 8017212:	d1dd      	bne.n	80171d0 <_malloc_r+0x8c>
 8017214:	f8c8 2000 	str.w	r2, [r8]
 8017218:	e7ec      	b.n	80171f4 <_malloc_r+0xb0>
 801721a:	4623      	mov	r3, r4
 801721c:	6864      	ldr	r4, [r4, #4]
 801721e:	e7ac      	b.n	801717a <_malloc_r+0x36>
 8017220:	4634      	mov	r4, r6
 8017222:	6876      	ldr	r6, [r6, #4]
 8017224:	e7b4      	b.n	8017190 <_malloc_r+0x4c>
 8017226:	4613      	mov	r3, r2
 8017228:	e7cc      	b.n	80171c4 <_malloc_r+0x80>
 801722a:	230c      	movs	r3, #12
 801722c:	603b      	str	r3, [r7, #0]
 801722e:	4638      	mov	r0, r7
 8017230:	f000 f820 	bl	8017274 <__malloc_unlock>
 8017234:	e797      	b.n	8017166 <_malloc_r+0x22>
 8017236:	6025      	str	r5, [r4, #0]
 8017238:	e7dc      	b.n	80171f4 <_malloc_r+0xb0>
 801723a:	605b      	str	r3, [r3, #4]
 801723c:	deff      	udf	#255	; 0xff
 801723e:	bf00      	nop
 8017240:	200036b8 	.word	0x200036b8

08017244 <__ascii_mbtowc>:
 8017244:	b082      	sub	sp, #8
 8017246:	b901      	cbnz	r1, 801724a <__ascii_mbtowc+0x6>
 8017248:	a901      	add	r1, sp, #4
 801724a:	b142      	cbz	r2, 801725e <__ascii_mbtowc+0x1a>
 801724c:	b14b      	cbz	r3, 8017262 <__ascii_mbtowc+0x1e>
 801724e:	7813      	ldrb	r3, [r2, #0]
 8017250:	600b      	str	r3, [r1, #0]
 8017252:	7812      	ldrb	r2, [r2, #0]
 8017254:	1e10      	subs	r0, r2, #0
 8017256:	bf18      	it	ne
 8017258:	2001      	movne	r0, #1
 801725a:	b002      	add	sp, #8
 801725c:	4770      	bx	lr
 801725e:	4610      	mov	r0, r2
 8017260:	e7fb      	b.n	801725a <__ascii_mbtowc+0x16>
 8017262:	f06f 0001 	mvn.w	r0, #1
 8017266:	e7f8      	b.n	801725a <__ascii_mbtowc+0x16>

08017268 <__malloc_lock>:
 8017268:	4801      	ldr	r0, [pc, #4]	; (8017270 <__malloc_lock+0x8>)
 801726a:	f7ff bb80 	b.w	801696e <__retarget_lock_acquire_recursive>
 801726e:	bf00      	nop
 8017270:	200036b4 	.word	0x200036b4

08017274 <__malloc_unlock>:
 8017274:	4801      	ldr	r0, [pc, #4]	; (801727c <__malloc_unlock+0x8>)
 8017276:	f7ff bb7b 	b.w	8016970 <__retarget_lock_release_recursive>
 801727a:	bf00      	nop
 801727c:	200036b4 	.word	0x200036b4

08017280 <_Balloc>:
 8017280:	b570      	push	{r4, r5, r6, lr}
 8017282:	69c6      	ldr	r6, [r0, #28]
 8017284:	4604      	mov	r4, r0
 8017286:	460d      	mov	r5, r1
 8017288:	b976      	cbnz	r6, 80172a8 <_Balloc+0x28>
 801728a:	2010      	movs	r0, #16
 801728c:	f001 f8a6 	bl	80183dc <malloc>
 8017290:	4602      	mov	r2, r0
 8017292:	61e0      	str	r0, [r4, #28]
 8017294:	b920      	cbnz	r0, 80172a0 <_Balloc+0x20>
 8017296:	4b18      	ldr	r3, [pc, #96]	; (80172f8 <_Balloc+0x78>)
 8017298:	4818      	ldr	r0, [pc, #96]	; (80172fc <_Balloc+0x7c>)
 801729a:	216b      	movs	r1, #107	; 0x6b
 801729c:	f001 f86a 	bl	8018374 <__assert_func>
 80172a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80172a4:	6006      	str	r6, [r0, #0]
 80172a6:	60c6      	str	r6, [r0, #12]
 80172a8:	69e6      	ldr	r6, [r4, #28]
 80172aa:	68f3      	ldr	r3, [r6, #12]
 80172ac:	b183      	cbz	r3, 80172d0 <_Balloc+0x50>
 80172ae:	69e3      	ldr	r3, [r4, #28]
 80172b0:	68db      	ldr	r3, [r3, #12]
 80172b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80172b6:	b9b8      	cbnz	r0, 80172e8 <_Balloc+0x68>
 80172b8:	2101      	movs	r1, #1
 80172ba:	fa01 f605 	lsl.w	r6, r1, r5
 80172be:	1d72      	adds	r2, r6, #5
 80172c0:	0092      	lsls	r2, r2, #2
 80172c2:	4620      	mov	r0, r4
 80172c4:	f001 f874 	bl	80183b0 <_calloc_r>
 80172c8:	b160      	cbz	r0, 80172e4 <_Balloc+0x64>
 80172ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80172ce:	e00e      	b.n	80172ee <_Balloc+0x6e>
 80172d0:	2221      	movs	r2, #33	; 0x21
 80172d2:	2104      	movs	r1, #4
 80172d4:	4620      	mov	r0, r4
 80172d6:	f001 f86b 	bl	80183b0 <_calloc_r>
 80172da:	69e3      	ldr	r3, [r4, #28]
 80172dc:	60f0      	str	r0, [r6, #12]
 80172de:	68db      	ldr	r3, [r3, #12]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d1e4      	bne.n	80172ae <_Balloc+0x2e>
 80172e4:	2000      	movs	r0, #0
 80172e6:	bd70      	pop	{r4, r5, r6, pc}
 80172e8:	6802      	ldr	r2, [r0, #0]
 80172ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80172ee:	2300      	movs	r3, #0
 80172f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80172f4:	e7f7      	b.n	80172e6 <_Balloc+0x66>
 80172f6:	bf00      	nop
 80172f8:	08019022 	.word	0x08019022
 80172fc:	08019039 	.word	0x08019039

08017300 <_Bfree>:
 8017300:	b570      	push	{r4, r5, r6, lr}
 8017302:	69c6      	ldr	r6, [r0, #28]
 8017304:	4605      	mov	r5, r0
 8017306:	460c      	mov	r4, r1
 8017308:	b976      	cbnz	r6, 8017328 <_Bfree+0x28>
 801730a:	2010      	movs	r0, #16
 801730c:	f001 f866 	bl	80183dc <malloc>
 8017310:	4602      	mov	r2, r0
 8017312:	61e8      	str	r0, [r5, #28]
 8017314:	b920      	cbnz	r0, 8017320 <_Bfree+0x20>
 8017316:	4b09      	ldr	r3, [pc, #36]	; (801733c <_Bfree+0x3c>)
 8017318:	4809      	ldr	r0, [pc, #36]	; (8017340 <_Bfree+0x40>)
 801731a:	218f      	movs	r1, #143	; 0x8f
 801731c:	f001 f82a 	bl	8018374 <__assert_func>
 8017320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017324:	6006      	str	r6, [r0, #0]
 8017326:	60c6      	str	r6, [r0, #12]
 8017328:	b13c      	cbz	r4, 801733a <_Bfree+0x3a>
 801732a:	69eb      	ldr	r3, [r5, #28]
 801732c:	6862      	ldr	r2, [r4, #4]
 801732e:	68db      	ldr	r3, [r3, #12]
 8017330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017334:	6021      	str	r1, [r4, #0]
 8017336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801733a:	bd70      	pop	{r4, r5, r6, pc}
 801733c:	08019022 	.word	0x08019022
 8017340:	08019039 	.word	0x08019039

08017344 <__multadd>:
 8017344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017348:	690d      	ldr	r5, [r1, #16]
 801734a:	4607      	mov	r7, r0
 801734c:	460c      	mov	r4, r1
 801734e:	461e      	mov	r6, r3
 8017350:	f101 0c14 	add.w	ip, r1, #20
 8017354:	2000      	movs	r0, #0
 8017356:	f8dc 3000 	ldr.w	r3, [ip]
 801735a:	b299      	uxth	r1, r3
 801735c:	fb02 6101 	mla	r1, r2, r1, r6
 8017360:	0c1e      	lsrs	r6, r3, #16
 8017362:	0c0b      	lsrs	r3, r1, #16
 8017364:	fb02 3306 	mla	r3, r2, r6, r3
 8017368:	b289      	uxth	r1, r1
 801736a:	3001      	adds	r0, #1
 801736c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017370:	4285      	cmp	r5, r0
 8017372:	f84c 1b04 	str.w	r1, [ip], #4
 8017376:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801737a:	dcec      	bgt.n	8017356 <__multadd+0x12>
 801737c:	b30e      	cbz	r6, 80173c2 <__multadd+0x7e>
 801737e:	68a3      	ldr	r3, [r4, #8]
 8017380:	42ab      	cmp	r3, r5
 8017382:	dc19      	bgt.n	80173b8 <__multadd+0x74>
 8017384:	6861      	ldr	r1, [r4, #4]
 8017386:	4638      	mov	r0, r7
 8017388:	3101      	adds	r1, #1
 801738a:	f7ff ff79 	bl	8017280 <_Balloc>
 801738e:	4680      	mov	r8, r0
 8017390:	b928      	cbnz	r0, 801739e <__multadd+0x5a>
 8017392:	4602      	mov	r2, r0
 8017394:	4b0c      	ldr	r3, [pc, #48]	; (80173c8 <__multadd+0x84>)
 8017396:	480d      	ldr	r0, [pc, #52]	; (80173cc <__multadd+0x88>)
 8017398:	21ba      	movs	r1, #186	; 0xba
 801739a:	f000 ffeb 	bl	8018374 <__assert_func>
 801739e:	6922      	ldr	r2, [r4, #16]
 80173a0:	3202      	adds	r2, #2
 80173a2:	f104 010c 	add.w	r1, r4, #12
 80173a6:	0092      	lsls	r2, r2, #2
 80173a8:	300c      	adds	r0, #12
 80173aa:	f7ff faea 	bl	8016982 <memcpy>
 80173ae:	4621      	mov	r1, r4
 80173b0:	4638      	mov	r0, r7
 80173b2:	f7ff ffa5 	bl	8017300 <_Bfree>
 80173b6:	4644      	mov	r4, r8
 80173b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80173bc:	3501      	adds	r5, #1
 80173be:	615e      	str	r6, [r3, #20]
 80173c0:	6125      	str	r5, [r4, #16]
 80173c2:	4620      	mov	r0, r4
 80173c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173c8:	08018fb1 	.word	0x08018fb1
 80173cc:	08019039 	.word	0x08019039

080173d0 <__s2b>:
 80173d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173d4:	460c      	mov	r4, r1
 80173d6:	4615      	mov	r5, r2
 80173d8:	461f      	mov	r7, r3
 80173da:	2209      	movs	r2, #9
 80173dc:	3308      	adds	r3, #8
 80173de:	4606      	mov	r6, r0
 80173e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80173e4:	2100      	movs	r1, #0
 80173e6:	2201      	movs	r2, #1
 80173e8:	429a      	cmp	r2, r3
 80173ea:	db09      	blt.n	8017400 <__s2b+0x30>
 80173ec:	4630      	mov	r0, r6
 80173ee:	f7ff ff47 	bl	8017280 <_Balloc>
 80173f2:	b940      	cbnz	r0, 8017406 <__s2b+0x36>
 80173f4:	4602      	mov	r2, r0
 80173f6:	4b19      	ldr	r3, [pc, #100]	; (801745c <__s2b+0x8c>)
 80173f8:	4819      	ldr	r0, [pc, #100]	; (8017460 <__s2b+0x90>)
 80173fa:	21d3      	movs	r1, #211	; 0xd3
 80173fc:	f000 ffba 	bl	8018374 <__assert_func>
 8017400:	0052      	lsls	r2, r2, #1
 8017402:	3101      	adds	r1, #1
 8017404:	e7f0      	b.n	80173e8 <__s2b+0x18>
 8017406:	9b08      	ldr	r3, [sp, #32]
 8017408:	6143      	str	r3, [r0, #20]
 801740a:	2d09      	cmp	r5, #9
 801740c:	f04f 0301 	mov.w	r3, #1
 8017410:	6103      	str	r3, [r0, #16]
 8017412:	dd16      	ble.n	8017442 <__s2b+0x72>
 8017414:	f104 0909 	add.w	r9, r4, #9
 8017418:	46c8      	mov	r8, r9
 801741a:	442c      	add	r4, r5
 801741c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017420:	4601      	mov	r1, r0
 8017422:	3b30      	subs	r3, #48	; 0x30
 8017424:	220a      	movs	r2, #10
 8017426:	4630      	mov	r0, r6
 8017428:	f7ff ff8c 	bl	8017344 <__multadd>
 801742c:	45a0      	cmp	r8, r4
 801742e:	d1f5      	bne.n	801741c <__s2b+0x4c>
 8017430:	f1a5 0408 	sub.w	r4, r5, #8
 8017434:	444c      	add	r4, r9
 8017436:	1b2d      	subs	r5, r5, r4
 8017438:	1963      	adds	r3, r4, r5
 801743a:	42bb      	cmp	r3, r7
 801743c:	db04      	blt.n	8017448 <__s2b+0x78>
 801743e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017442:	340a      	adds	r4, #10
 8017444:	2509      	movs	r5, #9
 8017446:	e7f6      	b.n	8017436 <__s2b+0x66>
 8017448:	f814 3b01 	ldrb.w	r3, [r4], #1
 801744c:	4601      	mov	r1, r0
 801744e:	3b30      	subs	r3, #48	; 0x30
 8017450:	220a      	movs	r2, #10
 8017452:	4630      	mov	r0, r6
 8017454:	f7ff ff76 	bl	8017344 <__multadd>
 8017458:	e7ee      	b.n	8017438 <__s2b+0x68>
 801745a:	bf00      	nop
 801745c:	08018fb1 	.word	0x08018fb1
 8017460:	08019039 	.word	0x08019039

08017464 <__hi0bits>:
 8017464:	0c03      	lsrs	r3, r0, #16
 8017466:	041b      	lsls	r3, r3, #16
 8017468:	b9d3      	cbnz	r3, 80174a0 <__hi0bits+0x3c>
 801746a:	0400      	lsls	r0, r0, #16
 801746c:	2310      	movs	r3, #16
 801746e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017472:	bf04      	itt	eq
 8017474:	0200      	lsleq	r0, r0, #8
 8017476:	3308      	addeq	r3, #8
 8017478:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801747c:	bf04      	itt	eq
 801747e:	0100      	lsleq	r0, r0, #4
 8017480:	3304      	addeq	r3, #4
 8017482:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017486:	bf04      	itt	eq
 8017488:	0080      	lsleq	r0, r0, #2
 801748a:	3302      	addeq	r3, #2
 801748c:	2800      	cmp	r0, #0
 801748e:	db05      	blt.n	801749c <__hi0bits+0x38>
 8017490:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017494:	f103 0301 	add.w	r3, r3, #1
 8017498:	bf08      	it	eq
 801749a:	2320      	moveq	r3, #32
 801749c:	4618      	mov	r0, r3
 801749e:	4770      	bx	lr
 80174a0:	2300      	movs	r3, #0
 80174a2:	e7e4      	b.n	801746e <__hi0bits+0xa>

080174a4 <__lo0bits>:
 80174a4:	6803      	ldr	r3, [r0, #0]
 80174a6:	f013 0207 	ands.w	r2, r3, #7
 80174aa:	d00c      	beq.n	80174c6 <__lo0bits+0x22>
 80174ac:	07d9      	lsls	r1, r3, #31
 80174ae:	d422      	bmi.n	80174f6 <__lo0bits+0x52>
 80174b0:	079a      	lsls	r2, r3, #30
 80174b2:	bf49      	itett	mi
 80174b4:	085b      	lsrmi	r3, r3, #1
 80174b6:	089b      	lsrpl	r3, r3, #2
 80174b8:	6003      	strmi	r3, [r0, #0]
 80174ba:	2201      	movmi	r2, #1
 80174bc:	bf5c      	itt	pl
 80174be:	6003      	strpl	r3, [r0, #0]
 80174c0:	2202      	movpl	r2, #2
 80174c2:	4610      	mov	r0, r2
 80174c4:	4770      	bx	lr
 80174c6:	b299      	uxth	r1, r3
 80174c8:	b909      	cbnz	r1, 80174ce <__lo0bits+0x2a>
 80174ca:	0c1b      	lsrs	r3, r3, #16
 80174cc:	2210      	movs	r2, #16
 80174ce:	b2d9      	uxtb	r1, r3
 80174d0:	b909      	cbnz	r1, 80174d6 <__lo0bits+0x32>
 80174d2:	3208      	adds	r2, #8
 80174d4:	0a1b      	lsrs	r3, r3, #8
 80174d6:	0719      	lsls	r1, r3, #28
 80174d8:	bf04      	itt	eq
 80174da:	091b      	lsreq	r3, r3, #4
 80174dc:	3204      	addeq	r2, #4
 80174de:	0799      	lsls	r1, r3, #30
 80174e0:	bf04      	itt	eq
 80174e2:	089b      	lsreq	r3, r3, #2
 80174e4:	3202      	addeq	r2, #2
 80174e6:	07d9      	lsls	r1, r3, #31
 80174e8:	d403      	bmi.n	80174f2 <__lo0bits+0x4e>
 80174ea:	085b      	lsrs	r3, r3, #1
 80174ec:	f102 0201 	add.w	r2, r2, #1
 80174f0:	d003      	beq.n	80174fa <__lo0bits+0x56>
 80174f2:	6003      	str	r3, [r0, #0]
 80174f4:	e7e5      	b.n	80174c2 <__lo0bits+0x1e>
 80174f6:	2200      	movs	r2, #0
 80174f8:	e7e3      	b.n	80174c2 <__lo0bits+0x1e>
 80174fa:	2220      	movs	r2, #32
 80174fc:	e7e1      	b.n	80174c2 <__lo0bits+0x1e>
	...

08017500 <__i2b>:
 8017500:	b510      	push	{r4, lr}
 8017502:	460c      	mov	r4, r1
 8017504:	2101      	movs	r1, #1
 8017506:	f7ff febb 	bl	8017280 <_Balloc>
 801750a:	4602      	mov	r2, r0
 801750c:	b928      	cbnz	r0, 801751a <__i2b+0x1a>
 801750e:	4b05      	ldr	r3, [pc, #20]	; (8017524 <__i2b+0x24>)
 8017510:	4805      	ldr	r0, [pc, #20]	; (8017528 <__i2b+0x28>)
 8017512:	f240 1145 	movw	r1, #325	; 0x145
 8017516:	f000 ff2d 	bl	8018374 <__assert_func>
 801751a:	2301      	movs	r3, #1
 801751c:	6144      	str	r4, [r0, #20]
 801751e:	6103      	str	r3, [r0, #16]
 8017520:	bd10      	pop	{r4, pc}
 8017522:	bf00      	nop
 8017524:	08018fb1 	.word	0x08018fb1
 8017528:	08019039 	.word	0x08019039

0801752c <__multiply>:
 801752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017530:	4691      	mov	r9, r2
 8017532:	690a      	ldr	r2, [r1, #16]
 8017534:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017538:	429a      	cmp	r2, r3
 801753a:	bfb8      	it	lt
 801753c:	460b      	movlt	r3, r1
 801753e:	460c      	mov	r4, r1
 8017540:	bfbc      	itt	lt
 8017542:	464c      	movlt	r4, r9
 8017544:	4699      	movlt	r9, r3
 8017546:	6927      	ldr	r7, [r4, #16]
 8017548:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801754c:	68a3      	ldr	r3, [r4, #8]
 801754e:	6861      	ldr	r1, [r4, #4]
 8017550:	eb07 060a 	add.w	r6, r7, sl
 8017554:	42b3      	cmp	r3, r6
 8017556:	b085      	sub	sp, #20
 8017558:	bfb8      	it	lt
 801755a:	3101      	addlt	r1, #1
 801755c:	f7ff fe90 	bl	8017280 <_Balloc>
 8017560:	b930      	cbnz	r0, 8017570 <__multiply+0x44>
 8017562:	4602      	mov	r2, r0
 8017564:	4b44      	ldr	r3, [pc, #272]	; (8017678 <__multiply+0x14c>)
 8017566:	4845      	ldr	r0, [pc, #276]	; (801767c <__multiply+0x150>)
 8017568:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801756c:	f000 ff02 	bl	8018374 <__assert_func>
 8017570:	f100 0514 	add.w	r5, r0, #20
 8017574:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017578:	462b      	mov	r3, r5
 801757a:	2200      	movs	r2, #0
 801757c:	4543      	cmp	r3, r8
 801757e:	d321      	bcc.n	80175c4 <__multiply+0x98>
 8017580:	f104 0314 	add.w	r3, r4, #20
 8017584:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017588:	f109 0314 	add.w	r3, r9, #20
 801758c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017590:	9202      	str	r2, [sp, #8]
 8017592:	1b3a      	subs	r2, r7, r4
 8017594:	3a15      	subs	r2, #21
 8017596:	f022 0203 	bic.w	r2, r2, #3
 801759a:	3204      	adds	r2, #4
 801759c:	f104 0115 	add.w	r1, r4, #21
 80175a0:	428f      	cmp	r7, r1
 80175a2:	bf38      	it	cc
 80175a4:	2204      	movcc	r2, #4
 80175a6:	9201      	str	r2, [sp, #4]
 80175a8:	9a02      	ldr	r2, [sp, #8]
 80175aa:	9303      	str	r3, [sp, #12]
 80175ac:	429a      	cmp	r2, r3
 80175ae:	d80c      	bhi.n	80175ca <__multiply+0x9e>
 80175b0:	2e00      	cmp	r6, #0
 80175b2:	dd03      	ble.n	80175bc <__multiply+0x90>
 80175b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d05b      	beq.n	8017674 <__multiply+0x148>
 80175bc:	6106      	str	r6, [r0, #16]
 80175be:	b005      	add	sp, #20
 80175c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175c4:	f843 2b04 	str.w	r2, [r3], #4
 80175c8:	e7d8      	b.n	801757c <__multiply+0x50>
 80175ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80175ce:	f1ba 0f00 	cmp.w	sl, #0
 80175d2:	d024      	beq.n	801761e <__multiply+0xf2>
 80175d4:	f104 0e14 	add.w	lr, r4, #20
 80175d8:	46a9      	mov	r9, r5
 80175da:	f04f 0c00 	mov.w	ip, #0
 80175de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80175e2:	f8d9 1000 	ldr.w	r1, [r9]
 80175e6:	fa1f fb82 	uxth.w	fp, r2
 80175ea:	b289      	uxth	r1, r1
 80175ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80175f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80175f4:	f8d9 2000 	ldr.w	r2, [r9]
 80175f8:	4461      	add	r1, ip
 80175fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80175fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8017602:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017606:	b289      	uxth	r1, r1
 8017608:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801760c:	4577      	cmp	r7, lr
 801760e:	f849 1b04 	str.w	r1, [r9], #4
 8017612:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017616:	d8e2      	bhi.n	80175de <__multiply+0xb2>
 8017618:	9a01      	ldr	r2, [sp, #4]
 801761a:	f845 c002 	str.w	ip, [r5, r2]
 801761e:	9a03      	ldr	r2, [sp, #12]
 8017620:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017624:	3304      	adds	r3, #4
 8017626:	f1b9 0f00 	cmp.w	r9, #0
 801762a:	d021      	beq.n	8017670 <__multiply+0x144>
 801762c:	6829      	ldr	r1, [r5, #0]
 801762e:	f104 0c14 	add.w	ip, r4, #20
 8017632:	46ae      	mov	lr, r5
 8017634:	f04f 0a00 	mov.w	sl, #0
 8017638:	f8bc b000 	ldrh.w	fp, [ip]
 801763c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017640:	fb09 220b 	mla	r2, r9, fp, r2
 8017644:	4452      	add	r2, sl
 8017646:	b289      	uxth	r1, r1
 8017648:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801764c:	f84e 1b04 	str.w	r1, [lr], #4
 8017650:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017654:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017658:	f8be 1000 	ldrh.w	r1, [lr]
 801765c:	fb09 110a 	mla	r1, r9, sl, r1
 8017660:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8017664:	4567      	cmp	r7, ip
 8017666:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801766a:	d8e5      	bhi.n	8017638 <__multiply+0x10c>
 801766c:	9a01      	ldr	r2, [sp, #4]
 801766e:	50a9      	str	r1, [r5, r2]
 8017670:	3504      	adds	r5, #4
 8017672:	e799      	b.n	80175a8 <__multiply+0x7c>
 8017674:	3e01      	subs	r6, #1
 8017676:	e79b      	b.n	80175b0 <__multiply+0x84>
 8017678:	08018fb1 	.word	0x08018fb1
 801767c:	08019039 	.word	0x08019039

08017680 <__pow5mult>:
 8017680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017684:	4615      	mov	r5, r2
 8017686:	f012 0203 	ands.w	r2, r2, #3
 801768a:	4606      	mov	r6, r0
 801768c:	460f      	mov	r7, r1
 801768e:	d007      	beq.n	80176a0 <__pow5mult+0x20>
 8017690:	4c25      	ldr	r4, [pc, #148]	; (8017728 <__pow5mult+0xa8>)
 8017692:	3a01      	subs	r2, #1
 8017694:	2300      	movs	r3, #0
 8017696:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801769a:	f7ff fe53 	bl	8017344 <__multadd>
 801769e:	4607      	mov	r7, r0
 80176a0:	10ad      	asrs	r5, r5, #2
 80176a2:	d03d      	beq.n	8017720 <__pow5mult+0xa0>
 80176a4:	69f4      	ldr	r4, [r6, #28]
 80176a6:	b97c      	cbnz	r4, 80176c8 <__pow5mult+0x48>
 80176a8:	2010      	movs	r0, #16
 80176aa:	f000 fe97 	bl	80183dc <malloc>
 80176ae:	4602      	mov	r2, r0
 80176b0:	61f0      	str	r0, [r6, #28]
 80176b2:	b928      	cbnz	r0, 80176c0 <__pow5mult+0x40>
 80176b4:	4b1d      	ldr	r3, [pc, #116]	; (801772c <__pow5mult+0xac>)
 80176b6:	481e      	ldr	r0, [pc, #120]	; (8017730 <__pow5mult+0xb0>)
 80176b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80176bc:	f000 fe5a 	bl	8018374 <__assert_func>
 80176c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80176c4:	6004      	str	r4, [r0, #0]
 80176c6:	60c4      	str	r4, [r0, #12]
 80176c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80176cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80176d0:	b94c      	cbnz	r4, 80176e6 <__pow5mult+0x66>
 80176d2:	f240 2171 	movw	r1, #625	; 0x271
 80176d6:	4630      	mov	r0, r6
 80176d8:	f7ff ff12 	bl	8017500 <__i2b>
 80176dc:	2300      	movs	r3, #0
 80176de:	f8c8 0008 	str.w	r0, [r8, #8]
 80176e2:	4604      	mov	r4, r0
 80176e4:	6003      	str	r3, [r0, #0]
 80176e6:	f04f 0900 	mov.w	r9, #0
 80176ea:	07eb      	lsls	r3, r5, #31
 80176ec:	d50a      	bpl.n	8017704 <__pow5mult+0x84>
 80176ee:	4639      	mov	r1, r7
 80176f0:	4622      	mov	r2, r4
 80176f2:	4630      	mov	r0, r6
 80176f4:	f7ff ff1a 	bl	801752c <__multiply>
 80176f8:	4639      	mov	r1, r7
 80176fa:	4680      	mov	r8, r0
 80176fc:	4630      	mov	r0, r6
 80176fe:	f7ff fdff 	bl	8017300 <_Bfree>
 8017702:	4647      	mov	r7, r8
 8017704:	106d      	asrs	r5, r5, #1
 8017706:	d00b      	beq.n	8017720 <__pow5mult+0xa0>
 8017708:	6820      	ldr	r0, [r4, #0]
 801770a:	b938      	cbnz	r0, 801771c <__pow5mult+0x9c>
 801770c:	4622      	mov	r2, r4
 801770e:	4621      	mov	r1, r4
 8017710:	4630      	mov	r0, r6
 8017712:	f7ff ff0b 	bl	801752c <__multiply>
 8017716:	6020      	str	r0, [r4, #0]
 8017718:	f8c0 9000 	str.w	r9, [r0]
 801771c:	4604      	mov	r4, r0
 801771e:	e7e4      	b.n	80176ea <__pow5mult+0x6a>
 8017720:	4638      	mov	r0, r7
 8017722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017726:	bf00      	nop
 8017728:	08019188 	.word	0x08019188
 801772c:	08019022 	.word	0x08019022
 8017730:	08019039 	.word	0x08019039

08017734 <__lshift>:
 8017734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017738:	460c      	mov	r4, r1
 801773a:	6849      	ldr	r1, [r1, #4]
 801773c:	6923      	ldr	r3, [r4, #16]
 801773e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017742:	68a3      	ldr	r3, [r4, #8]
 8017744:	4607      	mov	r7, r0
 8017746:	4691      	mov	r9, r2
 8017748:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801774c:	f108 0601 	add.w	r6, r8, #1
 8017750:	42b3      	cmp	r3, r6
 8017752:	db0b      	blt.n	801776c <__lshift+0x38>
 8017754:	4638      	mov	r0, r7
 8017756:	f7ff fd93 	bl	8017280 <_Balloc>
 801775a:	4605      	mov	r5, r0
 801775c:	b948      	cbnz	r0, 8017772 <__lshift+0x3e>
 801775e:	4602      	mov	r2, r0
 8017760:	4b28      	ldr	r3, [pc, #160]	; (8017804 <__lshift+0xd0>)
 8017762:	4829      	ldr	r0, [pc, #164]	; (8017808 <__lshift+0xd4>)
 8017764:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8017768:	f000 fe04 	bl	8018374 <__assert_func>
 801776c:	3101      	adds	r1, #1
 801776e:	005b      	lsls	r3, r3, #1
 8017770:	e7ee      	b.n	8017750 <__lshift+0x1c>
 8017772:	2300      	movs	r3, #0
 8017774:	f100 0114 	add.w	r1, r0, #20
 8017778:	f100 0210 	add.w	r2, r0, #16
 801777c:	4618      	mov	r0, r3
 801777e:	4553      	cmp	r3, sl
 8017780:	db33      	blt.n	80177ea <__lshift+0xb6>
 8017782:	6920      	ldr	r0, [r4, #16]
 8017784:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017788:	f104 0314 	add.w	r3, r4, #20
 801778c:	f019 091f 	ands.w	r9, r9, #31
 8017790:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017794:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017798:	d02b      	beq.n	80177f2 <__lshift+0xbe>
 801779a:	f1c9 0e20 	rsb	lr, r9, #32
 801779e:	468a      	mov	sl, r1
 80177a0:	2200      	movs	r2, #0
 80177a2:	6818      	ldr	r0, [r3, #0]
 80177a4:	fa00 f009 	lsl.w	r0, r0, r9
 80177a8:	4310      	orrs	r0, r2
 80177aa:	f84a 0b04 	str.w	r0, [sl], #4
 80177ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80177b2:	459c      	cmp	ip, r3
 80177b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80177b8:	d8f3      	bhi.n	80177a2 <__lshift+0x6e>
 80177ba:	ebac 0304 	sub.w	r3, ip, r4
 80177be:	3b15      	subs	r3, #21
 80177c0:	f023 0303 	bic.w	r3, r3, #3
 80177c4:	3304      	adds	r3, #4
 80177c6:	f104 0015 	add.w	r0, r4, #21
 80177ca:	4584      	cmp	ip, r0
 80177cc:	bf38      	it	cc
 80177ce:	2304      	movcc	r3, #4
 80177d0:	50ca      	str	r2, [r1, r3]
 80177d2:	b10a      	cbz	r2, 80177d8 <__lshift+0xa4>
 80177d4:	f108 0602 	add.w	r6, r8, #2
 80177d8:	3e01      	subs	r6, #1
 80177da:	4638      	mov	r0, r7
 80177dc:	612e      	str	r6, [r5, #16]
 80177de:	4621      	mov	r1, r4
 80177e0:	f7ff fd8e 	bl	8017300 <_Bfree>
 80177e4:	4628      	mov	r0, r5
 80177e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80177ee:	3301      	adds	r3, #1
 80177f0:	e7c5      	b.n	801777e <__lshift+0x4a>
 80177f2:	3904      	subs	r1, #4
 80177f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80177f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80177fc:	459c      	cmp	ip, r3
 80177fe:	d8f9      	bhi.n	80177f4 <__lshift+0xc0>
 8017800:	e7ea      	b.n	80177d8 <__lshift+0xa4>
 8017802:	bf00      	nop
 8017804:	08018fb1 	.word	0x08018fb1
 8017808:	08019039 	.word	0x08019039

0801780c <__mcmp>:
 801780c:	b530      	push	{r4, r5, lr}
 801780e:	6902      	ldr	r2, [r0, #16]
 8017810:	690c      	ldr	r4, [r1, #16]
 8017812:	1b12      	subs	r2, r2, r4
 8017814:	d10e      	bne.n	8017834 <__mcmp+0x28>
 8017816:	f100 0314 	add.w	r3, r0, #20
 801781a:	3114      	adds	r1, #20
 801781c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017820:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017824:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017828:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801782c:	42a5      	cmp	r5, r4
 801782e:	d003      	beq.n	8017838 <__mcmp+0x2c>
 8017830:	d305      	bcc.n	801783e <__mcmp+0x32>
 8017832:	2201      	movs	r2, #1
 8017834:	4610      	mov	r0, r2
 8017836:	bd30      	pop	{r4, r5, pc}
 8017838:	4283      	cmp	r3, r0
 801783a:	d3f3      	bcc.n	8017824 <__mcmp+0x18>
 801783c:	e7fa      	b.n	8017834 <__mcmp+0x28>
 801783e:	f04f 32ff 	mov.w	r2, #4294967295
 8017842:	e7f7      	b.n	8017834 <__mcmp+0x28>

08017844 <__mdiff>:
 8017844:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017848:	460c      	mov	r4, r1
 801784a:	4606      	mov	r6, r0
 801784c:	4611      	mov	r1, r2
 801784e:	4620      	mov	r0, r4
 8017850:	4690      	mov	r8, r2
 8017852:	f7ff ffdb 	bl	801780c <__mcmp>
 8017856:	1e05      	subs	r5, r0, #0
 8017858:	d110      	bne.n	801787c <__mdiff+0x38>
 801785a:	4629      	mov	r1, r5
 801785c:	4630      	mov	r0, r6
 801785e:	f7ff fd0f 	bl	8017280 <_Balloc>
 8017862:	b930      	cbnz	r0, 8017872 <__mdiff+0x2e>
 8017864:	4b3a      	ldr	r3, [pc, #232]	; (8017950 <__mdiff+0x10c>)
 8017866:	4602      	mov	r2, r0
 8017868:	f240 2137 	movw	r1, #567	; 0x237
 801786c:	4839      	ldr	r0, [pc, #228]	; (8017954 <__mdiff+0x110>)
 801786e:	f000 fd81 	bl	8018374 <__assert_func>
 8017872:	2301      	movs	r3, #1
 8017874:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801787c:	bfa4      	itt	ge
 801787e:	4643      	movge	r3, r8
 8017880:	46a0      	movge	r8, r4
 8017882:	4630      	mov	r0, r6
 8017884:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017888:	bfa6      	itte	ge
 801788a:	461c      	movge	r4, r3
 801788c:	2500      	movge	r5, #0
 801788e:	2501      	movlt	r5, #1
 8017890:	f7ff fcf6 	bl	8017280 <_Balloc>
 8017894:	b920      	cbnz	r0, 80178a0 <__mdiff+0x5c>
 8017896:	4b2e      	ldr	r3, [pc, #184]	; (8017950 <__mdiff+0x10c>)
 8017898:	4602      	mov	r2, r0
 801789a:	f240 2145 	movw	r1, #581	; 0x245
 801789e:	e7e5      	b.n	801786c <__mdiff+0x28>
 80178a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80178a4:	6926      	ldr	r6, [r4, #16]
 80178a6:	60c5      	str	r5, [r0, #12]
 80178a8:	f104 0914 	add.w	r9, r4, #20
 80178ac:	f108 0514 	add.w	r5, r8, #20
 80178b0:	f100 0e14 	add.w	lr, r0, #20
 80178b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80178b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80178bc:	f108 0210 	add.w	r2, r8, #16
 80178c0:	46f2      	mov	sl, lr
 80178c2:	2100      	movs	r1, #0
 80178c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80178c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80178cc:	fa11 f88b 	uxtah	r8, r1, fp
 80178d0:	b299      	uxth	r1, r3
 80178d2:	0c1b      	lsrs	r3, r3, #16
 80178d4:	eba8 0801 	sub.w	r8, r8, r1
 80178d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80178dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80178e0:	fa1f f888 	uxth.w	r8, r8
 80178e4:	1419      	asrs	r1, r3, #16
 80178e6:	454e      	cmp	r6, r9
 80178e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80178ec:	f84a 3b04 	str.w	r3, [sl], #4
 80178f0:	d8e8      	bhi.n	80178c4 <__mdiff+0x80>
 80178f2:	1b33      	subs	r3, r6, r4
 80178f4:	3b15      	subs	r3, #21
 80178f6:	f023 0303 	bic.w	r3, r3, #3
 80178fa:	3304      	adds	r3, #4
 80178fc:	3415      	adds	r4, #21
 80178fe:	42a6      	cmp	r6, r4
 8017900:	bf38      	it	cc
 8017902:	2304      	movcc	r3, #4
 8017904:	441d      	add	r5, r3
 8017906:	4473      	add	r3, lr
 8017908:	469e      	mov	lr, r3
 801790a:	462e      	mov	r6, r5
 801790c:	4566      	cmp	r6, ip
 801790e:	d30e      	bcc.n	801792e <__mdiff+0xea>
 8017910:	f10c 0203 	add.w	r2, ip, #3
 8017914:	1b52      	subs	r2, r2, r5
 8017916:	f022 0203 	bic.w	r2, r2, #3
 801791a:	3d03      	subs	r5, #3
 801791c:	45ac      	cmp	ip, r5
 801791e:	bf38      	it	cc
 8017920:	2200      	movcc	r2, #0
 8017922:	4413      	add	r3, r2
 8017924:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8017928:	b17a      	cbz	r2, 801794a <__mdiff+0x106>
 801792a:	6107      	str	r7, [r0, #16]
 801792c:	e7a4      	b.n	8017878 <__mdiff+0x34>
 801792e:	f856 8b04 	ldr.w	r8, [r6], #4
 8017932:	fa11 f288 	uxtah	r2, r1, r8
 8017936:	1414      	asrs	r4, r2, #16
 8017938:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801793c:	b292      	uxth	r2, r2
 801793e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017942:	f84e 2b04 	str.w	r2, [lr], #4
 8017946:	1421      	asrs	r1, r4, #16
 8017948:	e7e0      	b.n	801790c <__mdiff+0xc8>
 801794a:	3f01      	subs	r7, #1
 801794c:	e7ea      	b.n	8017924 <__mdiff+0xe0>
 801794e:	bf00      	nop
 8017950:	08018fb1 	.word	0x08018fb1
 8017954:	08019039 	.word	0x08019039

08017958 <__ulp>:
 8017958:	b082      	sub	sp, #8
 801795a:	ed8d 0b00 	vstr	d0, [sp]
 801795e:	9a01      	ldr	r2, [sp, #4]
 8017960:	4b0f      	ldr	r3, [pc, #60]	; (80179a0 <__ulp+0x48>)
 8017962:	4013      	ands	r3, r2
 8017964:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8017968:	2b00      	cmp	r3, #0
 801796a:	dc08      	bgt.n	801797e <__ulp+0x26>
 801796c:	425b      	negs	r3, r3
 801796e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8017972:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017976:	da04      	bge.n	8017982 <__ulp+0x2a>
 8017978:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801797c:	4113      	asrs	r3, r2
 801797e:	2200      	movs	r2, #0
 8017980:	e008      	b.n	8017994 <__ulp+0x3c>
 8017982:	f1a2 0314 	sub.w	r3, r2, #20
 8017986:	2b1e      	cmp	r3, #30
 8017988:	bfda      	itte	le
 801798a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801798e:	40da      	lsrle	r2, r3
 8017990:	2201      	movgt	r2, #1
 8017992:	2300      	movs	r3, #0
 8017994:	4619      	mov	r1, r3
 8017996:	4610      	mov	r0, r2
 8017998:	ec41 0b10 	vmov	d0, r0, r1
 801799c:	b002      	add	sp, #8
 801799e:	4770      	bx	lr
 80179a0:	7ff00000 	.word	0x7ff00000

080179a4 <__b2d>:
 80179a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179a8:	6906      	ldr	r6, [r0, #16]
 80179aa:	f100 0814 	add.w	r8, r0, #20
 80179ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80179b2:	1f37      	subs	r7, r6, #4
 80179b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80179b8:	4610      	mov	r0, r2
 80179ba:	f7ff fd53 	bl	8017464 <__hi0bits>
 80179be:	f1c0 0320 	rsb	r3, r0, #32
 80179c2:	280a      	cmp	r0, #10
 80179c4:	600b      	str	r3, [r1, #0]
 80179c6:	491b      	ldr	r1, [pc, #108]	; (8017a34 <__b2d+0x90>)
 80179c8:	dc15      	bgt.n	80179f6 <__b2d+0x52>
 80179ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80179ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80179d2:	45b8      	cmp	r8, r7
 80179d4:	ea43 0501 	orr.w	r5, r3, r1
 80179d8:	bf34      	ite	cc
 80179da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80179de:	2300      	movcs	r3, #0
 80179e0:	3015      	adds	r0, #21
 80179e2:	fa02 f000 	lsl.w	r0, r2, r0
 80179e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80179ea:	4303      	orrs	r3, r0
 80179ec:	461c      	mov	r4, r3
 80179ee:	ec45 4b10 	vmov	d0, r4, r5
 80179f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179f6:	45b8      	cmp	r8, r7
 80179f8:	bf3a      	itte	cc
 80179fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80179fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8017a02:	2300      	movcs	r3, #0
 8017a04:	380b      	subs	r0, #11
 8017a06:	d012      	beq.n	8017a2e <__b2d+0x8a>
 8017a08:	f1c0 0120 	rsb	r1, r0, #32
 8017a0c:	fa23 f401 	lsr.w	r4, r3, r1
 8017a10:	4082      	lsls	r2, r0
 8017a12:	4322      	orrs	r2, r4
 8017a14:	4547      	cmp	r7, r8
 8017a16:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8017a1a:	bf8c      	ite	hi
 8017a1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017a20:	2200      	movls	r2, #0
 8017a22:	4083      	lsls	r3, r0
 8017a24:	40ca      	lsrs	r2, r1
 8017a26:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017a2a:	4313      	orrs	r3, r2
 8017a2c:	e7de      	b.n	80179ec <__b2d+0x48>
 8017a2e:	ea42 0501 	orr.w	r5, r2, r1
 8017a32:	e7db      	b.n	80179ec <__b2d+0x48>
 8017a34:	3ff00000 	.word	0x3ff00000

08017a38 <__d2b>:
 8017a38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017a3c:	460f      	mov	r7, r1
 8017a3e:	2101      	movs	r1, #1
 8017a40:	ec59 8b10 	vmov	r8, r9, d0
 8017a44:	4616      	mov	r6, r2
 8017a46:	f7ff fc1b 	bl	8017280 <_Balloc>
 8017a4a:	4604      	mov	r4, r0
 8017a4c:	b930      	cbnz	r0, 8017a5c <__d2b+0x24>
 8017a4e:	4602      	mov	r2, r0
 8017a50:	4b24      	ldr	r3, [pc, #144]	; (8017ae4 <__d2b+0xac>)
 8017a52:	4825      	ldr	r0, [pc, #148]	; (8017ae8 <__d2b+0xb0>)
 8017a54:	f240 310f 	movw	r1, #783	; 0x30f
 8017a58:	f000 fc8c 	bl	8018374 <__assert_func>
 8017a5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017a60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017a64:	bb2d      	cbnz	r5, 8017ab2 <__d2b+0x7a>
 8017a66:	9301      	str	r3, [sp, #4]
 8017a68:	f1b8 0300 	subs.w	r3, r8, #0
 8017a6c:	d026      	beq.n	8017abc <__d2b+0x84>
 8017a6e:	4668      	mov	r0, sp
 8017a70:	9300      	str	r3, [sp, #0]
 8017a72:	f7ff fd17 	bl	80174a4 <__lo0bits>
 8017a76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017a7a:	b1e8      	cbz	r0, 8017ab8 <__d2b+0x80>
 8017a7c:	f1c0 0320 	rsb	r3, r0, #32
 8017a80:	fa02 f303 	lsl.w	r3, r2, r3
 8017a84:	430b      	orrs	r3, r1
 8017a86:	40c2      	lsrs	r2, r0
 8017a88:	6163      	str	r3, [r4, #20]
 8017a8a:	9201      	str	r2, [sp, #4]
 8017a8c:	9b01      	ldr	r3, [sp, #4]
 8017a8e:	61a3      	str	r3, [r4, #24]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	bf14      	ite	ne
 8017a94:	2202      	movne	r2, #2
 8017a96:	2201      	moveq	r2, #1
 8017a98:	6122      	str	r2, [r4, #16]
 8017a9a:	b1bd      	cbz	r5, 8017acc <__d2b+0x94>
 8017a9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017aa0:	4405      	add	r5, r0
 8017aa2:	603d      	str	r5, [r7, #0]
 8017aa4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017aa8:	6030      	str	r0, [r6, #0]
 8017aaa:	4620      	mov	r0, r4
 8017aac:	b003      	add	sp, #12
 8017aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017ab6:	e7d6      	b.n	8017a66 <__d2b+0x2e>
 8017ab8:	6161      	str	r1, [r4, #20]
 8017aba:	e7e7      	b.n	8017a8c <__d2b+0x54>
 8017abc:	a801      	add	r0, sp, #4
 8017abe:	f7ff fcf1 	bl	80174a4 <__lo0bits>
 8017ac2:	9b01      	ldr	r3, [sp, #4]
 8017ac4:	6163      	str	r3, [r4, #20]
 8017ac6:	3020      	adds	r0, #32
 8017ac8:	2201      	movs	r2, #1
 8017aca:	e7e5      	b.n	8017a98 <__d2b+0x60>
 8017acc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017ad0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017ad4:	6038      	str	r0, [r7, #0]
 8017ad6:	6918      	ldr	r0, [r3, #16]
 8017ad8:	f7ff fcc4 	bl	8017464 <__hi0bits>
 8017adc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017ae0:	e7e2      	b.n	8017aa8 <__d2b+0x70>
 8017ae2:	bf00      	nop
 8017ae4:	08018fb1 	.word	0x08018fb1
 8017ae8:	08019039 	.word	0x08019039

08017aec <__ratio>:
 8017aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017af0:	4688      	mov	r8, r1
 8017af2:	4669      	mov	r1, sp
 8017af4:	4681      	mov	r9, r0
 8017af6:	f7ff ff55 	bl	80179a4 <__b2d>
 8017afa:	a901      	add	r1, sp, #4
 8017afc:	4640      	mov	r0, r8
 8017afe:	ec55 4b10 	vmov	r4, r5, d0
 8017b02:	f7ff ff4f 	bl	80179a4 <__b2d>
 8017b06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017b0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017b0e:	eba3 0c02 	sub.w	ip, r3, r2
 8017b12:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017b16:	1a9b      	subs	r3, r3, r2
 8017b18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017b1c:	ec51 0b10 	vmov	r0, r1, d0
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	bfd6      	itet	le
 8017b24:	460a      	movle	r2, r1
 8017b26:	462a      	movgt	r2, r5
 8017b28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017b2c:	468b      	mov	fp, r1
 8017b2e:	462f      	mov	r7, r5
 8017b30:	bfd4      	ite	le
 8017b32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8017b36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017b3a:	4620      	mov	r0, r4
 8017b3c:	ee10 2a10 	vmov	r2, s0
 8017b40:	465b      	mov	r3, fp
 8017b42:	4639      	mov	r1, r7
 8017b44:	f7f0 fab2 	bl	80080ac <__aeabi_ddiv>
 8017b48:	ec41 0b10 	vmov	d0, r0, r1
 8017b4c:	b003      	add	sp, #12
 8017b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b52 <__copybits>:
 8017b52:	3901      	subs	r1, #1
 8017b54:	b570      	push	{r4, r5, r6, lr}
 8017b56:	1149      	asrs	r1, r1, #5
 8017b58:	6914      	ldr	r4, [r2, #16]
 8017b5a:	3101      	adds	r1, #1
 8017b5c:	f102 0314 	add.w	r3, r2, #20
 8017b60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017b64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017b68:	1f05      	subs	r5, r0, #4
 8017b6a:	42a3      	cmp	r3, r4
 8017b6c:	d30c      	bcc.n	8017b88 <__copybits+0x36>
 8017b6e:	1aa3      	subs	r3, r4, r2
 8017b70:	3b11      	subs	r3, #17
 8017b72:	f023 0303 	bic.w	r3, r3, #3
 8017b76:	3211      	adds	r2, #17
 8017b78:	42a2      	cmp	r2, r4
 8017b7a:	bf88      	it	hi
 8017b7c:	2300      	movhi	r3, #0
 8017b7e:	4418      	add	r0, r3
 8017b80:	2300      	movs	r3, #0
 8017b82:	4288      	cmp	r0, r1
 8017b84:	d305      	bcc.n	8017b92 <__copybits+0x40>
 8017b86:	bd70      	pop	{r4, r5, r6, pc}
 8017b88:	f853 6b04 	ldr.w	r6, [r3], #4
 8017b8c:	f845 6f04 	str.w	r6, [r5, #4]!
 8017b90:	e7eb      	b.n	8017b6a <__copybits+0x18>
 8017b92:	f840 3b04 	str.w	r3, [r0], #4
 8017b96:	e7f4      	b.n	8017b82 <__copybits+0x30>

08017b98 <__any_on>:
 8017b98:	f100 0214 	add.w	r2, r0, #20
 8017b9c:	6900      	ldr	r0, [r0, #16]
 8017b9e:	114b      	asrs	r3, r1, #5
 8017ba0:	4298      	cmp	r0, r3
 8017ba2:	b510      	push	{r4, lr}
 8017ba4:	db11      	blt.n	8017bca <__any_on+0x32>
 8017ba6:	dd0a      	ble.n	8017bbe <__any_on+0x26>
 8017ba8:	f011 011f 	ands.w	r1, r1, #31
 8017bac:	d007      	beq.n	8017bbe <__any_on+0x26>
 8017bae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017bb2:	fa24 f001 	lsr.w	r0, r4, r1
 8017bb6:	fa00 f101 	lsl.w	r1, r0, r1
 8017bba:	428c      	cmp	r4, r1
 8017bbc:	d10b      	bne.n	8017bd6 <__any_on+0x3e>
 8017bbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017bc2:	4293      	cmp	r3, r2
 8017bc4:	d803      	bhi.n	8017bce <__any_on+0x36>
 8017bc6:	2000      	movs	r0, #0
 8017bc8:	bd10      	pop	{r4, pc}
 8017bca:	4603      	mov	r3, r0
 8017bcc:	e7f7      	b.n	8017bbe <__any_on+0x26>
 8017bce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017bd2:	2900      	cmp	r1, #0
 8017bd4:	d0f5      	beq.n	8017bc2 <__any_on+0x2a>
 8017bd6:	2001      	movs	r0, #1
 8017bd8:	e7f6      	b.n	8017bc8 <__any_on+0x30>

08017bda <__ascii_wctomb>:
 8017bda:	b149      	cbz	r1, 8017bf0 <__ascii_wctomb+0x16>
 8017bdc:	2aff      	cmp	r2, #255	; 0xff
 8017bde:	bf85      	ittet	hi
 8017be0:	238a      	movhi	r3, #138	; 0x8a
 8017be2:	6003      	strhi	r3, [r0, #0]
 8017be4:	700a      	strbls	r2, [r1, #0]
 8017be6:	f04f 30ff 	movhi.w	r0, #4294967295
 8017bea:	bf98      	it	ls
 8017bec:	2001      	movls	r0, #1
 8017bee:	4770      	bx	lr
 8017bf0:	4608      	mov	r0, r1
 8017bf2:	4770      	bx	lr

08017bf4 <__ssputs_r>:
 8017bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bf8:	688e      	ldr	r6, [r1, #8]
 8017bfa:	461f      	mov	r7, r3
 8017bfc:	42be      	cmp	r6, r7
 8017bfe:	680b      	ldr	r3, [r1, #0]
 8017c00:	4682      	mov	sl, r0
 8017c02:	460c      	mov	r4, r1
 8017c04:	4690      	mov	r8, r2
 8017c06:	d82c      	bhi.n	8017c62 <__ssputs_r+0x6e>
 8017c08:	898a      	ldrh	r2, [r1, #12]
 8017c0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017c0e:	d026      	beq.n	8017c5e <__ssputs_r+0x6a>
 8017c10:	6965      	ldr	r5, [r4, #20]
 8017c12:	6909      	ldr	r1, [r1, #16]
 8017c14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017c18:	eba3 0901 	sub.w	r9, r3, r1
 8017c1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017c20:	1c7b      	adds	r3, r7, #1
 8017c22:	444b      	add	r3, r9
 8017c24:	106d      	asrs	r5, r5, #1
 8017c26:	429d      	cmp	r5, r3
 8017c28:	bf38      	it	cc
 8017c2a:	461d      	movcc	r5, r3
 8017c2c:	0553      	lsls	r3, r2, #21
 8017c2e:	d527      	bpl.n	8017c80 <__ssputs_r+0x8c>
 8017c30:	4629      	mov	r1, r5
 8017c32:	f7ff fa87 	bl	8017144 <_malloc_r>
 8017c36:	4606      	mov	r6, r0
 8017c38:	b360      	cbz	r0, 8017c94 <__ssputs_r+0xa0>
 8017c3a:	6921      	ldr	r1, [r4, #16]
 8017c3c:	464a      	mov	r2, r9
 8017c3e:	f7fe fea0 	bl	8016982 <memcpy>
 8017c42:	89a3      	ldrh	r3, [r4, #12]
 8017c44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c4c:	81a3      	strh	r3, [r4, #12]
 8017c4e:	6126      	str	r6, [r4, #16]
 8017c50:	6165      	str	r5, [r4, #20]
 8017c52:	444e      	add	r6, r9
 8017c54:	eba5 0509 	sub.w	r5, r5, r9
 8017c58:	6026      	str	r6, [r4, #0]
 8017c5a:	60a5      	str	r5, [r4, #8]
 8017c5c:	463e      	mov	r6, r7
 8017c5e:	42be      	cmp	r6, r7
 8017c60:	d900      	bls.n	8017c64 <__ssputs_r+0x70>
 8017c62:	463e      	mov	r6, r7
 8017c64:	6820      	ldr	r0, [r4, #0]
 8017c66:	4632      	mov	r2, r6
 8017c68:	4641      	mov	r1, r8
 8017c6a:	f000 fb59 	bl	8018320 <memmove>
 8017c6e:	68a3      	ldr	r3, [r4, #8]
 8017c70:	1b9b      	subs	r3, r3, r6
 8017c72:	60a3      	str	r3, [r4, #8]
 8017c74:	6823      	ldr	r3, [r4, #0]
 8017c76:	4433      	add	r3, r6
 8017c78:	6023      	str	r3, [r4, #0]
 8017c7a:	2000      	movs	r0, #0
 8017c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c80:	462a      	mov	r2, r5
 8017c82:	f000 fbb3 	bl	80183ec <_realloc_r>
 8017c86:	4606      	mov	r6, r0
 8017c88:	2800      	cmp	r0, #0
 8017c8a:	d1e0      	bne.n	8017c4e <__ssputs_r+0x5a>
 8017c8c:	6921      	ldr	r1, [r4, #16]
 8017c8e:	4650      	mov	r0, sl
 8017c90:	f7fe fe94 	bl	80169bc <_free_r>
 8017c94:	230c      	movs	r3, #12
 8017c96:	f8ca 3000 	str.w	r3, [sl]
 8017c9a:	89a3      	ldrh	r3, [r4, #12]
 8017c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ca0:	81a3      	strh	r3, [r4, #12]
 8017ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ca6:	e7e9      	b.n	8017c7c <__ssputs_r+0x88>

08017ca8 <_svfiprintf_r>:
 8017ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cac:	4698      	mov	r8, r3
 8017cae:	898b      	ldrh	r3, [r1, #12]
 8017cb0:	061b      	lsls	r3, r3, #24
 8017cb2:	b09d      	sub	sp, #116	; 0x74
 8017cb4:	4607      	mov	r7, r0
 8017cb6:	460d      	mov	r5, r1
 8017cb8:	4614      	mov	r4, r2
 8017cba:	d50e      	bpl.n	8017cda <_svfiprintf_r+0x32>
 8017cbc:	690b      	ldr	r3, [r1, #16]
 8017cbe:	b963      	cbnz	r3, 8017cda <_svfiprintf_r+0x32>
 8017cc0:	2140      	movs	r1, #64	; 0x40
 8017cc2:	f7ff fa3f 	bl	8017144 <_malloc_r>
 8017cc6:	6028      	str	r0, [r5, #0]
 8017cc8:	6128      	str	r0, [r5, #16]
 8017cca:	b920      	cbnz	r0, 8017cd6 <_svfiprintf_r+0x2e>
 8017ccc:	230c      	movs	r3, #12
 8017cce:	603b      	str	r3, [r7, #0]
 8017cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8017cd4:	e0d0      	b.n	8017e78 <_svfiprintf_r+0x1d0>
 8017cd6:	2340      	movs	r3, #64	; 0x40
 8017cd8:	616b      	str	r3, [r5, #20]
 8017cda:	2300      	movs	r3, #0
 8017cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8017cde:	2320      	movs	r3, #32
 8017ce0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017ce4:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ce8:	2330      	movs	r3, #48	; 0x30
 8017cea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017e90 <_svfiprintf_r+0x1e8>
 8017cee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017cf2:	f04f 0901 	mov.w	r9, #1
 8017cf6:	4623      	mov	r3, r4
 8017cf8:	469a      	mov	sl, r3
 8017cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cfe:	b10a      	cbz	r2, 8017d04 <_svfiprintf_r+0x5c>
 8017d00:	2a25      	cmp	r2, #37	; 0x25
 8017d02:	d1f9      	bne.n	8017cf8 <_svfiprintf_r+0x50>
 8017d04:	ebba 0b04 	subs.w	fp, sl, r4
 8017d08:	d00b      	beq.n	8017d22 <_svfiprintf_r+0x7a>
 8017d0a:	465b      	mov	r3, fp
 8017d0c:	4622      	mov	r2, r4
 8017d0e:	4629      	mov	r1, r5
 8017d10:	4638      	mov	r0, r7
 8017d12:	f7ff ff6f 	bl	8017bf4 <__ssputs_r>
 8017d16:	3001      	adds	r0, #1
 8017d18:	f000 80a9 	beq.w	8017e6e <_svfiprintf_r+0x1c6>
 8017d1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d1e:	445a      	add	r2, fp
 8017d20:	9209      	str	r2, [sp, #36]	; 0x24
 8017d22:	f89a 3000 	ldrb.w	r3, [sl]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	f000 80a1 	beq.w	8017e6e <_svfiprintf_r+0x1c6>
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8017d32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d36:	f10a 0a01 	add.w	sl, sl, #1
 8017d3a:	9304      	str	r3, [sp, #16]
 8017d3c:	9307      	str	r3, [sp, #28]
 8017d3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017d42:	931a      	str	r3, [sp, #104]	; 0x68
 8017d44:	4654      	mov	r4, sl
 8017d46:	2205      	movs	r2, #5
 8017d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d4c:	4850      	ldr	r0, [pc, #320]	; (8017e90 <_svfiprintf_r+0x1e8>)
 8017d4e:	f7ef fe77 	bl	8007a40 <memchr>
 8017d52:	9a04      	ldr	r2, [sp, #16]
 8017d54:	b9d8      	cbnz	r0, 8017d8e <_svfiprintf_r+0xe6>
 8017d56:	06d0      	lsls	r0, r2, #27
 8017d58:	bf44      	itt	mi
 8017d5a:	2320      	movmi	r3, #32
 8017d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d60:	0711      	lsls	r1, r2, #28
 8017d62:	bf44      	itt	mi
 8017d64:	232b      	movmi	r3, #43	; 0x2b
 8017d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8017d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8017d70:	d015      	beq.n	8017d9e <_svfiprintf_r+0xf6>
 8017d72:	9a07      	ldr	r2, [sp, #28]
 8017d74:	4654      	mov	r4, sl
 8017d76:	2000      	movs	r0, #0
 8017d78:	f04f 0c0a 	mov.w	ip, #10
 8017d7c:	4621      	mov	r1, r4
 8017d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d82:	3b30      	subs	r3, #48	; 0x30
 8017d84:	2b09      	cmp	r3, #9
 8017d86:	d94d      	bls.n	8017e24 <_svfiprintf_r+0x17c>
 8017d88:	b1b0      	cbz	r0, 8017db8 <_svfiprintf_r+0x110>
 8017d8a:	9207      	str	r2, [sp, #28]
 8017d8c:	e014      	b.n	8017db8 <_svfiprintf_r+0x110>
 8017d8e:	eba0 0308 	sub.w	r3, r0, r8
 8017d92:	fa09 f303 	lsl.w	r3, r9, r3
 8017d96:	4313      	orrs	r3, r2
 8017d98:	9304      	str	r3, [sp, #16]
 8017d9a:	46a2      	mov	sl, r4
 8017d9c:	e7d2      	b.n	8017d44 <_svfiprintf_r+0x9c>
 8017d9e:	9b03      	ldr	r3, [sp, #12]
 8017da0:	1d19      	adds	r1, r3, #4
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	9103      	str	r1, [sp, #12]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	bfbb      	ittet	lt
 8017daa:	425b      	neglt	r3, r3
 8017dac:	f042 0202 	orrlt.w	r2, r2, #2
 8017db0:	9307      	strge	r3, [sp, #28]
 8017db2:	9307      	strlt	r3, [sp, #28]
 8017db4:	bfb8      	it	lt
 8017db6:	9204      	strlt	r2, [sp, #16]
 8017db8:	7823      	ldrb	r3, [r4, #0]
 8017dba:	2b2e      	cmp	r3, #46	; 0x2e
 8017dbc:	d10c      	bne.n	8017dd8 <_svfiprintf_r+0x130>
 8017dbe:	7863      	ldrb	r3, [r4, #1]
 8017dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8017dc2:	d134      	bne.n	8017e2e <_svfiprintf_r+0x186>
 8017dc4:	9b03      	ldr	r3, [sp, #12]
 8017dc6:	1d1a      	adds	r2, r3, #4
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	9203      	str	r2, [sp, #12]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	bfb8      	it	lt
 8017dd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8017dd4:	3402      	adds	r4, #2
 8017dd6:	9305      	str	r3, [sp, #20]
 8017dd8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017ea0 <_svfiprintf_r+0x1f8>
 8017ddc:	7821      	ldrb	r1, [r4, #0]
 8017dde:	2203      	movs	r2, #3
 8017de0:	4650      	mov	r0, sl
 8017de2:	f7ef fe2d 	bl	8007a40 <memchr>
 8017de6:	b138      	cbz	r0, 8017df8 <_svfiprintf_r+0x150>
 8017de8:	9b04      	ldr	r3, [sp, #16]
 8017dea:	eba0 000a 	sub.w	r0, r0, sl
 8017dee:	2240      	movs	r2, #64	; 0x40
 8017df0:	4082      	lsls	r2, r0
 8017df2:	4313      	orrs	r3, r2
 8017df4:	3401      	adds	r4, #1
 8017df6:	9304      	str	r3, [sp, #16]
 8017df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017dfc:	4825      	ldr	r0, [pc, #148]	; (8017e94 <_svfiprintf_r+0x1ec>)
 8017dfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017e02:	2206      	movs	r2, #6
 8017e04:	f7ef fe1c 	bl	8007a40 <memchr>
 8017e08:	2800      	cmp	r0, #0
 8017e0a:	d038      	beq.n	8017e7e <_svfiprintf_r+0x1d6>
 8017e0c:	4b22      	ldr	r3, [pc, #136]	; (8017e98 <_svfiprintf_r+0x1f0>)
 8017e0e:	bb1b      	cbnz	r3, 8017e58 <_svfiprintf_r+0x1b0>
 8017e10:	9b03      	ldr	r3, [sp, #12]
 8017e12:	3307      	adds	r3, #7
 8017e14:	f023 0307 	bic.w	r3, r3, #7
 8017e18:	3308      	adds	r3, #8
 8017e1a:	9303      	str	r3, [sp, #12]
 8017e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e1e:	4433      	add	r3, r6
 8017e20:	9309      	str	r3, [sp, #36]	; 0x24
 8017e22:	e768      	b.n	8017cf6 <_svfiprintf_r+0x4e>
 8017e24:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e28:	460c      	mov	r4, r1
 8017e2a:	2001      	movs	r0, #1
 8017e2c:	e7a6      	b.n	8017d7c <_svfiprintf_r+0xd4>
 8017e2e:	2300      	movs	r3, #0
 8017e30:	3401      	adds	r4, #1
 8017e32:	9305      	str	r3, [sp, #20]
 8017e34:	4619      	mov	r1, r3
 8017e36:	f04f 0c0a 	mov.w	ip, #10
 8017e3a:	4620      	mov	r0, r4
 8017e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e40:	3a30      	subs	r2, #48	; 0x30
 8017e42:	2a09      	cmp	r2, #9
 8017e44:	d903      	bls.n	8017e4e <_svfiprintf_r+0x1a6>
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d0c6      	beq.n	8017dd8 <_svfiprintf_r+0x130>
 8017e4a:	9105      	str	r1, [sp, #20]
 8017e4c:	e7c4      	b.n	8017dd8 <_svfiprintf_r+0x130>
 8017e4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e52:	4604      	mov	r4, r0
 8017e54:	2301      	movs	r3, #1
 8017e56:	e7f0      	b.n	8017e3a <_svfiprintf_r+0x192>
 8017e58:	ab03      	add	r3, sp, #12
 8017e5a:	9300      	str	r3, [sp, #0]
 8017e5c:	462a      	mov	r2, r5
 8017e5e:	4b0f      	ldr	r3, [pc, #60]	; (8017e9c <_svfiprintf_r+0x1f4>)
 8017e60:	a904      	add	r1, sp, #16
 8017e62:	4638      	mov	r0, r7
 8017e64:	f3af 8000 	nop.w
 8017e68:	1c42      	adds	r2, r0, #1
 8017e6a:	4606      	mov	r6, r0
 8017e6c:	d1d6      	bne.n	8017e1c <_svfiprintf_r+0x174>
 8017e6e:	89ab      	ldrh	r3, [r5, #12]
 8017e70:	065b      	lsls	r3, r3, #25
 8017e72:	f53f af2d 	bmi.w	8017cd0 <_svfiprintf_r+0x28>
 8017e76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e78:	b01d      	add	sp, #116	; 0x74
 8017e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e7e:	ab03      	add	r3, sp, #12
 8017e80:	9300      	str	r3, [sp, #0]
 8017e82:	462a      	mov	r2, r5
 8017e84:	4b05      	ldr	r3, [pc, #20]	; (8017e9c <_svfiprintf_r+0x1f4>)
 8017e86:	a904      	add	r1, sp, #16
 8017e88:	4638      	mov	r0, r7
 8017e8a:	f000 f879 	bl	8017f80 <_printf_i>
 8017e8e:	e7eb      	b.n	8017e68 <_svfiprintf_r+0x1c0>
 8017e90:	08019194 	.word	0x08019194
 8017e94:	0801919e 	.word	0x0801919e
 8017e98:	00000000 	.word	0x00000000
 8017e9c:	08017bf5 	.word	0x08017bf5
 8017ea0:	0801919a 	.word	0x0801919a

08017ea4 <_printf_common>:
 8017ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ea8:	4616      	mov	r6, r2
 8017eaa:	4699      	mov	r9, r3
 8017eac:	688a      	ldr	r2, [r1, #8]
 8017eae:	690b      	ldr	r3, [r1, #16]
 8017eb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017eb4:	4293      	cmp	r3, r2
 8017eb6:	bfb8      	it	lt
 8017eb8:	4613      	movlt	r3, r2
 8017eba:	6033      	str	r3, [r6, #0]
 8017ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017ec0:	4607      	mov	r7, r0
 8017ec2:	460c      	mov	r4, r1
 8017ec4:	b10a      	cbz	r2, 8017eca <_printf_common+0x26>
 8017ec6:	3301      	adds	r3, #1
 8017ec8:	6033      	str	r3, [r6, #0]
 8017eca:	6823      	ldr	r3, [r4, #0]
 8017ecc:	0699      	lsls	r1, r3, #26
 8017ece:	bf42      	ittt	mi
 8017ed0:	6833      	ldrmi	r3, [r6, #0]
 8017ed2:	3302      	addmi	r3, #2
 8017ed4:	6033      	strmi	r3, [r6, #0]
 8017ed6:	6825      	ldr	r5, [r4, #0]
 8017ed8:	f015 0506 	ands.w	r5, r5, #6
 8017edc:	d106      	bne.n	8017eec <_printf_common+0x48>
 8017ede:	f104 0a19 	add.w	sl, r4, #25
 8017ee2:	68e3      	ldr	r3, [r4, #12]
 8017ee4:	6832      	ldr	r2, [r6, #0]
 8017ee6:	1a9b      	subs	r3, r3, r2
 8017ee8:	42ab      	cmp	r3, r5
 8017eea:	dc26      	bgt.n	8017f3a <_printf_common+0x96>
 8017eec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017ef0:	1e13      	subs	r3, r2, #0
 8017ef2:	6822      	ldr	r2, [r4, #0]
 8017ef4:	bf18      	it	ne
 8017ef6:	2301      	movne	r3, #1
 8017ef8:	0692      	lsls	r2, r2, #26
 8017efa:	d42b      	bmi.n	8017f54 <_printf_common+0xb0>
 8017efc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017f00:	4649      	mov	r1, r9
 8017f02:	4638      	mov	r0, r7
 8017f04:	47c0      	blx	r8
 8017f06:	3001      	adds	r0, #1
 8017f08:	d01e      	beq.n	8017f48 <_printf_common+0xa4>
 8017f0a:	6823      	ldr	r3, [r4, #0]
 8017f0c:	6922      	ldr	r2, [r4, #16]
 8017f0e:	f003 0306 	and.w	r3, r3, #6
 8017f12:	2b04      	cmp	r3, #4
 8017f14:	bf02      	ittt	eq
 8017f16:	68e5      	ldreq	r5, [r4, #12]
 8017f18:	6833      	ldreq	r3, [r6, #0]
 8017f1a:	1aed      	subeq	r5, r5, r3
 8017f1c:	68a3      	ldr	r3, [r4, #8]
 8017f1e:	bf0c      	ite	eq
 8017f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017f24:	2500      	movne	r5, #0
 8017f26:	4293      	cmp	r3, r2
 8017f28:	bfc4      	itt	gt
 8017f2a:	1a9b      	subgt	r3, r3, r2
 8017f2c:	18ed      	addgt	r5, r5, r3
 8017f2e:	2600      	movs	r6, #0
 8017f30:	341a      	adds	r4, #26
 8017f32:	42b5      	cmp	r5, r6
 8017f34:	d11a      	bne.n	8017f6c <_printf_common+0xc8>
 8017f36:	2000      	movs	r0, #0
 8017f38:	e008      	b.n	8017f4c <_printf_common+0xa8>
 8017f3a:	2301      	movs	r3, #1
 8017f3c:	4652      	mov	r2, sl
 8017f3e:	4649      	mov	r1, r9
 8017f40:	4638      	mov	r0, r7
 8017f42:	47c0      	blx	r8
 8017f44:	3001      	adds	r0, #1
 8017f46:	d103      	bne.n	8017f50 <_printf_common+0xac>
 8017f48:	f04f 30ff 	mov.w	r0, #4294967295
 8017f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f50:	3501      	adds	r5, #1
 8017f52:	e7c6      	b.n	8017ee2 <_printf_common+0x3e>
 8017f54:	18e1      	adds	r1, r4, r3
 8017f56:	1c5a      	adds	r2, r3, #1
 8017f58:	2030      	movs	r0, #48	; 0x30
 8017f5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017f5e:	4422      	add	r2, r4
 8017f60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017f64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017f68:	3302      	adds	r3, #2
 8017f6a:	e7c7      	b.n	8017efc <_printf_common+0x58>
 8017f6c:	2301      	movs	r3, #1
 8017f6e:	4622      	mov	r2, r4
 8017f70:	4649      	mov	r1, r9
 8017f72:	4638      	mov	r0, r7
 8017f74:	47c0      	blx	r8
 8017f76:	3001      	adds	r0, #1
 8017f78:	d0e6      	beq.n	8017f48 <_printf_common+0xa4>
 8017f7a:	3601      	adds	r6, #1
 8017f7c:	e7d9      	b.n	8017f32 <_printf_common+0x8e>
	...

08017f80 <_printf_i>:
 8017f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017f84:	7e0f      	ldrb	r7, [r1, #24]
 8017f86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017f88:	2f78      	cmp	r7, #120	; 0x78
 8017f8a:	4691      	mov	r9, r2
 8017f8c:	4680      	mov	r8, r0
 8017f8e:	460c      	mov	r4, r1
 8017f90:	469a      	mov	sl, r3
 8017f92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017f96:	d807      	bhi.n	8017fa8 <_printf_i+0x28>
 8017f98:	2f62      	cmp	r7, #98	; 0x62
 8017f9a:	d80a      	bhi.n	8017fb2 <_printf_i+0x32>
 8017f9c:	2f00      	cmp	r7, #0
 8017f9e:	f000 80d4 	beq.w	801814a <_printf_i+0x1ca>
 8017fa2:	2f58      	cmp	r7, #88	; 0x58
 8017fa4:	f000 80c0 	beq.w	8018128 <_printf_i+0x1a8>
 8017fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017fac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017fb0:	e03a      	b.n	8018028 <_printf_i+0xa8>
 8017fb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017fb6:	2b15      	cmp	r3, #21
 8017fb8:	d8f6      	bhi.n	8017fa8 <_printf_i+0x28>
 8017fba:	a101      	add	r1, pc, #4	; (adr r1, 8017fc0 <_printf_i+0x40>)
 8017fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017fc0:	08018019 	.word	0x08018019
 8017fc4:	0801802d 	.word	0x0801802d
 8017fc8:	08017fa9 	.word	0x08017fa9
 8017fcc:	08017fa9 	.word	0x08017fa9
 8017fd0:	08017fa9 	.word	0x08017fa9
 8017fd4:	08017fa9 	.word	0x08017fa9
 8017fd8:	0801802d 	.word	0x0801802d
 8017fdc:	08017fa9 	.word	0x08017fa9
 8017fe0:	08017fa9 	.word	0x08017fa9
 8017fe4:	08017fa9 	.word	0x08017fa9
 8017fe8:	08017fa9 	.word	0x08017fa9
 8017fec:	08018131 	.word	0x08018131
 8017ff0:	08018059 	.word	0x08018059
 8017ff4:	080180eb 	.word	0x080180eb
 8017ff8:	08017fa9 	.word	0x08017fa9
 8017ffc:	08017fa9 	.word	0x08017fa9
 8018000:	08018153 	.word	0x08018153
 8018004:	08017fa9 	.word	0x08017fa9
 8018008:	08018059 	.word	0x08018059
 801800c:	08017fa9 	.word	0x08017fa9
 8018010:	08017fa9 	.word	0x08017fa9
 8018014:	080180f3 	.word	0x080180f3
 8018018:	682b      	ldr	r3, [r5, #0]
 801801a:	1d1a      	adds	r2, r3, #4
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	602a      	str	r2, [r5, #0]
 8018020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018028:	2301      	movs	r3, #1
 801802a:	e09f      	b.n	801816c <_printf_i+0x1ec>
 801802c:	6820      	ldr	r0, [r4, #0]
 801802e:	682b      	ldr	r3, [r5, #0]
 8018030:	0607      	lsls	r7, r0, #24
 8018032:	f103 0104 	add.w	r1, r3, #4
 8018036:	6029      	str	r1, [r5, #0]
 8018038:	d501      	bpl.n	801803e <_printf_i+0xbe>
 801803a:	681e      	ldr	r6, [r3, #0]
 801803c:	e003      	b.n	8018046 <_printf_i+0xc6>
 801803e:	0646      	lsls	r6, r0, #25
 8018040:	d5fb      	bpl.n	801803a <_printf_i+0xba>
 8018042:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018046:	2e00      	cmp	r6, #0
 8018048:	da03      	bge.n	8018052 <_printf_i+0xd2>
 801804a:	232d      	movs	r3, #45	; 0x2d
 801804c:	4276      	negs	r6, r6
 801804e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018052:	485a      	ldr	r0, [pc, #360]	; (80181bc <_printf_i+0x23c>)
 8018054:	230a      	movs	r3, #10
 8018056:	e012      	b.n	801807e <_printf_i+0xfe>
 8018058:	682b      	ldr	r3, [r5, #0]
 801805a:	6820      	ldr	r0, [r4, #0]
 801805c:	1d19      	adds	r1, r3, #4
 801805e:	6029      	str	r1, [r5, #0]
 8018060:	0605      	lsls	r5, r0, #24
 8018062:	d501      	bpl.n	8018068 <_printf_i+0xe8>
 8018064:	681e      	ldr	r6, [r3, #0]
 8018066:	e002      	b.n	801806e <_printf_i+0xee>
 8018068:	0641      	lsls	r1, r0, #25
 801806a:	d5fb      	bpl.n	8018064 <_printf_i+0xe4>
 801806c:	881e      	ldrh	r6, [r3, #0]
 801806e:	4853      	ldr	r0, [pc, #332]	; (80181bc <_printf_i+0x23c>)
 8018070:	2f6f      	cmp	r7, #111	; 0x6f
 8018072:	bf0c      	ite	eq
 8018074:	2308      	moveq	r3, #8
 8018076:	230a      	movne	r3, #10
 8018078:	2100      	movs	r1, #0
 801807a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801807e:	6865      	ldr	r5, [r4, #4]
 8018080:	60a5      	str	r5, [r4, #8]
 8018082:	2d00      	cmp	r5, #0
 8018084:	bfa2      	ittt	ge
 8018086:	6821      	ldrge	r1, [r4, #0]
 8018088:	f021 0104 	bicge.w	r1, r1, #4
 801808c:	6021      	strge	r1, [r4, #0]
 801808e:	b90e      	cbnz	r6, 8018094 <_printf_i+0x114>
 8018090:	2d00      	cmp	r5, #0
 8018092:	d04b      	beq.n	801812c <_printf_i+0x1ac>
 8018094:	4615      	mov	r5, r2
 8018096:	fbb6 f1f3 	udiv	r1, r6, r3
 801809a:	fb03 6711 	mls	r7, r3, r1, r6
 801809e:	5dc7      	ldrb	r7, [r0, r7]
 80180a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80180a4:	4637      	mov	r7, r6
 80180a6:	42bb      	cmp	r3, r7
 80180a8:	460e      	mov	r6, r1
 80180aa:	d9f4      	bls.n	8018096 <_printf_i+0x116>
 80180ac:	2b08      	cmp	r3, #8
 80180ae:	d10b      	bne.n	80180c8 <_printf_i+0x148>
 80180b0:	6823      	ldr	r3, [r4, #0]
 80180b2:	07de      	lsls	r6, r3, #31
 80180b4:	d508      	bpl.n	80180c8 <_printf_i+0x148>
 80180b6:	6923      	ldr	r3, [r4, #16]
 80180b8:	6861      	ldr	r1, [r4, #4]
 80180ba:	4299      	cmp	r1, r3
 80180bc:	bfde      	ittt	le
 80180be:	2330      	movle	r3, #48	; 0x30
 80180c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80180c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80180c8:	1b52      	subs	r2, r2, r5
 80180ca:	6122      	str	r2, [r4, #16]
 80180cc:	f8cd a000 	str.w	sl, [sp]
 80180d0:	464b      	mov	r3, r9
 80180d2:	aa03      	add	r2, sp, #12
 80180d4:	4621      	mov	r1, r4
 80180d6:	4640      	mov	r0, r8
 80180d8:	f7ff fee4 	bl	8017ea4 <_printf_common>
 80180dc:	3001      	adds	r0, #1
 80180de:	d14a      	bne.n	8018176 <_printf_i+0x1f6>
 80180e0:	f04f 30ff 	mov.w	r0, #4294967295
 80180e4:	b004      	add	sp, #16
 80180e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180ea:	6823      	ldr	r3, [r4, #0]
 80180ec:	f043 0320 	orr.w	r3, r3, #32
 80180f0:	6023      	str	r3, [r4, #0]
 80180f2:	4833      	ldr	r0, [pc, #204]	; (80181c0 <_printf_i+0x240>)
 80180f4:	2778      	movs	r7, #120	; 0x78
 80180f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80180fa:	6823      	ldr	r3, [r4, #0]
 80180fc:	6829      	ldr	r1, [r5, #0]
 80180fe:	061f      	lsls	r7, r3, #24
 8018100:	f851 6b04 	ldr.w	r6, [r1], #4
 8018104:	d402      	bmi.n	801810c <_printf_i+0x18c>
 8018106:	065f      	lsls	r7, r3, #25
 8018108:	bf48      	it	mi
 801810a:	b2b6      	uxthmi	r6, r6
 801810c:	07df      	lsls	r7, r3, #31
 801810e:	bf48      	it	mi
 8018110:	f043 0320 	orrmi.w	r3, r3, #32
 8018114:	6029      	str	r1, [r5, #0]
 8018116:	bf48      	it	mi
 8018118:	6023      	strmi	r3, [r4, #0]
 801811a:	b91e      	cbnz	r6, 8018124 <_printf_i+0x1a4>
 801811c:	6823      	ldr	r3, [r4, #0]
 801811e:	f023 0320 	bic.w	r3, r3, #32
 8018122:	6023      	str	r3, [r4, #0]
 8018124:	2310      	movs	r3, #16
 8018126:	e7a7      	b.n	8018078 <_printf_i+0xf8>
 8018128:	4824      	ldr	r0, [pc, #144]	; (80181bc <_printf_i+0x23c>)
 801812a:	e7e4      	b.n	80180f6 <_printf_i+0x176>
 801812c:	4615      	mov	r5, r2
 801812e:	e7bd      	b.n	80180ac <_printf_i+0x12c>
 8018130:	682b      	ldr	r3, [r5, #0]
 8018132:	6826      	ldr	r6, [r4, #0]
 8018134:	6961      	ldr	r1, [r4, #20]
 8018136:	1d18      	adds	r0, r3, #4
 8018138:	6028      	str	r0, [r5, #0]
 801813a:	0635      	lsls	r5, r6, #24
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	d501      	bpl.n	8018144 <_printf_i+0x1c4>
 8018140:	6019      	str	r1, [r3, #0]
 8018142:	e002      	b.n	801814a <_printf_i+0x1ca>
 8018144:	0670      	lsls	r0, r6, #25
 8018146:	d5fb      	bpl.n	8018140 <_printf_i+0x1c0>
 8018148:	8019      	strh	r1, [r3, #0]
 801814a:	2300      	movs	r3, #0
 801814c:	6123      	str	r3, [r4, #16]
 801814e:	4615      	mov	r5, r2
 8018150:	e7bc      	b.n	80180cc <_printf_i+0x14c>
 8018152:	682b      	ldr	r3, [r5, #0]
 8018154:	1d1a      	adds	r2, r3, #4
 8018156:	602a      	str	r2, [r5, #0]
 8018158:	681d      	ldr	r5, [r3, #0]
 801815a:	6862      	ldr	r2, [r4, #4]
 801815c:	2100      	movs	r1, #0
 801815e:	4628      	mov	r0, r5
 8018160:	f7ef fc6e 	bl	8007a40 <memchr>
 8018164:	b108      	cbz	r0, 801816a <_printf_i+0x1ea>
 8018166:	1b40      	subs	r0, r0, r5
 8018168:	6060      	str	r0, [r4, #4]
 801816a:	6863      	ldr	r3, [r4, #4]
 801816c:	6123      	str	r3, [r4, #16]
 801816e:	2300      	movs	r3, #0
 8018170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018174:	e7aa      	b.n	80180cc <_printf_i+0x14c>
 8018176:	6923      	ldr	r3, [r4, #16]
 8018178:	462a      	mov	r2, r5
 801817a:	4649      	mov	r1, r9
 801817c:	4640      	mov	r0, r8
 801817e:	47d0      	blx	sl
 8018180:	3001      	adds	r0, #1
 8018182:	d0ad      	beq.n	80180e0 <_printf_i+0x160>
 8018184:	6823      	ldr	r3, [r4, #0]
 8018186:	079b      	lsls	r3, r3, #30
 8018188:	d413      	bmi.n	80181b2 <_printf_i+0x232>
 801818a:	68e0      	ldr	r0, [r4, #12]
 801818c:	9b03      	ldr	r3, [sp, #12]
 801818e:	4298      	cmp	r0, r3
 8018190:	bfb8      	it	lt
 8018192:	4618      	movlt	r0, r3
 8018194:	e7a6      	b.n	80180e4 <_printf_i+0x164>
 8018196:	2301      	movs	r3, #1
 8018198:	4632      	mov	r2, r6
 801819a:	4649      	mov	r1, r9
 801819c:	4640      	mov	r0, r8
 801819e:	47d0      	blx	sl
 80181a0:	3001      	adds	r0, #1
 80181a2:	d09d      	beq.n	80180e0 <_printf_i+0x160>
 80181a4:	3501      	adds	r5, #1
 80181a6:	68e3      	ldr	r3, [r4, #12]
 80181a8:	9903      	ldr	r1, [sp, #12]
 80181aa:	1a5b      	subs	r3, r3, r1
 80181ac:	42ab      	cmp	r3, r5
 80181ae:	dcf2      	bgt.n	8018196 <_printf_i+0x216>
 80181b0:	e7eb      	b.n	801818a <_printf_i+0x20a>
 80181b2:	2500      	movs	r5, #0
 80181b4:	f104 0619 	add.w	r6, r4, #25
 80181b8:	e7f5      	b.n	80181a6 <_printf_i+0x226>
 80181ba:	bf00      	nop
 80181bc:	080191a5 	.word	0x080191a5
 80181c0:	080191b6 	.word	0x080191b6

080181c4 <__sflush_r>:
 80181c4:	898a      	ldrh	r2, [r1, #12]
 80181c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181ca:	4605      	mov	r5, r0
 80181cc:	0710      	lsls	r0, r2, #28
 80181ce:	460c      	mov	r4, r1
 80181d0:	d458      	bmi.n	8018284 <__sflush_r+0xc0>
 80181d2:	684b      	ldr	r3, [r1, #4]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	dc05      	bgt.n	80181e4 <__sflush_r+0x20>
 80181d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80181da:	2b00      	cmp	r3, #0
 80181dc:	dc02      	bgt.n	80181e4 <__sflush_r+0x20>
 80181de:	2000      	movs	r0, #0
 80181e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80181e6:	2e00      	cmp	r6, #0
 80181e8:	d0f9      	beq.n	80181de <__sflush_r+0x1a>
 80181ea:	2300      	movs	r3, #0
 80181ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80181f0:	682f      	ldr	r7, [r5, #0]
 80181f2:	6a21      	ldr	r1, [r4, #32]
 80181f4:	602b      	str	r3, [r5, #0]
 80181f6:	d032      	beq.n	801825e <__sflush_r+0x9a>
 80181f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80181fa:	89a3      	ldrh	r3, [r4, #12]
 80181fc:	075a      	lsls	r2, r3, #29
 80181fe:	d505      	bpl.n	801820c <__sflush_r+0x48>
 8018200:	6863      	ldr	r3, [r4, #4]
 8018202:	1ac0      	subs	r0, r0, r3
 8018204:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018206:	b10b      	cbz	r3, 801820c <__sflush_r+0x48>
 8018208:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801820a:	1ac0      	subs	r0, r0, r3
 801820c:	2300      	movs	r3, #0
 801820e:	4602      	mov	r2, r0
 8018210:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018212:	6a21      	ldr	r1, [r4, #32]
 8018214:	4628      	mov	r0, r5
 8018216:	47b0      	blx	r6
 8018218:	1c43      	adds	r3, r0, #1
 801821a:	89a3      	ldrh	r3, [r4, #12]
 801821c:	d106      	bne.n	801822c <__sflush_r+0x68>
 801821e:	6829      	ldr	r1, [r5, #0]
 8018220:	291d      	cmp	r1, #29
 8018222:	d82b      	bhi.n	801827c <__sflush_r+0xb8>
 8018224:	4a29      	ldr	r2, [pc, #164]	; (80182cc <__sflush_r+0x108>)
 8018226:	410a      	asrs	r2, r1
 8018228:	07d6      	lsls	r6, r2, #31
 801822a:	d427      	bmi.n	801827c <__sflush_r+0xb8>
 801822c:	2200      	movs	r2, #0
 801822e:	6062      	str	r2, [r4, #4]
 8018230:	04d9      	lsls	r1, r3, #19
 8018232:	6922      	ldr	r2, [r4, #16]
 8018234:	6022      	str	r2, [r4, #0]
 8018236:	d504      	bpl.n	8018242 <__sflush_r+0x7e>
 8018238:	1c42      	adds	r2, r0, #1
 801823a:	d101      	bne.n	8018240 <__sflush_r+0x7c>
 801823c:	682b      	ldr	r3, [r5, #0]
 801823e:	b903      	cbnz	r3, 8018242 <__sflush_r+0x7e>
 8018240:	6560      	str	r0, [r4, #84]	; 0x54
 8018242:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018244:	602f      	str	r7, [r5, #0]
 8018246:	2900      	cmp	r1, #0
 8018248:	d0c9      	beq.n	80181de <__sflush_r+0x1a>
 801824a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801824e:	4299      	cmp	r1, r3
 8018250:	d002      	beq.n	8018258 <__sflush_r+0x94>
 8018252:	4628      	mov	r0, r5
 8018254:	f7fe fbb2 	bl	80169bc <_free_r>
 8018258:	2000      	movs	r0, #0
 801825a:	6360      	str	r0, [r4, #52]	; 0x34
 801825c:	e7c0      	b.n	80181e0 <__sflush_r+0x1c>
 801825e:	2301      	movs	r3, #1
 8018260:	4628      	mov	r0, r5
 8018262:	47b0      	blx	r6
 8018264:	1c41      	adds	r1, r0, #1
 8018266:	d1c8      	bne.n	80181fa <__sflush_r+0x36>
 8018268:	682b      	ldr	r3, [r5, #0]
 801826a:	2b00      	cmp	r3, #0
 801826c:	d0c5      	beq.n	80181fa <__sflush_r+0x36>
 801826e:	2b1d      	cmp	r3, #29
 8018270:	d001      	beq.n	8018276 <__sflush_r+0xb2>
 8018272:	2b16      	cmp	r3, #22
 8018274:	d101      	bne.n	801827a <__sflush_r+0xb6>
 8018276:	602f      	str	r7, [r5, #0]
 8018278:	e7b1      	b.n	80181de <__sflush_r+0x1a>
 801827a:	89a3      	ldrh	r3, [r4, #12]
 801827c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018280:	81a3      	strh	r3, [r4, #12]
 8018282:	e7ad      	b.n	80181e0 <__sflush_r+0x1c>
 8018284:	690f      	ldr	r7, [r1, #16]
 8018286:	2f00      	cmp	r7, #0
 8018288:	d0a9      	beq.n	80181de <__sflush_r+0x1a>
 801828a:	0793      	lsls	r3, r2, #30
 801828c:	680e      	ldr	r6, [r1, #0]
 801828e:	bf08      	it	eq
 8018290:	694b      	ldreq	r3, [r1, #20]
 8018292:	600f      	str	r7, [r1, #0]
 8018294:	bf18      	it	ne
 8018296:	2300      	movne	r3, #0
 8018298:	eba6 0807 	sub.w	r8, r6, r7
 801829c:	608b      	str	r3, [r1, #8]
 801829e:	f1b8 0f00 	cmp.w	r8, #0
 80182a2:	dd9c      	ble.n	80181de <__sflush_r+0x1a>
 80182a4:	6a21      	ldr	r1, [r4, #32]
 80182a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80182a8:	4643      	mov	r3, r8
 80182aa:	463a      	mov	r2, r7
 80182ac:	4628      	mov	r0, r5
 80182ae:	47b0      	blx	r6
 80182b0:	2800      	cmp	r0, #0
 80182b2:	dc06      	bgt.n	80182c2 <__sflush_r+0xfe>
 80182b4:	89a3      	ldrh	r3, [r4, #12]
 80182b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182ba:	81a3      	strh	r3, [r4, #12]
 80182bc:	f04f 30ff 	mov.w	r0, #4294967295
 80182c0:	e78e      	b.n	80181e0 <__sflush_r+0x1c>
 80182c2:	4407      	add	r7, r0
 80182c4:	eba8 0800 	sub.w	r8, r8, r0
 80182c8:	e7e9      	b.n	801829e <__sflush_r+0xda>
 80182ca:	bf00      	nop
 80182cc:	dfbffffe 	.word	0xdfbffffe

080182d0 <_fflush_r>:
 80182d0:	b538      	push	{r3, r4, r5, lr}
 80182d2:	690b      	ldr	r3, [r1, #16]
 80182d4:	4605      	mov	r5, r0
 80182d6:	460c      	mov	r4, r1
 80182d8:	b913      	cbnz	r3, 80182e0 <_fflush_r+0x10>
 80182da:	2500      	movs	r5, #0
 80182dc:	4628      	mov	r0, r5
 80182de:	bd38      	pop	{r3, r4, r5, pc}
 80182e0:	b118      	cbz	r0, 80182ea <_fflush_r+0x1a>
 80182e2:	6a03      	ldr	r3, [r0, #32]
 80182e4:	b90b      	cbnz	r3, 80182ea <_fflush_r+0x1a>
 80182e6:	f7fe fa05 	bl	80166f4 <__sinit>
 80182ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d0f3      	beq.n	80182da <_fflush_r+0xa>
 80182f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80182f4:	07d0      	lsls	r0, r2, #31
 80182f6:	d404      	bmi.n	8018302 <_fflush_r+0x32>
 80182f8:	0599      	lsls	r1, r3, #22
 80182fa:	d402      	bmi.n	8018302 <_fflush_r+0x32>
 80182fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80182fe:	f7fe fb36 	bl	801696e <__retarget_lock_acquire_recursive>
 8018302:	4628      	mov	r0, r5
 8018304:	4621      	mov	r1, r4
 8018306:	f7ff ff5d 	bl	80181c4 <__sflush_r>
 801830a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801830c:	07da      	lsls	r2, r3, #31
 801830e:	4605      	mov	r5, r0
 8018310:	d4e4      	bmi.n	80182dc <_fflush_r+0xc>
 8018312:	89a3      	ldrh	r3, [r4, #12]
 8018314:	059b      	lsls	r3, r3, #22
 8018316:	d4e1      	bmi.n	80182dc <_fflush_r+0xc>
 8018318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801831a:	f7fe fb29 	bl	8016970 <__retarget_lock_release_recursive>
 801831e:	e7dd      	b.n	80182dc <_fflush_r+0xc>

08018320 <memmove>:
 8018320:	4288      	cmp	r0, r1
 8018322:	b510      	push	{r4, lr}
 8018324:	eb01 0402 	add.w	r4, r1, r2
 8018328:	d902      	bls.n	8018330 <memmove+0x10>
 801832a:	4284      	cmp	r4, r0
 801832c:	4623      	mov	r3, r4
 801832e:	d807      	bhi.n	8018340 <memmove+0x20>
 8018330:	1e43      	subs	r3, r0, #1
 8018332:	42a1      	cmp	r1, r4
 8018334:	d008      	beq.n	8018348 <memmove+0x28>
 8018336:	f811 2b01 	ldrb.w	r2, [r1], #1
 801833a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801833e:	e7f8      	b.n	8018332 <memmove+0x12>
 8018340:	4402      	add	r2, r0
 8018342:	4601      	mov	r1, r0
 8018344:	428a      	cmp	r2, r1
 8018346:	d100      	bne.n	801834a <memmove+0x2a>
 8018348:	bd10      	pop	{r4, pc}
 801834a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801834e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018352:	e7f7      	b.n	8018344 <memmove+0x24>

08018354 <_sbrk_r>:
 8018354:	b538      	push	{r3, r4, r5, lr}
 8018356:	4d06      	ldr	r5, [pc, #24]	; (8018370 <_sbrk_r+0x1c>)
 8018358:	2300      	movs	r3, #0
 801835a:	4604      	mov	r4, r0
 801835c:	4608      	mov	r0, r1
 801835e:	602b      	str	r3, [r5, #0]
 8018360:	f7f0 fcbc 	bl	8008cdc <_sbrk>
 8018364:	1c43      	adds	r3, r0, #1
 8018366:	d102      	bne.n	801836e <_sbrk_r+0x1a>
 8018368:	682b      	ldr	r3, [r5, #0]
 801836a:	b103      	cbz	r3, 801836e <_sbrk_r+0x1a>
 801836c:	6023      	str	r3, [r4, #0]
 801836e:	bd38      	pop	{r3, r4, r5, pc}
 8018370:	200036b0 	.word	0x200036b0

08018374 <__assert_func>:
 8018374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018376:	4614      	mov	r4, r2
 8018378:	461a      	mov	r2, r3
 801837a:	4b09      	ldr	r3, [pc, #36]	; (80183a0 <__assert_func+0x2c>)
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	4605      	mov	r5, r0
 8018380:	68d8      	ldr	r0, [r3, #12]
 8018382:	b14c      	cbz	r4, 8018398 <__assert_func+0x24>
 8018384:	4b07      	ldr	r3, [pc, #28]	; (80183a4 <__assert_func+0x30>)
 8018386:	9100      	str	r1, [sp, #0]
 8018388:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801838c:	4906      	ldr	r1, [pc, #24]	; (80183a8 <__assert_func+0x34>)
 801838e:	462b      	mov	r3, r5
 8018390:	f000 f85c 	bl	801844c <fiprintf>
 8018394:	f000 f86c 	bl	8018470 <abort>
 8018398:	4b04      	ldr	r3, [pc, #16]	; (80183ac <__assert_func+0x38>)
 801839a:	461c      	mov	r4, r3
 801839c:	e7f3      	b.n	8018386 <__assert_func+0x12>
 801839e:	bf00      	nop
 80183a0:	2000037c 	.word	0x2000037c
 80183a4:	080191c7 	.word	0x080191c7
 80183a8:	080191d4 	.word	0x080191d4
 80183ac:	08019202 	.word	0x08019202

080183b0 <_calloc_r>:
 80183b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80183b2:	fba1 2402 	umull	r2, r4, r1, r2
 80183b6:	b94c      	cbnz	r4, 80183cc <_calloc_r+0x1c>
 80183b8:	4611      	mov	r1, r2
 80183ba:	9201      	str	r2, [sp, #4]
 80183bc:	f7fe fec2 	bl	8017144 <_malloc_r>
 80183c0:	9a01      	ldr	r2, [sp, #4]
 80183c2:	4605      	mov	r5, r0
 80183c4:	b930      	cbnz	r0, 80183d4 <_calloc_r+0x24>
 80183c6:	4628      	mov	r0, r5
 80183c8:	b003      	add	sp, #12
 80183ca:	bd30      	pop	{r4, r5, pc}
 80183cc:	220c      	movs	r2, #12
 80183ce:	6002      	str	r2, [r0, #0]
 80183d0:	2500      	movs	r5, #0
 80183d2:	e7f8      	b.n	80183c6 <_calloc_r+0x16>
 80183d4:	4621      	mov	r1, r4
 80183d6:	f7fe fa3f 	bl	8016858 <memset>
 80183da:	e7f4      	b.n	80183c6 <_calloc_r+0x16>

080183dc <malloc>:
 80183dc:	4b02      	ldr	r3, [pc, #8]	; (80183e8 <malloc+0xc>)
 80183de:	4601      	mov	r1, r0
 80183e0:	6818      	ldr	r0, [r3, #0]
 80183e2:	f7fe beaf 	b.w	8017144 <_malloc_r>
 80183e6:	bf00      	nop
 80183e8:	2000037c 	.word	0x2000037c

080183ec <_realloc_r>:
 80183ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183f0:	4680      	mov	r8, r0
 80183f2:	4614      	mov	r4, r2
 80183f4:	460e      	mov	r6, r1
 80183f6:	b921      	cbnz	r1, 8018402 <_realloc_r+0x16>
 80183f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183fc:	4611      	mov	r1, r2
 80183fe:	f7fe bea1 	b.w	8017144 <_malloc_r>
 8018402:	b92a      	cbnz	r2, 8018410 <_realloc_r+0x24>
 8018404:	f7fe fada 	bl	80169bc <_free_r>
 8018408:	4625      	mov	r5, r4
 801840a:	4628      	mov	r0, r5
 801840c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018410:	f000 f835 	bl	801847e <_malloc_usable_size_r>
 8018414:	4284      	cmp	r4, r0
 8018416:	4607      	mov	r7, r0
 8018418:	d802      	bhi.n	8018420 <_realloc_r+0x34>
 801841a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801841e:	d812      	bhi.n	8018446 <_realloc_r+0x5a>
 8018420:	4621      	mov	r1, r4
 8018422:	4640      	mov	r0, r8
 8018424:	f7fe fe8e 	bl	8017144 <_malloc_r>
 8018428:	4605      	mov	r5, r0
 801842a:	2800      	cmp	r0, #0
 801842c:	d0ed      	beq.n	801840a <_realloc_r+0x1e>
 801842e:	42bc      	cmp	r4, r7
 8018430:	4622      	mov	r2, r4
 8018432:	4631      	mov	r1, r6
 8018434:	bf28      	it	cs
 8018436:	463a      	movcs	r2, r7
 8018438:	f7fe faa3 	bl	8016982 <memcpy>
 801843c:	4631      	mov	r1, r6
 801843e:	4640      	mov	r0, r8
 8018440:	f7fe fabc 	bl	80169bc <_free_r>
 8018444:	e7e1      	b.n	801840a <_realloc_r+0x1e>
 8018446:	4635      	mov	r5, r6
 8018448:	e7df      	b.n	801840a <_realloc_r+0x1e>
	...

0801844c <fiprintf>:
 801844c:	b40e      	push	{r1, r2, r3}
 801844e:	b503      	push	{r0, r1, lr}
 8018450:	4601      	mov	r1, r0
 8018452:	ab03      	add	r3, sp, #12
 8018454:	4805      	ldr	r0, [pc, #20]	; (801846c <fiprintf+0x20>)
 8018456:	f853 2b04 	ldr.w	r2, [r3], #4
 801845a:	6800      	ldr	r0, [r0, #0]
 801845c:	9301      	str	r3, [sp, #4]
 801845e:	f000 f83f 	bl	80184e0 <_vfiprintf_r>
 8018462:	b002      	add	sp, #8
 8018464:	f85d eb04 	ldr.w	lr, [sp], #4
 8018468:	b003      	add	sp, #12
 801846a:	4770      	bx	lr
 801846c:	2000037c 	.word	0x2000037c

08018470 <abort>:
 8018470:	b508      	push	{r3, lr}
 8018472:	2006      	movs	r0, #6
 8018474:	f000 fa0c 	bl	8018890 <raise>
 8018478:	2001      	movs	r0, #1
 801847a:	f7f0 fbb7 	bl	8008bec <_exit>

0801847e <_malloc_usable_size_r>:
 801847e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018482:	1f18      	subs	r0, r3, #4
 8018484:	2b00      	cmp	r3, #0
 8018486:	bfbc      	itt	lt
 8018488:	580b      	ldrlt	r3, [r1, r0]
 801848a:	18c0      	addlt	r0, r0, r3
 801848c:	4770      	bx	lr

0801848e <__sfputc_r>:
 801848e:	6893      	ldr	r3, [r2, #8]
 8018490:	3b01      	subs	r3, #1
 8018492:	2b00      	cmp	r3, #0
 8018494:	b410      	push	{r4}
 8018496:	6093      	str	r3, [r2, #8]
 8018498:	da08      	bge.n	80184ac <__sfputc_r+0x1e>
 801849a:	6994      	ldr	r4, [r2, #24]
 801849c:	42a3      	cmp	r3, r4
 801849e:	db01      	blt.n	80184a4 <__sfputc_r+0x16>
 80184a0:	290a      	cmp	r1, #10
 80184a2:	d103      	bne.n	80184ac <__sfputc_r+0x1e>
 80184a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184a8:	f000 b934 	b.w	8018714 <__swbuf_r>
 80184ac:	6813      	ldr	r3, [r2, #0]
 80184ae:	1c58      	adds	r0, r3, #1
 80184b0:	6010      	str	r0, [r2, #0]
 80184b2:	7019      	strb	r1, [r3, #0]
 80184b4:	4608      	mov	r0, r1
 80184b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184ba:	4770      	bx	lr

080184bc <__sfputs_r>:
 80184bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184be:	4606      	mov	r6, r0
 80184c0:	460f      	mov	r7, r1
 80184c2:	4614      	mov	r4, r2
 80184c4:	18d5      	adds	r5, r2, r3
 80184c6:	42ac      	cmp	r4, r5
 80184c8:	d101      	bne.n	80184ce <__sfputs_r+0x12>
 80184ca:	2000      	movs	r0, #0
 80184cc:	e007      	b.n	80184de <__sfputs_r+0x22>
 80184ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184d2:	463a      	mov	r2, r7
 80184d4:	4630      	mov	r0, r6
 80184d6:	f7ff ffda 	bl	801848e <__sfputc_r>
 80184da:	1c43      	adds	r3, r0, #1
 80184dc:	d1f3      	bne.n	80184c6 <__sfputs_r+0xa>
 80184de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080184e0 <_vfiprintf_r>:
 80184e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184e4:	460d      	mov	r5, r1
 80184e6:	b09d      	sub	sp, #116	; 0x74
 80184e8:	4614      	mov	r4, r2
 80184ea:	4698      	mov	r8, r3
 80184ec:	4606      	mov	r6, r0
 80184ee:	b118      	cbz	r0, 80184f8 <_vfiprintf_r+0x18>
 80184f0:	6a03      	ldr	r3, [r0, #32]
 80184f2:	b90b      	cbnz	r3, 80184f8 <_vfiprintf_r+0x18>
 80184f4:	f7fe f8fe 	bl	80166f4 <__sinit>
 80184f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80184fa:	07d9      	lsls	r1, r3, #31
 80184fc:	d405      	bmi.n	801850a <_vfiprintf_r+0x2a>
 80184fe:	89ab      	ldrh	r3, [r5, #12]
 8018500:	059a      	lsls	r2, r3, #22
 8018502:	d402      	bmi.n	801850a <_vfiprintf_r+0x2a>
 8018504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018506:	f7fe fa32 	bl	801696e <__retarget_lock_acquire_recursive>
 801850a:	89ab      	ldrh	r3, [r5, #12]
 801850c:	071b      	lsls	r3, r3, #28
 801850e:	d501      	bpl.n	8018514 <_vfiprintf_r+0x34>
 8018510:	692b      	ldr	r3, [r5, #16]
 8018512:	b99b      	cbnz	r3, 801853c <_vfiprintf_r+0x5c>
 8018514:	4629      	mov	r1, r5
 8018516:	4630      	mov	r0, r6
 8018518:	f000 f93a 	bl	8018790 <__swsetup_r>
 801851c:	b170      	cbz	r0, 801853c <_vfiprintf_r+0x5c>
 801851e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018520:	07dc      	lsls	r4, r3, #31
 8018522:	d504      	bpl.n	801852e <_vfiprintf_r+0x4e>
 8018524:	f04f 30ff 	mov.w	r0, #4294967295
 8018528:	b01d      	add	sp, #116	; 0x74
 801852a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801852e:	89ab      	ldrh	r3, [r5, #12]
 8018530:	0598      	lsls	r0, r3, #22
 8018532:	d4f7      	bmi.n	8018524 <_vfiprintf_r+0x44>
 8018534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018536:	f7fe fa1b 	bl	8016970 <__retarget_lock_release_recursive>
 801853a:	e7f3      	b.n	8018524 <_vfiprintf_r+0x44>
 801853c:	2300      	movs	r3, #0
 801853e:	9309      	str	r3, [sp, #36]	; 0x24
 8018540:	2320      	movs	r3, #32
 8018542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018546:	f8cd 800c 	str.w	r8, [sp, #12]
 801854a:	2330      	movs	r3, #48	; 0x30
 801854c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018700 <_vfiprintf_r+0x220>
 8018550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018554:	f04f 0901 	mov.w	r9, #1
 8018558:	4623      	mov	r3, r4
 801855a:	469a      	mov	sl, r3
 801855c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018560:	b10a      	cbz	r2, 8018566 <_vfiprintf_r+0x86>
 8018562:	2a25      	cmp	r2, #37	; 0x25
 8018564:	d1f9      	bne.n	801855a <_vfiprintf_r+0x7a>
 8018566:	ebba 0b04 	subs.w	fp, sl, r4
 801856a:	d00b      	beq.n	8018584 <_vfiprintf_r+0xa4>
 801856c:	465b      	mov	r3, fp
 801856e:	4622      	mov	r2, r4
 8018570:	4629      	mov	r1, r5
 8018572:	4630      	mov	r0, r6
 8018574:	f7ff ffa2 	bl	80184bc <__sfputs_r>
 8018578:	3001      	adds	r0, #1
 801857a:	f000 80a9 	beq.w	80186d0 <_vfiprintf_r+0x1f0>
 801857e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018580:	445a      	add	r2, fp
 8018582:	9209      	str	r2, [sp, #36]	; 0x24
 8018584:	f89a 3000 	ldrb.w	r3, [sl]
 8018588:	2b00      	cmp	r3, #0
 801858a:	f000 80a1 	beq.w	80186d0 <_vfiprintf_r+0x1f0>
 801858e:	2300      	movs	r3, #0
 8018590:	f04f 32ff 	mov.w	r2, #4294967295
 8018594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018598:	f10a 0a01 	add.w	sl, sl, #1
 801859c:	9304      	str	r3, [sp, #16]
 801859e:	9307      	str	r3, [sp, #28]
 80185a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80185a4:	931a      	str	r3, [sp, #104]	; 0x68
 80185a6:	4654      	mov	r4, sl
 80185a8:	2205      	movs	r2, #5
 80185aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185ae:	4854      	ldr	r0, [pc, #336]	; (8018700 <_vfiprintf_r+0x220>)
 80185b0:	f7ef fa46 	bl	8007a40 <memchr>
 80185b4:	9a04      	ldr	r2, [sp, #16]
 80185b6:	b9d8      	cbnz	r0, 80185f0 <_vfiprintf_r+0x110>
 80185b8:	06d1      	lsls	r1, r2, #27
 80185ba:	bf44      	itt	mi
 80185bc:	2320      	movmi	r3, #32
 80185be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80185c2:	0713      	lsls	r3, r2, #28
 80185c4:	bf44      	itt	mi
 80185c6:	232b      	movmi	r3, #43	; 0x2b
 80185c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80185cc:	f89a 3000 	ldrb.w	r3, [sl]
 80185d0:	2b2a      	cmp	r3, #42	; 0x2a
 80185d2:	d015      	beq.n	8018600 <_vfiprintf_r+0x120>
 80185d4:	9a07      	ldr	r2, [sp, #28]
 80185d6:	4654      	mov	r4, sl
 80185d8:	2000      	movs	r0, #0
 80185da:	f04f 0c0a 	mov.w	ip, #10
 80185de:	4621      	mov	r1, r4
 80185e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80185e4:	3b30      	subs	r3, #48	; 0x30
 80185e6:	2b09      	cmp	r3, #9
 80185e8:	d94d      	bls.n	8018686 <_vfiprintf_r+0x1a6>
 80185ea:	b1b0      	cbz	r0, 801861a <_vfiprintf_r+0x13a>
 80185ec:	9207      	str	r2, [sp, #28]
 80185ee:	e014      	b.n	801861a <_vfiprintf_r+0x13a>
 80185f0:	eba0 0308 	sub.w	r3, r0, r8
 80185f4:	fa09 f303 	lsl.w	r3, r9, r3
 80185f8:	4313      	orrs	r3, r2
 80185fa:	9304      	str	r3, [sp, #16]
 80185fc:	46a2      	mov	sl, r4
 80185fe:	e7d2      	b.n	80185a6 <_vfiprintf_r+0xc6>
 8018600:	9b03      	ldr	r3, [sp, #12]
 8018602:	1d19      	adds	r1, r3, #4
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	9103      	str	r1, [sp, #12]
 8018608:	2b00      	cmp	r3, #0
 801860a:	bfbb      	ittet	lt
 801860c:	425b      	neglt	r3, r3
 801860e:	f042 0202 	orrlt.w	r2, r2, #2
 8018612:	9307      	strge	r3, [sp, #28]
 8018614:	9307      	strlt	r3, [sp, #28]
 8018616:	bfb8      	it	lt
 8018618:	9204      	strlt	r2, [sp, #16]
 801861a:	7823      	ldrb	r3, [r4, #0]
 801861c:	2b2e      	cmp	r3, #46	; 0x2e
 801861e:	d10c      	bne.n	801863a <_vfiprintf_r+0x15a>
 8018620:	7863      	ldrb	r3, [r4, #1]
 8018622:	2b2a      	cmp	r3, #42	; 0x2a
 8018624:	d134      	bne.n	8018690 <_vfiprintf_r+0x1b0>
 8018626:	9b03      	ldr	r3, [sp, #12]
 8018628:	1d1a      	adds	r2, r3, #4
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	9203      	str	r2, [sp, #12]
 801862e:	2b00      	cmp	r3, #0
 8018630:	bfb8      	it	lt
 8018632:	f04f 33ff 	movlt.w	r3, #4294967295
 8018636:	3402      	adds	r4, #2
 8018638:	9305      	str	r3, [sp, #20]
 801863a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018710 <_vfiprintf_r+0x230>
 801863e:	7821      	ldrb	r1, [r4, #0]
 8018640:	2203      	movs	r2, #3
 8018642:	4650      	mov	r0, sl
 8018644:	f7ef f9fc 	bl	8007a40 <memchr>
 8018648:	b138      	cbz	r0, 801865a <_vfiprintf_r+0x17a>
 801864a:	9b04      	ldr	r3, [sp, #16]
 801864c:	eba0 000a 	sub.w	r0, r0, sl
 8018650:	2240      	movs	r2, #64	; 0x40
 8018652:	4082      	lsls	r2, r0
 8018654:	4313      	orrs	r3, r2
 8018656:	3401      	adds	r4, #1
 8018658:	9304      	str	r3, [sp, #16]
 801865a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801865e:	4829      	ldr	r0, [pc, #164]	; (8018704 <_vfiprintf_r+0x224>)
 8018660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018664:	2206      	movs	r2, #6
 8018666:	f7ef f9eb 	bl	8007a40 <memchr>
 801866a:	2800      	cmp	r0, #0
 801866c:	d03f      	beq.n	80186ee <_vfiprintf_r+0x20e>
 801866e:	4b26      	ldr	r3, [pc, #152]	; (8018708 <_vfiprintf_r+0x228>)
 8018670:	bb1b      	cbnz	r3, 80186ba <_vfiprintf_r+0x1da>
 8018672:	9b03      	ldr	r3, [sp, #12]
 8018674:	3307      	adds	r3, #7
 8018676:	f023 0307 	bic.w	r3, r3, #7
 801867a:	3308      	adds	r3, #8
 801867c:	9303      	str	r3, [sp, #12]
 801867e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018680:	443b      	add	r3, r7
 8018682:	9309      	str	r3, [sp, #36]	; 0x24
 8018684:	e768      	b.n	8018558 <_vfiprintf_r+0x78>
 8018686:	fb0c 3202 	mla	r2, ip, r2, r3
 801868a:	460c      	mov	r4, r1
 801868c:	2001      	movs	r0, #1
 801868e:	e7a6      	b.n	80185de <_vfiprintf_r+0xfe>
 8018690:	2300      	movs	r3, #0
 8018692:	3401      	adds	r4, #1
 8018694:	9305      	str	r3, [sp, #20]
 8018696:	4619      	mov	r1, r3
 8018698:	f04f 0c0a 	mov.w	ip, #10
 801869c:	4620      	mov	r0, r4
 801869e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80186a2:	3a30      	subs	r2, #48	; 0x30
 80186a4:	2a09      	cmp	r2, #9
 80186a6:	d903      	bls.n	80186b0 <_vfiprintf_r+0x1d0>
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d0c6      	beq.n	801863a <_vfiprintf_r+0x15a>
 80186ac:	9105      	str	r1, [sp, #20]
 80186ae:	e7c4      	b.n	801863a <_vfiprintf_r+0x15a>
 80186b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80186b4:	4604      	mov	r4, r0
 80186b6:	2301      	movs	r3, #1
 80186b8:	e7f0      	b.n	801869c <_vfiprintf_r+0x1bc>
 80186ba:	ab03      	add	r3, sp, #12
 80186bc:	9300      	str	r3, [sp, #0]
 80186be:	462a      	mov	r2, r5
 80186c0:	4b12      	ldr	r3, [pc, #72]	; (801870c <_vfiprintf_r+0x22c>)
 80186c2:	a904      	add	r1, sp, #16
 80186c4:	4630      	mov	r0, r6
 80186c6:	f3af 8000 	nop.w
 80186ca:	4607      	mov	r7, r0
 80186cc:	1c78      	adds	r0, r7, #1
 80186ce:	d1d6      	bne.n	801867e <_vfiprintf_r+0x19e>
 80186d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80186d2:	07d9      	lsls	r1, r3, #31
 80186d4:	d405      	bmi.n	80186e2 <_vfiprintf_r+0x202>
 80186d6:	89ab      	ldrh	r3, [r5, #12]
 80186d8:	059a      	lsls	r2, r3, #22
 80186da:	d402      	bmi.n	80186e2 <_vfiprintf_r+0x202>
 80186dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80186de:	f7fe f947 	bl	8016970 <__retarget_lock_release_recursive>
 80186e2:	89ab      	ldrh	r3, [r5, #12]
 80186e4:	065b      	lsls	r3, r3, #25
 80186e6:	f53f af1d 	bmi.w	8018524 <_vfiprintf_r+0x44>
 80186ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80186ec:	e71c      	b.n	8018528 <_vfiprintf_r+0x48>
 80186ee:	ab03      	add	r3, sp, #12
 80186f0:	9300      	str	r3, [sp, #0]
 80186f2:	462a      	mov	r2, r5
 80186f4:	4b05      	ldr	r3, [pc, #20]	; (801870c <_vfiprintf_r+0x22c>)
 80186f6:	a904      	add	r1, sp, #16
 80186f8:	4630      	mov	r0, r6
 80186fa:	f7ff fc41 	bl	8017f80 <_printf_i>
 80186fe:	e7e4      	b.n	80186ca <_vfiprintf_r+0x1ea>
 8018700:	08019194 	.word	0x08019194
 8018704:	0801919e 	.word	0x0801919e
 8018708:	00000000 	.word	0x00000000
 801870c:	080184bd 	.word	0x080184bd
 8018710:	0801919a 	.word	0x0801919a

08018714 <__swbuf_r>:
 8018714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018716:	460e      	mov	r6, r1
 8018718:	4614      	mov	r4, r2
 801871a:	4605      	mov	r5, r0
 801871c:	b118      	cbz	r0, 8018726 <__swbuf_r+0x12>
 801871e:	6a03      	ldr	r3, [r0, #32]
 8018720:	b90b      	cbnz	r3, 8018726 <__swbuf_r+0x12>
 8018722:	f7fd ffe7 	bl	80166f4 <__sinit>
 8018726:	69a3      	ldr	r3, [r4, #24]
 8018728:	60a3      	str	r3, [r4, #8]
 801872a:	89a3      	ldrh	r3, [r4, #12]
 801872c:	071a      	lsls	r2, r3, #28
 801872e:	d525      	bpl.n	801877c <__swbuf_r+0x68>
 8018730:	6923      	ldr	r3, [r4, #16]
 8018732:	b31b      	cbz	r3, 801877c <__swbuf_r+0x68>
 8018734:	6823      	ldr	r3, [r4, #0]
 8018736:	6922      	ldr	r2, [r4, #16]
 8018738:	1a98      	subs	r0, r3, r2
 801873a:	6963      	ldr	r3, [r4, #20]
 801873c:	b2f6      	uxtb	r6, r6
 801873e:	4283      	cmp	r3, r0
 8018740:	4637      	mov	r7, r6
 8018742:	dc04      	bgt.n	801874e <__swbuf_r+0x3a>
 8018744:	4621      	mov	r1, r4
 8018746:	4628      	mov	r0, r5
 8018748:	f7ff fdc2 	bl	80182d0 <_fflush_r>
 801874c:	b9e0      	cbnz	r0, 8018788 <__swbuf_r+0x74>
 801874e:	68a3      	ldr	r3, [r4, #8]
 8018750:	3b01      	subs	r3, #1
 8018752:	60a3      	str	r3, [r4, #8]
 8018754:	6823      	ldr	r3, [r4, #0]
 8018756:	1c5a      	adds	r2, r3, #1
 8018758:	6022      	str	r2, [r4, #0]
 801875a:	701e      	strb	r6, [r3, #0]
 801875c:	6962      	ldr	r2, [r4, #20]
 801875e:	1c43      	adds	r3, r0, #1
 8018760:	429a      	cmp	r2, r3
 8018762:	d004      	beq.n	801876e <__swbuf_r+0x5a>
 8018764:	89a3      	ldrh	r3, [r4, #12]
 8018766:	07db      	lsls	r3, r3, #31
 8018768:	d506      	bpl.n	8018778 <__swbuf_r+0x64>
 801876a:	2e0a      	cmp	r6, #10
 801876c:	d104      	bne.n	8018778 <__swbuf_r+0x64>
 801876e:	4621      	mov	r1, r4
 8018770:	4628      	mov	r0, r5
 8018772:	f7ff fdad 	bl	80182d0 <_fflush_r>
 8018776:	b938      	cbnz	r0, 8018788 <__swbuf_r+0x74>
 8018778:	4638      	mov	r0, r7
 801877a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801877c:	4621      	mov	r1, r4
 801877e:	4628      	mov	r0, r5
 8018780:	f000 f806 	bl	8018790 <__swsetup_r>
 8018784:	2800      	cmp	r0, #0
 8018786:	d0d5      	beq.n	8018734 <__swbuf_r+0x20>
 8018788:	f04f 37ff 	mov.w	r7, #4294967295
 801878c:	e7f4      	b.n	8018778 <__swbuf_r+0x64>
	...

08018790 <__swsetup_r>:
 8018790:	b538      	push	{r3, r4, r5, lr}
 8018792:	4b2a      	ldr	r3, [pc, #168]	; (801883c <__swsetup_r+0xac>)
 8018794:	4605      	mov	r5, r0
 8018796:	6818      	ldr	r0, [r3, #0]
 8018798:	460c      	mov	r4, r1
 801879a:	b118      	cbz	r0, 80187a4 <__swsetup_r+0x14>
 801879c:	6a03      	ldr	r3, [r0, #32]
 801879e:	b90b      	cbnz	r3, 80187a4 <__swsetup_r+0x14>
 80187a0:	f7fd ffa8 	bl	80166f4 <__sinit>
 80187a4:	89a3      	ldrh	r3, [r4, #12]
 80187a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80187aa:	0718      	lsls	r0, r3, #28
 80187ac:	d422      	bmi.n	80187f4 <__swsetup_r+0x64>
 80187ae:	06d9      	lsls	r1, r3, #27
 80187b0:	d407      	bmi.n	80187c2 <__swsetup_r+0x32>
 80187b2:	2309      	movs	r3, #9
 80187b4:	602b      	str	r3, [r5, #0]
 80187b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80187ba:	81a3      	strh	r3, [r4, #12]
 80187bc:	f04f 30ff 	mov.w	r0, #4294967295
 80187c0:	e034      	b.n	801882c <__swsetup_r+0x9c>
 80187c2:	0758      	lsls	r0, r3, #29
 80187c4:	d512      	bpl.n	80187ec <__swsetup_r+0x5c>
 80187c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80187c8:	b141      	cbz	r1, 80187dc <__swsetup_r+0x4c>
 80187ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80187ce:	4299      	cmp	r1, r3
 80187d0:	d002      	beq.n	80187d8 <__swsetup_r+0x48>
 80187d2:	4628      	mov	r0, r5
 80187d4:	f7fe f8f2 	bl	80169bc <_free_r>
 80187d8:	2300      	movs	r3, #0
 80187da:	6363      	str	r3, [r4, #52]	; 0x34
 80187dc:	89a3      	ldrh	r3, [r4, #12]
 80187de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80187e2:	81a3      	strh	r3, [r4, #12]
 80187e4:	2300      	movs	r3, #0
 80187e6:	6063      	str	r3, [r4, #4]
 80187e8:	6923      	ldr	r3, [r4, #16]
 80187ea:	6023      	str	r3, [r4, #0]
 80187ec:	89a3      	ldrh	r3, [r4, #12]
 80187ee:	f043 0308 	orr.w	r3, r3, #8
 80187f2:	81a3      	strh	r3, [r4, #12]
 80187f4:	6923      	ldr	r3, [r4, #16]
 80187f6:	b94b      	cbnz	r3, 801880c <__swsetup_r+0x7c>
 80187f8:	89a3      	ldrh	r3, [r4, #12]
 80187fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80187fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018802:	d003      	beq.n	801880c <__swsetup_r+0x7c>
 8018804:	4621      	mov	r1, r4
 8018806:	4628      	mov	r0, r5
 8018808:	f000 f884 	bl	8018914 <__smakebuf_r>
 801880c:	89a0      	ldrh	r0, [r4, #12]
 801880e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018812:	f010 0301 	ands.w	r3, r0, #1
 8018816:	d00a      	beq.n	801882e <__swsetup_r+0x9e>
 8018818:	2300      	movs	r3, #0
 801881a:	60a3      	str	r3, [r4, #8]
 801881c:	6963      	ldr	r3, [r4, #20]
 801881e:	425b      	negs	r3, r3
 8018820:	61a3      	str	r3, [r4, #24]
 8018822:	6923      	ldr	r3, [r4, #16]
 8018824:	b943      	cbnz	r3, 8018838 <__swsetup_r+0xa8>
 8018826:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801882a:	d1c4      	bne.n	80187b6 <__swsetup_r+0x26>
 801882c:	bd38      	pop	{r3, r4, r5, pc}
 801882e:	0781      	lsls	r1, r0, #30
 8018830:	bf58      	it	pl
 8018832:	6963      	ldrpl	r3, [r4, #20]
 8018834:	60a3      	str	r3, [r4, #8]
 8018836:	e7f4      	b.n	8018822 <__swsetup_r+0x92>
 8018838:	2000      	movs	r0, #0
 801883a:	e7f7      	b.n	801882c <__swsetup_r+0x9c>
 801883c:	2000037c 	.word	0x2000037c

08018840 <_raise_r>:
 8018840:	291f      	cmp	r1, #31
 8018842:	b538      	push	{r3, r4, r5, lr}
 8018844:	4604      	mov	r4, r0
 8018846:	460d      	mov	r5, r1
 8018848:	d904      	bls.n	8018854 <_raise_r+0x14>
 801884a:	2316      	movs	r3, #22
 801884c:	6003      	str	r3, [r0, #0]
 801884e:	f04f 30ff 	mov.w	r0, #4294967295
 8018852:	bd38      	pop	{r3, r4, r5, pc}
 8018854:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018856:	b112      	cbz	r2, 801885e <_raise_r+0x1e>
 8018858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801885c:	b94b      	cbnz	r3, 8018872 <_raise_r+0x32>
 801885e:	4620      	mov	r0, r4
 8018860:	f000 f830 	bl	80188c4 <_getpid_r>
 8018864:	462a      	mov	r2, r5
 8018866:	4601      	mov	r1, r0
 8018868:	4620      	mov	r0, r4
 801886a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801886e:	f000 b817 	b.w	80188a0 <_kill_r>
 8018872:	2b01      	cmp	r3, #1
 8018874:	d00a      	beq.n	801888c <_raise_r+0x4c>
 8018876:	1c59      	adds	r1, r3, #1
 8018878:	d103      	bne.n	8018882 <_raise_r+0x42>
 801887a:	2316      	movs	r3, #22
 801887c:	6003      	str	r3, [r0, #0]
 801887e:	2001      	movs	r0, #1
 8018880:	e7e7      	b.n	8018852 <_raise_r+0x12>
 8018882:	2400      	movs	r4, #0
 8018884:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018888:	4628      	mov	r0, r5
 801888a:	4798      	blx	r3
 801888c:	2000      	movs	r0, #0
 801888e:	e7e0      	b.n	8018852 <_raise_r+0x12>

08018890 <raise>:
 8018890:	4b02      	ldr	r3, [pc, #8]	; (801889c <raise+0xc>)
 8018892:	4601      	mov	r1, r0
 8018894:	6818      	ldr	r0, [r3, #0]
 8018896:	f7ff bfd3 	b.w	8018840 <_raise_r>
 801889a:	bf00      	nop
 801889c:	2000037c 	.word	0x2000037c

080188a0 <_kill_r>:
 80188a0:	b538      	push	{r3, r4, r5, lr}
 80188a2:	4d07      	ldr	r5, [pc, #28]	; (80188c0 <_kill_r+0x20>)
 80188a4:	2300      	movs	r3, #0
 80188a6:	4604      	mov	r4, r0
 80188a8:	4608      	mov	r0, r1
 80188aa:	4611      	mov	r1, r2
 80188ac:	602b      	str	r3, [r5, #0]
 80188ae:	f7f0 f98d 	bl	8008bcc <_kill>
 80188b2:	1c43      	adds	r3, r0, #1
 80188b4:	d102      	bne.n	80188bc <_kill_r+0x1c>
 80188b6:	682b      	ldr	r3, [r5, #0]
 80188b8:	b103      	cbz	r3, 80188bc <_kill_r+0x1c>
 80188ba:	6023      	str	r3, [r4, #0]
 80188bc:	bd38      	pop	{r3, r4, r5, pc}
 80188be:	bf00      	nop
 80188c0:	200036b0 	.word	0x200036b0

080188c4 <_getpid_r>:
 80188c4:	f7f0 b97a 	b.w	8008bbc <_getpid>

080188c8 <__swhatbuf_r>:
 80188c8:	b570      	push	{r4, r5, r6, lr}
 80188ca:	460c      	mov	r4, r1
 80188cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188d0:	2900      	cmp	r1, #0
 80188d2:	b096      	sub	sp, #88	; 0x58
 80188d4:	4615      	mov	r5, r2
 80188d6:	461e      	mov	r6, r3
 80188d8:	da0d      	bge.n	80188f6 <__swhatbuf_r+0x2e>
 80188da:	89a3      	ldrh	r3, [r4, #12]
 80188dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80188e0:	f04f 0100 	mov.w	r1, #0
 80188e4:	bf0c      	ite	eq
 80188e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80188ea:	2340      	movne	r3, #64	; 0x40
 80188ec:	2000      	movs	r0, #0
 80188ee:	6031      	str	r1, [r6, #0]
 80188f0:	602b      	str	r3, [r5, #0]
 80188f2:	b016      	add	sp, #88	; 0x58
 80188f4:	bd70      	pop	{r4, r5, r6, pc}
 80188f6:	466a      	mov	r2, sp
 80188f8:	f000 f848 	bl	801898c <_fstat_r>
 80188fc:	2800      	cmp	r0, #0
 80188fe:	dbec      	blt.n	80188da <__swhatbuf_r+0x12>
 8018900:	9901      	ldr	r1, [sp, #4]
 8018902:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018906:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801890a:	4259      	negs	r1, r3
 801890c:	4159      	adcs	r1, r3
 801890e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018912:	e7eb      	b.n	80188ec <__swhatbuf_r+0x24>

08018914 <__smakebuf_r>:
 8018914:	898b      	ldrh	r3, [r1, #12]
 8018916:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018918:	079d      	lsls	r5, r3, #30
 801891a:	4606      	mov	r6, r0
 801891c:	460c      	mov	r4, r1
 801891e:	d507      	bpl.n	8018930 <__smakebuf_r+0x1c>
 8018920:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018924:	6023      	str	r3, [r4, #0]
 8018926:	6123      	str	r3, [r4, #16]
 8018928:	2301      	movs	r3, #1
 801892a:	6163      	str	r3, [r4, #20]
 801892c:	b002      	add	sp, #8
 801892e:	bd70      	pop	{r4, r5, r6, pc}
 8018930:	ab01      	add	r3, sp, #4
 8018932:	466a      	mov	r2, sp
 8018934:	f7ff ffc8 	bl	80188c8 <__swhatbuf_r>
 8018938:	9900      	ldr	r1, [sp, #0]
 801893a:	4605      	mov	r5, r0
 801893c:	4630      	mov	r0, r6
 801893e:	f7fe fc01 	bl	8017144 <_malloc_r>
 8018942:	b948      	cbnz	r0, 8018958 <__smakebuf_r+0x44>
 8018944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018948:	059a      	lsls	r2, r3, #22
 801894a:	d4ef      	bmi.n	801892c <__smakebuf_r+0x18>
 801894c:	f023 0303 	bic.w	r3, r3, #3
 8018950:	f043 0302 	orr.w	r3, r3, #2
 8018954:	81a3      	strh	r3, [r4, #12]
 8018956:	e7e3      	b.n	8018920 <__smakebuf_r+0xc>
 8018958:	89a3      	ldrh	r3, [r4, #12]
 801895a:	6020      	str	r0, [r4, #0]
 801895c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018960:	81a3      	strh	r3, [r4, #12]
 8018962:	9b00      	ldr	r3, [sp, #0]
 8018964:	6163      	str	r3, [r4, #20]
 8018966:	9b01      	ldr	r3, [sp, #4]
 8018968:	6120      	str	r0, [r4, #16]
 801896a:	b15b      	cbz	r3, 8018984 <__smakebuf_r+0x70>
 801896c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018970:	4630      	mov	r0, r6
 8018972:	f000 f81d 	bl	80189b0 <_isatty_r>
 8018976:	b128      	cbz	r0, 8018984 <__smakebuf_r+0x70>
 8018978:	89a3      	ldrh	r3, [r4, #12]
 801897a:	f023 0303 	bic.w	r3, r3, #3
 801897e:	f043 0301 	orr.w	r3, r3, #1
 8018982:	81a3      	strh	r3, [r4, #12]
 8018984:	89a3      	ldrh	r3, [r4, #12]
 8018986:	431d      	orrs	r5, r3
 8018988:	81a5      	strh	r5, [r4, #12]
 801898a:	e7cf      	b.n	801892c <__smakebuf_r+0x18>

0801898c <_fstat_r>:
 801898c:	b538      	push	{r3, r4, r5, lr}
 801898e:	4d07      	ldr	r5, [pc, #28]	; (80189ac <_fstat_r+0x20>)
 8018990:	2300      	movs	r3, #0
 8018992:	4604      	mov	r4, r0
 8018994:	4608      	mov	r0, r1
 8018996:	4611      	mov	r1, r2
 8018998:	602b      	str	r3, [r5, #0]
 801899a:	f7f0 f976 	bl	8008c8a <_fstat>
 801899e:	1c43      	adds	r3, r0, #1
 80189a0:	d102      	bne.n	80189a8 <_fstat_r+0x1c>
 80189a2:	682b      	ldr	r3, [r5, #0]
 80189a4:	b103      	cbz	r3, 80189a8 <_fstat_r+0x1c>
 80189a6:	6023      	str	r3, [r4, #0]
 80189a8:	bd38      	pop	{r3, r4, r5, pc}
 80189aa:	bf00      	nop
 80189ac:	200036b0 	.word	0x200036b0

080189b0 <_isatty_r>:
 80189b0:	b538      	push	{r3, r4, r5, lr}
 80189b2:	4d06      	ldr	r5, [pc, #24]	; (80189cc <_isatty_r+0x1c>)
 80189b4:	2300      	movs	r3, #0
 80189b6:	4604      	mov	r4, r0
 80189b8:	4608      	mov	r0, r1
 80189ba:	602b      	str	r3, [r5, #0]
 80189bc:	f7f0 f975 	bl	8008caa <_isatty>
 80189c0:	1c43      	adds	r3, r0, #1
 80189c2:	d102      	bne.n	80189ca <_isatty_r+0x1a>
 80189c4:	682b      	ldr	r3, [r5, #0]
 80189c6:	b103      	cbz	r3, 80189ca <_isatty_r+0x1a>
 80189c8:	6023      	str	r3, [r4, #0]
 80189ca:	bd38      	pop	{r3, r4, r5, pc}
 80189cc:	200036b0 	.word	0x200036b0

080189d0 <_init>:
 80189d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189d2:	bf00      	nop
 80189d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189d6:	bc08      	pop	{r3}
 80189d8:	469e      	mov	lr, r3
 80189da:	4770      	bx	lr

080189dc <_fini>:
 80189dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189de:	bf00      	nop
 80189e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189e2:	bc08      	pop	{r3}
 80189e4:	469e      	mov	lr, r3
 80189e6:	4770      	bx	lr
