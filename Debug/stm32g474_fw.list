
stm32g474_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9e4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800bbc4  0800bbc4  0001bbc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc94  0800bc94  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc94  0800bc94  0001bc94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc9c  0800bc9c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc9c  0800bc9c  0001bc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bca0  0800bca0  0001bca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00002d34  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002f10  20002f10  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018577  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000042e6  00000000  00000000  000387c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012d0  00000000  00000000  0003cab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e12  00000000  00000000  0003dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a664  00000000  00000000  0003eb92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e634  00000000  00000000  000691f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f4f8a  00000000  00000000  0008782a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004eb0  00000000  00000000  0017c7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00181664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bbac 	.word	0x0800bbac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800bbac 	.word	0x0800bbac

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <apInit>:
static uint32_t g_LEDOffTime = 200;
static uint32_t nextmill = 0;
*/

void apInit(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART2, 115200);
 80005c0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005c4:	2001      	movs	r0, #1
 80005c6:	f000 fb71 	bl	8000cac <uartOpen>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <apMain>:

void apMain(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  uint32_t pre_time = millis();
 80005d6:	f000 f88a 	bl	80006ee <millis>
 80005da:	6078      	str	r0, [r7, #4]
  while(1)
  {
    /* LED Non blocking toggle*/
    /* Using Reg to toggle */
    if(millis()-pre_time >= 500)
 80005dc:	f000 f887 	bl	80006ee <millis>
 80005e0:	4602      	mov	r2, r0
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ea:	d307      	bcc.n	80005fc <apMain+0x2c>
    {
      pre_time = millis();
 80005ec:	f000 f87f 	bl	80006ee <millis>
 80005f0:	6078      	str	r0, [r7, #4]
      //ledToggle(_DEF_LED1);
      gpio_out_toggle(GPIOA, GPIO_PIN_5);
 80005f2:	2120      	movs	r1, #32
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f8:	f000 fb28 	bl	8000c4c <gpio_out_toggle>
      ledOn(_DEF_LED1);
      blinkOn = true;
      nextmill = millis() + g_LEDOnTime;
    }
    */
    if (uartAvailable(_DEF_UART2) > 0)
 80005fc:	2001      	movs	r0, #1
 80005fe:	f000 fbf3 	bl	8000de8 <uartAvailable>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0e9      	beq.n	80005dc <apMain+0xc>
    {
      uint8_t rx_data;
      // 데이터를 읽어온다
      rx_data = uartRead(_DEF_UART2);
 8000608:	2001      	movs	r0, #1
 800060a:	f000 fc15 	bl	8000e38 <uartRead>
 800060e:	4603      	mov	r3, r0
 8000610:	70fb      	strb	r3, [r7, #3]

      uartPrintf(_DEF_UART2, "Rx : 0x%d\n", rx_data);
 8000612:	78fb      	ldrb	r3, [r7, #3]
 8000614:	461a      	mov	r2, r3
 8000616:	4902      	ldr	r1, [pc, #8]	; (8000620 <apMain+0x50>)
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fc61 	bl	8000ee0 <uartPrintf>
    if(millis()-pre_time >= 500)
 800061e:	e7dd      	b.n	80005dc <apMain+0xc>
 8000620:	0800bbc4 	.word	0x0800bbc4

08000624 <bspInit>:
#include "usb_device.h"

void SystemClock_Config(void);

bool bspInit(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
  HAL_Init();
 800062a:	f000 fdc1 	bl	80011b0 <HAL_Init>
  SystemClock_Config();
 800062e:	f000 f865 	bl	80006fc <SystemClock_Config>

  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <bspInit+0xb0>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <bspInit+0xb0>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <bspInit+0xb0>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <bspInit+0xb0>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <bspInit+0xb0>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <bspInit+0xb0>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /* USB - RESET 시 장치관리자 해제 연결 안될 시 */

  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
  // PA12(USB_DP) 출력 설정
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 8000672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8000678:	2311      	movs	r3, #17
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068e:	f000 fff1 	bl	8001674 <HAL_GPIO_Init>

  //회로에 PULL UP 이 걸려있다면 - 내리고
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069c:	f001 f96c 	bl	8001978 <HAL_GPIO_WritePin>
  delay(100);
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f000 f819 	bl	80006d8 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f001 f962 	bl	8001978 <HAL_GPIO_WritePin>

  // INPUT 으로 다시 변경
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4619      	mov	r1, r3
 80006be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c2:	f000 ffd7 	bl	8001674 <HAL_GPIO_Init>

  MX_USB_Device_Init();
 80006c6:	f009 ff85 	bl	800a5d4 <MX_USB_Device_Init>

  return true;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000

080006d8 <delay>:

void delay(uint32_t time_ms)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  HAL_Delay(time_ms);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f000 fdd5 	bl	8001290 <HAL_Delay>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <millis>:

uint32_t millis(void)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80006f2:	f000 fdc1 	bl	8001278 <HAL_GetTick>
 80006f6:	4603      	mov	r3, r0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	bd80      	pop	{r7, pc}

080006fc <SystemClock_Config>:


void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0318 	add.w	r3, r7, #24
 8000706:	2238      	movs	r2, #56	; 0x38
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f00a fdca 	bl	800b2a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000722:	f002 fe75 	bl	8003410 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000726:	2309      	movs	r3, #9
 8000728:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000738:	2303      	movs	r3, #3
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000740:	2308      	movs	r3, #8
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	4618      	mov	r0, r3
 8000756:	f002 ff0f 	bl	8003578 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000760:	f000 f818 	bl	8000794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2303      	movs	r3, #3
 800076a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2101      	movs	r1, #1
 800077c:	4618      	mov	r0, r3
 800077e:	f003 fa0d 	bl	8003b9c <HAL_RCC_ClockConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000788:	f000 f804 	bl	8000794 <Error_Handler>
  }
}
 800078c:	bf00      	nop
 800078e:	3750      	adds	r7, #80	; 0x50
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <Error_Handler>:


void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x44>)
 80007ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_MspInit+0x44>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6613      	str	r3, [r2, #96]	; 0x60
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x44>)
 80007b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x44>)
 80007c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x44>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	6593      	str	r3, [r2, #88]	; 0x58
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x44>)
 80007d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007da:	f002 febd 	bl	8003558 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f0:	e7fe      	b.n	80007f0 <NMI_Handler+0x4>

080007f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <MemManage_Handler+0x4>

080007fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <UsageFault_Handler+0x4>

0800080a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000838:	f000 fd0c 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <USB_LP_IRQHandler+0x10>)
 8000846:	f001 f99f 	bl	8001b88 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200028cc 	.word	0x200028cc

08000854 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <USART1_IRQHandler+0x10>)
 800085a:	f003 ff33 	bl	80046c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000330 	.word	0x20000330

08000868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000870:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <_sbrk+0x5c>)
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <_sbrk+0x60>)
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <_sbrk+0x64>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d102      	bne.n	800088a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <_sbrk+0x64>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <_sbrk+0x68>)
 8000888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <_sbrk+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	429a      	cmp	r2, r3
 8000896:	d207      	bcs.n	80008a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000898:	f00a fd0c 	bl	800b2b4 <__errno>
 800089c:	4603      	mov	r3, r0
 800089e:	220c      	movs	r2, #12
 80008a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	e009      	b.n	80008bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <_sbrk+0x64>)
 80008b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20020000 	.word	0x20020000
 80008c8:	00000400 	.word	0x00000400
 80008cc:	200001f8 	.word	0x200001f8
 80008d0:	20002f10 	.word	0x20002f10

080008d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <SystemInit+0x20>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <SystemInit+0x20>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008fc:	f7ff ffea 	bl	80008d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <LoopForever+0x6>)
  ldr r1, =_edata
 8000902:	490d      	ldr	r1, [pc, #52]	; (8000938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <LoopForever+0xe>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000918:	4c0a      	ldr	r4, [pc, #40]	; (8000944 <LoopForever+0x16>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000926:	f00a fccb 	bl	800b2c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f00a fc77 	bl	800b21c <main>

0800092e <LoopForever>:

LoopForever:
  b LoopForever
 800092e:	e7fe      	b.n	800092e <LoopForever>
  ldr   r0, =_estack
 8000930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800093c:	0800bca4 	.word	0x0800bca4
  ldr r2, =_sbss
 8000940:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000944:	20002f10 	.word	0x20002f10

08000948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_2_IRQHandler>

0800094a <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800094a:	b480      	push	{r7}
 800094c:	b087      	sub	sp, #28
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000956:	2301      	movs	r3, #1
 8000958:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2201      	movs	r2, #1
 8000970:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	611a      	str	r2, [r3, #16]

  return ret;
 8000978:	7dfb      	ldrb	r3, [r7, #23]
}
 800097a:	4618      	mov	r0, r3
 800097c:	371c      	adds	r7, #28
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <qbufferWrite>:

  return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000986:	b480      	push	{r7}
 8000988:	b08b      	sub	sp, #44	; 0x2c
 800098a:	af00      	add	r7, sp, #0
 800098c:	60f8      	str	r0, [r7, #12]
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000992:	2301      	movs	r3, #1
 8000994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t next_in;


  for (int i=0; i<length; i++)
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
 800099c:	e043      	b.n	8000a26 <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	6892      	ldr	r2, [r2, #8]
 80009a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80009ac:	fb01 f202 	mul.w	r2, r1, r2
 80009b0:	1a9b      	subs	r3, r3, r2
 80009b2:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d02c      	beq.n	8000a18 <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	691b      	ldr	r3, [r3, #16]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d024      	beq.n	8000a10 <qbufferWrite+0x8a>
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d021      	beq.n	8000a10 <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	691a      	ldr	r2, [r3, #16]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	68f9      	ldr	r1, [r7, #12]
 80009d6:	68c9      	ldr	r1, [r1, #12]
 80009d8:	fb01 f303 	mul.w	r3, r1, r3
 80009dc:	4413      	add	r3, r2
 80009de:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	e00a      	b.n	80009fc <qbufferWrite+0x76>
        {
          p_buf[i] = p_data[i];
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	68ba      	ldr	r2, [r7, #8]
 80009ea:	441a      	add	r2, r3
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	6979      	ldr	r1, [r7, #20]
 80009f0:	440b      	add	r3, r1
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3301      	adds	r3, #1
 80009fa:	61fb      	str	r3, [r7, #28]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	68da      	ldr	r2, [r3, #12]
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d8ef      	bhi.n	80009e6 <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	e003      	b.n	8000a20 <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a1e:	e006      	b.n	8000a2e <qbufferWrite+0xa8>
  for (int i=0; i<length; i++)
 8000a20:	6a3b      	ldr	r3, [r7, #32]
 8000a22:	3301      	adds	r3, #1
 8000a24:	623b      	str	r3, [r7, #32]
 8000a26:	6a3b      	ldr	r3, [r7, #32]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d8b7      	bhi.n	800099e <qbufferWrite+0x18>
    }
  }

  return ret;
 8000a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	372c      	adds	r7, #44	; 0x2c
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b089      	sub	sp, #36	; 0x24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	60f8      	str	r0, [r7, #12]
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	77fb      	strb	r3, [r7, #31]


  for (int i=0; i<length; i++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	e041      	b.n	8000ad8 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	691b      	ldr	r3, [r3, #16]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d024      	beq.n	8000aa6 <qbufferRead+0x68>
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d021      	beq.n	8000aa6 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	691a      	ldr	r2, [r3, #16]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	68f9      	ldr	r1, [r7, #12]
 8000a6c:	68c9      	ldr	r1, [r1, #12]
 8000a6e:	fb01 f303 	mul.w	r3, r1, r3
 8000a72:	4413      	add	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	e00a      	b.n	8000a92 <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	441a      	add	r2, r3
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	440b      	add	r3, r1
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	68da      	ldr	r2, [r3, #12]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d8ef      	bhi.n	8000a7c <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d00c      	beq.n	8000acc <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	68fa      	ldr	r2, [r7, #12]
 8000aba:	6892      	ldr	r2, [r2, #8]
 8000abc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ac0:	fb01 f202 	mul.w	r2, r1, r2
 8000ac4:	1a9a      	subs	r2, r3, r2
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	e002      	b.n	8000ad2 <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 8000acc:	2300      	movs	r3, #0
 8000ace:	77fb      	strb	r3, [r7, #31]
      break;
 8000ad0:	e006      	b.n	8000ae0 <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	61bb      	str	r3, [r7, #24]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d8b9      	bhi.n	8000a54 <qbufferRead+0x16>
    }
  }

  return ret;
 8000ae0:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	; 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b085      	sub	sp, #20
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	6892      	ldr	r2, [r2, #8]
 8000b04:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b08:	fb01 f202 	mul.w	r2, r1, r2
 8000b0c:	1a9b      	subs	r3, r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]

  return ret;
 8000b10:	68fb      	ldr	r3, [r7, #12]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <cdcInit>:


static bool is_init = false;

bool cdcInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
  bool ret = true;
 8000b26:	2301      	movs	r3, #1
 8000b28:	71fb      	strb	r3, [r7, #7]


  ret = cdcIfInit();
 8000b2a:	f009 fea9 	bl	800a880 <cdcIfInit>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bf14      	ite	ne
 8000b34:	2301      	movne	r3, #1
 8000b36:	2300      	moveq	r3, #0
 8000b38:	71fb      	strb	r3, [r7, #7]

  is_init = ret;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <cdcInit+0x2c>)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	7013      	strb	r3, [r2, #0]

  return ret;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200001fc 	.word	0x200001fc

08000b50 <cdcAvailable>:
{
  return cdcIfIsConnected();
}

uint32_t cdcAvailable(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  return cdcIfAvailable();
 8000b54:	f009 feb2 	bl	800a8bc <cdcIfAvailable>
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <cdcRead>:

uint8_t cdcRead(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  return cdcIfRead();
 8000b62:	f009 feb5 	bl	800a8d0 <cdcIfRead>
 8000b66:	4603      	mov	r3, r0
 8000b68:	b2db      	uxtb	r3, r3
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
  return cdcIfWrite(p_data, length);
 8000b78:	6839      	ldr	r1, [r7, #0]
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f009 feba 	bl	800a8f4 <cdcIfWrite>
 8000b80:	4603      	mov	r3, r0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <ledInit>:




bool ledInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <ledInit+0x80>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <ledInit+0x80>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <ledInit+0x80>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	e017      	b.n	8000bfc <ledInit+0x70>
  {
    GPIO_InitStructure.Pin = led_tbl[i].pin;
 8000bcc:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <ledInit+0x84>)
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	4413      	add	r3, r2
 8000bd4:	889b      	ldrh	r3, [r3, #4]
 8000bd6:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <ledInit+0x84>)
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000be0:	f107 0208 	add.w	r2, r7, #8
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fd44 	bl	8001674 <HAL_GPIO_Init>

    ledOff(i);
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 f80f 	bl	8000c14 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61fb      	str	r3, [r7, #28]
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	dde4      	ble.n	8000bcc <ledInit+0x40>
  }
  return true;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	0800bc30 	.word	0x0800bc30

08000c14 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d10d      	bne.n	8000c40 <ledOff+0x2c>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <ledOff+0x34>)
 8000c28:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <ledOff+0x34>)
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	4413      	add	r3, r2
 8000c34:	889b      	ldrh	r3, [r3, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f000 fe9d 	bl	8001978 <HAL_GPIO_WritePin>
 8000c3e:	e000      	b.n	8000c42 <ledOff+0x2e>
  if (ch >= LED_MAX_CH) return;
 8000c40:	bf00      	nop
}
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	0800bc30 	.word	0x0800bc30

08000c4c <gpio_out_toggle>:
  gpio->ODR &= ~(GPIO_Pin);
}

//
void gpio_out_toggle(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
  GPIO_TypeDef *gpio = (void*)GPIOA_BASE;
 8000c58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c5c:	60fb      	str	r3, [r7, #12]
  gpio->ODR ^= GPIO_Pin;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	695a      	ldr	r2, [r3, #20]
 8000c62:	887b      	ldrh	r3, [r7, #2]
 8000c64:	405a      	eors	r2, r3
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	615a      	str	r2, [r3, #20]
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <uartInit>:
UART_HandleTypeDef huart1;



bool uartInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
  for(int i = 0; i <UART_MAX_CH; i++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	e007      	b.n	8000c94 <uartInit+0x1c>
  {
    is_open[i] = false;
 8000c84:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <uartInit+0x30>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i <UART_MAX_CH; i++)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3301      	adds	r3, #1
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	ddf4      	ble.n	8000c84 <uartInit+0xc>
  }

  return true;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	20000200 	.word	0x20000200

08000cac <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  bool ret =false;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <uartOpen+0x1c>
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d007      	beq.n	8000cd6 <uartOpen+0x2a>
 8000cc6:	e07d      	b.n	8000dc4 <uartOpen+0x118>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4a41      	ldr	r2, [pc, #260]	; (8000dd0 <uartOpen+0x124>)
 8000ccc:	2101      	movs	r1, #1
 8000cce:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8000cd4:	e076      	b.n	8000dc4 <uartOpen+0x118>
    case _DEF_UART2:
      huart1.Instance = USART1;
 8000cd6:	4b3f      	ldr	r3, [pc, #252]	; (8000dd4 <uartOpen+0x128>)
 8000cd8:	4a3f      	ldr	r2, [pc, #252]	; (8000dd8 <uartOpen+0x12c>)
 8000cda:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 8000cdc:	4a3d      	ldr	r2, [pc, #244]	; (8000dd4 <uartOpen+0x128>)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	6053      	str	r3, [r2, #4]
      huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ce2:	4b3c      	ldr	r3, [pc, #240]	; (8000dd4 <uartOpen+0x128>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	625a      	str	r2, [r3, #36]	; 0x24
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce8:	4b3a      	ldr	r3, [pc, #232]	; (8000dd4 <uartOpen+0x128>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8000cee:	4b39      	ldr	r3, [pc, #228]	; (8000dd4 <uartOpen+0x128>)
 8000cf0:	220c      	movs	r2, #12
 8000cf2:	615a      	str	r2, [r3, #20]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b37      	ldr	r3, [pc, #220]	; (8000dd4 <uartOpen+0x128>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
      huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	4b36      	ldr	r3, [pc, #216]	; (8000dd4 <uartOpen+0x128>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
      huart1.Init.Parity = UART_PARITY_NONE;
 8000d00:	4b34      	ldr	r3, [pc, #208]	; (8000dd4 <uartOpen+0x128>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8000d06:	4b33      	ldr	r3, [pc, #204]	; (8000dd4 <uartOpen+0x128>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0c:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <uartOpen+0x128>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d12:	4b30      	ldr	r3, [pc, #192]	; (8000dd4 <uartOpen+0x128>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
      qbufferCreate(&qbuffer[ch],&rx_buf[ch], 256); // 수신 버퍼 생성
 8000d18:	79fa      	ldrb	r2, [r7, #7]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4a2e      	ldr	r2, [pc, #184]	; (8000ddc <uartOpen+0x130>)
 8000d24:	1898      	adds	r0, r3, r2
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4a2d      	ldr	r2, [pc, #180]	; (8000de0 <uartOpen+0x134>)
 8000d2a:	4413      	add	r3, r2
 8000d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d30:	4619      	mov	r1, r3
 8000d32:	f7ff fe0a 	bl	800094a <qbufferCreate>
      if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d36:	4827      	ldr	r0, [pc, #156]	; (8000dd4 <uartOpen+0x128>)
 8000d38:	f003 fb9a 	bl	8004470 <HAL_UART_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <uartOpen+0x9c>
      {
        ret = false;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e016      	b.n	8000d76 <uartOpen+0xca>
      }
      else
      {
        ret = true;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	4a20      	ldr	r2, [pc, #128]	; (8000dd0 <uartOpen+0x124>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	54d1      	strb	r1, [r2, r3]
        // 수신용 데이터 버퍼 (rx_data)에 size 만큼 받아서 HAL_UART_RxCpltCallback 함수 호출
        if(HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[ch], 1) != HAL_OK)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4a23      	ldr	r2, [pc, #140]	; (8000de4 <uartOpen+0x138>)
 8000d58:	4413      	add	r3, r2
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481d      	ldr	r0, [pc, #116]	; (8000dd4 <uartOpen+0x128>)
 8000d60:	f003 fc64 	bl	800462c <HAL_UART_Receive_IT>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d005      	beq.n	8000d76 <uartOpen+0xca>
        {
         ret = false;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]
         is_open[ch] = false;
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <uartOpen+0x124>)
 8000d72:	2100      	movs	r1, #0
 8000d74:	54d1      	strb	r1, [r2, r3]
        }
      }
      if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d76:	2100      	movs	r1, #0
 8000d78:	4816      	ldr	r0, [pc, #88]	; (8000dd4 <uartOpen+0x128>)
 8000d7a:	f005 fbd0 	bl	800651e <HAL_UARTEx_SetTxFifoThreshold>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d005      	beq.n	8000d90 <uartOpen+0xe4>
      {
        ret = false;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <uartOpen+0x124>)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d90:	2100      	movs	r1, #0
 8000d92:	4810      	ldr	r0, [pc, #64]	; (8000dd4 <uartOpen+0x128>)
 8000d94:	f005 fc01 	bl	800659a <HAL_UARTEx_SetRxFifoThreshold>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <uartOpen+0xfe>
      {
        ret = false;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <uartOpen+0x124>)
 8000da6:	2100      	movs	r1, #0
 8000da8:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000daa:	480a      	ldr	r0, [pc, #40]	; (8000dd4 <uartOpen+0x128>)
 8000dac:	f005 fb7e 	bl	80064ac <HAL_UARTEx_DisableFifoMode>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d005      	beq.n	8000dc2 <uartOpen+0x116>
      {
        ret = false;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <uartOpen+0x124>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	54d1      	strb	r1, [r2, r3]
      }
      break;
 8000dc2:	bf00      	nop
  }


  return ret;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000200 	.word	0x20000200
 8000dd4:	20000330 	.word	0x20000330
 8000dd8:	40013800 	.word	0x40013800
 8000ddc:	20000204 	.word	0x20000204
 8000de0:	2000022c 	.word	0x2000022c
 8000de4:	2000032c 	.word	0x2000032c

08000de8 <uartAvailable>:
{
  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d002      	beq.n	8000e02 <uartAvailable+0x1a>
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d005      	beq.n	8000e0c <uartAvailable+0x24>
 8000e00:	e012      	b.n	8000e28 <uartAvailable+0x40>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 8000e02:	f7ff fea5 	bl	8000b50 <cdcAvailable>
 8000e06:	4603      	mov	r3, r0
 8000e08:	60fb      	str	r3, [r7, #12]
      break;
 8000e0a:	e00d      	b.n	8000e28 <uartAvailable+0x40>
    case _DEF_UART2:
      qbufferRead(&qbuffer[ch],&ret,1);
 8000e0c:	79fa      	ldrb	r2, [r7, #7]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <uartAvailable+0x4c>)
 8000e18:	4413      	add	r3, r2
 8000e1a:	f107 010c 	add.w	r1, r7, #12
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fe0c 	bl	8000a3e <qbufferRead>
      break;
 8000e26:	bf00      	nop
  }

  return ret;
 8000e28:	68fb      	ldr	r3, [r7, #12]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000204 	.word	0x20000204

08000e38 <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	73fb      	strb	r3, [r7, #15]
  switch(ch)
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <uartRead+0x1a>
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d005      	beq.n	8000e5c <uartRead+0x24>
 8000e50:	e012      	b.n	8000e78 <uartRead+0x40>
  {
    case _DEF_UART1:
      ret = cdcRead();
 8000e52:	f7ff fe84 	bl	8000b5e <cdcRead>
 8000e56:	4603      	mov	r3, r0
 8000e58:	73fb      	strb	r3, [r7, #15]
      break;
 8000e5a:	e00d      	b.n	8000e78 <uartRead+0x40>
    case _DEF_UART2:
      qbufferRead(&qbuffer[ch],&ret,1);
 8000e5c:	79fa      	ldrb	r2, [r7, #7]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <uartRead+0x4c>)
 8000e68:	4413      	add	r3, r2
 8000e6a:	f107 010f 	add.w	r1, r7, #15
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fde4 	bl	8000a3e <qbufferRead>
      break;
 8000e76:	bf00      	nop
  }

  return ret;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000204 	.word	0x20000204

08000e88 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;
  switch(ch)
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <uartWrite+0x1e>
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d006      	beq.n	8000eb2 <uartWrite+0x2a>
 8000ea4:	e014      	b.n	8000ed0 <uartWrite+0x48>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	68b8      	ldr	r0, [r7, #8]
 8000eaa:	f7ff fe60 	bl	8000b6e <cdcWrite>
 8000eae:	6178      	str	r0, [r7, #20]
      break;
 8000eb0:	e00e      	b.n	8000ed0 <uartWrite+0x48>
    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	2364      	movs	r3, #100	; 0x64
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	4808      	ldr	r0, [pc, #32]	; (8000edc <uartWrite+0x54>)
 8000ebc:	f003 fb28 	bl	8004510 <HAL_UART_Transmit>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	74fb      	strb	r3, [r7, #19]
      if(status == HAL_OK)
 8000ec4:	7cfb      	ldrb	r3, [r7, #19]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <uartWrite+0x46>
      {
        ret = length;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	617b      	str	r3, [r7, #20]
      }
      break;
 8000ece:	bf00      	nop
  }

  return ret;
 8000ed0:	697b      	ldr	r3, [r7, #20]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000330 	.word	0x20000330

08000ee0 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8000ee0:	b40e      	push	{r1, r2, r3}
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b0c7      	sub	sp, #284	; 0x11c
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000eee:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000ef2:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8000ef4:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000ef8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000efc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f00:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8000f02:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f0a:	f107 0010 	add.w	r0, r7, #16
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f18:	f00a f9b6 	bl	800b288 <vsniprintf>
 8000f1c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8000f20:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000f24:	f107 0110 	add.w	r1, r7, #16
 8000f28:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f2c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ffa8 	bl	8000e88 <uartWrite>
 8000f38:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f4c:	b003      	add	sp, #12
 8000f4e:	4770      	bx	lr

08000f50 <HAL_UART_ErrorCallback>:

  return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
  {

  }
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <HAL_UART_RxCpltCallback+0x30>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d109      	bne.n	8000f8a <HAL_UART_RxCpltCallback+0x26>
  {
    // 빠르게 송신시 1 바이트 사용시 인터럽트가 많이 걸려서 처리가 늦어져 overrun (덮어쓰기 에러) , 데이터 손실 에러 발생 가능
    // 고속의 송수신 - DMA 방식을 사용
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
 8000f76:	2201      	movs	r2, #1
 8000f78:	4907      	ldr	r1, [pc, #28]	; (8000f98 <HAL_UART_RxCpltCallback+0x34>)
 8000f7a:	4808      	ldr	r0, [pc, #32]	; (8000f9c <HAL_UART_RxCpltCallback+0x38>)
 8000f7c:	f7ff fd03 	bl	8000986 <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[_DEF_UART2], 1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	4905      	ldr	r1, [pc, #20]	; (8000f98 <HAL_UART_RxCpltCallback+0x34>)
 8000f84:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <HAL_UART_RxCpltCallback+0x3c>)
 8000f86:	f003 fb51 	bl	800462c <HAL_UART_Receive_IT>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40013800 	.word	0x40013800
 8000f98:	2000032d 	.word	0x2000032d
 8000f9c:	20000218 	.word	0x20000218
 8000fa0:	20000330 	.word	0x20000330

08000fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b09e      	sub	sp, #120	; 0x78
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	2254      	movs	r2, #84	; 0x54
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f00a f96d 	bl	800b2a4 <memset>
  if(uartHandle->Instance==USART1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a22      	ldr	r2, [pc, #136]	; (8001058 <HAL_UART_MspInit+0xb4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d13d      	bne.n	8001050 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 fff7 	bl	8003fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fec:	f7ff fbd2 	bl	8000794 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_UART_MspInit+0xb8>)
 8000ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff4:	4a19      	ldr	r2, [pc, #100]	; (800105c <HAL_UART_MspInit+0xb8>)
 8000ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffa:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_UART_MspInit+0xb8>)
 8000ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_UART_MspInit+0xb8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <HAL_UART_MspInit+0xb8>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_UART_MspInit+0xb8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC4_USART1_TX_Pin|PC5_USART1_RX_Pin;
 8001020:	2330      	movs	r3, #48	; 0x30
 8001022:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001030:	2307      	movs	r3, #7
 8001032:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001038:	4619      	mov	r1, r3
 800103a:	4809      	ldr	r0, [pc, #36]	; (8001060 <HAL_UART_MspInit+0xbc>)
 800103c:	f000 fb1a 	bl	8001674 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2025      	movs	r0, #37	; 0x25
 8001046:	f000 fa20 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800104a:	2025      	movs	r0, #37	; 0x25
 800104c:	f000 fa37 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001050:	bf00      	nop
 8001052:	3778      	adds	r7, #120	; 0x78
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40013800 	.word	0x40013800
 800105c:	40021000 	.word	0x40021000
 8001060:	48000800 	.word	0x48000800

08001064 <usbInit>:
#endif



bool usbInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
  bool ret = true;
 800106a:	2301      	movs	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]


#ifdef _USE_HW_CLI
  cliAdd("usb", cliCmd);
#endif
  return ret;
 800106e:	79fb      	ldrb	r3, [r7, #7]
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <usbBegin>:
{
  return is_usb_mode;
}

bool usbBegin(UsbMode usb_mode)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]


#if HW_USE_CDC == 1

  if (usb_mode == USB_CDC_MODE)
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d12a      	bne.n	80010e6 <usbBegin+0x6a>
  {
    if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 8001090:	2200      	movs	r2, #0
 8001092:	4919      	ldr	r1, [pc, #100]	; (80010f8 <usbBegin+0x7c>)
 8001094:	4819      	ldr	r0, [pc, #100]	; (80010fc <usbBegin+0x80>)
 8001096:	f008 f97d 	bl	8009394 <USBD_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <usbBegin+0x28>
    {
      return false;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e024      	b.n	80010ee <usbBegin+0x72>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80010a4:	4916      	ldr	r1, [pc, #88]	; (8001100 <usbBegin+0x84>)
 80010a6:	4815      	ldr	r0, [pc, #84]	; (80010fc <usbBegin+0x80>)
 80010a8:	f008 f9a4 	bl	80093f4 <USBD_RegisterClass>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <usbBegin+0x3a>
    {
      return false;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e01b      	b.n	80010ee <usbBegin+0x72>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80010b6:	4913      	ldr	r1, [pc, #76]	; (8001104 <usbBegin+0x88>)
 80010b8:	4810      	ldr	r0, [pc, #64]	; (80010fc <usbBegin+0x80>)
 80010ba:	f008 f8f5 	bl	80092a8 <USBD_CDC_RegisterInterface>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <usbBegin+0x4c>
    {
      return false;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e012      	b.n	80010ee <usbBegin+0x72>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <usbBegin+0x80>)
 80010ca:	f008 f9ba 	bl	8009442 <USBD_Start>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <usbBegin+0x5c>
    {
      return false;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e00a      	b.n	80010ee <usbBegin+0x72>
    }


    cdcInit();
 80010d8:	f7ff fd22 	bl	8000b20 <cdcInit>

    is_usb_mode = USB_CDC_MODE;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <usbBegin+0x8c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
    ret = true;
 80010e2:	2301      	movs	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
    ret = true;
  }
#endif


  is_init = ret;
 80010e6:	4a09      	ldr	r2, [pc, #36]	; (800110c <usbBegin+0x90>)
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	7013      	strb	r3, [r2, #0]

  return ret;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000138 	.word	0x20000138
 80010fc:	200003d0 	.word	0x200003d0
 8001100:	20000018 	.word	0x20000018
 8001104:	20000124 	.word	0x20000124
 8001108:	200003c5 	.word	0x200003c5
 800110c:	200003c4 	.word	0x200003c4

08001110 <hwInit>:
 *      Author: mm940
 */
#include "hw.h"

bool hwInit(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
  bool ret = true;
 8001116:	2301      	movs	r3, #1
 8001118:	71fb      	strb	r3, [r7, #7]

  ret &= bspInit();
 800111a:	f7ff fa83 	bl	8000624 <bspInit>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	bf14      	ite	ne
 800112a:	2301      	movne	r3, #1
 800112c:	2300      	moveq	r3, #0
 800112e:	71fb      	strb	r3, [r7, #7]
  ret &= ledInit();
 8001130:	f7ff fd2c 	bl	8000b8c <ledInit>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4013      	ands	r3, r2
 800113c:	2b00      	cmp	r3, #0
 800113e:	bf14      	ite	ne
 8001140:	2301      	movne	r3, #1
 8001142:	2300      	moveq	r3, #0
 8001144:	71fb      	strb	r3, [r7, #7]

  ret &= usbInit();
 8001146:	f7ff ff8d 	bl	8001064 <usbInit>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	4013      	ands	r3, r2
 8001152:	2b00      	cmp	r3, #0
 8001154:	bf14      	ite	ne
 8001156:	2301      	movne	r3, #1
 8001158:	2300      	moveq	r3, #0
 800115a:	71fb      	strb	r3, [r7, #7]
  ret &= usbBegin(USB_CDC_MODE);
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff ff8d 	bl	800107c <usbBegin>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	4013      	ands	r3, r2
 800116a:	2b00      	cmp	r3, #0
 800116c:	bf14      	ite	ne
 800116e:	2301      	movne	r3, #1
 8001170:	2300      	moveq	r3, #0
 8001172:	71fb      	strb	r3, [r7, #7]
  ret &= uartOpen(_DEF_UART1, 57600);
 8001174:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fd97 	bl	8000cac <uartOpen>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4013      	ands	r3, r2
 8001186:	2b00      	cmp	r3, #0
 8001188:	bf14      	ite	ne
 800118a:	2301      	movne	r3, #1
 800118c:	2300      	moveq	r3, #0
 800118e:	71fb      	strb	r3, [r7, #7]
  ret &= uartInit();
 8001190:	f7ff fd72 	bl	8000c78 <uartInit>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	4013      	ands	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	bf14      	ite	ne
 80011a0:	2301      	movne	r3, #1
 80011a2:	2300      	moveq	r3, #0
 80011a4:	71fb      	strb	r3, [r7, #7]

  return ret;
 80011a6:	79fb      	ldrb	r3, [r7, #7]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ba:	2003      	movs	r0, #3
 80011bc:	f000 f95a 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c0:	200f      	movs	r0, #15
 80011c2:	f000 f80d 	bl	80011e0 <HAL_InitTick>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	e001      	b.n	80011d6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011d2:	f7ff fae7 	bl	80007a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d6:	79fb      	ldrb	r3, [r7, #7]

}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <HAL_InitTick+0x68>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d022      	beq.n	800123a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_InitTick+0x6c>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_InitTick+0x68>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001200:	fbb1 f3f3 	udiv	r3, r1, r3
 8001204:	fbb2 f3f3 	udiv	r3, r2, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f966 	bl	80014da <HAL_SYSTICK_Config>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10f      	bne.n	8001234 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b0f      	cmp	r3, #15
 8001218:	d809      	bhi.n	800122e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121a:	2200      	movs	r2, #0
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	f04f 30ff 	mov.w	r0, #4294967295
 8001222:	f000 f932 	bl	800148a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_InitTick+0x70>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	e007      	b.n	800123e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e004      	b.n	800123e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e001      	b.n	800123e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000008 	.word	0x20000008
 800124c:	20000000 	.word	0x20000000
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_IncTick+0x1c>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_IncTick+0x20>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4413      	add	r3, r2
 8001262:	4a03      	ldr	r2, [pc, #12]	; (8001270 <HAL_IncTick+0x1c>)
 8001264:	6013      	str	r3, [r2, #0]
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	200003c8 	.word	0x200003c8
 8001274:	20000008 	.word	0x20000008

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	200003c8 	.word	0x200003c8

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff ffee 	bl	8001278 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d004      	beq.n	80012b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_Delay+0x40>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	4413      	add	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b4:	bf00      	nop
 80012b6:	f7ff ffdf 	bl	8001278 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d8f7      	bhi.n	80012b6 <HAL_Delay+0x26>
  {
  }
}
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000008 	.word	0x20000008

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <__NVIC_EnableIRQ+0x38>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001440:	d301      	bcc.n	8001446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001442:	2301      	movs	r3, #1
 8001444:	e00f      	b.n	8001466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <SysTick_Config+0x40>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144e:	210f      	movs	r1, #15
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f7ff ff8e 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <SysTick_Config+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <SysTick_Config+0x40>)
 8001460:	2207      	movs	r2, #7
 8001462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff29 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff40 	bl	800131c <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff90 	bl	80013c8 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5f 	bl	8001374 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff33 	bl	8001338 <__NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa4 	bl	8001430 <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d005      	beq.n	8001516 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2204      	movs	r2, #4
 800150e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e037      	b.n	8001586 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 020e 	bic.w	r2, r2, #14
 8001524:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001534:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0201 	bic.w	r2, r2, #1
 8001544:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 021f 	and.w	r2, r3, #31
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001562:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800157a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001584:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001596:	7bfb      	ldrb	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d00d      	beq.n	80015d8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2204      	movs	r2, #4
 80015c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	e047      	b.n	8001668 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 020e 	bic.w	r2, r2, #14
 80015e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001602:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001606:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	2101      	movs	r1, #1
 8001616:	fa01 f202 	lsl.w	r2, r1, r2
 800161a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001624:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00c      	beq.n	8001648 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800163c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001646:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	4798      	blx	r3
    }
  }
  return status;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001682:	e15a      	b.n	800193a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 814c 	beq.w	8001934 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d005      	beq.n	80016b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 0201 	and.w	r2, r3, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b03      	cmp	r3, #3
 8001720:	d017      	beq.n	8001752 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d123      	bne.n	80017a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	6939      	ldr	r1, [r7, #16]
 80017a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0203 	and.w	r2, r3, #3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80a6 	beq.w	8001934 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e8:	4b5b      	ldr	r3, [pc, #364]	; (8001958 <HAL_GPIO_Init+0x2e4>)
 80017ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ec:	4a5a      	ldr	r2, [pc, #360]	; (8001958 <HAL_GPIO_Init+0x2e4>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6613      	str	r3, [r2, #96]	; 0x60
 80017f4:	4b58      	ldr	r3, [pc, #352]	; (8001958 <HAL_GPIO_Init+0x2e4>)
 80017f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001800:	4a56      	ldr	r2, [pc, #344]	; (800195c <HAL_GPIO_Init+0x2e8>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800182a:	d01f      	beq.n	800186c <HAL_GPIO_Init+0x1f8>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a4c      	ldr	r2, [pc, #304]	; (8001960 <HAL_GPIO_Init+0x2ec>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d019      	beq.n	8001868 <HAL_GPIO_Init+0x1f4>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a4b      	ldr	r2, [pc, #300]	; (8001964 <HAL_GPIO_Init+0x2f0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d013      	beq.n	8001864 <HAL_GPIO_Init+0x1f0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a4a      	ldr	r2, [pc, #296]	; (8001968 <HAL_GPIO_Init+0x2f4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d00d      	beq.n	8001860 <HAL_GPIO_Init+0x1ec>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a49      	ldr	r2, [pc, #292]	; (800196c <HAL_GPIO_Init+0x2f8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d007      	beq.n	800185c <HAL_GPIO_Init+0x1e8>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a48      	ldr	r2, [pc, #288]	; (8001970 <HAL_GPIO_Init+0x2fc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d101      	bne.n	8001858 <HAL_GPIO_Init+0x1e4>
 8001854:	2305      	movs	r3, #5
 8001856:	e00a      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 8001858:	2306      	movs	r3, #6
 800185a:	e008      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 800185c:	2304      	movs	r3, #4
 800185e:	e006      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 8001860:	2303      	movs	r3, #3
 8001862:	e004      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 8001864:	2302      	movs	r3, #2
 8001866:	e002      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_GPIO_Init+0x1fa>
 800186c:	2300      	movs	r3, #0
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	f002 0203 	and.w	r2, r2, #3
 8001874:	0092      	lsls	r2, r2, #2
 8001876:	4093      	lsls	r3, r2
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800187e:	4937      	ldr	r1, [pc, #220]	; (800195c <HAL_GPIO_Init+0x2e8>)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	3302      	adds	r3, #2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <HAL_GPIO_Init+0x300>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018b0:	4a30      	ldr	r2, [pc, #192]	; (8001974 <HAL_GPIO_Init+0x300>)
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018b6:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <HAL_GPIO_Init+0x300>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018da:	4a26      	ldr	r2, [pc, #152]	; (8001974 <HAL_GPIO_Init+0x300>)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018e0:	4b24      	ldr	r3, [pc, #144]	; (8001974 <HAL_GPIO_Init+0x300>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001904:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <HAL_GPIO_Init+0x300>)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_GPIO_Init+0x300>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800192e:	4a11      	ldr	r2, [pc, #68]	; (8001974 <HAL_GPIO_Init+0x300>)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	3301      	adds	r3, #1
 8001938:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	f47f ae9d 	bne.w	8001684 <HAL_GPIO_Init+0x10>
  }
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	371c      	adds	r7, #28
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000
 8001960:	48000400 	.word	0x48000400
 8001964:	48000800 	.word	0x48000800
 8001968:	48000c00 	.word	0x48000c00
 800196c:	48001000 	.word	0x48001000
 8001970:	48001400 	.word	0x48001400
 8001974:	40010400 	.word	0x40010400

08001978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
 8001984:	4613      	mov	r3, r2
 8001986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001988:	787b      	ldrb	r3, [r7, #1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001994:	e002      	b.n	800199c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001996:	887a      	ldrh	r2, [r7, #2]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0c0      	b.n	8001b3c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f009 f920 	bl	800ac14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2203      	movs	r2, #3
 80019d8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f004 fe7e 	bl	80066e2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	e03e      	b.n	8001a6a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019ec:	7bfa      	ldrb	r2, [r7, #15]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	440b      	add	r3, r1
 80019fa:	3311      	adds	r3, #17
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a00:	7bfa      	ldrb	r2, [r7, #15]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3310      	adds	r3, #16
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a14:	7bfa      	ldrb	r2, [r7, #15]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	440b      	add	r3, r1
 8001a22:	3313      	adds	r3, #19
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	3320      	adds	r3, #32
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	3324      	adds	r3, #36	; 0x24
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	440b      	add	r3, r1
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	3301      	adds	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	791b      	ldrb	r3, [r3, #4]
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d3bb      	bcc.n	80019ec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	e044      	b.n	8001b04 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	440b      	add	r3, r1
 8001a9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ad2:	7bfa      	ldrb	r2, [r7, #15]
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	440b      	add	r3, r1
 8001ae0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ae8:	7bfa      	ldrb	r2, [r7, #15]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	440b      	add	r3, r1
 8001af6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	3301      	adds	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	791b      	ldrb	r3, [r3, #4]
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3b5      	bcc.n	8001a7a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3304      	adds	r3, #4
 8001b16:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001b1a:	f004 fdfd 	bl	8006718 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7a9b      	ldrb	r3, [r3, #10]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d102      	bne.n	8001b3a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f001 fc41 	bl	80033bc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_PCD_Start+0x16>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e012      	b.n	8001b80 <HAL_PCD_Start+0x3c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f004 fda4 	bl	80066b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f007 f864 	bl	8008c3e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f007 f869 	bl	8008c6c <USB_ReadInterrupts>
 8001b9a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fb04 	bl	80021b4 <PCD_EP_ISR_Handler>

    return;
 8001bac:	e110      	b.n	8001dd0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d013      	beq.n	8001be0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bca:	b292      	uxth	r2, r2
 8001bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f009 f8b0 	bl	800ad36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f8fc 	bl	8001dd6 <HAL_PCD_SetAddress>

    return;
 8001bde:	e0f7      	b.n	8001dd0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00c      	beq.n	8001c04 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bfc:	b292      	uxth	r2, r2
 8001bfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c02:	e0e5      	b.n	8001dd0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00c      	beq.n	8001c28 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c20:	b292      	uxth	r2, r2
 8001c22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c26:	e0d3      	b.n	8001dd0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d034      	beq.n	8001c9c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0204 	bic.w	r2, r2, #4
 8001c44:	b292      	uxth	r2, r2
 8001c46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0208 	bic.w	r2, r2, #8
 8001c5c:	b292      	uxth	r2, r2
 8001c5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d107      	bne.n	8001c7c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c74:	2100      	movs	r1, #0
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f009 fa50 	bl	800b11c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f009 f893 	bl	800ada8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c94:	b292      	uxth	r2, r2
 8001c96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c9a:	e099      	b.n	8001dd0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d027      	beq.n	8001cf6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0208 	orr.w	r2, r2, #8
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0204 	orr.w	r2, r2, #4
 8001ce8:	b292      	uxth	r2, r2
 8001cea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f009 f840 	bl	800ad74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001cf4:	e06c      	b.n	8001dd0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d040      	beq.n	8001d82 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d12:	b292      	uxth	r2, r2
 8001d14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d12b      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0204 	orr.w	r2, r2, #4
 8001d34:	b292      	uxth	r2, r2
 8001d36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0208 	orr.w	r2, r2, #8
 8001d4c:	b292      	uxth	r2, r2
 8001d4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001d70:	2101      	movs	r1, #1
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f009 f9d2 	bl	800b11c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001d78:	e02a      	b.n	8001dd0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f008 fffa 	bl	800ad74 <HAL_PCD_SuspendCallback>
    return;
 8001d80:	e026      	b.n	8001dd0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00f      	beq.n	8001dac <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d9e:	b292      	uxth	r2, r2
 8001da0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f008 ffb8 	bl	800ad1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001daa:	e011      	b.n	8001dd0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00c      	beq.n	8001dd0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001dce:	bf00      	nop
  }
}
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_PCD_SetAddress+0x1a>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e012      	b.n	8001e16 <HAL_PCD_SetAddress+0x40>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	78fa      	ldrb	r2, [r7, #3]
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f006 ff05 	bl	8008c16 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	4608      	mov	r0, r1
 8001e28:	4611      	mov	r1, r2
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	70fb      	strb	r3, [r7, #3]
 8001e30:	460b      	mov	r3, r1
 8001e32:	803b      	strh	r3, [r7, #0]
 8001e34:	4613      	mov	r3, r2
 8001e36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	da0e      	bge.n	8001e62 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	f003 0207 	and.w	r2, r3, #7
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	3310      	adds	r3, #16
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	705a      	strb	r2, [r3, #1]
 8001e60:	e00e      	b.n	8001e80 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	f003 0207 	and.w	r2, r3, #7
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e8c:	883a      	ldrh	r2, [r7, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	78ba      	ldrb	r2, [r7, #2]
 8001e96:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e98:	78bb      	ldrb	r3, [r7, #2]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d102      	bne.n	8001ea4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_PCD_EP_Open+0x94>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e00e      	b.n	8001ed0 <HAL_PCD_EP_Open+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68f9      	ldr	r1, [r7, #12]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f004 fc47 	bl	8006754 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8001ece:	7afb      	ldrb	r3, [r7, #11]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ee4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	da0e      	bge.n	8001f0a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	f003 0207 	and.w	r2, r3, #7
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	3310      	adds	r3, #16
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	705a      	strb	r2, [r3, #1]
 8001f08:	e00e      	b.n	8001f28 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	f003 0207 	and.w	r2, r3, #7
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_PCD_EP_Close+0x6a>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e00e      	b.n	8001f60 <HAL_PCD_EP_Close+0x88>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68f9      	ldr	r1, [r7, #12]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 ffc3 	bl	8006edc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	460b      	mov	r3, r1
 8001f76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	f003 0207 	and.w	r2, r3, #7
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6979      	ldr	r1, [r7, #20]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f005 f97b 	bl	80072b6 <USB_EPStartXfer>

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 0207 	and.w	r2, r3, #7
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001fec:	681b      	ldr	r3, [r3, #0]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	460b      	mov	r3, r1
 8002008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800200a:	7afb      	ldrb	r3, [r7, #11]
 800200c:	f003 0207 	and.w	r2, r3, #7
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	3310      	adds	r3, #16
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4413      	add	r3, r2
 800201e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2200      	movs	r2, #0
 800203e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2201      	movs	r2, #1
 8002044:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002046:	7afb      	ldrb	r3, [r7, #11]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	b2da      	uxtb	r2, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6979      	ldr	r1, [r7, #20]
 8002058:	4618      	mov	r0, r3
 800205a:	f005 f92c 	bl	80072b6 <USB_EPStartXfer>

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	7912      	ldrb	r2, [r2, #4]
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e03e      	b.n	8002104 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208a:	2b00      	cmp	r3, #0
 800208c:	da0e      	bge.n	80020ac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	f003 0207 	and.w	r2, r3, #7
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	3310      	adds	r3, #16
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2201      	movs	r2, #1
 80020a8:	705a      	strb	r2, [r3, #1]
 80020aa:	e00c      	b.n	80020c6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020ac:	78fa      	ldrb	r2, [r7, #3]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_PCD_EP_SetStall+0x7e>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e00e      	b.n	8002104 <HAL_PCD_EP_SetStall+0x9c>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68f9      	ldr	r1, [r7, #12]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f006 fc8f 	bl	8008a18 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	7912      	ldrb	r2, [r2, #4]
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e040      	b.n	80021ac <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800212a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800212e:	2b00      	cmp	r3, #0
 8002130:	da0e      	bge.n	8002150 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 0207 	and.w	r2, r3, #7
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	3310      	adds	r3, #16
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	705a      	strb	r2, [r3, #1]
 800214e:	e00e      	b.n	800216e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	f003 0207 	and.w	r2, r3, #7
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	b2da      	uxtb	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_PCD_EP_ClrStall+0x82>
 800218a:	2302      	movs	r3, #2
 800218c:	e00e      	b.n	80021ac <HAL_PCD_EP_ClrStall+0xa0>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68f9      	ldr	r1, [r7, #12]
 800219c:	4618      	mov	r0, r3
 800219e:	f006 fc8c 	bl	8008aba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b096      	sub	sp, #88	; 0x58
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021bc:	e3ae      	b.n	800291c <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80021d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f040 8170 	bne.w	80024c2 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d14d      	bne.n	800228a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fe:	81fb      	strh	r3, [r7, #14]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	89fb      	ldrh	r3, [r7, #14]
 8002206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800220a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800220e:	b29b      	uxth	r3, r3
 8002210:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3310      	adds	r3, #16
 8002216:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002220:	b29b      	uxth	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	4413      	add	r3, r2
 8002232:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800223c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	441a      	add	r2, r3
 800224a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800224e:	2100      	movs	r1, #0
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f008 fd48 	bl	800ace6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7b1b      	ldrb	r3, [r3, #12]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 835d 	beq.w	800291c <PCD_EP_ISR_Handler+0x768>
 8002262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f040 8358 	bne.w	800291c <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7b1b      	ldrb	r3, [r3, #12]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002276:	b2da      	uxtb	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	b292      	uxth	r2, r2
 800227e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	731a      	strb	r2, [r3, #12]
 8002288:	e348      	b.n	800291c <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002290:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800229c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80022a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d032      	beq.n	800230e <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ce:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80022da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022dc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	f006 fd14 	bl	8008d10 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022f4:	4013      	ands	r3, r2
 80022f6:	823b      	strh	r3, [r7, #16]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	8a3a      	ldrh	r2, [r7, #16]
 80022fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002302:	b292      	uxth	r2, r2
 8002304:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f008 fcc0 	bl	800ac8c <HAL_PCD_SetupStageCallback>
 800230c:	e306      	b.n	800291c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800230e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002312:	2b00      	cmp	r3, #0
 8002314:	f280 8302 	bge.w	800291c <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	b29a      	uxth	r2, r3
 8002320:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002324:	4013      	ands	r3, r2
 8002326:	83fb      	strh	r3, [r7, #30]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	8bfa      	ldrh	r2, [r7, #30]
 800232e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002332:	b292      	uxth	r2, r2
 8002334:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233e:	b29b      	uxth	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	4413      	add	r3, r2
 8002350:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800235a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800235e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d019      	beq.n	800239a <PCD_EP_ISR_Handler+0x1e6>
 8002366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d015      	beq.n	800239a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002374:	6959      	ldr	r1, [r3, #20]
 8002376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002378:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800237a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800237e:	b29b      	uxth	r3, r3
 8002380:	f006 fcc6 	bl	8008d10 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	441a      	add	r2, r3
 800238e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002390:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002392:	2100      	movs	r1, #0
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f008 fc8b 	bl	800acb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80023a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f040 82b5 	bne.w	800291c <PCD_EP_ISR_Handler+0x768>
 80023b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80023ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80023be:	f000 82ad 	beq.w	800291c <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	4413      	add	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	801a      	strh	r2, [r3, #0]
 80023f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b3e      	cmp	r3, #62	; 0x3e
 80023f8:	d91d      	bls.n	8002436 <PCD_EP_ISR_Handler+0x282>
 80023fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	647b      	str	r3, [r7, #68]	; 0x44
 8002402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2b00      	cmp	r3, #0
 800240c:	d102      	bne.n	8002414 <PCD_EP_ISR_Handler+0x260>
 800240e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002410:	3b01      	subs	r3, #1
 8002412:	647b      	str	r3, [r7, #68]	; 0x44
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	b29a      	uxth	r2, r3
 800241a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800241c:	b29b      	uxth	r3, r3
 800241e:	029b      	lsls	r3, r3, #10
 8002420:	b29b      	uxth	r3, r3
 8002422:	4313      	orrs	r3, r2
 8002424:	b29b      	uxth	r3, r3
 8002426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800242a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800242e:	b29a      	uxth	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	801a      	strh	r2, [r3, #0]
 8002434:	e026      	b.n	8002484 <PCD_EP_ISR_Handler+0x2d0>
 8002436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10a      	bne.n	8002454 <PCD_EP_ISR_Handler+0x2a0>
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800244c:	b29a      	uxth	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	801a      	strh	r2, [r3, #0]
 8002452:	e017      	b.n	8002484 <PCD_EP_ISR_Handler+0x2d0>
 8002454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	085b      	lsrs	r3, r3, #1
 800245a:	647b      	str	r3, [r7, #68]	; 0x44
 800245c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <PCD_EP_ISR_Handler+0x2ba>
 8002468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800246a:	3301      	adds	r3, #1
 800246c:	647b      	str	r3, [r7, #68]	; 0x44
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29a      	uxth	r2, r3
 8002474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002476:	b29b      	uxth	r3, r3
 8002478:	029b      	lsls	r3, r3, #10
 800247a:	b29b      	uxth	r3, r3
 800247c:	4313      	orrs	r3, r2
 800247e:	b29a      	uxth	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002494:	827b      	strh	r3, [r7, #18]
 8002496:	8a7b      	ldrh	r3, [r7, #18]
 8002498:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800249c:	827b      	strh	r3, [r7, #18]
 800249e:	8a7b      	ldrh	r3, [r7, #18]
 80024a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024a4:	827b      	strh	r3, [r7, #18]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	8a7b      	ldrh	r3, [r7, #18]
 80024ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024bc:	b29b      	uxth	r3, r3
 80024be:	8013      	strh	r3, [r2, #0]
 80024c0:	e22c      	b.n	800291c <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024d6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f280 80f6 	bge.w	80026cc <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024f6:	4013      	ands	r3, r2
 80024f8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800250e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002512:	b292      	uxth	r2, r2
 8002514:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002516:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800252c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252e:	7b1b      	ldrb	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d123      	bne.n	800257c <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253c:	b29b      	uxth	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	4413      	add	r3, r2
 800254e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002558:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800255c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 808e 	beq.w	8002682 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256c:	6959      	ldr	r1, [r3, #20]
 800256e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002570:	88da      	ldrh	r2, [r3, #6]
 8002572:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002576:	f006 fbcb 	bl	8008d10 <USB_ReadPMA>
 800257a:	e082      	b.n	8002682 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800257c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257e:	78db      	ldrb	r3, [r3, #3]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d10a      	bne.n	800259a <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002584:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002588:	461a      	mov	r2, r3
 800258a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f9d3 	bl	8002938 <HAL_PCD_EP_DB_Receive>
 8002592:	4603      	mov	r3, r0
 8002594:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002598:	e073      	b.n	8002682 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	441a      	add	r2, r3
 80025c6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025da:	b29b      	uxth	r3, r3
 80025dc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d022      	beq.n	800263e <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002600:	b29b      	uxth	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	4413      	add	r3, r2
 8002612:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800261c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002620:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002624:	2b00      	cmp	r3, #0
 8002626:	d02c      	beq.n	8002682 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262e:	6959      	ldr	r1, [r3, #20]
 8002630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002632:	891a      	ldrh	r2, [r3, #8]
 8002634:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002638:	f006 fb6a 	bl	8008d10 <USB_ReadPMA>
 800263c:	e021      	b.n	8002682 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002646:	b29b      	uxth	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	4413      	add	r3, r2
 8002658:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002662:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002666:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002674:	6959      	ldr	r1, [r3, #20]
 8002676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002678:	895a      	ldrh	r2, [r3, #10]
 800267a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800267e:	f006 fb47 	bl	8008d10 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800268a:	441a      	add	r2, r3
 800268c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002698:	441a      	add	r2, r3
 800269a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800269e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <PCD_EP_ISR_Handler+0x4fe>
 80026a6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80026aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d206      	bcs.n	80026c0 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80026b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	4619      	mov	r1, r3
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f008 faf9 	bl	800acb0 <HAL_PCD_DataOutStageCallback>
 80026be:	e005      	b.n	80026cc <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026c6:	4618      	mov	r0, r3
 80026c8:	f004 fdf5 	bl	80072b6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80026cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 8121 	beq.w	800291c <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80026da:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	3310      	adds	r3, #16
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002708:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	441a      	add	r2, r3
 800271a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800271e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002726:	b29b      	uxth	r3, r3
 8002728:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800272a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272c:	78db      	ldrb	r3, [r3, #3]
 800272e:	2b01      	cmp	r3, #1
 8002730:	f040 80a2 	bne.w	8002878 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8002734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002736:	2200      	movs	r2, #0
 8002738:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800273a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273c:	7b1b      	ldrb	r3, [r3, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8093 	beq.w	800286a <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002744:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d046      	beq.n	80027de <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002752:	785b      	ldrb	r3, [r3, #1]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d126      	bne.n	80027a6 <PCD_EP_ISR_Handler+0x5f2>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002766:	b29b      	uxth	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	4413      	add	r3, r2
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
 8002770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	00da      	lsls	r2, r3, #3
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	4413      	add	r3, r2
 800277a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800277e:	623b      	str	r3, [r7, #32]
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800278a:	b29a      	uxth	r2, r3
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	801a      	strh	r2, [r3, #0]
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800279a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800279e:	b29a      	uxth	r2, r3
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	801a      	strh	r2, [r3, #0]
 80027a4:	e061      	b.n	800286a <PCD_EP_ISR_Handler+0x6b6>
 80027a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a8:	785b      	ldrb	r3, [r3, #1]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d15d      	bne.n	800286a <PCD_EP_ISR_Handler+0x6b6>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027bc:	b29b      	uxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	4413      	add	r3, r2
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	00da      	lsls	r2, r3, #3
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	4413      	add	r3, r2
 80027d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	2200      	movs	r2, #0
 80027da:	801a      	strh	r2, [r3, #0]
 80027dc:	e045      	b.n	800286a <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e6:	785b      	ldrb	r3, [r3, #1]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d126      	bne.n	800283a <PCD_EP_ISR_Handler+0x686>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	637b      	str	r3, [r7, #52]	; 0x34
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002800:	4413      	add	r3, r2
 8002802:	637b      	str	r3, [r7, #52]	; 0x34
 8002804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	00da      	lsls	r2, r3, #3
 800280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280c:	4413      	add	r3, r2
 800280e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002812:	633b      	str	r3, [r7, #48]	; 0x30
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800281e:	b29a      	uxth	r2, r3
 8002820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002822:	801a      	strh	r2, [r3, #0]
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800282e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002832:	b29a      	uxth	r2, r3
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	801a      	strh	r2, [r3, #0]
 8002838:	e017      	b.n	800286a <PCD_EP_ISR_Handler+0x6b6>
 800283a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283c:	785b      	ldrb	r3, [r3, #1]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d113      	bne.n	800286a <PCD_EP_ISR_Handler+0x6b6>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002850:	4413      	add	r3, r2
 8002852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	00da      	lsls	r2, r3, #3
 800285a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285c:	4413      	add	r3, r2
 800285e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002862:	63bb      	str	r3, [r7, #56]	; 0x38
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	2200      	movs	r2, #0
 8002868:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800286a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	4619      	mov	r1, r3
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f008 fa38 	bl	800ace6 <HAL_PCD_DataInStageCallback>
 8002876:	e051      	b.n	800291c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002878:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d144      	bne.n	800290e <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800288c:	b29b      	uxth	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	4413      	add	r3, r2
 800289e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80028ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ae:	699a      	ldr	r2, [r3, #24]
 80028b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d907      	bls.n	80028c8 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80028b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80028c0:	1ad2      	subs	r2, r2, r3
 80028c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c4:	619a      	str	r2, [r3, #24]
 80028c6:	e002      	b.n	80028ce <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80028c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ca:	2200      	movs	r2, #0
 80028cc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80028ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	4619      	mov	r1, r3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f008 fa02 	bl	800ace6 <HAL_PCD_DataInStageCallback>
 80028e2:	e01b      	b.n	800291c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80028e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80028ec:	441a      	add	r2, r3
 80028ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80028f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f4:	69da      	ldr	r2, [r3, #28]
 80028f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80028fa:	441a      	add	r2, r3
 80028fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fe:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002906:	4618      	mov	r0, r3
 8002908:	f004 fcd5 	bl	80072b6 <USB_EPStartXfer>
 800290c:	e006      	b.n	800291c <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800290e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002912:	461a      	mov	r2, r3
 8002914:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f917 	bl	8002b4a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002924:	b29b      	uxth	r3, r3
 8002926:	b21b      	sxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	f6ff ac48 	blt.w	80021be <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3758      	adds	r7, #88	; 0x58
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	4613      	mov	r3, r2
 8002944:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d07c      	beq.n	8002a4a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002958:	b29b      	uxth	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	4413      	add	r3, r2
 800296a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002974:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	8b7b      	ldrh	r3, [r7, #26]
 800297c:	429a      	cmp	r2, r3
 800297e:	d306      	bcc.n	800298e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	8b7b      	ldrh	r3, [r7, #26]
 8002986:	1ad2      	subs	r2, r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	619a      	str	r2, [r3, #24]
 800298c:	e002      	b.n	8002994 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d123      	bne.n	80029e4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	833b      	strh	r3, [r7, #24]
 80029b8:	8b3b      	ldrh	r3, [r7, #24]
 80029ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029be:	833b      	strh	r3, [r7, #24]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	8b3b      	ldrh	r3, [r7, #24]
 80029d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01f      	beq.n	8002a2e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a08:	82fb      	strh	r3, [r7, #22]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	441a      	add	r2, r3
 8002a18:	8afb      	ldrh	r3, [r7, #22]
 8002a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a2e:	8b7b      	ldrh	r3, [r7, #26]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8085 	beq.w	8002b40 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	6959      	ldr	r1, [r3, #20]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	891a      	ldrh	r2, [r3, #8]
 8002a42:	8b7b      	ldrh	r3, [r7, #26]
 8002a44:	f006 f964 	bl	8008d10 <USB_ReadPMA>
 8002a48:	e07a      	b.n	8002b40 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a6e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	699a      	ldr	r2, [r3, #24]
 8002a74:	8b7b      	ldrh	r3, [r7, #26]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d306      	bcc.n	8002a88 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	8b7b      	ldrh	r3, [r7, #26]
 8002a80:	1ad2      	subs	r2, r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	619a      	str	r2, [r3, #24]
 8002a86:	e002      	b.n	8002a8e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d123      	bne.n	8002ade <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab0:	83fb      	strh	r3, [r7, #30]
 8002ab2:	8bfb      	ldrh	r3, [r7, #30]
 8002ab4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ab8:	83fb      	strh	r3, [r7, #30]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	441a      	add	r2, r3
 8002ac8:	8bfb      	ldrh	r3, [r7, #30]
 8002aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d11f      	bne.n	8002b28 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b02:	83bb      	strh	r3, [r7, #28]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	441a      	add	r2, r3
 8002b12:	8bbb      	ldrh	r3, [r7, #28]
 8002b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b28:	8b7b      	ldrh	r3, [r7, #26]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d008      	beq.n	8002b40 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	6959      	ldr	r1, [r3, #20]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	895a      	ldrh	r2, [r3, #10]
 8002b3a:	8b7b      	ldrh	r3, [r7, #26]
 8002b3c:	f006 f8e8 	bl	8008d10 <USB_ReadPMA>
    }
  }

  return count;
 8002b40:	8b7b      	ldrh	r3, [r7, #26]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3720      	adds	r7, #32
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b0a4      	sub	sp, #144	; 0x90
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	4613      	mov	r3, r2
 8002b56:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 81db 	beq.w	8002f1a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b88:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	699a      	ldr	r2, [r3, #24]
 8002b90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d907      	bls.n	8002ba8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ba0:	1ad2      	subs	r2, r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	619a      	str	r2, [r3, #24]
 8002ba6:	e002      	b.n	8002bae <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2200      	movs	r2, #0
 8002bac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f040 80b9 	bne.w	8002d2a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	785b      	ldrb	r3, [r3, #1]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d126      	bne.n	8002c0e <HAL_PCD_EP_DB_Transmit+0xc4>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	4413      	add	r3, r2
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	00da      	lsls	r2, r3, #3
 8002bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be0:	4413      	add	r3, r2
 8002be2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	801a      	strh	r2, [r3, #0]
 8002bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0a:	801a      	strh	r2, [r3, #0]
 8002c0c:	e01a      	b.n	8002c44 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	785b      	ldrb	r3, [r3, #1]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d116      	bne.n	8002c44 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2a:	4413      	add	r3, r2
 8002c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	00da      	lsls	r2, r3, #3
 8002c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c36:	4413      	add	r3, r2
 8002c38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	2200      	movs	r2, #0
 8002c42:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	785b      	ldrb	r3, [r3, #1]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d126      	bne.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0x156>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	4413      	add	r3, r2
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	00da      	lsls	r2, r3, #3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	4413      	add	r3, r2
 8002c74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	801a      	strh	r2, [r3, #0]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	801a      	strh	r2, [r3, #0]
 8002c9e:	e017      	b.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x186>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	785b      	ldrb	r3, [r3, #1]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d113      	bne.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x186>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	4413      	add	r3, r2
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	00da      	lsls	r2, r3, #3
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cc8:	623b      	str	r3, [r7, #32]
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f008 f805 	bl	800ace6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 82fa 	beq.w	80032dc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	82fb      	strh	r3, [r7, #22]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	441a      	add	r2, r3
 8002d12:	8afb      	ldrh	r3, [r7, #22]
 8002d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	8013      	strh	r3, [r2, #0]
 8002d28:	e2d8      	b.n	80032dc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d021      	beq.n	8002d78 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	441a      	add	r2, r3
 8002d60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	f040 82ac 	bne.w	80032dc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d8c:	441a      	add	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	69da      	ldr	r2, [r3, #28]
 8002d96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d9a:	441a      	add	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	6a1a      	ldr	r2, [r3, #32]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d30b      	bcc.n	8002dc4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dbc:	1ad2      	subs	r2, r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	621a      	str	r2, [r3, #32]
 8002dc2:	e017      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d108      	bne.n	8002dde <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002dcc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002dd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ddc:	e00a      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2200      	movs	r2, #0
 8002df2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	785b      	ldrb	r3, [r3, #1]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d165      	bne.n	8002ec8 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e10:	4413      	add	r3, r2
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	00da      	lsls	r2, r3, #3
 8002e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e32:	801a      	strh	r2, [r3, #0]
 8002e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e38:	2b3e      	cmp	r3, #62	; 0x3e
 8002e3a:	d91d      	bls.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d102      	bne.n	8002e56 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e52:	3b01      	subs	r3, #1
 8002e54:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	029b      	lsls	r3, r3, #10
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	4313      	orrs	r3, r2
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	801a      	strh	r2, [r3, #0]
 8002e76:	e044      	b.n	8002f02 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <HAL_PCD_EP_DB_Transmit+0x34c>
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e92:	801a      	strh	r2, [r3, #0]
 8002e94:	e035      	b.n	8002f02 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e9a:	085b      	lsrs	r3, r3, #1
 8002e9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_PCD_EP_DB_Transmit+0x366>
 8002eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eac:	3301      	adds	r3, #1
 8002eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	029b      	lsls	r3, r3, #10
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	801a      	strh	r2, [r3, #0]
 8002ec6:	e01c      	b.n	8002f02 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	785b      	ldrb	r3, [r3, #1]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d118      	bne.n	8002f02 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee4:	4413      	add	r3, r2
 8002ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	00da      	lsls	r2, r3, #3
 8002eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f00:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	6959      	ldr	r1, [r3, #20]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	891a      	ldrh	r2, [r3, #8]
 8002f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	f005 feba 	bl	8008c8c <USB_WritePMA>
 8002f18:	e1e0      	b.n	80032dc <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	461a      	mov	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f3e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	699a      	ldr	r2, [r3, #24]
 8002f46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d307      	bcc.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f56:	1ad2      	subs	r2, r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	619a      	str	r2, [r3, #24]
 8002f5c:	e002      	b.n	8002f64 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2200      	movs	r2, #0
 8002f62:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f040 80c0 	bne.w	80030ee <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d126      	bne.n	8002fc4 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f8a:	4413      	add	r3, r2
 8002f8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	00da      	lsls	r2, r3, #3
 8002f94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f96:	4413      	add	r3, r2
 8002f98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fac:	801a      	strh	r2, [r3, #0]
 8002fae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fc0:	801a      	strh	r2, [r3, #0]
 8002fc2:	e01a      	b.n	8002ffa <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	785b      	ldrb	r3, [r3, #1]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d116      	bne.n	8002ffa <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	667b      	str	r3, [r7, #100]	; 0x64
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fe0:	4413      	add	r3, r2
 8002fe2:	667b      	str	r3, [r7, #100]	; 0x64
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	00da      	lsls	r2, r3, #3
 8002fea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fec:	4413      	add	r3, r2
 8002fee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ff2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ff4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	677b      	str	r3, [r7, #116]	; 0x74
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	785b      	ldrb	r3, [r3, #1]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d12b      	bne.n	8003060 <HAL_PCD_EP_DB_Transmit+0x516>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003016:	b29b      	uxth	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301c:	4413      	add	r3, r2
 800301e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	00da      	lsls	r2, r3, #3
 8003026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003028:	4413      	add	r3, r2
 800302a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800302e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003032:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	b29b      	uxth	r3, r3
 800303a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800303e:	b29a      	uxth	r2, r3
 8003040:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003044:	801a      	strh	r2, [r3, #0]
 8003046:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	b29b      	uxth	r3, r3
 800304e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003056:	b29a      	uxth	r2, r3
 8003058:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800305c:	801a      	strh	r2, [r3, #0]
 800305e:	e017      	b.n	8003090 <HAL_PCD_EP_DB_Transmit+0x546>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	785b      	ldrb	r3, [r3, #1]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d113      	bne.n	8003090 <HAL_PCD_EP_DB_Transmit+0x546>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003070:	b29b      	uxth	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003076:	4413      	add	r3, r2
 8003078:	677b      	str	r3, [r7, #116]	; 0x74
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	00da      	lsls	r2, r3, #3
 8003080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003082:	4413      	add	r3, r2
 8003084:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003088:	673b      	str	r3, [r7, #112]	; 0x70
 800308a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800308c:	2200      	movs	r2, #0
 800308e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	4619      	mov	r1, r3
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f007 fe25 	bl	800ace6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 811a 	bne.w	80032dc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	441a      	add	r2, r3
 80030d4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80030d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	8013      	strh	r3, [r2, #0]
 80030ec:	e0f6      	b.n	80032dc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d121      	bne.n	800313c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800310e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003112:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	441a      	add	r2, r3
 8003124:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800312c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003138:	b29b      	uxth	r3, r3
 800313a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003142:	2b01      	cmp	r3, #1
 8003144:	f040 80ca 	bne.w	80032dc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	695a      	ldr	r2, [r3, #20]
 800314c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003150:	441a      	add	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800315e:	441a      	add	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	6a1a      	ldr	r2, [r3, #32]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	429a      	cmp	r2, r3
 800316e:	d30b      	bcc.n	8003188 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003180:	1ad2      	subs	r2, r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	621a      	str	r2, [r3, #32]
 8003186:	e017      	b.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d108      	bne.n	80031a2 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003190:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003194:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031a0:	e00a      	b.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2200      	movs	r2, #0
 80031ae:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	657b      	str	r3, [r7, #84]	; 0x54
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	785b      	ldrb	r3, [r3, #1]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d165      	bne.n	8003292 <HAL_PCD_EP_DB_Transmit+0x748>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031da:	4413      	add	r3, r2
 80031dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	00da      	lsls	r2, r3, #3
 80031e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e6:	4413      	add	r3, r2
 80031e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80031ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031fc:	801a      	strh	r2, [r3, #0]
 80031fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003202:	2b3e      	cmp	r3, #62	; 0x3e
 8003204:	d91d      	bls.n	8003242 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	66bb      	str	r3, [r7, #104]	; 0x68
 800320e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	2b00      	cmp	r3, #0
 8003218:	d102      	bne.n	8003220 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800321a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800321c:	3b01      	subs	r3, #1
 800321e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b29a      	uxth	r2, r3
 8003226:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003228:	b29b      	uxth	r3, r3
 800322a:	029b      	lsls	r3, r3, #10
 800322c:	b29b      	uxth	r3, r3
 800322e:	4313      	orrs	r3, r2
 8003230:	b29b      	uxth	r3, r3
 8003232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800323a:	b29a      	uxth	r2, r3
 800323c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800323e:	801a      	strh	r2, [r3, #0]
 8003240:	e041      	b.n	80032c6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003242:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10a      	bne.n	8003260 <HAL_PCD_EP_DB_Transmit+0x716>
 800324a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	b29b      	uxth	r3, r3
 8003250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003258:	b29a      	uxth	r2, r3
 800325a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800325c:	801a      	strh	r2, [r3, #0]
 800325e:	e032      	b.n	80032c6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003260:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	66bb      	str	r3, [r7, #104]	; 0x68
 8003268:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_PCD_EP_DB_Transmit+0x730>
 8003274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003276:	3301      	adds	r3, #1
 8003278:	66bb      	str	r3, [r7, #104]	; 0x68
 800327a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	b29a      	uxth	r2, r3
 8003280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003282:	b29b      	uxth	r3, r3
 8003284:	029b      	lsls	r3, r3, #10
 8003286:	b29b      	uxth	r3, r3
 8003288:	4313      	orrs	r3, r2
 800328a:	b29a      	uxth	r2, r3
 800328c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800328e:	801a      	strh	r2, [r3, #0]
 8003290:	e019      	b.n	80032c6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	785b      	ldrb	r3, [r3, #1]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d115      	bne.n	80032c6 <HAL_PCD_EP_DB_Transmit+0x77c>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a8:	4413      	add	r3, r2
 80032aa:	657b      	str	r3, [r7, #84]	; 0x54
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	00da      	lsls	r2, r3, #3
 80032b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b4:	4413      	add	r3, r2
 80032b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032ba:	653b      	str	r3, [r7, #80]	; 0x50
 80032bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	6959      	ldr	r1, [r3, #20]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	895a      	ldrh	r2, [r3, #10]
 80032d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f005 fcd8 	bl	8008c8c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f6:	82bb      	strh	r3, [r7, #20]
 80032f8:	8abb      	ldrh	r3, [r7, #20]
 80032fa:	f083 0310 	eor.w	r3, r3, #16
 80032fe:	82bb      	strh	r3, [r7, #20]
 8003300:	8abb      	ldrh	r3, [r7, #20]
 8003302:	f083 0320 	eor.w	r3, r3, #32
 8003306:	82bb      	strh	r3, [r7, #20]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	441a      	add	r2, r3
 8003316:	8abb      	ldrh	r3, [r7, #20]
 8003318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800331c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003328:	b29b      	uxth	r3, r3
 800332a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3790      	adds	r7, #144	; 0x90
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003336:	b480      	push	{r7}
 8003338:	b087      	sub	sp, #28
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	817b      	strh	r3, [r7, #10]
 8003344:	4613      	mov	r3, r2
 8003346:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003348:	897b      	ldrh	r3, [r7, #10]
 800334a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00b      	beq.n	800336c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003354:	897b      	ldrh	r3, [r7, #10]
 8003356:	f003 0207 	and.w	r2, r3, #7
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	3310      	adds	r3, #16
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	e009      	b.n	8003380 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800336c:	897a      	ldrh	r2, [r7, #10]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4413      	add	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003380:	893b      	ldrh	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2200      	movs	r2, #0
 800338a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	b29a      	uxth	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	80da      	strh	r2, [r3, #6]
 8003394:	e00b      	b.n	80033ae <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2201      	movs	r2, #1
 800339a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	b29a      	uxth	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	371c      	adds	r7, #28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	f043 0302 	orr.w	r3, r3, #2
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d141      	bne.n	80034a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800341e:	4b4b      	ldr	r3, [pc, #300]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342a:	d131      	bne.n	8003490 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800342c:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003432:	4a46      	ldr	r2, [pc, #280]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003438:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800343c:	4b43      	ldr	r3, [pc, #268]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003444:	4a41      	ldr	r2, [pc, #260]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800344a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800344c:	4b40      	ldr	r3, [pc, #256]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2232      	movs	r2, #50	; 0x32
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	4a3f      	ldr	r2, [pc, #252]	; (8003554 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	0c9b      	lsrs	r3, r3, #18
 800345e:	3301      	adds	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003462:	e002      	b.n	800346a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3b01      	subs	r3, #1
 8003468:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800346a:	4b38      	ldr	r3, [pc, #224]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003476:	d102      	bne.n	800347e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f2      	bne.n	8003464 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800347e:	4b33      	ldr	r3, [pc, #204]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348a:	d158      	bne.n	800353e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e057      	b.n	8003540 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003490:	4b2e      	ldr	r3, [pc, #184]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003496:	4a2d      	ldr	r2, [pc, #180]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800349c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034a0:	e04d      	b.n	800353e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a8:	d141      	bne.n	800352e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034aa:	4b28      	ldr	r3, [pc, #160]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b6:	d131      	bne.n	800351c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034b8:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034be:	4a23      	ldr	r2, [pc, #140]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034c8:	4b20      	ldr	r3, [pc, #128]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034d0:	4a1e      	ldr	r2, [pc, #120]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2232      	movs	r2, #50	; 0x32
 80034de:	fb02 f303 	mul.w	r3, r2, r3
 80034e2:	4a1c      	ldr	r2, [pc, #112]	; (8003554 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034e4:	fba2 2303 	umull	r2, r3, r2, r3
 80034e8:	0c9b      	lsrs	r3, r3, #18
 80034ea:	3301      	adds	r3, #1
 80034ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034ee:	e002      	b.n	80034f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003502:	d102      	bne.n	800350a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f2      	bne.n	80034f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800350a:	4b10      	ldr	r3, [pc, #64]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003516:	d112      	bne.n	800353e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e011      	b.n	8003540 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003522:	4a0a      	ldr	r2, [pc, #40]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003528:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800352c:	e007      	b.n	800353e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800352e:	4b07      	ldr	r3, [pc, #28]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003536:	4a05      	ldr	r2, [pc, #20]	; (800354c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003538:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800353c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40007000 	.word	0x40007000
 8003550:	20000000 	.word	0x20000000
 8003554:	431bde83 	.word	0x431bde83

08003558 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a04      	ldr	r2, [pc, #16]	; (8003574 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003566:	6093      	str	r3, [r2, #8]
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40007000 	.word	0x40007000

08003578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e2fe      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d075      	beq.n	8003682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003596:	4b97      	ldr	r3, [pc, #604]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a0:	4b94      	ldr	r3, [pc, #592]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b0c      	cmp	r3, #12
 80035ae:	d102      	bne.n	80035b6 <HAL_RCC_OscConfig+0x3e>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d002      	beq.n	80035bc <HAL_RCC_OscConfig+0x44>
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d10b      	bne.n	80035d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035bc:	4b8d      	ldr	r3, [pc, #564]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d05b      	beq.n	8003680 <HAL_RCC_OscConfig+0x108>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d157      	bne.n	8003680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e2d9      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035dc:	d106      	bne.n	80035ec <HAL_RCC_OscConfig+0x74>
 80035de:	4b85      	ldr	r3, [pc, #532]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a84      	ldr	r2, [pc, #528]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e01d      	b.n	8003628 <HAL_RCC_OscConfig+0xb0>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0x98>
 80035f6:	4b7f      	ldr	r3, [pc, #508]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a7e      	ldr	r2, [pc, #504]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80035fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b7c      	ldr	r3, [pc, #496]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a7b      	ldr	r2, [pc, #492]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 8003608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e00b      	b.n	8003628 <HAL_RCC_OscConfig+0xb0>
 8003610:	4b78      	ldr	r3, [pc, #480]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a77      	ldr	r2, [pc, #476]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 8003616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4b75      	ldr	r3, [pc, #468]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a74      	ldr	r2, [pc, #464]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 8003622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d013      	beq.n	8003658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fd fe22 	bl	8001278 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003638:	f7fd fe1e 	bl	8001278 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e29e      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364a:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0xc0>
 8003656:	e014      	b.n	8003682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd fe0e 	bl	8001278 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003660:	f7fd fe0a 	bl	8001278 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e28a      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003672:	4b60      	ldr	r3, [pc, #384]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0xe8>
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d075      	beq.n	800377a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800368e:	4b59      	ldr	r3, [pc, #356]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003698:	4b56      	ldr	r3, [pc, #344]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b0c      	cmp	r3, #12
 80036a6:	d102      	bne.n	80036ae <HAL_RCC_OscConfig+0x136>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d002      	beq.n	80036b4 <HAL_RCC_OscConfig+0x13c>
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d11f      	bne.n	80036f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b4:	4b4f      	ldr	r3, [pc, #316]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_RCC_OscConfig+0x154>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e25d      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036cc:	4b49      	ldr	r3, [pc, #292]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	061b      	lsls	r3, r3, #24
 80036da:	4946      	ldr	r1, [pc, #280]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036e0:	4b45      	ldr	r3, [pc, #276]	; (80037f8 <HAL_RCC_OscConfig+0x280>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fd fd7b 	bl	80011e0 <HAL_InitTick>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d043      	beq.n	8003778 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e249      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d023      	beq.n	8003744 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036fc:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a3c      	ldr	r2, [pc, #240]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 8003702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fd fdb6 	bl	8001278 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003710:	f7fd fdb2 	bl	8001278 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e232      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003722:	4b34      	ldr	r3, [pc, #208]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372e:	4b31      	ldr	r3, [pc, #196]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	061b      	lsls	r3, r3, #24
 800373c:	492d      	ldr	r1, [pc, #180]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
 8003742:	e01a      	b.n	800377a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003744:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2a      	ldr	r2, [pc, #168]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 800374a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800374e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fd fd92 	bl	8001278 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003758:	f7fd fd8e 	bl	8001278 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e20e      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800376a:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x1e0>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d041      	beq.n	800380a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01c      	beq.n	80037c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800378e:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 8003790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003794:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379e:	f7fd fd6b 	bl	8001278 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a6:	f7fd fd67 	bl	8001278 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e1e7      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037b8:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80037ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0ef      	beq.n	80037a6 <HAL_RCC_OscConfig+0x22e>
 80037c6:	e020      	b.n	800380a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80037ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ce:	4a09      	ldr	r2, [pc, #36]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fd fd4e 	bl	8001278 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037de:	e00d      	b.n	80037fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fd fd4a 	bl	8001278 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d906      	bls.n	80037fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e1ca      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
 80037f8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037fc:	4b8c      	ldr	r3, [pc, #560]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 80037fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1ea      	bne.n	80037e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 80a6 	beq.w	8003964 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003818:	2300      	movs	r3, #0
 800381a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800381c:	4b84      	ldr	r3, [pc, #528]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_OscConfig+0x2b4>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <HAL_RCC_OscConfig+0x2b6>
 800382c:	2300      	movs	r3, #0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00d      	beq.n	800384e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	4b7f      	ldr	r3, [pc, #508]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003836:	4a7e      	ldr	r2, [pc, #504]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 8003838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383c:	6593      	str	r3, [r2, #88]	; 0x58
 800383e:	4b7c      	ldr	r3, [pc, #496]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800384a:	2301      	movs	r3, #1
 800384c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800384e:	4b79      	ldr	r3, [pc, #484]	; (8003a34 <HAL_RCC_OscConfig+0x4bc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d118      	bne.n	800388c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800385a:	4b76      	ldr	r3, [pc, #472]	; (8003a34 <HAL_RCC_OscConfig+0x4bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a75      	ldr	r2, [pc, #468]	; (8003a34 <HAL_RCC_OscConfig+0x4bc>)
 8003860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003866:	f7fd fd07 	bl	8001278 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386e:	f7fd fd03 	bl	8001278 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e183      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003880:	4b6c      	ldr	r3, [pc, #432]	; (8003a34 <HAL_RCC_OscConfig+0x4bc>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d108      	bne.n	80038a6 <HAL_RCC_OscConfig+0x32e>
 8003894:	4b66      	ldr	r3, [pc, #408]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	4a65      	ldr	r2, [pc, #404]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038a4:	e024      	b.n	80038f0 <HAL_RCC_OscConfig+0x378>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b05      	cmp	r3, #5
 80038ac:	d110      	bne.n	80038d0 <HAL_RCC_OscConfig+0x358>
 80038ae:	4b60      	ldr	r3, [pc, #384]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b4:	4a5e      	ldr	r2, [pc, #376]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 80038b6:	f043 0304 	orr.w	r3, r3, #4
 80038ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038be:	4b5c      	ldr	r3, [pc, #368]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c4:	4a5a      	ldr	r2, [pc, #360]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038ce:	e00f      	b.n	80038f0 <HAL_RCC_OscConfig+0x378>
 80038d0:	4b57      	ldr	r3, [pc, #348]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	4a56      	ldr	r2, [pc, #344]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 80038d8:	f023 0301 	bic.w	r3, r3, #1
 80038dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e0:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	4a52      	ldr	r2, [pc, #328]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 80038e8:	f023 0304 	bic.w	r3, r3, #4
 80038ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d016      	beq.n	8003926 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fd fcbe 	bl	8001278 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003900:	f7fd fcba 	bl	8001278 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e138      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003916:	4b46      	ldr	r3, [pc, #280]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0ed      	beq.n	8003900 <HAL_RCC_OscConfig+0x388>
 8003924:	e015      	b.n	8003952 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003926:	f7fd fca7 	bl	8001278 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800392c:	e00a      	b.n	8003944 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392e:	f7fd fca3 	bl	8001278 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	f241 3288 	movw	r2, #5000	; 0x1388
 800393c:	4293      	cmp	r3, r2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e121      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003944:	4b3a      	ldr	r3, [pc, #232]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 8003946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1ed      	bne.n	800392e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003952:	7ffb      	ldrb	r3, [r7, #31]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d105      	bne.n	8003964 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003958:	4b35      	ldr	r3, [pc, #212]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	4a34      	ldr	r2, [pc, #208]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 800395e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003962:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	2b00      	cmp	r3, #0
 800396e:	d03c      	beq.n	80039ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01c      	beq.n	80039b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003978:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 800397a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800397e:	4a2c      	ldr	r2, [pc, #176]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fd fc76 	bl	8001278 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003990:	f7fd fc72 	bl	8001278 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e0f2      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039a2:	4b23      	ldr	r3, [pc, #140]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 80039a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0ef      	beq.n	8003990 <HAL_RCC_OscConfig+0x418>
 80039b0:	e01b      	b.n	80039ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039b2:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 80039b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039b8:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c2:	f7fd fc59 	bl	8001278 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ca:	f7fd fc55 	bl	8001278 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e0d5      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039dc:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 80039de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1ef      	bne.n	80039ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80c9 	beq.w	8003b86 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	2b0c      	cmp	r3, #12
 80039fe:	f000 8083 	beq.w	8003b08 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d15e      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <HAL_RCC_OscConfig+0x4b8>)
 8003a10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a16:	f7fd fc2f 	bl	8001278 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a1c:	e00c      	b.n	8003a38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1e:	f7fd fc2b 	bl	8001278 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d905      	bls.n	8003a38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e0ab      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a38:	4b55      	ldr	r3, [pc, #340]	; (8003b90 <HAL_RCC_OscConfig+0x618>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1ec      	bne.n	8003a1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a44:	4b52      	ldr	r3, [pc, #328]	; (8003b90 <HAL_RCC_OscConfig+0x618>)
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	4b52      	ldr	r3, [pc, #328]	; (8003b94 <HAL_RCC_OscConfig+0x61c>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6a11      	ldr	r1, [r2, #32]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a54:	3a01      	subs	r2, #1
 8003a56:	0112      	lsls	r2, r2, #4
 8003a58:	4311      	orrs	r1, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a5e:	0212      	lsls	r2, r2, #8
 8003a60:	4311      	orrs	r1, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a66:	0852      	lsrs	r2, r2, #1
 8003a68:	3a01      	subs	r2, #1
 8003a6a:	0552      	lsls	r2, r2, #21
 8003a6c:	4311      	orrs	r1, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a72:	0852      	lsrs	r2, r2, #1
 8003a74:	3a01      	subs	r2, #1
 8003a76:	0652      	lsls	r2, r2, #25
 8003a78:	4311      	orrs	r1, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a7e:	06d2      	lsls	r2, r2, #27
 8003a80:	430a      	orrs	r2, r1
 8003a82:	4943      	ldr	r1, [pc, #268]	; (8003b90 <HAL_RCC_OscConfig+0x618>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a88:	4b41      	ldr	r3, [pc, #260]	; (8003b90 <HAL_RCC_OscConfig+0x618>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a40      	ldr	r2, [pc, #256]	; (8003b90 <HAL_RCC_OscConfig+0x618>)
 8003a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a94:	4b3e      	ldr	r3, [pc, #248]	; (8003b90 <HAL_RCC_OscConfig+0x618>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a3d      	ldr	r2, [pc, #244]	; (8003b90 <HAL_RCC_OscConfig+0x618>)
 8003a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fd fbea 	bl	8001278 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fd fbe6 	bl	8001278 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e066      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aba:	4b35      	ldr	r3, [pc, #212]	; (8003b90 <HAL_RCC_OscConfig+0x618>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x530>
 8003ac6:	e05e      	b.n	8003b86 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac8:	4b31      	ldr	r3, [pc, #196]	; (8003b90 <HAL_RCC_OscConfig+0x618>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a30      	ldr	r2, [pc, #192]	; (8003b90 <HAL_RCC_OscConfig+0x618>)
 8003ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fd fbd0 	bl	8001278 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003adc:	f7fd fbcc 	bl	8001278 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e04c      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aee:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <HAL_RCC_OscConfig+0x618>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003afa:	4b25      	ldr	r3, [pc, #148]	; (8003b90 <HAL_RCC_OscConfig+0x618>)
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	4924      	ldr	r1, [pc, #144]	; (8003b90 <HAL_RCC_OscConfig+0x618>)
 8003b00:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <HAL_RCC_OscConfig+0x620>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	60cb      	str	r3, [r1, #12]
 8003b06:	e03e      	b.n	8003b86 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e039      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b14:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <HAL_RCC_OscConfig+0x618>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f003 0203 	and.w	r2, r3, #3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d12c      	bne.n	8003b82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	3b01      	subs	r3, #1
 8003b34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d123      	bne.n	8003b82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d11b      	bne.n	8003b82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d113      	bne.n	8003b82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	085b      	lsrs	r3, r3, #1
 8003b66:	3b01      	subs	r3, #1
 8003b68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d109      	bne.n	8003b82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	085b      	lsrs	r3, r3, #1
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d001      	beq.n	8003b86 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3720      	adds	r7, #32
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000
 8003b94:	019f800c 	.word	0x019f800c
 8003b98:	feeefffc 	.word	0xfeeefffc

08003b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e11e      	b.n	8003df2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb4:	4b91      	ldr	r3, [pc, #580]	; (8003dfc <HAL_RCC_ClockConfig+0x260>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d910      	bls.n	8003be4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc2:	4b8e      	ldr	r3, [pc, #568]	; (8003dfc <HAL_RCC_ClockConfig+0x260>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 020f 	bic.w	r2, r3, #15
 8003bca:	498c      	ldr	r1, [pc, #560]	; (8003dfc <HAL_RCC_ClockConfig+0x260>)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd2:	4b8a      	ldr	r3, [pc, #552]	; (8003dfc <HAL_RCC_ClockConfig+0x260>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e106      	b.n	8003df2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d073      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d129      	bne.n	8003c4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf8:	4b81      	ldr	r3, [pc, #516]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0f4      	b.n	8003df2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c08:	f000 f99e 	bl	8003f48 <RCC_GetSysClockFreqFromPLLSource>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4a7c      	ldr	r2, [pc, #496]	; (8003e04 <HAL_RCC_ClockConfig+0x268>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d93f      	bls.n	8003c96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c16:	4b7a      	ldr	r3, [pc, #488]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d009      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d033      	beq.n	8003c96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d12f      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c36:	4b72      	ldr	r3, [pc, #456]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c3e:	4a70      	ldr	r2, [pc, #448]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e024      	b.n	8003c96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d107      	bne.n	8003c64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c54:	4b6a      	ldr	r3, [pc, #424]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0c6      	b.n	8003df2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c64:	4b66      	ldr	r3, [pc, #408]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0be      	b.n	8003df2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c74:	f000 f8ce 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4a61      	ldr	r2, [pc, #388]	; (8003e04 <HAL_RCC_ClockConfig+0x268>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d909      	bls.n	8003c96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c82:	4b5f      	ldr	r3, [pc, #380]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c8a:	4a5d      	ldr	r2, [pc, #372]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c96:	4b5a      	ldr	r3, [pc, #360]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f023 0203 	bic.w	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4957      	ldr	r1, [pc, #348]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca8:	f7fd fae6 	bl	8001278 <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb0:	f7fd fae2 	bl	8001278 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e095      	b.n	8003df2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	4b4e      	ldr	r3, [pc, #312]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 020c 	and.w	r2, r3, #12
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d1eb      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d023      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf0:	4b43      	ldr	r3, [pc, #268]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a42      	ldr	r2, [pc, #264]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003cf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cfa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d08:	4b3d      	ldr	r3, [pc, #244]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d10:	4a3b      	ldr	r2, [pc, #236]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003d12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d18:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4936      	ldr	r1, [pc, #216]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b80      	cmp	r3, #128	; 0x80
 8003d30:	d105      	bne.n	8003d3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d32:	4b33      	ldr	r3, [pc, #204]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	4a32      	ldr	r2, [pc, #200]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003d38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3e:	4b2f      	ldr	r3, [pc, #188]	; (8003dfc <HAL_RCC_ClockConfig+0x260>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d21d      	bcs.n	8003d88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4c:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <HAL_RCC_ClockConfig+0x260>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 020f 	bic.w	r2, r3, #15
 8003d54:	4929      	ldr	r1, [pc, #164]	; (8003dfc <HAL_RCC_ClockConfig+0x260>)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d5c:	f7fd fa8c 	bl	8001278 <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d64:	f7fd fa88 	bl	8001278 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e03b      	b.n	8003df2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <HAL_RCC_ClockConfig+0x260>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d1ed      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d94:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	4917      	ldr	r1, [pc, #92]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d009      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003db2:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	490f      	ldr	r1, [pc, #60]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dc6:	f000 f825 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <HAL_RCC_ClockConfig+0x264>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	490c      	ldr	r1, [pc, #48]	; (8003e08 <HAL_RCC_ClockConfig+0x26c>)
 8003dd8:	5ccb      	ldrb	r3, [r1, r3]
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	fa22 f303 	lsr.w	r3, r2, r3
 8003de2:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <HAL_RCC_ClockConfig+0x270>)
 8003de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_RCC_ClockConfig+0x274>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fd f9f8 	bl	80011e0 <HAL_InitTick>
 8003df0:	4603      	mov	r3, r0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40022000 	.word	0x40022000
 8003e00:	40021000 	.word	0x40021000
 8003e04:	04c4b400 	.word	0x04c4b400
 8003e08:	0800bc18 	.word	0x0800bc18
 8003e0c:	20000000 	.word	0x20000000
 8003e10:	20000004 	.word	0x20000004

08003e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e1a:	4b2c      	ldr	r3, [pc, #176]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d102      	bne.n	8003e2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e26:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	e047      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e2c:	4b27      	ldr	r3, [pc, #156]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d102      	bne.n	8003e3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e38:	4b26      	ldr	r3, [pc, #152]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	e03e      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e3e:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	d136      	bne.n	8003eb8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e4a:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e54:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	3301      	adds	r3, #1
 8003e60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d10c      	bne.n	8003e82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e68:	4a1a      	ldr	r2, [pc, #104]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e72:	68d2      	ldr	r2, [r2, #12]
 8003e74:	0a12      	lsrs	r2, r2, #8
 8003e76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	617b      	str	r3, [r7, #20]
      break;
 8003e80:	e00c      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e82:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8a:	4a10      	ldr	r2, [pc, #64]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e8c:	68d2      	ldr	r2, [r2, #12]
 8003e8e:	0a12      	lsrs	r2, r2, #8
 8003e90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e94:	fb02 f303 	mul.w	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
      break;
 8003e9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	0e5b      	lsrs	r3, r3, #25
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	e001      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ebc:	693b      	ldr	r3, [r7, #16]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	00f42400 	.word	0x00f42400
 8003ed4:	016e3600 	.word	0x016e3600

08003ed8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003edc:	4b03      	ldr	r3, [pc, #12]	; (8003eec <HAL_RCC_GetHCLKFreq+0x14>)
 8003ede:	681b      	ldr	r3, [r3, #0]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000000 	.word	0x20000000

08003ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ef4:	f7ff fff0 	bl	8003ed8 <HAL_RCC_GetHCLKFreq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	4904      	ldr	r1, [pc, #16]	; (8003f18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f06:	5ccb      	ldrb	r3, [r1, r3]
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40021000 	.word	0x40021000
 8003f18:	0800bc28 	.word	0x0800bc28

08003f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f20:	f7ff ffda 	bl	8003ed8 <HAL_RCC_GetHCLKFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	0adb      	lsrs	r3, r3, #11
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	4904      	ldr	r1, [pc, #16]	; (8003f44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000
 8003f44:	0800bc28 	.word	0x0800bc28

08003f48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f4e:	4b1e      	ldr	r3, [pc, #120]	; (8003fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f58:	4b1b      	ldr	r3, [pc, #108]	; (8003fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	3301      	adds	r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d10c      	bne.n	8003f86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f6c:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f76:	68d2      	ldr	r2, [r2, #12]
 8003f78:	0a12      	lsrs	r2, r2, #8
 8003f7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	617b      	str	r3, [r7, #20]
    break;
 8003f84:	e00c      	b.n	8003fa0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f86:	4a12      	ldr	r2, [pc, #72]	; (8003fd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8e:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f90:	68d2      	ldr	r2, [r2, #12]
 8003f92:	0a12      	lsrs	r2, r2, #8
 8003f94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f98:	fb02 f303 	mul.w	r3, r2, r3
 8003f9c:	617b      	str	r3, [r7, #20]
    break;
 8003f9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	0e5b      	lsrs	r3, r3, #25
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	3301      	adds	r3, #1
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003fba:	687b      	ldr	r3, [r7, #4]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	016e3600 	.word	0x016e3600
 8003fd0:	00f42400 	.word	0x00f42400

08003fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fdc:	2300      	movs	r3, #0
 8003fde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 8098 	beq.w	8004122 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff6:	4b43      	ldr	r3, [pc, #268]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10d      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004002:	4b40      	ldr	r3, [pc, #256]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	4a3f      	ldr	r2, [pc, #252]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400c:	6593      	str	r3, [r2, #88]	; 0x58
 800400e:	4b3d      	ldr	r3, [pc, #244]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401a:	2301      	movs	r3, #1
 800401c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800401e:	4b3a      	ldr	r3, [pc, #232]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a39      	ldr	r2, [pc, #228]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004028:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800402a:	f7fd f925 	bl	8001278 <HAL_GetTick>
 800402e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004030:	e009      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004032:	f7fd f921 	bl	8001278 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d902      	bls.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	74fb      	strb	r3, [r7, #19]
        break;
 8004044:	e005      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004046:	4b30      	ldr	r3, [pc, #192]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0ef      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004052:	7cfb      	ldrb	r3, [r7, #19]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d159      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004058:	4b2a      	ldr	r3, [pc, #168]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004062:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01e      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	429a      	cmp	r2, r3
 8004072:	d019      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004074:	4b23      	ldr	r3, [pc, #140]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004080:	4b20      	ldr	r3, [pc, #128]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	4a1f      	ldr	r2, [pc, #124]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004090:	4b1c      	ldr	r3, [pc, #112]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004096:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040a0:	4a18      	ldr	r2, [pc, #96]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d016      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b2:	f7fd f8e1 	bl	8001278 <HAL_GetTick>
 80040b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b8:	e00b      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ba:	f7fd f8dd 	bl	8001278 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d902      	bls.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	74fb      	strb	r3, [r7, #19]
            break;
 80040d0:	e006      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d2:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0ec      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10b      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040e6:	4b07      	ldr	r3, [pc, #28]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f4:	4903      	ldr	r1, [pc, #12]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040fc:	e008      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040fe:	7cfb      	ldrb	r3, [r7, #19]
 8004100:	74bb      	strb	r3, [r7, #18]
 8004102:	e005      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004104:	40021000 	.word	0x40021000
 8004108:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004110:	7c7b      	ldrb	r3, [r7, #17]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d105      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004116:	4ba7      	ldr	r3, [pc, #668]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411a:	4aa6      	ldr	r2, [pc, #664]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004120:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800412e:	4ba1      	ldr	r3, [pc, #644]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	f023 0203 	bic.w	r2, r3, #3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	499d      	ldr	r1, [pc, #628]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004150:	4b98      	ldr	r3, [pc, #608]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f023 020c 	bic.w	r2, r3, #12
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	4995      	ldr	r1, [pc, #596]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004172:	4b90      	ldr	r3, [pc, #576]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	498c      	ldr	r1, [pc, #560]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004194:	4b87      	ldr	r3, [pc, #540]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	4984      	ldr	r1, [pc, #528]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041b6:	4b7f      	ldr	r3, [pc, #508]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	497b      	ldr	r1, [pc, #492]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041d8:	4b76      	ldr	r3, [pc, #472]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	4973      	ldr	r1, [pc, #460]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041fa:	4b6e      	ldr	r3, [pc, #440]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	496a      	ldr	r1, [pc, #424]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800421c:	4b65      	ldr	r3, [pc, #404]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	4962      	ldr	r1, [pc, #392]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800423e:	4b5d      	ldr	r3, [pc, #372]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	4959      	ldr	r1, [pc, #356]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004260:	4b54      	ldr	r3, [pc, #336]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004262:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004266:	f023 0203 	bic.w	r2, r3, #3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	4951      	ldr	r1, [pc, #324]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004282:	4b4c      	ldr	r3, [pc, #304]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	4948      	ldr	r1, [pc, #288]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d015      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a4:	4b43      	ldr	r3, [pc, #268]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	4940      	ldr	r1, [pc, #256]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042c2:	d105      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c4:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4a3a      	ldr	r2, [pc, #232]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d015      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042dc:	4b35      	ldr	r3, [pc, #212]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	4932      	ldr	r1, [pc, #200]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fa:	d105      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042fc:	4b2d      	ldr	r3, [pc, #180]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4a2c      	ldr	r2, [pc, #176]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004306:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d015      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004314:	4b27      	ldr	r3, [pc, #156]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	4924      	ldr	r1, [pc, #144]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004332:	d105      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004334:	4b1f      	ldr	r3, [pc, #124]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800433e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d015      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	4916      	ldr	r1, [pc, #88]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800436a:	d105      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800436c:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4a10      	ldr	r2, [pc, #64]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004376:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d019      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	4908      	ldr	r1, [pc, #32]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043a2:	d109      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043a4:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4a02      	ldr	r2, [pc, #8]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ae:	60d3      	str	r3, [r2, #12]
 80043b0:	e002      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d015      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043c4:	4b29      	ldr	r3, [pc, #164]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	4926      	ldr	r1, [pc, #152]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043e2:	d105      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043e4:	4b21      	ldr	r3, [pc, #132]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	4a20      	ldr	r2, [pc, #128]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d015      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80043fc:	4b1b      	ldr	r3, [pc, #108]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004402:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440a:	4918      	ldr	r1, [pc, #96]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441a:	d105      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800441c:	4b13      	ldr	r3, [pc, #76]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4a12      	ldr	r2, [pc, #72]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004426:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d015      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004434:	4b0d      	ldr	r3, [pc, #52]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004436:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800443a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	490a      	ldr	r1, [pc, #40]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004452:	d105      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4a04      	ldr	r2, [pc, #16]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800445a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800445e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004460:	7cbb      	ldrb	r3, [r7, #18]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40021000 	.word	0x40021000

08004470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e042      	b.n	8004508 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004488:	2b00      	cmp	r3, #0
 800448a:	d106      	bne.n	800449a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7fc fd85 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2224      	movs	r2, #36	; 0x24
 800449e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0201 	bic.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 ff38 	bl	8005330 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fc39 	bl	8004d38 <UART_SetConfig>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e01b      	b.n	8004508 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 ffb7 	bl	8005474 <UART_CheckIdleState>
 8004506:	4603      	mov	r3, r0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08a      	sub	sp, #40	; 0x28
 8004514:	af02      	add	r7, sp, #8
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	4613      	mov	r3, r2
 800451e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004526:	2b20      	cmp	r3, #32
 8004528:	d17b      	bne.n	8004622 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <HAL_UART_Transmit+0x26>
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e074      	b.n	8004624 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2221      	movs	r2, #33	; 0x21
 8004546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800454a:	f7fc fe95 	bl	8001278 <HAL_GetTick>
 800454e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	88fa      	ldrh	r2, [r7, #6]
 800455c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004568:	d108      	bne.n	800457c <HAL_UART_Transmit+0x6c>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	e003      	b.n	8004584 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004580:	2300      	movs	r3, #0
 8004582:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004584:	e030      	b.n	80045e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2200      	movs	r2, #0
 800458e:	2180      	movs	r1, #128	; 0x80
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f001 f819 	bl	80055c8 <UART_WaitOnFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e03d      	b.n	8004624 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10b      	bne.n	80045c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	3302      	adds	r3, #2
 80045c2:	61bb      	str	r3, [r7, #24]
 80045c4:	e007      	b.n	80045d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	781a      	ldrb	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	3301      	adds	r3, #1
 80045d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1c8      	bne.n	8004586 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2200      	movs	r2, #0
 80045fc:	2140      	movs	r1, #64	; 0x40
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 ffe2 	bl	80055c8 <UART_WaitOnFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e006      	b.n	8004624 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	e000      	b.n	8004624 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004622:	2302      	movs	r3, #2
  }
}
 8004624:	4618      	mov	r0, r3
 8004626:	3720      	adds	r7, #32
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	; 0x28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	4613      	mov	r3, r2
 8004638:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004640:	2b20      	cmp	r3, #32
 8004642:	d137      	bne.n	80046b4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_UART_Receive_IT+0x24>
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e030      	b.n	80046b6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <HAL_UART_Receive_IT+0x94>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d01f      	beq.n	80046a4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d018      	beq.n	80046a4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	613b      	str	r3, [r7, #16]
   return(result);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	623b      	str	r3, [r7, #32]
 8004692:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	69f9      	ldr	r1, [r7, #28]
 8004696:	6a3a      	ldr	r2, [r7, #32]
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	61bb      	str	r3, [r7, #24]
   return(result);
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e6      	bne.n	8004672 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046a4:	88fb      	ldrh	r3, [r7, #6]
 80046a6:	461a      	mov	r2, r3
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 fffa 	bl	80056a4 <UART_Start_Receive_IT>
 80046b0:	4603      	mov	r3, r0
 80046b2:	e000      	b.n	80046b6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046b4:	2302      	movs	r3, #2
  }
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3728      	adds	r7, #40	; 0x28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40008000 	.word	0x40008000

080046c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b0ba      	sub	sp, #232	; 0xe8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80046ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80046f2:	4013      	ands	r3, r2
 80046f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80046f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d11b      	bne.n	8004738 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d015      	beq.n	8004738 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800470c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d105      	bne.n	8004724 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800471c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d009      	beq.n	8004738 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 82e3 	beq.w	8004cf4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
      }
      return;
 8004736:	e2dd      	b.n	8004cf4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8123 	beq.w	8004988 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004742:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004746:	4b8d      	ldr	r3, [pc, #564]	; (800497c <HAL_UART_IRQHandler+0x2b8>)
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800474e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004752:	4b8b      	ldr	r3, [pc, #556]	; (8004980 <HAL_UART_IRQHandler+0x2bc>)
 8004754:	4013      	ands	r3, r2
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8116 	beq.w	8004988 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800475c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d011      	beq.n	800478c <HAL_UART_IRQHandler+0xc8>
 8004768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800476c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00b      	beq.n	800478c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2201      	movs	r2, #1
 800477a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	f043 0201 	orr.w	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800478c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d011      	beq.n	80047bc <HAL_UART_IRQHandler+0xf8>
 8004798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00b      	beq.n	80047bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2202      	movs	r2, #2
 80047aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f043 0204 	orr.w	r2, r3, #4
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d011      	beq.n	80047ec <HAL_UART_IRQHandler+0x128>
 80047c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00b      	beq.n	80047ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2204      	movs	r2, #4
 80047da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e2:	f043 0202 	orr.w	r2, r3, #2
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d017      	beq.n	8004828 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80047f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d105      	bne.n	8004810 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004804:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004808:	4b5c      	ldr	r3, [pc, #368]	; (800497c <HAL_UART_IRQHandler+0x2b8>)
 800480a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00b      	beq.n	8004828 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2208      	movs	r2, #8
 8004816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481e:	f043 0208 	orr.w	r2, r3, #8
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004830:	2b00      	cmp	r3, #0
 8004832:	d012      	beq.n	800485a <HAL_UART_IRQHandler+0x196>
 8004834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004838:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00c      	beq.n	800485a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004848:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004850:	f043 0220 	orr.w	r2, r3, #32
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8249 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d013      	beq.n	800489a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d105      	bne.n	800488a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800487e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	d005      	beq.n	80048be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d054      	beq.n	8004968 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f001 f812 	bl	80058e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d146      	bne.n	8004960 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3308      	adds	r3, #8
 80048d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3308      	adds	r3, #8
 80048fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800490a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1d9      	bne.n	80048d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004924:	2b00      	cmp	r3, #0
 8004926:	d017      	beq.n	8004958 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800492e:	4a15      	ldr	r2, [pc, #84]	; (8004984 <HAL_UART_IRQHandler+0x2c0>)
 8004930:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004938:	4618      	mov	r0, r3
 800493a:	f7fc fe33 	bl	80015a4 <HAL_DMA_Abort_IT>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d019      	beq.n	8004978 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004952:	4610      	mov	r0, r2
 8004954:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004956:	e00f      	b.n	8004978 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7fc faf9 	bl	8000f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495e:	e00b      	b.n	8004978 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7fc faf5 	bl	8000f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004966:	e007      	b.n	8004978 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7fc faf1 	bl	8000f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004976:	e1bf      	b.n	8004cf8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004978:	bf00      	nop
    return;
 800497a:	e1bd      	b.n	8004cf8 <HAL_UART_IRQHandler+0x634>
 800497c:	10000001 	.word	0x10000001
 8004980:	04000120 	.word	0x04000120
 8004984:	080059b5 	.word	0x080059b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800498c:	2b01      	cmp	r3, #1
 800498e:	f040 8153 	bne.w	8004c38 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 814c 	beq.w	8004c38 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8145 	beq.w	8004c38 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2210      	movs	r2, #16
 80049b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	f040 80bb 	bne.w	8004b3c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 818f 	beq.w	8004cfc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049e8:	429a      	cmp	r2, r3
 80049ea:	f080 8187 	bcs.w	8004cfc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f040 8087 	bne.w	8004b1a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a3a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1da      	bne.n	8004a0c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a60:	e853 3f00 	ldrex	r3, [r3]
 8004a64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a68:	f023 0301 	bic.w	r3, r3, #1
 8004a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3308      	adds	r3, #8
 8004a76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a86:	e841 2300 	strex	r3, r2, [r1]
 8004a8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1e1      	bne.n	8004a56 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3308      	adds	r3, #8
 8004a98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a9c:	e853 3f00 	ldrex	r3, [r3]
 8004aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ab6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ab8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004abc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1e3      	bne.n	8004a92 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae8:	f023 0310 	bic.w	r3, r3, #16
 8004aec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004afa:	65bb      	str	r3, [r7, #88]	; 0x58
 8004afc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e4      	bne.n	8004ad8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fc fcec 	bl	80014f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f8f3 	bl	8004d20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b3a:	e0df      	b.n	8004cfc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 80d1 	beq.w	8004d00 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004b5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 80cc 	beq.w	8004d00 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e4      	bne.n	8004b68 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	623b      	str	r3, [r7, #32]
   return(result);
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bc6:	633a      	str	r2, [r7, #48]	; 0x30
 8004bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e1      	bne.n	8004b9e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0310 	bic.w	r3, r3, #16
 8004c02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	69b9      	ldr	r1, [r7, #24]
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e4      	bne.n	8004bee <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f875 	bl	8004d20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c36:	e063      	b.n	8004d00 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00e      	beq.n	8004c62 <HAL_UART_IRQHandler+0x59e>
 8004c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f001 fc08 	bl	8006470 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c60:	e051      	b.n	8004d06 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d014      	beq.n	8004c98 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d105      	bne.n	8004c86 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d008      	beq.n	8004c98 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d03a      	beq.n	8004d04 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	4798      	blx	r3
    }
    return;
 8004c96:	e035      	b.n	8004d04 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d009      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x5f4>
 8004ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fe95 	bl	80059e0 <UART_EndTransmit_IT>
    return;
 8004cb6:	e026      	b.n	8004d06 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d009      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x614>
 8004cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f001 fbe1 	bl	8006498 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cd6:	e016      	b.n	8004d06 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d010      	beq.n	8004d06 <HAL_UART_IRQHandler+0x642>
 8004ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	da0c      	bge.n	8004d06 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f001 fbc9 	bl	8006484 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cf2:	e008      	b.n	8004d06 <HAL_UART_IRQHandler+0x642>
      return;
 8004cf4:	bf00      	nop
 8004cf6:	e006      	b.n	8004d06 <HAL_UART_IRQHandler+0x642>
    return;
 8004cf8:	bf00      	nop
 8004cfa:	e004      	b.n	8004d06 <HAL_UART_IRQHandler+0x642>
      return;
 8004cfc:	bf00      	nop
 8004cfe:	e002      	b.n	8004d06 <HAL_UART_IRQHandler+0x642>
      return;
 8004d00:	bf00      	nop
 8004d02:	e000      	b.n	8004d06 <HAL_UART_IRQHandler+0x642>
    return;
 8004d04:	bf00      	nop
  }
}
 8004d06:	37e8      	adds	r7, #232	; 0xe8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d3c:	b08c      	sub	sp, #48	; 0x30
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4baa      	ldr	r3, [pc, #680]	; (8005010 <UART_SetConfig+0x2d8>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	6812      	ldr	r2, [r2, #0]
 8004d6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d70:	430b      	orrs	r3, r1
 8004d72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a9f      	ldr	r2, [pc, #636]	; (8005014 <UART_SetConfig+0x2dc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d004      	beq.n	8004da4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da0:	4313      	orrs	r3, r2
 8004da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004dae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004db8:	430b      	orrs	r3, r1
 8004dba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	f023 010f 	bic.w	r1, r3, #15
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a90      	ldr	r2, [pc, #576]	; (8005018 <UART_SetConfig+0x2e0>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d125      	bne.n	8004e28 <UART_SetConfig+0xf0>
 8004ddc:	4b8f      	ldr	r3, [pc, #572]	; (800501c <UART_SetConfig+0x2e4>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d81a      	bhi.n	8004e20 <UART_SetConfig+0xe8>
 8004dea:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <UART_SetConfig+0xb8>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e01 	.word	0x08004e01
 8004df4:	08004e11 	.word	0x08004e11
 8004df8:	08004e09 	.word	0x08004e09
 8004dfc:	08004e19 	.word	0x08004e19
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e06:	e116      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e0e:	e112      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004e10:	2304      	movs	r3, #4
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e16:	e10e      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004e18:	2308      	movs	r3, #8
 8004e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e1e:	e10a      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004e20:	2310      	movs	r3, #16
 8004e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e26:	e106      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a7c      	ldr	r2, [pc, #496]	; (8005020 <UART_SetConfig+0x2e8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d138      	bne.n	8004ea4 <UART_SetConfig+0x16c>
 8004e32:	4b7a      	ldr	r3, [pc, #488]	; (800501c <UART_SetConfig+0x2e4>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e38:	f003 030c 	and.w	r3, r3, #12
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	d82d      	bhi.n	8004e9c <UART_SetConfig+0x164>
 8004e40:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <UART_SetConfig+0x110>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004e7d 	.word	0x08004e7d
 8004e4c:	08004e9d 	.word	0x08004e9d
 8004e50:	08004e9d 	.word	0x08004e9d
 8004e54:	08004e9d 	.word	0x08004e9d
 8004e58:	08004e8d 	.word	0x08004e8d
 8004e5c:	08004e9d 	.word	0x08004e9d
 8004e60:	08004e9d 	.word	0x08004e9d
 8004e64:	08004e9d 	.word	0x08004e9d
 8004e68:	08004e85 	.word	0x08004e85
 8004e6c:	08004e9d 	.word	0x08004e9d
 8004e70:	08004e9d 	.word	0x08004e9d
 8004e74:	08004e9d 	.word	0x08004e9d
 8004e78:	08004e95 	.word	0x08004e95
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e82:	e0d8      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004e84:	2302      	movs	r3, #2
 8004e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e8a:	e0d4      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e92:	e0d0      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004e94:	2308      	movs	r3, #8
 8004e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e9a:	e0cc      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ea2:	e0c8      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a5e      	ldr	r2, [pc, #376]	; (8005024 <UART_SetConfig+0x2ec>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d125      	bne.n	8004efa <UART_SetConfig+0x1c2>
 8004eae:	4b5b      	ldr	r3, [pc, #364]	; (800501c <UART_SetConfig+0x2e4>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004eb8:	2b30      	cmp	r3, #48	; 0x30
 8004eba:	d016      	beq.n	8004eea <UART_SetConfig+0x1b2>
 8004ebc:	2b30      	cmp	r3, #48	; 0x30
 8004ebe:	d818      	bhi.n	8004ef2 <UART_SetConfig+0x1ba>
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	d00a      	beq.n	8004eda <UART_SetConfig+0x1a2>
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d814      	bhi.n	8004ef2 <UART_SetConfig+0x1ba>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <UART_SetConfig+0x19a>
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d008      	beq.n	8004ee2 <UART_SetConfig+0x1aa>
 8004ed0:	e00f      	b.n	8004ef2 <UART_SetConfig+0x1ba>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ed8:	e0ad      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004eda:	2302      	movs	r3, #2
 8004edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ee0:	e0a9      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004ee2:	2304      	movs	r3, #4
 8004ee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ee8:	e0a5      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004eea:	2308      	movs	r3, #8
 8004eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ef0:	e0a1      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004ef2:	2310      	movs	r3, #16
 8004ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ef8:	e09d      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a4a      	ldr	r2, [pc, #296]	; (8005028 <UART_SetConfig+0x2f0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d125      	bne.n	8004f50 <UART_SetConfig+0x218>
 8004f04:	4b45      	ldr	r3, [pc, #276]	; (800501c <UART_SetConfig+0x2e4>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f0e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f10:	d016      	beq.n	8004f40 <UART_SetConfig+0x208>
 8004f12:	2bc0      	cmp	r3, #192	; 0xc0
 8004f14:	d818      	bhi.n	8004f48 <UART_SetConfig+0x210>
 8004f16:	2b80      	cmp	r3, #128	; 0x80
 8004f18:	d00a      	beq.n	8004f30 <UART_SetConfig+0x1f8>
 8004f1a:	2b80      	cmp	r3, #128	; 0x80
 8004f1c:	d814      	bhi.n	8004f48 <UART_SetConfig+0x210>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <UART_SetConfig+0x1f0>
 8004f22:	2b40      	cmp	r3, #64	; 0x40
 8004f24:	d008      	beq.n	8004f38 <UART_SetConfig+0x200>
 8004f26:	e00f      	b.n	8004f48 <UART_SetConfig+0x210>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f2e:	e082      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004f30:	2302      	movs	r3, #2
 8004f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f36:	e07e      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f3e:	e07a      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004f40:	2308      	movs	r3, #8
 8004f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f46:	e076      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004f48:	2310      	movs	r3, #16
 8004f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f4e:	e072      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a35      	ldr	r2, [pc, #212]	; (800502c <UART_SetConfig+0x2f4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d12a      	bne.n	8004fb0 <UART_SetConfig+0x278>
 8004f5a:	4b30      	ldr	r3, [pc, #192]	; (800501c <UART_SetConfig+0x2e4>)
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f68:	d01a      	beq.n	8004fa0 <UART_SetConfig+0x268>
 8004f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f6e:	d81b      	bhi.n	8004fa8 <UART_SetConfig+0x270>
 8004f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f74:	d00c      	beq.n	8004f90 <UART_SetConfig+0x258>
 8004f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f7a:	d815      	bhi.n	8004fa8 <UART_SetConfig+0x270>
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <UART_SetConfig+0x250>
 8004f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f84:	d008      	beq.n	8004f98 <UART_SetConfig+0x260>
 8004f86:	e00f      	b.n	8004fa8 <UART_SetConfig+0x270>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f8e:	e052      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004f90:	2302      	movs	r3, #2
 8004f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f96:	e04e      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004f98:	2304      	movs	r3, #4
 8004f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f9e:	e04a      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004fa0:	2308      	movs	r3, #8
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fa6:	e046      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004fa8:	2310      	movs	r3, #16
 8004faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fae:	e042      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a17      	ldr	r2, [pc, #92]	; (8005014 <UART_SetConfig+0x2dc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d13a      	bne.n	8005030 <UART_SetConfig+0x2f8>
 8004fba:	4b18      	ldr	r3, [pc, #96]	; (800501c <UART_SetConfig+0x2e4>)
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fc8:	d01a      	beq.n	8005000 <UART_SetConfig+0x2c8>
 8004fca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fce:	d81b      	bhi.n	8005008 <UART_SetConfig+0x2d0>
 8004fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd4:	d00c      	beq.n	8004ff0 <UART_SetConfig+0x2b8>
 8004fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fda:	d815      	bhi.n	8005008 <UART_SetConfig+0x2d0>
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <UART_SetConfig+0x2b0>
 8004fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe4:	d008      	beq.n	8004ff8 <UART_SetConfig+0x2c0>
 8004fe6:	e00f      	b.n	8005008 <UART_SetConfig+0x2d0>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fee:	e022      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ff6:	e01e      	b.n	8005036 <UART_SetConfig+0x2fe>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ffe:	e01a      	b.n	8005036 <UART_SetConfig+0x2fe>
 8005000:	2308      	movs	r3, #8
 8005002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005006:	e016      	b.n	8005036 <UART_SetConfig+0x2fe>
 8005008:	2310      	movs	r3, #16
 800500a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800500e:	e012      	b.n	8005036 <UART_SetConfig+0x2fe>
 8005010:	cfff69f3 	.word	0xcfff69f3
 8005014:	40008000 	.word	0x40008000
 8005018:	40013800 	.word	0x40013800
 800501c:	40021000 	.word	0x40021000
 8005020:	40004400 	.word	0x40004400
 8005024:	40004800 	.word	0x40004800
 8005028:	40004c00 	.word	0x40004c00
 800502c:	40005000 	.word	0x40005000
 8005030:	2310      	movs	r3, #16
 8005032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4aae      	ldr	r2, [pc, #696]	; (80052f4 <UART_SetConfig+0x5bc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	f040 8097 	bne.w	8005170 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005042:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005046:	2b08      	cmp	r3, #8
 8005048:	d823      	bhi.n	8005092 <UART_SetConfig+0x35a>
 800504a:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <UART_SetConfig+0x318>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	08005075 	.word	0x08005075
 8005054:	08005093 	.word	0x08005093
 8005058:	0800507d 	.word	0x0800507d
 800505c:	08005093 	.word	0x08005093
 8005060:	08005083 	.word	0x08005083
 8005064:	08005093 	.word	0x08005093
 8005068:	08005093 	.word	0x08005093
 800506c:	08005093 	.word	0x08005093
 8005070:	0800508b 	.word	0x0800508b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005074:	f7fe ff3c 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 8005078:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800507a:	e010      	b.n	800509e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800507c:	4b9e      	ldr	r3, [pc, #632]	; (80052f8 <UART_SetConfig+0x5c0>)
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005080:	e00d      	b.n	800509e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005082:	f7fe fec7 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8005086:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005088:	e009      	b.n	800509e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800508a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005090:	e005      	b.n	800509e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800509c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 8130 	beq.w	8005306 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	4a94      	ldr	r2, [pc, #592]	; (80052fc <UART_SetConfig+0x5c4>)
 80050ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050b0:	461a      	mov	r2, r3
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	4413      	add	r3, r2
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d305      	bcc.n	80050d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d903      	bls.n	80050de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050dc:	e113      	b.n	8005306 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	2200      	movs	r2, #0
 80050e2:	60bb      	str	r3, [r7, #8]
 80050e4:	60fa      	str	r2, [r7, #12]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	4a84      	ldr	r2, [pc, #528]	; (80052fc <UART_SetConfig+0x5c4>)
 80050ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2200      	movs	r2, #0
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005100:	f7fb f8de 	bl	80002c0 <__aeabi_uldivmod>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4610      	mov	r0, r2
 800510a:	4619      	mov	r1, r3
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	020b      	lsls	r3, r1, #8
 8005116:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800511a:	0202      	lsls	r2, r0, #8
 800511c:	6979      	ldr	r1, [r7, #20]
 800511e:	6849      	ldr	r1, [r1, #4]
 8005120:	0849      	lsrs	r1, r1, #1
 8005122:	2000      	movs	r0, #0
 8005124:	460c      	mov	r4, r1
 8005126:	4605      	mov	r5, r0
 8005128:	eb12 0804 	adds.w	r8, r2, r4
 800512c:	eb43 0905 	adc.w	r9, r3, r5
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	469a      	mov	sl, r3
 8005138:	4693      	mov	fp, r2
 800513a:	4652      	mov	r2, sl
 800513c:	465b      	mov	r3, fp
 800513e:	4640      	mov	r0, r8
 8005140:	4649      	mov	r1, r9
 8005142:	f7fb f8bd 	bl	80002c0 <__aeabi_uldivmod>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4613      	mov	r3, r2
 800514c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005154:	d308      	bcc.n	8005168 <UART_SetConfig+0x430>
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800515c:	d204      	bcs.n	8005168 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6a3a      	ldr	r2, [r7, #32]
 8005164:	60da      	str	r2, [r3, #12]
 8005166:	e0ce      	b.n	8005306 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800516e:	e0ca      	b.n	8005306 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005178:	d166      	bne.n	8005248 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800517a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800517e:	2b08      	cmp	r3, #8
 8005180:	d827      	bhi.n	80051d2 <UART_SetConfig+0x49a>
 8005182:	a201      	add	r2, pc, #4	; (adr r2, 8005188 <UART_SetConfig+0x450>)
 8005184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005188:	080051ad 	.word	0x080051ad
 800518c:	080051b5 	.word	0x080051b5
 8005190:	080051bd 	.word	0x080051bd
 8005194:	080051d3 	.word	0x080051d3
 8005198:	080051c3 	.word	0x080051c3
 800519c:	080051d3 	.word	0x080051d3
 80051a0:	080051d3 	.word	0x080051d3
 80051a4:	080051d3 	.word	0x080051d3
 80051a8:	080051cb 	.word	0x080051cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ac:	f7fe fea0 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 80051b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051b2:	e014      	b.n	80051de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b4:	f7fe feb2 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 80051b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051ba:	e010      	b.n	80051de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051bc:	4b4e      	ldr	r3, [pc, #312]	; (80052f8 <UART_SetConfig+0x5c0>)
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051c0:	e00d      	b.n	80051de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051c2:	f7fe fe27 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 80051c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051c8:	e009      	b.n	80051de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051d0:	e005      	b.n	80051de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80051dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 8090 	beq.w	8005306 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	4a44      	ldr	r2, [pc, #272]	; (80052fc <UART_SetConfig+0x5c4>)
 80051ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051f0:	461a      	mov	r2, r3
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80051f8:	005a      	lsls	r2, r3, #1
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	085b      	lsrs	r3, r3, #1
 8005200:	441a      	add	r2, r3
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	fbb2 f3f3 	udiv	r3, r2, r3
 800520a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	2b0f      	cmp	r3, #15
 8005210:	d916      	bls.n	8005240 <UART_SetConfig+0x508>
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005218:	d212      	bcs.n	8005240 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	b29b      	uxth	r3, r3
 800521e:	f023 030f 	bic.w	r3, r3, #15
 8005222:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	b29b      	uxth	r3, r3
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	b29a      	uxth	r2, r3
 8005230:	8bfb      	ldrh	r3, [r7, #30]
 8005232:	4313      	orrs	r3, r2
 8005234:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	8bfa      	ldrh	r2, [r7, #30]
 800523c:	60da      	str	r2, [r3, #12]
 800523e:	e062      	b.n	8005306 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005246:	e05e      	b.n	8005306 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005248:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800524c:	2b08      	cmp	r3, #8
 800524e:	d828      	bhi.n	80052a2 <UART_SetConfig+0x56a>
 8005250:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <UART_SetConfig+0x520>)
 8005252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005256:	bf00      	nop
 8005258:	0800527d 	.word	0x0800527d
 800525c:	08005285 	.word	0x08005285
 8005260:	0800528d 	.word	0x0800528d
 8005264:	080052a3 	.word	0x080052a3
 8005268:	08005293 	.word	0x08005293
 800526c:	080052a3 	.word	0x080052a3
 8005270:	080052a3 	.word	0x080052a3
 8005274:	080052a3 	.word	0x080052a3
 8005278:	0800529b 	.word	0x0800529b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800527c:	f7fe fe38 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 8005280:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005282:	e014      	b.n	80052ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005284:	f7fe fe4a 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 8005288:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800528a:	e010      	b.n	80052ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800528c:	4b1a      	ldr	r3, [pc, #104]	; (80052f8 <UART_SetConfig+0x5c0>)
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005290:	e00d      	b.n	80052ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005292:	f7fe fdbf 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8005296:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005298:	e009      	b.n	80052ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052a0:	e005      	b.n	80052ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80052ac:	bf00      	nop
    }

    if (pclk != 0U)
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d028      	beq.n	8005306 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	4a10      	ldr	r2, [pc, #64]	; (80052fc <UART_SetConfig+0x5c4>)
 80052ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052be:	461a      	mov	r2, r3
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	441a      	add	r2, r3
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	2b0f      	cmp	r3, #15
 80052dc:	d910      	bls.n	8005300 <UART_SetConfig+0x5c8>
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e4:	d20c      	bcs.n	8005300 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60da      	str	r2, [r3, #12]
 80052f0:	e009      	b.n	8005306 <UART_SetConfig+0x5ce>
 80052f2:	bf00      	nop
 80052f4:	40008000 	.word	0x40008000
 80052f8:	00f42400 	.word	0x00f42400
 80052fc:	0800bc38 	.word	0x0800bc38
      }
      else
      {
        ret = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2201      	movs	r2, #1
 800530a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2201      	movs	r2, #1
 8005312:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2200      	movs	r2, #0
 800531a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2200      	movs	r2, #0
 8005320:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005322:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005326:	4618      	mov	r0, r3
 8005328:	3730      	adds	r7, #48	; 0x30
 800532a:	46bd      	mov	sp, r7
 800532c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533c:	f003 0308 	and.w	r3, r3, #8
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01a      	beq.n	8005446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800542e:	d10a      	bne.n	8005446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	605a      	str	r2, [r3, #4]
  }
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b098      	sub	sp, #96	; 0x60
 8005478:	af02      	add	r7, sp, #8
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005484:	f7fb fef8 	bl	8001278 <HAL_GetTick>
 8005488:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b08      	cmp	r3, #8
 8005496:	d12f      	bne.n	80054f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a0:	2200      	movs	r2, #0
 80054a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f88e 	bl	80055c8 <UART_WaitOnFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d022      	beq.n	80054f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054c6:	653b      	str	r3, [r7, #80]	; 0x50
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d0:	647b      	str	r3, [r7, #68]	; 0x44
 80054d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e6      	bne.n	80054b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e063      	b.n	80055c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b04      	cmp	r3, #4
 8005504:	d149      	bne.n	800559a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005506:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800550e:	2200      	movs	r2, #0
 8005510:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f857 	bl	80055c8 <UART_WaitOnFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d03c      	beq.n	800559a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	623b      	str	r3, [r7, #32]
   return(result);
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005534:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553e:	633b      	str	r3, [r7, #48]	; 0x30
 8005540:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e6      	bne.n	8005520 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3308      	adds	r3, #8
 8005558:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	60fb      	str	r3, [r7, #12]
   return(result);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	64bb      	str	r3, [r7, #72]	; 0x48
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3308      	adds	r3, #8
 8005570:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005572:	61fa      	str	r2, [r7, #28]
 8005574:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	69b9      	ldr	r1, [r7, #24]
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	617b      	str	r3, [r7, #20]
   return(result);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e5      	bne.n	8005552 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2220      	movs	r2, #32
 800558a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e012      	b.n	80055c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3758      	adds	r7, #88	; 0x58
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	4613      	mov	r3, r2
 80055d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d8:	e04f      	b.n	800567a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e0:	d04b      	beq.n	800567a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e2:	f7fb fe49 	bl	8001278 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d302      	bcc.n	80055f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e04e      	b.n	800569a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	d037      	beq.n	800567a <UART_WaitOnFlagUntilTimeout+0xb2>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b80      	cmp	r3, #128	; 0x80
 800560e:	d034      	beq.n	800567a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	d031      	beq.n	800567a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	f003 0308 	and.w	r3, r3, #8
 8005620:	2b08      	cmp	r3, #8
 8005622:	d110      	bne.n	8005646 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2208      	movs	r2, #8
 800562a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f95b 	bl	80058e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2208      	movs	r2, #8
 8005636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e029      	b.n	800569a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005654:	d111      	bne.n	800567a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800565e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f941 	bl	80058e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2220      	movs	r2, #32
 800566a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e00f      	b.n	800569a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69da      	ldr	r2, [r3, #28]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4013      	ands	r3, r2
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	429a      	cmp	r2, r3
 8005688:	bf0c      	ite	eq
 800568a:	2301      	moveq	r3, #1
 800568c:	2300      	movne	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	429a      	cmp	r2, r3
 8005696:	d0a0      	beq.n	80055da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b0a3      	sub	sp, #140	; 0x8c
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	88fa      	ldrh	r2, [r7, #6]
 80056c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d6:	d10e      	bne.n	80056f6 <UART_Start_Receive_IT+0x52>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d105      	bne.n	80056ec <UART_Start_Receive_IT+0x48>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80056e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056ea:	e02d      	b.n	8005748 <UART_Start_Receive_IT+0xa4>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	22ff      	movs	r2, #255	; 0xff
 80056f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056f4:	e028      	b.n	8005748 <UART_Start_Receive_IT+0xa4>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10d      	bne.n	800571a <UART_Start_Receive_IT+0x76>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d104      	bne.n	8005710 <UART_Start_Receive_IT+0x6c>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	22ff      	movs	r2, #255	; 0xff
 800570a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800570e:	e01b      	b.n	8005748 <UART_Start_Receive_IT+0xa4>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	227f      	movs	r2, #127	; 0x7f
 8005714:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005718:	e016      	b.n	8005748 <UART_Start_Receive_IT+0xa4>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005722:	d10d      	bne.n	8005740 <UART_Start_Receive_IT+0x9c>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d104      	bne.n	8005736 <UART_Start_Receive_IT+0x92>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	227f      	movs	r2, #127	; 0x7f
 8005730:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005734:	e008      	b.n	8005748 <UART_Start_Receive_IT+0xa4>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	223f      	movs	r2, #63	; 0x3f
 800573a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800573e:	e003      	b.n	8005748 <UART_Start_Receive_IT+0xa4>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2222      	movs	r2, #34	; 0x22
 8005754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3308      	adds	r3, #8
 800575e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3308      	adds	r3, #8
 8005778:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800577c:	673a      	str	r2, [r7, #112]	; 0x70
 800577e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005780:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005782:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005784:	e841 2300 	strex	r3, r2, [r1]
 8005788:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800578a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e3      	bne.n	8005758 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005798:	d14f      	bne.n	800583a <UART_Start_Receive_IT+0x196>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80057a0:	88fa      	ldrh	r2, [r7, #6]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d349      	bcc.n	800583a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ae:	d107      	bne.n	80057c0 <UART_Start_Receive_IT+0x11c>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d103      	bne.n	80057c0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a47      	ldr	r2, [pc, #284]	; (80058d8 <UART_Start_Receive_IT+0x234>)
 80057bc:	675a      	str	r2, [r3, #116]	; 0x74
 80057be:	e002      	b.n	80057c6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a46      	ldr	r2, [pc, #280]	; (80058dc <UART_Start_Receive_IT+0x238>)
 80057c4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01a      	beq.n	8005804 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057f2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e4      	bne.n	80057ce <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3308      	adds	r3, #8
 800580a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800581a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3308      	adds	r3, #8
 8005822:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005824:	64ba      	str	r2, [r7, #72]	; 0x48
 8005826:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800582a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e5      	bne.n	8005804 <UART_Start_Receive_IT+0x160>
 8005838:	e046      	b.n	80058c8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005842:	d107      	bne.n	8005854 <UART_Start_Receive_IT+0x1b0>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a24      	ldr	r2, [pc, #144]	; (80058e0 <UART_Start_Receive_IT+0x23c>)
 8005850:	675a      	str	r2, [r3, #116]	; 0x74
 8005852:	e002      	b.n	800585a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4a23      	ldr	r2, [pc, #140]	; (80058e4 <UART_Start_Receive_IT+0x240>)
 8005858:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d019      	beq.n	8005896 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005876:	677b      	str	r3, [r7, #116]	; 0x74
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
 8005882:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e6      	bne.n	8005862 <UART_Start_Receive_IT+0x1be>
 8005894:	e018      	b.n	80058c8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	613b      	str	r3, [r7, #16]
   return(result);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f043 0320 	orr.w	r3, r3, #32
 80058aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058b4:	623b      	str	r3, [r7, #32]
 80058b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	69f9      	ldr	r1, [r7, #28]
 80058ba:	6a3a      	ldr	r2, [r7, #32]
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e6      	bne.n	8005896 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	378c      	adds	r7, #140	; 0x8c
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	08006109 	.word	0x08006109
 80058dc:	08005da9 	.word	0x08005da9
 80058e0:	08005bf1 	.word	0x08005bf1
 80058e4:	08005a39 	.word	0x08005a39

080058e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b095      	sub	sp, #84	; 0x54
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005904:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800590e:	643b      	str	r3, [r7, #64]	; 0x40
 8005910:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e6      	bne.n	80058f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3308      	adds	r3, #8
 8005928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	61fb      	str	r3, [r7, #28]
   return(result);
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	64bb      	str	r3, [r7, #72]	; 0x48
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3308      	adds	r3, #8
 8005944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005948:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800594c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e3      	bne.n	8005922 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800595e:	2b01      	cmp	r3, #1
 8005960:	d118      	bne.n	8005994 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f023 0310 	bic.w	r3, r3, #16
 8005976:	647b      	str	r3, [r7, #68]	; 0x44
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6979      	ldr	r1, [r7, #20]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	613b      	str	r3, [r7, #16]
   return(result);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e6      	bne.n	8005962 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80059a8:	bf00      	nop
 80059aa:	3754      	adds	r7, #84	; 0x54
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f7fb fabc 	bl	8000f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	61bb      	str	r3, [r7, #24]
 8005a08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	6979      	ldr	r1, [r7, #20]
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	613b      	str	r3, [r7, #16]
   return(result);
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e6      	bne.n	80059e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff f96f 	bl	8004d0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a2e:	bf00      	nop
 8005a30:	3720      	adds	r7, #32
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b09c      	sub	sp, #112	; 0x70
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a46:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a50:	2b22      	cmp	r3, #34	; 0x22
 8005a52:	f040 80be 	bne.w	8005bd2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005a64:	b2d9      	uxtb	r1, r3
 8005a66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a70:	400a      	ands	r2, r1
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f040 80a1 	bne.w	8005be2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005abe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ac0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e6      	bne.n	8005aa0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	667b      	str	r3, [r7, #100]	; 0x64
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3308      	adds	r3, #8
 8005af0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005af2:	647a      	str	r2, [r7, #68]	; 0x44
 8005af4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005af8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e5      	bne.n	8005ad2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a33      	ldr	r2, [pc, #204]	; (8005bec <UART_RxISR_8BIT+0x1b4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d01f      	beq.n	8005b64 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d018      	beq.n	8005b64 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	623b      	str	r3, [r7, #32]
   return(result);
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b46:	663b      	str	r3, [r7, #96]	; 0x60
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b50:	633b      	str	r3, [r7, #48]	; 0x30
 8005b52:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e6      	bne.n	8005b32 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d12e      	bne.n	8005bca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0310 	bic.w	r3, r3, #16
 8005b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b90:	61fb      	str	r3, [r7, #28]
 8005b92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	69b9      	ldr	r1, [r7, #24]
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e6      	bne.n	8005b72 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	2b10      	cmp	r3, #16
 8005bb0:	d103      	bne.n	8005bba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2210      	movs	r2, #16
 8005bb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff f8ac 	bl	8004d20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bc8:	e00b      	b.n	8005be2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fb f9ca 	bl	8000f64 <HAL_UART_RxCpltCallback>
}
 8005bd0:	e007      	b.n	8005be2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699a      	ldr	r2, [r3, #24]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0208 	orr.w	r2, r2, #8
 8005be0:	619a      	str	r2, [r3, #24]
}
 8005be2:	bf00      	nop
 8005be4:	3770      	adds	r7, #112	; 0x70
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	40008000 	.word	0x40008000

08005bf0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b09c      	sub	sp, #112	; 0x70
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005bfe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c08:	2b22      	cmp	r3, #34	; 0x22
 8005c0a:	f040 80be 	bne.w	8005d8a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c1e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005c22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005c26:	4013      	ands	r3, r2
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c32:	1c9a      	adds	r2, r3, #2
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f040 80a1 	bne.w	8005d9a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c60:	e853 3f00 	ldrex	r3, [r3]
 8005c64:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c6c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c76:	657b      	str	r3, [r7, #84]	; 0x54
 8005c78:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e6      	bne.n	8005c58 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3308      	adds	r3, #8
 8005c90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	f023 0301 	bic.w	r3, r3, #1
 8005ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005caa:	643a      	str	r2, [r7, #64]	; 0x40
 8005cac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e5      	bne.n	8005c8a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a33      	ldr	r2, [pc, #204]	; (8005da4 <UART_RxISR_16BIT+0x1b4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d01f      	beq.n	8005d1c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d018      	beq.n	8005d1c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d0a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e6      	bne.n	8005cea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d12e      	bne.n	8005d82 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f023 0310 	bic.w	r3, r3, #16
 8005d3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6979      	ldr	r1, [r7, #20]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	613b      	str	r3, [r7, #16]
   return(result);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e6      	bne.n	8005d2a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f003 0310 	and.w	r3, r3, #16
 8005d66:	2b10      	cmp	r3, #16
 8005d68:	d103      	bne.n	8005d72 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2210      	movs	r2, #16
 8005d70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fe ffd0 	bl	8004d20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d80:	e00b      	b.n	8005d9a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7fb f8ee 	bl	8000f64 <HAL_UART_RxCpltCallback>
}
 8005d88:	e007      	b.n	8005d9a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699a      	ldr	r2, [r3, #24]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0208 	orr.w	r2, r2, #8
 8005d98:	619a      	str	r2, [r3, #24]
}
 8005d9a:	bf00      	nop
 8005d9c:	3770      	adds	r7, #112	; 0x70
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	40008000 	.word	0x40008000

08005da8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b0ac      	sub	sp, #176	; 0xb0
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005db6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dde:	2b22      	cmp	r3, #34	; 0x22
 8005de0:	f040 8182 	bne.w	80060e8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005dea:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005dee:	e125      	b.n	800603c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005dfa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005dfe:	b2d9      	uxtb	r1, r3
 8005e00:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0a:	400a      	ands	r2, r1
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d053      	beq.n	8005eea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d011      	beq.n	8005e72 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005e4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00b      	beq.n	8005e72 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e68:	f043 0201 	orr.w	r2, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d011      	beq.n	8005ea2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e98:	f043 0204 	orr.w	r2, r3, #4
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d011      	beq.n	8005ed2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005eae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00b      	beq.n	8005ed2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2204      	movs	r2, #4
 8005ec0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec8:	f043 0202 	orr.w	r2, r3, #2
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d006      	beq.n	8005eea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fb f837 	bl	8000f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f040 80a2 	bne.w	800603c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	461a      	mov	r2, r3
 8005f16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f1c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005f20:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e4      	bne.n	8005ef8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3308      	adds	r3, #8
 8005f34:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f44:	f023 0301 	bic.w	r3, r3, #1
 8005f48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f56:	66ba      	str	r2, [r7, #104]	; 0x68
 8005f58:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005f5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e1      	bne.n	8005f2e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a5f      	ldr	r2, [pc, #380]	; (8006100 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d021      	beq.n	8005fcc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01a      	beq.n	8005fcc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9e:	e853 3f00 	ldrex	r3, [r3]
 8005fa2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fb8:	657b      	str	r3, [r7, #84]	; 0x54
 8005fba:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005fc0:	e841 2300 	strex	r3, r2, [r1]
 8005fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1e4      	bne.n	8005f96 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d130      	bne.n	8006036 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	f023 0310 	bic.w	r3, r3, #16
 8005fee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ffc:	643b      	str	r3, [r7, #64]	; 0x40
 8005ffe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006002:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e4      	bne.n	8005fda <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f003 0310 	and.w	r3, r3, #16
 800601a:	2b10      	cmp	r3, #16
 800601c:	d103      	bne.n	8006026 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2210      	movs	r2, #16
 8006024:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fe fe76 	bl	8004d20 <HAL_UARTEx_RxEventCallback>
 8006034:	e002      	b.n	800603c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fa ff94 	bl	8000f64 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800603c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006040:	2b00      	cmp	r3, #0
 8006042:	d006      	beq.n	8006052 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b00      	cmp	r3, #0
 800604e:	f47f aecf 	bne.w	8005df0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006058:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800605c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006060:	2b00      	cmp	r3, #0
 8006062:	d049      	beq.n	80060f8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800606a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800606e:	429a      	cmp	r2, r3
 8006070:	d242      	bcs.n	80060f8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3308      	adds	r3, #8
 8006078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	61fb      	str	r3, [r7, #28]
   return(result);
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3308      	adds	r3, #8
 8006092:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006098:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800609c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800609e:	e841 2300 	strex	r3, r2, [r1]
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1e3      	bne.n	8006072 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a15      	ldr	r2, [pc, #84]	; (8006104 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80060ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f043 0320 	orr.w	r3, r3, #32
 80060c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	461a      	mov	r2, r3
 80060ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060d2:	61bb      	str	r3, [r7, #24]
 80060d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	6979      	ldr	r1, [r7, #20]
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	613b      	str	r3, [r7, #16]
   return(result);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e4      	bne.n	80060b0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060e6:	e007      	b.n	80060f8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0208 	orr.w	r2, r2, #8
 80060f6:	619a      	str	r2, [r3, #24]
}
 80060f8:	bf00      	nop
 80060fa:	37b0      	adds	r7, #176	; 0xb0
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40008000 	.word	0x40008000
 8006104:	08005a39 	.word	0x08005a39

08006108 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b0ae      	sub	sp, #184	; 0xb8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006116:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800613e:	2b22      	cmp	r3, #34	; 0x22
 8006140:	f040 8186 	bne.w	8006450 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800614a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800614e:	e129      	b.n	80063a4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006162:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006166:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800616a:	4013      	ands	r3, r2
 800616c:	b29a      	uxth	r2, r3
 800616e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006172:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006178:	1c9a      	adds	r2, r3, #2
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800619a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d053      	beq.n	800624e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d011      	beq.n	80061d6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80061b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00b      	beq.n	80061d6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2201      	movs	r2, #1
 80061c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061cc:	f043 0201 	orr.w	r2, r3, #1
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d011      	beq.n	8006206 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80061e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00b      	beq.n	8006206 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2202      	movs	r2, #2
 80061f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fc:	f043 0204 	orr.w	r2, r3, #4
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006206:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b00      	cmp	r3, #0
 8006210:	d011      	beq.n	8006236 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006212:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00b      	beq.n	8006236 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2204      	movs	r2, #4
 8006224:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622c:	f043 0202 	orr.w	r2, r3, #2
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623c:	2b00      	cmp	r3, #0
 800623e:	d006      	beq.n	800624e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7fa fe85 	bl	8000f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	f040 80a4 	bne.w	80063a4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800626a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800626c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800627e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006282:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006286:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e2      	bne.n	800625c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3308      	adds	r3, #8
 800629c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062ac:	f023 0301 	bic.w	r3, r3, #1
 80062b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3308      	adds	r3, #8
 80062ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80062be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e1      	bne.n	8006296 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a5f      	ldr	r2, [pc, #380]	; (8006468 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d021      	beq.n	8006334 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d01a      	beq.n	8006334 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006306:	e853 3f00 	ldrex	r3, [r3]
 800630a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800630c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800630e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006320:	65bb      	str	r3, [r7, #88]	; 0x58
 8006322:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006326:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006328:	e841 2300 	strex	r3, r2, [r1]
 800632c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800632e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e4      	bne.n	80062fe <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006338:	2b01      	cmp	r3, #1
 800633a:	d130      	bne.n	800639e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006352:	f023 0310 	bic.w	r3, r3, #16
 8006356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006364:	647b      	str	r3, [r7, #68]	; 0x44
 8006366:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800636a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e4      	bne.n	8006342 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	f003 0310 	and.w	r3, r3, #16
 8006382:	2b10      	cmp	r3, #16
 8006384:	d103      	bne.n	800638e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2210      	movs	r2, #16
 800638c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006394:	4619      	mov	r1, r3
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7fe fcc2 	bl	8004d20 <HAL_UARTEx_RxEventCallback>
 800639c:	e002      	b.n	80063a4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7fa fde0 	bl	8000f64 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80063a4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d006      	beq.n	80063ba <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80063ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f47f aecb 	bne.w	8006150 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063c0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80063c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d049      	beq.n	8006460 <UART_RxISR_16BIT_FIFOEN+0x358>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80063d2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d242      	bcs.n	8006460 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3308      	adds	r3, #8
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	623b      	str	r3, [r7, #32]
   return(result);
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3308      	adds	r3, #8
 80063fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80063fe:	633a      	str	r2, [r7, #48]	; 0x30
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e3      	bne.n	80063da <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a15      	ldr	r2, [pc, #84]	; (800646c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006416:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	60fb      	str	r3, [r7, #12]
   return(result);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f043 0320 	orr.w	r3, r3, #32
 800642c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	461a      	mov	r2, r3
 8006436:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800643a:	61fb      	str	r3, [r7, #28]
 800643c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643e:	69b9      	ldr	r1, [r7, #24]
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	e841 2300 	strex	r3, r2, [r1]
 8006446:	617b      	str	r3, [r7, #20]
   return(result);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1e4      	bne.n	8006418 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800644e:	e007      	b.n	8006460 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0208 	orr.w	r2, r2, #8
 800645e:	619a      	str	r2, [r3, #24]
}
 8006460:	bf00      	nop
 8006462:	37b8      	adds	r7, #184	; 0xb8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40008000 	.word	0x40008000
 800646c:	08005bf1 	.word	0x08005bf1

08006470 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d101      	bne.n	80064c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80064be:	2302      	movs	r3, #2
 80064c0:	e027      	b.n	8006512 <HAL_UARTEx_DisableFifoMode+0x66>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2224      	movs	r2, #36	; 0x24
 80064ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0201 	bic.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2220      	movs	r2, #32
 8006504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006532:	2302      	movs	r3, #2
 8006534:	e02d      	b.n	8006592 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2224      	movs	r2, #36	; 0x24
 8006542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0201 	bic.w	r2, r2, #1
 800655c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f850 	bl	8006618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d101      	bne.n	80065b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065ae:	2302      	movs	r3, #2
 80065b0:	e02d      	b.n	800660e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2224      	movs	r2, #36	; 0x24
 80065be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0201 	bic.w	r2, r2, #1
 80065d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f812 	bl	8006618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006624:	2b00      	cmp	r3, #0
 8006626:	d108      	bne.n	800663a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006638:	e031      	b.n	800669e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800663a:	2308      	movs	r3, #8
 800663c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800663e:	2308      	movs	r3, #8
 8006640:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	0e5b      	lsrs	r3, r3, #25
 800664a:	b2db      	uxtb	r3, r3
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	0f5b      	lsrs	r3, r3, #29
 800665a:	b2db      	uxtb	r3, r3
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	7b3a      	ldrb	r2, [r7, #12]
 8006666:	4911      	ldr	r1, [pc, #68]	; (80066ac <UARTEx_SetNbDataToProcess+0x94>)
 8006668:	5c8a      	ldrb	r2, [r1, r2]
 800666a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800666e:	7b3a      	ldrb	r2, [r7, #12]
 8006670:	490f      	ldr	r1, [pc, #60]	; (80066b0 <UARTEx_SetNbDataToProcess+0x98>)
 8006672:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006674:	fb93 f3f2 	sdiv	r3, r3, r2
 8006678:	b29a      	uxth	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006680:	7bfb      	ldrb	r3, [r7, #15]
 8006682:	7b7a      	ldrb	r2, [r7, #13]
 8006684:	4909      	ldr	r1, [pc, #36]	; (80066ac <UARTEx_SetNbDataToProcess+0x94>)
 8006686:	5c8a      	ldrb	r2, [r1, r2]
 8006688:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800668c:	7b7a      	ldrb	r2, [r7, #13]
 800668e:	4908      	ldr	r1, [pc, #32]	; (80066b0 <UARTEx_SetNbDataToProcess+0x98>)
 8006690:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006692:	fb93 f3f2 	sdiv	r3, r3, r2
 8006696:	b29a      	uxth	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800669e:	bf00      	nop
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	0800bc50 	.word	0x0800bc50
 80066b0:	0800bc58 	.word	0x0800bc58

080066b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80066c4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80066c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b085      	sub	sp, #20
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80066ea:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80066ee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	43db      	mvns	r3, r3
 80066fe:	b29b      	uxth	r3, r3
 8006700:	4013      	ands	r3, r2
 8006702:	b29a      	uxth	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	1d3b      	adds	r3, r7, #4
 8006722:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006754:	b480      	push	{r7}
 8006756:	b09d      	sub	sp, #116	; 0x74
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	78db      	ldrb	r3, [r3, #3]
 8006782:	2b03      	cmp	r3, #3
 8006784:	d81f      	bhi.n	80067c6 <USB_ActivateEndpoint+0x72>
 8006786:	a201      	add	r2, pc, #4	; (adr r2, 800678c <USB_ActivateEndpoint+0x38>)
 8006788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678c:	0800679d 	.word	0x0800679d
 8006790:	080067b9 	.word	0x080067b9
 8006794:	080067cf 	.word	0x080067cf
 8006798:	080067ab 	.word	0x080067ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800679c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80067a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80067a8:	e012      	b.n	80067d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80067aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80067ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80067b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80067b6:	e00b      	b.n	80067d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80067b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80067bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80067c4:	e004      	b.n	80067d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80067cc:	e000      	b.n	80067d0 <USB_ActivateEndpoint+0x7c>
      break;
 80067ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	441a      	add	r2, r3
 80067da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80067de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	b21b      	sxth	r3, r3
 8006802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680a:	b21a      	sxth	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	b21b      	sxth	r3, r3
 8006812:	4313      	orrs	r3, r2
 8006814:	b21b      	sxth	r3, r3
 8006816:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	441a      	add	r2, r3
 8006824:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006838:	b29b      	uxth	r3, r3
 800683a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	7b1b      	ldrb	r3, [r3, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f040 8178 	bne.w	8006b36 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	785b      	ldrb	r3, [r3, #1]
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 8084 	beq.w	8006958 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	61bb      	str	r3, [r7, #24]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685a:	b29b      	uxth	r3, r3
 800685c:	461a      	mov	r2, r3
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	4413      	add	r3, r2
 8006862:	61bb      	str	r3, [r7, #24]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	00da      	lsls	r2, r3, #3
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	88db      	ldrh	r3, [r3, #6]
 8006878:	085b      	lsrs	r3, r3, #1
 800687a:	b29b      	uxth	r3, r3
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	827b      	strh	r3, [r7, #18]
 8006892:	8a7b      	ldrh	r3, [r7, #18]
 8006894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01b      	beq.n	80068d4 <USB_ActivateEndpoint+0x180>
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b2:	823b      	strh	r3, [r7, #16]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	441a      	add	r2, r3
 80068be:	8a3b      	ldrh	r3, [r7, #16]
 80068c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	78db      	ldrb	r3, [r3, #3]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d020      	beq.n	800691e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f2:	81bb      	strh	r3, [r7, #12]
 80068f4:	89bb      	ldrh	r3, [r7, #12]
 80068f6:	f083 0320 	eor.w	r3, r3, #32
 80068fa:	81bb      	strh	r3, [r7, #12]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	441a      	add	r2, r3
 8006906:	89bb      	ldrh	r3, [r7, #12]
 8006908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006918:	b29b      	uxth	r3, r3
 800691a:	8013      	strh	r3, [r2, #0]
 800691c:	e2d5      	b.n	8006eca <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006934:	81fb      	strh	r3, [r7, #14]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	441a      	add	r2, r3
 8006940:	89fb      	ldrh	r3, [r7, #14]
 8006942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800694e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006952:	b29b      	uxth	r3, r3
 8006954:	8013      	strh	r3, [r2, #0]
 8006956:	e2b8      	b.n	8006eca <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	633b      	str	r3, [r7, #48]	; 0x30
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006962:	b29b      	uxth	r3, r3
 8006964:	461a      	mov	r2, r3
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	4413      	add	r3, r2
 800696a:	633b      	str	r3, [r7, #48]	; 0x30
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	00da      	lsls	r2, r3, #3
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	4413      	add	r3, r2
 8006976:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800697a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	88db      	ldrh	r3, [r3, #6]
 8006980:	085b      	lsrs	r3, r3, #1
 8006982:	b29b      	uxth	r3, r3
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006996:	b29b      	uxth	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	4413      	add	r3, r2
 800699e:	62bb      	str	r3, [r7, #40]	; 0x28
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	00da      	lsls	r2, r3, #3
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	4413      	add	r3, r2
 80069aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	801a      	strh	r2, [r3, #0]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b3e      	cmp	r3, #62	; 0x3e
 80069c6:	d91d      	bls.n	8006a04 <USB_ActivateEndpoint+0x2b0>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	095b      	lsrs	r3, r3, #5
 80069ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f003 031f 	and.w	r3, r3, #31
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d102      	bne.n	80069e2 <USB_ActivateEndpoint+0x28e>
 80069dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069de:	3b01      	subs	r3, #1
 80069e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	029b      	lsls	r3, r3, #10
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	4313      	orrs	r3, r2
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	e026      	b.n	8006a52 <USB_ActivateEndpoint+0x2fe>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10a      	bne.n	8006a22 <USB_ActivateEndpoint+0x2ce>
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	801a      	strh	r2, [r3, #0]
 8006a20:	e017      	b.n	8006a52 <USB_ActivateEndpoint+0x2fe>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <USB_ActivateEndpoint+0x2e8>
 8006a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a38:	3301      	adds	r3, #1
 8006a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	029b      	lsls	r3, r3, #10
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006a60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d01b      	beq.n	8006aa2 <USB_ActivateEndpoint+0x34e>
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a80:	843b      	strh	r3, [r7, #32]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	441a      	add	r2, r3
 8006a8c:	8c3b      	ldrh	r3, [r7, #32]
 8006a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d124      	bne.n	8006af4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac0:	83bb      	strh	r3, [r7, #28]
 8006ac2:	8bbb      	ldrh	r3, [r7, #28]
 8006ac4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ac8:	83bb      	strh	r3, [r7, #28]
 8006aca:	8bbb      	ldrh	r3, [r7, #28]
 8006acc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ad0:	83bb      	strh	r3, [r7, #28]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	441a      	add	r2, r3
 8006adc:	8bbb      	ldrh	r3, [r7, #28]
 8006ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	8013      	strh	r3, [r2, #0]
 8006af2:	e1ea      	b.n	8006eca <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0a:	83fb      	strh	r3, [r7, #30]
 8006b0c:	8bfb      	ldrh	r3, [r7, #30]
 8006b0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b12:	83fb      	strh	r3, [r7, #30]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	441a      	add	r2, r3
 8006b1e:	8bfb      	ldrh	r3, [r7, #30]
 8006b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	8013      	strh	r3, [r2, #0]
 8006b34:	e1c9      	b.n	8006eca <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	78db      	ldrb	r3, [r3, #3]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d11e      	bne.n	8006b7c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b54:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	8013      	strh	r3, [r2, #0]
 8006b7a:	e01d      	b.n	8006bb8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b92:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	441a      	add	r2, r3
 8006ba0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bc8:	4413      	add	r3, r2
 8006bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	00da      	lsls	r2, r3, #3
 8006bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bda:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	891b      	ldrh	r3, [r3, #8]
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bea:	801a      	strh	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	657b      	str	r3, [r7, #84]	; 0x54
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bfc:	4413      	add	r3, r2
 8006bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	00da      	lsls	r2, r3, #3
 8006c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c08:	4413      	add	r3, r2
 8006c0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c0e:	653b      	str	r3, [r7, #80]	; 0x50
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	895b      	ldrh	r3, [r3, #10]
 8006c14:	085b      	lsrs	r3, r3, #1
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c1e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	785b      	ldrb	r3, [r3, #1]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f040 8093 	bne.w	8006d50 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006c3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d01b      	beq.n	8006c7e <USB_ActivateEndpoint+0x52a>
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	441a      	add	r2, r3
 8006c68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006c8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d01b      	beq.n	8006cce <USB_ActivateEndpoint+0x57a>
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cac:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	441a      	add	r2, r3
 8006cb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce4:	873b      	strh	r3, [r7, #56]	; 0x38
 8006ce6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ce8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cec:	873b      	strh	r3, [r7, #56]	; 0x38
 8006cee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006cf0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006cf4:	873b      	strh	r3, [r7, #56]	; 0x38
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	441a      	add	r2, r3
 8006d00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d2c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	441a      	add	r2, r3
 8006d38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	8013      	strh	r3, [r2, #0]
 8006d4e:	e0bc      	b.n	8006eca <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006d60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d01d      	beq.n	8006da8 <USB_ActivateEndpoint+0x654>
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	441a      	add	r2, r3
 8006d90:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006db8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01d      	beq.n	8006e00 <USB_ActivateEndpoint+0x6ac>
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dda:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	441a      	add	r2, r3
 8006de8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	78db      	ldrb	r3, [r3, #3]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d024      	beq.n	8006e52 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006e22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e26:	f083 0320 	eor.w	r3, r3, #32
 8006e2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	441a      	add	r2, r3
 8006e38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	8013      	strh	r3, [r2, #0]
 8006e50:	e01d      	b.n	8006e8e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e68:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	441a      	add	r2, r3
 8006e76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	441a      	add	r2, r3
 8006eb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006eca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3774      	adds	r7, #116	; 0x74
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop

08006edc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b08d      	sub	sp, #52	; 0x34
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	7b1b      	ldrb	r3, [r3, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f040 808e 	bne.w	800700c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	785b      	ldrb	r3, [r3, #1]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d044      	beq.n	8006f82 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	81bb      	strh	r3, [r7, #12]
 8006f06:	89bb      	ldrh	r3, [r7, #12]
 8006f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01b      	beq.n	8006f48 <USB_DeactivateEndpoint+0x6c>
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f26:	817b      	strh	r3, [r7, #10]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	441a      	add	r2, r3
 8006f32:	897b      	ldrh	r3, [r7, #10]
 8006f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5e:	813b      	strh	r3, [r7, #8]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	441a      	add	r2, r3
 8006f6a:	893b      	ldrh	r3, [r7, #8]
 8006f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	8013      	strh	r3, [r2, #0]
 8006f80:	e192      	b.n	80072a8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	827b      	strh	r3, [r7, #18]
 8006f90:	8a7b      	ldrh	r3, [r7, #18]
 8006f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d01b      	beq.n	8006fd2 <USB_DeactivateEndpoint+0xf6>
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb0:	823b      	strh	r3, [r7, #16]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	441a      	add	r2, r3
 8006fbc:	8a3b      	ldrh	r3, [r7, #16]
 8006fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe8:	81fb      	strh	r3, [r7, #14]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	441a      	add	r2, r3
 8006ff4:	89fb      	ldrh	r3, [r7, #14]
 8006ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007006:	b29b      	uxth	r3, r3
 8007008:	8013      	strh	r3, [r2, #0]
 800700a:	e14d      	b.n	80072a8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	785b      	ldrb	r3, [r3, #1]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f040 80a5 	bne.w	8007160 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	843b      	strh	r3, [r7, #32]
 8007024:	8c3b      	ldrh	r3, [r7, #32]
 8007026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d01b      	beq.n	8007066 <USB_DeactivateEndpoint+0x18a>
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	b29b      	uxth	r3, r3
 800703c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007044:	83fb      	strh	r3, [r7, #30]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	441a      	add	r2, r3
 8007050:	8bfb      	ldrh	r3, [r7, #30]
 8007052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800705a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800705e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007062:	b29b      	uxth	r3, r3
 8007064:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	83bb      	strh	r3, [r7, #28]
 8007074:	8bbb      	ldrh	r3, [r7, #28]
 8007076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707a:	2b00      	cmp	r3, #0
 800707c:	d01b      	beq.n	80070b6 <USB_DeactivateEndpoint+0x1da>
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007094:	837b      	strh	r3, [r7, #26]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	441a      	add	r2, r3
 80070a0:	8b7b      	ldrh	r3, [r7, #26]
 80070a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070cc:	833b      	strh	r3, [r7, #24]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	441a      	add	r2, r3
 80070d8:	8b3b      	ldrh	r3, [r7, #24]
 80070da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007104:	82fb      	strh	r3, [r7, #22]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	441a      	add	r2, r3
 8007110:	8afb      	ldrh	r3, [r7, #22]
 8007112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800711a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800711e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007122:	b29b      	uxth	r3, r3
 8007124:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	b29b      	uxth	r3, r3
 8007134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800713c:	82bb      	strh	r3, [r7, #20]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	441a      	add	r2, r3
 8007148:	8abb      	ldrh	r3, [r7, #20]
 800714a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800714e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800715a:	b29b      	uxth	r3, r3
 800715c:	8013      	strh	r3, [r2, #0]
 800715e:	e0a3      	b.n	80072a8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800716e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d01b      	beq.n	80071b0 <USB_DeactivateEndpoint+0x2d4>
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	b29b      	uxth	r3, r3
 8007186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800718a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	441a      	add	r2, r3
 800719a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800719c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80071be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01b      	beq.n	8007200 <USB_DeactivateEndpoint+0x324>
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071de:	853b      	strh	r3, [r7, #40]	; 0x28
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	441a      	add	r2, r3
 80071ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80071ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007216:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	441a      	add	r2, r3
 8007222:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800722c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007234:	b29b      	uxth	r3, r3
 8007236:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800724a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800724e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	441a      	add	r2, r3
 800725a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800725c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726c:	b29b      	uxth	r3, r3
 800726e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	b29b      	uxth	r3, r3
 800727e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007286:	847b      	strh	r3, [r7, #34]	; 0x22
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	441a      	add	r2, r3
 8007292:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3734      	adds	r7, #52	; 0x34
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b0c2      	sub	sp, #264	; 0x108
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072c4:	6018      	str	r0, [r3, #0]
 80072c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ce:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	785b      	ldrb	r3, [r3, #1]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	f040 86b7 	bne.w	8008050 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80072e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d908      	bls.n	8007310 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80072fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800730e:	e007      	b.n	8007320 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	7b1b      	ldrb	r3, [r3, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d13a      	bne.n	80073a6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6959      	ldr	r1, [r3, #20]
 800733c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	88da      	ldrh	r2, [r3, #6]
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800734c:	b29b      	uxth	r3, r3
 800734e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007352:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007356:	6800      	ldr	r0, [r0, #0]
 8007358:	f001 fc98 	bl	8008c8c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800735c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	613b      	str	r3, [r7, #16]
 8007368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007376:	b29b      	uxth	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	4413      	add	r3, r2
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	00da      	lsls	r2, r3, #3
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	4413      	add	r3, r2
 8007392:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800739c:	b29a      	uxth	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	801a      	strh	r2, [r3, #0]
 80073a2:	f000 be1f 	b.w	8007fe4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80073a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	78db      	ldrb	r3, [r3, #3]
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	f040 8462 	bne.w	8007c7c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80073b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6a1a      	ldr	r2, [r3, #32]
 80073c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	f240 83df 	bls.w	8007b94 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80073d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	441a      	add	r2, r3
 800741a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800741e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007426:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800742a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742e:	b29b      	uxth	r3, r3
 8007430:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6a1a      	ldr	r2, [r3, #32]
 800743e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007442:	1ad2      	subs	r2, r2, r3
 8007444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800745e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	b29b      	uxth	r3, r3
 800746e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 81c7 	beq.w	8007806 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	633b      	str	r3, [r7, #48]	; 0x30
 8007484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d177      	bne.n	8007584 <USB_EPStartXfer+0x2ce>
 8007494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007498:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	62bb      	str	r3, [r7, #40]	; 0x28
 80074a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	461a      	mov	r2, r3
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	4413      	add	r3, r2
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80074b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	00da      	lsls	r2, r3, #3
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	4413      	add	r3, r2
 80074ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074da:	b29a      	uxth	r2, r3
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	801a      	strh	r2, [r3, #0]
 80074e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e4:	2b3e      	cmp	r3, #62	; 0x3e
 80074e6:	d921      	bls.n	800752c <USB_EPStartXfer+0x276>
 80074e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ec:	095b      	lsrs	r3, r3, #5
 80074ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f6:	f003 031f 	and.w	r3, r3, #31
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d104      	bne.n	8007508 <USB_EPStartXfer+0x252>
 80074fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007502:	3b01      	subs	r3, #1
 8007504:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29a      	uxth	r2, r3
 800750e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007512:	b29b      	uxth	r3, r3
 8007514:	029b      	lsls	r3, r3, #10
 8007516:	b29b      	uxth	r3, r3
 8007518:	4313      	orrs	r3, r2
 800751a:	b29b      	uxth	r3, r3
 800751c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007524:	b29a      	uxth	r2, r3
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	801a      	strh	r2, [r3, #0]
 800752a:	e050      	b.n	80075ce <USB_EPStartXfer+0x318>
 800752c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <USB_EPStartXfer+0x294>
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007542:	b29a      	uxth	r2, r3
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	801a      	strh	r2, [r3, #0]
 8007548:	e041      	b.n	80075ce <USB_EPStartXfer+0x318>
 800754a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800754e:	085b      	lsrs	r3, r3, #1
 8007550:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d004      	beq.n	800756a <USB_EPStartXfer+0x2b4>
 8007560:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007564:	3301      	adds	r3, #1
 8007566:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	b29a      	uxth	r2, r3
 8007570:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007574:	b29b      	uxth	r3, r3
 8007576:	029b      	lsls	r3, r3, #10
 8007578:	b29b      	uxth	r3, r3
 800757a:	4313      	orrs	r3, r2
 800757c:	b29a      	uxth	r2, r3
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	801a      	strh	r2, [r3, #0]
 8007582:	e024      	b.n	80075ce <USB_EPStartXfer+0x318>
 8007584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	785b      	ldrb	r3, [r3, #1]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d11c      	bne.n	80075ce <USB_EPStartXfer+0x318>
 8007594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007598:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	461a      	mov	r2, r3
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	4413      	add	r3, r2
 80075aa:	633b      	str	r3, [r7, #48]	; 0x30
 80075ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	00da      	lsls	r2, r3, #3
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	4413      	add	r3, r2
 80075be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	895b      	ldrh	r3, [r3, #10]
 80075da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6959      	ldr	r1, [r3, #20]
 80075ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80075f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80075f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80075fc:	6800      	ldr	r0, [r0, #0]
 80075fe:	f001 fb45 	bl	8008c8c <USB_WritePMA>
            ep->xfer_buff += len;
 8007602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	695a      	ldr	r2, [r3, #20]
 800760e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007612:	441a      	add	r2, r3
 8007614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6a1a      	ldr	r2, [r3, #32]
 800762c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	429a      	cmp	r2, r3
 800763a:	d90f      	bls.n	800765c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800763c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6a1a      	ldr	r2, [r3, #32]
 8007648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800764c:	1ad2      	subs	r2, r2, r3
 800764e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	621a      	str	r2, [r3, #32]
 800765a:	e00e      	b.n	800767a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800765c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800766c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2200      	movs	r2, #0
 8007678:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800767a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800767e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	785b      	ldrb	r3, [r3, #1]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d177      	bne.n	800777a <USB_EPStartXfer+0x4c4>
 800768a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	61bb      	str	r3, [r7, #24]
 8007696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	461a      	mov	r2, r3
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	4413      	add	r3, r2
 80076ac:	61bb      	str	r3, [r7, #24]
 80076ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	00da      	lsls	r2, r3, #3
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	4413      	add	r3, r2
 80076c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076c4:	617b      	str	r3, [r7, #20]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	801a      	strh	r2, [r3, #0]
 80076d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076da:	2b3e      	cmp	r3, #62	; 0x3e
 80076dc:	d921      	bls.n	8007722 <USB_EPStartXfer+0x46c>
 80076de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e2:	095b      	lsrs	r3, r3, #5
 80076e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80076e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ec:	f003 031f 	and.w	r3, r3, #31
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d104      	bne.n	80076fe <USB_EPStartXfer+0x448>
 80076f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076f8:	3b01      	subs	r3, #1
 80076fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	b29a      	uxth	r2, r3
 8007704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007708:	b29b      	uxth	r3, r3
 800770a:	029b      	lsls	r3, r3, #10
 800770c:	b29b      	uxth	r3, r3
 800770e:	4313      	orrs	r3, r2
 8007710:	b29b      	uxth	r3, r3
 8007712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800771a:	b29a      	uxth	r2, r3
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	801a      	strh	r2, [r3, #0]
 8007720:	e056      	b.n	80077d0 <USB_EPStartXfer+0x51a>
 8007722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <USB_EPStartXfer+0x48a>
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	b29b      	uxth	r3, r3
 8007730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007738:	b29a      	uxth	r2, r3
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	801a      	strh	r2, [r3, #0]
 800773e:	e047      	b.n	80077d0 <USB_EPStartXfer+0x51a>
 8007740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007744:	085b      	lsrs	r3, r3, #1
 8007746:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800774a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d004      	beq.n	8007760 <USB_EPStartXfer+0x4aa>
 8007756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800775a:	3301      	adds	r3, #1
 800775c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29a      	uxth	r2, r3
 8007766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800776a:	b29b      	uxth	r3, r3
 800776c:	029b      	lsls	r3, r3, #10
 800776e:	b29b      	uxth	r3, r3
 8007770:	4313      	orrs	r3, r2
 8007772:	b29a      	uxth	r2, r3
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	801a      	strh	r2, [r3, #0]
 8007778:	e02a      	b.n	80077d0 <USB_EPStartXfer+0x51a>
 800777a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	785b      	ldrb	r3, [r3, #1]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d122      	bne.n	80077d0 <USB_EPStartXfer+0x51a>
 800778a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800778e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	623b      	str	r3, [r7, #32]
 8007796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	461a      	mov	r2, r3
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	4413      	add	r3, r2
 80077ac:	623b      	str	r3, [r7, #32]
 80077ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	00da      	lsls	r2, r3, #3
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	4413      	add	r3, r2
 80077c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077c4:	61fb      	str	r3, [r7, #28]
 80077c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80077d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	891b      	ldrh	r3, [r3, #8]
 80077dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6959      	ldr	r1, [r3, #20]
 80077ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80077fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80077fe:	6800      	ldr	r0, [r0, #0]
 8007800:	f001 fa44 	bl	8008c8c <USB_WritePMA>
 8007804:	e3ee      	b.n	8007fe4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800780a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	785b      	ldrb	r3, [r3, #1]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d177      	bne.n	8007906 <USB_EPStartXfer+0x650>
 8007816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	64bb      	str	r3, [r7, #72]	; 0x48
 8007822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007830:	b29b      	uxth	r3, r3
 8007832:	461a      	mov	r2, r3
 8007834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007836:	4413      	add	r3, r2
 8007838:	64bb      	str	r3, [r7, #72]	; 0x48
 800783a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800783e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	00da      	lsls	r2, r3, #3
 8007848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800784a:	4413      	add	r3, r2
 800784c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007850:	647b      	str	r3, [r7, #68]	; 0x44
 8007852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800785c:	b29a      	uxth	r2, r3
 800785e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007860:	801a      	strh	r2, [r3, #0]
 8007862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007866:	2b3e      	cmp	r3, #62	; 0x3e
 8007868:	d921      	bls.n	80078ae <USB_EPStartXfer+0x5f8>
 800786a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007878:	f003 031f 	and.w	r3, r3, #31
 800787c:	2b00      	cmp	r3, #0
 800787e:	d104      	bne.n	800788a <USB_EPStartXfer+0x5d4>
 8007880:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007884:	3b01      	subs	r3, #1
 8007886:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800788a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	b29a      	uxth	r2, r3
 8007890:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007894:	b29b      	uxth	r3, r3
 8007896:	029b      	lsls	r3, r3, #10
 8007898:	b29b      	uxth	r3, r3
 800789a:	4313      	orrs	r3, r2
 800789c:	b29b      	uxth	r3, r3
 800789e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078aa:	801a      	strh	r2, [r3, #0]
 80078ac:	e056      	b.n	800795c <USB_EPStartXfer+0x6a6>
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10a      	bne.n	80078cc <USB_EPStartXfer+0x616>
 80078b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078c8:	801a      	strh	r2, [r3, #0]
 80078ca:	e047      	b.n	800795c <USB_EPStartXfer+0x6a6>
 80078cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d0:	085b      	lsrs	r3, r3, #1
 80078d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80078d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d004      	beq.n	80078ec <USB_EPStartXfer+0x636>
 80078e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078e6:	3301      	adds	r3, #1
 80078e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80078ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	029b      	lsls	r3, r3, #10
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	4313      	orrs	r3, r2
 80078fe:	b29a      	uxth	r2, r3
 8007900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007902:	801a      	strh	r2, [r3, #0]
 8007904:	e02a      	b.n	800795c <USB_EPStartXfer+0x6a6>
 8007906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d122      	bne.n	800795c <USB_EPStartXfer+0x6a6>
 8007916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	653b      	str	r3, [r7, #80]	; 0x50
 8007922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007930:	b29b      	uxth	r3, r3
 8007932:	461a      	mov	r2, r3
 8007934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007936:	4413      	add	r3, r2
 8007938:	653b      	str	r3, [r7, #80]	; 0x50
 800793a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	00da      	lsls	r2, r3, #3
 8007948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800794a:	4413      	add	r3, r2
 800794c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007950:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007956:	b29a      	uxth	r2, r3
 8007958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800795a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800795c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	891b      	ldrh	r3, [r3, #8]
 8007968:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800796c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6959      	ldr	r1, [r3, #20]
 8007978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800797c:	b29b      	uxth	r3, r3
 800797e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007982:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007986:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800798a:	6800      	ldr	r0, [r0, #0]
 800798c:	f001 f97e 	bl	8008c8c <USB_WritePMA>
            ep->xfer_buff += len;
 8007990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	695a      	ldr	r2, [r3, #20]
 800799c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a0:	441a      	add	r2, r3
 80079a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80079ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6a1a      	ldr	r2, [r3, #32]
 80079ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d90f      	bls.n	80079ea <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80079ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6a1a      	ldr	r2, [r3, #32]
 80079d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079da:	1ad2      	subs	r2, r2, r3
 80079dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	621a      	str	r2, [r3, #32]
 80079e8:	e00e      	b.n	8007a08 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80079ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80079fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2200      	movs	r2, #0
 8007a06:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	643b      	str	r3, [r7, #64]	; 0x40
 8007a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	785b      	ldrb	r3, [r3, #1]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d177      	bne.n	8007b14 <USB_EPStartXfer+0x85e>
 8007a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	461a      	mov	r2, r3
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	4413      	add	r3, r2
 8007a46:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	00da      	lsls	r2, r3, #3
 8007a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a58:	4413      	add	r3, r2
 8007a5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a6e:	801a      	strh	r2, [r3, #0]
 8007a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a74:	2b3e      	cmp	r3, #62	; 0x3e
 8007a76:	d921      	bls.n	8007abc <USB_EPStartXfer+0x806>
 8007a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a7c:	095b      	lsrs	r3, r3, #5
 8007a7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a86:	f003 031f 	and.w	r3, r3, #31
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d104      	bne.n	8007a98 <USB_EPStartXfer+0x7e2>
 8007a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a92:	3b01      	subs	r3, #1
 8007a94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	029b      	lsls	r3, r3, #10
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab8:	801a      	strh	r2, [r3, #0]
 8007aba:	e050      	b.n	8007b5e <USB_EPStartXfer+0x8a8>
 8007abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10a      	bne.n	8007ada <USB_EPStartXfer+0x824>
 8007ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad6:	801a      	strh	r2, [r3, #0]
 8007ad8:	e041      	b.n	8007b5e <USB_EPStartXfer+0x8a8>
 8007ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ade:	085b      	lsrs	r3, r3, #1
 8007ae0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d004      	beq.n	8007afa <USB_EPStartXfer+0x844>
 8007af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af4:	3301      	adds	r3, #1
 8007af6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	029b      	lsls	r3, r3, #10
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b10:	801a      	strh	r2, [r3, #0]
 8007b12:	e024      	b.n	8007b5e <USB_EPStartXfer+0x8a8>
 8007b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	785b      	ldrb	r3, [r3, #1]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d11c      	bne.n	8007b5e <USB_EPStartXfer+0x8a8>
 8007b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b38:	4413      	add	r3, r2
 8007b3a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	00da      	lsls	r2, r3, #3
 8007b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	895b      	ldrh	r3, [r3, #10]
 8007b6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6959      	ldr	r1, [r3, #20]
 8007b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007b88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b8c:	6800      	ldr	r0, [r0, #0]
 8007b8e:	f001 f87d 	bl	8008c8c <USB_WritePMA>
 8007b92:	e227      	b.n	8007fe4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bca:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	441a      	add	r2, r3
 8007be8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c20:	4413      	add	r3, r2
 8007c22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	00da      	lsls	r2, r3, #3
 8007c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c34:	4413      	add	r3, r2
 8007c36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	891b      	ldrh	r3, [r3, #8]
 8007c52:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6959      	ldr	r1, [r3, #20]
 8007c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c6c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007c70:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007c74:	6800      	ldr	r0, [r0, #0]
 8007c76:	f001 f809 	bl	8008c8c <USB_WritePMA>
 8007c7a:	e1b3      	b.n	8007fe4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6a1a      	ldr	r2, [r3, #32]
 8007c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8c:	1ad2      	subs	r2, r2, r3
 8007c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 80c6 	beq.w	8007e4e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	673b      	str	r3, [r7, #112]	; 0x70
 8007cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	785b      	ldrb	r3, [r3, #1]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d177      	bne.n	8007dce <USB_EPStartXfer+0xb18>
 8007cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cfe:	4413      	add	r3, r2
 8007d00:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	00da      	lsls	r2, r3, #3
 8007d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d12:	4413      	add	r3, r2
 8007d14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d18:	667b      	str	r3, [r7, #100]	; 0x64
 8007d1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d28:	801a      	strh	r2, [r3, #0]
 8007d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d2e:	2b3e      	cmp	r3, #62	; 0x3e
 8007d30:	d921      	bls.n	8007d76 <USB_EPStartXfer+0xac0>
 8007d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d36:	095b      	lsrs	r3, r3, #5
 8007d38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d40:	f003 031f 	and.w	r3, r3, #31
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d104      	bne.n	8007d52 <USB_EPStartXfer+0xa9c>
 8007d48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007d52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	029b      	lsls	r3, r3, #10
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	4313      	orrs	r3, r2
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d72:	801a      	strh	r2, [r3, #0]
 8007d74:	e050      	b.n	8007e18 <USB_EPStartXfer+0xb62>
 8007d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10a      	bne.n	8007d94 <USB_EPStartXfer+0xade>
 8007d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d90:	801a      	strh	r2, [r3, #0]
 8007d92:	e041      	b.n	8007e18 <USB_EPStartXfer+0xb62>
 8007d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d98:	085b      	lsrs	r3, r3, #1
 8007d9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d004      	beq.n	8007db4 <USB_EPStartXfer+0xafe>
 8007daa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007dae:	3301      	adds	r3, #1
 8007db0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	029b      	lsls	r3, r3, #10
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dca:	801a      	strh	r2, [r3, #0]
 8007dcc:	e024      	b.n	8007e18 <USB_EPStartXfer+0xb62>
 8007dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	785b      	ldrb	r3, [r3, #1]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d11c      	bne.n	8007e18 <USB_EPStartXfer+0xb62>
 8007dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	461a      	mov	r2, r3
 8007df0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007df2:	4413      	add	r3, r2
 8007df4:	673b      	str	r3, [r7, #112]	; 0x70
 8007df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	00da      	lsls	r2, r3, #3
 8007e04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e06:	4413      	add	r3, r2
 8007e08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	895b      	ldrh	r3, [r3, #10]
 8007e24:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6959      	ldr	r1, [r3, #20]
 8007e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e3e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007e42:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007e46:	6800      	ldr	r0, [r0, #0]
 8007e48:	f000 ff20 	bl	8008c8c <USB_WritePMA>
 8007e4c:	e0ca      	b.n	8007fe4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	785b      	ldrb	r3, [r3, #1]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d177      	bne.n	8007f4e <USB_EPStartXfer+0xc98>
 8007e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e7e:	4413      	add	r3, r2
 8007e80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	00da      	lsls	r2, r3, #3
 8007e90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e92:	4413      	add	r3, r2
 8007e94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e98:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ea8:	801a      	strh	r2, [r3, #0]
 8007eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eae:	2b3e      	cmp	r3, #62	; 0x3e
 8007eb0:	d921      	bls.n	8007ef6 <USB_EPStartXfer+0xc40>
 8007eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb6:	095b      	lsrs	r3, r3, #5
 8007eb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ec0:	f003 031f 	and.w	r3, r3, #31
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d104      	bne.n	8007ed2 <USB_EPStartXfer+0xc1c>
 8007ec8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	029b      	lsls	r3, r3, #10
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ef2:	801a      	strh	r2, [r3, #0]
 8007ef4:	e05c      	b.n	8007fb0 <USB_EPStartXfer+0xcfa>
 8007ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10a      	bne.n	8007f14 <USB_EPStartXfer+0xc5e>
 8007efe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f10:	801a      	strh	r2, [r3, #0]
 8007f12:	e04d      	b.n	8007fb0 <USB_EPStartXfer+0xcfa>
 8007f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f18:	085b      	lsrs	r3, r3, #1
 8007f1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d004      	beq.n	8007f34 <USB_EPStartXfer+0xc7e>
 8007f2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f2e:	3301      	adds	r3, #1
 8007f30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	029b      	lsls	r3, r3, #10
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	4313      	orrs	r3, r2
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f4a:	801a      	strh	r2, [r3, #0]
 8007f4c:	e030      	b.n	8007fb0 <USB_EPStartXfer+0xcfa>
 8007f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	785b      	ldrb	r3, [r3, #1]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d128      	bne.n	8007fb0 <USB_EPStartXfer+0xcfa>
 8007f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f82:	4413      	add	r3, r2
 8007f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	00da      	lsls	r2, r3, #3
 8007f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	891b      	ldrh	r3, [r3, #8]
 8007fbc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6959      	ldr	r1, [r3, #20]
 8007fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007fd6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007fda:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007fde:	6800      	ldr	r0, [r0, #0]
 8007fe0:	f000 fe54 	bl	8008c8c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	b29b      	uxth	r3, r3
 8008002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800800a:	817b      	strh	r3, [r7, #10]
 800800c:	897b      	ldrh	r3, [r7, #10]
 800800e:	f083 0310 	eor.w	r3, r3, #16
 8008012:	817b      	strh	r3, [r7, #10]
 8008014:	897b      	ldrh	r3, [r7, #10]
 8008016:	f083 0320 	eor.w	r3, r3, #32
 800801a:	817b      	strh	r3, [r7, #10]
 800801c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800802a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	441a      	add	r2, r3
 8008036:	897b      	ldrh	r3, [r7, #10]
 8008038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800803c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008048:	b29b      	uxth	r3, r3
 800804a:	8013      	strh	r3, [r2, #0]
 800804c:	f000 bcde 	b.w	8008a0c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	7b1b      	ldrb	r3, [r3, #12]
 800805c:	2b00      	cmp	r3, #0
 800805e:	f040 80bb 	bne.w	80081d8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	699a      	ldr	r2, [r3, #24]
 800806e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	429a      	cmp	r2, r3
 800807c:	d917      	bls.n	80080ae <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800807e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800808e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	699a      	ldr	r2, [r3, #24]
 800809a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	619a      	str	r2, [r3, #24]
 80080ac:	e00e      	b.n	80080cc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80080ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80080be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2200      	movs	r2, #0
 80080ca:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80080cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	461a      	mov	r2, r3
 80080ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080f0:	4413      	add	r3, r2
 80080f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	00da      	lsls	r2, r3, #3
 8008104:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008108:	4413      	add	r3, r2
 800810a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800810e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	b29b      	uxth	r3, r3
 800811a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800811e:	b29a      	uxth	r2, r3
 8008120:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008124:	801a      	strh	r2, [r3, #0]
 8008126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800812a:	2b3e      	cmp	r3, #62	; 0x3e
 800812c:	d924      	bls.n	8008178 <USB_EPStartXfer+0xec2>
 800812e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008132:	095b      	lsrs	r3, r3, #5
 8008134:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800813c:	f003 031f 	and.w	r3, r3, #31
 8008140:	2b00      	cmp	r3, #0
 8008142:	d104      	bne.n	800814e <USB_EPStartXfer+0xe98>
 8008144:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008148:	3b01      	subs	r3, #1
 800814a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800814e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	b29a      	uxth	r2, r3
 8008156:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800815a:	b29b      	uxth	r3, r3
 800815c:	029b      	lsls	r3, r3, #10
 800815e:	b29b      	uxth	r3, r3
 8008160:	4313      	orrs	r3, r2
 8008162:	b29b      	uxth	r3, r3
 8008164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800816c:	b29a      	uxth	r2, r3
 800816e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008172:	801a      	strh	r2, [r3, #0]
 8008174:	f000 bc10 	b.w	8008998 <USB_EPStartXfer+0x16e2>
 8008178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10c      	bne.n	800819a <USB_EPStartXfer+0xee4>
 8008180:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	b29b      	uxth	r3, r3
 8008188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800818c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008190:	b29a      	uxth	r2, r3
 8008192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008196:	801a      	strh	r2, [r3, #0]
 8008198:	e3fe      	b.n	8008998 <USB_EPStartXfer+0x16e2>
 800819a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800819e:	085b      	lsrs	r3, r3, #1
 80081a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d004      	beq.n	80081ba <USB_EPStartXfer+0xf04>
 80081b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081b4:	3301      	adds	r3, #1
 80081b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	029b      	lsls	r3, r3, #10
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	4313      	orrs	r3, r2
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081d4:	801a      	strh	r2, [r3, #0]
 80081d6:	e3df      	b.n	8008998 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80081d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	78db      	ldrb	r3, [r3, #3]
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	f040 8218 	bne.w	800861a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80081ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	785b      	ldrb	r3, [r3, #1]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f040 809d 	bne.w	8008336 <USB_EPStartXfer+0x1080>
 80081fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800820a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800820e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008218:	b29b      	uxth	r3, r3
 800821a:	461a      	mov	r2, r3
 800821c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008220:	4413      	add	r3, r2
 8008222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800822a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	00da      	lsls	r2, r3, #3
 8008234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008238:	4413      	add	r3, r2
 800823a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800823e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800824e:	b29a      	uxth	r2, r3
 8008250:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008254:	801a      	strh	r2, [r3, #0]
 8008256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800825a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	2b3e      	cmp	r3, #62	; 0x3e
 8008264:	d92b      	bls.n	80082be <USB_EPStartXfer+0x1008>
 8008266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800826a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	095b      	lsrs	r3, r3, #5
 8008274:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	f003 031f 	and.w	r3, r3, #31
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <USB_EPStartXfer+0xfe0>
 800828c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008290:	3b01      	subs	r3, #1
 8008292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008296:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	b29a      	uxth	r2, r3
 800829e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	029b      	lsls	r3, r3, #10
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	4313      	orrs	r3, r2
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082ba:	801a      	strh	r2, [r3, #0]
 80082bc:	e070      	b.n	80083a0 <USB_EPStartXfer+0x10ea>
 80082be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10c      	bne.n	80082e8 <USB_EPStartXfer+0x1032>
 80082ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082de:	b29a      	uxth	r2, r3
 80082e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082e4:	801a      	strh	r2, [r3, #0]
 80082e6:	e05b      	b.n	80083a0 <USB_EPStartXfer+0x10ea>
 80082e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	085b      	lsrs	r3, r3, #1
 80082f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b00      	cmp	r3, #0
 800830c:	d004      	beq.n	8008318 <USB_EPStartXfer+0x1062>
 800830e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008312:	3301      	adds	r3, #1
 8008314:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	b29a      	uxth	r2, r3
 8008320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008324:	b29b      	uxth	r3, r3
 8008326:	029b      	lsls	r3, r3, #10
 8008328:	b29b      	uxth	r3, r3
 800832a:	4313      	orrs	r3, r2
 800832c:	b29a      	uxth	r2, r3
 800832e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008332:	801a      	strh	r2, [r3, #0]
 8008334:	e034      	b.n	80083a0 <USB_EPStartXfer+0x10ea>
 8008336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800833a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	785b      	ldrb	r3, [r3, #1]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d12c      	bne.n	80083a0 <USB_EPStartXfer+0x10ea>
 8008346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800834a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008358:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008362:	b29b      	uxth	r3, r3
 8008364:	461a      	mov	r2, r3
 8008366:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800836a:	4413      	add	r3, r2
 800836c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	00da      	lsls	r2, r3, #3
 800837e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008382:	4413      	add	r3, r2
 8008384:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008388:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800838c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	b29a      	uxth	r2, r3
 800839a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800839e:	801a      	strh	r2, [r3, #0]
 80083a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80083ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	785b      	ldrb	r3, [r3, #1]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f040 809d 	bne.w	80084fa <USB_EPStartXfer+0x1244>
 80083c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083dc:	b29b      	uxth	r3, r3
 80083de:	461a      	mov	r2, r3
 80083e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083e4:	4413      	add	r3, r2
 80083e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	00da      	lsls	r2, r3, #3
 80083f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083fc:	4413      	add	r3, r2
 80083fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008402:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008406:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	b29b      	uxth	r3, r3
 800840e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008412:	b29a      	uxth	r2, r3
 8008414:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008418:	801a      	strh	r2, [r3, #0]
 800841a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800841e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b3e      	cmp	r3, #62	; 0x3e
 8008428:	d92b      	bls.n	8008482 <USB_EPStartXfer+0x11cc>
 800842a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800842e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	095b      	lsrs	r3, r3, #5
 8008438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800843c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	f003 031f 	and.w	r3, r3, #31
 800844c:	2b00      	cmp	r3, #0
 800844e:	d104      	bne.n	800845a <USB_EPStartXfer+0x11a4>
 8008450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008454:	3b01      	subs	r3, #1
 8008456:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800845a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29a      	uxth	r2, r3
 8008462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008466:	b29b      	uxth	r3, r3
 8008468:	029b      	lsls	r3, r3, #10
 800846a:	b29b      	uxth	r3, r3
 800846c:	4313      	orrs	r3, r2
 800846e:	b29b      	uxth	r3, r3
 8008470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008478:	b29a      	uxth	r2, r3
 800847a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800847e:	801a      	strh	r2, [r3, #0]
 8008480:	e069      	b.n	8008556 <USB_EPStartXfer+0x12a0>
 8008482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10c      	bne.n	80084ac <USB_EPStartXfer+0x11f6>
 8008492:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	b29b      	uxth	r3, r3
 800849a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800849e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084a8:	801a      	strh	r2, [r3, #0]
 80084aa:	e054      	b.n	8008556 <USB_EPStartXfer+0x12a0>
 80084ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	085b      	lsrs	r3, r3, #1
 80084ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d004      	beq.n	80084dc <USB_EPStartXfer+0x1226>
 80084d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084d6:	3301      	adds	r3, #1
 80084d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	029b      	lsls	r3, r3, #10
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	4313      	orrs	r3, r2
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084f6:	801a      	strh	r2, [r3, #0]
 80084f8:	e02d      	b.n	8008556 <USB_EPStartXfer+0x12a0>
 80084fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	785b      	ldrb	r3, [r3, #1]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d125      	bne.n	8008556 <USB_EPStartXfer+0x12a0>
 800850a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008518:	b29b      	uxth	r3, r3
 800851a:	461a      	mov	r2, r3
 800851c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008520:	4413      	add	r3, r2
 8008522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800852a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	00da      	lsls	r2, r3, #3
 8008534:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008538:	4413      	add	r3, r2
 800853a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800853e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	b29a      	uxth	r2, r3
 8008550:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008554:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 8218 	beq.w	8008998 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800856c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008588:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800858c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d005      	beq.n	80085a0 <USB_EPStartXfer+0x12ea>
 8008594:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10d      	bne.n	80085bc <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80085a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80085a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f040 81f5 	bne.w	8008998 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80085ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80085b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f040 81ee 	bne.w	8008998 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80085bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4413      	add	r3, r2
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80085e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	441a      	add	r2, r3
 8008600:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800860c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008610:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008614:	b29b      	uxth	r3, r3
 8008616:	8013      	strh	r3, [r2, #0]
 8008618:	e1be      	b.n	8008998 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800861a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800861e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	78db      	ldrb	r3, [r3, #3]
 8008626:	2b01      	cmp	r3, #1
 8008628:	f040 81b4 	bne.w	8008994 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800862c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	699a      	ldr	r2, [r3, #24]
 8008638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800863c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	429a      	cmp	r2, r3
 8008646:	d917      	bls.n	8008678 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800864c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800865c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	699a      	ldr	r2, [r3, #24]
 8008664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008668:	1ad2      	subs	r2, r2, r3
 800866a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	619a      	str	r2, [r3, #24]
 8008676:	e00e      	b.n	8008696 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800867c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2200      	movs	r2, #0
 8008694:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800869a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	785b      	ldrb	r3, [r3, #1]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f040 8085 	bne.w	80087b2 <USB_EPStartXfer+0x14fc>
 80086a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	461a      	mov	r2, r3
 80086c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80086cc:	4413      	add	r3, r2
 80086ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	00da      	lsls	r2, r3, #3
 80086e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80086e4:	4413      	add	r3, r2
 80086e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80086ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008700:	801a      	strh	r2, [r3, #0]
 8008702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008706:	2b3e      	cmp	r3, #62	; 0x3e
 8008708:	d923      	bls.n	8008752 <USB_EPStartXfer+0x149c>
 800870a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800870e:	095b      	lsrs	r3, r3, #5
 8008710:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008718:	f003 031f 	and.w	r3, r3, #31
 800871c:	2b00      	cmp	r3, #0
 800871e:	d104      	bne.n	800872a <USB_EPStartXfer+0x1474>
 8008720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008724:	3b01      	subs	r3, #1
 8008726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800872a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800872e:	881b      	ldrh	r3, [r3, #0]
 8008730:	b29a      	uxth	r2, r3
 8008732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008736:	b29b      	uxth	r3, r3
 8008738:	029b      	lsls	r3, r3, #10
 800873a:	b29b      	uxth	r3, r3
 800873c:	4313      	orrs	r3, r2
 800873e:	b29b      	uxth	r3, r3
 8008740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008748:	b29a      	uxth	r2, r3
 800874a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800874e:	801a      	strh	r2, [r3, #0]
 8008750:	e060      	b.n	8008814 <USB_EPStartXfer+0x155e>
 8008752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10c      	bne.n	8008774 <USB_EPStartXfer+0x14be>
 800875a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	b29b      	uxth	r3, r3
 8008762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800876a:	b29a      	uxth	r2, r3
 800876c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008770:	801a      	strh	r2, [r3, #0]
 8008772:	e04f      	b.n	8008814 <USB_EPStartXfer+0x155e>
 8008774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008778:	085b      	lsrs	r3, r3, #1
 800877a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800877e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b00      	cmp	r3, #0
 8008788:	d004      	beq.n	8008794 <USB_EPStartXfer+0x14de>
 800878a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800878e:	3301      	adds	r3, #1
 8008790:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008794:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008798:	881b      	ldrh	r3, [r3, #0]
 800879a:	b29a      	uxth	r2, r3
 800879c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	029b      	lsls	r3, r3, #10
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	4313      	orrs	r3, r2
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087ae:	801a      	strh	r2, [r3, #0]
 80087b0:	e030      	b.n	8008814 <USB_EPStartXfer+0x155e>
 80087b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	785b      	ldrb	r3, [r3, #1]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d128      	bne.n	8008814 <USB_EPStartXfer+0x155e>
 80087c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80087d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087de:	b29b      	uxth	r3, r3
 80087e0:	461a      	mov	r2, r3
 80087e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087e6:	4413      	add	r3, r2
 80087e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80087ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	00da      	lsls	r2, r3, #3
 80087fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087fe:	4413      	add	r3, r2
 8008800:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800880c:	b29a      	uxth	r2, r3
 800880e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008812:	801a      	strh	r2, [r3, #0]
 8008814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008818:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	785b      	ldrb	r3, [r3, #1]
 800882e:	2b00      	cmp	r3, #0
 8008830:	f040 8085 	bne.w	800893e <USB_EPStartXfer+0x1688>
 8008834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008838:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008846:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008850:	b29b      	uxth	r3, r3
 8008852:	461a      	mov	r2, r3
 8008854:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008858:	4413      	add	r3, r2
 800885a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800885e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	00da      	lsls	r2, r3, #3
 800886c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008870:	4413      	add	r3, r2
 8008872:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008876:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800887a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	b29b      	uxth	r3, r3
 8008882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008886:	b29a      	uxth	r2, r3
 8008888:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800888c:	801a      	strh	r2, [r3, #0]
 800888e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008892:	2b3e      	cmp	r3, #62	; 0x3e
 8008894:	d923      	bls.n	80088de <USB_EPStartXfer+0x1628>
 8008896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800889a:	095b      	lsrs	r3, r3, #5
 800889c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088a4:	f003 031f 	and.w	r3, r3, #31
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d104      	bne.n	80088b6 <USB_EPStartXfer+0x1600>
 80088ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088b0:	3b01      	subs	r3, #1
 80088b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	b29a      	uxth	r2, r3
 80088be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	029b      	lsls	r3, r3, #10
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	4313      	orrs	r3, r2
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088da:	801a      	strh	r2, [r3, #0]
 80088dc:	e05c      	b.n	8008998 <USB_EPStartXfer+0x16e2>
 80088de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10c      	bne.n	8008900 <USB_EPStartXfer+0x164a>
 80088e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088fc:	801a      	strh	r2, [r3, #0]
 80088fe:	e04b      	b.n	8008998 <USB_EPStartXfer+0x16e2>
 8008900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008904:	085b      	lsrs	r3, r3, #1
 8008906:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800890a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d004      	beq.n	8008920 <USB_EPStartXfer+0x166a>
 8008916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800891a:	3301      	adds	r3, #1
 800891c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008920:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	b29a      	uxth	r2, r3
 8008928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800892c:	b29b      	uxth	r3, r3
 800892e:	029b      	lsls	r3, r3, #10
 8008930:	b29b      	uxth	r3, r3
 8008932:	4313      	orrs	r3, r2
 8008934:	b29a      	uxth	r2, r3
 8008936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800893a:	801a      	strh	r2, [r3, #0]
 800893c:	e02c      	b.n	8008998 <USB_EPStartXfer+0x16e2>
 800893e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	785b      	ldrb	r3, [r3, #1]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d124      	bne.n	8008998 <USB_EPStartXfer+0x16e2>
 800894e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800895c:	b29b      	uxth	r3, r3
 800895e:	461a      	mov	r2, r3
 8008960:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008964:	4413      	add	r3, r2
 8008966:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800896a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	00da      	lsls	r2, r3, #3
 8008978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800897c:	4413      	add	r3, r2
 800897e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008982:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800898a:	b29a      	uxth	r2, r3
 800898c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008990:	801a      	strh	r2, [r3, #0]
 8008992:	e001      	b.n	8008998 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e03a      	b.n	8008a0e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800899c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80089c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80089c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80089ca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80089ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80089d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80089d6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80089da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	441a      	add	r2, r3
 80089f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80089f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	785b      	ldrb	r3, [r3, #1]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d020      	beq.n	8008a6c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a40:	81bb      	strh	r3, [r7, #12]
 8008a42:	89bb      	ldrh	r3, [r7, #12]
 8008a44:	f083 0310 	eor.w	r3, r3, #16
 8008a48:	81bb      	strh	r3, [r7, #12]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	441a      	add	r2, r3
 8008a54:	89bb      	ldrh	r3, [r7, #12]
 8008a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	8013      	strh	r3, [r2, #0]
 8008a6a:	e01f      	b.n	8008aac <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a82:	81fb      	strh	r3, [r7, #14]
 8008a84:	89fb      	ldrh	r3, [r7, #14]
 8008a86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a8a:	81fb      	strh	r3, [r7, #14]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	441a      	add	r2, r3
 8008a96:	89fb      	ldrh	r3, [r7, #14]
 8008a98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b087      	sub	sp, #28
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	7b1b      	ldrb	r3, [r3, #12]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f040 809d 	bne.w	8008c08 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	785b      	ldrb	r3, [r3, #1]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d04c      	beq.n	8008b70 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	823b      	strh	r3, [r7, #16]
 8008ae4:	8a3b      	ldrh	r3, [r7, #16]
 8008ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d01b      	beq.n	8008b26 <USB_EPClearStall+0x6c>
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4413      	add	r3, r2
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b04:	81fb      	strh	r3, [r7, #14]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	441a      	add	r2, r3
 8008b10:	89fb      	ldrh	r3, [r7, #14]
 8008b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	78db      	ldrb	r3, [r3, #3]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d06c      	beq.n	8008c08 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	881b      	ldrh	r3, [r3, #0]
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b44:	81bb      	strh	r3, [r7, #12]
 8008b46:	89bb      	ldrh	r3, [r7, #12]
 8008b48:	f083 0320 	eor.w	r3, r3, #32
 8008b4c:	81bb      	strh	r3, [r7, #12]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	441a      	add	r2, r3
 8008b58:	89bb      	ldrh	r3, [r7, #12]
 8008b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	8013      	strh	r3, [r2, #0]
 8008b6e:	e04b      	b.n	8008c08 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	82fb      	strh	r3, [r7, #22]
 8008b7e:	8afb      	ldrh	r3, [r7, #22]
 8008b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d01b      	beq.n	8008bc0 <USB_EPClearStall+0x106>
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9e:	82bb      	strh	r3, [r7, #20]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	441a      	add	r2, r3
 8008baa:	8abb      	ldrh	r3, [r7, #20]
 8008bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd6:	827b      	strh	r3, [r7, #18]
 8008bd8:	8a7b      	ldrh	r3, [r7, #18]
 8008bda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bde:	827b      	strh	r3, [r7, #18]
 8008be0:	8a7b      	ldrh	r3, [r7, #18]
 8008be2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008be6:	827b      	strh	r3, [r7, #18]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	441a      	add	r2, r3
 8008bf2:	8a7b      	ldrh	r3, [r7, #18]
 8008bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	371c      	adds	r7, #28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008c16:	b480      	push	{r7}
 8008c18:	b083      	sub	sp, #12
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008c22:	78fb      	ldrb	r3, [r7, #3]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d103      	bne.n	8008c30 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2280      	movs	r2, #128	; 0x80
 8008c2c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b083      	sub	sp, #12
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b08b      	sub	sp, #44	; 0x2c
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	4611      	mov	r1, r2
 8008c98:	461a      	mov	r2, r3
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	80fb      	strh	r3, [r7, #6]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008ca2:	88bb      	ldrh	r3, [r7, #4]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	085b      	lsrs	r3, r3, #1
 8008ca8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008cb2:	88fa      	ldrh	r2, [r7, #6]
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cbc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8008cc2:	e01b      	b.n	8008cfc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	021b      	lsls	r3, r3, #8
 8008cd2:	b21a      	sxth	r2, r3
 8008cd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	b21b      	sxth	r3, r3
 8008cdc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008cde:	6a3b      	ldr	r3, [r7, #32]
 8008ce0:	8a7a      	ldrh	r2, [r7, #18]
 8008ce2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	3302      	adds	r3, #2
 8008ce8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	3301      	adds	r3, #1
 8008cee:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1e0      	bne.n	8008cc4 <USB_WritePMA+0x38>
  }
}
 8008d02:	bf00      	nop
 8008d04:	bf00      	nop
 8008d06:	372c      	adds	r7, #44	; 0x2c
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b08b      	sub	sp, #44	; 0x2c
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	460b      	mov	r3, r1
 8008d20:	80fb      	strh	r3, [r7, #6]
 8008d22:	4613      	mov	r3, r2
 8008d24:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008d26:	88bb      	ldrh	r3, [r7, #4]
 8008d28:	085b      	lsrs	r3, r3, #1
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d36:	88fa      	ldrh	r2, [r7, #6]
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d40:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	627b      	str	r3, [r7, #36]	; 0x24
 8008d46:	e018      	b.n	8008d7a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	3302      	adds	r3, #2
 8008d54:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	3301      	adds	r3, #1
 8008d62:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	0a1b      	lsrs	r3, r3, #8
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	3301      	adds	r3, #1
 8008d72:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	3b01      	subs	r3, #1
 8008d78:	627b      	str	r3, [r7, #36]	; 0x24
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e3      	bne.n	8008d48 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008d80:	88bb      	ldrh	r3, [r7, #4]
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d007      	beq.n	8008d9c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	701a      	strb	r2, [r3, #0]
  }
}
 8008d9c:	bf00      	nop
 8008d9e:	372c      	adds	r7, #44	; 0x2c
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008db4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008db8:	f002 f9e6 	bl	800b188 <USBD_static_malloc>
 8008dbc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d105      	bne.n	8008dd0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008dcc:	2302      	movs	r3, #2
 8008dce:	e066      	b.n	8008e9e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	7c1b      	ldrb	r3, [r3, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d119      	bne.n	8008e14 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008de4:	2202      	movs	r2, #2
 8008de6:	2181      	movs	r1, #129	; 0x81
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f002 f874 	bl	800aed6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008df8:	2202      	movs	r2, #2
 8008dfa:	2101      	movs	r1, #1
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f002 f86a 	bl	800aed6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2210      	movs	r2, #16
 8008e0e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008e12:	e016      	b.n	8008e42 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008e14:	2340      	movs	r3, #64	; 0x40
 8008e16:	2202      	movs	r2, #2
 8008e18:	2181      	movs	r1, #129	; 0x81
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f002 f85b 	bl	800aed6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008e26:	2340      	movs	r3, #64	; 0x40
 8008e28:	2202      	movs	r2, #2
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f002 f852 	bl	800aed6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2210      	movs	r2, #16
 8008e3e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008e42:	2308      	movs	r3, #8
 8008e44:	2203      	movs	r2, #3
 8008e46:	2182      	movs	r1, #130	; 0x82
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f002 f844 	bl	800aed6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	7c1b      	ldrb	r3, [r3, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d109      	bne.n	8008e8c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e82:	2101      	movs	r1, #1
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f002 f915 	bl	800b0b4 <USBD_LL_PrepareReceive>
 8008e8a:	e007      	b.n	8008e9c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e92:	2340      	movs	r3, #64	; 0x40
 8008e94:	2101      	movs	r1, #1
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f002 f90c 	bl	800b0b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	460b      	mov	r3, r1
 8008eb0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008eb2:	2181      	movs	r1, #129	; 0x81
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f002 f834 	bl	800af22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f002 f82d 	bl	800af22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008ed0:	2182      	movs	r1, #130	; 0x82
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f002 f825 	bl	800af22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00e      	beq.n	8008f10 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f02:	4618      	mov	r0, r3
 8008f04:	f002 f94e 	bl	800b1a4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
	...

08008f1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008f32:	2300      	movs	r3, #0
 8008f34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e0af      	b.n	80090a4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d03f      	beq.n	8008fd0 <USBD_CDC_Setup+0xb4>
 8008f50:	2b20      	cmp	r3, #32
 8008f52:	f040 809f 	bne.w	8009094 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	88db      	ldrh	r3, [r3, #6]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d02e      	beq.n	8008fbc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	b25b      	sxtb	r3, r3
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	da16      	bge.n	8008f96 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008f74:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	88d2      	ldrh	r2, [r2, #6]
 8008f7a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	88db      	ldrh	r3, [r3, #6]
 8008f80:	2b07      	cmp	r3, #7
 8008f82:	bf28      	it	cs
 8008f84:	2307      	movcs	r3, #7
 8008f86:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	89fa      	ldrh	r2, [r7, #14]
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f001 fa9f 	bl	800a4d2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008f94:	e085      	b.n	80090a2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	785a      	ldrb	r2, [r3, #1]
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	88db      	ldrh	r3, [r3, #6]
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008fac:	6939      	ldr	r1, [r7, #16]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	88db      	ldrh	r3, [r3, #6]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f001 fab8 	bl	800a52a <USBD_CtlPrepareRx>
      break;
 8008fba:	e072      	b.n	80090a2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	7850      	ldrb	r0, [r2, #1]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	4798      	blx	r3
      break;
 8008fce:	e068      	b.n	80090a2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	785b      	ldrb	r3, [r3, #1]
 8008fd4:	2b0b      	cmp	r3, #11
 8008fd6:	d852      	bhi.n	800907e <USBD_CDC_Setup+0x162>
 8008fd8:	a201      	add	r2, pc, #4	; (adr r2, 8008fe0 <USBD_CDC_Setup+0xc4>)
 8008fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fde:	bf00      	nop
 8008fe0:	08009011 	.word	0x08009011
 8008fe4:	0800908d 	.word	0x0800908d
 8008fe8:	0800907f 	.word	0x0800907f
 8008fec:	0800907f 	.word	0x0800907f
 8008ff0:	0800907f 	.word	0x0800907f
 8008ff4:	0800907f 	.word	0x0800907f
 8008ff8:	0800907f 	.word	0x0800907f
 8008ffc:	0800907f 	.word	0x0800907f
 8009000:	0800907f 	.word	0x0800907f
 8009004:	0800907f 	.word	0x0800907f
 8009008:	0800903b 	.word	0x0800903b
 800900c:	08009065 	.word	0x08009065
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b03      	cmp	r3, #3
 800901a:	d107      	bne.n	800902c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800901c:	f107 030a 	add.w	r3, r7, #10
 8009020:	2202      	movs	r2, #2
 8009022:	4619      	mov	r1, r3
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f001 fa54 	bl	800a4d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800902a:	e032      	b.n	8009092 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 f9de 	bl	800a3f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009034:	2303      	movs	r3, #3
 8009036:	75fb      	strb	r3, [r7, #23]
          break;
 8009038:	e02b      	b.n	8009092 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b03      	cmp	r3, #3
 8009044:	d107      	bne.n	8009056 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009046:	f107 030d 	add.w	r3, r7, #13
 800904a:	2201      	movs	r2, #1
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f001 fa3f 	bl	800a4d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009054:	e01d      	b.n	8009092 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f001 f9c9 	bl	800a3f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800905e:	2303      	movs	r3, #3
 8009060:	75fb      	strb	r3, [r7, #23]
          break;
 8009062:	e016      	b.n	8009092 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b03      	cmp	r3, #3
 800906e:	d00f      	beq.n	8009090 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f001 f9bc 	bl	800a3f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009078:	2303      	movs	r3, #3
 800907a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800907c:	e008      	b.n	8009090 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f001 f9b5 	bl	800a3f0 <USBD_CtlError>
          ret = USBD_FAIL;
 8009086:	2303      	movs	r3, #3
 8009088:	75fb      	strb	r3, [r7, #23]
          break;
 800908a:	e002      	b.n	8009092 <USBD_CDC_Setup+0x176>
          break;
 800908c:	bf00      	nop
 800908e:	e008      	b.n	80090a2 <USBD_CDC_Setup+0x186>
          break;
 8009090:	bf00      	nop
      }
      break;
 8009092:	e006      	b.n	80090a2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f001 f9aa 	bl	800a3f0 <USBD_CtlError>
      ret = USBD_FAIL;
 800909c:	2303      	movs	r3, #3
 800909e:	75fb      	strb	r3, [r7, #23]
      break;
 80090a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3718      	adds	r7, #24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e04f      	b.n	800916e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80090d6:	78fa      	ldrb	r2, [r7, #3]
 80090d8:	6879      	ldr	r1, [r7, #4]
 80090da:	4613      	mov	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	440b      	add	r3, r1
 80090e4:	3318      	adds	r3, #24
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d029      	beq.n	8009140 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80090ec:	78fa      	ldrb	r2, [r7, #3]
 80090ee:	6879      	ldr	r1, [r7, #4]
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	440b      	add	r3, r1
 80090fa:	3318      	adds	r3, #24
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	78f9      	ldrb	r1, [r7, #3]
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	460b      	mov	r3, r1
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	440b      	add	r3, r1
 8009108:	00db      	lsls	r3, r3, #3
 800910a:	4403      	add	r3, r0
 800910c:	3320      	adds	r3, #32
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	fbb2 f1f3 	udiv	r1, r2, r3
 8009114:	fb01 f303 	mul.w	r3, r1, r3
 8009118:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800911a:	2b00      	cmp	r3, #0
 800911c:	d110      	bne.n	8009140 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800911e:	78fa      	ldrb	r2, [r7, #3]
 8009120:	6879      	ldr	r1, [r7, #4]
 8009122:	4613      	mov	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4413      	add	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	440b      	add	r3, r1
 800912c:	3318      	adds	r3, #24
 800912e:	2200      	movs	r2, #0
 8009130:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009132:	78f9      	ldrb	r1, [r7, #3]
 8009134:	2300      	movs	r3, #0
 8009136:	2200      	movs	r2, #0
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f001 ff9a 	bl	800b072 <USBD_LL_Transmit>
 800913e:	e015      	b.n	800916c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00b      	beq.n	800916c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009168:	78fa      	ldrb	r2, [r7, #3]
 800916a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b084      	sub	sp, #16
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	460b      	mov	r3, r1
 8009180:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009188:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009194:	2303      	movs	r3, #3
 8009196:	e015      	b.n	80091c4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009198:	78fb      	ldrb	r3, [r7, #3]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f001 ffaa 	bl	800b0f6 <USBD_LL_GetRxDataSize>
 80091a2:	4602      	mov	r2, r0
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80091be:	4611      	mov	r1, r2
 80091c0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e01b      	b.n	800921e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d015      	beq.n	800921c <USBD_CDC_EP0_RxReady+0x50>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80091f6:	2bff      	cmp	r3, #255	; 0xff
 80091f8:	d010      	beq.n	800921c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009208:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009210:	b292      	uxth	r2, r2
 8009212:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	22ff      	movs	r2, #255	; 0xff
 8009218:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2243      	movs	r2, #67	; 0x43
 8009234:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009236:	4b03      	ldr	r3, [pc, #12]	; (8009244 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	20000094 	.word	0x20000094

08009248 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2243      	movs	r2, #67	; 0x43
 8009254:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009256:	4b03      	ldr	r3, [pc, #12]	; (8009264 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009258:	4618      	mov	r0, r3
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr
 8009264:	20000050 	.word	0x20000050

08009268 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2243      	movs	r2, #67	; 0x43
 8009274:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009276:	4b03      	ldr	r3, [pc, #12]	; (8009284 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009278:	4618      	mov	r0, r3
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	200000d8 	.word	0x200000d8

08009288 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	220a      	movs	r2, #10
 8009294:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009296:	4b03      	ldr	r3, [pc, #12]	; (80092a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009298:	4618      	mov	r0, r3
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	2000000c 	.word	0x2000000c

080092a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e004      	b.n	80092c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b087      	sub	sp, #28
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	60b9      	str	r1, [r7, #8]
 80092dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e008      	b.n	8009302 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	371c      	adds	r7, #28
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800930e:	b480      	push	{r7}
 8009310:	b085      	sub	sp, #20
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800931e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d101      	bne.n	800932a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009326:	2303      	movs	r3, #3
 8009328:	e004      	b.n	8009334 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800934e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800935a:	2303      	movs	r3, #3
 800935c:	e016      	b.n	800938c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	7c1b      	ldrb	r3, [r3, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d109      	bne.n	800937a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800936c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009370:	2101      	movs	r1, #1
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f001 fe9e 	bl	800b0b4 <USBD_LL_PrepareReceive>
 8009378:	e007      	b.n	800938a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009380:	2340      	movs	r3, #64	; 0x40
 8009382:	2101      	movs	r1, #1
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 fe95 	bl	800b0b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	4613      	mov	r3, r2
 80093a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e01f      	b.n	80093ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	79fa      	ldrb	r2, [r7, #7]
 80093de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f001 fcfd 	bl	800ade0 <USBD_LL_Init>
 80093e6:	4603      	mov	r3, r0
 80093e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093fe:	2300      	movs	r3, #0
 8009400:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d101      	bne.n	800940c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009408:	2303      	movs	r3, #3
 800940a:	e016      	b.n	800943a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800941a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00b      	beq.n	8009438 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009428:	f107 020e 	add.w	r2, r7, #14
 800942c:	4610      	mov	r0, r2
 800942e:	4798      	blx	r3
 8009430:	4602      	mov	r2, r0
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b082      	sub	sp, #8
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f001 fd28 	bl	800aea0 <USBD_LL_Start>
 8009450:	4603      	mov	r3, r0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800945a:	b480      	push	{r7}
 800945c:	b083      	sub	sp, #12
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	460b      	mov	r3, r1
 800947a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800947c:	2303      	movs	r3, #3
 800947e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009486:	2b00      	cmp	r3, #0
 8009488:	d009      	beq.n	800949e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	78fa      	ldrb	r2, [r7, #3]
 8009494:	4611      	mov	r1, r2
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	4798      	blx	r3
 800949a:	4603      	mov	r3, r0
 800949c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800949e:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	460b      	mov	r3, r1
 80094b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d007      	beq.n	80094ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	78fa      	ldrb	r2, [r7, #3]
 80094c8:	4611      	mov	r1, r2
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	4798      	blx	r3
  }

  return USBD_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 ff46 	bl	800a37c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80094fe:	461a      	mov	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800950c:	f003 031f 	and.w	r3, r3, #31
 8009510:	2b02      	cmp	r3, #2
 8009512:	d01a      	beq.n	800954a <USBD_LL_SetupStage+0x72>
 8009514:	2b02      	cmp	r3, #2
 8009516:	d822      	bhi.n	800955e <USBD_LL_SetupStage+0x86>
 8009518:	2b00      	cmp	r3, #0
 800951a:	d002      	beq.n	8009522 <USBD_LL_SetupStage+0x4a>
 800951c:	2b01      	cmp	r3, #1
 800951e:	d00a      	beq.n	8009536 <USBD_LL_SetupStage+0x5e>
 8009520:	e01d      	b.n	800955e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009528:	4619      	mov	r1, r3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f9ee 	bl	800990c <USBD_StdDevReq>
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]
      break;
 8009534:	e020      	b.n	8009578 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fa52 	bl	80099e8 <USBD_StdItfReq>
 8009544:	4603      	mov	r3, r0
 8009546:	73fb      	strb	r3, [r7, #15]
      break;
 8009548:	e016      	b.n	8009578 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fa91 	bl	8009a7a <USBD_StdEPReq>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]
      break;
 800955c:	e00c      	b.n	8009578 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009564:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009568:	b2db      	uxtb	r3, r3
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f001 fcf7 	bl	800af60 <USBD_LL_StallEP>
 8009572:	4603      	mov	r3, r0
 8009574:	73fb      	strb	r3, [r7, #15]
      break;
 8009576:	bf00      	nop
  }

  return ret;
 8009578:	7bfb      	ldrb	r3, [r7, #15]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b086      	sub	sp, #24
 8009586:	af00      	add	r7, sp, #0
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	460b      	mov	r3, r1
 800958c:	607a      	str	r2, [r7, #4]
 800958e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009590:	7afb      	ldrb	r3, [r7, #11]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d138      	bne.n	8009608 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800959c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095a4:	2b03      	cmp	r3, #3
 80095a6:	d14a      	bne.n	800963e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	689a      	ldr	r2, [r3, #8]
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d913      	bls.n	80095dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	689a      	ldr	r2, [r3, #8]
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	1ad2      	subs	r2, r2, r3
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	68da      	ldr	r2, [r3, #12]
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	4293      	cmp	r3, r2
 80095cc:	bf28      	it	cs
 80095ce:	4613      	movcs	r3, r2
 80095d0:	461a      	mov	r2, r3
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f000 ffc5 	bl	800a564 <USBD_CtlContinueRx>
 80095da:	e030      	b.n	800963e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	2b03      	cmp	r3, #3
 80095e6:	d10b      	bne.n	8009600 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d005      	beq.n	8009600 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f000 ffc0 	bl	800a586 <USBD_CtlSendStatus>
 8009606:	e01a      	b.n	800963e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b03      	cmp	r3, #3
 8009612:	d114      	bne.n	800963e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00e      	beq.n	800963e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	7afa      	ldrb	r2, [r7, #11]
 800962a:	4611      	mov	r1, r2
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	4798      	blx	r3
 8009630:	4603      	mov	r3, r0
 8009632:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800963a:	7dfb      	ldrb	r3, [r7, #23]
 800963c:	e000      	b.n	8009640 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3718      	adds	r7, #24
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	460b      	mov	r3, r1
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009656:	7afb      	ldrb	r3, [r7, #11]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d16b      	bne.n	8009734 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3314      	adds	r3, #20
 8009660:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009668:	2b02      	cmp	r3, #2
 800966a:	d156      	bne.n	800971a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	689a      	ldr	r2, [r3, #8]
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	429a      	cmp	r2, r3
 8009676:	d914      	bls.n	80096a2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	1ad2      	subs	r2, r2, r3
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	461a      	mov	r2, r3
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f000 ff3a 	bl	800a508 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009694:	2300      	movs	r3, #0
 8009696:	2200      	movs	r2, #0
 8009698:	2100      	movs	r1, #0
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f001 fd0a 	bl	800b0b4 <USBD_LL_PrepareReceive>
 80096a0:	e03b      	b.n	800971a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	68da      	ldr	r2, [r3, #12]
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d11c      	bne.n	80096e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d316      	bcc.n	80096e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d20f      	bcs.n	80096e8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80096c8:	2200      	movs	r2, #0
 80096ca:	2100      	movs	r1, #0
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 ff1b 	bl	800a508 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096da:	2300      	movs	r3, #0
 80096dc:	2200      	movs	r2, #0
 80096de:	2100      	movs	r1, #0
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f001 fce7 	bl	800b0b4 <USBD_LL_PrepareReceive>
 80096e6:	e018      	b.n	800971a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d10b      	bne.n	800970c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d005      	beq.n	800970c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800970c:	2180      	movs	r1, #128	; 0x80
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f001 fc26 	bl	800af60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f000 ff49 	bl	800a5ac <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009720:	2b01      	cmp	r3, #1
 8009722:	d122      	bne.n	800976a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f7ff fe98 	bl	800945a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009732:	e01a      	b.n	800976a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b03      	cmp	r3, #3
 800973e:	d114      	bne.n	800976a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00e      	beq.n	800976a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009752:	695b      	ldr	r3, [r3, #20]
 8009754:	7afa      	ldrb	r2, [r7, #11]
 8009756:	4611      	mov	r1, r2
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	4798      	blx	r3
 800975c:	4603      	mov	r3, r0
 800975e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009760:	7dfb      	ldrb	r3, [r7, #23]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	e000      	b.n	800976c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3718      	adds	r7, #24
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80097a4:	2303      	movs	r3, #3
 80097a6:	e02f      	b.n	8009808 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00f      	beq.n	80097d2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d009      	beq.n	80097d2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	6852      	ldr	r2, [r2, #4]
 80097ca:	b2d2      	uxtb	r2, r2
 80097cc:	4611      	mov	r1, r2
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097d2:	2340      	movs	r3, #64	; 0x40
 80097d4:	2200      	movs	r2, #0
 80097d6:	2100      	movs	r1, #0
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f001 fb7c 	bl	800aed6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2240      	movs	r2, #64	; 0x40
 80097ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097ee:	2340      	movs	r3, #64	; 0x40
 80097f0:	2200      	movs	r2, #0
 80097f2:	2180      	movs	r1, #128	; 0x80
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f001 fb6e 	bl	800aed6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2240      	movs	r2, #64	; 0x40
 8009804:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	78fa      	ldrb	r2, [r7, #3]
 8009820:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800983e:	b2da      	uxtb	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2204      	movs	r2, #4
 800984a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b04      	cmp	r3, #4
 800986e:	d106      	bne.n	800987e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009876:	b2da      	uxtb	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800989e:	2303      	movs	r3, #3
 80098a0:	e012      	b.n	80098c8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b03      	cmp	r3, #3
 80098ac:	d10b      	bne.n	80098c6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b4:	69db      	ldr	r3, [r3, #28]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d005      	beq.n	80098c6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	3301      	adds	r3, #1
 80098e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80098ee:	8a3b      	ldrh	r3, [r7, #16]
 80098f0:	021b      	lsls	r3, r3, #8
 80098f2:	b21a      	sxth	r2, r3
 80098f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	b21b      	sxth	r3, r3
 80098fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80098fe:	89fb      	ldrh	r3, [r7, #14]
}
 8009900:	4618      	mov	r0, r3
 8009902:	371c      	adds	r7, #28
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009922:	2b40      	cmp	r3, #64	; 0x40
 8009924:	d005      	beq.n	8009932 <USBD_StdDevReq+0x26>
 8009926:	2b40      	cmp	r3, #64	; 0x40
 8009928:	d853      	bhi.n	80099d2 <USBD_StdDevReq+0xc6>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00b      	beq.n	8009946 <USBD_StdDevReq+0x3a>
 800992e:	2b20      	cmp	r3, #32
 8009930:	d14f      	bne.n	80099d2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	4798      	blx	r3
 8009940:	4603      	mov	r3, r0
 8009942:	73fb      	strb	r3, [r7, #15]
      break;
 8009944:	e04a      	b.n	80099dc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	785b      	ldrb	r3, [r3, #1]
 800994a:	2b09      	cmp	r3, #9
 800994c:	d83b      	bhi.n	80099c6 <USBD_StdDevReq+0xba>
 800994e:	a201      	add	r2, pc, #4	; (adr r2, 8009954 <USBD_StdDevReq+0x48>)
 8009950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009954:	080099a9 	.word	0x080099a9
 8009958:	080099bd 	.word	0x080099bd
 800995c:	080099c7 	.word	0x080099c7
 8009960:	080099b3 	.word	0x080099b3
 8009964:	080099c7 	.word	0x080099c7
 8009968:	08009987 	.word	0x08009987
 800996c:	0800997d 	.word	0x0800997d
 8009970:	080099c7 	.word	0x080099c7
 8009974:	0800999f 	.word	0x0800999f
 8009978:	08009991 	.word	0x08009991
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f9de 	bl	8009d40 <USBD_GetDescriptor>
          break;
 8009984:	e024      	b.n	80099d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fb6d 	bl	800a068 <USBD_SetAddress>
          break;
 800998e:	e01f      	b.n	80099d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fbac 	bl	800a0f0 <USBD_SetConfig>
 8009998:	4603      	mov	r3, r0
 800999a:	73fb      	strb	r3, [r7, #15]
          break;
 800999c:	e018      	b.n	80099d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fc4b 	bl	800a23c <USBD_GetConfig>
          break;
 80099a6:	e013      	b.n	80099d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fc7c 	bl	800a2a8 <USBD_GetStatus>
          break;
 80099b0:	e00e      	b.n	80099d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fcab 	bl	800a310 <USBD_SetFeature>
          break;
 80099ba:	e009      	b.n	80099d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fcba 	bl	800a338 <USBD_ClrFeature>
          break;
 80099c4:	e004      	b.n	80099d0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fd11 	bl	800a3f0 <USBD_CtlError>
          break;
 80099ce:	bf00      	nop
      }
      break;
 80099d0:	e004      	b.n	80099dc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fd0b 	bl	800a3f0 <USBD_CtlError>
      break;
 80099da:	bf00      	nop
  }

  return ret;
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop

080099e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099fe:	2b40      	cmp	r3, #64	; 0x40
 8009a00:	d005      	beq.n	8009a0e <USBD_StdItfReq+0x26>
 8009a02:	2b40      	cmp	r3, #64	; 0x40
 8009a04:	d82f      	bhi.n	8009a66 <USBD_StdItfReq+0x7e>
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <USBD_StdItfReq+0x26>
 8009a0a:	2b20      	cmp	r3, #32
 8009a0c:	d12b      	bne.n	8009a66 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	3b01      	subs	r3, #1
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d81d      	bhi.n	8009a58 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	889b      	ldrh	r3, [r3, #4]
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d813      	bhi.n	8009a4e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	4798      	blx	r3
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	88db      	ldrh	r3, [r3, #6]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d110      	bne.n	8009a62 <USBD_StdItfReq+0x7a>
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10d      	bne.n	8009a62 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fd9d 	bl	800a586 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a4c:	e009      	b.n	8009a62 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fccd 	bl	800a3f0 <USBD_CtlError>
          break;
 8009a56:	e004      	b.n	8009a62 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fcc8 	bl	800a3f0 <USBD_CtlError>
          break;
 8009a60:	e000      	b.n	8009a64 <USBD_StdItfReq+0x7c>
          break;
 8009a62:	bf00      	nop
      }
      break;
 8009a64:	e004      	b.n	8009a70 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fcc1 	bl	800a3f0 <USBD_CtlError>
      break;
 8009a6e:	bf00      	nop
  }

  return ret;
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	889b      	ldrh	r3, [r3, #4]
 8009a8c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a96:	2b40      	cmp	r3, #64	; 0x40
 8009a98:	d007      	beq.n	8009aaa <USBD_StdEPReq+0x30>
 8009a9a:	2b40      	cmp	r3, #64	; 0x40
 8009a9c:	f200 8145 	bhi.w	8009d2a <USBD_StdEPReq+0x2b0>
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00c      	beq.n	8009abe <USBD_StdEPReq+0x44>
 8009aa4:	2b20      	cmp	r3, #32
 8009aa6:	f040 8140 	bne.w	8009d2a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	4798      	blx	r3
 8009ab8:	4603      	mov	r3, r0
 8009aba:	73fb      	strb	r3, [r7, #15]
      break;
 8009abc:	e13a      	b.n	8009d34 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	785b      	ldrb	r3, [r3, #1]
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	d007      	beq.n	8009ad6 <USBD_StdEPReq+0x5c>
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	f300 8129 	bgt.w	8009d1e <USBD_StdEPReq+0x2a4>
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d07f      	beq.n	8009bd0 <USBD_StdEPReq+0x156>
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d03c      	beq.n	8009b4e <USBD_StdEPReq+0xd4>
 8009ad4:	e123      	b.n	8009d1e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d002      	beq.n	8009ae8 <USBD_StdEPReq+0x6e>
 8009ae2:	2b03      	cmp	r3, #3
 8009ae4:	d016      	beq.n	8009b14 <USBD_StdEPReq+0x9a>
 8009ae6:	e02c      	b.n	8009b42 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ae8:	7bbb      	ldrb	r3, [r7, #14]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00d      	beq.n	8009b0a <USBD_StdEPReq+0x90>
 8009aee:	7bbb      	ldrb	r3, [r7, #14]
 8009af0:	2b80      	cmp	r3, #128	; 0x80
 8009af2:	d00a      	beq.n	8009b0a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f001 fa31 	bl	800af60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009afe:	2180      	movs	r1, #128	; 0x80
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f001 fa2d 	bl	800af60 <USBD_LL_StallEP>
 8009b06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b08:	e020      	b.n	8009b4c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fc6f 	bl	800a3f0 <USBD_CtlError>
              break;
 8009b12:	e01b      	b.n	8009b4c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	885b      	ldrh	r3, [r3, #2]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10e      	bne.n	8009b3a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b1c:	7bbb      	ldrb	r3, [r7, #14]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00b      	beq.n	8009b3a <USBD_StdEPReq+0xc0>
 8009b22:	7bbb      	ldrb	r3, [r7, #14]
 8009b24:	2b80      	cmp	r3, #128	; 0x80
 8009b26:	d008      	beq.n	8009b3a <USBD_StdEPReq+0xc0>
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	88db      	ldrh	r3, [r3, #6]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d104      	bne.n	8009b3a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f001 fa13 	bl	800af60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fd23 	bl	800a586 <USBD_CtlSendStatus>

              break;
 8009b40:	e004      	b.n	8009b4c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fc53 	bl	800a3f0 <USBD_CtlError>
              break;
 8009b4a:	bf00      	nop
          }
          break;
 8009b4c:	e0ec      	b.n	8009d28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d002      	beq.n	8009b60 <USBD_StdEPReq+0xe6>
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d016      	beq.n	8009b8c <USBD_StdEPReq+0x112>
 8009b5e:	e030      	b.n	8009bc2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00d      	beq.n	8009b82 <USBD_StdEPReq+0x108>
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	2b80      	cmp	r3, #128	; 0x80
 8009b6a:	d00a      	beq.n	8009b82 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b6c:	7bbb      	ldrb	r3, [r7, #14]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f001 f9f5 	bl	800af60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b76:	2180      	movs	r1, #128	; 0x80
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f001 f9f1 	bl	800af60 <USBD_LL_StallEP>
 8009b7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b80:	e025      	b.n	8009bce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fc33 	bl	800a3f0 <USBD_CtlError>
              break;
 8009b8a:	e020      	b.n	8009bce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	885b      	ldrh	r3, [r3, #2]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d11b      	bne.n	8009bcc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
 8009b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d004      	beq.n	8009ba8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f001 f9fb 	bl	800af9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fcec 	bl	800a586 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	4798      	blx	r3
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009bc0:	e004      	b.n	8009bcc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fc13 	bl	800a3f0 <USBD_CtlError>
              break;
 8009bca:	e000      	b.n	8009bce <USBD_StdEPReq+0x154>
              break;
 8009bcc:	bf00      	nop
          }
          break;
 8009bce:	e0ab      	b.n	8009d28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d002      	beq.n	8009be2 <USBD_StdEPReq+0x168>
 8009bdc:	2b03      	cmp	r3, #3
 8009bde:	d032      	beq.n	8009c46 <USBD_StdEPReq+0x1cc>
 8009be0:	e097      	b.n	8009d12 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009be2:	7bbb      	ldrb	r3, [r7, #14]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d007      	beq.n	8009bf8 <USBD_StdEPReq+0x17e>
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	2b80      	cmp	r3, #128	; 0x80
 8009bec:	d004      	beq.n	8009bf8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fbfd 	bl	800a3f0 <USBD_CtlError>
                break;
 8009bf6:	e091      	b.n	8009d1c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	da0b      	bge.n	8009c18 <USBD_StdEPReq+0x19e>
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
 8009c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	3310      	adds	r3, #16
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	4413      	add	r3, r2
 8009c14:	3304      	adds	r3, #4
 8009c16:	e00b      	b.n	8009c30 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
 8009c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c1e:	4613      	mov	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	3304      	adds	r3, #4
 8009c30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2200      	movs	r2, #0
 8009c36:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fc47 	bl	800a4d2 <USBD_CtlSendData>
              break;
 8009c44:	e06a      	b.n	8009d1c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	da11      	bge.n	8009c72 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c4e:	7bbb      	ldrb	r3, [r7, #14]
 8009c50:	f003 020f 	and.w	r2, r3, #15
 8009c54:	6879      	ldr	r1, [r7, #4]
 8009c56:	4613      	mov	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	440b      	add	r3, r1
 8009c60:	3324      	adds	r3, #36	; 0x24
 8009c62:	881b      	ldrh	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d117      	bne.n	8009c98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fbc0 	bl	800a3f0 <USBD_CtlError>
                  break;
 8009c70:	e054      	b.n	8009d1c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
 8009c74:	f003 020f 	and.w	r2, r3, #15
 8009c78:	6879      	ldr	r1, [r7, #4]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	440b      	add	r3, r1
 8009c84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d104      	bne.n	8009c98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fbad 	bl	800a3f0 <USBD_CtlError>
                  break;
 8009c96:	e041      	b.n	8009d1c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	da0b      	bge.n	8009cb8 <USBD_StdEPReq+0x23e>
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
 8009ca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	3310      	adds	r3, #16
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	e00b      	b.n	8009cd0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	4413      	add	r3, r2
 8009cce:	3304      	adds	r3, #4
 8009cd0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <USBD_StdEPReq+0x264>
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
 8009cda:	2b80      	cmp	r3, #128	; 0x80
 8009cdc:	d103      	bne.n	8009ce6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	e00e      	b.n	8009d04 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f001 f976 	bl	800afdc <USBD_LL_IsStallEP>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d003      	beq.n	8009cfe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	601a      	str	r2, [r3, #0]
 8009cfc:	e002      	b.n	8009d04 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2200      	movs	r2, #0
 8009d02:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2202      	movs	r2, #2
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fbe1 	bl	800a4d2 <USBD_CtlSendData>
              break;
 8009d10:	e004      	b.n	8009d1c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fb6b 	bl	800a3f0 <USBD_CtlError>
              break;
 8009d1a:	bf00      	nop
          }
          break;
 8009d1c:	e004      	b.n	8009d28 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fb65 	bl	800a3f0 <USBD_CtlError>
          break;
 8009d26:	bf00      	nop
      }
      break;
 8009d28:	e004      	b.n	8009d34 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fb5f 	bl	800a3f0 <USBD_CtlError>
      break;
 8009d32:	bf00      	nop
  }

  return ret;
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
	...

08009d40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d52:	2300      	movs	r3, #0
 8009d54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	885b      	ldrh	r3, [r3, #2]
 8009d5a:	0a1b      	lsrs	r3, r3, #8
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	2b0e      	cmp	r3, #14
 8009d62:	f200 8152 	bhi.w	800a00a <USBD_GetDescriptor+0x2ca>
 8009d66:	a201      	add	r2, pc, #4	; (adr r2, 8009d6c <USBD_GetDescriptor+0x2c>)
 8009d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6c:	08009ddd 	.word	0x08009ddd
 8009d70:	08009df5 	.word	0x08009df5
 8009d74:	08009e35 	.word	0x08009e35
 8009d78:	0800a00b 	.word	0x0800a00b
 8009d7c:	0800a00b 	.word	0x0800a00b
 8009d80:	08009fab 	.word	0x08009fab
 8009d84:	08009fd7 	.word	0x08009fd7
 8009d88:	0800a00b 	.word	0x0800a00b
 8009d8c:	0800a00b 	.word	0x0800a00b
 8009d90:	0800a00b 	.word	0x0800a00b
 8009d94:	0800a00b 	.word	0x0800a00b
 8009d98:	0800a00b 	.word	0x0800a00b
 8009d9c:	0800a00b 	.word	0x0800a00b
 8009da0:	0800a00b 	.word	0x0800a00b
 8009da4:	08009da9 	.word	0x08009da9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dae:	69db      	ldr	r3, [r3, #28]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00b      	beq.n	8009dcc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dba:	69db      	ldr	r3, [r3, #28]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	7c12      	ldrb	r2, [r2, #16]
 8009dc0:	f107 0108 	add.w	r1, r7, #8
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	4798      	blx	r3
 8009dc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dca:	e126      	b.n	800a01a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009dcc:	6839      	ldr	r1, [r7, #0]
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fb0e 	bl	800a3f0 <USBD_CtlError>
        err++;
 8009dd4:	7afb      	ldrb	r3, [r7, #11]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	72fb      	strb	r3, [r7, #11]
      break;
 8009dda:	e11e      	b.n	800a01a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	7c12      	ldrb	r2, [r2, #16]
 8009de8:	f107 0108 	add.w	r1, r7, #8
 8009dec:	4610      	mov	r0, r2
 8009dee:	4798      	blx	r3
 8009df0:	60f8      	str	r0, [r7, #12]
      break;
 8009df2:	e112      	b.n	800a01a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	7c1b      	ldrb	r3, [r3, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10d      	bne.n	8009e18 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e04:	f107 0208 	add.w	r2, r7, #8
 8009e08:	4610      	mov	r0, r2
 8009e0a:	4798      	blx	r3
 8009e0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	3301      	adds	r3, #1
 8009e12:	2202      	movs	r2, #2
 8009e14:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e16:	e100      	b.n	800a01a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e20:	f107 0208 	add.w	r2, r7, #8
 8009e24:	4610      	mov	r0, r2
 8009e26:	4798      	blx	r3
 8009e28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	2202      	movs	r2, #2
 8009e30:	701a      	strb	r2, [r3, #0]
      break;
 8009e32:	e0f2      	b.n	800a01a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	885b      	ldrh	r3, [r3, #2]
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b05      	cmp	r3, #5
 8009e3c:	f200 80ac 	bhi.w	8009f98 <USBD_GetDescriptor+0x258>
 8009e40:	a201      	add	r2, pc, #4	; (adr r2, 8009e48 <USBD_GetDescriptor+0x108>)
 8009e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e46:	bf00      	nop
 8009e48:	08009e61 	.word	0x08009e61
 8009e4c:	08009e95 	.word	0x08009e95
 8009e50:	08009ec9 	.word	0x08009ec9
 8009e54:	08009efd 	.word	0x08009efd
 8009e58:	08009f31 	.word	0x08009f31
 8009e5c:	08009f65 	.word	0x08009f65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00b      	beq.n	8009e84 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	7c12      	ldrb	r2, [r2, #16]
 8009e78:	f107 0108 	add.w	r1, r7, #8
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	4798      	blx	r3
 8009e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e82:	e091      	b.n	8009fa8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fab2 	bl	800a3f0 <USBD_CtlError>
            err++;
 8009e8c:	7afb      	ldrb	r3, [r7, #11]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	72fb      	strb	r3, [r7, #11]
          break;
 8009e92:	e089      	b.n	8009fa8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00b      	beq.n	8009eb8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	7c12      	ldrb	r2, [r2, #16]
 8009eac:	f107 0108 	add.w	r1, r7, #8
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	4798      	blx	r3
 8009eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eb6:	e077      	b.n	8009fa8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fa98 	bl	800a3f0 <USBD_CtlError>
            err++;
 8009ec0:	7afb      	ldrb	r3, [r7, #11]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ec6:	e06f      	b.n	8009fa8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00b      	beq.n	8009eec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	7c12      	ldrb	r2, [r2, #16]
 8009ee0:	f107 0108 	add.w	r1, r7, #8
 8009ee4:	4610      	mov	r0, r2
 8009ee6:	4798      	blx	r3
 8009ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eea:	e05d      	b.n	8009fa8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009eec:	6839      	ldr	r1, [r7, #0]
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fa7e 	bl	800a3f0 <USBD_CtlError>
            err++;
 8009ef4:	7afb      	ldrb	r3, [r7, #11]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8009efa:	e055      	b.n	8009fa8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00b      	beq.n	8009f20 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	7c12      	ldrb	r2, [r2, #16]
 8009f14:	f107 0108 	add.w	r1, r7, #8
 8009f18:	4610      	mov	r0, r2
 8009f1a:	4798      	blx	r3
 8009f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f1e:	e043      	b.n	8009fa8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f20:	6839      	ldr	r1, [r7, #0]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fa64 	bl	800a3f0 <USBD_CtlError>
            err++;
 8009f28:	7afb      	ldrb	r3, [r7, #11]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f2e:	e03b      	b.n	8009fa8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f36:	695b      	ldr	r3, [r3, #20]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00b      	beq.n	8009f54 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	7c12      	ldrb	r2, [r2, #16]
 8009f48:	f107 0108 	add.w	r1, r7, #8
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	4798      	blx	r3
 8009f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f52:	e029      	b.n	8009fa8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 fa4a 	bl	800a3f0 <USBD_CtlError>
            err++;
 8009f5c:	7afb      	ldrb	r3, [r7, #11]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	72fb      	strb	r3, [r7, #11]
          break;
 8009f62:	e021      	b.n	8009fa8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f6a:	699b      	ldr	r3, [r3, #24]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00b      	beq.n	8009f88 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	7c12      	ldrb	r2, [r2, #16]
 8009f7c:	f107 0108 	add.w	r1, r7, #8
 8009f80:	4610      	mov	r0, r2
 8009f82:	4798      	blx	r3
 8009f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f86:	e00f      	b.n	8009fa8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fa30 	bl	800a3f0 <USBD_CtlError>
            err++;
 8009f90:	7afb      	ldrb	r3, [r7, #11]
 8009f92:	3301      	adds	r3, #1
 8009f94:	72fb      	strb	r3, [r7, #11]
          break;
 8009f96:	e007      	b.n	8009fa8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fa28 	bl	800a3f0 <USBD_CtlError>
          err++;
 8009fa0:	7afb      	ldrb	r3, [r7, #11]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009fa6:	bf00      	nop
      }
      break;
 8009fa8:	e037      	b.n	800a01a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	7c1b      	ldrb	r3, [r3, #16]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d109      	bne.n	8009fc6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fba:	f107 0208 	add.w	r2, r7, #8
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	4798      	blx	r3
 8009fc2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fc4:	e029      	b.n	800a01a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fa11 	bl	800a3f0 <USBD_CtlError>
        err++;
 8009fce:	7afb      	ldrb	r3, [r7, #11]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	72fb      	strb	r3, [r7, #11]
      break;
 8009fd4:	e021      	b.n	800a01a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	7c1b      	ldrb	r3, [r3, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10d      	bne.n	8009ffa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe6:	f107 0208 	add.w	r2, r7, #8
 8009fea:	4610      	mov	r0, r2
 8009fec:	4798      	blx	r3
 8009fee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	2207      	movs	r2, #7
 8009ff6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ff8:	e00f      	b.n	800a01a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009ffa:	6839      	ldr	r1, [r7, #0]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f9f7 	bl	800a3f0 <USBD_CtlError>
        err++;
 800a002:	7afb      	ldrb	r3, [r7, #11]
 800a004:	3301      	adds	r3, #1
 800a006:	72fb      	strb	r3, [r7, #11]
      break;
 800a008:	e007      	b.n	800a01a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f9ef 	bl	800a3f0 <USBD_CtlError>
      err++;
 800a012:	7afb      	ldrb	r3, [r7, #11]
 800a014:	3301      	adds	r3, #1
 800a016:	72fb      	strb	r3, [r7, #11]
      break;
 800a018:	bf00      	nop
  }

  if (err != 0U)
 800a01a:	7afb      	ldrb	r3, [r7, #11]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d11e      	bne.n	800a05e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	88db      	ldrh	r3, [r3, #6]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d016      	beq.n	800a056 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a028:	893b      	ldrh	r3, [r7, #8]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00e      	beq.n	800a04c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	88da      	ldrh	r2, [r3, #6]
 800a032:	893b      	ldrh	r3, [r7, #8]
 800a034:	4293      	cmp	r3, r2
 800a036:	bf28      	it	cs
 800a038:	4613      	movcs	r3, r2
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a03e:	893b      	ldrh	r3, [r7, #8]
 800a040:	461a      	mov	r2, r3
 800a042:	68f9      	ldr	r1, [r7, #12]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fa44 	bl	800a4d2 <USBD_CtlSendData>
 800a04a:	e009      	b.n	800a060 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f9ce 	bl	800a3f0 <USBD_CtlError>
 800a054:	e004      	b.n	800a060 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fa95 	bl	800a586 <USBD_CtlSendStatus>
 800a05c:	e000      	b.n	800a060 <USBD_GetDescriptor+0x320>
    return;
 800a05e:	bf00      	nop
  }
}
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop

0800a068 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	889b      	ldrh	r3, [r3, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d131      	bne.n	800a0de <USBD_SetAddress+0x76>
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	88db      	ldrh	r3, [r3, #6]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d12d      	bne.n	800a0de <USBD_SetAddress+0x76>
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	885b      	ldrh	r3, [r3, #2]
 800a086:	2b7f      	cmp	r3, #127	; 0x7f
 800a088:	d829      	bhi.n	800a0de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	885b      	ldrh	r3, [r3, #2]
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a094:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d104      	bne.n	800a0ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f9a3 	bl	800a3f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0aa:	e01d      	b.n	800a0e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	7bfa      	ldrb	r2, [r7, #15]
 800a0b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 ffbb 	bl	800b034 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fa61 	bl	800a586 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d004      	beq.n	800a0d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0d2:	e009      	b.n	800a0e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0dc:	e004      	b.n	800a0e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a0de:	6839      	ldr	r1, [r7, #0]
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 f985 	bl	800a3f0 <USBD_CtlError>
  }
}
 800a0e6:	bf00      	nop
 800a0e8:	bf00      	nop
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	885b      	ldrh	r3, [r3, #2]
 800a102:	b2da      	uxtb	r2, r3
 800a104:	4b4c      	ldr	r3, [pc, #304]	; (800a238 <USBD_SetConfig+0x148>)
 800a106:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a108:	4b4b      	ldr	r3, [pc, #300]	; (800a238 <USBD_SetConfig+0x148>)
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d905      	bls.n	800a11c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f96c 	bl	800a3f0 <USBD_CtlError>
    return USBD_FAIL;
 800a118:	2303      	movs	r3, #3
 800a11a:	e088      	b.n	800a22e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b02      	cmp	r3, #2
 800a126:	d002      	beq.n	800a12e <USBD_SetConfig+0x3e>
 800a128:	2b03      	cmp	r3, #3
 800a12a:	d025      	beq.n	800a178 <USBD_SetConfig+0x88>
 800a12c:	e071      	b.n	800a212 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a12e:	4b42      	ldr	r3, [pc, #264]	; (800a238 <USBD_SetConfig+0x148>)
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d01c      	beq.n	800a170 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a136:	4b40      	ldr	r3, [pc, #256]	; (800a238 <USBD_SetConfig+0x148>)
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a140:	4b3d      	ldr	r3, [pc, #244]	; (800a238 <USBD_SetConfig+0x148>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	4619      	mov	r1, r3
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7ff f992 	bl	8009470 <USBD_SetClassConfig>
 800a14c:	4603      	mov	r3, r0
 800a14e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d004      	beq.n	800a160 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f949 	bl	800a3f0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a15e:	e065      	b.n	800a22c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fa10 	bl	800a586 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2203      	movs	r2, #3
 800a16a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a16e:	e05d      	b.n	800a22c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fa08 	bl	800a586 <USBD_CtlSendStatus>
      break;
 800a176:	e059      	b.n	800a22c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a178:	4b2f      	ldr	r3, [pc, #188]	; (800a238 <USBD_SetConfig+0x148>)
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d112      	bne.n	800a1a6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2202      	movs	r2, #2
 800a184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a188:	4b2b      	ldr	r3, [pc, #172]	; (800a238 <USBD_SetConfig+0x148>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	461a      	mov	r2, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a192:	4b29      	ldr	r3, [pc, #164]	; (800a238 <USBD_SetConfig+0x148>)
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	4619      	mov	r1, r3
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7ff f985 	bl	80094a8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f9f1 	bl	800a586 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1a4:	e042      	b.n	800a22c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a1a6:	4b24      	ldr	r3, [pc, #144]	; (800a238 <USBD_SetConfig+0x148>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d02a      	beq.n	800a20a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f7ff f973 	bl	80094a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a1c2:	4b1d      	ldr	r3, [pc, #116]	; (800a238 <USBD_SetConfig+0x148>)
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1cc:	4b1a      	ldr	r3, [pc, #104]	; (800a238 <USBD_SetConfig+0x148>)
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7ff f94c 	bl	8009470 <USBD_SetClassConfig>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00f      	beq.n	800a202 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f903 	bl	800a3f0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7ff f958 	bl	80094a8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a200:	e014      	b.n	800a22c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f9bf 	bl	800a586 <USBD_CtlSendStatus>
      break;
 800a208:	e010      	b.n	800a22c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 f9bb 	bl	800a586 <USBD_CtlSendStatus>
      break;
 800a210:	e00c      	b.n	800a22c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f8eb 	bl	800a3f0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a21a:	4b07      	ldr	r3, [pc, #28]	; (800a238 <USBD_SetConfig+0x148>)
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	4619      	mov	r1, r3
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7ff f941 	bl	80094a8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a226:	2303      	movs	r3, #3
 800a228:	73fb      	strb	r3, [r7, #15]
      break;
 800a22a:	bf00      	nop
  }

  return ret;
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	200003cc 	.word	0x200003cc

0800a23c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	88db      	ldrh	r3, [r3, #6]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d004      	beq.n	800a258 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 f8cd 	bl	800a3f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a256:	e023      	b.n	800a2a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	2b02      	cmp	r3, #2
 800a262:	dc02      	bgt.n	800a26a <USBD_GetConfig+0x2e>
 800a264:	2b00      	cmp	r3, #0
 800a266:	dc03      	bgt.n	800a270 <USBD_GetConfig+0x34>
 800a268:	e015      	b.n	800a296 <USBD_GetConfig+0x5a>
 800a26a:	2b03      	cmp	r3, #3
 800a26c:	d00b      	beq.n	800a286 <USBD_GetConfig+0x4a>
 800a26e:	e012      	b.n	800a296 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	3308      	adds	r3, #8
 800a27a:	2201      	movs	r2, #1
 800a27c:	4619      	mov	r1, r3
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f927 	bl	800a4d2 <USBD_CtlSendData>
        break;
 800a284:	e00c      	b.n	800a2a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	3304      	adds	r3, #4
 800a28a:	2201      	movs	r2, #1
 800a28c:	4619      	mov	r1, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f91f 	bl	800a4d2 <USBD_CtlSendData>
        break;
 800a294:	e004      	b.n	800a2a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a296:	6839      	ldr	r1, [r7, #0]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 f8a9 	bl	800a3f0 <USBD_CtlError>
        break;
 800a29e:	bf00      	nop
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d81e      	bhi.n	800a2fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	88db      	ldrh	r3, [r3, #6]
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d004      	beq.n	800a2d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f890 	bl	800a3f0 <USBD_CtlError>
        break;
 800a2d0:	e01a      	b.n	800a308 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d005      	beq.n	800a2ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	f043 0202 	orr.w	r2, r3, #2
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	330c      	adds	r3, #12
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f8eb 	bl	800a4d2 <USBD_CtlSendData>
      break;
 800a2fc:	e004      	b.n	800a308 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f875 	bl	800a3f0 <USBD_CtlError>
      break;
 800a306:	bf00      	nop
  }
}
 800a308:	bf00      	nop
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	885b      	ldrh	r3, [r3, #2]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d106      	bne.n	800a330 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f92b 	bl	800a586 <USBD_CtlSendStatus>
  }
}
 800a330:	bf00      	nop
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	3b01      	subs	r3, #1
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d80b      	bhi.n	800a368 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	885b      	ldrh	r3, [r3, #2]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d10c      	bne.n	800a372 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 f910 	bl	800a586 <USBD_CtlSendStatus>
      }
      break;
 800a366:	e004      	b.n	800a372 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f840 	bl	800a3f0 <USBD_CtlError>
      break;
 800a370:	e000      	b.n	800a374 <USBD_ClrFeature+0x3c>
      break;
 800a372:	bf00      	nop
  }
}
 800a374:	bf00      	nop
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	781a      	ldrb	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	3301      	adds	r3, #1
 800a396:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	781a      	ldrb	r2, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f7ff fa92 	bl	80098d0 <SWAPBYTE>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f7ff fa85 	bl	80098d0 <SWAPBYTE>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f7ff fa78 	bl	80098d0 <SWAPBYTE>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	80da      	strh	r2, [r3, #6]
}
 800a3e8:	bf00      	nop
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3fa:	2180      	movs	r1, #128	; 0x80
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fdaf 	bl	800af60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a402:	2100      	movs	r1, #0
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fdab 	bl	800af60 <USBD_LL_StallEP>
}
 800a40a:	bf00      	nop
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b086      	sub	sp, #24
 800a416:	af00      	add	r7, sp, #0
 800a418:	60f8      	str	r0, [r7, #12]
 800a41a:	60b9      	str	r1, [r7, #8]
 800a41c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d036      	beq.n	800a496 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a42c:	6938      	ldr	r0, [r7, #16]
 800a42e:	f000 f836 	bl	800a49e <USBD_GetLen>
 800a432:	4603      	mov	r3, r0
 800a434:	3301      	adds	r3, #1
 800a436:	b29b      	uxth	r3, r3
 800a438:	005b      	lsls	r3, r3, #1
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a440:	7dfb      	ldrb	r3, [r7, #23]
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	4413      	add	r3, r2
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	7812      	ldrb	r2, [r2, #0]
 800a44a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a44c:	7dfb      	ldrb	r3, [r7, #23]
 800a44e:	3301      	adds	r3, #1
 800a450:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a452:	7dfb      	ldrb	r3, [r7, #23]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	4413      	add	r3, r2
 800a458:	2203      	movs	r2, #3
 800a45a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a45c:	7dfb      	ldrb	r3, [r7, #23]
 800a45e:	3301      	adds	r3, #1
 800a460:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a462:	e013      	b.n	800a48c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	4413      	add	r3, r2
 800a46a:	693a      	ldr	r2, [r7, #16]
 800a46c:	7812      	ldrb	r2, [r2, #0]
 800a46e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	3301      	adds	r3, #1
 800a474:	613b      	str	r3, [r7, #16]
    idx++;
 800a476:	7dfb      	ldrb	r3, [r7, #23]
 800a478:	3301      	adds	r3, #1
 800a47a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	4413      	add	r3, r2
 800a482:	2200      	movs	r2, #0
 800a484:	701a      	strb	r2, [r3, #0]
    idx++;
 800a486:	7dfb      	ldrb	r3, [r7, #23]
 800a488:	3301      	adds	r3, #1
 800a48a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1e7      	bne.n	800a464 <USBD_GetString+0x52>
 800a494:	e000      	b.n	800a498 <USBD_GetString+0x86>
    return;
 800a496:	bf00      	nop
  }
}
 800a498:	3718      	adds	r7, #24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b085      	sub	sp, #20
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a4ae:	e005      	b.n	800a4bc <USBD_GetLen+0x1e>
  {
    len++;
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1f5      	bne.n	800a4b0 <USBD_GetLen+0x12>
  }

  return len;
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	60f8      	str	r0, [r7, #12]
 800a4da:	60b9      	str	r1, [r7, #8]
 800a4dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2202      	movs	r2, #2
 800a4e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 fdba 	bl	800b072 <USBD_LL_Transmit>

  return USBD_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	2100      	movs	r1, #0
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f000 fda9 	bl	800b072 <USBD_LL_Transmit>

  return USBD_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b084      	sub	sp, #16
 800a52e:	af00      	add	r7, sp, #0
 800a530:	60f8      	str	r0, [r7, #12]
 800a532:	60b9      	str	r1, [r7, #8]
 800a534:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2203      	movs	r2, #3
 800a53a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	2100      	movs	r1, #0
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 fdad 	bl	800b0b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	2100      	movs	r1, #0
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 fd9c 	bl	800b0b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b082      	sub	sp, #8
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2204      	movs	r2, #4
 800a592:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a596:	2300      	movs	r3, #0
 800a598:	2200      	movs	r2, #0
 800a59a:	2100      	movs	r1, #0
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fd68 	bl	800b072 <USBD_LL_Transmit>

  return USBD_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2205      	movs	r2, #5
 800a5b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5bc:	2300      	movs	r3, #0
 800a5be:	2200      	movs	r2, #0
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 fd76 	bl	800b0b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a5d8:	2200      	movs	r2, #0
 800a5da:	4912      	ldr	r1, [pc, #72]	; (800a624 <MX_USB_Device_Init+0x50>)
 800a5dc:	4812      	ldr	r0, [pc, #72]	; (800a628 <MX_USB_Device_Init+0x54>)
 800a5de:	f7fe fed9 	bl	8009394 <USBD_Init>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d001      	beq.n	800a5ec <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a5e8:	f7f6 f8d4 	bl	8000794 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a5ec:	490f      	ldr	r1, [pc, #60]	; (800a62c <MX_USB_Device_Init+0x58>)
 800a5ee:	480e      	ldr	r0, [pc, #56]	; (800a628 <MX_USB_Device_Init+0x54>)
 800a5f0:	f7fe ff00 	bl	80093f4 <USBD_RegisterClass>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d001      	beq.n	800a5fe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a5fa:	f7f6 f8cb 	bl	8000794 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a5fe:	490c      	ldr	r1, [pc, #48]	; (800a630 <MX_USB_Device_Init+0x5c>)
 800a600:	4809      	ldr	r0, [pc, #36]	; (800a628 <MX_USB_Device_Init+0x54>)
 800a602:	f7fe fe51 	bl	80092a8 <USBD_CDC_RegisterInterface>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d001      	beq.n	800a610 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a60c:	f7f6 f8c2 	bl	8000794 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a610:	4805      	ldr	r0, [pc, #20]	; (800a628 <MX_USB_Device_Init+0x54>)
 800a612:	f7fe ff16 	bl	8009442 <USBD_Start>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a61c:	f7f6 f8ba 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a620:	bf00      	nop
 800a622:	bd80      	pop	{r7, pc}
 800a624:	20000138 	.word	0x20000138
 800a628:	200003d0 	.word	0x200003d0
 800a62c:	20000018 	.word	0x20000018
 800a630:	20000124 	.word	0x20000124

0800a634 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a638:	2200      	movs	r2, #0
 800a63a:	4905      	ldr	r1, [pc, #20]	; (800a650 <CDC_Init_FS+0x1c>)
 800a63c:	4805      	ldr	r0, [pc, #20]	; (800a654 <CDC_Init_FS+0x20>)
 800a63e:	f7fe fe48 	bl	80092d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a642:	4905      	ldr	r1, [pc, #20]	; (800a658 <CDC_Init_FS+0x24>)
 800a644:	4803      	ldr	r0, [pc, #12]	; (800a654 <CDC_Init_FS+0x20>)
 800a646:	f7fe fe62 	bl	800930e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a64a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	20001ecc 	.word	0x20001ecc
 800a654:	200003d0 	.word	0x200003d0
 800a658:	200016cc 	.word	0x200016cc

0800a65c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a65c:	b480      	push	{r7}
 800a65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a660:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a662:	4618      	mov	r0, r3
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	4603      	mov	r3, r0
 800a674:	6039      	str	r1, [r7, #0]
 800a676:	71fb      	strb	r3, [r7, #7]
 800a678:	4613      	mov	r3, r2
 800a67a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	60fb      	str	r3, [r7, #12]

  switch(cmd)
 800a680:	79fb      	ldrb	r3, [r7, #7]
 800a682:	2b23      	cmp	r3, #35	; 0x23
 800a684:	f200 80af 	bhi.w	800a7e6 <CDC_Control_FS+0x17a>
 800a688:	a201      	add	r2, pc, #4	; (adr r2, 800a690 <CDC_Control_FS+0x24>)
 800a68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68e:	bf00      	nop
 800a690:	0800a7e7 	.word	0x0800a7e7
 800a694:	0800a7e7 	.word	0x0800a7e7
 800a698:	0800a7e7 	.word	0x0800a7e7
 800a69c:	0800a7e7 	.word	0x0800a7e7
 800a6a0:	0800a7e7 	.word	0x0800a7e7
 800a6a4:	0800a7e7 	.word	0x0800a7e7
 800a6a8:	0800a7e7 	.word	0x0800a7e7
 800a6ac:	0800a7e7 	.word	0x0800a7e7
 800a6b0:	0800a7e7 	.word	0x0800a7e7
 800a6b4:	0800a7e7 	.word	0x0800a7e7
 800a6b8:	0800a7e7 	.word	0x0800a7e7
 800a6bc:	0800a7e7 	.word	0x0800a7e7
 800a6c0:	0800a7e7 	.word	0x0800a7e7
 800a6c4:	0800a7e7 	.word	0x0800a7e7
 800a6c8:	0800a7e7 	.word	0x0800a7e7
 800a6cc:	0800a7e7 	.word	0x0800a7e7
 800a6d0:	0800a7e7 	.word	0x0800a7e7
 800a6d4:	0800a7e7 	.word	0x0800a7e7
 800a6d8:	0800a7e7 	.word	0x0800a7e7
 800a6dc:	0800a7e7 	.word	0x0800a7e7
 800a6e0:	0800a7e7 	.word	0x0800a7e7
 800a6e4:	0800a7e7 	.word	0x0800a7e7
 800a6e8:	0800a7e7 	.word	0x0800a7e7
 800a6ec:	0800a7e7 	.word	0x0800a7e7
 800a6f0:	0800a7e7 	.word	0x0800a7e7
 800a6f4:	0800a7e7 	.word	0x0800a7e7
 800a6f8:	0800a7e7 	.word	0x0800a7e7
 800a6fc:	0800a7e7 	.word	0x0800a7e7
 800a700:	0800a7e7 	.word	0x0800a7e7
 800a704:	0800a7e7 	.word	0x0800a7e7
 800a708:	0800a7e7 	.word	0x0800a7e7
 800a70c:	0800a7e7 	.word	0x0800a7e7
 800a710:	0800a721 	.word	0x0800a721
 800a714:	0800a77b 	.word	0x0800a77b
 800a718:	0800a7cf 	.word	0x0800a7cf
 800a71c:	0800a7e7 	.word	0x0800a7e7
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	461a      	mov	r2, r3
 800a726:	4b34      	ldr	r3, [pc, #208]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a728:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 800a72a:	4b33      	ldr	r3, [pc, #204]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	3201      	adds	r2, #1
 800a732:	7812      	ldrb	r2, [r2, #0]
 800a734:	0212      	lsls	r2, r2, #8
 800a736:	4313      	orrs	r3, r2
 800a738:	4a2f      	ldr	r2, [pc, #188]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a73a:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 800a73c:	4b2e      	ldr	r3, [pc, #184]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	3202      	adds	r2, #2
 800a744:	7812      	ldrb	r2, [r2, #0]
 800a746:	0412      	lsls	r2, r2, #16
 800a748:	4313      	orrs	r3, r2
 800a74a:	4a2b      	ldr	r2, [pc, #172]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a74c:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 800a74e:	4b2a      	ldr	r3, [pc, #168]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	3203      	adds	r2, #3
 800a756:	7812      	ldrb	r2, [r2, #0]
 800a758:	0612      	lsls	r2, r2, #24
 800a75a:	4313      	orrs	r3, r2
 800a75c:	4a26      	ldr	r2, [pc, #152]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a75e:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	791a      	ldrb	r2, [r3, #4]
 800a764:	4b24      	ldr	r3, [pc, #144]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a766:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	795a      	ldrb	r2, [r3, #5]
 800a76c:	4b22      	ldr	r3, [pc, #136]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a76e:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	799a      	ldrb	r2, [r3, #6]
 800a774:	4b20      	ldr	r3, [pc, #128]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a776:	719a      	strb	r2, [r3, #6]

    break;
 800a778:	e036      	b.n	800a7e8 <CDC_Control_FS+0x17c>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800a77a:	4b1f      	ldr	r3, [pc, #124]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	b2da      	uxtb	r2, r3
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 800a784:	4b1c      	ldr	r3, [pc, #112]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	0a1a      	lsrs	r2, r3, #8
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	3301      	adds	r3, #1
 800a78e:	b2d2      	uxtb	r2, r2
 800a790:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 800a792:	4b19      	ldr	r3, [pc, #100]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	0c1a      	lsrs	r2, r3, #16
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	3302      	adds	r3, #2
 800a79c:	b2d2      	uxtb	r2, r2
 800a79e:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 800a7a0:	4b15      	ldr	r3, [pc, #84]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	0e1a      	lsrs	r2, r3, #24
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	3303      	adds	r3, #3
 800a7aa:	b2d2      	uxtb	r2, r2
 800a7ac:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	3304      	adds	r3, #4
 800a7b2:	4a11      	ldr	r2, [pc, #68]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a7b4:	7912      	ldrb	r2, [r2, #4]
 800a7b6:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	3305      	adds	r3, #5
 800a7bc:	4a0e      	ldr	r2, [pc, #56]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a7be:	7952      	ldrb	r2, [r2, #5]
 800a7c0:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	3306      	adds	r3, #6
 800a7c6:	4a0c      	ldr	r2, [pc, #48]	; (800a7f8 <CDC_Control_FS+0x18c>)
 800a7c8:	7992      	ldrb	r2, [r2, #6]
 800a7ca:	701a      	strb	r2, [r3, #0]

    break;
 800a7cc:	e00c      	b.n	800a7e8 <CDC_Control_FS+0x17c>

    case CDC_SET_CONTROL_LINE_STATE:
      is_opened = req->wValue & 0x01;   // 0 bit: DTR, 1 bit: RTS
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	885b      	ldrh	r3, [r3, #2]
 800a7d2:	f003 0301 	and.w	r3, r3, #1
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	bf14      	ite	ne
 800a7da:	2301      	movne	r3, #1
 800a7dc:	2300      	moveq	r3, #0
 800a7de:	b2da      	uxtb	r2, r3
 800a7e0:	4b06      	ldr	r3, [pc, #24]	; (800a7fc <CDC_Control_FS+0x190>)
 800a7e2:	701a      	strb	r2, [r3, #0]

    break;
 800a7e4:	e000      	b.n	800a7e8 <CDC_Control_FS+0x17c>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a7e6:	bf00      	nop
  }

  return (USBD_OK);
 800a7e8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3714      	adds	r7, #20
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	2000011c 	.word	0x2000011c
 800a7fc:	200016c8 	.word	0x200016c8

0800a800 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a800:	b590      	push	{r4, r7, lr}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  qbufferWrite(&q_rx, Buf, *Len);
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	461a      	mov	r2, r3
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	480f      	ldr	r0, [pc, #60]	; (800a850 <CDC_Receive_FS+0x50>)
 800a814:	f7f6 f8b7 	bl	8000986 <qbufferWrite>


  uint32_t buf_len;

  buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 800a818:	4b0d      	ldr	r3, [pc, #52]	; (800a850 <CDC_Receive_FS+0x50>)
 800a81a:	689c      	ldr	r4, [r3, #8]
 800a81c:	480c      	ldr	r0, [pc, #48]	; (800a850 <CDC_Receive_FS+0x50>)
 800a81e:	f7f6 f966 	bl	8000aee <qbufferAvailable>
 800a822:	4603      	mov	r3, r0
 800a824:	1ae3      	subs	r3, r4, r3
 800a826:	3b01      	subs	r3, #1
 800a828:	60fb      	str	r3, [r7, #12]

  if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2b3f      	cmp	r3, #63	; 0x3f
 800a82e:	d907      	bls.n	800a840 <CDC_Receive_FS+0x40>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a830:	6879      	ldr	r1, [r7, #4]
 800a832:	4808      	ldr	r0, [pc, #32]	; (800a854 <CDC_Receive_FS+0x54>)
 800a834:	f7fe fd6b 	bl	800930e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a838:	4806      	ldr	r0, [pc, #24]	; (800a854 <CDC_Receive_FS+0x54>)
 800a83a:	f7fe fd81 	bl	8009340 <USBD_CDC_ReceivePacket>
 800a83e:	e002      	b.n	800a846 <CDC_Receive_FS+0x46>
  }
  else
  {
    is_rx_full = true;
 800a840:	4b05      	ldr	r3, [pc, #20]	; (800a858 <CDC_Receive_FS+0x58>)
 800a842:	2201      	movs	r2, #1
 800a844:	701a      	strb	r2, [r3, #0]
  }

    return (USBD_OK);
 800a846:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd90      	pop	{r4, r7, pc}
 800a850:	200006a0 	.word	0x200006a0
 800a854:	200003d0 	.word	0x200003d0
 800a858:	200016c9 	.word	0x200016c9

0800a85c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	4613      	mov	r3, r2
 800a868:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a86e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a872:	4618      	mov	r0, r3
 800a874:	371c      	adds	r7, #28
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
	...

0800a880 <cdcIfInit>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool cdcIfInit(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
  is_opened = false;
 800a884:	4b08      	ldr	r3, [pc, #32]	; (800a8a8 <cdcIfInit+0x28>)
 800a886:	2200      	movs	r2, #0
 800a888:	701a      	strb	r2, [r3, #0]
  qbufferCreate(&q_rx, q_rx_buf, 2048);
 800a88a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a88e:	4907      	ldr	r1, [pc, #28]	; (800a8ac <cdcIfInit+0x2c>)
 800a890:	4807      	ldr	r0, [pc, #28]	; (800a8b0 <cdcIfInit+0x30>)
 800a892:	f7f6 f85a 	bl	800094a <qbufferCreate>
  qbufferCreate(&q_tx, q_tx_buf, 2048);
 800a896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a89a:	4906      	ldr	r1, [pc, #24]	; (800a8b4 <cdcIfInit+0x34>)
 800a89c:	4806      	ldr	r0, [pc, #24]	; (800a8b8 <cdcIfInit+0x38>)
 800a89e:	f7f6 f854 	bl	800094a <qbufferCreate>

  return true;
 800a8a2:	2301      	movs	r3, #1
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	200016c8 	.word	0x200016c8
 800a8ac:	200006c8 	.word	0x200006c8
 800a8b0:	200006a0 	.word	0x200006a0
 800a8b4:	20000ec8 	.word	0x20000ec8
 800a8b8:	200006b4 	.word	0x200006b4

0800a8bc <cdcIfAvailable>:

uint32_t cdcIfAvailable(void)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	af00      	add	r7, sp, #0
  return qbufferAvailable(&q_rx);
 800a8c0:	4802      	ldr	r0, [pc, #8]	; (800a8cc <cdcIfAvailable+0x10>)
 800a8c2:	f7f6 f914 	bl	8000aee <qbufferAvailable>
 800a8c6:	4603      	mov	r3, r0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	200006a0 	.word	0x200006a0

0800a8d0 <cdcIfRead>:

uint8_t cdcIfRead(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	71fb      	strb	r3, [r7, #7]

  qbufferRead(&q_rx, &ret, 1);
 800a8da:	1dfb      	adds	r3, r7, #7
 800a8dc:	2201      	movs	r2, #1
 800a8de:	4619      	mov	r1, r3
 800a8e0:	4803      	ldr	r0, [pc, #12]	; (800a8f0 <cdcIfRead+0x20>)
 800a8e2:	f7f6 f8ac 	bl	8000a3e <qbufferRead>

  return ret;
 800a8e6:	79fb      	ldrb	r3, [r7, #7]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	200006a0 	.word	0x200006a0

0800a8f4 <cdcIfWrite>:

uint32_t cdcIfWrite(uint8_t *p_data, uint32_t length)
{
 800a8f4:	b590      	push	{r4, r7, lr}
 800a8f6:	b087      	sub	sp, #28
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  uint32_t tx_len;
  uint32_t buf_len;
  uint32_t sent_len;


  if (cdcIfIsConnected() != true) return 0;
 800a8fe:	f000 f84f 	bl	800a9a0 <cdcIfIsConnected>
 800a902:	4603      	mov	r3, r0
 800a904:	f083 0301 	eor.w	r3, r3, #1
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d001      	beq.n	800a912 <cdcIfWrite+0x1e>
 800a90e:	2300      	movs	r3, #0
 800a910:	e040      	b.n	800a994 <cdcIfWrite+0xa0>


  sent_len = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	613b      	str	r3, [r7, #16]

  pre_time = millis();
 800a916:	f7f5 feea 	bl	80006ee <millis>
 800a91a:	4603      	mov	r3, r0
 800a91c:	60fb      	str	r3, [r7, #12]
  while(sent_len < length)
 800a91e:	e030      	b.n	800a982 <cdcIfWrite+0x8e>
  {
    buf_len = (q_tx.len - qbufferAvailable(&q_tx)) - 1;
 800a920:	4b1e      	ldr	r3, [pc, #120]	; (800a99c <cdcIfWrite+0xa8>)
 800a922:	689c      	ldr	r4, [r3, #8]
 800a924:	481d      	ldr	r0, [pc, #116]	; (800a99c <cdcIfWrite+0xa8>)
 800a926:	f7f6 f8e2 	bl	8000aee <qbufferAvailable>
 800a92a:	4603      	mov	r3, r0
 800a92c:	1ae3      	subs	r3, r4, r3
 800a92e:	3b01      	subs	r3, #1
 800a930:	60bb      	str	r3, [r7, #8]
    tx_len = length;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	617b      	str	r3, [r7, #20]

    if (tx_len > buf_len)
 800a936:	697a      	ldr	r2, [r7, #20]
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d901      	bls.n	800a942 <cdcIfWrite+0x4e>
    {
      tx_len = buf_len;
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	617b      	str	r3, [r7, #20]
    }

    if (tx_len > 0)
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00c      	beq.n	800a962 <cdcIfWrite+0x6e>
    {
      qbufferWrite(&q_tx, p_data, tx_len);
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	6879      	ldr	r1, [r7, #4]
 800a94c:	4813      	ldr	r0, [pc, #76]	; (800a99c <cdcIfWrite+0xa8>)
 800a94e:	f7f6 f81a 	bl	8000986 <qbufferWrite>
      p_data += tx_len;
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	4413      	add	r3, r2
 800a958:	607b      	str	r3, [r7, #4]
      sent_len += tx_len;
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	4413      	add	r3, r2
 800a960:	613b      	str	r3, [r7, #16]
    }

    if (cdcIfIsConnected() != true)
 800a962:	f000 f81d 	bl	800a9a0 <cdcIfIsConnected>
 800a966:	4603      	mov	r3, r0
 800a968:	f083 0301 	eor.w	r3, r3, #1
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10c      	bne.n	800a98c <cdcIfWrite+0x98>
    {
      break;
    }

    if (millis()-pre_time >= 100)
 800a972:	f7f5 febc 	bl	80006ee <millis>
 800a976:	4603      	mov	r3, r0
 800a978:	461a      	mov	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	1ad3      	subs	r3, r2, r3
 800a97e:	2b63      	cmp	r3, #99	; 0x63
 800a980:	d806      	bhi.n	800a990 <cdcIfWrite+0x9c>
  while(sent_len < length)
 800a982:	693a      	ldr	r2, [r7, #16]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	429a      	cmp	r2, r3
 800a988:	d3ca      	bcc.n	800a920 <cdcIfWrite+0x2c>
 800a98a:	e002      	b.n	800a992 <cdcIfWrite+0x9e>
      break;
 800a98c:	bf00      	nop
 800a98e:	e000      	b.n	800a992 <cdcIfWrite+0x9e>
    {
      break;
 800a990:	bf00      	nop
    }
  }

  return sent_len;
 800a992:	693b      	ldr	r3, [r7, #16]
}
 800a994:	4618      	mov	r0, r3
 800a996:	371c      	adds	r7, #28
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd90      	pop	{r4, r7, pc}
 800a99c:	200006b4 	.word	0x200006b4

0800a9a0 <cdcIfIsConnected>:
{
  return LineCoding.bitrate;
}

bool cdcIfIsConnected(void)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.pClassData == NULL)
 800a9a4:	4b11      	ldr	r3, [pc, #68]	; (800a9ec <cdcIfIsConnected+0x4c>)
 800a9a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d101      	bne.n	800a9b2 <cdcIfIsConnected+0x12>
  {
    return false;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	e017      	b.n	800a9e2 <cdcIfIsConnected+0x42>
  }
  if (is_opened == false)
 800a9b2:	4b0f      	ldr	r3, [pc, #60]	; (800a9f0 <cdcIfIsConnected+0x50>)
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	f083 0301 	eor.w	r3, r3, #1
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d001      	beq.n	800a9c4 <cdcIfIsConnected+0x24>
  {
    return false;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	e00e      	b.n	800a9e2 <cdcIfIsConnected+0x42>
  }
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 800a9c4:	4b09      	ldr	r3, [pc, #36]	; (800a9ec <cdcIfIsConnected+0x4c>)
 800a9c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	2b03      	cmp	r3, #3
 800a9ce:	d001      	beq.n	800a9d4 <cdcIfIsConnected+0x34>
  {
    return false;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	e006      	b.n	800a9e2 <cdcIfIsConnected+0x42>
  }
  if (hUsbDeviceFS.dev_config == 0)
 800a9d4:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <cdcIfIsConnected+0x4c>)
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d101      	bne.n	800a9e0 <cdcIfIsConnected+0x40>
  {
    return false;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	e000      	b.n	800a9e2 <cdcIfIsConnected+0x42>
  }

  return true;
 800a9e0:	2301      	movs	r3, #1
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	200003d0 	.word	0x200003d0
 800a9f0:	200016c8 	.word	0x200016c8

0800a9f4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	6039      	str	r1, [r7, #0]
 800a9fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2212      	movs	r2, #18
 800aa04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800aa06:	4b03      	ldr	r3, [pc, #12]	; (800aa14 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	20000158 	.word	0x20000158

0800aa18 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	4603      	mov	r3, r0
 800aa20:	6039      	str	r1, [r7, #0]
 800aa22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	2204      	movs	r2, #4
 800aa28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa2a:	4b03      	ldr	r3, [pc, #12]	; (800aa38 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr
 800aa38:	2000016c 	.word	0x2000016c

0800aa3c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	4603      	mov	r3, r0
 800aa44:	6039      	str	r1, [r7, #0]
 800aa46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa48:	79fb      	ldrb	r3, [r7, #7]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d105      	bne.n	800aa5a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	4907      	ldr	r1, [pc, #28]	; (800aa70 <USBD_CDC_ProductStrDescriptor+0x34>)
 800aa52:	4808      	ldr	r0, [pc, #32]	; (800aa74 <USBD_CDC_ProductStrDescriptor+0x38>)
 800aa54:	f7ff fcdd 	bl	800a412 <USBD_GetString>
 800aa58:	e004      	b.n	800aa64 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aa5a:	683a      	ldr	r2, [r7, #0]
 800aa5c:	4904      	ldr	r1, [pc, #16]	; (800aa70 <USBD_CDC_ProductStrDescriptor+0x34>)
 800aa5e:	4805      	ldr	r0, [pc, #20]	; (800aa74 <USBD_CDC_ProductStrDescriptor+0x38>)
 800aa60:	f7ff fcd7 	bl	800a412 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa64:	4b02      	ldr	r3, [pc, #8]	; (800aa70 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	200026cc 	.word	0x200026cc
 800aa74:	0800bbd0 	.word	0x0800bbd0

0800aa78 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	6039      	str	r1, [r7, #0]
 800aa82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	4904      	ldr	r1, [pc, #16]	; (800aa98 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800aa88:	4804      	ldr	r0, [pc, #16]	; (800aa9c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800aa8a:	f7ff fcc2 	bl	800a412 <USBD_GetString>
  return USBD_StrDesc;
 800aa8e:	4b02      	ldr	r3, [pc, #8]	; (800aa98 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	200026cc 	.word	0x200026cc
 800aa9c:	0800bbe8 	.word	0x0800bbe8

0800aaa0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	6039      	str	r1, [r7, #0]
 800aaaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	221a      	movs	r2, #26
 800aab0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aab2:	f000 f843 	bl	800ab3c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800aab6:	4b02      	ldr	r3, [pc, #8]	; (800aac0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20000170 	.word	0x20000170

0800aac4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	4603      	mov	r3, r0
 800aacc:	6039      	str	r1, [r7, #0]
 800aace:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aad0:	79fb      	ldrb	r3, [r7, #7]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d105      	bne.n	800aae2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	4907      	ldr	r1, [pc, #28]	; (800aaf8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800aada:	4808      	ldr	r0, [pc, #32]	; (800aafc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800aadc:	f7ff fc99 	bl	800a412 <USBD_GetString>
 800aae0:	e004      	b.n	800aaec <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800aae2:	683a      	ldr	r2, [r7, #0]
 800aae4:	4904      	ldr	r1, [pc, #16]	; (800aaf8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800aae6:	4805      	ldr	r0, [pc, #20]	; (800aafc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800aae8:	f7ff fc93 	bl	800a412 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aaec:	4b02      	ldr	r3, [pc, #8]	; (800aaf8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	200026cc 	.word	0x200026cc
 800aafc:	0800bbfc 	.word	0x0800bbfc

0800ab00 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	4603      	mov	r3, r0
 800ab08:	6039      	str	r1, [r7, #0]
 800ab0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab0c:	79fb      	ldrb	r3, [r7, #7]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d105      	bne.n	800ab1e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	4907      	ldr	r1, [pc, #28]	; (800ab34 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ab16:	4808      	ldr	r0, [pc, #32]	; (800ab38 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ab18:	f7ff fc7b 	bl	800a412 <USBD_GetString>
 800ab1c:	e004      	b.n	800ab28 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	4904      	ldr	r1, [pc, #16]	; (800ab34 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ab22:	4805      	ldr	r0, [pc, #20]	; (800ab38 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ab24:	f7ff fc75 	bl	800a412 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab28:	4b02      	ldr	r3, [pc, #8]	; (800ab34 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	200026cc 	.word	0x200026cc
 800ab38:	0800bc08 	.word	0x0800bc08

0800ab3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab42:	4b0f      	ldr	r3, [pc, #60]	; (800ab80 <Get_SerialNum+0x44>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab48:	4b0e      	ldr	r3, [pc, #56]	; (800ab84 <Get_SerialNum+0x48>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab4e:	4b0e      	ldr	r3, [pc, #56]	; (800ab88 <Get_SerialNum+0x4c>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4413      	add	r3, r2
 800ab5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d009      	beq.n	800ab76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab62:	2208      	movs	r2, #8
 800ab64:	4909      	ldr	r1, [pc, #36]	; (800ab8c <Get_SerialNum+0x50>)
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f000 f814 	bl	800ab94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab6c:	2204      	movs	r2, #4
 800ab6e:	4908      	ldr	r1, [pc, #32]	; (800ab90 <Get_SerialNum+0x54>)
 800ab70:	68b8      	ldr	r0, [r7, #8]
 800ab72:	f000 f80f 	bl	800ab94 <IntToUnicode>
  }
}
 800ab76:	bf00      	nop
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	1fff7590 	.word	0x1fff7590
 800ab84:	1fff7594 	.word	0x1fff7594
 800ab88:	1fff7598 	.word	0x1fff7598
 800ab8c:	20000172 	.word	0x20000172
 800ab90:	20000182 	.word	0x20000182

0800ab94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aba6:	2300      	movs	r3, #0
 800aba8:	75fb      	strb	r3, [r7, #23]
 800abaa:	e027      	b.n	800abfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	0f1b      	lsrs	r3, r3, #28
 800abb0:	2b09      	cmp	r3, #9
 800abb2:	d80b      	bhi.n	800abcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	0f1b      	lsrs	r3, r3, #28
 800abb8:	b2da      	uxtb	r2, r3
 800abba:	7dfb      	ldrb	r3, [r7, #23]
 800abbc:	005b      	lsls	r3, r3, #1
 800abbe:	4619      	mov	r1, r3
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	440b      	add	r3, r1
 800abc4:	3230      	adds	r2, #48	; 0x30
 800abc6:	b2d2      	uxtb	r2, r2
 800abc8:	701a      	strb	r2, [r3, #0]
 800abca:	e00a      	b.n	800abe2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	0f1b      	lsrs	r3, r3, #28
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	4619      	mov	r1, r3
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	440b      	add	r3, r1
 800abdc:	3237      	adds	r2, #55	; 0x37
 800abde:	b2d2      	uxtb	r2, r2
 800abe0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	011b      	lsls	r3, r3, #4
 800abe6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800abe8:	7dfb      	ldrb	r3, [r7, #23]
 800abea:	005b      	lsls	r3, r3, #1
 800abec:	3301      	adds	r3, #1
 800abee:	68ba      	ldr	r2, [r7, #8]
 800abf0:	4413      	add	r3, r2
 800abf2:	2200      	movs	r2, #0
 800abf4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800abf6:	7dfb      	ldrb	r3, [r7, #23]
 800abf8:	3301      	adds	r3, #1
 800abfa:	75fb      	strb	r3, [r7, #23]
 800abfc:	7dfa      	ldrb	r2, [r7, #23]
 800abfe:	79fb      	ldrb	r3, [r7, #7]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d3d3      	bcc.n	800abac <IntToUnicode+0x18>
  }
}
 800ac04:	bf00      	nop
 800ac06:	bf00      	nop
 800ac08:	371c      	adds	r7, #28
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
	...

0800ac14 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b098      	sub	sp, #96	; 0x60
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ac1c:	f107 030c 	add.w	r3, r7, #12
 800ac20:	2254      	movs	r2, #84	; 0x54
 800ac22:	2100      	movs	r1, #0
 800ac24:	4618      	mov	r0, r3
 800ac26:	f000 fb3d 	bl	800b2a4 <memset>
  if(pcdHandle->Instance==USB)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a15      	ldr	r2, [pc, #84]	; (800ac84 <HAL_PCD_MspInit+0x70>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d123      	bne.n	800ac7c <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ac34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac38:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800ac3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac3e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ac40:	f107 030c 	add.w	r3, r7, #12
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7f9 f9c5 	bl	8003fd4 <HAL_RCCEx_PeriphCLKConfig>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d001      	beq.n	800ac54 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800ac50:	f7f5 fda0 	bl	8000794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ac54:	4b0c      	ldr	r3, [pc, #48]	; (800ac88 <HAL_PCD_MspInit+0x74>)
 800ac56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac58:	4a0b      	ldr	r2, [pc, #44]	; (800ac88 <HAL_PCD_MspInit+0x74>)
 800ac5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ac5e:	6593      	str	r3, [r2, #88]	; 0x58
 800ac60:	4b09      	ldr	r3, [pc, #36]	; (800ac88 <HAL_PCD_MspInit+0x74>)
 800ac62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac68:	60bb      	str	r3, [r7, #8]
 800ac6a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	2100      	movs	r1, #0
 800ac70:	2014      	movs	r0, #20
 800ac72:	f7f6 fc0a 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ac76:	2014      	movs	r0, #20
 800ac78:	f7f6 fc21 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ac7c:	bf00      	nop
 800ac7e:	3760      	adds	r7, #96	; 0x60
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	40005c00 	.word	0x40005c00
 800ac88:	40021000 	.word	0x40021000

0800ac8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800aca0:	4619      	mov	r1, r3
 800aca2:	4610      	mov	r0, r2
 800aca4:	f7fe fc18 	bl	80094d8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800aca8:	bf00      	nop
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	460b      	mov	r3, r1
 800acba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800acc2:	78fa      	ldrb	r2, [r7, #3]
 800acc4:	6879      	ldr	r1, [r7, #4]
 800acc6:	4613      	mov	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	00db      	lsls	r3, r3, #3
 800acce:	440b      	add	r3, r1
 800acd0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	78fb      	ldrb	r3, [r7, #3]
 800acd8:	4619      	mov	r1, r3
 800acda:	f7fe fc52 	bl	8009582 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800acde:	bf00      	nop
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b082      	sub	sp, #8
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	460b      	mov	r3, r1
 800acf0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800acf8:	78fa      	ldrb	r2, [r7, #3]
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	4613      	mov	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	4413      	add	r3, r2
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	440b      	add	r3, r1
 800ad06:	3324      	adds	r3, #36	; 0x24
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	78fb      	ldrb	r3, [r7, #3]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	f7fe fc9b 	bl	8009648 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ad12:	bf00      	nop
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b082      	sub	sp, #8
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7fe fdaf 	bl	800988c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ad2e:	bf00      	nop
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b084      	sub	sp, #16
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	795b      	ldrb	r3, [r3, #5]
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	d001      	beq.n	800ad4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ad4a:	f7f5 fd23 	bl	8000794 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ad54:	7bfa      	ldrb	r2, [r7, #15]
 800ad56:	4611      	mov	r1, r2
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fe fd59 	bl	8009810 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7fe fd05 	bl	8009774 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ad6a:	bf00      	nop
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
	...

0800ad74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe fd54 	bl	8009830 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	7a5b      	ldrb	r3, [r3, #9]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d005      	beq.n	800ad9c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad90:	4b04      	ldr	r3, [pc, #16]	; (800ada4 <HAL_PCD_SuspendCallback+0x30>)
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	4a03      	ldr	r2, [pc, #12]	; (800ada4 <HAL_PCD_SuspendCallback+0x30>)
 800ad96:	f043 0306 	orr.w	r3, r3, #6
 800ad9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ad9c:	bf00      	nop
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	e000ed00 	.word	0xe000ed00

0800ada8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	7a5b      	ldrb	r3, [r3, #9]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d007      	beq.n	800adc8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800adb8:	4b08      	ldr	r3, [pc, #32]	; (800addc <HAL_PCD_ResumeCallback+0x34>)
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	4a07      	ldr	r2, [pc, #28]	; (800addc <HAL_PCD_ResumeCallback+0x34>)
 800adbe:	f023 0306 	bic.w	r3, r3, #6
 800adc2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800adc4:	f000 f9f8 	bl	800b1b8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800adce:	4618      	mov	r0, r3
 800add0:	f7fe fd44 	bl	800985c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800add4:	bf00      	nop
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	e000ed00 	.word	0xe000ed00

0800ade0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ade8:	4a2b      	ldr	r2, [pc, #172]	; (800ae98 <USBD_LL_Init+0xb8>)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a29      	ldr	r2, [pc, #164]	; (800ae98 <USBD_LL_Init+0xb8>)
 800adf4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800adf8:	4b27      	ldr	r3, [pc, #156]	; (800ae98 <USBD_LL_Init+0xb8>)
 800adfa:	4a28      	ldr	r2, [pc, #160]	; (800ae9c <USBD_LL_Init+0xbc>)
 800adfc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800adfe:	4b26      	ldr	r3, [pc, #152]	; (800ae98 <USBD_LL_Init+0xb8>)
 800ae00:	2208      	movs	r2, #8
 800ae02:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ae04:	4b24      	ldr	r3, [pc, #144]	; (800ae98 <USBD_LL_Init+0xb8>)
 800ae06:	2202      	movs	r2, #2
 800ae08:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae0a:	4b23      	ldr	r3, [pc, #140]	; (800ae98 <USBD_LL_Init+0xb8>)
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ae10:	4b21      	ldr	r3, [pc, #132]	; (800ae98 <USBD_LL_Init+0xb8>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ae16:	4b20      	ldr	r3, [pc, #128]	; (800ae98 <USBD_LL_Init+0xb8>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ae1c:	4b1e      	ldr	r3, [pc, #120]	; (800ae98 <USBD_LL_Init+0xb8>)
 800ae1e:	2200      	movs	r2, #0
 800ae20:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ae22:	4b1d      	ldr	r3, [pc, #116]	; (800ae98 <USBD_LL_Init+0xb8>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ae28:	481b      	ldr	r0, [pc, #108]	; (800ae98 <USBD_LL_Init+0xb8>)
 800ae2a:	f7f6 fdbd 	bl	80019a8 <HAL_PCD_Init>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d001      	beq.n	800ae38 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ae34:	f7f5 fcae 	bl	8000794 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae3e:	2318      	movs	r3, #24
 800ae40:	2200      	movs	r2, #0
 800ae42:	2100      	movs	r1, #0
 800ae44:	f7f8 fa77 	bl	8003336 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae4e:	2358      	movs	r3, #88	; 0x58
 800ae50:	2200      	movs	r2, #0
 800ae52:	2180      	movs	r1, #128	; 0x80
 800ae54:	f7f8 fa6f 	bl	8003336 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae5e:	23c0      	movs	r3, #192	; 0xc0
 800ae60:	2200      	movs	r2, #0
 800ae62:	2181      	movs	r1, #129	; 0x81
 800ae64:	f7f8 fa67 	bl	8003336 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae6e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ae72:	2200      	movs	r2, #0
 800ae74:	2101      	movs	r1, #1
 800ae76:	f7f8 fa5e 	bl	8003336 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae84:	2200      	movs	r2, #0
 800ae86:	2182      	movs	r1, #130	; 0x82
 800ae88:	f7f8 fa55 	bl	8003336 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	200028cc 	.word	0x200028cc
 800ae9c:	40005c00 	.word	0x40005c00

0800aea0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7f6 fe44 	bl	8001b44 <HAL_PCD_Start>
 800aebc:	4603      	mov	r3, r0
 800aebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f000 f97e 	bl	800b1c4 <USBD_Get_USB_Status>
 800aec8:	4603      	mov	r3, r0
 800aeca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aecc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b084      	sub	sp, #16
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	4608      	mov	r0, r1
 800aee0:	4611      	mov	r1, r2
 800aee2:	461a      	mov	r2, r3
 800aee4:	4603      	mov	r3, r0
 800aee6:	70fb      	strb	r3, [r7, #3]
 800aee8:	460b      	mov	r3, r1
 800aeea:	70bb      	strb	r3, [r7, #2]
 800aeec:	4613      	mov	r3, r2
 800aeee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef0:	2300      	movs	r3, #0
 800aef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aefe:	78bb      	ldrb	r3, [r7, #2]
 800af00:	883a      	ldrh	r2, [r7, #0]
 800af02:	78f9      	ldrb	r1, [r7, #3]
 800af04:	f7f6 ff8b 	bl	8001e1e <HAL_PCD_EP_Open>
 800af08:	4603      	mov	r3, r0
 800af0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 f958 	bl	800b1c4 <USBD_Get_USB_Status>
 800af14:	4603      	mov	r3, r0
 800af16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af18:	7bbb      	ldrb	r3, [r7, #14]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b084      	sub	sp, #16
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	460b      	mov	r3, r1
 800af2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af32:	2300      	movs	r3, #0
 800af34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af3c:	78fa      	ldrb	r2, [r7, #3]
 800af3e:	4611      	mov	r1, r2
 800af40:	4618      	mov	r0, r3
 800af42:	f7f6 ffc9 	bl	8001ed8 <HAL_PCD_EP_Close>
 800af46:	4603      	mov	r3, r0
 800af48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f000 f939 	bl	800b1c4 <USBD_Get_USB_Status>
 800af52:	4603      	mov	r3, r0
 800af54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af56:	7bbb      	ldrb	r3, [r7, #14]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	460b      	mov	r3, r1
 800af6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af7a:	78fa      	ldrb	r2, [r7, #3]
 800af7c:	4611      	mov	r1, r2
 800af7e:	4618      	mov	r0, r3
 800af80:	f7f7 f872 	bl	8002068 <HAL_PCD_EP_SetStall>
 800af84:	4603      	mov	r3, r0
 800af86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f91a 	bl	800b1c4 <USBD_Get_USB_Status>
 800af90:	4603      	mov	r3, r0
 800af92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af94:	7bbb      	ldrb	r3, [r7, #14]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	460b      	mov	r3, r1
 800afa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afb8:	78fa      	ldrb	r2, [r7, #3]
 800afba:	4611      	mov	r1, r2
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7f7 f8a5 	bl	800210c <HAL_PCD_EP_ClrStall>
 800afc2:	4603      	mov	r3, r0
 800afc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 f8fb 	bl	800b1c4 <USBD_Get_USB_Status>
 800afce:	4603      	mov	r3, r0
 800afd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	da0b      	bge.n	800b010 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aff8:	78fb      	ldrb	r3, [r7, #3]
 800affa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800affe:	68f9      	ldr	r1, [r7, #12]
 800b000:	4613      	mov	r3, r2
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	4413      	add	r3, r2
 800b006:	00db      	lsls	r3, r3, #3
 800b008:	440b      	add	r3, r1
 800b00a:	3312      	adds	r3, #18
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	e00b      	b.n	800b028 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b010:	78fb      	ldrb	r3, [r7, #3]
 800b012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b016:	68f9      	ldr	r1, [r7, #12]
 800b018:	4613      	mov	r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4413      	add	r3, r2
 800b01e:	00db      	lsls	r3, r3, #3
 800b020:	440b      	add	r3, r1
 800b022:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800b026:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3714      	adds	r7, #20
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	460b      	mov	r3, r1
 800b03e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b040:	2300      	movs	r3, #0
 800b042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b044:	2300      	movs	r3, #0
 800b046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b04e:	78fa      	ldrb	r2, [r7, #3]
 800b050:	4611      	mov	r1, r2
 800b052:	4618      	mov	r0, r3
 800b054:	f7f6 febf 	bl	8001dd6 <HAL_PCD_SetAddress>
 800b058:	4603      	mov	r3, r0
 800b05a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	4618      	mov	r0, r3
 800b060:	f000 f8b0 	bl	800b1c4 <USBD_Get_USB_Status>
 800b064:	4603      	mov	r3, r0
 800b066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b068:	7bbb      	ldrb	r3, [r7, #14]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b086      	sub	sp, #24
 800b076:	af00      	add	r7, sp, #0
 800b078:	60f8      	str	r0, [r7, #12]
 800b07a:	607a      	str	r2, [r7, #4]
 800b07c:	603b      	str	r3, [r7, #0]
 800b07e:	460b      	mov	r3, r1
 800b080:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b090:	7af9      	ldrb	r1, [r7, #11]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	f7f6 ffb0 	bl	8001ffa <HAL_PCD_EP_Transmit>
 800b09a:	4603      	mov	r3, r0
 800b09c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b09e:	7dfb      	ldrb	r3, [r7, #23]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f000 f88f 	bl	800b1c4 <USBD_Get_USB_Status>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3718      	adds	r7, #24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	607a      	str	r2, [r7, #4]
 800b0be:	603b      	str	r3, [r7, #0]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b0d2:	7af9      	ldrb	r1, [r7, #11]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	f7f6 ff46 	bl	8001f68 <HAL_PCD_EP_Receive>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0e0:	7dfb      	ldrb	r3, [r7, #23]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 f86e 	bl	800b1c4 <USBD_Get_USB_Status>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0ec:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3718      	adds	r7, #24
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	460b      	mov	r3, r1
 800b100:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b108:	78fa      	ldrb	r2, [r7, #3]
 800b10a:	4611      	mov	r1, r2
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7f6 ff5c 	bl	8001fca <HAL_PCD_EP_GetRxCount>
 800b112:	4603      	mov	r3, r0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	460b      	mov	r3, r1
 800b126:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b128:	78fb      	ldrb	r3, [r7, #3]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d002      	beq.n	800b134 <HAL_PCDEx_LPM_Callback+0x18>
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d013      	beq.n	800b15a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b132:	e023      	b.n	800b17c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	7a5b      	ldrb	r3, [r3, #9]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d007      	beq.n	800b14c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b13c:	f000 f83c 	bl	800b1b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b140:	4b10      	ldr	r3, [pc, #64]	; (800b184 <HAL_PCDEx_LPM_Callback+0x68>)
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	4a0f      	ldr	r2, [pc, #60]	; (800b184 <HAL_PCDEx_LPM_Callback+0x68>)
 800b146:	f023 0306 	bic.w	r3, r3, #6
 800b14a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b152:	4618      	mov	r0, r3
 800b154:	f7fe fb82 	bl	800985c <USBD_LL_Resume>
    break;
 800b158:	e010      	b.n	800b17c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b160:	4618      	mov	r0, r3
 800b162:	f7fe fb65 	bl	8009830 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	7a5b      	ldrb	r3, [r3, #9]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d005      	beq.n	800b17a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b16e:	4b05      	ldr	r3, [pc, #20]	; (800b184 <HAL_PCDEx_LPM_Callback+0x68>)
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	4a04      	ldr	r2, [pc, #16]	; (800b184 <HAL_PCDEx_LPM_Callback+0x68>)
 800b174:	f043 0306 	orr.w	r3, r3, #6
 800b178:	6113      	str	r3, [r2, #16]
    break;
 800b17a:	bf00      	nop
}
 800b17c:	bf00      	nop
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	e000ed00 	.word	0xe000ed00

0800b188 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b190:	4b03      	ldr	r3, [pc, #12]	; (800b1a0 <USBD_static_malloc+0x18>)
}
 800b192:	4618      	mov	r0, r3
 800b194:	370c      	adds	r7, #12
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	20002ba8 	.word	0x20002ba8

0800b1a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]

}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b1bc:	f7f5 fa9e 	bl	80006fc <SystemClock_Config>
}
 800b1c0:	bf00      	nop
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1d2:	79fb      	ldrb	r3, [r7, #7]
 800b1d4:	2b03      	cmp	r3, #3
 800b1d6:	d817      	bhi.n	800b208 <USBD_Get_USB_Status+0x44>
 800b1d8:	a201      	add	r2, pc, #4	; (adr r2, 800b1e0 <USBD_Get_USB_Status+0x1c>)
 800b1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1de:	bf00      	nop
 800b1e0:	0800b1f1 	.word	0x0800b1f1
 800b1e4:	0800b1f7 	.word	0x0800b1f7
 800b1e8:	0800b1fd 	.word	0x0800b1fd
 800b1ec:	0800b203 	.word	0x0800b203
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1f4:	e00b      	b.n	800b20e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b1fa:	e008      	b.n	800b20e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b200:	e005      	b.n	800b20e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b202:	2303      	movs	r3, #3
 800b204:	73fb      	strb	r3, [r7, #15]
    break;
 800b206:	e002      	b.n	800b20e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b208:	2303      	movs	r3, #3
 800b20a:	73fb      	strb	r3, [r7, #15]
    break;
 800b20c:	bf00      	nop
  }
  return usb_status;
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <main>:


#include "main.h"

int main(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	af00      	add	r7, sp, #0
  hwInit();
 800b220:	f7f5 ff76 	bl	8001110 <hwInit>
  apInit();
 800b224:	f7f5 f9ca 	bl	80005bc <apInit>

  apMain();
 800b228:	f7f5 f9d2 	bl	80005d0 <apMain>
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	bd80      	pop	{r7, pc}

0800b232 <_vsniprintf_r>:
 800b232:	b530      	push	{r4, r5, lr}
 800b234:	4614      	mov	r4, r2
 800b236:	2c00      	cmp	r4, #0
 800b238:	b09b      	sub	sp, #108	; 0x6c
 800b23a:	4605      	mov	r5, r0
 800b23c:	461a      	mov	r2, r3
 800b23e:	da05      	bge.n	800b24c <_vsniprintf_r+0x1a>
 800b240:	238b      	movs	r3, #139	; 0x8b
 800b242:	6003      	str	r3, [r0, #0]
 800b244:	f04f 30ff 	mov.w	r0, #4294967295
 800b248:	b01b      	add	sp, #108	; 0x6c
 800b24a:	bd30      	pop	{r4, r5, pc}
 800b24c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b250:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b254:	bf14      	ite	ne
 800b256:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b25a:	4623      	moveq	r3, r4
 800b25c:	9302      	str	r3, [sp, #8]
 800b25e:	9305      	str	r3, [sp, #20]
 800b260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b264:	9100      	str	r1, [sp, #0]
 800b266:	9104      	str	r1, [sp, #16]
 800b268:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b26c:	4669      	mov	r1, sp
 800b26e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b270:	f000 f99e 	bl	800b5b0 <_svfiprintf_r>
 800b274:	1c43      	adds	r3, r0, #1
 800b276:	bfbc      	itt	lt
 800b278:	238b      	movlt	r3, #139	; 0x8b
 800b27a:	602b      	strlt	r3, [r5, #0]
 800b27c:	2c00      	cmp	r4, #0
 800b27e:	d0e3      	beq.n	800b248 <_vsniprintf_r+0x16>
 800b280:	9b00      	ldr	r3, [sp, #0]
 800b282:	2200      	movs	r2, #0
 800b284:	701a      	strb	r2, [r3, #0]
 800b286:	e7df      	b.n	800b248 <_vsniprintf_r+0x16>

0800b288 <vsniprintf>:
 800b288:	b507      	push	{r0, r1, r2, lr}
 800b28a:	9300      	str	r3, [sp, #0]
 800b28c:	4613      	mov	r3, r2
 800b28e:	460a      	mov	r2, r1
 800b290:	4601      	mov	r1, r0
 800b292:	4803      	ldr	r0, [pc, #12]	; (800b2a0 <vsniprintf+0x18>)
 800b294:	6800      	ldr	r0, [r0, #0]
 800b296:	f7ff ffcc 	bl	800b232 <_vsniprintf_r>
 800b29a:	b003      	add	sp, #12
 800b29c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b2a0:	200001d8 	.word	0x200001d8

0800b2a4 <memset>:
 800b2a4:	4402      	add	r2, r0
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d100      	bne.n	800b2ae <memset+0xa>
 800b2ac:	4770      	bx	lr
 800b2ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b2b2:	e7f9      	b.n	800b2a8 <memset+0x4>

0800b2b4 <__errno>:
 800b2b4:	4b01      	ldr	r3, [pc, #4]	; (800b2bc <__errno+0x8>)
 800b2b6:	6818      	ldr	r0, [r3, #0]
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	200001d8 	.word	0x200001d8

0800b2c0 <__libc_init_array>:
 800b2c0:	b570      	push	{r4, r5, r6, lr}
 800b2c2:	4d0d      	ldr	r5, [pc, #52]	; (800b2f8 <__libc_init_array+0x38>)
 800b2c4:	4c0d      	ldr	r4, [pc, #52]	; (800b2fc <__libc_init_array+0x3c>)
 800b2c6:	1b64      	subs	r4, r4, r5
 800b2c8:	10a4      	asrs	r4, r4, #2
 800b2ca:	2600      	movs	r6, #0
 800b2cc:	42a6      	cmp	r6, r4
 800b2ce:	d109      	bne.n	800b2e4 <__libc_init_array+0x24>
 800b2d0:	4d0b      	ldr	r5, [pc, #44]	; (800b300 <__libc_init_array+0x40>)
 800b2d2:	4c0c      	ldr	r4, [pc, #48]	; (800b304 <__libc_init_array+0x44>)
 800b2d4:	f000 fc6a 	bl	800bbac <_init>
 800b2d8:	1b64      	subs	r4, r4, r5
 800b2da:	10a4      	asrs	r4, r4, #2
 800b2dc:	2600      	movs	r6, #0
 800b2de:	42a6      	cmp	r6, r4
 800b2e0:	d105      	bne.n	800b2ee <__libc_init_array+0x2e>
 800b2e2:	bd70      	pop	{r4, r5, r6, pc}
 800b2e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2e8:	4798      	blx	r3
 800b2ea:	3601      	adds	r6, #1
 800b2ec:	e7ee      	b.n	800b2cc <__libc_init_array+0xc>
 800b2ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2f2:	4798      	blx	r3
 800b2f4:	3601      	adds	r6, #1
 800b2f6:	e7f2      	b.n	800b2de <__libc_init_array+0x1e>
 800b2f8:	0800bc9c 	.word	0x0800bc9c
 800b2fc:	0800bc9c 	.word	0x0800bc9c
 800b300:	0800bc9c 	.word	0x0800bc9c
 800b304:	0800bca0 	.word	0x0800bca0

0800b308 <__retarget_lock_acquire_recursive>:
 800b308:	4770      	bx	lr

0800b30a <__retarget_lock_release_recursive>:
 800b30a:	4770      	bx	lr

0800b30c <_free_r>:
 800b30c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b30e:	2900      	cmp	r1, #0
 800b310:	d044      	beq.n	800b39c <_free_r+0x90>
 800b312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b316:	9001      	str	r0, [sp, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f1a1 0404 	sub.w	r4, r1, #4
 800b31e:	bfb8      	it	lt
 800b320:	18e4      	addlt	r4, r4, r3
 800b322:	f000 f8df 	bl	800b4e4 <__malloc_lock>
 800b326:	4a1e      	ldr	r2, [pc, #120]	; (800b3a0 <_free_r+0x94>)
 800b328:	9801      	ldr	r0, [sp, #4]
 800b32a:	6813      	ldr	r3, [r2, #0]
 800b32c:	b933      	cbnz	r3, 800b33c <_free_r+0x30>
 800b32e:	6063      	str	r3, [r4, #4]
 800b330:	6014      	str	r4, [r2, #0]
 800b332:	b003      	add	sp, #12
 800b334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b338:	f000 b8da 	b.w	800b4f0 <__malloc_unlock>
 800b33c:	42a3      	cmp	r3, r4
 800b33e:	d908      	bls.n	800b352 <_free_r+0x46>
 800b340:	6825      	ldr	r5, [r4, #0]
 800b342:	1961      	adds	r1, r4, r5
 800b344:	428b      	cmp	r3, r1
 800b346:	bf01      	itttt	eq
 800b348:	6819      	ldreq	r1, [r3, #0]
 800b34a:	685b      	ldreq	r3, [r3, #4]
 800b34c:	1949      	addeq	r1, r1, r5
 800b34e:	6021      	streq	r1, [r4, #0]
 800b350:	e7ed      	b.n	800b32e <_free_r+0x22>
 800b352:	461a      	mov	r2, r3
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	b10b      	cbz	r3, 800b35c <_free_r+0x50>
 800b358:	42a3      	cmp	r3, r4
 800b35a:	d9fa      	bls.n	800b352 <_free_r+0x46>
 800b35c:	6811      	ldr	r1, [r2, #0]
 800b35e:	1855      	adds	r5, r2, r1
 800b360:	42a5      	cmp	r5, r4
 800b362:	d10b      	bne.n	800b37c <_free_r+0x70>
 800b364:	6824      	ldr	r4, [r4, #0]
 800b366:	4421      	add	r1, r4
 800b368:	1854      	adds	r4, r2, r1
 800b36a:	42a3      	cmp	r3, r4
 800b36c:	6011      	str	r1, [r2, #0]
 800b36e:	d1e0      	bne.n	800b332 <_free_r+0x26>
 800b370:	681c      	ldr	r4, [r3, #0]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	6053      	str	r3, [r2, #4]
 800b376:	440c      	add	r4, r1
 800b378:	6014      	str	r4, [r2, #0]
 800b37a:	e7da      	b.n	800b332 <_free_r+0x26>
 800b37c:	d902      	bls.n	800b384 <_free_r+0x78>
 800b37e:	230c      	movs	r3, #12
 800b380:	6003      	str	r3, [r0, #0]
 800b382:	e7d6      	b.n	800b332 <_free_r+0x26>
 800b384:	6825      	ldr	r5, [r4, #0]
 800b386:	1961      	adds	r1, r4, r5
 800b388:	428b      	cmp	r3, r1
 800b38a:	bf04      	itt	eq
 800b38c:	6819      	ldreq	r1, [r3, #0]
 800b38e:	685b      	ldreq	r3, [r3, #4]
 800b390:	6063      	str	r3, [r4, #4]
 800b392:	bf04      	itt	eq
 800b394:	1949      	addeq	r1, r1, r5
 800b396:	6021      	streq	r1, [r4, #0]
 800b398:	6054      	str	r4, [r2, #4]
 800b39a:	e7ca      	b.n	800b332 <_free_r+0x26>
 800b39c:	b003      	add	sp, #12
 800b39e:	bd30      	pop	{r4, r5, pc}
 800b3a0:	20002f08 	.word	0x20002f08

0800b3a4 <sbrk_aligned>:
 800b3a4:	b570      	push	{r4, r5, r6, lr}
 800b3a6:	4e0e      	ldr	r6, [pc, #56]	; (800b3e0 <sbrk_aligned+0x3c>)
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	6831      	ldr	r1, [r6, #0]
 800b3ac:	4605      	mov	r5, r0
 800b3ae:	b911      	cbnz	r1, 800b3b6 <sbrk_aligned+0x12>
 800b3b0:	f000 fba6 	bl	800bb00 <_sbrk_r>
 800b3b4:	6030      	str	r0, [r6, #0]
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	f000 fba1 	bl	800bb00 <_sbrk_r>
 800b3be:	1c43      	adds	r3, r0, #1
 800b3c0:	d00a      	beq.n	800b3d8 <sbrk_aligned+0x34>
 800b3c2:	1cc4      	adds	r4, r0, #3
 800b3c4:	f024 0403 	bic.w	r4, r4, #3
 800b3c8:	42a0      	cmp	r0, r4
 800b3ca:	d007      	beq.n	800b3dc <sbrk_aligned+0x38>
 800b3cc:	1a21      	subs	r1, r4, r0
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	f000 fb96 	bl	800bb00 <_sbrk_r>
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	d101      	bne.n	800b3dc <sbrk_aligned+0x38>
 800b3d8:	f04f 34ff 	mov.w	r4, #4294967295
 800b3dc:	4620      	mov	r0, r4
 800b3de:	bd70      	pop	{r4, r5, r6, pc}
 800b3e0:	20002f0c 	.word	0x20002f0c

0800b3e4 <_malloc_r>:
 800b3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3e8:	1ccd      	adds	r5, r1, #3
 800b3ea:	f025 0503 	bic.w	r5, r5, #3
 800b3ee:	3508      	adds	r5, #8
 800b3f0:	2d0c      	cmp	r5, #12
 800b3f2:	bf38      	it	cc
 800b3f4:	250c      	movcc	r5, #12
 800b3f6:	2d00      	cmp	r5, #0
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	db01      	blt.n	800b400 <_malloc_r+0x1c>
 800b3fc:	42a9      	cmp	r1, r5
 800b3fe:	d905      	bls.n	800b40c <_malloc_r+0x28>
 800b400:	230c      	movs	r3, #12
 800b402:	603b      	str	r3, [r7, #0]
 800b404:	2600      	movs	r6, #0
 800b406:	4630      	mov	r0, r6
 800b408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b40c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b4e0 <_malloc_r+0xfc>
 800b410:	f000 f868 	bl	800b4e4 <__malloc_lock>
 800b414:	f8d8 3000 	ldr.w	r3, [r8]
 800b418:	461c      	mov	r4, r3
 800b41a:	bb5c      	cbnz	r4, 800b474 <_malloc_r+0x90>
 800b41c:	4629      	mov	r1, r5
 800b41e:	4638      	mov	r0, r7
 800b420:	f7ff ffc0 	bl	800b3a4 <sbrk_aligned>
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	4604      	mov	r4, r0
 800b428:	d155      	bne.n	800b4d6 <_malloc_r+0xf2>
 800b42a:	f8d8 4000 	ldr.w	r4, [r8]
 800b42e:	4626      	mov	r6, r4
 800b430:	2e00      	cmp	r6, #0
 800b432:	d145      	bne.n	800b4c0 <_malloc_r+0xdc>
 800b434:	2c00      	cmp	r4, #0
 800b436:	d048      	beq.n	800b4ca <_malloc_r+0xe6>
 800b438:	6823      	ldr	r3, [r4, #0]
 800b43a:	4631      	mov	r1, r6
 800b43c:	4638      	mov	r0, r7
 800b43e:	eb04 0903 	add.w	r9, r4, r3
 800b442:	f000 fb5d 	bl	800bb00 <_sbrk_r>
 800b446:	4581      	cmp	r9, r0
 800b448:	d13f      	bne.n	800b4ca <_malloc_r+0xe6>
 800b44a:	6821      	ldr	r1, [r4, #0]
 800b44c:	1a6d      	subs	r5, r5, r1
 800b44e:	4629      	mov	r1, r5
 800b450:	4638      	mov	r0, r7
 800b452:	f7ff ffa7 	bl	800b3a4 <sbrk_aligned>
 800b456:	3001      	adds	r0, #1
 800b458:	d037      	beq.n	800b4ca <_malloc_r+0xe6>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	442b      	add	r3, r5
 800b45e:	6023      	str	r3, [r4, #0]
 800b460:	f8d8 3000 	ldr.w	r3, [r8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d038      	beq.n	800b4da <_malloc_r+0xf6>
 800b468:	685a      	ldr	r2, [r3, #4]
 800b46a:	42a2      	cmp	r2, r4
 800b46c:	d12b      	bne.n	800b4c6 <_malloc_r+0xe2>
 800b46e:	2200      	movs	r2, #0
 800b470:	605a      	str	r2, [r3, #4]
 800b472:	e00f      	b.n	800b494 <_malloc_r+0xb0>
 800b474:	6822      	ldr	r2, [r4, #0]
 800b476:	1b52      	subs	r2, r2, r5
 800b478:	d41f      	bmi.n	800b4ba <_malloc_r+0xd6>
 800b47a:	2a0b      	cmp	r2, #11
 800b47c:	d917      	bls.n	800b4ae <_malloc_r+0xca>
 800b47e:	1961      	adds	r1, r4, r5
 800b480:	42a3      	cmp	r3, r4
 800b482:	6025      	str	r5, [r4, #0]
 800b484:	bf18      	it	ne
 800b486:	6059      	strne	r1, [r3, #4]
 800b488:	6863      	ldr	r3, [r4, #4]
 800b48a:	bf08      	it	eq
 800b48c:	f8c8 1000 	streq.w	r1, [r8]
 800b490:	5162      	str	r2, [r4, r5]
 800b492:	604b      	str	r3, [r1, #4]
 800b494:	4638      	mov	r0, r7
 800b496:	f104 060b 	add.w	r6, r4, #11
 800b49a:	f000 f829 	bl	800b4f0 <__malloc_unlock>
 800b49e:	f026 0607 	bic.w	r6, r6, #7
 800b4a2:	1d23      	adds	r3, r4, #4
 800b4a4:	1af2      	subs	r2, r6, r3
 800b4a6:	d0ae      	beq.n	800b406 <_malloc_r+0x22>
 800b4a8:	1b9b      	subs	r3, r3, r6
 800b4aa:	50a3      	str	r3, [r4, r2]
 800b4ac:	e7ab      	b.n	800b406 <_malloc_r+0x22>
 800b4ae:	42a3      	cmp	r3, r4
 800b4b0:	6862      	ldr	r2, [r4, #4]
 800b4b2:	d1dd      	bne.n	800b470 <_malloc_r+0x8c>
 800b4b4:	f8c8 2000 	str.w	r2, [r8]
 800b4b8:	e7ec      	b.n	800b494 <_malloc_r+0xb0>
 800b4ba:	4623      	mov	r3, r4
 800b4bc:	6864      	ldr	r4, [r4, #4]
 800b4be:	e7ac      	b.n	800b41a <_malloc_r+0x36>
 800b4c0:	4634      	mov	r4, r6
 800b4c2:	6876      	ldr	r6, [r6, #4]
 800b4c4:	e7b4      	b.n	800b430 <_malloc_r+0x4c>
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	e7cc      	b.n	800b464 <_malloc_r+0x80>
 800b4ca:	230c      	movs	r3, #12
 800b4cc:	603b      	str	r3, [r7, #0]
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	f000 f80e 	bl	800b4f0 <__malloc_unlock>
 800b4d4:	e797      	b.n	800b406 <_malloc_r+0x22>
 800b4d6:	6025      	str	r5, [r4, #0]
 800b4d8:	e7dc      	b.n	800b494 <_malloc_r+0xb0>
 800b4da:	605b      	str	r3, [r3, #4]
 800b4dc:	deff      	udf	#255	; 0xff
 800b4de:	bf00      	nop
 800b4e0:	20002f08 	.word	0x20002f08

0800b4e4 <__malloc_lock>:
 800b4e4:	4801      	ldr	r0, [pc, #4]	; (800b4ec <__malloc_lock+0x8>)
 800b4e6:	f7ff bf0f 	b.w	800b308 <__retarget_lock_acquire_recursive>
 800b4ea:	bf00      	nop
 800b4ec:	20002f04 	.word	0x20002f04

0800b4f0 <__malloc_unlock>:
 800b4f0:	4801      	ldr	r0, [pc, #4]	; (800b4f8 <__malloc_unlock+0x8>)
 800b4f2:	f7ff bf0a 	b.w	800b30a <__retarget_lock_release_recursive>
 800b4f6:	bf00      	nop
 800b4f8:	20002f04 	.word	0x20002f04

0800b4fc <__ssputs_r>:
 800b4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b500:	688e      	ldr	r6, [r1, #8]
 800b502:	461f      	mov	r7, r3
 800b504:	42be      	cmp	r6, r7
 800b506:	680b      	ldr	r3, [r1, #0]
 800b508:	4682      	mov	sl, r0
 800b50a:	460c      	mov	r4, r1
 800b50c:	4690      	mov	r8, r2
 800b50e:	d82c      	bhi.n	800b56a <__ssputs_r+0x6e>
 800b510:	898a      	ldrh	r2, [r1, #12]
 800b512:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b516:	d026      	beq.n	800b566 <__ssputs_r+0x6a>
 800b518:	6965      	ldr	r5, [r4, #20]
 800b51a:	6909      	ldr	r1, [r1, #16]
 800b51c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b520:	eba3 0901 	sub.w	r9, r3, r1
 800b524:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b528:	1c7b      	adds	r3, r7, #1
 800b52a:	444b      	add	r3, r9
 800b52c:	106d      	asrs	r5, r5, #1
 800b52e:	429d      	cmp	r5, r3
 800b530:	bf38      	it	cc
 800b532:	461d      	movcc	r5, r3
 800b534:	0553      	lsls	r3, r2, #21
 800b536:	d527      	bpl.n	800b588 <__ssputs_r+0x8c>
 800b538:	4629      	mov	r1, r5
 800b53a:	f7ff ff53 	bl	800b3e4 <_malloc_r>
 800b53e:	4606      	mov	r6, r0
 800b540:	b360      	cbz	r0, 800b59c <__ssputs_r+0xa0>
 800b542:	6921      	ldr	r1, [r4, #16]
 800b544:	464a      	mov	r2, r9
 800b546:	f000 faeb 	bl	800bb20 <memcpy>
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b554:	81a3      	strh	r3, [r4, #12]
 800b556:	6126      	str	r6, [r4, #16]
 800b558:	6165      	str	r5, [r4, #20]
 800b55a:	444e      	add	r6, r9
 800b55c:	eba5 0509 	sub.w	r5, r5, r9
 800b560:	6026      	str	r6, [r4, #0]
 800b562:	60a5      	str	r5, [r4, #8]
 800b564:	463e      	mov	r6, r7
 800b566:	42be      	cmp	r6, r7
 800b568:	d900      	bls.n	800b56c <__ssputs_r+0x70>
 800b56a:	463e      	mov	r6, r7
 800b56c:	6820      	ldr	r0, [r4, #0]
 800b56e:	4632      	mov	r2, r6
 800b570:	4641      	mov	r1, r8
 800b572:	f000 faab 	bl	800bacc <memmove>
 800b576:	68a3      	ldr	r3, [r4, #8]
 800b578:	1b9b      	subs	r3, r3, r6
 800b57a:	60a3      	str	r3, [r4, #8]
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	4433      	add	r3, r6
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	2000      	movs	r0, #0
 800b584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b588:	462a      	mov	r2, r5
 800b58a:	f000 fad7 	bl	800bb3c <_realloc_r>
 800b58e:	4606      	mov	r6, r0
 800b590:	2800      	cmp	r0, #0
 800b592:	d1e0      	bne.n	800b556 <__ssputs_r+0x5a>
 800b594:	6921      	ldr	r1, [r4, #16]
 800b596:	4650      	mov	r0, sl
 800b598:	f7ff feb8 	bl	800b30c <_free_r>
 800b59c:	230c      	movs	r3, #12
 800b59e:	f8ca 3000 	str.w	r3, [sl]
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5a8:	81a3      	strh	r3, [r4, #12]
 800b5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ae:	e7e9      	b.n	800b584 <__ssputs_r+0x88>

0800b5b0 <_svfiprintf_r>:
 800b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b4:	4698      	mov	r8, r3
 800b5b6:	898b      	ldrh	r3, [r1, #12]
 800b5b8:	061b      	lsls	r3, r3, #24
 800b5ba:	b09d      	sub	sp, #116	; 0x74
 800b5bc:	4607      	mov	r7, r0
 800b5be:	460d      	mov	r5, r1
 800b5c0:	4614      	mov	r4, r2
 800b5c2:	d50e      	bpl.n	800b5e2 <_svfiprintf_r+0x32>
 800b5c4:	690b      	ldr	r3, [r1, #16]
 800b5c6:	b963      	cbnz	r3, 800b5e2 <_svfiprintf_r+0x32>
 800b5c8:	2140      	movs	r1, #64	; 0x40
 800b5ca:	f7ff ff0b 	bl	800b3e4 <_malloc_r>
 800b5ce:	6028      	str	r0, [r5, #0]
 800b5d0:	6128      	str	r0, [r5, #16]
 800b5d2:	b920      	cbnz	r0, 800b5de <_svfiprintf_r+0x2e>
 800b5d4:	230c      	movs	r3, #12
 800b5d6:	603b      	str	r3, [r7, #0]
 800b5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5dc:	e0d0      	b.n	800b780 <_svfiprintf_r+0x1d0>
 800b5de:	2340      	movs	r3, #64	; 0x40
 800b5e0:	616b      	str	r3, [r5, #20]
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5e6:	2320      	movs	r3, #32
 800b5e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5f0:	2330      	movs	r3, #48	; 0x30
 800b5f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b798 <_svfiprintf_r+0x1e8>
 800b5f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5fa:	f04f 0901 	mov.w	r9, #1
 800b5fe:	4623      	mov	r3, r4
 800b600:	469a      	mov	sl, r3
 800b602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b606:	b10a      	cbz	r2, 800b60c <_svfiprintf_r+0x5c>
 800b608:	2a25      	cmp	r2, #37	; 0x25
 800b60a:	d1f9      	bne.n	800b600 <_svfiprintf_r+0x50>
 800b60c:	ebba 0b04 	subs.w	fp, sl, r4
 800b610:	d00b      	beq.n	800b62a <_svfiprintf_r+0x7a>
 800b612:	465b      	mov	r3, fp
 800b614:	4622      	mov	r2, r4
 800b616:	4629      	mov	r1, r5
 800b618:	4638      	mov	r0, r7
 800b61a:	f7ff ff6f 	bl	800b4fc <__ssputs_r>
 800b61e:	3001      	adds	r0, #1
 800b620:	f000 80a9 	beq.w	800b776 <_svfiprintf_r+0x1c6>
 800b624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b626:	445a      	add	r2, fp
 800b628:	9209      	str	r2, [sp, #36]	; 0x24
 800b62a:	f89a 3000 	ldrb.w	r3, [sl]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	f000 80a1 	beq.w	800b776 <_svfiprintf_r+0x1c6>
 800b634:	2300      	movs	r3, #0
 800b636:	f04f 32ff 	mov.w	r2, #4294967295
 800b63a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b63e:	f10a 0a01 	add.w	sl, sl, #1
 800b642:	9304      	str	r3, [sp, #16]
 800b644:	9307      	str	r3, [sp, #28]
 800b646:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b64a:	931a      	str	r3, [sp, #104]	; 0x68
 800b64c:	4654      	mov	r4, sl
 800b64e:	2205      	movs	r2, #5
 800b650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b654:	4850      	ldr	r0, [pc, #320]	; (800b798 <_svfiprintf_r+0x1e8>)
 800b656:	f7f4 fde3 	bl	8000220 <memchr>
 800b65a:	9a04      	ldr	r2, [sp, #16]
 800b65c:	b9d8      	cbnz	r0, 800b696 <_svfiprintf_r+0xe6>
 800b65e:	06d0      	lsls	r0, r2, #27
 800b660:	bf44      	itt	mi
 800b662:	2320      	movmi	r3, #32
 800b664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b668:	0711      	lsls	r1, r2, #28
 800b66a:	bf44      	itt	mi
 800b66c:	232b      	movmi	r3, #43	; 0x2b
 800b66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b672:	f89a 3000 	ldrb.w	r3, [sl]
 800b676:	2b2a      	cmp	r3, #42	; 0x2a
 800b678:	d015      	beq.n	800b6a6 <_svfiprintf_r+0xf6>
 800b67a:	9a07      	ldr	r2, [sp, #28]
 800b67c:	4654      	mov	r4, sl
 800b67e:	2000      	movs	r0, #0
 800b680:	f04f 0c0a 	mov.w	ip, #10
 800b684:	4621      	mov	r1, r4
 800b686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b68a:	3b30      	subs	r3, #48	; 0x30
 800b68c:	2b09      	cmp	r3, #9
 800b68e:	d94d      	bls.n	800b72c <_svfiprintf_r+0x17c>
 800b690:	b1b0      	cbz	r0, 800b6c0 <_svfiprintf_r+0x110>
 800b692:	9207      	str	r2, [sp, #28]
 800b694:	e014      	b.n	800b6c0 <_svfiprintf_r+0x110>
 800b696:	eba0 0308 	sub.w	r3, r0, r8
 800b69a:	fa09 f303 	lsl.w	r3, r9, r3
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	9304      	str	r3, [sp, #16]
 800b6a2:	46a2      	mov	sl, r4
 800b6a4:	e7d2      	b.n	800b64c <_svfiprintf_r+0x9c>
 800b6a6:	9b03      	ldr	r3, [sp, #12]
 800b6a8:	1d19      	adds	r1, r3, #4
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	9103      	str	r1, [sp, #12]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	bfbb      	ittet	lt
 800b6b2:	425b      	neglt	r3, r3
 800b6b4:	f042 0202 	orrlt.w	r2, r2, #2
 800b6b8:	9307      	strge	r3, [sp, #28]
 800b6ba:	9307      	strlt	r3, [sp, #28]
 800b6bc:	bfb8      	it	lt
 800b6be:	9204      	strlt	r2, [sp, #16]
 800b6c0:	7823      	ldrb	r3, [r4, #0]
 800b6c2:	2b2e      	cmp	r3, #46	; 0x2e
 800b6c4:	d10c      	bne.n	800b6e0 <_svfiprintf_r+0x130>
 800b6c6:	7863      	ldrb	r3, [r4, #1]
 800b6c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b6ca:	d134      	bne.n	800b736 <_svfiprintf_r+0x186>
 800b6cc:	9b03      	ldr	r3, [sp, #12]
 800b6ce:	1d1a      	adds	r2, r3, #4
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	9203      	str	r2, [sp, #12]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	bfb8      	it	lt
 800b6d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6dc:	3402      	adds	r4, #2
 800b6de:	9305      	str	r3, [sp, #20]
 800b6e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b7a8 <_svfiprintf_r+0x1f8>
 800b6e4:	7821      	ldrb	r1, [r4, #0]
 800b6e6:	2203      	movs	r2, #3
 800b6e8:	4650      	mov	r0, sl
 800b6ea:	f7f4 fd99 	bl	8000220 <memchr>
 800b6ee:	b138      	cbz	r0, 800b700 <_svfiprintf_r+0x150>
 800b6f0:	9b04      	ldr	r3, [sp, #16]
 800b6f2:	eba0 000a 	sub.w	r0, r0, sl
 800b6f6:	2240      	movs	r2, #64	; 0x40
 800b6f8:	4082      	lsls	r2, r0
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	3401      	adds	r4, #1
 800b6fe:	9304      	str	r3, [sp, #16]
 800b700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b704:	4825      	ldr	r0, [pc, #148]	; (800b79c <_svfiprintf_r+0x1ec>)
 800b706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b70a:	2206      	movs	r2, #6
 800b70c:	f7f4 fd88 	bl	8000220 <memchr>
 800b710:	2800      	cmp	r0, #0
 800b712:	d038      	beq.n	800b786 <_svfiprintf_r+0x1d6>
 800b714:	4b22      	ldr	r3, [pc, #136]	; (800b7a0 <_svfiprintf_r+0x1f0>)
 800b716:	bb1b      	cbnz	r3, 800b760 <_svfiprintf_r+0x1b0>
 800b718:	9b03      	ldr	r3, [sp, #12]
 800b71a:	3307      	adds	r3, #7
 800b71c:	f023 0307 	bic.w	r3, r3, #7
 800b720:	3308      	adds	r3, #8
 800b722:	9303      	str	r3, [sp, #12]
 800b724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b726:	4433      	add	r3, r6
 800b728:	9309      	str	r3, [sp, #36]	; 0x24
 800b72a:	e768      	b.n	800b5fe <_svfiprintf_r+0x4e>
 800b72c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b730:	460c      	mov	r4, r1
 800b732:	2001      	movs	r0, #1
 800b734:	e7a6      	b.n	800b684 <_svfiprintf_r+0xd4>
 800b736:	2300      	movs	r3, #0
 800b738:	3401      	adds	r4, #1
 800b73a:	9305      	str	r3, [sp, #20]
 800b73c:	4619      	mov	r1, r3
 800b73e:	f04f 0c0a 	mov.w	ip, #10
 800b742:	4620      	mov	r0, r4
 800b744:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b748:	3a30      	subs	r2, #48	; 0x30
 800b74a:	2a09      	cmp	r2, #9
 800b74c:	d903      	bls.n	800b756 <_svfiprintf_r+0x1a6>
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d0c6      	beq.n	800b6e0 <_svfiprintf_r+0x130>
 800b752:	9105      	str	r1, [sp, #20]
 800b754:	e7c4      	b.n	800b6e0 <_svfiprintf_r+0x130>
 800b756:	fb0c 2101 	mla	r1, ip, r1, r2
 800b75a:	4604      	mov	r4, r0
 800b75c:	2301      	movs	r3, #1
 800b75e:	e7f0      	b.n	800b742 <_svfiprintf_r+0x192>
 800b760:	ab03      	add	r3, sp, #12
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	462a      	mov	r2, r5
 800b766:	4b0f      	ldr	r3, [pc, #60]	; (800b7a4 <_svfiprintf_r+0x1f4>)
 800b768:	a904      	add	r1, sp, #16
 800b76a:	4638      	mov	r0, r7
 800b76c:	f3af 8000 	nop.w
 800b770:	1c42      	adds	r2, r0, #1
 800b772:	4606      	mov	r6, r0
 800b774:	d1d6      	bne.n	800b724 <_svfiprintf_r+0x174>
 800b776:	89ab      	ldrh	r3, [r5, #12]
 800b778:	065b      	lsls	r3, r3, #25
 800b77a:	f53f af2d 	bmi.w	800b5d8 <_svfiprintf_r+0x28>
 800b77e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b780:	b01d      	add	sp, #116	; 0x74
 800b782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b786:	ab03      	add	r3, sp, #12
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	462a      	mov	r2, r5
 800b78c:	4b05      	ldr	r3, [pc, #20]	; (800b7a4 <_svfiprintf_r+0x1f4>)
 800b78e:	a904      	add	r1, sp, #16
 800b790:	4638      	mov	r0, r7
 800b792:	f000 f879 	bl	800b888 <_printf_i>
 800b796:	e7eb      	b.n	800b770 <_svfiprintf_r+0x1c0>
 800b798:	0800bc60 	.word	0x0800bc60
 800b79c:	0800bc6a 	.word	0x0800bc6a
 800b7a0:	00000000 	.word	0x00000000
 800b7a4:	0800b4fd 	.word	0x0800b4fd
 800b7a8:	0800bc66 	.word	0x0800bc66

0800b7ac <_printf_common>:
 800b7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b0:	4616      	mov	r6, r2
 800b7b2:	4699      	mov	r9, r3
 800b7b4:	688a      	ldr	r2, [r1, #8]
 800b7b6:	690b      	ldr	r3, [r1, #16]
 800b7b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	bfb8      	it	lt
 800b7c0:	4613      	movlt	r3, r2
 800b7c2:	6033      	str	r3, [r6, #0]
 800b7c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7c8:	4607      	mov	r7, r0
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	b10a      	cbz	r2, 800b7d2 <_printf_common+0x26>
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	6033      	str	r3, [r6, #0]
 800b7d2:	6823      	ldr	r3, [r4, #0]
 800b7d4:	0699      	lsls	r1, r3, #26
 800b7d6:	bf42      	ittt	mi
 800b7d8:	6833      	ldrmi	r3, [r6, #0]
 800b7da:	3302      	addmi	r3, #2
 800b7dc:	6033      	strmi	r3, [r6, #0]
 800b7de:	6825      	ldr	r5, [r4, #0]
 800b7e0:	f015 0506 	ands.w	r5, r5, #6
 800b7e4:	d106      	bne.n	800b7f4 <_printf_common+0x48>
 800b7e6:	f104 0a19 	add.w	sl, r4, #25
 800b7ea:	68e3      	ldr	r3, [r4, #12]
 800b7ec:	6832      	ldr	r2, [r6, #0]
 800b7ee:	1a9b      	subs	r3, r3, r2
 800b7f0:	42ab      	cmp	r3, r5
 800b7f2:	dc26      	bgt.n	800b842 <_printf_common+0x96>
 800b7f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7f8:	1e13      	subs	r3, r2, #0
 800b7fa:	6822      	ldr	r2, [r4, #0]
 800b7fc:	bf18      	it	ne
 800b7fe:	2301      	movne	r3, #1
 800b800:	0692      	lsls	r2, r2, #26
 800b802:	d42b      	bmi.n	800b85c <_printf_common+0xb0>
 800b804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b808:	4649      	mov	r1, r9
 800b80a:	4638      	mov	r0, r7
 800b80c:	47c0      	blx	r8
 800b80e:	3001      	adds	r0, #1
 800b810:	d01e      	beq.n	800b850 <_printf_common+0xa4>
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	6922      	ldr	r2, [r4, #16]
 800b816:	f003 0306 	and.w	r3, r3, #6
 800b81a:	2b04      	cmp	r3, #4
 800b81c:	bf02      	ittt	eq
 800b81e:	68e5      	ldreq	r5, [r4, #12]
 800b820:	6833      	ldreq	r3, [r6, #0]
 800b822:	1aed      	subeq	r5, r5, r3
 800b824:	68a3      	ldr	r3, [r4, #8]
 800b826:	bf0c      	ite	eq
 800b828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b82c:	2500      	movne	r5, #0
 800b82e:	4293      	cmp	r3, r2
 800b830:	bfc4      	itt	gt
 800b832:	1a9b      	subgt	r3, r3, r2
 800b834:	18ed      	addgt	r5, r5, r3
 800b836:	2600      	movs	r6, #0
 800b838:	341a      	adds	r4, #26
 800b83a:	42b5      	cmp	r5, r6
 800b83c:	d11a      	bne.n	800b874 <_printf_common+0xc8>
 800b83e:	2000      	movs	r0, #0
 800b840:	e008      	b.n	800b854 <_printf_common+0xa8>
 800b842:	2301      	movs	r3, #1
 800b844:	4652      	mov	r2, sl
 800b846:	4649      	mov	r1, r9
 800b848:	4638      	mov	r0, r7
 800b84a:	47c0      	blx	r8
 800b84c:	3001      	adds	r0, #1
 800b84e:	d103      	bne.n	800b858 <_printf_common+0xac>
 800b850:	f04f 30ff 	mov.w	r0, #4294967295
 800b854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b858:	3501      	adds	r5, #1
 800b85a:	e7c6      	b.n	800b7ea <_printf_common+0x3e>
 800b85c:	18e1      	adds	r1, r4, r3
 800b85e:	1c5a      	adds	r2, r3, #1
 800b860:	2030      	movs	r0, #48	; 0x30
 800b862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b866:	4422      	add	r2, r4
 800b868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b86c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b870:	3302      	adds	r3, #2
 800b872:	e7c7      	b.n	800b804 <_printf_common+0x58>
 800b874:	2301      	movs	r3, #1
 800b876:	4622      	mov	r2, r4
 800b878:	4649      	mov	r1, r9
 800b87a:	4638      	mov	r0, r7
 800b87c:	47c0      	blx	r8
 800b87e:	3001      	adds	r0, #1
 800b880:	d0e6      	beq.n	800b850 <_printf_common+0xa4>
 800b882:	3601      	adds	r6, #1
 800b884:	e7d9      	b.n	800b83a <_printf_common+0x8e>
	...

0800b888 <_printf_i>:
 800b888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b88c:	7e0f      	ldrb	r7, [r1, #24]
 800b88e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b890:	2f78      	cmp	r7, #120	; 0x78
 800b892:	4691      	mov	r9, r2
 800b894:	4680      	mov	r8, r0
 800b896:	460c      	mov	r4, r1
 800b898:	469a      	mov	sl, r3
 800b89a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b89e:	d807      	bhi.n	800b8b0 <_printf_i+0x28>
 800b8a0:	2f62      	cmp	r7, #98	; 0x62
 800b8a2:	d80a      	bhi.n	800b8ba <_printf_i+0x32>
 800b8a4:	2f00      	cmp	r7, #0
 800b8a6:	f000 80d4 	beq.w	800ba52 <_printf_i+0x1ca>
 800b8aa:	2f58      	cmp	r7, #88	; 0x58
 800b8ac:	f000 80c0 	beq.w	800ba30 <_printf_i+0x1a8>
 800b8b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b8b8:	e03a      	b.n	800b930 <_printf_i+0xa8>
 800b8ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b8be:	2b15      	cmp	r3, #21
 800b8c0:	d8f6      	bhi.n	800b8b0 <_printf_i+0x28>
 800b8c2:	a101      	add	r1, pc, #4	; (adr r1, 800b8c8 <_printf_i+0x40>)
 800b8c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8c8:	0800b921 	.word	0x0800b921
 800b8cc:	0800b935 	.word	0x0800b935
 800b8d0:	0800b8b1 	.word	0x0800b8b1
 800b8d4:	0800b8b1 	.word	0x0800b8b1
 800b8d8:	0800b8b1 	.word	0x0800b8b1
 800b8dc:	0800b8b1 	.word	0x0800b8b1
 800b8e0:	0800b935 	.word	0x0800b935
 800b8e4:	0800b8b1 	.word	0x0800b8b1
 800b8e8:	0800b8b1 	.word	0x0800b8b1
 800b8ec:	0800b8b1 	.word	0x0800b8b1
 800b8f0:	0800b8b1 	.word	0x0800b8b1
 800b8f4:	0800ba39 	.word	0x0800ba39
 800b8f8:	0800b961 	.word	0x0800b961
 800b8fc:	0800b9f3 	.word	0x0800b9f3
 800b900:	0800b8b1 	.word	0x0800b8b1
 800b904:	0800b8b1 	.word	0x0800b8b1
 800b908:	0800ba5b 	.word	0x0800ba5b
 800b90c:	0800b8b1 	.word	0x0800b8b1
 800b910:	0800b961 	.word	0x0800b961
 800b914:	0800b8b1 	.word	0x0800b8b1
 800b918:	0800b8b1 	.word	0x0800b8b1
 800b91c:	0800b9fb 	.word	0x0800b9fb
 800b920:	682b      	ldr	r3, [r5, #0]
 800b922:	1d1a      	adds	r2, r3, #4
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	602a      	str	r2, [r5, #0]
 800b928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b92c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b930:	2301      	movs	r3, #1
 800b932:	e09f      	b.n	800ba74 <_printf_i+0x1ec>
 800b934:	6820      	ldr	r0, [r4, #0]
 800b936:	682b      	ldr	r3, [r5, #0]
 800b938:	0607      	lsls	r7, r0, #24
 800b93a:	f103 0104 	add.w	r1, r3, #4
 800b93e:	6029      	str	r1, [r5, #0]
 800b940:	d501      	bpl.n	800b946 <_printf_i+0xbe>
 800b942:	681e      	ldr	r6, [r3, #0]
 800b944:	e003      	b.n	800b94e <_printf_i+0xc6>
 800b946:	0646      	lsls	r6, r0, #25
 800b948:	d5fb      	bpl.n	800b942 <_printf_i+0xba>
 800b94a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b94e:	2e00      	cmp	r6, #0
 800b950:	da03      	bge.n	800b95a <_printf_i+0xd2>
 800b952:	232d      	movs	r3, #45	; 0x2d
 800b954:	4276      	negs	r6, r6
 800b956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b95a:	485a      	ldr	r0, [pc, #360]	; (800bac4 <_printf_i+0x23c>)
 800b95c:	230a      	movs	r3, #10
 800b95e:	e012      	b.n	800b986 <_printf_i+0xfe>
 800b960:	682b      	ldr	r3, [r5, #0]
 800b962:	6820      	ldr	r0, [r4, #0]
 800b964:	1d19      	adds	r1, r3, #4
 800b966:	6029      	str	r1, [r5, #0]
 800b968:	0605      	lsls	r5, r0, #24
 800b96a:	d501      	bpl.n	800b970 <_printf_i+0xe8>
 800b96c:	681e      	ldr	r6, [r3, #0]
 800b96e:	e002      	b.n	800b976 <_printf_i+0xee>
 800b970:	0641      	lsls	r1, r0, #25
 800b972:	d5fb      	bpl.n	800b96c <_printf_i+0xe4>
 800b974:	881e      	ldrh	r6, [r3, #0]
 800b976:	4853      	ldr	r0, [pc, #332]	; (800bac4 <_printf_i+0x23c>)
 800b978:	2f6f      	cmp	r7, #111	; 0x6f
 800b97a:	bf0c      	ite	eq
 800b97c:	2308      	moveq	r3, #8
 800b97e:	230a      	movne	r3, #10
 800b980:	2100      	movs	r1, #0
 800b982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b986:	6865      	ldr	r5, [r4, #4]
 800b988:	60a5      	str	r5, [r4, #8]
 800b98a:	2d00      	cmp	r5, #0
 800b98c:	bfa2      	ittt	ge
 800b98e:	6821      	ldrge	r1, [r4, #0]
 800b990:	f021 0104 	bicge.w	r1, r1, #4
 800b994:	6021      	strge	r1, [r4, #0]
 800b996:	b90e      	cbnz	r6, 800b99c <_printf_i+0x114>
 800b998:	2d00      	cmp	r5, #0
 800b99a:	d04b      	beq.n	800ba34 <_printf_i+0x1ac>
 800b99c:	4615      	mov	r5, r2
 800b99e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b9a2:	fb03 6711 	mls	r7, r3, r1, r6
 800b9a6:	5dc7      	ldrb	r7, [r0, r7]
 800b9a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b9ac:	4637      	mov	r7, r6
 800b9ae:	42bb      	cmp	r3, r7
 800b9b0:	460e      	mov	r6, r1
 800b9b2:	d9f4      	bls.n	800b99e <_printf_i+0x116>
 800b9b4:	2b08      	cmp	r3, #8
 800b9b6:	d10b      	bne.n	800b9d0 <_printf_i+0x148>
 800b9b8:	6823      	ldr	r3, [r4, #0]
 800b9ba:	07de      	lsls	r6, r3, #31
 800b9bc:	d508      	bpl.n	800b9d0 <_printf_i+0x148>
 800b9be:	6923      	ldr	r3, [r4, #16]
 800b9c0:	6861      	ldr	r1, [r4, #4]
 800b9c2:	4299      	cmp	r1, r3
 800b9c4:	bfde      	ittt	le
 800b9c6:	2330      	movle	r3, #48	; 0x30
 800b9c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9d0:	1b52      	subs	r2, r2, r5
 800b9d2:	6122      	str	r2, [r4, #16]
 800b9d4:	f8cd a000 	str.w	sl, [sp]
 800b9d8:	464b      	mov	r3, r9
 800b9da:	aa03      	add	r2, sp, #12
 800b9dc:	4621      	mov	r1, r4
 800b9de:	4640      	mov	r0, r8
 800b9e0:	f7ff fee4 	bl	800b7ac <_printf_common>
 800b9e4:	3001      	adds	r0, #1
 800b9e6:	d14a      	bne.n	800ba7e <_printf_i+0x1f6>
 800b9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ec:	b004      	add	sp, #16
 800b9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	f043 0320 	orr.w	r3, r3, #32
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	4833      	ldr	r0, [pc, #204]	; (800bac8 <_printf_i+0x240>)
 800b9fc:	2778      	movs	r7, #120	; 0x78
 800b9fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ba02:	6823      	ldr	r3, [r4, #0]
 800ba04:	6829      	ldr	r1, [r5, #0]
 800ba06:	061f      	lsls	r7, r3, #24
 800ba08:	f851 6b04 	ldr.w	r6, [r1], #4
 800ba0c:	d402      	bmi.n	800ba14 <_printf_i+0x18c>
 800ba0e:	065f      	lsls	r7, r3, #25
 800ba10:	bf48      	it	mi
 800ba12:	b2b6      	uxthmi	r6, r6
 800ba14:	07df      	lsls	r7, r3, #31
 800ba16:	bf48      	it	mi
 800ba18:	f043 0320 	orrmi.w	r3, r3, #32
 800ba1c:	6029      	str	r1, [r5, #0]
 800ba1e:	bf48      	it	mi
 800ba20:	6023      	strmi	r3, [r4, #0]
 800ba22:	b91e      	cbnz	r6, 800ba2c <_printf_i+0x1a4>
 800ba24:	6823      	ldr	r3, [r4, #0]
 800ba26:	f023 0320 	bic.w	r3, r3, #32
 800ba2a:	6023      	str	r3, [r4, #0]
 800ba2c:	2310      	movs	r3, #16
 800ba2e:	e7a7      	b.n	800b980 <_printf_i+0xf8>
 800ba30:	4824      	ldr	r0, [pc, #144]	; (800bac4 <_printf_i+0x23c>)
 800ba32:	e7e4      	b.n	800b9fe <_printf_i+0x176>
 800ba34:	4615      	mov	r5, r2
 800ba36:	e7bd      	b.n	800b9b4 <_printf_i+0x12c>
 800ba38:	682b      	ldr	r3, [r5, #0]
 800ba3a:	6826      	ldr	r6, [r4, #0]
 800ba3c:	6961      	ldr	r1, [r4, #20]
 800ba3e:	1d18      	adds	r0, r3, #4
 800ba40:	6028      	str	r0, [r5, #0]
 800ba42:	0635      	lsls	r5, r6, #24
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	d501      	bpl.n	800ba4c <_printf_i+0x1c4>
 800ba48:	6019      	str	r1, [r3, #0]
 800ba4a:	e002      	b.n	800ba52 <_printf_i+0x1ca>
 800ba4c:	0670      	lsls	r0, r6, #25
 800ba4e:	d5fb      	bpl.n	800ba48 <_printf_i+0x1c0>
 800ba50:	8019      	strh	r1, [r3, #0]
 800ba52:	2300      	movs	r3, #0
 800ba54:	6123      	str	r3, [r4, #16]
 800ba56:	4615      	mov	r5, r2
 800ba58:	e7bc      	b.n	800b9d4 <_printf_i+0x14c>
 800ba5a:	682b      	ldr	r3, [r5, #0]
 800ba5c:	1d1a      	adds	r2, r3, #4
 800ba5e:	602a      	str	r2, [r5, #0]
 800ba60:	681d      	ldr	r5, [r3, #0]
 800ba62:	6862      	ldr	r2, [r4, #4]
 800ba64:	2100      	movs	r1, #0
 800ba66:	4628      	mov	r0, r5
 800ba68:	f7f4 fbda 	bl	8000220 <memchr>
 800ba6c:	b108      	cbz	r0, 800ba72 <_printf_i+0x1ea>
 800ba6e:	1b40      	subs	r0, r0, r5
 800ba70:	6060      	str	r0, [r4, #4]
 800ba72:	6863      	ldr	r3, [r4, #4]
 800ba74:	6123      	str	r3, [r4, #16]
 800ba76:	2300      	movs	r3, #0
 800ba78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba7c:	e7aa      	b.n	800b9d4 <_printf_i+0x14c>
 800ba7e:	6923      	ldr	r3, [r4, #16]
 800ba80:	462a      	mov	r2, r5
 800ba82:	4649      	mov	r1, r9
 800ba84:	4640      	mov	r0, r8
 800ba86:	47d0      	blx	sl
 800ba88:	3001      	adds	r0, #1
 800ba8a:	d0ad      	beq.n	800b9e8 <_printf_i+0x160>
 800ba8c:	6823      	ldr	r3, [r4, #0]
 800ba8e:	079b      	lsls	r3, r3, #30
 800ba90:	d413      	bmi.n	800baba <_printf_i+0x232>
 800ba92:	68e0      	ldr	r0, [r4, #12]
 800ba94:	9b03      	ldr	r3, [sp, #12]
 800ba96:	4298      	cmp	r0, r3
 800ba98:	bfb8      	it	lt
 800ba9a:	4618      	movlt	r0, r3
 800ba9c:	e7a6      	b.n	800b9ec <_printf_i+0x164>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	4632      	mov	r2, r6
 800baa2:	4649      	mov	r1, r9
 800baa4:	4640      	mov	r0, r8
 800baa6:	47d0      	blx	sl
 800baa8:	3001      	adds	r0, #1
 800baaa:	d09d      	beq.n	800b9e8 <_printf_i+0x160>
 800baac:	3501      	adds	r5, #1
 800baae:	68e3      	ldr	r3, [r4, #12]
 800bab0:	9903      	ldr	r1, [sp, #12]
 800bab2:	1a5b      	subs	r3, r3, r1
 800bab4:	42ab      	cmp	r3, r5
 800bab6:	dcf2      	bgt.n	800ba9e <_printf_i+0x216>
 800bab8:	e7eb      	b.n	800ba92 <_printf_i+0x20a>
 800baba:	2500      	movs	r5, #0
 800babc:	f104 0619 	add.w	r6, r4, #25
 800bac0:	e7f5      	b.n	800baae <_printf_i+0x226>
 800bac2:	bf00      	nop
 800bac4:	0800bc71 	.word	0x0800bc71
 800bac8:	0800bc82 	.word	0x0800bc82

0800bacc <memmove>:
 800bacc:	4288      	cmp	r0, r1
 800bace:	b510      	push	{r4, lr}
 800bad0:	eb01 0402 	add.w	r4, r1, r2
 800bad4:	d902      	bls.n	800badc <memmove+0x10>
 800bad6:	4284      	cmp	r4, r0
 800bad8:	4623      	mov	r3, r4
 800bada:	d807      	bhi.n	800baec <memmove+0x20>
 800badc:	1e43      	subs	r3, r0, #1
 800bade:	42a1      	cmp	r1, r4
 800bae0:	d008      	beq.n	800baf4 <memmove+0x28>
 800bae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baea:	e7f8      	b.n	800bade <memmove+0x12>
 800baec:	4402      	add	r2, r0
 800baee:	4601      	mov	r1, r0
 800baf0:	428a      	cmp	r2, r1
 800baf2:	d100      	bne.n	800baf6 <memmove+0x2a>
 800baf4:	bd10      	pop	{r4, pc}
 800baf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bafa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bafe:	e7f7      	b.n	800baf0 <memmove+0x24>

0800bb00 <_sbrk_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	4d06      	ldr	r5, [pc, #24]	; (800bb1c <_sbrk_r+0x1c>)
 800bb04:	2300      	movs	r3, #0
 800bb06:	4604      	mov	r4, r0
 800bb08:	4608      	mov	r0, r1
 800bb0a:	602b      	str	r3, [r5, #0]
 800bb0c:	f7f4 feac 	bl	8000868 <_sbrk>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d102      	bne.n	800bb1a <_sbrk_r+0x1a>
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	b103      	cbz	r3, 800bb1a <_sbrk_r+0x1a>
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	20002f00 	.word	0x20002f00

0800bb20 <memcpy>:
 800bb20:	440a      	add	r2, r1
 800bb22:	4291      	cmp	r1, r2
 800bb24:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb28:	d100      	bne.n	800bb2c <memcpy+0xc>
 800bb2a:	4770      	bx	lr
 800bb2c:	b510      	push	{r4, lr}
 800bb2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb36:	4291      	cmp	r1, r2
 800bb38:	d1f9      	bne.n	800bb2e <memcpy+0xe>
 800bb3a:	bd10      	pop	{r4, pc}

0800bb3c <_realloc_r>:
 800bb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb40:	4680      	mov	r8, r0
 800bb42:	4614      	mov	r4, r2
 800bb44:	460e      	mov	r6, r1
 800bb46:	b921      	cbnz	r1, 800bb52 <_realloc_r+0x16>
 800bb48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	f7ff bc49 	b.w	800b3e4 <_malloc_r>
 800bb52:	b92a      	cbnz	r2, 800bb60 <_realloc_r+0x24>
 800bb54:	f7ff fbda 	bl	800b30c <_free_r>
 800bb58:	4625      	mov	r5, r4
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb60:	f000 f81b 	bl	800bb9a <_malloc_usable_size_r>
 800bb64:	4284      	cmp	r4, r0
 800bb66:	4607      	mov	r7, r0
 800bb68:	d802      	bhi.n	800bb70 <_realloc_r+0x34>
 800bb6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb6e:	d812      	bhi.n	800bb96 <_realloc_r+0x5a>
 800bb70:	4621      	mov	r1, r4
 800bb72:	4640      	mov	r0, r8
 800bb74:	f7ff fc36 	bl	800b3e4 <_malloc_r>
 800bb78:	4605      	mov	r5, r0
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	d0ed      	beq.n	800bb5a <_realloc_r+0x1e>
 800bb7e:	42bc      	cmp	r4, r7
 800bb80:	4622      	mov	r2, r4
 800bb82:	4631      	mov	r1, r6
 800bb84:	bf28      	it	cs
 800bb86:	463a      	movcs	r2, r7
 800bb88:	f7ff ffca 	bl	800bb20 <memcpy>
 800bb8c:	4631      	mov	r1, r6
 800bb8e:	4640      	mov	r0, r8
 800bb90:	f7ff fbbc 	bl	800b30c <_free_r>
 800bb94:	e7e1      	b.n	800bb5a <_realloc_r+0x1e>
 800bb96:	4635      	mov	r5, r6
 800bb98:	e7df      	b.n	800bb5a <_realloc_r+0x1e>

0800bb9a <_malloc_usable_size_r>:
 800bb9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb9e:	1f18      	subs	r0, r3, #4
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	bfbc      	itt	lt
 800bba4:	580b      	ldrlt	r3, [r1, r0]
 800bba6:	18c0      	addlt	r0, r0, r3
 800bba8:	4770      	bx	lr
	...

0800bbac <_init>:
 800bbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbae:	bf00      	nop
 800bbb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbb2:	bc08      	pop	{r3}
 800bbb4:	469e      	mov	lr, r3
 800bbb6:	4770      	bx	lr

0800bbb8 <_fini>:
 800bbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbba:	bf00      	nop
 800bbbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbbe:	bc08      	pop	{r3}
 800bbc0:	469e      	mov	lr, r3
 800bbc2:	4770      	bx	lr
